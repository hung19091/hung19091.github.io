// lib: , url: package:battlecross/eventWidget/eventMethod.dart

// class id: 1048645, size: 0x8
class :: {

  static _ getCustomEventString(/* No info */) {
    // ** addr: 0x86a3d4, size: 0x19698
    // 0x86a3d4: EnterFrame
    //     0x86a3d4: stp             fp, lr, [SP, #-0x10]!
    //     0x86a3d8: mov             fp, SP
    // 0x86a3dc: AllocStack(0xa8)
    //     0x86a3dc: sub             SP, SP, #0xa8
    // 0x86a3e0: SetupParameters(dynamic _ /* r1 => r1, fp-0x28 */, {dynamic code2 = Null /* r3, fp-0x20 */, dynamic code3 = Null /* r5, fp-0x18 */, dynamic index = Null /* r6, fp-0x10 */, dynamic weather = "sunny" /* r0, fp-0x8 */})
    //     0x86a3e0: stur            x1, [fp, #-0x28]
    //     0x86a3e4: ldur            w0, [x4, #0x13]
    //     0x86a3e8: add             x0, x0, HEAP, lsl #32
    //     0x86a3ec: ldur            w2, [x4, #0x1f]
    //     0x86a3f0: add             x2, x2, HEAP, lsl #32
    //     0x86a3f4: add             x16, PP, #0xf, lsl #12  ; [pp+0xfcf8] "code2"
    //     0x86a3f8: ldr             x16, [x16, #0xcf8]
    //     0x86a3fc: cmp             w2, w16
    //     0x86a400: b.ne            #0x86a428
    //     0x86a404: nop             
    //     0x86a408: ldur            w2, [x4, #0x23]
    //     0x86a40c: add             x2, x2, HEAP, lsl #32
    //     0x86a410: sub             w3, w0, w2
    //     0x86a414: add             x2, fp, w3, sxtw #2
    //     0x86a418: ldr             x2, [x2, #8]
    //     0x86a41c: mov             x3, x2
    //     0x86a420: movz            x2, #0x1
    //     0x86a424: b               #0x86a430
    //     0x86a428: mov             x3, NULL
    //     0x86a42c: movz            x2, #0
    //     0x86a430: stur            x3, [fp, #-0x20]
    //     0x86a434: lsl             x5, x2, #1
    //     0x86a438: lsl             w6, w5, #1
    //     0x86a43c: add             w7, w6, #8
    //     0x86a440: add             x16, x4, w7, sxtw #1
    //     0x86a444: ldur            w8, [x16, #0xf]
    //     0x86a448: add             x8, x8, HEAP, lsl #32
    //     0x86a44c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd00] "code3"
    //     0x86a450: ldr             x16, [x16, #0xd00]
    //     0x86a454: cmp             w8, w16
    //     0x86a458: b.ne            #0x86a490
    //     0x86a45c: nop             
    //     0x86a460: add             w2, w6, #0xa
    //     0x86a464: add             x16, x4, w2, sxtw #1
    //     0x86a468: ldur            w6, [x16, #0xf]
    //     0x86a46c: add             x6, x6, HEAP, lsl #32
    //     0x86a470: sub             w2, w0, w6
    //     0x86a474: add             x6, fp, w2, sxtw #2
    //     0x86a478: ldr             x6, [x6, #8]
    //     0x86a47c: add             w2, w5, #2
    //     0x86a480: sbfx            x5, x2, #1, #0x1f
    //     0x86a484: mov             x2, x5
    //     0x86a488: mov             x5, x6
    //     0x86a48c: b               #0x86a494
    //     0x86a490: mov             x5, NULL
    //     0x86a494: stur            x5, [fp, #-0x18]
    //     0x86a498: lsl             x6, x2, #1
    //     0x86a49c: lsl             w7, w6, #1
    //     0x86a4a0: add             w8, w7, #8
    //     0x86a4a4: add             x16, x4, w8, sxtw #1
    //     0x86a4a8: ldur            w9, [x16, #0xf]
    //     0x86a4ac: add             x9, x9, HEAP, lsl #32
    //     0x86a4b0: ldr             x16, [PP, #0x7d48]  ; [pp+0x7d48] "index"
    //     0x86a4b4: cmp             w9, w16
    //     0x86a4b8: b.ne            #0x86a4f0
    //     0x86a4bc: nop             
    //     0x86a4c0: add             w2, w7, #0xa
    //     0x86a4c4: add             x16, x4, w2, sxtw #1
    //     0x86a4c8: ldur            w7, [x16, #0xf]
    //     0x86a4cc: add             x7, x7, HEAP, lsl #32
    //     0x86a4d0: sub             w2, w0, w7
    //     0x86a4d4: add             x7, fp, w2, sxtw #2
    //     0x86a4d8: ldr             x7, [x7, #8]
    //     0x86a4dc: add             w2, w6, #2
    //     0x86a4e0: sbfx            x6, x2, #1, #0x1f
    //     0x86a4e4: mov             x2, x6
    //     0x86a4e8: mov             x6, x7
    //     0x86a4ec: b               #0x86a4f4
    //     0x86a4f0: mov             x6, NULL
    //     0x86a4f4: stur            x6, [fp, #-0x10]
    //     0x86a4f8: lsl             x7, x2, #1
    //     0x86a4fc: lsl             w2, w7, #1
    //     0x86a500: add             w7, w2, #8
    //     0x86a504: add             x16, x4, w7, sxtw #1
    //     0x86a508: ldur            w8, [x16, #0xf]
    //     0x86a50c: add             x8, x8, HEAP, lsl #32
    //     0x86a510: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd08] "weather"
    //     0x86a514: ldr             x16, [x16, #0xd08]
    //     0x86a518: cmp             w8, w16
    //     0x86a51c: b.ne            #0x86a544
    //     0x86a520: nop             
    //     0x86a524: add             w7, w2, #0xa
    //     0x86a528: add             x16, x4, w7, sxtw #1
    //     0x86a52c: ldur            w2, [x16, #0xf]
    //     0x86a530: add             x2, x2, HEAP, lsl #32
    //     0x86a534: sub             w4, w0, w2
    //     0x86a538: add             x0, fp, w4, sxtw #2
    //     0x86a53c: ldr             x0, [x0, #8]
    //     0x86a540: b               #0x86a54c
    //     0x86a544: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd10] "sunny"
    //     0x86a548: ldr             x0, [x0, #0xd10]
    //     0x86a54c: stur            x0, [fp, #-8]
    // 0x86a550: CheckStackOverflow
    //     0x86a550: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x86a554: cmp             SP, x16
    //     0x86a558: b.ls            #0x8838e0
    //     0x86a55c: nop             
    // 0x86a560: r16 = "rizeNerf"
    //     0x86a560: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd18] "rizeNerf"
    //     0x86a564: ldr             x16, [x16, #0xd18]
    // 0x86a568: stp             x1, x16, [SP]
    // 0x86a56c: r0 = ==()
    //     0x86a56c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a570: tbnz            w0, #4, #0x86a608
    // 0x86a574: nop             
    // 0x86a578: r0 = LoadStaticField(0xb54)
    //     0x86a578: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86a57c: ldr             x0, [x0, #0x16a8]
    // 0x86a580: cmp             w0, NULL
    // 0x86a584: b.ne            #0x86a594
    // 0x86a588: nop             
    // 0x86a58c: r0 = Null
    //     0x86a58c: mov             x0, NULL
    // 0x86a590: b               #0x86a5bc
    // 0x86a594: r17 = 327
    //     0x86a594: movz            x17, #0x147
    // 0x86a598: ldr             w1, [x0, x17]
    // 0x86a59c: DecompressPointer r1
    //     0x86a59c: add             x1, x1, HEAP, lsl #32
    // 0x86a5a0: r0 = LoadClassIdInstr(r1)
    //     0x86a5a0: ldur            x0, [x1, #-1]
    //     0x86a5a4: ubfx            x0, x0, #0xc, #0x14
    // 0x86a5a8: r2 = "storyPreJudgement.RizeNerf"
    //     0x86a5a8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd20] "storyPreJudgement.RizeNerf"
    //     0x86a5ac: ldr             x2, [x2, #0xd20]
    // 0x86a5b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86a5b0: sub             lr, x0, #0xb4
    //     0x86a5b4: ldr             lr, [x21, lr, lsl #3]
    //     0x86a5b8: blr             lr
    // 0x86a5bc: r1 = 59
    //     0x86a5bc: movz            x1, #0x3b
    // 0x86a5c0: branchIfSmi(r0, 0x86a5d0)
    //     0x86a5c0: tbz             w0, #0, #0x86a5d0
    //     0x86a5c4: nop             
    // 0x86a5c8: r1 = LoadClassIdInstr(r0)
    //     0x86a5c8: ldur            x1, [x0, #-1]
    //     0x86a5cc: ubfx            x1, x1, #0xc, #0x14
    // 0x86a5d0: r16 = true
    //     0x86a5d0: add             x16, NULL, #0x20  ; true
    // 0x86a5d4: stp             x16, x0, [SP]
    // 0x86a5d8: mov             x0, x1
    // 0x86a5dc: mov             lr, x0
    // 0x86a5e0: ldr             lr, [x21, lr, lsl #3]
    // 0x86a5e4: blr             lr
    // 0x86a5e8: tbnz            w0, #4, #0x86a5fc
    // 0x86a5ec: nop             
    // 0x86a5f0: r0 = "rize0"
    //     0x86a5f0: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd28] "rize0"
    //     0x86a5f4: ldr             x0, [x0, #0xd28]
    // 0x86a5f8: b               #0x8838b4
    // 0x86a5fc: r0 = "rize"
    //     0x86a5fc: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd30] "rize"
    //     0x86a600: ldr             x0, [x0, #0xd30]
    // 0x86a604: b               #0x8838b4
    // 0x86a608: r16 = "nekoSkill"
    //     0x86a608: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd38] "nekoSkill"
    //     0x86a60c: ldr             x16, [x16, #0xd38]
    // 0x86a610: ldur            lr, [fp, #-0x28]
    // 0x86a614: stp             lr, x16, [SP]
    // 0x86a618: r0 = ==()
    //     0x86a618: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a61c: tbnz            w0, #4, #0x86a6b4
    // 0x86a620: nop             
    // 0x86a624: r0 = LoadStaticField(0xb54)
    //     0x86a624: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86a628: ldr             x0, [x0, #0x16a8]
    // 0x86a62c: cmp             w0, NULL
    // 0x86a630: b.ne            #0x86a640
    // 0x86a634: nop             
    // 0x86a638: r0 = Null
    //     0x86a638: mov             x0, NULL
    // 0x86a63c: b               #0x86a668
    // 0x86a640: r17 = 327
    //     0x86a640: movz            x17, #0x147
    // 0x86a644: ldr             w1, [x0, x17]
    // 0x86a648: DecompressPointer r1
    //     0x86a648: add             x1, x1, HEAP, lsl #32
    // 0x86a64c: r0 = LoadClassIdInstr(r1)
    //     0x86a64c: ldur            x0, [x1, #-1]
    //     0x86a650: ubfx            x0, x0, #0xc, #0x14
    // 0x86a654: r2 = "hellMode"
    //     0x86a654: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x86a658: ldr             x2, [x2, #0xd40]
    // 0x86a65c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86a65c: sub             lr, x0, #0xb4
    //     0x86a660: ldr             lr, [x21, lr, lsl #3]
    //     0x86a664: blr             lr
    // 0x86a668: r1 = 59
    //     0x86a668: movz            x1, #0x3b
    // 0x86a66c: branchIfSmi(r0, 0x86a67c)
    //     0x86a66c: tbz             w0, #0, #0x86a67c
    //     0x86a670: nop             
    // 0x86a674: r1 = LoadClassIdInstr(r0)
    //     0x86a674: ldur            x1, [x0, #-1]
    //     0x86a678: ubfx            x1, x1, #0xc, #0x14
    // 0x86a67c: r16 = true
    //     0x86a67c: add             x16, NULL, #0x20  ; true
    // 0x86a680: stp             x16, x0, [SP]
    // 0x86a684: mov             x0, x1
    // 0x86a688: mov             lr, x0
    // 0x86a68c: ldr             lr, [x21, lr, lsl #3]
    // 0x86a690: blr             lr
    // 0x86a694: tbnz            w0, #4, #0x86a6a8
    // 0x86a698: nop             
    // 0x86a69c: r0 = "tigerleap"
    //     0x86a69c: add             x0, PP, #0xf, lsl #12  ; [pp+0xf898] "tigerleap"
    //     0x86a6a0: ldr             x0, [x0, #0x898]
    // 0x86a6a4: b               #0x8838b4
    // 0x86a6a8: r0 = "catleap"
    //     0x86a6a8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf818] "catleap"
    //     0x86a6ac: ldr             x0, [x0, #0x818]
    // 0x86a6b0: b               #0x8838b4
    // 0x86a6b4: r16 = "prisonGuardSkill"
    //     0x86a6b4: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd48] "prisonGuardSkill"
    //     0x86a6b8: ldr             x16, [x16, #0xd48]
    // 0x86a6bc: ldur            lr, [fp, #-0x28]
    // 0x86a6c0: stp             lr, x16, [SP]
    // 0x86a6c4: r0 = ==()
    //     0x86a6c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a6c8: tbnz            w0, #4, #0x86a760
    // 0x86a6cc: nop             
    // 0x86a6d0: r0 = LoadStaticField(0xb54)
    //     0x86a6d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86a6d4: ldr             x0, [x0, #0x16a8]
    // 0x86a6d8: cmp             w0, NULL
    // 0x86a6dc: b.ne            #0x86a6ec
    // 0x86a6e0: nop             
    // 0x86a6e4: r0 = Null
    //     0x86a6e4: mov             x0, NULL
    // 0x86a6e8: b               #0x86a714
    // 0x86a6ec: r17 = 327
    //     0x86a6ec: movz            x17, #0x147
    // 0x86a6f0: ldr             w1, [x0, x17]
    // 0x86a6f4: DecompressPointer r1
    //     0x86a6f4: add             x1, x1, HEAP, lsl #32
    // 0x86a6f8: r0 = LoadClassIdInstr(r1)
    //     0x86a6f8: ldur            x0, [x1, #-1]
    //     0x86a6fc: ubfx            x0, x0, #0xc, #0x14
    // 0x86a700: r2 = "hellMode"
    //     0x86a700: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x86a704: ldr             x2, [x2, #0xd40]
    // 0x86a708: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86a708: sub             lr, x0, #0xb4
    //     0x86a70c: ldr             lr, [x21, lr, lsl #3]
    //     0x86a710: blr             lr
    // 0x86a714: r1 = 59
    //     0x86a714: movz            x1, #0x3b
    // 0x86a718: branchIfSmi(r0, 0x86a728)
    //     0x86a718: tbz             w0, #0, #0x86a728
    //     0x86a71c: nop             
    // 0x86a720: r1 = LoadClassIdInstr(r0)
    //     0x86a720: ldur            x1, [x0, #-1]
    //     0x86a724: ubfx            x1, x1, #0xc, #0x14
    // 0x86a728: r16 = true
    //     0x86a728: add             x16, NULL, #0x20  ; true
    // 0x86a72c: stp             x16, x0, [SP]
    // 0x86a730: mov             x0, x1
    // 0x86a734: mov             lr, x0
    // 0x86a738: ldr             lr, [x21, lr, lsl #3]
    // 0x86a73c: blr             lr
    // 0x86a740: tbnz            w0, #4, #0x86a754
    // 0x86a744: nop             
    // 0x86a748: r0 = "retaliate"
    //     0x86a748: add             x0, PP, #0xf, lsl #12  ; [pp+0xf7f0] "retaliate"
    //     0x86a74c: ldr             x0, [x0, #0x7f0]
    // 0x86a750: b               #0x8838b4
    // 0x86a754: r0 = "slowdown"
    //     0x86a754: add             x0, PP, #0xf, lsl #12  ; [pp+0xf5b0] "slowdown"
    //     0x86a758: ldr             x0, [x0, #0x5b0]
    // 0x86a75c: b               #0x8838b4
    // 0x86a760: r16 = "rizePrisonSkill"
    //     0x86a760: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd50] "rizePrisonSkill"
    //     0x86a764: ldr             x16, [x16, #0xd50]
    // 0x86a768: ldur            lr, [fp, #-0x28]
    // 0x86a76c: stp             lr, x16, [SP]
    // 0x86a770: r0 = ==()
    //     0x86a770: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a774: tbnz            w0, #4, #0x86a80c
    // 0x86a778: nop             
    // 0x86a77c: r0 = LoadStaticField(0xb54)
    //     0x86a77c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86a780: ldr             x0, [x0, #0x16a8]
    // 0x86a784: cmp             w0, NULL
    // 0x86a788: b.ne            #0x86a798
    // 0x86a78c: nop             
    // 0x86a790: r0 = Null
    //     0x86a790: mov             x0, NULL
    // 0x86a794: b               #0x86a7c0
    // 0x86a798: r17 = 327
    //     0x86a798: movz            x17, #0x147
    // 0x86a79c: ldr             w1, [x0, x17]
    // 0x86a7a0: DecompressPointer r1
    //     0x86a7a0: add             x1, x1, HEAP, lsl #32
    // 0x86a7a4: r0 = LoadClassIdInstr(r1)
    //     0x86a7a4: ldur            x0, [x1, #-1]
    //     0x86a7a8: ubfx            x0, x0, #0xc, #0x14
    // 0x86a7ac: r2 = "hellMode"
    //     0x86a7ac: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x86a7b0: ldr             x2, [x2, #0xd40]
    // 0x86a7b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86a7b4: sub             lr, x0, #0xb4
    //     0x86a7b8: ldr             lr, [x21, lr, lsl #3]
    //     0x86a7bc: blr             lr
    // 0x86a7c0: r1 = 59
    //     0x86a7c0: movz            x1, #0x3b
    // 0x86a7c4: branchIfSmi(r0, 0x86a7d4)
    //     0x86a7c4: tbz             w0, #0, #0x86a7d4
    //     0x86a7c8: nop             
    // 0x86a7cc: r1 = LoadClassIdInstr(r0)
    //     0x86a7cc: ldur            x1, [x0, #-1]
    //     0x86a7d0: ubfx            x1, x1, #0xc, #0x14
    // 0x86a7d4: r16 = true
    //     0x86a7d4: add             x16, NULL, #0x20  ; true
    // 0x86a7d8: stp             x16, x0, [SP]
    // 0x86a7dc: mov             x0, x1
    // 0x86a7e0: mov             lr, x0
    // 0x86a7e4: ldr             lr, [x21, lr, lsl #3]
    // 0x86a7e8: blr             lr
    // 0x86a7ec: tbnz            w0, #4, #0x86a800
    // 0x86a7f0: nop             
    // 0x86a7f4: r0 = "lifeforce"
    //     0x86a7f4: add             x0, PP, #0xf, lsl #12  ; [pp+0xf888] "lifeforce"
    //     0x86a7f8: ldr             x0, [x0, #0x888]
    // 0x86a7fc: b               #0x8838b4
    // 0x86a800: r0 = "extremeaction"
    //     0x86a800: add             x0, PP, #0xf, lsl #12  ; [pp+0xf548] "extremeaction"
    //     0x86a804: ldr             x0, [x0, #0x548]
    // 0x86a808: b               #0x8838b4
    // 0x86a80c: r16 = "checkWeather"
    //     0x86a80c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd58] "checkWeather"
    //     0x86a810: ldr             x16, [x16, #0xd58]
    // 0x86a814: ldur            lr, [fp, #-0x28]
    // 0x86a818: stp             lr, x16, [SP]
    // 0x86a81c: r0 = ==()
    //     0x86a81c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a820: tbnz            w0, #4, #0x86a88c
    // 0x86a824: nop             
    // 0x86a828: ldur            x0, [fp, #-0x20]
    // 0x86a82c: cmp             w0, NULL
    // 0x86a830: b.ne            #0x86a83c
    // 0x86a834: nop             
    // 0x86a838: r0 = ""
    //     0x86a838: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86a83c: stur            x0, [fp, #-0x30]
    // 0x86a840: r0 = currentWeather()
    //     0x86a840: bl              #0x8dc12c  ; [package:battlecross/globals.dart] ::currentWeather
    // 0x86a844: r1 = LoadClassIdInstr(r0)
    //     0x86a844: ldur            x1, [x0, #-1]
    //     0x86a848: ubfx            x1, x1, #0xc, #0x14
    // 0x86a84c: ldur            x16, [fp, #-8]
    // 0x86a850: stp             x16, x0, [SP]
    // 0x86a854: mov             x0, x1
    // 0x86a858: mov             lr, x0
    // 0x86a85c: ldr             lr, [x21, lr, lsl #3]
    // 0x86a860: blr             lr
    // 0x86a864: tbnz            w0, #4, #0x86a884
    // 0x86a868: nop             
    // 0x86a86c: ldur            x0, [fp, #-0x18]
    // 0x86a870: cmp             w0, NULL
    // 0x86a874: b.ne            #0x8838b4
    // 0x86a878: nop             
    // 0x86a87c: r0 = ""
    //     0x86a87c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86a880: b               #0x8838b4
    // 0x86a884: ldur            x0, [fp, #-0x30]
    // 0x86a888: b               #0x8838b4
    // 0x86a88c: ldur            x0, [fp, #-0x20]
    // 0x86a890: r16 = "checkForestDirection"
    //     0x86a890: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd60] "checkForestDirection"
    //     0x86a894: ldr             x16, [x16, #0xd60]
    // 0x86a898: ldur            lr, [fp, #-0x28]
    // 0x86a89c: stp             lr, x16, [SP]
    // 0x86a8a0: r0 = ==()
    //     0x86a8a0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a8a4: tbnz            w0, #4, #0x86a9b8
    // 0x86a8a8: nop             
    // 0x86a8ac: ldur            x0, [fp, #-0x20]
    // 0x86a8b0: cmp             w0, NULL
    // 0x86a8b4: b.ne            #0x86a8c4
    // 0x86a8b8: nop             
    // 0x86a8bc: r3 = ""
    //     0x86a8bc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86a8c0: b               #0x86a8c8
    // 0x86a8c4: mov             x3, x0
    // 0x86a8c8: stur            x3, [fp, #-8]
    // 0x86a8cc: r0 = LoadStaticField(0xb54)
    //     0x86a8cc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86a8d0: ldr             x0, [x0, #0x16a8]
    // 0x86a8d4: cmp             w0, NULL
    // 0x86a8d8: b.ne            #0x86a8e8
    // 0x86a8dc: nop             
    // 0x86a8e0: r0 = Null
    //     0x86a8e0: mov             x0, NULL
    // 0x86a8e4: b               #0x86a910
    // 0x86a8e8: r17 = 351
    //     0x86a8e8: movz            x17, #0x15f
    // 0x86a8ec: ldr             w1, [x0, x17]
    // 0x86a8f0: DecompressPointer r1
    //     0x86a8f0: add             x1, x1, HEAP, lsl #32
    // 0x86a8f4: r0 = LoadClassIdInstr(r1)
    //     0x86a8f4: ldur            x0, [x1, #-1]
    //     0x86a8f8: ubfx            x0, x0, #0xc, #0x14
    // 0x86a8fc: r2 = "rockForestDirection"
    //     0x86a8fc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd68] "rockForestDirection"
    //     0x86a900: ldr             x2, [x2, #0xd68]
    // 0x86a904: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86a904: sub             lr, x0, #0xb4
    //     0x86a908: ldr             lr, [x21, lr, lsl #3]
    //     0x86a90c: blr             lr
    // 0x86a910: cmp             w0, NULL
    // 0x86a914: b.ne            #0x86a928
    // 0x86a918: nop             
    // 0x86a91c: r4 = "north"
    //     0x86a91c: add             x4, PP, #0xf, lsl #12  ; [pp+0xfd70] "north"
    //     0x86a920: ldr             x4, [x4, #0xd70]
    // 0x86a924: b               #0x86a92c
    // 0x86a928: mov             x4, x0
    // 0x86a92c: ldur            x3, [fp, #-8]
    // 0x86a930: mov             x0, x4
    // 0x86a934: stur            x4, [fp, #-0x18]
    // 0x86a938: r2 = Null
    //     0x86a938: mov             x2, NULL
    // 0x86a93c: r1 = Null
    //     0x86a93c: mov             x1, NULL
    // 0x86a940: r4 = 59
    //     0x86a940: movz            x4, #0x3b
    // 0x86a944: branchIfSmi(r0, 0x86a954)
    //     0x86a944: tbz             w0, #0, #0x86a954
    //     0x86a948: nop             
    // 0x86a94c: r4 = LoadClassIdInstr(r0)
    //     0x86a94c: ldur            x4, [x0, #-1]
    //     0x86a950: ubfx            x4, x4, #0xc, #0x14
    // 0x86a954: sub             x4, x4, #0x5d
    // 0x86a958: cmp             x4, #1
    // 0x86a95c: b.ls            #0x86a974
    // 0x86a960: nop             
    // 0x86a964: r8 = String
    //     0x86a964: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86a968: r3 = Null
    //     0x86a968: add             x3, PP, #0xf, lsl #12  ; [pp+0xfd78] Null
    //     0x86a96c: ldr             x3, [x3, #0xd78]
    // 0x86a970: r0 = String()
    //     0x86a970: bl              #0x1523244  ; IsType_String_Stub
    // 0x86a974: ldur            x0, [fp, #-8]
    // 0x86a978: r1 = LoadClassIdInstr(r0)
    //     0x86a978: ldur            x1, [x0, #-1]
    //     0x86a97c: ubfx            x1, x1, #0xc, #0x14
    // 0x86a980: ldur            x16, [fp, #-0x18]
    // 0x86a984: stp             x16, x0, [SP]
    // 0x86a988: mov             x0, x1
    // 0x86a98c: mov             lr, x0
    // 0x86a990: ldr             lr, [x21, lr, lsl #3]
    // 0x86a994: blr             lr
    // 0x86a998: tbnz            w0, #4, #0x86a9ac
    // 0x86a99c: nop             
    // 0x86a9a0: r0 = "correctDirection"
    //     0x86a9a0: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd88] "correctDirection"
    //     0x86a9a4: ldr             x0, [x0, #0xd88]
    // 0x86a9a8: b               #0x8838b4
    // 0x86a9ac: r0 = "wrongDirection"
    //     0x86a9ac: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd90] "wrongDirection"
    //     0x86a9b0: ldr             x0, [x0, #0xd90]
    // 0x86a9b4: b               #0x8838b4
    // 0x86a9b8: ldur            x0, [fp, #-0x20]
    // 0x86a9bc: r16 = "setForestDirection"
    //     0x86a9bc: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd98] "setForestDirection"
    //     0x86a9c0: ldr             x16, [x16, #0xd98]
    // 0x86a9c4: ldur            lr, [fp, #-0x28]
    // 0x86a9c8: stp             lr, x16, [SP]
    // 0x86a9cc: r0 = ==()
    //     0x86a9cc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86a9d0: tbnz            w0, #4, #0x86aa5c
    // 0x86a9d4: nop             
    // 0x86a9d8: r1 = Null
    //     0x86a9d8: mov             x1, NULL
    // 0x86a9dc: r2 = "east"
    //     0x86a9dc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfda0] "east"
    //     0x86a9e0: ldr             x2, [x2, #0xda0]
    // 0x86a9e4: r3 = "west"
    //     0x86a9e4: add             x3, PP, #0xf, lsl #12  ; [pp+0xfda8] "west"
    //     0x86a9e8: ldr             x3, [x3, #0xda8]
    // 0x86a9ec: r5 = "north"
    //     0x86a9ec: add             x5, PP, #0xf, lsl #12  ; [pp+0xfd70] "north"
    //     0x86a9f0: ldr             x5, [x5, #0xd70]
    // 0x86a9f4: r6 = "south"
    //     0x86a9f4: add             x6, PP, #0xf, lsl #12  ; [pp+0xfdb0] "south"
    //     0x86a9f8: ldr             x6, [x6, #0xdb0]
    // 0x86a9fc: r0 = _GrowableList._literal4()
    //     0x86a9fc: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x86aa00: mov             x1, x0
    // 0x86aa04: r0 = shuffle()
    //     0x86aa04: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86aa08: mov             x1, x0
    // 0x86aa0c: r0 = first()
    //     0x86aa0c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86aa10: mov             x3, x0
    // 0x86aa14: r2 = Null
    //     0x86aa14: mov             x2, NULL
    // 0x86aa18: r1 = Null
    //     0x86aa18: mov             x1, NULL
    // 0x86aa1c: stur            x3, [fp, #-8]
    // 0x86aa20: r4 = 59
    //     0x86aa20: movz            x4, #0x3b
    // 0x86aa24: branchIfSmi(r0, 0x86aa34)
    //     0x86aa24: tbz             w0, #0, #0x86aa34
    //     0x86aa28: nop             
    // 0x86aa2c: r4 = LoadClassIdInstr(r0)
    //     0x86aa2c: ldur            x4, [x0, #-1]
    //     0x86aa30: ubfx            x4, x4, #0xc, #0x14
    // 0x86aa34: sub             x4, x4, #0x5d
    // 0x86aa38: cmp             x4, #1
    // 0x86aa3c: b.ls            #0x86aa54
    // 0x86aa40: nop             
    // 0x86aa44: r8 = String
    //     0x86aa44: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86aa48: r3 = Null
    //     0x86aa48: add             x3, PP, #0xf, lsl #12  ; [pp+0xfdb8] Null
    //     0x86aa4c: ldr             x3, [x3, #0xdb8]
    // 0x86aa50: r0 = String()
    //     0x86aa50: bl              #0x1523244  ; IsType_String_Stub
    // 0x86aa54: ldur            x0, [fp, #-8]
    // 0x86aa58: b               #0x8838b4
    // 0x86aa5c: r16 = "forestMonkeyEscape"
    //     0x86aa5c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfdc8] "forestMonkeyEscape"
    //     0x86aa60: ldr             x16, [x16, #0xdc8]
    // 0x86aa64: ldur            lr, [fp, #-0x28]
    // 0x86aa68: stp             lr, x16, [SP]
    // 0x86aa6c: r0 = ==()
    //     0x86aa6c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86aa70: tbnz            w0, #4, #0x86aafc
    // 0x86aa74: nop             
    // 0x86aa78: r1 = Null
    //     0x86aa78: mov             x1, NULL
    // 0x86aa7c: r2 = "monkeyEscapeEast"
    //     0x86aa7c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfdd0] "monkeyEscapeEast"
    //     0x86aa80: ldr             x2, [x2, #0xdd0]
    // 0x86aa84: r3 = "monkeyEscapeWest"
    //     0x86aa84: add             x3, PP, #0xf, lsl #12  ; [pp+0xfdd8] "monkeyEscapeWest"
    //     0x86aa88: ldr             x3, [x3, #0xdd8]
    // 0x86aa8c: r5 = "monkeyEscapeNorth"
    //     0x86aa8c: add             x5, PP, #0xf, lsl #12  ; [pp+0xfde0] "monkeyEscapeNorth"
    //     0x86aa90: ldr             x5, [x5, #0xde0]
    // 0x86aa94: r6 = "monkeyEscapeSouth"
    //     0x86aa94: add             x6, PP, #0xf, lsl #12  ; [pp+0xfde8] "monkeyEscapeSouth"
    //     0x86aa98: ldr             x6, [x6, #0xde8]
    // 0x86aa9c: r0 = _GrowableList._literal4()
    //     0x86aa9c: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x86aaa0: mov             x1, x0
    // 0x86aaa4: r0 = shuffle()
    //     0x86aaa4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86aaa8: mov             x1, x0
    // 0x86aaac: r0 = first()
    //     0x86aaac: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86aab0: mov             x3, x0
    // 0x86aab4: r2 = Null
    //     0x86aab4: mov             x2, NULL
    // 0x86aab8: r1 = Null
    //     0x86aab8: mov             x1, NULL
    // 0x86aabc: stur            x3, [fp, #-8]
    // 0x86aac0: r4 = 59
    //     0x86aac0: movz            x4, #0x3b
    // 0x86aac4: branchIfSmi(r0, 0x86aad4)
    //     0x86aac4: tbz             w0, #0, #0x86aad4
    //     0x86aac8: nop             
    // 0x86aacc: r4 = LoadClassIdInstr(r0)
    //     0x86aacc: ldur            x4, [x0, #-1]
    //     0x86aad0: ubfx            x4, x4, #0xc, #0x14
    // 0x86aad4: sub             x4, x4, #0x5d
    // 0x86aad8: cmp             x4, #1
    // 0x86aadc: b.ls            #0x86aaf4
    // 0x86aae0: nop             
    // 0x86aae4: r8 = String
    //     0x86aae4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86aae8: r3 = Null
    //     0x86aae8: add             x3, PP, #0xf, lsl #12  ; [pp+0xfdf0] Null
    //     0x86aaec: ldr             x3, [x3, #0xdf0]
    // 0x86aaf0: r0 = String()
    //     0x86aaf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x86aaf4: ldur            x0, [fp, #-8]
    // 0x86aaf8: b               #0x8838b4
    // 0x86aafc: r16 = "randomTalkForest"
    //     0x86aafc: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe00] "randomTalkForest"
    //     0x86ab00: ldr             x16, [x16, #0xe00]
    // 0x86ab04: ldur            lr, [fp, #-0x28]
    // 0x86ab08: stp             lr, x16, [SP]
    // 0x86ab0c: r0 = ==()
    //     0x86ab0c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86ab10: tbnz            w0, #4, #0x86ab9c
    // 0x86ab14: nop             
    // 0x86ab18: r1 = Null
    //     0x86ab18: mov             x1, NULL
    // 0x86ab1c: r2 = "randomTalkEast"
    //     0x86ab1c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe08] "randomTalkEast"
    //     0x86ab20: ldr             x2, [x2, #0xe08]
    // 0x86ab24: r3 = "randomTalkWest"
    //     0x86ab24: add             x3, PP, #0xf, lsl #12  ; [pp+0xfe10] "randomTalkWest"
    //     0x86ab28: ldr             x3, [x3, #0xe10]
    // 0x86ab2c: r5 = "randomTalkNorth"
    //     0x86ab2c: add             x5, PP, #0xf, lsl #12  ; [pp+0xfe18] "randomTalkNorth"
    //     0x86ab30: ldr             x5, [x5, #0xe18]
    // 0x86ab34: r6 = "randomTalkSouth"
    //     0x86ab34: add             x6, PP, #0xf, lsl #12  ; [pp+0xfe20] "randomTalkSouth"
    //     0x86ab38: ldr             x6, [x6, #0xe20]
    // 0x86ab3c: r0 = _GrowableList._literal4()
    //     0x86ab3c: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x86ab40: mov             x1, x0
    // 0x86ab44: r0 = shuffle()
    //     0x86ab44: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86ab48: mov             x1, x0
    // 0x86ab4c: r0 = first()
    //     0x86ab4c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86ab50: mov             x3, x0
    // 0x86ab54: r2 = Null
    //     0x86ab54: mov             x2, NULL
    // 0x86ab58: r1 = Null
    //     0x86ab58: mov             x1, NULL
    // 0x86ab5c: stur            x3, [fp, #-8]
    // 0x86ab60: r4 = 59
    //     0x86ab60: movz            x4, #0x3b
    // 0x86ab64: branchIfSmi(r0, 0x86ab74)
    //     0x86ab64: tbz             w0, #0, #0x86ab74
    //     0x86ab68: nop             
    // 0x86ab6c: r4 = LoadClassIdInstr(r0)
    //     0x86ab6c: ldur            x4, [x0, #-1]
    //     0x86ab70: ubfx            x4, x4, #0xc, #0x14
    // 0x86ab74: sub             x4, x4, #0x5d
    // 0x86ab78: cmp             x4, #1
    // 0x86ab7c: b.ls            #0x86ab94
    // 0x86ab80: nop             
    // 0x86ab84: r8 = String
    //     0x86ab84: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86ab88: r3 = Null
    //     0x86ab88: add             x3, PP, #0xf, lsl #12  ; [pp+0xfe28] Null
    //     0x86ab8c: ldr             x3, [x3, #0xe28]
    // 0x86ab90: r0 = String()
    //     0x86ab90: bl              #0x1523244  ; IsType_String_Stub
    // 0x86ab94: ldur            x0, [fp, #-8]
    // 0x86ab98: b               #0x8838b4
    // 0x86ab9c: r16 = "checkLinkAccount"
    //     0x86ab9c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe38] "checkLinkAccount"
    //     0x86aba0: ldr             x16, [x16, #0xe38]
    // 0x86aba4: ldur            lr, [fp, #-0x28]
    // 0x86aba8: stp             lr, x16, [SP]
    // 0x86abac: r0 = ==()
    //     0x86abac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86abb0: tbnz            w0, #4, #0x86abe8
    // 0x86abb4: nop             
    // 0x86abb8: r0 = LoadStaticField(0xb60)
    //     0x86abb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86abbc: ldr             x0, [x0, #0x16c0]
    //     0x86abc0: add             x16, NULL, #0x20  ; true
    // 0x86abc4: stp             x16, x0, [SP]
    // 0x86abc8: r0 = ==()
    //     0x86abc8: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x86abcc: tbnz            w0, #4, #0x86abdc
    // 0x86abd0: nop             
    // 0x86abd4: r0 = "end"
    //     0x86abd4: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x86abd8: b               #0x8838b4
    // 0x86abdc: r0 = "linkAccount"
    //     0x86abdc: add             x0, PP, #0xf, lsl #12  ; [pp+0xfe40] "linkAccount"
    //     0x86abe0: ldr             x0, [x0, #0xe40]
    // 0x86abe4: b               #0x8838b4
    // 0x86abe8: r16 = "dailyChores"
    //     0x86abe8: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x86abec: ldr             x16, [x16, #0xe48]
    // 0x86abf0: ldur            lr, [fp, #-0x28]
    // 0x86abf4: stp             lr, x16, [SP]
    // 0x86abf8: r0 = ==()
    //     0x86abf8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86abfc: tbnz            w0, #4, #0x86ad7c
    // 0x86ac00: nop             
    // 0x86ac04: r0 = LoadStaticField(0xb54)
    //     0x86ac04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ac08: ldr             x0, [x0, #0x16a8]
    // 0x86ac0c: cmp             w0, NULL
    // 0x86ac10: b.eq            #0x86ac4c
    // 0x86ac14: nop             
    // 0x86ac18: r17 = 347
    //     0x86ac18: movz            x17, #0x15b
    // 0x86ac1c: ldr             w1, [x0, x17]
    // 0x86ac20: DecompressPointer r1
    //     0x86ac20: add             x1, x1, HEAP, lsl #32
    // 0x86ac24: r0 = LoadClassIdInstr(r1)
    //     0x86ac24: ldur            x0, [x1, #-1]
    //     0x86ac28: ubfx            x0, x0, #0xc, #0x14
    // 0x86ac2c: r2 = "dailyChores"
    //     0x86ac2c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x86ac30: ldr             x2, [x2, #0xe48]
    // 0x86ac34: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ac34: sub             lr, x0, #0xb4
    //     0x86ac38: ldr             lr, [x21, lr, lsl #3]
    //     0x86ac3c: blr             lr
    // 0x86ac40: cmp             w0, NULL
    // 0x86ac44: b.ne            #0x86ac8c
    // 0x86ac48: nop             
    // 0x86ac4c: r0 = LoadStaticField(0xb54)
    //     0x86ac4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ac50: ldr             x0, [x0, #0x16a8]
    // 0x86ac54: cmp             w0, NULL
    // 0x86ac58: b.eq            #0x86ac8c
    // 0x86ac5c: nop             
    // 0x86ac60: r17 = 347
    //     0x86ac60: movz            x17, #0x15b
    // 0x86ac64: ldr             w1, [x0, x17]
    // 0x86ac68: DecompressPointer r1
    //     0x86ac68: add             x1, x1, HEAP, lsl #32
    // 0x86ac6c: r0 = LoadClassIdInstr(r1)
    //     0x86ac6c: ldur            x0, [x1, #-1]
    //     0x86ac70: ubfx            x0, x0, #0xc, #0x14
    // 0x86ac74: r2 = "dailyChores"
    //     0x86ac74: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x86ac78: ldr             x2, [x2, #0xe48]
    // 0x86ac7c: r3 = 0
    //     0x86ac7c: movz            x3, #0
    // 0x86ac80: r0 = GDT[cid_x0 + 0x2da]()
    //     0x86ac80: add             lr, x0, #0x2da
    //     0x86ac84: ldr             lr, [x21, lr, lsl #3]
    //     0x86ac88: blr             lr
    // 0x86ac8c: r0 = LoadStaticField(0xb54)
    //     0x86ac8c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ac90: ldr             x0, [x0, #0x16a8]
    // 0x86ac94: cmp             w0, NULL
    // 0x86ac98: b.ne            #0x86aca8
    // 0x86ac9c: nop             
    // 0x86aca0: r0 = Null
    //     0x86aca0: mov             x0, NULL
    // 0x86aca4: b               #0x86acd0
    // 0x86aca8: r17 = 347
    //     0x86aca8: movz            x17, #0x15b
    // 0x86acac: ldr             w1, [x0, x17]
    // 0x86acb0: DecompressPointer r1
    //     0x86acb0: add             x1, x1, HEAP, lsl #32
    // 0x86acb4: r0 = LoadClassIdInstr(r1)
    //     0x86acb4: ldur            x0, [x1, #-1]
    //     0x86acb8: ubfx            x0, x0, #0xc, #0x14
    // 0x86acbc: r2 = "dailyChores"
    //     0x86acbc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x86acc0: ldr             x2, [x2, #0xe48]
    // 0x86acc4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86acc4: sub             lr, x0, #0xb4
    //     0x86acc8: ldr             lr, [x21, lr, lsl #3]
    //     0x86accc: blr             lr
    // 0x86acd0: cmp             w0, NULL
    // 0x86acd4: b.ne            #0x86ace4
    // 0x86acd8: nop             
    // 0x86acdc: r3 = 0
    //     0x86acdc: movz            x3, #0
    // 0x86ace0: b               #0x86ace8
    // 0x86ace4: mov             x3, x0
    // 0x86ace8: mov             x0, x3
    // 0x86acec: stur            x3, [fp, #-8]
    // 0x86acf0: r2 = Null
    //     0x86acf0: mov             x2, NULL
    // 0x86acf4: r1 = Null
    //     0x86acf4: mov             x1, NULL
    // 0x86acf8: branchIfSmi(r0, 0x86ad28)
    //     0x86acf8: tbz             w0, #0, #0x86ad28
    //     0x86acfc: nop             
    // 0x86ad00: r4 = LoadClassIdInstr(r0)
    //     0x86ad00: ldur            x4, [x0, #-1]
    //     0x86ad04: ubfx            x4, x4, #0xc, #0x14
    // 0x86ad08: sub             x4, x4, #0x3b
    // 0x86ad0c: cmp             x4, #1
    // 0x86ad10: b.ls            #0x86ad28
    // 0x86ad14: nop             
    // 0x86ad18: r8 = int
    //     0x86ad18: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86ad1c: r3 = Null
    //     0x86ad1c: add             x3, PP, #0xf, lsl #12  ; [pp+0xfe50] Null
    //     0x86ad20: ldr             x3, [x3, #0xe50]
    // 0x86ad24: r0 = int()
    //     0x86ad24: bl              #0x1524294  ; IsType_int_Stub
    // 0x86ad28: ldur            x0, [fp, #-8]
    // 0x86ad2c: r1 = 59
    //     0x86ad2c: movz            x1, #0x3b
    // 0x86ad30: branchIfSmi(r0, 0x86ad40)
    //     0x86ad30: tbz             w0, #0, #0x86ad40
    //     0x86ad34: nop             
    // 0x86ad38: r1 = LoadClassIdInstr(r0)
    //     0x86ad38: ldur            x1, [x0, #-1]
    //     0x86ad3c: ubfx            x1, x1, #0xc, #0x14
    // 0x86ad40: str             x0, [SP]
    // 0x86ad44: mov             x0, x1
    // 0x86ad48: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x86ad48: ldr             x4, [PP, #0x2a8]  ; [pp+0x2a8] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x86ad4c: r0 = GDT[cid_x0 + 0x4756]()
    //     0x86ad4c: movz            x17, #0x4756
    //     0x86ad50: add             lr, x0, x17
    //     0x86ad54: ldr             lr, [x21, lr, lsl #3]
    //     0x86ad58: blr             lr
    // 0x86ad5c: r16 = "("
    //     0x86ad5c: ldr             x16, [PP, #0x79f0]  ; [pp+0x79f0] "("
    // 0x86ad60: stp             x0, x16, [SP]
    // 0x86ad64: r0 = +()
    //     0x86ad64: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x86ad68: r16 = "/15)"
    //     0x86ad68: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe60] "/15)"
    //     0x86ad6c: ldr             x16, [x16, #0xe60]
    // 0x86ad70: stp             x16, x0, [SP]
    // 0x86ad74: r0 = +()
    //     0x86ad74: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x86ad78: b               #0x8838b4
    // 0x86ad7c: r16 = "spaPassJumpCode"
    //     0x86ad7c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe68] "spaPassJumpCode"
    //     0x86ad80: ldr             x16, [x16, #0xe68]
    // 0x86ad84: ldur            lr, [fp, #-0x28]
    // 0x86ad88: stp             lr, x16, [SP]
    // 0x86ad8c: r0 = ==()
    //     0x86ad8c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86ad90: tbnz            w0, #4, #0x86af1c
    // 0x86ad94: nop             
    // 0x86ad98: r0 = LoadStaticField(0xb54)
    //     0x86ad98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ad9c: ldr             x0, [x0, #0x16a8]
    // 0x86ada0: cmp             w0, NULL
    // 0x86ada4: b.ne            #0x86adb4
    // 0x86ada8: nop             
    // 0x86adac: r0 = Null
    //     0x86adac: mov             x0, NULL
    // 0x86adb0: b               #0x86addc
    // 0x86adb4: r17 = 331
    //     0x86adb4: movz            x17, #0x14b
    // 0x86adb8: ldr             w1, [x0, x17]
    // 0x86adbc: DecompressPointer r1
    //     0x86adbc: add             x1, x1, HEAP, lsl #32
    // 0x86adc0: r0 = LoadClassIdInstr(r1)
    //     0x86adc0: ldur            x0, [x1, #-1]
    //     0x86adc4: ubfx            x0, x0, #0xc, #0x14
    // 0x86adc8: r2 = "spaPass"
    //     0x86adc8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe70] "spaPass"
    //     0x86adcc: ldr             x2, [x2, #0xe70]
    // 0x86add0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86add0: sub             lr, x0, #0xb4
    //     0x86add4: ldr             lr, [x21, lr, lsl #3]
    //     0x86add8: blr             lr
    // 0x86addc: cmp             w0, NULL
    // 0x86ade0: b.ne            #0x86adfc
    // 0x86ade4: nop             
    // 0x86ade8: r1 = Null
    //     0x86ade8: mov             x1, NULL
    // 0x86adec: r2 = 0
    //     0x86adec: movz            x2, #0
    // 0x86adf0: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86adf0: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86adf4: mov             x3, x0
    // 0x86adf8: b               #0x86ae00
    // 0x86adfc: mov             x3, x0
    // 0x86ae00: mov             x0, x3
    // 0x86ae04: stur            x3, [fp, #-8]
    // 0x86ae08: r2 = Null
    //     0x86ae08: mov             x2, NULL
    // 0x86ae0c: r1 = Null
    //     0x86ae0c: mov             x1, NULL
    // 0x86ae10: r4 = 59
    //     0x86ae10: movz            x4, #0x3b
    // 0x86ae14: branchIfSmi(r0, 0x86ae24)
    //     0x86ae14: tbz             w0, #0, #0x86ae24
    //     0x86ae18: nop             
    // 0x86ae1c: r4 = LoadClassIdInstr(r0)
    //     0x86ae1c: ldur            x4, [x0, #-1]
    //     0x86ae20: ubfx            x4, x4, #0xc, #0x14
    // 0x86ae24: cmp             x4, #0xcdb
    // 0x86ae28: b.eq            #0x86ae44
    // 0x86ae2c: nop             
    // 0x86ae30: r8 = Timestamp
    //     0x86ae30: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86ae34: ldr             x8, [x8, #0xa30]
    // 0x86ae38: r3 = Null
    //     0x86ae38: add             x3, PP, #0xf, lsl #12  ; [pp+0xfe78] Null
    //     0x86ae3c: ldr             x3, [x3, #0xe78]
    // 0x86ae40: r0 = Timestamp()
    //     0x86ae40: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86ae44: r0 = getTrueTimestamp()
    //     0x86ae44: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86ae48: mov             x1, x0
    // 0x86ae4c: r0 = toDate()
    //     0x86ae4c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86ae50: ldur            x1, [fp, #-8]
    // 0x86ae54: stur            x0, [fp, #-8]
    // 0x86ae58: r0 = toDate()
    //     0x86ae58: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86ae5c: ldur            x1, [fp, #-8]
    // 0x86ae60: mov             x2, x0
    // 0x86ae64: r0 = difference()
    //     0x86ae64: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86ae68: mov             x1, x0
    // 0x86ae6c: r0 = inSeconds()
    //     0x86ae6c: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86ae70: mov             x1, x0
    // 0x86ae74: r0 = 604800
    //     0x86ae74: movz            x0, #0x3a80
    //     0x86ae78: movk            x0, #0x9, lsl #16
    // 0x86ae7c: sub             x2, x0, x1
    // 0x86ae80: cmp             x2, #0
    // 0x86ae84: b.gt            #0x86af04
    // 0x86ae88: nop             
    // 0x86ae8c: r0 = LoadStaticField(0xb54)
    //     0x86ae8c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ae90: ldr             x0, [x0, #0x16a8]
    // 0x86ae94: cmp             w0, NULL
    // 0x86ae98: b.ne            #0x86aea8
    // 0x86ae9c: nop             
    // 0x86aea0: r0 = Null
    //     0x86aea0: mov             x0, NULL
    // 0x86aea4: b               #0x86aed0
    // 0x86aea8: r17 = 327
    //     0x86aea8: movz            x17, #0x147
    // 0x86aeac: ldr             w1, [x0, x17]
    // 0x86aeb0: DecompressPointer r1
    //     0x86aeb0: add             x1, x1, HEAP, lsl #32
    // 0x86aeb4: r0 = LoadClassIdInstr(r1)
    //     0x86aeb4: ldur            x0, [x1, #-1]
    //     0x86aeb8: ubfx            x0, x0, #0xc, #0x14
    // 0x86aebc: r2 = "adsRemoval"
    //     0x86aebc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe88] "adsRemoval"
    //     0x86aec0: ldr             x2, [x2, #0xe88]
    // 0x86aec4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86aec4: sub             lr, x0, #0xb4
    //     0x86aec8: ldr             lr, [x21, lr, lsl #3]
    //     0x86aecc: blr             lr
    // 0x86aed0: r1 = 59
    //     0x86aed0: movz            x1, #0x3b
    // 0x86aed4: branchIfSmi(r0, 0x86aee4)
    //     0x86aed4: tbz             w0, #0, #0x86aee4
    //     0x86aed8: nop             
    // 0x86aedc: r1 = LoadClassIdInstr(r0)
    //     0x86aedc: ldur            x1, [x0, #-1]
    //     0x86aee0: ubfx            x1, x1, #0xc, #0x14
    // 0x86aee4: r16 = true
    //     0x86aee4: add             x16, NULL, #0x20  ; true
    // 0x86aee8: stp             x16, x0, [SP]
    // 0x86aeec: mov             x0, x1
    // 0x86aef0: mov             lr, x0
    // 0x86aef4: ldr             lr, [x21, lr, lsl #3]
    // 0x86aef8: blr             lr
    // 0x86aefc: tbnz            w0, #4, #0x86af10
    // 0x86af00: nop             
    // 0x86af04: r0 = "gotCard"
    //     0x86af04: add             x0, PP, #0xf, lsl #12  ; [pp+0xfe90] "gotCard"
    //     0x86af08: ldr             x0, [x0, #0xe90]
    // 0x86af0c: b               #0x8838b4
    // 0x86af10: r0 = "noCard"
    //     0x86af10: add             x0, PP, #0xf, lsl #12  ; [pp+0xfe98] "noCard"
    //     0x86af14: ldr             x0, [x0, #0xe98]
    // 0x86af18: b               #0x8838b4
    // 0x86af1c: r0 = 604800
    //     0x86af1c: movz            x0, #0x3a80
    //     0x86af20: movk            x0, #0x9, lsl #16
    // 0x86af24: r16 = "trainPassJumpCode"
    //     0x86af24: add             x16, PP, #0xf, lsl #12  ; [pp+0xfea0] "trainPassJumpCode"
    //     0x86af28: ldr             x16, [x16, #0xea0]
    // 0x86af2c: ldur            lr, [fp, #-0x28]
    // 0x86af30: stp             lr, x16, [SP]
    // 0x86af34: r0 = ==()
    //     0x86af34: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86af38: tbnz            w0, #4, #0x86b0c4
    // 0x86af3c: nop             
    // 0x86af40: r0 = LoadStaticField(0xb54)
    //     0x86af40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86af44: ldr             x0, [x0, #0x16a8]
    // 0x86af48: cmp             w0, NULL
    // 0x86af4c: b.ne            #0x86af5c
    // 0x86af50: nop             
    // 0x86af54: r0 = Null
    //     0x86af54: mov             x0, NULL
    // 0x86af58: b               #0x86af84
    // 0x86af5c: r17 = 331
    //     0x86af5c: movz            x17, #0x14b
    // 0x86af60: ldr             w1, [x0, x17]
    // 0x86af64: DecompressPointer r1
    //     0x86af64: add             x1, x1, HEAP, lsl #32
    // 0x86af68: r0 = LoadClassIdInstr(r1)
    //     0x86af68: ldur            x0, [x1, #-1]
    //     0x86af6c: ubfx            x0, x0, #0xc, #0x14
    // 0x86af70: r2 = "trainPass"
    //     0x86af70: add             x2, PP, #0xf, lsl #12  ; [pp+0xfea8] "trainPass"
    //     0x86af74: ldr             x2, [x2, #0xea8]
    // 0x86af78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86af78: sub             lr, x0, #0xb4
    //     0x86af7c: ldr             lr, [x21, lr, lsl #3]
    //     0x86af80: blr             lr
    // 0x86af84: cmp             w0, NULL
    // 0x86af88: b.ne            #0x86afa4
    // 0x86af8c: nop             
    // 0x86af90: r1 = Null
    //     0x86af90: mov             x1, NULL
    // 0x86af94: r2 = 0
    //     0x86af94: movz            x2, #0
    // 0x86af98: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86af98: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86af9c: mov             x3, x0
    // 0x86afa0: b               #0x86afa8
    // 0x86afa4: mov             x3, x0
    // 0x86afa8: mov             x0, x3
    // 0x86afac: stur            x3, [fp, #-8]
    // 0x86afb0: r2 = Null
    //     0x86afb0: mov             x2, NULL
    // 0x86afb4: r1 = Null
    //     0x86afb4: mov             x1, NULL
    // 0x86afb8: r4 = 59
    //     0x86afb8: movz            x4, #0x3b
    // 0x86afbc: branchIfSmi(r0, 0x86afcc)
    //     0x86afbc: tbz             w0, #0, #0x86afcc
    //     0x86afc0: nop             
    // 0x86afc4: r4 = LoadClassIdInstr(r0)
    //     0x86afc4: ldur            x4, [x0, #-1]
    //     0x86afc8: ubfx            x4, x4, #0xc, #0x14
    // 0x86afcc: cmp             x4, #0xcdb
    // 0x86afd0: b.eq            #0x86afec
    // 0x86afd4: nop             
    // 0x86afd8: r8 = Timestamp
    //     0x86afd8: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86afdc: ldr             x8, [x8, #0xa30]
    // 0x86afe0: r3 = Null
    //     0x86afe0: add             x3, PP, #0xf, lsl #12  ; [pp+0xfeb0] Null
    //     0x86afe4: ldr             x3, [x3, #0xeb0]
    // 0x86afe8: r0 = Timestamp()
    //     0x86afe8: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86afec: r0 = getTrueTimestamp()
    //     0x86afec: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86aff0: mov             x1, x0
    // 0x86aff4: r0 = toDate()
    //     0x86aff4: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86aff8: ldur            x1, [fp, #-8]
    // 0x86affc: stur            x0, [fp, #-8]
    // 0x86b000: r0 = toDate()
    //     0x86b000: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86b004: ldur            x1, [fp, #-8]
    // 0x86b008: mov             x2, x0
    // 0x86b00c: r0 = difference()
    //     0x86b00c: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86b010: mov             x1, x0
    // 0x86b014: r0 = inSeconds()
    //     0x86b014: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86b018: mov             x1, x0
    // 0x86b01c: r0 = 604800
    //     0x86b01c: movz            x0, #0x3a80
    //     0x86b020: movk            x0, #0x9, lsl #16
    // 0x86b024: sub             x2, x0, x1
    // 0x86b028: cmp             x2, #0
    // 0x86b02c: b.gt            #0x86b0ac
    // 0x86b030: nop             
    // 0x86b034: r0 = LoadStaticField(0xb54)
    //     0x86b034: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b038: ldr             x0, [x0, #0x16a8]
    // 0x86b03c: cmp             w0, NULL
    // 0x86b040: b.ne            #0x86b050
    // 0x86b044: nop             
    // 0x86b048: r0 = Null
    //     0x86b048: mov             x0, NULL
    // 0x86b04c: b               #0x86b078
    // 0x86b050: r17 = 327
    //     0x86b050: movz            x17, #0x147
    // 0x86b054: ldr             w1, [x0, x17]
    // 0x86b058: DecompressPointer r1
    //     0x86b058: add             x1, x1, HEAP, lsl #32
    // 0x86b05c: r0 = LoadClassIdInstr(r1)
    //     0x86b05c: ldur            x0, [x1, #-1]
    //     0x86b060: ubfx            x0, x0, #0xc, #0x14
    // 0x86b064: r2 = "adsRemoval"
    //     0x86b064: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe88] "adsRemoval"
    //     0x86b068: ldr             x2, [x2, #0xe88]
    // 0x86b06c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86b06c: sub             lr, x0, #0xb4
    //     0x86b070: ldr             lr, [x21, lr, lsl #3]
    //     0x86b074: blr             lr
    // 0x86b078: r1 = 59
    //     0x86b078: movz            x1, #0x3b
    // 0x86b07c: branchIfSmi(r0, 0x86b08c)
    //     0x86b07c: tbz             w0, #0, #0x86b08c
    //     0x86b080: nop             
    // 0x86b084: r1 = LoadClassIdInstr(r0)
    //     0x86b084: ldur            x1, [x0, #-1]
    //     0x86b088: ubfx            x1, x1, #0xc, #0x14
    // 0x86b08c: r16 = true
    //     0x86b08c: add             x16, NULL, #0x20  ; true
    // 0x86b090: stp             x16, x0, [SP]
    // 0x86b094: mov             x0, x1
    // 0x86b098: mov             lr, x0
    // 0x86b09c: ldr             lr, [x21, lr, lsl #3]
    // 0x86b0a0: blr             lr
    // 0x86b0a4: tbnz            w0, #4, #0x86b0b8
    // 0x86b0a8: nop             
    // 0x86b0ac: r0 = "gotCard"
    //     0x86b0ac: add             x0, PP, #0xf, lsl #12  ; [pp+0xfe90] "gotCard"
    //     0x86b0b0: ldr             x0, [x0, #0xe90]
    // 0x86b0b4: b               #0x8838b4
    // 0x86b0b8: r0 = "promoCheck0"
    //     0x86b0b8: add             x0, PP, #0xf, lsl #12  ; [pp+0xfec0] "promoCheck0"
    //     0x86b0bc: ldr             x0, [x0, #0xec0]
    // 0x86b0c0: b               #0x8838b4
    // 0x86b0c4: r0 = 604800
    //     0x86b0c4: movz            x0, #0x3a80
    //     0x86b0c8: movk            x0, #0x9, lsl #16
    // 0x86b0cc: r16 = "resortbgm"
    //     0x86b0cc: add             x16, PP, #0xf, lsl #12  ; [pp+0xfec8] "resortbgm"
    //     0x86b0d0: ldr             x16, [x16, #0xec8]
    // 0x86b0d4: ldur            lr, [fp, #-0x28]
    // 0x86b0d8: stp             lr, x16, [SP]
    // 0x86b0dc: r0 = ==()
    //     0x86b0dc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b0e0: tbnz            w0, #4, #0x86b1e8
    // 0x86b0e4: nop             
    // 0x86b0e8: r0 = LoadStaticField(0xb54)
    //     0x86b0e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b0ec: ldr             x0, [x0, #0x16a8]
    // 0x86b0f0: cmp             w0, NULL
    // 0x86b0f4: b.eq            #0x86b1dc
    // 0x86b0f8: nop             
    // 0x86b0fc: r17 = 327
    //     0x86b0fc: movz            x17, #0x147
    // 0x86b100: ldr             w1, [x0, x17]
    // 0x86b104: DecompressPointer r1
    //     0x86b104: add             x1, x1, HEAP, lsl #32
    // 0x86b108: r0 = LoadClassIdInstr(r1)
    //     0x86b108: ldur            x0, [x1, #-1]
    //     0x86b10c: ubfx            x0, x0, #0xc, #0x14
    // 0x86b110: r2 = "storyTrip.8"
    //     0x86b110: add             x2, PP, #0xf, lsl #12  ; [pp+0xfed0] "storyTrip.8"
    //     0x86b114: ldr             x2, [x2, #0xed0]
    // 0x86b118: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86b118: sub             lr, x0, #0xb4
    //     0x86b11c: ldr             lr, [x21, lr, lsl #3]
    //     0x86b120: blr             lr
    // 0x86b124: cmp             w0, NULL
    // 0x86b128: b.eq            #0x86b1dc
    // 0x86b12c: nop             
    // 0x86b130: r0 = LoadStaticField(0xb54)
    //     0x86b130: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b134: ldr             x0, [x0, #0x16a8]
    // 0x86b138: cmp             w0, NULL
    // 0x86b13c: b.ne            #0x86b14c
    // 0x86b140: nop             
    // 0x86b144: r3 = Null
    //     0x86b144: mov             x3, NULL
    // 0x86b148: b               #0x86b178
    // 0x86b14c: r17 = 327
    //     0x86b14c: movz            x17, #0x147
    // 0x86b150: ldr             w1, [x0, x17]
    // 0x86b154: DecompressPointer r1
    //     0x86b154: add             x1, x1, HEAP, lsl #32
    // 0x86b158: r0 = LoadClassIdInstr(r1)
    //     0x86b158: ldur            x0, [x1, #-1]
    //     0x86b15c: ubfx            x0, x0, #0xc, #0x14
    // 0x86b160: r2 = "storyTrip.8"
    //     0x86b160: add             x2, PP, #0xf, lsl #12  ; [pp+0xfed0] "storyTrip.8"
    //     0x86b164: ldr             x2, [x2, #0xed0]
    // 0x86b168: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86b168: sub             lr, x0, #0xb4
    //     0x86b16c: ldr             lr, [x21, lr, lsl #3]
    //     0x86b170: blr             lr
    // 0x86b174: mov             x3, x0
    // 0x86b178: mov             x0, x3
    // 0x86b17c: stur            x3, [fp, #-8]
    // 0x86b180: r2 = Null
    //     0x86b180: mov             x2, NULL
    // 0x86b184: r1 = Null
    //     0x86b184: mov             x1, NULL
    // 0x86b188: r4 = 59
    //     0x86b188: movz            x4, #0x3b
    // 0x86b18c: branchIfSmi(r0, 0x86b19c)
    //     0x86b18c: tbz             w0, #0, #0x86b19c
    //     0x86b190: nop             
    // 0x86b194: r4 = LoadClassIdInstr(r0)
    //     0x86b194: ldur            x4, [x0, #-1]
    //     0x86b198: ubfx            x4, x4, #0xc, #0x14
    // 0x86b19c: cmp             x4, #0x3e
    // 0x86b1a0: b.eq            #0x86b1b8
    // 0x86b1a4: nop             
    // 0x86b1a8: r8 = bool
    //     0x86b1a8: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86b1ac: r3 = Null
    //     0x86b1ac: add             x3, PP, #0xf, lsl #12  ; [pp+0xfed8] Null
    //     0x86b1b0: ldr             x3, [x3, #0xed8]
    // 0x86b1b4: r0 = bool()
    //     0x86b1b4: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86b1b8: ldur            x0, [fp, #-8]
    // 0x86b1bc: tbnz            w0, #4, #0x86b1d0
    // 0x86b1c0: nop             
    // 0x86b1c4: r0 = "night.mp3"
    //     0x86b1c4: add             x0, PP, #0xf, lsl #12  ; [pp+0xfee8] "night.mp3"
    //     0x86b1c8: ldr             x0, [x0, #0xee8]
    // 0x86b1cc: b               #0x8838b4
    // 0x86b1d0: r0 = "seasidetown.mp3"
    //     0x86b1d0: add             x0, PP, #0xf, lsl #12  ; [pp+0xfef0] "seasidetown.mp3"
    //     0x86b1d4: ldr             x0, [x0, #0xef0]
    // 0x86b1d8: b               #0x8838b4
    // 0x86b1dc: r0 = "seasidetown.mp3"
    //     0x86b1dc: add             x0, PP, #0xf, lsl #12  ; [pp+0xfef0] "seasidetown.mp3"
    //     0x86b1e0: ldr             x0, [x0, #0xef0]
    // 0x86b1e4: b               #0x8838b4
    // 0x86b1e8: r16 = "wanderer"
    //     0x86b1e8: add             x16, PP, #0xf, lsl #12  ; [pp+0xfef8] "wanderer"
    //     0x86b1ec: ldr             x16, [x16, #0xef8]
    // 0x86b1f0: ldur            lr, [fp, #-0x28]
    // 0x86b1f4: stp             lr, x16, [SP]
    // 0x86b1f8: r0 = ==()
    //     0x86b1f8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b1fc: tbnz            w0, #4, #0x86b31c
    // 0x86b200: nop             
    // 0x86b204: r0 = LoadStaticField(0xb54)
    //     0x86b204: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b208: ldr             x0, [x0, #0x16a8]
    // 0x86b20c: cmp             w0, NULL
    // 0x86b210: b.eq            #0x86b2f0
    // 0x86b214: nop             
    // 0x86b218: r17 = 347
    //     0x86b218: movz            x17, #0x15b
    // 0x86b21c: ldr             w1, [x0, x17]
    // 0x86b220: DecompressPointer r1
    //     0x86b220: add             x1, x1, HEAP, lsl #32
    // 0x86b224: r0 = LoadClassIdInstr(r1)
    //     0x86b224: ldur            x0, [x1, #-1]
    //     0x86b228: ubfx            x0, x0, #0xc, #0x14
    // 0x86b22c: r2 = "wanderer"
    //     0x86b22c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfef8] "wanderer"
    //     0x86b230: ldr             x2, [x2, #0xef8]
    // 0x86b234: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86b234: sub             lr, x0, #0xb4
    //     0x86b238: ldr             lr, [x21, lr, lsl #3]
    //     0x86b23c: blr             lr
    // 0x86b240: cmp             w0, NULL
    // 0x86b244: b.eq            #0x86b2f0
    // 0x86b248: nop             
    // 0x86b24c: r1 = Null
    //     0x86b24c: mov             x1, NULL
    // 0x86b250: r2 = 4
    //     0x86b250: movz            x2, #0x4
    // 0x86b254: r0 = AllocateArray()
    //     0x86b254: bl              #0x1502560  ; AllocateArrayStub
    // 0x86b258: mov             x3, x0
    // 0x86b25c: stur            x3, [fp, #-8]
    // 0x86b260: r17 = "wanderer"
    //     0x86b260: add             x17, PP, #0xf, lsl #12  ; [pp+0xfef8] "wanderer"
    //     0x86b264: ldr             x17, [x17, #0xef8]
    // 0x86b268: StoreField: r3->field_f = r17
    //     0x86b268: stur            w17, [x3, #0xf]
    // 0x86b26c: r0 = LoadStaticField(0xb54)
    //     0x86b26c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b270: ldr             x0, [x0, #0x16a8]
    // 0x86b274: cmp             w0, NULL
    // 0x86b278: b.ne            #0x86b288
    // 0x86b27c: nop             
    // 0x86b280: r0 = Null
    //     0x86b280: mov             x0, NULL
    // 0x86b284: b               #0x86b2b0
    // 0x86b288: r17 = 347
    //     0x86b288: movz            x17, #0x15b
    // 0x86b28c: ldr             w1, [x0, x17]
    // 0x86b290: DecompressPointer r1
    //     0x86b290: add             x1, x1, HEAP, lsl #32
    // 0x86b294: r0 = LoadClassIdInstr(r1)
    //     0x86b294: ldur            x0, [x1, #-1]
    //     0x86b298: ubfx            x0, x0, #0xc, #0x14
    // 0x86b29c: r2 = "wanderer"
    //     0x86b29c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfef8] "wanderer"
    //     0x86b2a0: ldr             x2, [x2, #0xef8]
    // 0x86b2a4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86b2a4: sub             lr, x0, #0xb4
    //     0x86b2a8: ldr             lr, [x21, lr, lsl #3]
    //     0x86b2ac: blr             lr
    // 0x86b2b0: ldur            x1, [fp, #-8]
    // 0x86b2b4: ArrayStore: r1[1] = r0  ; List_4
    //     0x86b2b4: add             x25, x1, #0x13
    //     0x86b2b8: str             w0, [x25]
    //     0x86b2bc: tbz             w0, #0, #0x86b2e0
    //     0x86b2c0: nop             
    //     0x86b2c4: ldurb           w16, [x1, #-1]
    //     0x86b2c8: ldurb           w17, [x0, #-1]
    //     0x86b2cc: and             x16, x17, x16, lsr #2
    //     0x86b2d0: tst             x16, HEAP, lsr #32
    //     0x86b2d4: b.eq            #0x86b2e0
    //     0x86b2d8: nop             
    //     0x86b2dc: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x86b2e0: ldur            x16, [fp, #-8]
    // 0x86b2e4: str             x16, [SP]
    // 0x86b2e8: r0 = _interpolate()
    //     0x86b2e8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x86b2ec: b               #0x86b2f8
    // 0x86b2f0: r0 = "wanderer1"
    //     0x86b2f0: add             x0, PP, #0xf, lsl #12  ; [pp+0xff00] "wanderer1"
    //     0x86b2f4: ldr             x0, [x0, #0xf00]
    // 0x86b2f8: stur            x0, [fp, #-8]
    // 0x86b2fc: r16 = "wanderer: "
    //     0x86b2fc: add             x16, PP, #0xf, lsl #12  ; [pp+0xff08] "wanderer: "
    //     0x86b300: ldr             x16, [x16, #0xf08]
    // 0x86b304: stp             x0, x16, [SP]
    // 0x86b308: r0 = +()
    //     0x86b308: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x86b30c: mov             x1, x0
    // 0x86b310: r0 = print()
    //     0x86b310: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x86b314: ldur            x0, [fp, #-8]
    // 0x86b318: b               #0x8838b4
    // 0x86b31c: r16 = "timeGap"
    //     0x86b31c: add             x16, PP, #0xf, lsl #12  ; [pp+0xff10] "timeGap"
    //     0x86b320: ldr             x16, [x16, #0xf10]
    // 0x86b324: ldur            lr, [fp, #-0x28]
    // 0x86b328: stp             lr, x16, [SP]
    // 0x86b32c: r0 = ==()
    //     0x86b32c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b330: tbnz            w0, #4, #0x86b39c
    // 0x86b334: nop             
    // 0x86b338: ldur            x0, [fp, #-0x20]
    // 0x86b33c: cmp             w0, NULL
    // 0x86b340: b.ne            #0x86b350
    // 0x86b344: nop             
    // 0x86b348: r0 = Null
    //     0x86b348: mov             x0, NULL
    // 0x86b34c: b               #0x86b388
    // 0x86b350: r1 = Null
    //     0x86b350: mov             x1, NULL
    // 0x86b354: r2 = " @T-[a-zA-Z0-9\\.]*-[0-9]*\\b"
    //     0x86b354: add             x2, PP, #0xf, lsl #12  ; [pp+0xff18] " @T-[a-zA-Z0-9\\.]*-[0-9]*\\b"
    //     0x86b358: ldr             x2, [x2, #0xf18]
    // 0x86b35c: r4 = const [0, 0x2, 0, 0x2, null]
    //     0x86b35c: ldr             x4, [PP, #0xd8]  ; [pp+0xd8] List(5) [0, 0x2, 0, 0x2, Null]
    // 0x86b360: r0 = RegExp()
    //     0x86b360: bl              #0x7cf0a8  ; [dart:core] RegExp::RegExp
    // 0x86b364: r1 = Function '<anonymous closure>': static.
    //     0x86b364: add             x1, PP, #0xf, lsl #12  ; [pp+0xff20] AnonymousClosure: static (0x8dc224), in [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventString (0x86a3d4)
    //     0x86b368: ldr             x1, [x1, #0xf20]
    // 0x86b36c: r2 = Null
    //     0x86b36c: mov             x2, NULL
    // 0x86b370: stur            x0, [fp, #-8]
    // 0x86b374: r0 = AllocateClosure()
    //     0x86b374: bl              #0x1501888  ; AllocateClosureStub
    // 0x86b378: ldur            x1, [fp, #-0x20]
    // 0x86b37c: ldur            x2, [fp, #-8]
    // 0x86b380: mov             x3, x0
    // 0x86b384: r0 = replaceAllMapped()
    //     0x86b384: bl              #0x8dbb4c  ; [dart:core] _StringBase::replaceAllMapped
    // 0x86b388: cmp             w0, NULL
    // 0x86b38c: b.ne            #0x8838b4
    // 0x86b390: nop             
    // 0x86b394: r0 = ""
    //     0x86b394: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86b398: b               #0x8838b4
    // 0x86b39c: r16 = "auctionItemCheck"
    //     0x86b39c: add             x16, PP, #0xf, lsl #12  ; [pp+0xff28] "auctionItemCheck"
    //     0x86b3a0: ldr             x16, [x16, #0xf28]
    // 0x86b3a4: ldur            lr, [fp, #-0x28]
    // 0x86b3a8: stp             lr, x16, [SP]
    // 0x86b3ac: r0 = ==()
    //     0x86b3ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b3b0: tbnz            w0, #4, #0x86b484
    // 0x86b3b4: nop             
    // 0x86b3b8: ldur            x0, [fp, #-0x10]
    // 0x86b3bc: cbnz            w0, #0x86b3d0
    // 0x86b3c0: nop             
    // 0x86b3c4: r0 = "checkItem1"
    //     0x86b3c4: add             x0, PP, #0xf, lsl #12  ; [pp+0xff30] "checkItem1"
    //     0x86b3c8: ldr             x0, [x0, #0xf30]
    // 0x86b3cc: b               #0x8838b4
    // 0x86b3d0: cmp             w0, #2
    // 0x86b3d4: b.ne            #0x86b3e8
    // 0x86b3d8: nop             
    // 0x86b3dc: r0 = "checkItem2"
    //     0x86b3dc: add             x0, PP, #0xf, lsl #12  ; [pp+0xff38] "checkItem2"
    //     0x86b3e0: ldr             x0, [x0, #0xf38]
    // 0x86b3e4: b               #0x8838b4
    // 0x86b3e8: cmp             w0, #4
    // 0x86b3ec: b.ne            #0x86b400
    // 0x86b3f0: nop             
    // 0x86b3f4: r0 = "checkItem3"
    //     0x86b3f4: add             x0, PP, #0xf, lsl #12  ; [pp+0xff40] "checkItem3"
    //     0x86b3f8: ldr             x0, [x0, #0xf40]
    // 0x86b3fc: b               #0x8838b4
    // 0x86b400: cmp             w0, #6
    // 0x86b404: b.ne            #0x86b418
    // 0x86b408: nop             
    // 0x86b40c: r0 = "checkItem4"
    //     0x86b40c: add             x0, PP, #0xf, lsl #12  ; [pp+0xff48] "checkItem4"
    //     0x86b410: ldr             x0, [x0, #0xf48]
    // 0x86b414: b               #0x8838b4
    // 0x86b418: cmp             w0, #8
    // 0x86b41c: b.ne            #0x86b430
    // 0x86b420: nop             
    // 0x86b424: r0 = "checkItem5"
    //     0x86b424: add             x0, PP, #0xf, lsl #12  ; [pp+0xff50] "checkItem5"
    //     0x86b428: ldr             x0, [x0, #0xf50]
    // 0x86b42c: b               #0x8838b4
    // 0x86b430: cmp             w0, #0xa
    // 0x86b434: b.ne            #0x86b448
    // 0x86b438: nop             
    // 0x86b43c: r0 = "checkItem6"
    //     0x86b43c: add             x0, PP, #0xf, lsl #12  ; [pp+0xff58] "checkItem6"
    //     0x86b440: ldr             x0, [x0, #0xf58]
    // 0x86b444: b               #0x8838b4
    // 0x86b448: cmp             w0, #0xc
    // 0x86b44c: b.ne            #0x86b460
    // 0x86b450: nop             
    // 0x86b454: r0 = "checkItem7"
    //     0x86b454: add             x0, PP, #0xf, lsl #12  ; [pp+0xff60] "checkItem7"
    //     0x86b458: ldr             x0, [x0, #0xf60]
    // 0x86b45c: b               #0x8838b4
    // 0x86b460: cmp             w0, #0xc6
    // 0x86b464: b.ne            #0x86b478
    // 0x86b468: nop             
    // 0x86b46c: r0 = "checkItem8"
    //     0x86b46c: add             x0, PP, #0xf, lsl #12  ; [pp+0xff68] "checkItem8"
    //     0x86b470: ldr             x0, [x0, #0xf68]
    // 0x86b474: b               #0x8838b4
    // 0x86b478: r0 = "checkItem1"
    //     0x86b478: add             x0, PP, #0xf, lsl #12  ; [pp+0xff30] "checkItem1"
    //     0x86b47c: ldr             x0, [x0, #0xf30]
    // 0x86b480: b               #0x8838b4
    // 0x86b484: r16 = "normalFightSG"
    //     0x86b484: add             x16, PP, #0xf, lsl #12  ; [pp+0xff70] "normalFightSG"
    //     0x86b488: ldr             x16, [x16, #0xf70]
    // 0x86b48c: ldur            lr, [fp, #-0x28]
    // 0x86b490: stp             lr, x16, [SP]
    // 0x86b494: r0 = ==()
    //     0x86b494: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b498: tbnz            w0, #4, #0x86b62c
    // 0x86b49c: nop             
    // 0x86b4a0: r0 = LoadStaticField(0xb54)
    //     0x86b4a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b4a4: ldr             x0, [x0, #0x16a8]
    // 0x86b4a8: cmp             w0, NULL
    // 0x86b4ac: b.ne            #0x86b4bc
    // 0x86b4b0: nop             
    // 0x86b4b4: r0 = Null
    //     0x86b4b4: mov             x0, NULL
    // 0x86b4b8: b               #0x86b4d8
    // 0x86b4bc: LoadField: r2 = r0->field_bb
    //     0x86b4bc: ldur            x2, [x0, #0xbb]
    // 0x86b4c0: r0 = BoxInt64Instr(r2)
    //     0x86b4c0: sbfiz           x0, x2, #1, #0x1f
    //     0x86b4c4: cmp             x2, x0, asr #1
    //     0x86b4c8: b.eq            #0x86b4d8
    //     0x86b4cc: nop             
    //     0x86b4d0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b4d4: stur            x2, [x0, #7]
    // 0x86b4d8: cmp             w0, NULL
    // 0x86b4dc: b.ne            #0x86b4ec
    // 0x86b4e0: nop             
    // 0x86b4e4: r0 = 0
    //     0x86b4e4: movz            x0, #0
    // 0x86b4e8: b               #0x86b500
    // 0x86b4ec: r1 = LoadInt32Instr(r0)
    //     0x86b4ec: sbfx            x1, x0, #1, #0x1f
    //     0x86b4f0: tbz             w0, #0, #0x86b4fc
    //     0x86b4f4: nop             
    //     0x86b4f8: ldur            x1, [x0, #7]
    // 0x86b4fc: mov             x0, x1
    // 0x86b500: cmp             x0, #0xf
    // 0x86b504: b.ge            #0x86b518
    // 0x86b508: nop             
    // 0x86b50c: r2 = "noEnoughAct"
    //     0x86b50c: add             x2, PP, #0xf, lsl #12  ; [pp+0xff78] "noEnoughAct"
    //     0x86b510: ldr             x2, [x2, #0xf78]
    // 0x86b514: b               #0x86b520
    // 0x86b518: r2 = "normalFight"
    //     0x86b518: add             x2, PP, #0xf, lsl #12  ; [pp+0xff80] "normalFight"
    //     0x86b51c: ldr             x2, [x2, #0xf80]
    // 0x86b520: r0 = LoadStaticField(0xb54)
    //     0x86b520: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b524: ldr             x0, [x0, #0x16a8]
    // 0x86b528: cmp             w0, NULL
    // 0x86b52c: b.ne            #0x86b53c
    // 0x86b530: nop             
    // 0x86b534: r0 = Null
    //     0x86b534: mov             x0, NULL
    // 0x86b538: b               #0x86b558
    // 0x86b53c: LoadField: r3 = r0->field_ab
    //     0x86b53c: ldur            x3, [x0, #0xab]
    // 0x86b540: r0 = BoxInt64Instr(r3)
    //     0x86b540: sbfiz           x0, x3, #1, #0x1f
    //     0x86b544: cmp             x3, x0, asr #1
    //     0x86b548: b.eq            #0x86b558
    //     0x86b54c: nop             
    //     0x86b550: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b554: stur            x3, [x0, #7]
    // 0x86b558: cmp             w0, NULL
    // 0x86b55c: b.ne            #0x86b56c
    // 0x86b560: nop             
    // 0x86b564: r0 = 0
    //     0x86b564: movz            x0, #0
    // 0x86b568: b               #0x86b580
    // 0x86b56c: r1 = LoadInt32Instr(r0)
    //     0x86b56c: sbfx            x1, x0, #1, #0x1f
    //     0x86b570: tbz             w0, #0, #0x86b57c
    //     0x86b574: nop             
    //     0x86b578: ldur            x1, [x0, #7]
    // 0x86b57c: mov             x0, x1
    // 0x86b580: cmp             x0, #0xf
    // 0x86b584: b.ge            #0x86b598
    // 0x86b588: nop             
    // 0x86b58c: r1 = "noEnoughSta"
    //     0x86b58c: add             x1, PP, #0xf, lsl #12  ; [pp+0xff88] "noEnoughSta"
    //     0x86b590: ldr             x1, [x1, #0xf88]
    // 0x86b594: b               #0x86b59c
    // 0x86b598: mov             x1, x2
    // 0x86b59c: stur            x1, [fp, #-8]
    // 0x86b5a0: r0 = LoadStaticField(0xb54)
    //     0x86b5a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b5a4: ldr             x0, [x0, #0x16a8]
    // 0x86b5a8: cmp             w0, NULL
    // 0x86b5ac: b.ne            #0x86b5bc
    // 0x86b5b0: nop             
    // 0x86b5b4: r0 = Null
    //     0x86b5b4: mov             x0, NULL
    // 0x86b5b8: b               #0x86b5e4
    // 0x86b5bc: r17 = 311
    //     0x86b5bc: movz            x17, #0x137
    // 0x86b5c0: ldr             w2, [x0, x17]
    // 0x86b5c4: DecompressPointer r2
    //     0x86b5c4: add             x2, x2, HEAP, lsl #32
    // 0x86b5c8: r0 = LoadClassIdInstr(r2)
    //     0x86b5c8: ldur            x0, [x2, #-1]
    //     0x86b5cc: ubfx            x0, x0, #0xc, #0x14
    // 0x86b5d0: str             x2, [SP]
    // 0x86b5d4: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x86b5d4: movz            x17, #0x8ca0
    //     0x86b5d8: add             lr, x0, x17
    //     0x86b5dc: ldr             lr, [x21, lr, lsl #3]
    //     0x86b5e0: blr             lr
    // 0x86b5e4: cmp             w0, NULL
    // 0x86b5e8: b.ne            #0x86b5f8
    // 0x86b5ec: nop             
    // 0x86b5f0: r0 = 0
    //     0x86b5f0: movz            x0, #0
    // 0x86b5f4: b               #0x86b60c
    // 0x86b5f8: r1 = LoadInt32Instr(r0)
    //     0x86b5f8: sbfx            x1, x0, #1, #0x1f
    //     0x86b5fc: tbz             w0, #0, #0x86b608
    //     0x86b600: nop             
    //     0x86b604: ldur            x1, [x0, #7]
    // 0x86b608: mov             x0, x1
    // 0x86b60c: cmp             x0, #7
    // 0x86b610: b.ge            #0x86b624
    // 0x86b614: nop             
    // 0x86b618: r0 = "noEnoughDeck"
    //     0x86b618: add             x0, PP, #0xf, lsl #12  ; [pp+0xff90] "noEnoughDeck"
    //     0x86b61c: ldr             x0, [x0, #0xf90]
    // 0x86b620: b               #0x8838b4
    // 0x86b624: ldur            x0, [fp, #-8]
    // 0x86b628: b               #0x8838b4
    // 0x86b62c: r16 = "readyFightGuan"
    //     0x86b62c: add             x16, PP, #0xf, lsl #12  ; [pp+0xff98] "readyFightGuan"
    //     0x86b630: ldr             x16, [x16, #0xf98]
    // 0x86b634: ldur            lr, [fp, #-0x28]
    // 0x86b638: stp             lr, x16, [SP]
    // 0x86b63c: r0 = ==()
    //     0x86b63c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b640: tbnz            w0, #4, #0x86b8e0
    // 0x86b644: nop             
    // 0x86b648: r0 = LoadStaticField(0xb54)
    //     0x86b648: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b64c: ldr             x0, [x0, #0x16a8]
    // 0x86b650: cmp             w0, NULL
    // 0x86b654: b.ne            #0x86b664
    // 0x86b658: nop             
    // 0x86b65c: r0 = Null
    //     0x86b65c: mov             x0, NULL
    // 0x86b660: b               #0x86b674
    // 0x86b664: r17 = 311
    //     0x86b664: movz            x17, #0x137
    // 0x86b668: ldr             w1, [x0, x17]
    // 0x86b66c: DecompressPointer r1
    //     0x86b66c: add             x1, x1, HEAP, lsl #32
    // 0x86b670: mov             x0, x1
    // 0x86b674: cmp             w0, NULL
    // 0x86b678: b.ne            #0x86b68c
    // 0x86b67c: nop             
    // 0x86b680: r1 = <String>
    //     0x86b680: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86b684: r2 = 0
    //     0x86b684: movz            x2, #0
    // 0x86b688: r0 = _GrowableList()
    //     0x86b688: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x86b68c: r1 = LoadClassIdInstr(r0)
    //     0x86b68c: ldur            x1, [x0, #-1]
    //     0x86b690: ubfx            x1, x1, #0xc, #0x14
    // 0x86b694: str             x0, [SP]
    // 0x86b698: mov             x0, x1
    // 0x86b69c: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x86b69c: movz            x17, #0x8ca0
    //     0x86b6a0: add             lr, x0, x17
    //     0x86b6a4: ldr             lr, [x21, lr, lsl #3]
    //     0x86b6a8: blr             lr
    // 0x86b6ac: mov             x2, x0
    // 0x86b6b0: r0 = LoadStaticField(0xb54)
    //     0x86b6b0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b6b4: ldr             x0, [x0, #0x16a8]
    // 0x86b6b8: cmp             w0, NULL
    // 0x86b6bc: b.ne            #0x86b6cc
    // 0x86b6c0: nop             
    // 0x86b6c4: r0 = Null
    //     0x86b6c4: mov             x0, NULL
    // 0x86b6c8: b               #0x86b6e8
    // 0x86b6cc: LoadField: r3 = r0->field_cb
    //     0x86b6cc: ldur            x3, [x0, #0xcb]
    // 0x86b6d0: r0 = BoxInt64Instr(r3)
    //     0x86b6d0: sbfiz           x0, x3, #1, #0x1f
    //     0x86b6d4: cmp             x3, x0, asr #1
    //     0x86b6d8: b.eq            #0x86b6e8
    //     0x86b6dc: nop             
    //     0x86b6e0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b6e4: stur            x3, [x0, #7]
    // 0x86b6e8: cmp             w0, NULL
    // 0x86b6ec: b.ne            #0x86b6fc
    // 0x86b6f0: nop             
    // 0x86b6f4: r0 = 0
    //     0x86b6f4: movz            x0, #0
    // 0x86b6f8: b               #0x86b710
    // 0x86b6fc: r1 = LoadInt32Instr(r0)
    //     0x86b6fc: sbfx            x1, x0, #1, #0x1f
    //     0x86b700: tbz             w0, #0, #0x86b70c
    //     0x86b704: nop             
    //     0x86b708: ldur            x1, [x0, #7]
    // 0x86b70c: mov             x0, x1
    // 0x86b710: r1 = LoadInt32Instr(r2)
    //     0x86b710: sbfx            x1, x2, #1, #0x1f
    //     0x86b714: tbz             w2, #0, #0x86b720
    //     0x86b718: nop             
    //     0x86b71c: ldur            x1, [x2, #7]
    // 0x86b720: cmp             x1, x0
    // 0x86b724: b.ge            #0x86b738
    // 0x86b728: nop             
    // 0x86b72c: r0 = "fightGuanTooLessCard"
    //     0x86b72c: add             x0, PP, #0xf, lsl #12  ; [pp+0xffa0] "fightGuanTooLessCard"
    //     0x86b730: ldr             x0, [x0, #0xfa0]
    // 0x86b734: b               #0x8838b4
    // 0x86b738: r0 = LoadStaticField(0xb54)
    //     0x86b738: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b73c: ldr             x0, [x0, #0x16a8]
    // 0x86b740: cmp             w0, NULL
    // 0x86b744: b.ne            #0x86b754
    // 0x86b748: nop             
    // 0x86b74c: r0 = Null
    //     0x86b74c: mov             x0, NULL
    // 0x86b750: b               #0x86b764
    // 0x86b754: r17 = 311
    //     0x86b754: movz            x17, #0x137
    // 0x86b758: ldr             w1, [x0, x17]
    // 0x86b75c: DecompressPointer r1
    //     0x86b75c: add             x1, x1, HEAP, lsl #32
    // 0x86b760: mov             x0, x1
    // 0x86b764: cmp             w0, NULL
    // 0x86b768: b.ne            #0x86b77c
    // 0x86b76c: nop             
    // 0x86b770: r1 = <String>
    //     0x86b770: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86b774: r2 = 0
    //     0x86b774: movz            x2, #0
    // 0x86b778: r0 = _GrowableList()
    //     0x86b778: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x86b77c: r1 = LoadClassIdInstr(r0)
    //     0x86b77c: ldur            x1, [x0, #-1]
    //     0x86b780: ubfx            x1, x1, #0xc, #0x14
    // 0x86b784: str             x0, [SP]
    // 0x86b788: mov             x0, x1
    // 0x86b78c: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x86b78c: movz            x17, #0x8ca0
    //     0x86b790: add             lr, x0, x17
    //     0x86b794: ldr             lr, [x21, lr, lsl #3]
    //     0x86b798: blr             lr
    // 0x86b79c: mov             x2, x0
    // 0x86b7a0: r0 = LoadStaticField(0xb54)
    //     0x86b7a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b7a4: ldr             x0, [x0, #0x16a8]
    // 0x86b7a8: cmp             w0, NULL
    // 0x86b7ac: b.ne            #0x86b7bc
    // 0x86b7b0: nop             
    // 0x86b7b4: r0 = Null
    //     0x86b7b4: mov             x0, NULL
    // 0x86b7b8: b               #0x86b7d8
    // 0x86b7bc: LoadField: r3 = r0->field_cb
    //     0x86b7bc: ldur            x3, [x0, #0xcb]
    // 0x86b7c0: r0 = BoxInt64Instr(r3)
    //     0x86b7c0: sbfiz           x0, x3, #1, #0x1f
    //     0x86b7c4: cmp             x3, x0, asr #1
    //     0x86b7c8: b.eq            #0x86b7d8
    //     0x86b7cc: nop             
    //     0x86b7d0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b7d4: stur            x3, [x0, #7]
    // 0x86b7d8: cmp             w0, NULL
    // 0x86b7dc: b.ne            #0x86b7ec
    // 0x86b7e0: nop             
    // 0x86b7e4: r0 = 0
    //     0x86b7e4: movz            x0, #0
    // 0x86b7e8: b               #0x86b800
    // 0x86b7ec: r1 = LoadInt32Instr(r0)
    //     0x86b7ec: sbfx            x1, x0, #1, #0x1f
    //     0x86b7f0: tbz             w0, #0, #0x86b7fc
    //     0x86b7f4: nop             
    //     0x86b7f8: ldur            x1, [x0, #7]
    // 0x86b7fc: mov             x0, x1
    // 0x86b800: lsl             x1, x0, #1
    // 0x86b804: r0 = LoadInt32Instr(r2)
    //     0x86b804: sbfx            x0, x2, #1, #0x1f
    //     0x86b808: tbz             w2, #0, #0x86b814
    //     0x86b80c: nop             
    //     0x86b810: ldur            x0, [x2, #7]
    // 0x86b814: cmp             x0, x1
    // 0x86b818: b.le            #0x86b82c
    // 0x86b81c: nop             
    // 0x86b820: r0 = "fightGuanTooMuchCard"
    //     0x86b820: add             x0, PP, #0xf, lsl #12  ; [pp+0xffa8] "fightGuanTooMuchCard"
    //     0x86b824: ldr             x0, [x0, #0xfa8]
    // 0x86b828: b               #0x8838b4
    // 0x86b82c: r1 = LoadStaticField(0xb54)
    //     0x86b82c: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x86b830: ldr             x1, [x1, #0x16a8]
    // 0x86b834: r0 = getRemainingStatPoint()
    //     0x86b834: bl              #0x8dbb0c  ; [package:battlecross/method/playerMethod.dart] ::getRemainingStatPoint
    // 0x86b838: cmp             x0, #4
    // 0x86b83c: b.le            #0x86b850
    // 0x86b840: nop             
    // 0x86b844: r0 = "fightGuanNoEnoughStats"
    //     0x86b844: add             x0, PP, #0xf, lsl #12  ; [pp+0xffb0] "fightGuanNoEnoughStats"
    //     0x86b848: ldr             x0, [x0, #0xfb0]
    // 0x86b84c: b               #0x8838b4
    // 0x86b850: r0 = LoadStaticField(0xb54)
    //     0x86b850: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b854: ldr             x0, [x0, #0x16a8]
    // 0x86b858: cmp             w0, NULL
    // 0x86b85c: b.ne            #0x86b86c
    // 0x86b860: nop             
    // 0x86b864: r0 = Null
    //     0x86b864: mov             x0, NULL
    // 0x86b868: b               #0x86b87c
    // 0x86b86c: r17 = 311
    //     0x86b86c: movz            x17, #0x137
    // 0x86b870: ldr             w1, [x0, x17]
    // 0x86b874: DecompressPointer r1
    //     0x86b874: add             x1, x1, HEAP, lsl #32
    // 0x86b878: mov             x0, x1
    // 0x86b87c: cmp             w0, NULL
    // 0x86b880: b.ne            #0x86b89c
    // 0x86b884: nop             
    // 0x86b888: r1 = <String>
    //     0x86b888: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86b88c: r2 = 0
    //     0x86b88c: movz            x2, #0
    // 0x86b890: r0 = _GrowableList()
    //     0x86b890: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x86b894: mov             x1, x0
    // 0x86b898: b               #0x86b8a0
    // 0x86b89c: mov             x1, x0
    // 0x86b8a0: r0 = LoadClassIdInstr(r1)
    //     0x86b8a0: ldur            x0, [x1, #-1]
    //     0x86b8a4: ubfx            x0, x0, #0xc, #0x14
    // 0x86b8a8: r2 = "drive"
    //     0x86b8a8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf300] "drive"
    //     0x86b8ac: ldr             x2, [x2, #0x300]
    // 0x86b8b0: r0 = GDT[cid_x0 + 0xb08a]()
    //     0x86b8b0: movz            x17, #0xb08a
    //     0x86b8b4: add             lr, x0, x17
    //     0x86b8b8: ldr             lr, [x21, lr, lsl #3]
    //     0x86b8bc: blr             lr
    // 0x86b8c0: tbz             w0, #4, #0x86b8d4
    // 0x86b8c4: nop             
    // 0x86b8c8: r0 = "fightGuanNoDrive"
    //     0x86b8c8: add             x0, PP, #0xf, lsl #12  ; [pp+0xffb8] "fightGuanNoDrive"
    //     0x86b8cc: ldr             x0, [x0, #0xfb8]
    // 0x86b8d0: b               #0x8838b4
    // 0x86b8d4: r0 = "readyFightGuan"
    //     0x86b8d4: add             x0, PP, #0xf, lsl #12  ; [pp+0xff98] "readyFightGuan"
    //     0x86b8d8: ldr             x0, [x0, #0xf98]
    // 0x86b8dc: b               #0x8838b4
    // 0x86b8e0: r16 = "specialFightSG"
    //     0x86b8e0: add             x16, PP, #0xf, lsl #12  ; [pp+0xffc0] "specialFightSG"
    //     0x86b8e4: ldr             x16, [x16, #0xfc0]
    // 0x86b8e8: ldur            lr, [fp, #-0x28]
    // 0x86b8ec: stp             lr, x16, [SP]
    // 0x86b8f0: r0 = ==()
    //     0x86b8f0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86b8f4: tbnz            w0, #4, #0x86ba88
    // 0x86b8f8: nop             
    // 0x86b8fc: r0 = LoadStaticField(0xb54)
    //     0x86b8fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b900: ldr             x0, [x0, #0x16a8]
    // 0x86b904: cmp             w0, NULL
    // 0x86b908: b.ne            #0x86b918
    // 0x86b90c: nop             
    // 0x86b910: r0 = Null
    //     0x86b910: mov             x0, NULL
    // 0x86b914: b               #0x86b934
    // 0x86b918: LoadField: r2 = r0->field_bb
    //     0x86b918: ldur            x2, [x0, #0xbb]
    // 0x86b91c: r0 = BoxInt64Instr(r2)
    //     0x86b91c: sbfiz           x0, x2, #1, #0x1f
    //     0x86b920: cmp             x2, x0, asr #1
    //     0x86b924: b.eq            #0x86b934
    //     0x86b928: nop             
    //     0x86b92c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b930: stur            x2, [x0, #7]
    // 0x86b934: cmp             w0, NULL
    // 0x86b938: b.ne            #0x86b948
    // 0x86b93c: nop             
    // 0x86b940: r0 = 0
    //     0x86b940: movz            x0, #0
    // 0x86b944: b               #0x86b95c
    // 0x86b948: r1 = LoadInt32Instr(r0)
    //     0x86b948: sbfx            x1, x0, #1, #0x1f
    //     0x86b94c: tbz             w0, #0, #0x86b958
    //     0x86b950: nop             
    //     0x86b954: ldur            x1, [x0, #7]
    // 0x86b958: mov             x0, x1
    // 0x86b95c: cmp             x0, #0xf
    // 0x86b960: b.ge            #0x86b974
    // 0x86b964: nop             
    // 0x86b968: r2 = "noEnoughAct"
    //     0x86b968: add             x2, PP, #0xf, lsl #12  ; [pp+0xff78] "noEnoughAct"
    //     0x86b96c: ldr             x2, [x2, #0xf78]
    // 0x86b970: b               #0x86b97c
    // 0x86b974: r2 = "handicapFight"
    //     0x86b974: add             x2, PP, #0xf, lsl #12  ; [pp+0xffc8] "handicapFight"
    //     0x86b978: ldr             x2, [x2, #0xfc8]
    // 0x86b97c: r0 = LoadStaticField(0xb54)
    //     0x86b97c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86b980: ldr             x0, [x0, #0x16a8]
    // 0x86b984: cmp             w0, NULL
    // 0x86b988: b.ne            #0x86b998
    // 0x86b98c: nop             
    // 0x86b990: r0 = Null
    //     0x86b990: mov             x0, NULL
    // 0x86b994: b               #0x86b9b4
    // 0x86b998: LoadField: r3 = r0->field_ab
    //     0x86b998: ldur            x3, [x0, #0xab]
    // 0x86b99c: r0 = BoxInt64Instr(r3)
    //     0x86b99c: sbfiz           x0, x3, #1, #0x1f
    //     0x86b9a0: cmp             x3, x0, asr #1
    //     0x86b9a4: b.eq            #0x86b9b4
    //     0x86b9a8: nop             
    //     0x86b9ac: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86b9b0: stur            x3, [x0, #7]
    // 0x86b9b4: cmp             w0, NULL
    // 0x86b9b8: b.ne            #0x86b9c8
    // 0x86b9bc: nop             
    // 0x86b9c0: r0 = 0
    //     0x86b9c0: movz            x0, #0
    // 0x86b9c4: b               #0x86b9dc
    // 0x86b9c8: r1 = LoadInt32Instr(r0)
    //     0x86b9c8: sbfx            x1, x0, #1, #0x1f
    //     0x86b9cc: tbz             w0, #0, #0x86b9d8
    //     0x86b9d0: nop             
    //     0x86b9d4: ldur            x1, [x0, #7]
    // 0x86b9d8: mov             x0, x1
    // 0x86b9dc: cmp             x0, #0xf
    // 0x86b9e0: b.ge            #0x86b9f4
    // 0x86b9e4: nop             
    // 0x86b9e8: r1 = "noEnoughSta"
    //     0x86b9e8: add             x1, PP, #0xf, lsl #12  ; [pp+0xff88] "noEnoughSta"
    //     0x86b9ec: ldr             x1, [x1, #0xf88]
    // 0x86b9f0: b               #0x86b9f8
    // 0x86b9f4: mov             x1, x2
    // 0x86b9f8: stur            x1, [fp, #-8]
    // 0x86b9fc: r0 = LoadStaticField(0xb54)
    //     0x86b9fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ba00: ldr             x0, [x0, #0x16a8]
    // 0x86ba04: cmp             w0, NULL
    // 0x86ba08: b.ne            #0x86ba18
    // 0x86ba0c: nop             
    // 0x86ba10: r0 = Null
    //     0x86ba10: mov             x0, NULL
    // 0x86ba14: b               #0x86ba40
    // 0x86ba18: r17 = 311
    //     0x86ba18: movz            x17, #0x137
    // 0x86ba1c: ldr             w2, [x0, x17]
    // 0x86ba20: DecompressPointer r2
    //     0x86ba20: add             x2, x2, HEAP, lsl #32
    // 0x86ba24: r0 = LoadClassIdInstr(r2)
    //     0x86ba24: ldur            x0, [x2, #-1]
    //     0x86ba28: ubfx            x0, x0, #0xc, #0x14
    // 0x86ba2c: str             x2, [SP]
    // 0x86ba30: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x86ba30: movz            x17, #0x8ca0
    //     0x86ba34: add             lr, x0, x17
    //     0x86ba38: ldr             lr, [x21, lr, lsl #3]
    //     0x86ba3c: blr             lr
    // 0x86ba40: cmp             w0, NULL
    // 0x86ba44: b.ne            #0x86ba54
    // 0x86ba48: nop             
    // 0x86ba4c: r0 = 0
    //     0x86ba4c: movz            x0, #0
    // 0x86ba50: b               #0x86ba68
    // 0x86ba54: r1 = LoadInt32Instr(r0)
    //     0x86ba54: sbfx            x1, x0, #1, #0x1f
    //     0x86ba58: tbz             w0, #0, #0x86ba64
    //     0x86ba5c: nop             
    //     0x86ba60: ldur            x1, [x0, #7]
    // 0x86ba64: mov             x0, x1
    // 0x86ba68: cmp             x0, #7
    // 0x86ba6c: b.ge            #0x86ba80
    // 0x86ba70: nop             
    // 0x86ba74: r0 = "noEnoughDeck"
    //     0x86ba74: add             x0, PP, #0xf, lsl #12  ; [pp+0xff90] "noEnoughDeck"
    //     0x86ba78: ldr             x0, [x0, #0xf90]
    // 0x86ba7c: b               #0x8838b4
    // 0x86ba80: ldur            x0, [fp, #-8]
    // 0x86ba84: b               #0x8838b4
    // 0x86ba88: r16 = "beforeJailRacket"
    //     0x86ba88: add             x16, PP, #0xf, lsl #12  ; [pp+0xffd0] "beforeJailRacket"
    //     0x86ba8c: ldr             x16, [x16, #0xfd0]
    // 0x86ba90: ldur            lr, [fp, #-0x28]
    // 0x86ba94: stp             lr, x16, [SP]
    // 0x86ba98: r0 = ==()
    //     0x86ba98: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86ba9c: tbnz            w0, #4, #0x86bb50
    // 0x86baa0: nop             
    // 0x86baa4: r0 = LoadStaticField(0xb54)
    //     0x86baa4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86baa8: ldr             x0, [x0, #0x16a8]
    // 0x86baac: cmp             w0, NULL
    // 0x86bab0: b.ne            #0x86bac0
    // 0x86bab4: nop             
    // 0x86bab8: r0 = Null
    //     0x86bab8: mov             x0, NULL
    // 0x86babc: b               #0x86bae8
    // 0x86bac0: r17 = 351
    //     0x86bac0: movz            x17, #0x15f
    // 0x86bac4: ldr             w1, [x0, x17]
    // 0x86bac8: DecompressPointer r1
    //     0x86bac8: add             x1, x1, HEAP, lsl #32
    // 0x86bacc: r0 = LoadClassIdInstr(r1)
    //     0x86bacc: ldur            x0, [x1, #-1]
    //     0x86bad0: ubfx            x0, x0, #0xc, #0x14
    // 0x86bad4: r2 = "beforeJailRacket"
    //     0x86bad4: add             x2, PP, #0xf, lsl #12  ; [pp+0xffd0] "beforeJailRacket"
    //     0x86bad8: ldr             x2, [x2, #0xfd0]
    // 0x86badc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86badc: sub             lr, x0, #0xb4
    //     0x86bae0: ldr             lr, [x21, lr, lsl #3]
    //     0x86bae4: blr             lr
    // 0x86bae8: cmp             w0, NULL
    // 0x86baec: b.ne            #0x86bb00
    // 0x86baf0: nop             
    // 0x86baf4: r3 = "woodenracket"
    //     0x86baf4: add             x3, PP, #0xf, lsl #12  ; [pp+0xffd8] "woodenracket"
    //     0x86baf8: ldr             x3, [x3, #0xfd8]
    // 0x86bafc: b               #0x86bb04
    // 0x86bb00: mov             x3, x0
    // 0x86bb04: mov             x0, x3
    // 0x86bb08: stur            x3, [fp, #-8]
    // 0x86bb0c: r2 = Null
    //     0x86bb0c: mov             x2, NULL
    // 0x86bb10: r1 = Null
    //     0x86bb10: mov             x1, NULL
    // 0x86bb14: r4 = 59
    //     0x86bb14: movz            x4, #0x3b
    // 0x86bb18: branchIfSmi(r0, 0x86bb28)
    //     0x86bb18: tbz             w0, #0, #0x86bb28
    //     0x86bb1c: nop             
    // 0x86bb20: r4 = LoadClassIdInstr(r0)
    //     0x86bb20: ldur            x4, [x0, #-1]
    //     0x86bb24: ubfx            x4, x4, #0xc, #0x14
    // 0x86bb28: sub             x4, x4, #0x5d
    // 0x86bb2c: cmp             x4, #1
    // 0x86bb30: b.ls            #0x86bb48
    // 0x86bb34: nop             
    // 0x86bb38: r8 = String
    //     0x86bb38: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86bb3c: r3 = Null
    //     0x86bb3c: add             x3, PP, #0xf, lsl #12  ; [pp+0xffe0] Null
    //     0x86bb40: ldr             x3, [x3, #0xfe0]
    // 0x86bb44: r0 = String()
    //     0x86bb44: bl              #0x1523244  ; IsType_String_Stub
    // 0x86bb48: ldur            x0, [fp, #-8]
    // 0x86bb4c: b               #0x8838b4
    // 0x86bb50: r16 = "beforeJailShoe"
    //     0x86bb50: add             x16, PP, #0xf, lsl #12  ; [pp+0xfff0] "beforeJailShoe"
    //     0x86bb54: ldr             x16, [x16, #0xff0]
    // 0x86bb58: ldur            lr, [fp, #-0x28]
    // 0x86bb5c: stp             lr, x16, [SP]
    // 0x86bb60: r0 = ==()
    //     0x86bb60: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86bb64: tbnz            w0, #4, #0x86bc18
    // 0x86bb68: nop             
    // 0x86bb6c: r0 = LoadStaticField(0xb54)
    //     0x86bb6c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86bb70: ldr             x0, [x0, #0x16a8]
    // 0x86bb74: cmp             w0, NULL
    // 0x86bb78: b.ne            #0x86bb88
    // 0x86bb7c: nop             
    // 0x86bb80: r0 = Null
    //     0x86bb80: mov             x0, NULL
    // 0x86bb84: b               #0x86bbb0
    // 0x86bb88: r17 = 351
    //     0x86bb88: movz            x17, #0x15f
    // 0x86bb8c: ldr             w1, [x0, x17]
    // 0x86bb90: DecompressPointer r1
    //     0x86bb90: add             x1, x1, HEAP, lsl #32
    // 0x86bb94: r0 = LoadClassIdInstr(r1)
    //     0x86bb94: ldur            x0, [x1, #-1]
    //     0x86bb98: ubfx            x0, x0, #0xc, #0x14
    // 0x86bb9c: r2 = "beforeJailShoe"
    //     0x86bb9c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfff0] "beforeJailShoe"
    //     0x86bba0: ldr             x2, [x2, #0xff0]
    // 0x86bba4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86bba4: sub             lr, x0, #0xb4
    //     0x86bba8: ldr             lr, [x21, lr, lsl #3]
    //     0x86bbac: blr             lr
    // 0x86bbb0: cmp             w0, NULL
    // 0x86bbb4: b.ne            #0x86bbc8
    // 0x86bbb8: nop             
    // 0x86bbbc: r3 = "oldshoe"
    //     0x86bbbc: add             x3, PP, #0xf, lsl #12  ; [pp+0xfff8] "oldshoe"
    //     0x86bbc0: ldr             x3, [x3, #0xff8]
    // 0x86bbc4: b               #0x86bbcc
    // 0x86bbc8: mov             x3, x0
    // 0x86bbcc: mov             x0, x3
    // 0x86bbd0: stur            x3, [fp, #-8]
    // 0x86bbd4: r2 = Null
    //     0x86bbd4: mov             x2, NULL
    // 0x86bbd8: r1 = Null
    //     0x86bbd8: mov             x1, NULL
    // 0x86bbdc: r4 = 59
    //     0x86bbdc: movz            x4, #0x3b
    // 0x86bbe0: branchIfSmi(r0, 0x86bbf0)
    //     0x86bbe0: tbz             w0, #0, #0x86bbf0
    //     0x86bbe4: nop             
    // 0x86bbe8: r4 = LoadClassIdInstr(r0)
    //     0x86bbe8: ldur            x4, [x0, #-1]
    //     0x86bbec: ubfx            x4, x4, #0xc, #0x14
    // 0x86bbf0: sub             x4, x4, #0x5d
    // 0x86bbf4: cmp             x4, #1
    // 0x86bbf8: b.ls            #0x86bc10
    // 0x86bbfc: nop             
    // 0x86bc00: r8 = String
    //     0x86bc00: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86bc04: r3 = Null
    //     0x86bc04: add             x3, PP, #0x10, lsl #12  ; [pp+0x10000] Null
    //     0x86bc08: ldr             x3, [x3]
    // 0x86bc0c: r0 = String()
    //     0x86bc0c: bl              #0x1523244  ; IsType_String_Stub
    // 0x86bc10: ldur            x0, [fp, #-8]
    // 0x86bc14: b               #0x8838b4
    // 0x86bc18: r16 = "beforeJailAccessory"
    //     0x86bc18: add             x16, PP, #0x10, lsl #12  ; [pp+0x10010] "beforeJailAccessory"
    //     0x86bc1c: ldr             x16, [x16, #0x10]
    // 0x86bc20: ldur            lr, [fp, #-0x28]
    // 0x86bc24: stp             lr, x16, [SP]
    // 0x86bc28: r0 = ==()
    //     0x86bc28: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86bc2c: tbnz            w0, #4, #0x86bcdc
    // 0x86bc30: nop             
    // 0x86bc34: r0 = LoadStaticField(0xb54)
    //     0x86bc34: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86bc38: ldr             x0, [x0, #0x16a8]
    // 0x86bc3c: cmp             w0, NULL
    // 0x86bc40: b.ne            #0x86bc50
    // 0x86bc44: nop             
    // 0x86bc48: r0 = Null
    //     0x86bc48: mov             x0, NULL
    // 0x86bc4c: b               #0x86bc78
    // 0x86bc50: r17 = 351
    //     0x86bc50: movz            x17, #0x15f
    // 0x86bc54: ldr             w1, [x0, x17]
    // 0x86bc58: DecompressPointer r1
    //     0x86bc58: add             x1, x1, HEAP, lsl #32
    // 0x86bc5c: r0 = LoadClassIdInstr(r1)
    //     0x86bc5c: ldur            x0, [x1, #-1]
    //     0x86bc60: ubfx            x0, x0, #0xc, #0x14
    // 0x86bc64: r2 = "beforeJailAccessory"
    //     0x86bc64: add             x2, PP, #0x10, lsl #12  ; [pp+0x10010] "beforeJailAccessory"
    //     0x86bc68: ldr             x2, [x2, #0x10]
    // 0x86bc6c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86bc6c: sub             lr, x0, #0xb4
    //     0x86bc70: ldr             lr, [x21, lr, lsl #3]
    //     0x86bc74: blr             lr
    // 0x86bc78: cmp             w0, NULL
    // 0x86bc7c: b.ne            #0x86bc8c
    // 0x86bc80: nop             
    // 0x86bc84: r3 = ""
    //     0x86bc84: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86bc88: b               #0x86bc90
    // 0x86bc8c: mov             x3, x0
    // 0x86bc90: mov             x0, x3
    // 0x86bc94: stur            x3, [fp, #-8]
    // 0x86bc98: r2 = Null
    //     0x86bc98: mov             x2, NULL
    // 0x86bc9c: r1 = Null
    //     0x86bc9c: mov             x1, NULL
    // 0x86bca0: r4 = 59
    //     0x86bca0: movz            x4, #0x3b
    // 0x86bca4: branchIfSmi(r0, 0x86bcb4)
    //     0x86bca4: tbz             w0, #0, #0x86bcb4
    //     0x86bca8: nop             
    // 0x86bcac: r4 = LoadClassIdInstr(r0)
    //     0x86bcac: ldur            x4, [x0, #-1]
    //     0x86bcb0: ubfx            x4, x4, #0xc, #0x14
    // 0x86bcb4: sub             x4, x4, #0x5d
    // 0x86bcb8: cmp             x4, #1
    // 0x86bcbc: b.ls            #0x86bcd4
    // 0x86bcc0: nop             
    // 0x86bcc4: r8 = String
    //     0x86bcc4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86bcc8: r3 = Null
    //     0x86bcc8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10018] Null
    //     0x86bccc: ldr             x3, [x3, #0x18]
    // 0x86bcd0: r0 = String()
    //     0x86bcd0: bl              #0x1523244  ; IsType_String_Stub
    // 0x86bcd4: ldur            x0, [fp, #-8]
    // 0x86bcd8: b               #0x8838b4
    // 0x86bcdc: r16 = "prisonFood"
    //     0x86bcdc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10028] "prisonFood"
    //     0x86bce0: ldr             x16, [x16, #0x28]
    // 0x86bce4: ldur            lr, [fp, #-0x28]
    // 0x86bce8: stp             lr, x16, [SP]
    // 0x86bcec: r0 = ==()
    //     0x86bcec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86bcf0: tbnz            w0, #4, #0x86bde0
    // 0x86bcf4: nop             
    // 0x86bcf8: r0 = LoadStaticField(0xb54)
    //     0x86bcf8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86bcfc: ldr             x0, [x0, #0x16a8]
    // 0x86bd00: cmp             w0, NULL
    // 0x86bd04: b.eq            #0x86bdd4
    // 0x86bd08: nop             
    // 0x86bd0c: r17 = 351
    //     0x86bd0c: movz            x17, #0x15f
    // 0x86bd10: ldr             w1, [x0, x17]
    // 0x86bd14: DecompressPointer r1
    //     0x86bd14: add             x1, x1, HEAP, lsl #32
    // 0x86bd18: r0 = LoadClassIdInstr(r1)
    //     0x86bd18: ldur            x0, [x1, #-1]
    //     0x86bd1c: ubfx            x0, x0, #0xc, #0x14
    // 0x86bd20: r2 = "prisonChallenge"
    //     0x86bd20: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0x86bd24: ldr             x2, [x2, #0x30]
    // 0x86bd28: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86bd28: sub             lr, x0, #0xb4
    //     0x86bd2c: ldr             lr, [x21, lr, lsl #3]
    //     0x86bd30: blr             lr
    // 0x86bd34: cmp             w0, NULL
    // 0x86bd38: b.eq            #0x86bdd4
    // 0x86bd3c: nop             
    // 0x86bd40: r0 = LoadStaticField(0xb54)
    //     0x86bd40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86bd44: ldr             x0, [x0, #0x16a8]
    // 0x86bd48: cmp             w0, NULL
    // 0x86bd4c: b.ne            #0x86bd5c
    // 0x86bd50: nop             
    // 0x86bd54: r0 = Null
    //     0x86bd54: mov             x0, NULL
    // 0x86bd58: b               #0x86bd84
    // 0x86bd5c: r17 = 351
    //     0x86bd5c: movz            x17, #0x15f
    // 0x86bd60: ldr             w1, [x0, x17]
    // 0x86bd64: DecompressPointer r1
    //     0x86bd64: add             x1, x1, HEAP, lsl #32
    // 0x86bd68: r0 = LoadClassIdInstr(r1)
    //     0x86bd68: ldur            x0, [x1, #-1]
    //     0x86bd6c: ubfx            x0, x0, #0xc, #0x14
    // 0x86bd70: r2 = "prisonChallenge"
    //     0x86bd70: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0x86bd74: ldr             x2, [x2, #0x30]
    // 0x86bd78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86bd78: sub             lr, x0, #0xb4
    //     0x86bd7c: ldr             lr, [x21, lr, lsl #3]
    //     0x86bd80: blr             lr
    // 0x86bd84: r1 = 59
    //     0x86bd84: movz            x1, #0x3b
    // 0x86bd88: branchIfSmi(r0, 0x86bd98)
    //     0x86bd88: tbz             w0, #0, #0x86bd98
    //     0x86bd8c: nop             
    // 0x86bd90: r1 = LoadClassIdInstr(r0)
    //     0x86bd90: ldur            x1, [x0, #-1]
    //     0x86bd94: ubfx            x1, x1, #0xc, #0x14
    // 0x86bd98: r16 = "nothing"
    //     0x86bd98: add             x16, PP, #0x10, lsl #12  ; [pp+0x10038] "nothing"
    //     0x86bd9c: ldr             x16, [x16, #0x38]
    // 0x86bda0: stp             x16, x0, [SP]
    // 0x86bda4: mov             x0, x1
    // 0x86bda8: mov             lr, x0
    // 0x86bdac: ldr             lr, [x21, lr, lsl #3]
    // 0x86bdb0: blr             lr
    // 0x86bdb4: tbz             w0, #4, #0x86bdc8
    // 0x86bdb8: nop             
    // 0x86bdbc: r0 = "block"
    //     0x86bdbc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10040] "block"
    //     0x86bdc0: ldr             x0, [x0, #0x40]
    // 0x86bdc4: b               #0x8838b4
    // 0x86bdc8: r0 = "food"
    //     0x86bdc8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10048] "food"
    //     0x86bdcc: ldr             x0, [x0, #0x48]
    // 0x86bdd0: b               #0x8838b4
    // 0x86bdd4: r0 = "food"
    //     0x86bdd4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10048] "food"
    //     0x86bdd8: ldr             x0, [x0, #0x48]
    // 0x86bddc: b               #0x8838b4
    // 0x86bde0: r16 = "rank"
    //     0x86bde0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10050] "rank"
    //     0x86bde4: ldr             x16, [x16, #0x50]
    // 0x86bde8: ldur            lr, [fp, #-0x28]
    // 0x86bdec: stp             lr, x16, [SP]
    // 0x86bdf0: r0 = ==()
    //     0x86bdf0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86bdf4: tbnz            w0, #4, #0x86c2b0
    // 0x86bdf8: nop             
    // 0x86bdfc: ldur            x0, [fp, #-0x20]
    // 0x86be00: r1 = Null
    //     0x86be00: mov             x1, NULL
    // 0x86be04: r2 = 16
    //     0x86be04: movz            x2, #0x10
    // 0x86be08: r0 = AllocateArray()
    //     0x86be08: bl              #0x1502560  ; AllocateArrayStub
    // 0x86be0c: r17 = "EN"
    //     0x86be0c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86be10: ldr             x17, [x17, #0xb58]
    // 0x86be14: StoreField: r0->field_f = r17
    //     0x86be14: stur            w17, [x0, #0xf]
    // 0x86be18: r17 = "(D-Rank)"
    //     0x86be18: add             x17, PP, #0x10, lsl #12  ; [pp+0x10058] "(D-Rank)"
    //     0x86be1c: ldr             x17, [x17, #0x58]
    // 0x86be20: StoreField: r0->field_13 = r17
    //     0x86be20: stur            w17, [x0, #0x13]
    // 0x86be24: r17 = "CN"
    //     0x86be24: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86be28: ldr             x17, [x17, #0xb30]
    // 0x86be2c: ArrayStore: r0[0] = r17  ; List_4
    //     0x86be2c: stur            w17, [x0, #0x17]
    // 0x86be30: r17 = "（D级）"
    //     0x86be30: add             x17, PP, #0x10, lsl #12  ; [pp+0x10060] "（D级）"
    //     0x86be34: ldr             x17, [x17, #0x60]
    // 0x86be38: StoreField: r0->field_1b = r17
    //     0x86be38: stur            w17, [x0, #0x1b]
    // 0x86be3c: r17 = "TW"
    //     0x86be3c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86be40: ldr             x17, [x17, #0xb40]
    // 0x86be44: StoreField: r0->field_1f = r17
    //     0x86be44: stur            w17, [x0, #0x1f]
    // 0x86be48: r17 = "（D級）"
    //     0x86be48: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86be4c: ldr             x17, [x17, #0x68]
    // 0x86be50: StoreField: r0->field_23 = r17
    //     0x86be50: stur            w17, [x0, #0x23]
    // 0x86be54: r17 = "JP"
    //     0x86be54: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86be58: ldr             x17, [x17, #0xb50]
    // 0x86be5c: StoreField: r0->field_27 = r17
    //     0x86be5c: stur            w17, [x0, #0x27]
    // 0x86be60: r17 = "（D級）"
    //     0x86be60: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86be64: ldr             x17, [x17, #0x68]
    // 0x86be68: StoreField: r0->field_2b = r17
    //     0x86be68: stur            w17, [x0, #0x2b]
    // 0x86be6c: stp             x0, NULL, [SP]
    // 0x86be70: r0 = Map._fromLiteral()
    //     0x86be70: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86be74: ldur            x0, [fp, #-0x20]
    // 0x86be78: cmp             w0, NULL
    // 0x86be7c: b.ne            #0x86be8c
    // 0x86be80: nop             
    // 0x86be84: r1 = ""
    //     0x86be84: ldr             x1, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86be88: b               #0x86be90
    // 0x86be8c: mov             x1, x0
    // 0x86be90: r0 = getAIPlayer()
    //     0x86be90: bl              #0x8a6db8  ; [package:battlecross/library/aiLibrary.dart] ::getAIPlayer
    // 0x86be94: r17 = 311
    //     0x86be94: movz            x17, #0x137
    // 0x86be98: ldr             w1, [x0, x17]
    // 0x86be9c: DecompressPointer r1
    //     0x86be9c: add             x1, x1, HEAP, lsl #32
    // 0x86bea0: r0 = LoadClassIdInstr(r1)
    //     0x86bea0: ldur            x0, [x1, #-1]
    //     0x86bea4: ubfx            x0, x0, #0xc, #0x14
    // 0x86bea8: r0 = GDT[cid_x0 + 0xb663]()
    //     0x86bea8: movz            x17, #0xb663
    //     0x86beac: add             lr, x0, x17
    //     0x86beb0: ldr             lr, [x21, lr, lsl #3]
    //     0x86beb4: blr             lr
    // 0x86beb8: tbnz            w0, #4, #0x86c2a8
    // 0x86bebc: nop             
    // 0x86bec0: ldur            x0, [fp, #-0x20]
    // 0x86bec4: cmp             w0, NULL
    // 0x86bec8: b.ne            #0x86bed8
    // 0x86becc: nop             
    // 0x86bed0: r1 = ""
    //     0x86bed0: ldr             x1, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86bed4: b               #0x86bedc
    // 0x86bed8: mov             x1, x0
    // 0x86bedc: r0 = getAIPlayer()
    //     0x86bedc: bl              #0x8a6db8  ; [package:battlecross/library/aiLibrary.dart] ::getAIPlayer
    // 0x86bee0: LoadField: r2 = r0->field_eb
    //     0x86bee0: ldur            x2, [x0, #0xeb]
    // 0x86bee4: cmp             x2, #2
    // 0x86bee8: b.gt            #0x86c090
    // 0x86beec: nop             
    // 0x86bef0: cmp             x2, #1
    // 0x86bef4: b.gt            #0x86c018
    // 0x86bef8: nop             
    // 0x86befc: cmp             x2, #0
    // 0x86bf00: b.gt            #0x86bfa0
    // 0x86bf04: nop             
    // 0x86bf08: r0 = BoxInt64Instr(r2)
    //     0x86bf08: sbfiz           x0, x2, #1, #0x1f
    //     0x86bf0c: cmp             x2, x0, asr #1
    //     0x86bf10: b.eq            #0x86bf20
    //     0x86bf14: nop             
    //     0x86bf18: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86bf1c: stur            x2, [x0, #7]
    // 0x86bf20: cbnz            w0, #0x86c234
    // 0x86bf24: nop             
    // 0x86bf28: r1 = Null
    //     0x86bf28: mov             x1, NULL
    // 0x86bf2c: r2 = 16
    //     0x86bf2c: movz            x2, #0x10
    // 0x86bf30: r0 = AllocateArray()
    //     0x86bf30: bl              #0x1502560  ; AllocateArrayStub
    // 0x86bf34: r17 = "EN"
    //     0x86bf34: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86bf38: ldr             x17, [x17, #0xb58]
    // 0x86bf3c: StoreField: r0->field_f = r17
    //     0x86bf3c: stur            w17, [x0, #0xf]
    // 0x86bf40: r17 = "(D-Rank)"
    //     0x86bf40: add             x17, PP, #0x10, lsl #12  ; [pp+0x10058] "(D-Rank)"
    //     0x86bf44: ldr             x17, [x17, #0x58]
    // 0x86bf48: StoreField: r0->field_13 = r17
    //     0x86bf48: stur            w17, [x0, #0x13]
    // 0x86bf4c: r17 = "CN"
    //     0x86bf4c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86bf50: ldr             x17, [x17, #0xb30]
    // 0x86bf54: ArrayStore: r0[0] = r17  ; List_4
    //     0x86bf54: stur            w17, [x0, #0x17]
    // 0x86bf58: r17 = "（D级）"
    //     0x86bf58: add             x17, PP, #0x10, lsl #12  ; [pp+0x10060] "（D级）"
    //     0x86bf5c: ldr             x17, [x17, #0x60]
    // 0x86bf60: StoreField: r0->field_1b = r17
    //     0x86bf60: stur            w17, [x0, #0x1b]
    // 0x86bf64: r17 = "TW"
    //     0x86bf64: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86bf68: ldr             x17, [x17, #0xb40]
    // 0x86bf6c: StoreField: r0->field_1f = r17
    //     0x86bf6c: stur            w17, [x0, #0x1f]
    // 0x86bf70: r17 = "（D級）"
    //     0x86bf70: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86bf74: ldr             x17, [x17, #0x68]
    // 0x86bf78: StoreField: r0->field_23 = r17
    //     0x86bf78: stur            w17, [x0, #0x23]
    // 0x86bf7c: r17 = "JP"
    //     0x86bf7c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86bf80: ldr             x17, [x17, #0xb50]
    // 0x86bf84: StoreField: r0->field_27 = r17
    //     0x86bf84: stur            w17, [x0, #0x27]
    // 0x86bf88: r17 = "（D級）"
    //     0x86bf88: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86bf8c: ldr             x17, [x17, #0x68]
    // 0x86bf90: StoreField: r0->field_2b = r17
    //     0x86bf90: stur            w17, [x0, #0x2b]
    // 0x86bf94: stp             x0, NULL, [SP]
    // 0x86bf98: r0 = Map._fromLiteral()
    //     0x86bf98: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86bf9c: b               #0x86c2a8
    // 0x86bfa0: r1 = Null
    //     0x86bfa0: mov             x1, NULL
    // 0x86bfa4: r2 = 16
    //     0x86bfa4: movz            x2, #0x10
    // 0x86bfa8: r0 = AllocateArray()
    //     0x86bfa8: bl              #0x1502560  ; AllocateArrayStub
    // 0x86bfac: r17 = "EN"
    //     0x86bfac: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86bfb0: ldr             x17, [x17, #0xb58]
    // 0x86bfb4: StoreField: r0->field_f = r17
    //     0x86bfb4: stur            w17, [x0, #0xf]
    // 0x86bfb8: r17 = "(C-Rank)"
    //     0x86bfb8: add             x17, PP, #0x10, lsl #12  ; [pp+0x10070] "(C-Rank)"
    //     0x86bfbc: ldr             x17, [x17, #0x70]
    // 0x86bfc0: StoreField: r0->field_13 = r17
    //     0x86bfc0: stur            w17, [x0, #0x13]
    // 0x86bfc4: r17 = "CN"
    //     0x86bfc4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86bfc8: ldr             x17, [x17, #0xb30]
    // 0x86bfcc: ArrayStore: r0[0] = r17  ; List_4
    //     0x86bfcc: stur            w17, [x0, #0x17]
    // 0x86bfd0: r17 = "（C级）"
    //     0x86bfd0: add             x17, PP, #0x10, lsl #12  ; [pp+0x10078] "（C级）"
    //     0x86bfd4: ldr             x17, [x17, #0x78]
    // 0x86bfd8: StoreField: r0->field_1b = r17
    //     0x86bfd8: stur            w17, [x0, #0x1b]
    // 0x86bfdc: r17 = "TW"
    //     0x86bfdc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86bfe0: ldr             x17, [x17, #0xb40]
    // 0x86bfe4: StoreField: r0->field_1f = r17
    //     0x86bfe4: stur            w17, [x0, #0x1f]
    // 0x86bfe8: r17 = "（C級）"
    //     0x86bfe8: add             x17, PP, #0x10, lsl #12  ; [pp+0x10080] "（C級）"
    //     0x86bfec: ldr             x17, [x17, #0x80]
    // 0x86bff0: StoreField: r0->field_23 = r17
    //     0x86bff0: stur            w17, [x0, #0x23]
    // 0x86bff4: r17 = "JP"
    //     0x86bff4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86bff8: ldr             x17, [x17, #0xb50]
    // 0x86bffc: StoreField: r0->field_27 = r17
    //     0x86bffc: stur            w17, [x0, #0x27]
    // 0x86c000: r17 = "（C級）"
    //     0x86c000: add             x17, PP, #0x10, lsl #12  ; [pp+0x10080] "（C級）"
    //     0x86c004: ldr             x17, [x17, #0x80]
    // 0x86c008: StoreField: r0->field_2b = r17
    //     0x86c008: stur            w17, [x0, #0x2b]
    // 0x86c00c: stp             x0, NULL, [SP]
    // 0x86c010: r0 = Map._fromLiteral()
    //     0x86c010: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c014: b               #0x86c2a8
    // 0x86c018: r1 = Null
    //     0x86c018: mov             x1, NULL
    // 0x86c01c: r2 = 16
    //     0x86c01c: movz            x2, #0x10
    // 0x86c020: r0 = AllocateArray()
    //     0x86c020: bl              #0x1502560  ; AllocateArrayStub
    // 0x86c024: r17 = "EN"
    //     0x86c024: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86c028: ldr             x17, [x17, #0xb58]
    // 0x86c02c: StoreField: r0->field_f = r17
    //     0x86c02c: stur            w17, [x0, #0xf]
    // 0x86c030: r17 = "(B-Rank)"
    //     0x86c030: add             x17, PP, #0x10, lsl #12  ; [pp+0x10088] "(B-Rank)"
    //     0x86c034: ldr             x17, [x17, #0x88]
    // 0x86c038: StoreField: r0->field_13 = r17
    //     0x86c038: stur            w17, [x0, #0x13]
    // 0x86c03c: r17 = "CN"
    //     0x86c03c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86c040: ldr             x17, [x17, #0xb30]
    // 0x86c044: ArrayStore: r0[0] = r17  ; List_4
    //     0x86c044: stur            w17, [x0, #0x17]
    // 0x86c048: r17 = "（B级）"
    //     0x86c048: add             x17, PP, #0x10, lsl #12  ; [pp+0x10090] "（B级）"
    //     0x86c04c: ldr             x17, [x17, #0x90]
    // 0x86c050: StoreField: r0->field_1b = r17
    //     0x86c050: stur            w17, [x0, #0x1b]
    // 0x86c054: r17 = "TW"
    //     0x86c054: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86c058: ldr             x17, [x17, #0xb40]
    // 0x86c05c: StoreField: r0->field_1f = r17
    //     0x86c05c: stur            w17, [x0, #0x1f]
    // 0x86c060: r17 = "（B級）"
    //     0x86c060: add             x17, PP, #0x10, lsl #12  ; [pp+0x10098] "（B級）"
    //     0x86c064: ldr             x17, [x17, #0x98]
    // 0x86c068: StoreField: r0->field_23 = r17
    //     0x86c068: stur            w17, [x0, #0x23]
    // 0x86c06c: r17 = "JP"
    //     0x86c06c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86c070: ldr             x17, [x17, #0xb50]
    // 0x86c074: StoreField: r0->field_27 = r17
    //     0x86c074: stur            w17, [x0, #0x27]
    // 0x86c078: r17 = "（B級）"
    //     0x86c078: add             x17, PP, #0x10, lsl #12  ; [pp+0x10098] "（B級）"
    //     0x86c07c: ldr             x17, [x17, #0x98]
    // 0x86c080: StoreField: r0->field_2b = r17
    //     0x86c080: stur            w17, [x0, #0x2b]
    // 0x86c084: stp             x0, NULL, [SP]
    // 0x86c088: r0 = Map._fromLiteral()
    //     0x86c088: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c08c: b               #0x86c2a8
    // 0x86c090: cmp             x2, #4
    // 0x86c094: b.gt            #0x86c198
    // 0x86c098: nop             
    // 0x86c09c: cmp             x2, #3
    // 0x86c0a0: b.gt            #0x86c120
    // 0x86c0a4: nop             
    // 0x86c0a8: r1 = Null
    //     0x86c0a8: mov             x1, NULL
    // 0x86c0ac: r2 = 16
    //     0x86c0ac: movz            x2, #0x10
    // 0x86c0b0: r0 = AllocateArray()
    //     0x86c0b0: bl              #0x1502560  ; AllocateArrayStub
    // 0x86c0b4: r17 = "EN"
    //     0x86c0b4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86c0b8: ldr             x17, [x17, #0xb58]
    // 0x86c0bc: StoreField: r0->field_f = r17
    //     0x86c0bc: stur            w17, [x0, #0xf]
    // 0x86c0c0: r17 = "(A-Rank)"
    //     0x86c0c0: add             x17, PP, #0x10, lsl #12  ; [pp+0x100a0] "(A-Rank)"
    //     0x86c0c4: ldr             x17, [x17, #0xa0]
    // 0x86c0c8: StoreField: r0->field_13 = r17
    //     0x86c0c8: stur            w17, [x0, #0x13]
    // 0x86c0cc: r17 = "CN"
    //     0x86c0cc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86c0d0: ldr             x17, [x17, #0xb30]
    // 0x86c0d4: ArrayStore: r0[0] = r17  ; List_4
    //     0x86c0d4: stur            w17, [x0, #0x17]
    // 0x86c0d8: r17 = "（A级）"
    //     0x86c0d8: add             x17, PP, #0x10, lsl #12  ; [pp+0x100a8] "（A级）"
    //     0x86c0dc: ldr             x17, [x17, #0xa8]
    // 0x86c0e0: StoreField: r0->field_1b = r17
    //     0x86c0e0: stur            w17, [x0, #0x1b]
    // 0x86c0e4: r17 = "TW"
    //     0x86c0e4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86c0e8: ldr             x17, [x17, #0xb40]
    // 0x86c0ec: StoreField: r0->field_1f = r17
    //     0x86c0ec: stur            w17, [x0, #0x1f]
    // 0x86c0f0: r17 = "（A級）"
    //     0x86c0f0: add             x17, PP, #0x10, lsl #12  ; [pp+0x100b0] "（A級）"
    //     0x86c0f4: ldr             x17, [x17, #0xb0]
    // 0x86c0f8: StoreField: r0->field_23 = r17
    //     0x86c0f8: stur            w17, [x0, #0x23]
    // 0x86c0fc: r17 = "JP"
    //     0x86c0fc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86c100: ldr             x17, [x17, #0xb50]
    // 0x86c104: StoreField: r0->field_27 = r17
    //     0x86c104: stur            w17, [x0, #0x27]
    // 0x86c108: r17 = "（A級）"
    //     0x86c108: add             x17, PP, #0x10, lsl #12  ; [pp+0x100b0] "（A級）"
    //     0x86c10c: ldr             x17, [x17, #0xb0]
    // 0x86c110: StoreField: r0->field_2b = r17
    //     0x86c110: stur            w17, [x0, #0x2b]
    // 0x86c114: stp             x0, NULL, [SP]
    // 0x86c118: r0 = Map._fromLiteral()
    //     0x86c118: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c11c: b               #0x86c2a8
    // 0x86c120: r1 = Null
    //     0x86c120: mov             x1, NULL
    // 0x86c124: r2 = 16
    //     0x86c124: movz            x2, #0x10
    // 0x86c128: r0 = AllocateArray()
    //     0x86c128: bl              #0x1502560  ; AllocateArrayStub
    // 0x86c12c: r17 = "EN"
    //     0x86c12c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86c130: ldr             x17, [x17, #0xb58]
    // 0x86c134: StoreField: r0->field_f = r17
    //     0x86c134: stur            w17, [x0, #0xf]
    // 0x86c138: r17 = "(S-Rank)"
    //     0x86c138: add             x17, PP, #0x10, lsl #12  ; [pp+0x100b8] "(S-Rank)"
    //     0x86c13c: ldr             x17, [x17, #0xb8]
    // 0x86c140: StoreField: r0->field_13 = r17
    //     0x86c140: stur            w17, [x0, #0x13]
    // 0x86c144: r17 = "CN"
    //     0x86c144: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86c148: ldr             x17, [x17, #0xb30]
    // 0x86c14c: ArrayStore: r0[0] = r17  ; List_4
    //     0x86c14c: stur            w17, [x0, #0x17]
    // 0x86c150: r17 = "（S级）"
    //     0x86c150: add             x17, PP, #0x10, lsl #12  ; [pp+0x100c0] "（S级）"
    //     0x86c154: ldr             x17, [x17, #0xc0]
    // 0x86c158: StoreField: r0->field_1b = r17
    //     0x86c158: stur            w17, [x0, #0x1b]
    // 0x86c15c: r17 = "TW"
    //     0x86c15c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86c160: ldr             x17, [x17, #0xb40]
    // 0x86c164: StoreField: r0->field_1f = r17
    //     0x86c164: stur            w17, [x0, #0x1f]
    // 0x86c168: r17 = "（S級）"
    //     0x86c168: add             x17, PP, #0x10, lsl #12  ; [pp+0x100c8] "（S級）"
    //     0x86c16c: ldr             x17, [x17, #0xc8]
    // 0x86c170: StoreField: r0->field_23 = r17
    //     0x86c170: stur            w17, [x0, #0x23]
    // 0x86c174: r17 = "JP"
    //     0x86c174: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86c178: ldr             x17, [x17, #0xb50]
    // 0x86c17c: StoreField: r0->field_27 = r17
    //     0x86c17c: stur            w17, [x0, #0x27]
    // 0x86c180: r17 = "（S級）"
    //     0x86c180: add             x17, PP, #0x10, lsl #12  ; [pp+0x100c8] "（S級）"
    //     0x86c184: ldr             x17, [x17, #0xc8]
    // 0x86c188: StoreField: r0->field_2b = r17
    //     0x86c188: stur            w17, [x0, #0x2b]
    // 0x86c18c: stp             x0, NULL, [SP]
    // 0x86c190: r0 = Map._fromLiteral()
    //     0x86c190: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c194: b               #0x86c2a8
    // 0x86c198: r0 = BoxInt64Instr(r2)
    //     0x86c198: sbfiz           x0, x2, #1, #0x1f
    //     0x86c19c: cmp             x2, x0, asr #1
    //     0x86c1a0: b.eq            #0x86c1b0
    //     0x86c1a4: nop             
    //     0x86c1a8: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86c1ac: stur            x2, [x0, #7]
    // 0x86c1b0: cmp             w0, #0xa
    // 0x86c1b4: b.ne            #0x86c234
    // 0x86c1b8: nop             
    // 0x86c1bc: r1 = Null
    //     0x86c1bc: mov             x1, NULL
    // 0x86c1c0: r2 = 16
    //     0x86c1c0: movz            x2, #0x10
    // 0x86c1c4: r0 = AllocateArray()
    //     0x86c1c4: bl              #0x1502560  ; AllocateArrayStub
    // 0x86c1c8: r17 = "EN"
    //     0x86c1c8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86c1cc: ldr             x17, [x17, #0xb58]
    // 0x86c1d0: StoreField: r0->field_f = r17
    //     0x86c1d0: stur            w17, [x0, #0xf]
    // 0x86c1d4: r17 = "(SS-Rank)"
    //     0x86c1d4: add             x17, PP, #0x10, lsl #12  ; [pp+0x100d0] "(SS-Rank)"
    //     0x86c1d8: ldr             x17, [x17, #0xd0]
    // 0x86c1dc: StoreField: r0->field_13 = r17
    //     0x86c1dc: stur            w17, [x0, #0x13]
    // 0x86c1e0: r17 = "CN"
    //     0x86c1e0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86c1e4: ldr             x17, [x17, #0xb30]
    // 0x86c1e8: ArrayStore: r0[0] = r17  ; List_4
    //     0x86c1e8: stur            w17, [x0, #0x17]
    // 0x86c1ec: r17 = "（SS级）"
    //     0x86c1ec: add             x17, PP, #0x10, lsl #12  ; [pp+0x100d8] "（SS级）"
    //     0x86c1f0: ldr             x17, [x17, #0xd8]
    // 0x86c1f4: StoreField: r0->field_1b = r17
    //     0x86c1f4: stur            w17, [x0, #0x1b]
    // 0x86c1f8: r17 = "TW"
    //     0x86c1f8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86c1fc: ldr             x17, [x17, #0xb40]
    // 0x86c200: StoreField: r0->field_1f = r17
    //     0x86c200: stur            w17, [x0, #0x1f]
    // 0x86c204: r17 = "（SS級）"
    //     0x86c204: add             x17, PP, #0x10, lsl #12  ; [pp+0x100e0] "（SS級）"
    //     0x86c208: ldr             x17, [x17, #0xe0]
    // 0x86c20c: StoreField: r0->field_23 = r17
    //     0x86c20c: stur            w17, [x0, #0x23]
    // 0x86c210: r17 = "JP"
    //     0x86c210: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86c214: ldr             x17, [x17, #0xb50]
    // 0x86c218: StoreField: r0->field_27 = r17
    //     0x86c218: stur            w17, [x0, #0x27]
    // 0x86c21c: r17 = "（SS級）"
    //     0x86c21c: add             x17, PP, #0x10, lsl #12  ; [pp+0x100e0] "（SS級）"
    //     0x86c220: ldr             x17, [x17, #0xe0]
    // 0x86c224: StoreField: r0->field_2b = r17
    //     0x86c224: stur            w17, [x0, #0x2b]
    // 0x86c228: stp             x0, NULL, [SP]
    // 0x86c22c: r0 = Map._fromLiteral()
    //     0x86c22c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c230: b               #0x86c2a8
    // 0x86c234: r1 = Null
    //     0x86c234: mov             x1, NULL
    // 0x86c238: r2 = 16
    //     0x86c238: movz            x2, #0x10
    // 0x86c23c: r0 = AllocateArray()
    //     0x86c23c: bl              #0x1502560  ; AllocateArrayStub
    // 0x86c240: r17 = "EN"
    //     0x86c240: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0x86c244: ldr             x17, [x17, #0xb58]
    // 0x86c248: StoreField: r0->field_f = r17
    //     0x86c248: stur            w17, [x0, #0xf]
    // 0x86c24c: r17 = "(D-Rank)"
    //     0x86c24c: add             x17, PP, #0x10, lsl #12  ; [pp+0x10058] "(D-Rank)"
    //     0x86c250: ldr             x17, [x17, #0x58]
    // 0x86c254: StoreField: r0->field_13 = r17
    //     0x86c254: stur            w17, [x0, #0x13]
    // 0x86c258: r17 = "CN"
    //     0x86c258: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0x86c25c: ldr             x17, [x17, #0xb30]
    // 0x86c260: ArrayStore: r0[0] = r17  ; List_4
    //     0x86c260: stur            w17, [x0, #0x17]
    // 0x86c264: r17 = "（D级）"
    //     0x86c264: add             x17, PP, #0x10, lsl #12  ; [pp+0x10060] "（D级）"
    //     0x86c268: ldr             x17, [x17, #0x60]
    // 0x86c26c: StoreField: r0->field_1b = r17
    //     0x86c26c: stur            w17, [x0, #0x1b]
    // 0x86c270: r17 = "TW"
    //     0x86c270: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0x86c274: ldr             x17, [x17, #0xb40]
    // 0x86c278: StoreField: r0->field_1f = r17
    //     0x86c278: stur            w17, [x0, #0x1f]
    // 0x86c27c: r17 = "（D級）"
    //     0x86c27c: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86c280: ldr             x17, [x17, #0x68]
    // 0x86c284: StoreField: r0->field_23 = r17
    //     0x86c284: stur            w17, [x0, #0x23]
    // 0x86c288: r17 = "JP"
    //     0x86c288: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0x86c28c: ldr             x17, [x17, #0xb50]
    // 0x86c290: StoreField: r0->field_27 = r17
    //     0x86c290: stur            w17, [x0, #0x27]
    // 0x86c294: r17 = "（D級）"
    //     0x86c294: add             x17, PP, #0x10, lsl #12  ; [pp+0x10068] "（D級）"
    //     0x86c298: ldr             x17, [x17, #0x68]
    // 0x86c29c: StoreField: r0->field_2b = r17
    //     0x86c29c: stur            w17, [x0, #0x2b]
    // 0x86c2a0: stp             x0, NULL, [SP]
    // 0x86c2a4: r0 = Map._fromLiteral()
    //     0x86c2a4: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86c2a8: r0 = ""
    //     0x86c2a8: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86c2ac: b               #0x8838b4
    // 0x86c2b0: ldur            x0, [fp, #-0x20]
    // 0x86c2b4: r16 = "angDaily"
    //     0x86c2b4: add             x16, PP, #0x10, lsl #12  ; [pp+0x100e8] "angDaily"
    //     0x86c2b8: ldr             x16, [x16, #0xe8]
    // 0x86c2bc: ldur            lr, [fp, #-0x28]
    // 0x86c2c0: stp             lr, x16, [SP]
    // 0x86c2c4: r0 = ==()
    //     0x86c2c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c2c8: tbnz            w0, #4, #0x86c430
    // 0x86c2cc: nop             
    // 0x86c2d0: r0 = LoadStaticField(0xb54)
    //     0x86c2d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c2d4: ldr             x0, [x0, #0x16a8]
    // 0x86c2d8: cmp             w0, NULL
    // 0x86c2dc: b.eq            #0x86c428
    // 0x86c2e0: nop             
    // 0x86c2e4: r17 = 351
    //     0x86c2e4: movz            x17, #0x15f
    // 0x86c2e8: ldr             w1, [x0, x17]
    // 0x86c2ec: DecompressPointer r1
    //     0x86c2ec: add             x1, x1, HEAP, lsl #32
    // 0x86c2f0: r0 = LoadClassIdInstr(r1)
    //     0x86c2f0: ldur            x0, [x1, #-1]
    //     0x86c2f4: ubfx            x0, x0, #0xc, #0x14
    // 0x86c2f8: r2 = "questAngDaily"
    //     0x86c2f8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc40] "questAngDaily"
    //     0x86c2fc: ldr             x2, [x2, #0xc40]
    // 0x86c300: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c300: sub             lr, x0, #0xb4
    //     0x86c304: ldr             lr, [x21, lr, lsl #3]
    //     0x86c308: blr             lr
    // 0x86c30c: cmp             w0, NULL
    // 0x86c310: b.eq            #0x86c428
    // 0x86c314: nop             
    // 0x86c318: r0 = LoadStaticField(0xb54)
    //     0x86c318: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c31c: ldr             x0, [x0, #0x16a8]
    // 0x86c320: cmp             w0, NULL
    // 0x86c324: b.ne            #0x86c334
    // 0x86c328: nop             
    // 0x86c32c: r0 = Null
    //     0x86c32c: mov             x0, NULL
    // 0x86c330: b               #0x86c35c
    // 0x86c334: r17 = 351
    //     0x86c334: movz            x17, #0x15f
    // 0x86c338: ldr             w1, [x0, x17]
    // 0x86c33c: DecompressPointer r1
    //     0x86c33c: add             x1, x1, HEAP, lsl #32
    // 0x86c340: r0 = LoadClassIdInstr(r1)
    //     0x86c340: ldur            x0, [x1, #-1]
    //     0x86c344: ubfx            x0, x0, #0xc, #0x14
    // 0x86c348: r2 = "questAngDaily"
    //     0x86c348: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc40] "questAngDaily"
    //     0x86c34c: ldr             x2, [x2, #0xc40]
    // 0x86c350: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c350: sub             lr, x0, #0xb4
    //     0x86c354: ldr             lr, [x21, lr, lsl #3]
    //     0x86c358: blr             lr
    // 0x86c35c: cmp             w0, NULL
    // 0x86c360: b.ne            #0x86c374
    // 0x86c364: nop             
    // 0x86c368: r3 = "woodenracket"
    //     0x86c368: add             x3, PP, #0xf, lsl #12  ; [pp+0xffd8] "woodenracket"
    //     0x86c36c: ldr             x3, [x3, #0xfd8]
    // 0x86c370: b               #0x86c378
    // 0x86c374: mov             x3, x0
    // 0x86c378: mov             x0, x3
    // 0x86c37c: stur            x3, [fp, #-8]
    // 0x86c380: r2 = Null
    //     0x86c380: mov             x2, NULL
    // 0x86c384: r1 = Null
    //     0x86c384: mov             x1, NULL
    // 0x86c388: r4 = 59
    //     0x86c388: movz            x4, #0x3b
    // 0x86c38c: branchIfSmi(r0, 0x86c39c)
    //     0x86c38c: tbz             w0, #0, #0x86c39c
    //     0x86c390: nop             
    // 0x86c394: r4 = LoadClassIdInstr(r0)
    //     0x86c394: ldur            x4, [x0, #-1]
    //     0x86c398: ubfx            x4, x4, #0xc, #0x14
    // 0x86c39c: sub             x4, x4, #0x5d
    // 0x86c3a0: cmp             x4, #1
    // 0x86c3a4: b.ls            #0x86c3bc
    // 0x86c3a8: nop             
    // 0x86c3ac: r8 = String
    //     0x86c3ac: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86c3b0: r3 = Null
    //     0x86c3b0: add             x3, PP, #0x10, lsl #12  ; [pp+0x100f0] Null
    //     0x86c3b4: ldr             x3, [x3, #0xf0]
    // 0x86c3b8: r0 = String()
    //     0x86c3b8: bl              #0x1523244  ; IsType_String_Stub
    // 0x86c3bc: ldur            x1, [fp, #-8]
    // 0x86c3c0: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86c3c0: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86c3c4: r0 = getGear()
    //     0x86c3c4: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x86c3c8: LoadField: r1 = r0->field_f
    //     0x86c3c8: ldur            w1, [x0, #0xf]
    // 0x86c3cc: DecompressPointer r1
    //     0x86c3cc: add             x1, x1, HEAP, lsl #32
    // 0x86c3d0: r2 = LoadStaticField(0xb40)
    //     0x86c3d0: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x86c3d4: ldr             x2, [x2, #0x1680]
    // 0x86c3d8: r0 = []()
    //     0x86c3d8: bl              #0x148b1e4  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]
    // 0x86c3dc: mov             x3, x0
    // 0x86c3e0: r2 = Null
    //     0x86c3e0: mov             x2, NULL
    // 0x86c3e4: r1 = Null
    //     0x86c3e4: mov             x1, NULL
    // 0x86c3e8: stur            x3, [fp, #-8]
    // 0x86c3ec: r4 = 59
    //     0x86c3ec: movz            x4, #0x3b
    // 0x86c3f0: branchIfSmi(r0, 0x86c400)
    //     0x86c3f0: tbz             w0, #0, #0x86c400
    //     0x86c3f4: nop             
    // 0x86c3f8: r4 = LoadClassIdInstr(r0)
    //     0x86c3f8: ldur            x4, [x0, #-1]
    //     0x86c3fc: ubfx            x4, x4, #0xc, #0x14
    // 0x86c400: sub             x4, x4, #0x5d
    // 0x86c404: cmp             x4, #1
    // 0x86c408: b.ls            #0x86c420
    // 0x86c40c: nop             
    // 0x86c410: r8 = String
    //     0x86c410: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86c414: r3 = Null
    //     0x86c414: add             x3, PP, #0x10, lsl #12  ; [pp+0x10100] Null
    //     0x86c418: ldr             x3, [x3, #0x100]
    // 0x86c41c: r0 = String()
    //     0x86c41c: bl              #0x1523244  ; IsType_String_Stub
    // 0x86c420: ldur            x0, [fp, #-8]
    // 0x86c424: b               #0x8838b4
    // 0x86c428: r0 = ""
    //     0x86c428: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86c42c: b               #0x8838b4
    // 0x86c430: r16 = "wakuDaily"
    //     0x86c430: add             x16, PP, #0x10, lsl #12  ; [pp+0x10110] "wakuDaily"
    //     0x86c434: ldr             x16, [x16, #0x110]
    // 0x86c438: ldur            lr, [fp, #-0x28]
    // 0x86c43c: stp             lr, x16, [SP]
    // 0x86c440: r0 = ==()
    //     0x86c440: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c444: tbnz            w0, #4, #0x86c64c
    // 0x86c448: nop             
    // 0x86c44c: r0 = LoadStaticField(0xb54)
    //     0x86c44c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c450: ldr             x0, [x0, #0x16a8]
    // 0x86c454: cmp             w0, NULL
    // 0x86c458: b.ne            #0x86c468
    // 0x86c45c: nop             
    // 0x86c460: r0 = Null
    //     0x86c460: mov             x0, NULL
    // 0x86c464: b               #0x86c490
    // 0x86c468: r17 = 331
    //     0x86c468: movz            x17, #0x14b
    // 0x86c46c: ldr             w1, [x0, x17]
    // 0x86c470: DecompressPointer r1
    //     0x86c470: add             x1, x1, HEAP, lsl #32
    // 0x86c474: r0 = LoadClassIdInstr(r1)
    //     0x86c474: ldur            x0, [x1, #-1]
    //     0x86c478: ubfx            x0, x0, #0xc, #0x14
    // 0x86c47c: r2 = "weather"
    //     0x86c47c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd08] "weather"
    //     0x86c480: ldr             x2, [x2, #0xd08]
    // 0x86c484: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c484: sub             lr, x0, #0xb4
    //     0x86c488: ldr             lr, [x21, lr, lsl #3]
    //     0x86c48c: blr             lr
    // 0x86c490: cmp             w0, NULL
    // 0x86c494: b.ne            #0x86c4b0
    // 0x86c498: nop             
    // 0x86c49c: r1 = Null
    //     0x86c49c: mov             x1, NULL
    // 0x86c4a0: r2 = 0
    //     0x86c4a0: movz            x2, #0
    // 0x86c4a4: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86c4a4: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86c4a8: mov             x3, x0
    // 0x86c4ac: b               #0x86c4b4
    // 0x86c4b0: mov             x3, x0
    // 0x86c4b4: mov             x0, x3
    // 0x86c4b8: stur            x3, [fp, #-8]
    // 0x86c4bc: r2 = Null
    //     0x86c4bc: mov             x2, NULL
    // 0x86c4c0: r1 = Null
    //     0x86c4c0: mov             x1, NULL
    // 0x86c4c4: r4 = 59
    //     0x86c4c4: movz            x4, #0x3b
    // 0x86c4c8: branchIfSmi(r0, 0x86c4d8)
    //     0x86c4c8: tbz             w0, #0, #0x86c4d8
    //     0x86c4cc: nop             
    // 0x86c4d0: r4 = LoadClassIdInstr(r0)
    //     0x86c4d0: ldur            x4, [x0, #-1]
    //     0x86c4d4: ubfx            x4, x4, #0xc, #0x14
    // 0x86c4d8: cmp             x4, #0xcdb
    // 0x86c4dc: b.eq            #0x86c4f8
    // 0x86c4e0: nop             
    // 0x86c4e4: r8 = Timestamp
    //     0x86c4e4: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86c4e8: ldr             x8, [x8, #0xa30]
    // 0x86c4ec: r3 = Null
    //     0x86c4ec: add             x3, PP, #0x10, lsl #12  ; [pp+0x10118] Null
    //     0x86c4f0: ldr             x3, [x3, #0x118]
    // 0x86c4f4: r0 = Timestamp()
    //     0x86c4f4: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86c4f8: r0 = getTrueDateTime()
    //     0x86c4f8: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x86c4fc: ldur            x1, [fp, #-8]
    // 0x86c500: stur            x0, [fp, #-8]
    // 0x86c504: r0 = toDate()
    //     0x86c504: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86c508: ldur            x1, [fp, #-8]
    // 0x86c50c: mov             x2, x0
    // 0x86c510: r0 = difference()
    //     0x86c510: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86c514: mov             x1, x0
    // 0x86c518: r0 = inMinutes()
    //     0x86c518: bl              #0x8a6d94  ; [dart:core] Duration::inMinutes
    // 0x86c51c: mov             x2, x0
    // 0x86c520: stur            x2, [fp, #-0x38]
    // 0x86c524: r0 = BoxInt64Instr(r2)
    //     0x86c524: sbfiz           x0, x2, #1, #0x1f
    //     0x86c528: cmp             x2, x0, asr #1
    //     0x86c52c: b.eq            #0x86c53c
    //     0x86c530: nop             
    //     0x86c534: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86c538: stur            x2, [x0, #7]
    // 0x86c53c: mov             x1, x0
    // 0x86c540: r0 = print()
    //     0x86c540: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x86c544: r0 = LoadStaticField(0xb54)
    //     0x86c544: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c548: ldr             x0, [x0, #0x16a8]
    // 0x86c54c: cmp             w0, NULL
    // 0x86c550: b.eq            #0x86c620
    // 0x86c554: nop             
    // 0x86c558: r17 = 351
    //     0x86c558: movz            x17, #0x15f
    // 0x86c55c: ldr             w1, [x0, x17]
    // 0x86c560: DecompressPointer r1
    //     0x86c560: add             x1, x1, HEAP, lsl #32
    // 0x86c564: r0 = LoadClassIdInstr(r1)
    //     0x86c564: ldur            x0, [x1, #-1]
    //     0x86c568: ubfx            x0, x0, #0xc, #0x14
    // 0x86c56c: r2 = "wakuDaily"
    //     0x86c56c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10110] "wakuDaily"
    //     0x86c570: ldr             x2, [x2, #0x110]
    // 0x86c574: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c574: sub             lr, x0, #0xb4
    //     0x86c578: ldr             lr, [x21, lr, lsl #3]
    //     0x86c57c: blr             lr
    // 0x86c580: cmp             w0, NULL
    // 0x86c584: b.eq            #0x86c620
    // 0x86c588: nop             
    // 0x86c58c: r0 = LoadStaticField(0xb54)
    //     0x86c58c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c590: ldr             x0, [x0, #0x16a8]
    // 0x86c594: cmp             w0, NULL
    // 0x86c598: b.ne            #0x86c5a8
    // 0x86c59c: nop             
    // 0x86c5a0: r3 = Null
    //     0x86c5a0: mov             x3, NULL
    // 0x86c5a4: b               #0x86c5d4
    // 0x86c5a8: r17 = 351
    //     0x86c5a8: movz            x17, #0x15f
    // 0x86c5ac: ldr             w1, [x0, x17]
    // 0x86c5b0: DecompressPointer r1
    //     0x86c5b0: add             x1, x1, HEAP, lsl #32
    // 0x86c5b4: r0 = LoadClassIdInstr(r1)
    //     0x86c5b4: ldur            x0, [x1, #-1]
    //     0x86c5b8: ubfx            x0, x0, #0xc, #0x14
    // 0x86c5bc: r2 = "wakuDaily"
    //     0x86c5bc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10110] "wakuDaily"
    //     0x86c5c0: ldr             x2, [x2, #0x110]
    // 0x86c5c4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c5c4: sub             lr, x0, #0xb4
    //     0x86c5c8: ldr             lr, [x21, lr, lsl #3]
    //     0x86c5cc: blr             lr
    // 0x86c5d0: mov             x3, x0
    // 0x86c5d4: mov             x0, x3
    // 0x86c5d8: stur            x3, [fp, #-8]
    // 0x86c5dc: r2 = Null
    //     0x86c5dc: mov             x2, NULL
    // 0x86c5e0: r1 = Null
    //     0x86c5e0: mov             x1, NULL
    // 0x86c5e4: r4 = 59
    //     0x86c5e4: movz            x4, #0x3b
    // 0x86c5e8: branchIfSmi(r0, 0x86c5f8)
    //     0x86c5e8: tbz             w0, #0, #0x86c5f8
    //     0x86c5ec: nop             
    // 0x86c5f0: r4 = LoadClassIdInstr(r0)
    //     0x86c5f0: ldur            x4, [x0, #-1]
    //     0x86c5f4: ubfx            x4, x4, #0xc, #0x14
    // 0x86c5f8: sub             x4, x4, #0x5d
    // 0x86c5fc: cmp             x4, #1
    // 0x86c600: b.ls            #0x86c618
    // 0x86c604: nop             
    // 0x86c608: r8 = String
    //     0x86c608: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86c60c: r3 = Null
    //     0x86c60c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10128] Null
    //     0x86c610: ldr             x3, [x3, #0x128]
    // 0x86c614: r0 = String()
    //     0x86c614: bl              #0x1523244  ; IsType_String_Stub
    // 0x86c618: ldur            x1, [fp, #-8]
    // 0x86c61c: b               #0x86c628
    // 0x86c620: r1 = "tradeExp"
    //     0x86c620: add             x1, PP, #0x10, lsl #12  ; [pp+0x10138] "tradeExp"
    //     0x86c624: ldr             x1, [x1, #0x138]
    // 0x86c628: ldur            x0, [fp, #-0x38]
    // 0x86c62c: cmp             x0, #0x3c
    // 0x86c630: b.le            #0x86c644
    // 0x86c634: nop             
    // 0x86c638: r0 = "randomCheck1"
    //     0x86c638: add             x0, PP, #0x10, lsl #12  ; [pp+0x10140] "randomCheck1"
    //     0x86c63c: ldr             x0, [x0, #0x140]
    // 0x86c640: b               #0x8838b4
    // 0x86c644: mov             x0, x1
    // 0x86c648: b               #0x8838b4
    // 0x86c64c: r16 = "scholarbgm"
    //     0x86c64c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10148] "scholarbgm"
    //     0x86c650: ldr             x16, [x16, #0x148]
    // 0x86c654: ldur            lr, [fp, #-0x28]
    // 0x86c658: stp             lr, x16, [SP]
    // 0x86c65c: r0 = ==()
    //     0x86c65c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c660: tbnz            w0, #4, #0x86c7f8
    // 0x86c664: nop             
    // 0x86c668: r0 = LoadStaticField(0xb54)
    //     0x86c668: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c66c: ldr             x0, [x0, #0x16a8]
    // 0x86c670: cmp             w0, NULL
    // 0x86c674: b.eq            #0x86c760
    // 0x86c678: nop             
    // 0x86c67c: r17 = 327
    //     0x86c67c: movz            x17, #0x147
    // 0x86c680: ldr             w1, [x0, x17]
    // 0x86c684: DecompressPointer r1
    //     0x86c684: add             x1, x1, HEAP, lsl #32
    // 0x86c688: r0 = LoadClassIdInstr(r1)
    //     0x86c688: ldur            x0, [x1, #-1]
    //     0x86c68c: ubfx            x0, x0, #0xc, #0x14
    // 0x86c690: r2 = "storyYukiComa.3"
    //     0x86c690: add             x2, PP, #0x10, lsl #12  ; [pp+0x10150] "storyYukiComa.3"
    //     0x86c694: ldr             x2, [x2, #0x150]
    // 0x86c698: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c698: sub             lr, x0, #0xb4
    //     0x86c69c: ldr             lr, [x21, lr, lsl #3]
    //     0x86c6a0: blr             lr
    // 0x86c6a4: cmp             w0, NULL
    // 0x86c6a8: b.eq            #0x86c760
    // 0x86c6ac: nop             
    // 0x86c6b0: r0 = LoadStaticField(0xb54)
    //     0x86c6b0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c6b4: ldr             x0, [x0, #0x16a8]
    // 0x86c6b8: cmp             w0, NULL
    // 0x86c6bc: b.ne            #0x86c6cc
    // 0x86c6c0: nop             
    // 0x86c6c4: r3 = Null
    //     0x86c6c4: mov             x3, NULL
    // 0x86c6c8: b               #0x86c6f8
    // 0x86c6cc: r17 = 327
    //     0x86c6cc: movz            x17, #0x147
    // 0x86c6d0: ldr             w1, [x0, x17]
    // 0x86c6d4: DecompressPointer r1
    //     0x86c6d4: add             x1, x1, HEAP, lsl #32
    // 0x86c6d8: r0 = LoadClassIdInstr(r1)
    //     0x86c6d8: ldur            x0, [x1, #-1]
    //     0x86c6dc: ubfx            x0, x0, #0xc, #0x14
    // 0x86c6e0: r2 = "storyYukiComa.3"
    //     0x86c6e0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10150] "storyYukiComa.3"
    //     0x86c6e4: ldr             x2, [x2, #0x150]
    // 0x86c6e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c6e8: sub             lr, x0, #0xb4
    //     0x86c6ec: ldr             lr, [x21, lr, lsl #3]
    //     0x86c6f0: blr             lr
    // 0x86c6f4: mov             x3, x0
    // 0x86c6f8: mov             x0, x3
    // 0x86c6fc: stur            x3, [fp, #-8]
    // 0x86c700: r2 = Null
    //     0x86c700: mov             x2, NULL
    // 0x86c704: r1 = Null
    //     0x86c704: mov             x1, NULL
    // 0x86c708: r4 = 59
    //     0x86c708: movz            x4, #0x3b
    // 0x86c70c: branchIfSmi(r0, 0x86c71c)
    //     0x86c70c: tbz             w0, #0, #0x86c71c
    //     0x86c710: nop             
    // 0x86c714: r4 = LoadClassIdInstr(r0)
    //     0x86c714: ldur            x4, [x0, #-1]
    //     0x86c718: ubfx            x4, x4, #0xc, #0x14
    // 0x86c71c: cmp             x4, #0x3e
    // 0x86c720: b.eq            #0x86c738
    // 0x86c724: nop             
    // 0x86c728: r8 = bool
    //     0x86c728: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86c72c: r3 = Null
    //     0x86c72c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10158] Null
    //     0x86c730: ldr             x3, [x3, #0x158]
    // 0x86c734: r0 = bool()
    //     0x86c734: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86c738: ldur            x0, [fp, #-8]
    // 0x86c73c: tbnz            w0, #4, #0x86c750
    // 0x86c740: nop             
    // 0x86c744: r0 = "scholar"
    //     0x86c744: add             x0, PP, #0x10, lsl #12  ; [pp+0x10168] "scholar"
    //     0x86c748: ldr             x0, [x0, #0x168]
    // 0x86c74c: b               #0x86c758
    // 0x86c750: r0 = "wind"
    //     0x86c750: add             x0, PP, #0x10, lsl #12  ; [pp+0x10170] "wind"
    //     0x86c754: ldr             x0, [x0, #0x170]
    // 0x86c758: mov             x3, x0
    // 0x86c75c: b               #0x86c768
    // 0x86c760: r3 = "wind"
    //     0x86c760: add             x3, PP, #0x10, lsl #12  ; [pp+0x10170] "wind"
    //     0x86c764: ldr             x3, [x3, #0x170]
    // 0x86c768: stur            x3, [fp, #-8]
    // 0x86c76c: r0 = LoadStaticField(0xb54)
    //     0x86c76c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c770: ldr             x0, [x0, #0x16a8]
    // 0x86c774: cmp             w0, NULL
    // 0x86c778: b.ne            #0x86c788
    // 0x86c77c: nop             
    // 0x86c780: r0 = Null
    //     0x86c780: mov             x0, NULL
    // 0x86c784: b               #0x86c7b0
    // 0x86c788: r17 = 327
    //     0x86c788: movz            x17, #0x147
    // 0x86c78c: ldr             w1, [x0, x17]
    // 0x86c790: DecompressPointer r1
    //     0x86c790: add             x1, x1, HEAP, lsl #32
    // 0x86c794: r0 = LoadClassIdInstr(r1)
    //     0x86c794: ldur            x0, [x1, #-1]
    //     0x86c798: ubfx            x0, x0, #0xc, #0x14
    // 0x86c79c: r2 = "storyPetition"
    //     0x86c79c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10178] "storyPetition"
    //     0x86c7a0: ldr             x2, [x2, #0x178]
    // 0x86c7a4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c7a4: sub             lr, x0, #0xb4
    //     0x86c7a8: ldr             lr, [x21, lr, lsl #3]
    //     0x86c7ac: blr             lr
    // 0x86c7b0: r1 = 59
    //     0x86c7b0: movz            x1, #0x3b
    // 0x86c7b4: branchIfSmi(r0, 0x86c7c4)
    //     0x86c7b4: tbz             w0, #0, #0x86c7c4
    //     0x86c7b8: nop             
    // 0x86c7bc: r1 = LoadClassIdInstr(r0)
    //     0x86c7bc: ldur            x1, [x0, #-1]
    //     0x86c7c0: ubfx            x1, x1, #0xc, #0x14
    // 0x86c7c4: r16 = true
    //     0x86c7c4: add             x16, NULL, #0x20  ; true
    // 0x86c7c8: stp             x16, x0, [SP]
    // 0x86c7cc: mov             x0, x1
    // 0x86c7d0: mov             lr, x0
    // 0x86c7d4: ldr             lr, [x21, lr, lsl #3]
    // 0x86c7d8: blr             lr
    // 0x86c7dc: tbnz            w0, #4, #0x86c7f0
    // 0x86c7e0: nop             
    // 0x86c7e4: r0 = "scholar"
    //     0x86c7e4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10168] "scholar"
    //     0x86c7e8: ldr             x0, [x0, #0x168]
    // 0x86c7ec: b               #0x8838b4
    // 0x86c7f0: ldur            x0, [fp, #-8]
    // 0x86c7f4: b               #0x8838b4
    // 0x86c7f8: r16 = "williamCoach"
    //     0x86c7f8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10180] "williamCoach"
    //     0x86c7fc: ldr             x16, [x16, #0x180]
    // 0x86c800: ldur            lr, [fp, #-0x28]
    // 0x86c804: stp             lr, x16, [SP]
    // 0x86c808: r0 = ==()
    //     0x86c808: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c80c: tbnz            w0, #4, #0x86c914
    // 0x86c810: nop             
    // 0x86c814: r0 = LoadStaticField(0xb54)
    //     0x86c814: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c818: ldr             x0, [x0, #0x16a8]
    // 0x86c81c: cmp             w0, NULL
    // 0x86c820: b.eq            #0x86c908
    // 0x86c824: nop             
    // 0x86c828: r17 = 335
    //     0x86c828: movz            x17, #0x14f
    // 0x86c82c: ldr             w1, [x0, x17]
    // 0x86c830: DecompressPointer r1
    //     0x86c830: add             x1, x1, HEAP, lsl #32
    // 0x86c834: r0 = LoadClassIdInstr(r1)
    //     0x86c834: ldur            x0, [x1, #-1]
    //     0x86c838: ubfx            x0, x0, #0xc, #0x14
    // 0x86c83c: r2 = "badgeofstrength"
    //     0x86c83c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10188] "badgeofstrength"
    //     0x86c840: ldr             x2, [x2, #0x188]
    // 0x86c844: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c844: sub             lr, x0, #0xb4
    //     0x86c848: ldr             lr, [x21, lr, lsl #3]
    //     0x86c84c: blr             lr
    // 0x86c850: cmp             w0, NULL
    // 0x86c854: b.eq            #0x86c908
    // 0x86c858: nop             
    // 0x86c85c: r0 = LoadStaticField(0xb54)
    //     0x86c85c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c860: ldr             x0, [x0, #0x16a8]
    // 0x86c864: cmp             w0, NULL
    // 0x86c868: b.ne            #0x86c878
    // 0x86c86c: nop             
    // 0x86c870: r3 = Null
    //     0x86c870: mov             x3, NULL
    // 0x86c874: b               #0x86c8a4
    // 0x86c878: r17 = 335
    //     0x86c878: movz            x17, #0x14f
    // 0x86c87c: ldr             w1, [x0, x17]
    // 0x86c880: DecompressPointer r1
    //     0x86c880: add             x1, x1, HEAP, lsl #32
    // 0x86c884: r0 = LoadClassIdInstr(r1)
    //     0x86c884: ldur            x0, [x1, #-1]
    //     0x86c888: ubfx            x0, x0, #0xc, #0x14
    // 0x86c88c: r2 = "badgeofstrength"
    //     0x86c88c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10188] "badgeofstrength"
    //     0x86c890: ldr             x2, [x2, #0x188]
    // 0x86c894: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86c894: sub             lr, x0, #0xb4
    //     0x86c898: ldr             lr, [x21, lr, lsl #3]
    //     0x86c89c: blr             lr
    // 0x86c8a0: mov             x3, x0
    // 0x86c8a4: mov             x0, x3
    // 0x86c8a8: stur            x3, [fp, #-8]
    // 0x86c8ac: r2 = Null
    //     0x86c8ac: mov             x2, NULL
    // 0x86c8b0: r1 = Null
    //     0x86c8b0: mov             x1, NULL
    // 0x86c8b4: r4 = 59
    //     0x86c8b4: movz            x4, #0x3b
    // 0x86c8b8: branchIfSmi(r0, 0x86c8c8)
    //     0x86c8b8: tbz             w0, #0, #0x86c8c8
    //     0x86c8bc: nop             
    // 0x86c8c0: r4 = LoadClassIdInstr(r0)
    //     0x86c8c0: ldur            x4, [x0, #-1]
    //     0x86c8c4: ubfx            x4, x4, #0xc, #0x14
    // 0x86c8c8: cmp             x4, #0x3e
    // 0x86c8cc: b.eq            #0x86c8e4
    // 0x86c8d0: nop             
    // 0x86c8d4: r8 = bool
    //     0x86c8d4: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86c8d8: r3 = Null
    //     0x86c8d8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10190] Null
    //     0x86c8dc: ldr             x3, [x3, #0x190]
    // 0x86c8e0: r0 = bool()
    //     0x86c8e0: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86c8e4: ldur            x0, [fp, #-8]
    // 0x86c8e8: tbnz            w0, #4, #0x86c8fc
    // 0x86c8ec: nop             
    // 0x86c8f0: r0 = "william"
    //     0x86c8f0: add             x0, PP, #0x10, lsl #12  ; [pp+0x101a0] "william"
    //     0x86c8f4: ldr             x0, [x0, #0x1a0]
    // 0x86c8f8: b               #0x8838b4
    // 0x86c8fc: r0 = "williamtutorial"
    //     0x86c8fc: add             x0, PP, #0x10, lsl #12  ; [pp+0x101a8] "williamtutorial"
    //     0x86c900: ldr             x0, [x0, #0x1a8]
    // 0x86c904: b               #0x8838b4
    // 0x86c908: r0 = "williamtutorial"
    //     0x86c908: add             x0, PP, #0x10, lsl #12  ; [pp+0x101a8] "williamtutorial"
    //     0x86c90c: ldr             x0, [x0, #0x1a8]
    // 0x86c910: b               #0x8838b4
    // 0x86c914: r16 = "randomKeeper"
    //     0x86c914: add             x16, PP, #0x10, lsl #12  ; [pp+0x101b0] "randomKeeper"
    //     0x86c918: ldr             x16, [x16, #0x1b0]
    // 0x86c91c: ldur            lr, [fp, #-0x28]
    // 0x86c920: stp             lr, x16, [SP]
    // 0x86c924: r0 = ==()
    //     0x86c924: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c928: tbnz            w0, #4, #0x86c980
    // 0x86c92c: nop             
    // 0x86c930: r16 = "stevon"
    //     0x86c930: add             x16, PP, #0x10, lsl #12  ; [pp+0x101b8] "stevon"
    //     0x86c934: ldr             x16, [x16, #0x1b8]
    // 0x86c938: str             x16, [SP]
    // 0x86c93c: r1 = <String>
    //     0x86c93c: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86c940: r2 = "naoki"
    //     0x86c940: add             x2, PP, #0x10, lsl #12  ; [pp+0x101c0] "naoki"
    //     0x86c944: ldr             x2, [x2, #0x1c0]
    // 0x86c948: r3 = "nazree"
    //     0x86c948: add             x3, PP, #0xf, lsl #12  ; [pp+0xfc68] "nazree"
    //     0x86c94c: ldr             x3, [x3, #0xc68]
    // 0x86c950: r5 = "mina"
    //     0x86c950: add             x5, PP, #0x10, lsl #12  ; [pp+0x101c8] "mina"
    //     0x86c954: ldr             x5, [x5, #0x1c8]
    // 0x86c958: r6 = "maki2"
    //     0x86c958: add             x6, PP, #0x10, lsl #12  ; [pp+0x101d0] "maki2"
    //     0x86c95c: ldr             x6, [x6, #0x1d0]
    // 0x86c960: r7 = "raymond"
    //     0x86c960: add             x7, PP, #0x10, lsl #12  ; [pp+0x101d8] "raymond"
    //     0x86c964: ldr             x7, [x7, #0x1d8]
    // 0x86c968: r0 = _GrowableList._literal6()
    //     0x86c968: bl              #0x8658c0  ; [dart:core] _GrowableList::_GrowableList._literal6
    // 0x86c96c: mov             x1, x0
    // 0x86c970: r0 = shuffle()
    //     0x86c970: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86c974: mov             x1, x0
    // 0x86c978: r0 = first()
    //     0x86c978: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86c97c: b               #0x8838b4
    // 0x86c980: r16 = "dailyTechMerchantRandom"
    //     0x86c980: add             x16, PP, #0x10, lsl #12  ; [pp+0x101e0] "dailyTechMerchantRandom"
    //     0x86c984: ldr             x16, [x16, #0x1e0]
    // 0x86c988: ldur            lr, [fp, #-0x28]
    // 0x86c98c: stp             lr, x16, [SP]
    // 0x86c990: r0 = ==()
    //     0x86c990: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c994: tbnz            w0, #4, #0x86c9d8
    // 0x86c998: nop             
    // 0x86c99c: r1 = <String>
    //     0x86c99c: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86c9a0: r2 = "techCityDaily1"
    //     0x86c9a0: add             x2, PP, #0x10, lsl #12  ; [pp+0x101e8] "techCityDaily1"
    //     0x86c9a4: ldr             x2, [x2, #0x1e8]
    // 0x86c9a8: r3 = "techCityDaily2"
    //     0x86c9a8: add             x3, PP, #0x10, lsl #12  ; [pp+0x101f0] "techCityDaily2"
    //     0x86c9ac: ldr             x3, [x3, #0x1f0]
    // 0x86c9b0: r5 = "techCityDaily3"
    //     0x86c9b0: add             x5, PP, #0x10, lsl #12  ; [pp+0x101f8] "techCityDaily3"
    //     0x86c9b4: ldr             x5, [x5, #0x1f8]
    // 0x86c9b8: r6 = "techCityDaily4"
    //     0x86c9b8: add             x6, PP, #0x10, lsl #12  ; [pp+0x10200] "techCityDaily4"
    //     0x86c9bc: ldr             x6, [x6, #0x200]
    // 0x86c9c0: r0 = _GrowableList._literal4()
    //     0x86c9c0: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x86c9c4: mov             x1, x0
    // 0x86c9c8: r0 = shuffle()
    //     0x86c9c8: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86c9cc: mov             x1, x0
    // 0x86c9d0: r0 = first()
    //     0x86c9d0: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86c9d4: b               #0x8838b4
    // 0x86c9d8: r16 = "dailyTechMerchant"
    //     0x86c9d8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10208] "dailyTechMerchant"
    //     0x86c9dc: ldr             x16, [x16, #0x208]
    // 0x86c9e0: ldur            lr, [fp, #-0x28]
    // 0x86c9e4: stp             lr, x16, [SP]
    // 0x86c9e8: r0 = ==()
    //     0x86c9e8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86c9ec: tbnz            w0, #4, #0x86ca9c
    // 0x86c9f0: nop             
    // 0x86c9f4: r0 = LoadStaticField(0xb54)
    //     0x86c9f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86c9f8: ldr             x0, [x0, #0x16a8]
    // 0x86c9fc: cmp             w0, NULL
    // 0x86ca00: b.ne            #0x86ca10
    // 0x86ca04: nop             
    // 0x86ca08: r0 = Null
    //     0x86ca08: mov             x0, NULL
    // 0x86ca0c: b               #0x86ca38
    // 0x86ca10: r17 = 351
    //     0x86ca10: movz            x17, #0x15f
    // 0x86ca14: ldr             w1, [x0, x17]
    // 0x86ca18: DecompressPointer r1
    //     0x86ca18: add             x1, x1, HEAP, lsl #32
    // 0x86ca1c: r0 = LoadClassIdInstr(r1)
    //     0x86ca1c: ldur            x0, [x1, #-1]
    //     0x86ca20: ubfx            x0, x0, #0xc, #0x14
    // 0x86ca24: r2 = "dailyTechMerchant"
    //     0x86ca24: add             x2, PP, #0x10, lsl #12  ; [pp+0x10208] "dailyTechMerchant"
    //     0x86ca28: ldr             x2, [x2, #0x208]
    // 0x86ca2c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ca2c: sub             lr, x0, #0xb4
    //     0x86ca30: ldr             lr, [x21, lr, lsl #3]
    //     0x86ca34: blr             lr
    // 0x86ca38: cmp             w0, NULL
    // 0x86ca3c: b.ne            #0x86ca4c
    // 0x86ca40: nop             
    // 0x86ca44: r3 = ""
    //     0x86ca44: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86ca48: b               #0x86ca50
    // 0x86ca4c: mov             x3, x0
    // 0x86ca50: mov             x0, x3
    // 0x86ca54: stur            x3, [fp, #-8]
    // 0x86ca58: r2 = Null
    //     0x86ca58: mov             x2, NULL
    // 0x86ca5c: r1 = Null
    //     0x86ca5c: mov             x1, NULL
    // 0x86ca60: r4 = 59
    //     0x86ca60: movz            x4, #0x3b
    // 0x86ca64: branchIfSmi(r0, 0x86ca74)
    //     0x86ca64: tbz             w0, #0, #0x86ca74
    //     0x86ca68: nop             
    // 0x86ca6c: r4 = LoadClassIdInstr(r0)
    //     0x86ca6c: ldur            x4, [x0, #-1]
    //     0x86ca70: ubfx            x4, x4, #0xc, #0x14
    // 0x86ca74: sub             x4, x4, #0x5d
    // 0x86ca78: cmp             x4, #1
    // 0x86ca7c: b.ls            #0x86ca94
    // 0x86ca80: nop             
    // 0x86ca84: r8 = String
    //     0x86ca84: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86ca88: r3 = Null
    //     0x86ca88: add             x3, PP, #0x10, lsl #12  ; [pp+0x10210] Null
    //     0x86ca8c: ldr             x3, [x3, #0x210]
    // 0x86ca90: r0 = String()
    //     0x86ca90: bl              #0x1523244  ; IsType_String_Stub
    // 0x86ca94: ldur            x0, [fp, #-8]
    // 0x86ca98: b               #0x8838b4
    // 0x86ca9c: r16 = "treasureChestDaily"
    //     0x86ca9c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10220] "treasureChestDaily"
    //     0x86caa0: ldr             x16, [x16, #0x220]
    // 0x86caa4: ldur            lr, [fp, #-0x28]
    // 0x86caa8: stp             lr, x16, [SP]
    // 0x86caac: r0 = ==()
    //     0x86caac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cab0: tbnz            w0, #4, #0x86caf4
    // 0x86cab4: nop             
    // 0x86cab8: r1 = <String>
    //     0x86cab8: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x86cabc: r2 = "treasureChestNorth"
    //     0x86cabc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10228] "treasureChestNorth"
    //     0x86cac0: ldr             x2, [x2, #0x228]
    // 0x86cac4: r3 = "treasureChestSouth"
    //     0x86cac4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10230] "treasureChestSouth"
    //     0x86cac8: ldr             x3, [x3, #0x230]
    // 0x86cacc: r5 = "treasureChestEast"
    //     0x86cacc: add             x5, PP, #0x10, lsl #12  ; [pp+0x10238] "treasureChestEast"
    //     0x86cad0: ldr             x5, [x5, #0x238]
    // 0x86cad4: r6 = "treasureChestWest"
    //     0x86cad4: add             x6, PP, #0x10, lsl #12  ; [pp+0x10240] "treasureChestWest"
    //     0x86cad8: ldr             x6, [x6, #0x240]
    // 0x86cadc: r0 = _GrowableList._literal4()
    //     0x86cadc: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x86cae0: mov             x1, x0
    // 0x86cae4: r0 = shuffle()
    //     0x86cae4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86cae8: mov             x1, x0
    // 0x86caec: r0 = first()
    //     0x86caec: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86caf0: b               #0x8838b4
    // 0x86caf4: r16 = "fundWilliamSkill"
    //     0x86caf4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10248] "fundWilliamSkill"
    //     0x86caf8: ldr             x16, [x16, #0x248]
    // 0x86cafc: ldur            lr, [fp, #-0x28]
    // 0x86cb00: stp             lr, x16, [SP]
    // 0x86cb04: r0 = ==()
    //     0x86cb04: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cb08: tbnz            w0, #4, #0x86cbf8
    // 0x86cb0c: nop             
    // 0x86cb10: r0 = LoadStaticField(0xb54)
    //     0x86cb10: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86cb14: ldr             x0, [x0, #0x16a8]
    // 0x86cb18: cmp             w0, NULL
    // 0x86cb1c: b.eq            #0x86cbec
    // 0x86cb20: nop             
    // 0x86cb24: r17 = 351
    //     0x86cb24: movz            x17, #0x15f
    // 0x86cb28: ldr             w1, [x0, x17]
    // 0x86cb2c: DecompressPointer r1
    //     0x86cb2c: add             x1, x1, HEAP, lsl #32
    // 0x86cb30: r0 = LoadClassIdInstr(r1)
    //     0x86cb30: ldur            x0, [x1, #-1]
    //     0x86cb34: ubfx            x0, x0, #0xc, #0x14
    // 0x86cb38: r2 = "fundWilliamSkill"
    //     0x86cb38: add             x2, PP, #0x10, lsl #12  ; [pp+0x10248] "fundWilliamSkill"
    //     0x86cb3c: ldr             x2, [x2, #0x248]
    // 0x86cb40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86cb40: sub             lr, x0, #0xb4
    //     0x86cb44: ldr             lr, [x21, lr, lsl #3]
    //     0x86cb48: blr             lr
    // 0x86cb4c: cmp             w0, NULL
    // 0x86cb50: b.eq            #0x86cbec
    // 0x86cb54: nop             
    // 0x86cb58: r0 = LoadStaticField(0xb54)
    //     0x86cb58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86cb5c: ldr             x0, [x0, #0x16a8]
    // 0x86cb60: cmp             w0, NULL
    // 0x86cb64: b.ne            #0x86cb74
    // 0x86cb68: nop             
    // 0x86cb6c: r3 = Null
    //     0x86cb6c: mov             x3, NULL
    // 0x86cb70: b               #0x86cba0
    // 0x86cb74: r17 = 351
    //     0x86cb74: movz            x17, #0x15f
    // 0x86cb78: ldr             w1, [x0, x17]
    // 0x86cb7c: DecompressPointer r1
    //     0x86cb7c: add             x1, x1, HEAP, lsl #32
    // 0x86cb80: r0 = LoadClassIdInstr(r1)
    //     0x86cb80: ldur            x0, [x1, #-1]
    //     0x86cb84: ubfx            x0, x0, #0xc, #0x14
    // 0x86cb88: r2 = "fundWilliamSkill"
    //     0x86cb88: add             x2, PP, #0x10, lsl #12  ; [pp+0x10248] "fundWilliamSkill"
    //     0x86cb8c: ldr             x2, [x2, #0x248]
    // 0x86cb90: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86cb90: sub             lr, x0, #0xb4
    //     0x86cb94: ldr             lr, [x21, lr, lsl #3]
    //     0x86cb98: blr             lr
    // 0x86cb9c: mov             x3, x0
    // 0x86cba0: mov             x0, x3
    // 0x86cba4: stur            x3, [fp, #-8]
    // 0x86cba8: r2 = Null
    //     0x86cba8: mov             x2, NULL
    // 0x86cbac: r1 = Null
    //     0x86cbac: mov             x1, NULL
    // 0x86cbb0: r4 = 59
    //     0x86cbb0: movz            x4, #0x3b
    // 0x86cbb4: branchIfSmi(r0, 0x86cbc4)
    //     0x86cbb4: tbz             w0, #0, #0x86cbc4
    //     0x86cbb8: nop             
    // 0x86cbbc: r4 = LoadClassIdInstr(r0)
    //     0x86cbbc: ldur            x4, [x0, #-1]
    //     0x86cbc0: ubfx            x4, x4, #0xc, #0x14
    // 0x86cbc4: sub             x4, x4, #0x5d
    // 0x86cbc8: cmp             x4, #1
    // 0x86cbcc: b.ls            #0x86cbe4
    // 0x86cbd0: nop             
    // 0x86cbd4: r8 = String
    //     0x86cbd4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86cbd8: r3 = Null
    //     0x86cbd8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10250] Null
    //     0x86cbdc: ldr             x3, [x3, #0x250]
    // 0x86cbe0: r0 = String()
    //     0x86cbe0: bl              #0x1523244  ; IsType_String_Stub
    // 0x86cbe4: ldur            x0, [fp, #-8]
    // 0x86cbe8: b               #0x8838b4
    // 0x86cbec: r0 = "jumpsmash"
    //     0x86cbec: add             x0, PP, #0xf, lsl #12  ; [pp+0xf478] "jumpsmash"
    //     0x86cbf0: ldr             x0, [x0, #0x478]
    // 0x86cbf4: b               #0x8838b4
    // 0x86cbf8: r16 = "muscleFlex"
    //     0x86cbf8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10260] "muscleFlex"
    //     0x86cbfc: ldr             x16, [x16, #0x260]
    // 0x86cc00: ldur            lr, [fp, #-0x28]
    // 0x86cc04: stp             lr, x16, [SP]
    // 0x86cc08: r0 = ==()
    //     0x86cc08: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cc0c: tbnz            w0, #4, #0x86cc80
    // 0x86cc10: nop             
    // 0x86cc14: r0 = LoadStaticField(0xb54)
    //     0x86cc14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86cc18: ldr             x0, [x0, #0x16a8]
    // 0x86cc1c: cmp             w0, NULL
    // 0x86cc20: b.ne            #0x86cc30
    // 0x86cc24: nop             
    // 0x86cc28: r0 = Null
    //     0x86cc28: mov             x0, NULL
    // 0x86cc2c: b               #0x86cc3c
    // 0x86cc30: LoadField: r1 = r0->field_1f
    //     0x86cc30: ldur            w1, [x0, #0x1f]
    // 0x86cc34: DecompressPointer r1
    //     0x86cc34: add             x1, x1, HEAP, lsl #32
    // 0x86cc38: mov             x0, x1
    // 0x86cc3c: r1 = LoadClassIdInstr(r0)
    //     0x86cc3c: ldur            x1, [x0, #-1]
    //     0x86cc40: ubfx            x1, x1, #0xc, #0x14
    // 0x86cc44: r16 = "gay1"
    //     0x86cc44: add             x16, PP, #0x10, lsl #12  ; [pp+0x10268] "gay1"
    //     0x86cc48: ldr             x16, [x16, #0x268]
    // 0x86cc4c: stp             x16, x0, [SP]
    // 0x86cc50: mov             x0, x1
    // 0x86cc54: mov             lr, x0
    // 0x86cc58: ldr             lr, [x21, lr, lsl #3]
    // 0x86cc5c: blr             lr
    // 0x86cc60: tbnz            w0, #4, #0x86cc74
    // 0x86cc64: nop             
    // 0x86cc68: r0 = "muscleFlex"
    //     0x86cc68: add             x0, PP, #0x10, lsl #12  ; [pp+0x10260] "muscleFlex"
    //     0x86cc6c: ldr             x0, [x0, #0x260]
    // 0x86cc70: b               #0x8838b4
    // 0x86cc74: r0 = "fundCheck0"
    //     0x86cc74: add             x0, PP, #0x10, lsl #12  ; [pp+0x10270] "fundCheck0"
    //     0x86cc78: ldr             x0, [x0, #0x270]
    // 0x86cc7c: b               #0x8838b4
    // 0x86cc80: r16 = "checkLinkAccountStatus"
    //     0x86cc80: add             x16, PP, #0x10, lsl #12  ; [pp+0x10278] "checkLinkAccountStatus"
    //     0x86cc84: ldr             x16, [x16, #0x278]
    // 0x86cc88: ldur            lr, [fp, #-0x28]
    // 0x86cc8c: stp             lr, x16, [SP]
    // 0x86cc90: r0 = ==()
    //     0x86cc90: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cc94: tbnz            w0, #4, #0x86ccd0
    // 0x86cc98: nop             
    // 0x86cc9c: r0 = LoadStaticField(0xb60)
    //     0x86cc9c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86cca0: ldr             x0, [x0, #0x16c0]
    //     0x86cca4: add             x16, NULL, #0x30  ; false
    // 0x86cca8: stp             x16, x0, [SP]
    // 0x86ccac: r0 = ==()
    //     0x86ccac: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x86ccb0: tbnz            w0, #4, #0x86ccc4
    // 0x86ccb4: nop             
    // 0x86ccb8: r0 = "loginReminder"
    //     0x86ccb8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10280] "loginReminder"
    //     0x86ccbc: ldr             x0, [x0, #0x280]
    // 0x86ccc0: b               #0x8838b4
    // 0x86ccc4: r0 = "bestiaryCheck"
    //     0x86ccc4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10288] "bestiaryCheck"
    //     0x86ccc8: ldr             x0, [x0, #0x288]
    // 0x86cccc: b               #0x8838b4
    // 0x86ccd0: r16 = "checkLinkAccountStatusReferral"
    //     0x86ccd0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10290] "checkLinkAccountStatusReferral"
    //     0x86ccd4: ldr             x16, [x16, #0x290]
    // 0x86ccd8: ldur            lr, [fp, #-0x28]
    // 0x86ccdc: stp             lr, x16, [SP]
    // 0x86cce0: r0 = ==()
    //     0x86cce0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cce4: tbnz            w0, #4, #0x86cd20
    // 0x86cce8: nop             
    // 0x86ccec: r0 = LoadStaticField(0xb60)
    //     0x86ccec: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ccf0: ldr             x0, [x0, #0x16c0]
    //     0x86ccf4: add             x16, NULL, #0x30  ; false
    // 0x86ccf8: stp             x16, x0, [SP]
    // 0x86ccfc: r0 = ==()
    //     0x86ccfc: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x86cd00: tbnz            w0, #4, #0x86cd14
    // 0x86cd04: nop             
    // 0x86cd08: r0 = "linkAccount"
    //     0x86cd08: add             x0, PP, #0xf, lsl #12  ; [pp+0xfe40] "linkAccount"
    //     0x86cd0c: ldr             x0, [x0, #0xe40]
    // 0x86cd10: b               #0x8838b4
    // 0x86cd14: r0 = "generateReferral"
    //     0x86cd14: add             x0, PP, #0x10, lsl #12  ; [pp+0x10298] "generateReferral"
    //     0x86cd18: ldr             x0, [x0, #0x298]
    // 0x86cd1c: b               #0x8838b4
    // 0x86cd20: r16 = "chores"
    //     0x86cd20: add             x16, PP, #0x10, lsl #12  ; [pp+0x102a0] "chores"
    //     0x86cd24: ldr             x16, [x16, #0x2a0]
    // 0x86cd28: ldur            lr, [fp, #-0x28]
    // 0x86cd2c: stp             lr, x16, [SP]
    // 0x86cd30: r0 = ==()
    //     0x86cd30: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cd34: tbnz            w0, #4, #0x86cf28
    // 0x86cd38: nop             
    // 0x86cd3c: r1 = Null
    //     0x86cd3c: mov             x1, NULL
    // 0x86cd40: r0 = Random()
    //     0x86cd40: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86cd44: mov             x1, x0
    // 0x86cd48: r2 = 10000
    //     0x86cd48: movz            x2, #0x2710
    // 0x86cd4c: r0 = nextInt()
    //     0x86cd4c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86cd50: mov             x3, x0
    // 0x86cd54: stur            x3, [fp, #-0x38]
    // 0x86cd58: r0 = LoadStaticField(0xb54)
    //     0x86cd58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86cd5c: ldr             x0, [x0, #0x16a8]
    // 0x86cd60: cmp             w0, NULL
    // 0x86cd64: b.ne            #0x86cd74
    // 0x86cd68: nop             
    // 0x86cd6c: r0 = Null
    //     0x86cd6c: mov             x0, NULL
    // 0x86cd70: b               #0x86cd9c
    // 0x86cd74: r17 = 347
    //     0x86cd74: movz            x17, #0x15b
    // 0x86cd78: ldr             w1, [x0, x17]
    // 0x86cd7c: DecompressPointer r1
    //     0x86cd7c: add             x1, x1, HEAP, lsl #32
    // 0x86cd80: r0 = LoadClassIdInstr(r1)
    //     0x86cd80: ldur            x0, [x1, #-1]
    //     0x86cd84: ubfx            x0, x0, #0xc, #0x14
    // 0x86cd88: r2 = "dailyChores"
    //     0x86cd88: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x86cd8c: ldr             x2, [x2, #0xe48]
    // 0x86cd90: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86cd90: sub             lr, x0, #0xb4
    //     0x86cd94: ldr             lr, [x21, lr, lsl #3]
    //     0x86cd98: blr             lr
    // 0x86cd9c: cmp             w0, NULL
    // 0x86cda0: b.ne            #0x86cdb0
    // 0x86cda4: nop             
    // 0x86cda8: r4 = 0
    //     0x86cda8: movz            x4, #0
    // 0x86cdac: b               #0x86cdb4
    // 0x86cdb0: mov             x4, x0
    // 0x86cdb4: ldur            x3, [fp, #-0x38]
    // 0x86cdb8: mov             x0, x4
    // 0x86cdbc: stur            x4, [fp, #-8]
    // 0x86cdc0: r2 = Null
    //     0x86cdc0: mov             x2, NULL
    // 0x86cdc4: r1 = Null
    //     0x86cdc4: mov             x1, NULL
    // 0x86cdc8: branchIfSmi(r0, 0x86cdf8)
    //     0x86cdc8: tbz             w0, #0, #0x86cdf8
    //     0x86cdcc: nop             
    // 0x86cdd0: r4 = LoadClassIdInstr(r0)
    //     0x86cdd0: ldur            x4, [x0, #-1]
    //     0x86cdd4: ubfx            x4, x4, #0xc, #0x14
    // 0x86cdd8: sub             x4, x4, #0x3b
    // 0x86cddc: cmp             x4, #1
    // 0x86cde0: b.ls            #0x86cdf8
    // 0x86cde4: nop             
    // 0x86cde8: r8 = int
    //     0x86cde8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86cdec: r3 = Null
    //     0x86cdec: add             x3, PP, #0x10, lsl #12  ; [pp+0x102a8] Null
    //     0x86cdf0: ldr             x3, [x3, #0x2a8]
    // 0x86cdf4: r0 = int()
    //     0x86cdf4: bl              #0x1524294  ; IsType_int_Stub
    // 0x86cdf8: ldur            x0, [fp, #-0x38]
    // 0x86cdfc: cmp             x0, #0x3e8
    // 0x86ce00: b.ge            #0x86ce14
    // 0x86ce04: nop             
    // 0x86ce08: r1 = "smallExp1"
    //     0x86ce08: add             x1, PP, #0x10, lsl #12  ; [pp+0x102b8] "smallExp1"
    //     0x86ce0c: ldr             x1, [x1, #0x2b8]
    // 0x86ce10: b               #0x86cef4
    // 0x86ce14: cmp             x0, #0x7d0
    // 0x86ce18: b.ge            #0x86ce2c
    // 0x86ce1c: nop             
    // 0x86ce20: r0 = "smallExp2"
    //     0x86ce20: add             x0, PP, #0x10, lsl #12  ; [pp+0x102c0] "smallExp2"
    //     0x86ce24: ldr             x0, [x0, #0x2c0]
    // 0x86ce28: b               #0x86cef0
    // 0x86ce2c: cmp             x0, #0xbb8
    // 0x86ce30: b.ge            #0x86ce44
    // 0x86ce34: nop             
    // 0x86ce38: r0 = "smallMoney1"
    //     0x86ce38: add             x0, PP, #0x10, lsl #12  ; [pp+0x102c8] "smallMoney1"
    //     0x86ce3c: ldr             x0, [x0, #0x2c8]
    // 0x86ce40: b               #0x86cef0
    // 0x86ce44: cmp             x0, #0xfa0
    // 0x86ce48: b.ge            #0x86ce5c
    // 0x86ce4c: nop             
    // 0x86ce50: r0 = "smallMoney2"
    //     0x86ce50: add             x0, PP, #0x10, lsl #12  ; [pp+0x102d0] "smallMoney2"
    //     0x86ce54: ldr             x0, [x0, #0x2d0]
    // 0x86ce58: b               #0x86cef0
    // 0x86ce5c: r17 = 4250
    //     0x86ce5c: movz            x17, #0x109a
    // 0x86ce60: cmp             x0, x17
    // 0x86ce64: b.ge            #0x86ce78
    // 0x86ce68: nop             
    // 0x86ce6c: r0 = "bigMoney1"
    //     0x86ce6c: add             x0, PP, #0x10, lsl #12  ; [pp+0x102d8] "bigMoney1"
    //     0x86ce70: ldr             x0, [x0, #0x2d8]
    // 0x86ce74: b               #0x86cef0
    // 0x86ce78: r17 = 4500
    //     0x86ce78: movz            x17, #0x1194
    // 0x86ce7c: cmp             x0, x17
    // 0x86ce80: b.ge            #0x86ce94
    // 0x86ce84: nop             
    // 0x86ce88: r0 = "bigMoney2"
    //     0x86ce88: add             x0, PP, #0x10, lsl #12  ; [pp+0x102e0] "bigMoney2"
    //     0x86ce8c: ldr             x0, [x0, #0x2e0]
    // 0x86ce90: b               #0x86cef0
    // 0x86ce94: r17 = 4750
    //     0x86ce94: movz            x17, #0x128e
    // 0x86ce98: cmp             x0, x17
    // 0x86ce9c: b.ge            #0x86ceb0
    // 0x86cea0: nop             
    // 0x86cea4: r0 = "bigExp1"
    //     0x86cea4: add             x0, PP, #0x10, lsl #12  ; [pp+0x102e8] "bigExp1"
    //     0x86cea8: ldr             x0, [x0, #0x2e8]
    // 0x86ceac: b               #0x86cef0
    // 0x86ceb0: r17 = 5000
    //     0x86ceb0: movz            x17, #0x1388
    // 0x86ceb4: cmp             x0, x17
    // 0x86ceb8: b.ge            #0x86cecc
    // 0x86cebc: nop             
    // 0x86cec0: r0 = "bigExp2"
    //     0x86cec0: add             x0, PP, #0x10, lsl #12  ; [pp+0x102f0] "bigExp2"
    //     0x86cec4: ldr             x0, [x0, #0x2f0]
    // 0x86cec8: b               #0x86cef0
    // 0x86cecc: r17 = 9999
    //     0x86cecc: movz            x17, #0x270f
    // 0x86ced0: cmp             x0, x17
    // 0x86ced4: b.gt            #0x86cee8
    // 0x86ced8: nop             
    // 0x86cedc: r0 = "chest"
    //     0x86cedc: add             x0, PP, #0x10, lsl #12  ; [pp+0x102f8] "chest"
    //     0x86cee0: ldr             x0, [x0, #0x2f8]
    // 0x86cee4: b               #0x86cef0
    // 0x86cee8: r0 = "smallMoney1"
    //     0x86cee8: add             x0, PP, #0x10, lsl #12  ; [pp+0x102c8] "smallMoney1"
    //     0x86ceec: ldr             x0, [x0, #0x2c8]
    // 0x86cef0: mov             x1, x0
    // 0x86cef4: ldur            x0, [fp, #-8]
    // 0x86cef8: r2 = LoadInt32Instr(r0)
    //     0x86cef8: sbfx            x2, x0, #1, #0x1f
    //     0x86cefc: tbz             w0, #0, #0x86cf08
    //     0x86cf00: nop             
    //     0x86cf04: ldur            x2, [x0, #7]
    // 0x86cf08: cmp             x2, #2
    // 0x86cf0c: b.ge            #0x86cf20
    // 0x86cf10: nop             
    // 0x86cf14: r0 = "chest"
    //     0x86cf14: add             x0, PP, #0x10, lsl #12  ; [pp+0x102f8] "chest"
    //     0x86cf18: ldr             x0, [x0, #0x2f8]
    // 0x86cf1c: b               #0x8838b4
    // 0x86cf20: mov             x0, x1
    // 0x86cf24: b               #0x8838b4
    // 0x86cf28: r16 = "dailyGift"
    //     0x86cf28: add             x16, PP, #0x10, lsl #12  ; [pp+0x10300] "dailyGift"
    //     0x86cf2c: ldr             x16, [x16, #0x300]
    // 0x86cf30: ldur            lr, [fp, #-0x28]
    // 0x86cf34: stp             lr, x16, [SP]
    // 0x86cf38: r0 = ==()
    //     0x86cf38: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86cf3c: tbnz            w0, #4, #0x86d000
    // 0x86cf40: nop             
    // 0x86cf44: r1 = Null
    //     0x86cf44: mov             x1, NULL
    // 0x86cf48: r0 = Random()
    //     0x86cf48: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86cf4c: mov             x1, x0
    // 0x86cf50: r2 = 10000
    //     0x86cf50: movz            x2, #0x2710
    // 0x86cf54: r0 = nextInt()
    //     0x86cf54: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86cf58: mov             x2, x0
    // 0x86cf5c: stur            x2, [fp, #-0x38]
    // 0x86cf60: r0 = BoxInt64Instr(r2)
    //     0x86cf60: sbfiz           x0, x2, #1, #0x1f
    //     0x86cf64: cmp             x2, x0, asr #1
    //     0x86cf68: b.eq            #0x86cf78
    //     0x86cf6c: nop             
    //     0x86cf70: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86cf74: stur            x2, [x0, #7]
    // 0x86cf78: mov             x1, x0
    // 0x86cf7c: r0 = print()
    //     0x86cf7c: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x86cf80: ldur            x0, [fp, #-0x38]
    // 0x86cf84: r17 = 5500
    //     0x86cf84: movz            x17, #0x157c
    // 0x86cf88: cmp             x0, x17
    // 0x86cf8c: b.ge            #0x86cfa0
    // 0x86cf90: nop             
    // 0x86cf94: r0 = "getSomeMoney"
    //     0x86cf94: add             x0, PP, #0x10, lsl #12  ; [pp+0x10308] "getSomeMoney"
    //     0x86cf98: ldr             x0, [x0, #0x308]
    // 0x86cf9c: b               #0x8838b4
    // 0x86cfa0: r17 = 8000
    //     0x86cfa0: movz            x17, #0x1f40
    // 0x86cfa4: cmp             x0, x17
    // 0x86cfa8: b.ge            #0x86cfbc
    // 0x86cfac: nop             
    // 0x86cfb0: r0 = "getToken"
    //     0x86cfb0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10310] "getToken"
    //     0x86cfb4: ldr             x0, [x0, #0x310]
    // 0x86cfb8: b               #0x8838b4
    // 0x86cfbc: r17 = 9900
    //     0x86cfbc: movz            x17, #0x26ac
    // 0x86cfc0: cmp             x0, x17
    // 0x86cfc4: b.ge            #0x86cfd8
    // 0x86cfc8: nop             
    // 0x86cfcc: r0 = "getALotMoney"
    //     0x86cfcc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10318] "getALotMoney"
    //     0x86cfd0: ldr             x0, [x0, #0x318]
    // 0x86cfd4: b               #0x8838b4
    // 0x86cfd8: r17 = 9999
    //     0x86cfd8: movz            x17, #0x270f
    // 0x86cfdc: cmp             x0, x17
    // 0x86cfe0: b.gt            #0x86cff4
    // 0x86cfe4: nop             
    // 0x86cfe8: r0 = "getSeafoodBento"
    //     0x86cfe8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10320] "getSeafoodBento"
    //     0x86cfec: ldr             x0, [x0, #0x320]
    // 0x86cff0: b               #0x8838b4
    // 0x86cff4: r0 = "get120G"
    //     0x86cff4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10328] "get120G"
    //     0x86cff8: ldr             x0, [x0, #0x328]
    // 0x86cffc: b               #0x8838b4
    // 0x86d000: r16 = "dailyGiftAds"
    //     0x86d000: add             x16, PP, #0x10, lsl #12  ; [pp+0x10330] "dailyGiftAds"
    //     0x86d004: ldr             x16, [x16, #0x330]
    // 0x86d008: ldur            lr, [fp, #-0x28]
    // 0x86d00c: stp             lr, x16, [SP]
    // 0x86d010: r0 = ==()
    //     0x86d010: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86d014: tbnz            w0, #4, #0x86d228
    // 0x86d018: nop             
    // 0x86d01c: r1 = Null
    //     0x86d01c: mov             x1, NULL
    // 0x86d020: r0 = Random()
    //     0x86d020: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86d024: mov             x1, x0
    // 0x86d028: r2 = 10000
    //     0x86d028: movz            x2, #0x2710
    // 0x86d02c: r0 = nextInt()
    //     0x86d02c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86d030: mov             x3, x0
    // 0x86d034: stur            x3, [fp, #-0x38]
    // 0x86d038: r0 = LoadStaticField(0xb54)
    //     0x86d038: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d03c: ldr             x0, [x0, #0x16a8]
    // 0x86d040: cmp             w0, NULL
    // 0x86d044: b.ne            #0x86d054
    // 0x86d048: nop             
    // 0x86d04c: r0 = Null
    //     0x86d04c: mov             x0, NULL
    // 0x86d050: b               #0x86d07c
    // 0x86d054: r17 = 347
    //     0x86d054: movz            x17, #0x15b
    // 0x86d058: ldr             w1, [x0, x17]
    // 0x86d05c: DecompressPointer r1
    //     0x86d05c: add             x1, x1, HEAP, lsl #32
    // 0x86d060: r0 = LoadClassIdInstr(r1)
    //     0x86d060: ldur            x0, [x1, #-1]
    //     0x86d064: ubfx            x0, x0, #0xc, #0x14
    // 0x86d068: r2 = "dailyAdsReset"
    //     0x86d068: add             x2, PP, #0x10, lsl #12  ; [pp+0x10338] "dailyAdsReset"
    //     0x86d06c: ldr             x2, [x2, #0x338]
    // 0x86d070: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d070: sub             lr, x0, #0xb4
    //     0x86d074: ldr             lr, [x21, lr, lsl #3]
    //     0x86d078: blr             lr
    // 0x86d07c: cmp             w0, NULL
    // 0x86d080: b.ne            #0x86d08c
    // 0x86d084: nop             
    // 0x86d088: r0 = 0
    //     0x86d088: movz            x0, #0
    // 0x86d08c: ldur            x3, [fp, #-0x38]
    // 0x86d090: r2 = Null
    //     0x86d090: mov             x2, NULL
    // 0x86d094: r1 = Null
    //     0x86d094: mov             x1, NULL
    // 0x86d098: branchIfSmi(r0, 0x86d0c8)
    //     0x86d098: tbz             w0, #0, #0x86d0c8
    //     0x86d09c: nop             
    // 0x86d0a0: r4 = LoadClassIdInstr(r0)
    //     0x86d0a0: ldur            x4, [x0, #-1]
    //     0x86d0a4: ubfx            x4, x4, #0xc, #0x14
    // 0x86d0a8: sub             x4, x4, #0x3b
    // 0x86d0ac: cmp             x4, #1
    // 0x86d0b0: b.ls            #0x86d0c8
    // 0x86d0b4: nop             
    // 0x86d0b8: r8 = int
    //     0x86d0b8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86d0bc: r3 = Null
    //     0x86d0bc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10340] Null
    //     0x86d0c0: ldr             x3, [x3, #0x340]
    // 0x86d0c4: r0 = int()
    //     0x86d0c4: bl              #0x1524294  ; IsType_int_Stub
    // 0x86d0c8: ldur            x0, [fp, #-0x38]
    // 0x86d0cc: cmp             x0, #0xce4
    // 0x86d0d0: b.ge            #0x86d0e4
    // 0x86d0d4: nop             
    // 0x86d0d8: r0 = "getExp"
    //     0x86d0d8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] "getExp"
    //     0x86d0dc: ldr             x0, [x0, #0x350]
    // 0x86d0e0: b               #0x8838b4
    // 0x86d0e4: r17 = 5300
    //     0x86d0e4: movz            x17, #0x14b4
    // 0x86d0e8: cmp             x0, x17
    // 0x86d0ec: b.ge            #0x86d100
    // 0x86d0f0: nop             
    // 0x86d0f4: r0 = "getToken"
    //     0x86d0f4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10310] "getToken"
    //     0x86d0f8: ldr             x0, [x0, #0x310]
    // 0x86d0fc: b               #0x8838b4
    // 0x86d100: r17 = 7300
    //     0x86d100: movz            x17, #0x1c84
    // 0x86d104: cmp             x0, x17
    // 0x86d108: b.ge            #0x86d11c
    // 0x86d10c: nop             
    // 0x86d110: r0 = "getEnergyDrink"
    //     0x86d110: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86d114: ldr             x0, [x0, #0x358]
    // 0x86d118: b               #0x8838b4
    // 0x86d11c: r17 = 8300
    //     0x86d11c: movz            x17, #0x206c
    // 0x86d120: cmp             x0, x17
    // 0x86d124: b.ge            #0x86d138
    // 0x86d128: nop             
    // 0x86d12c: r0 = "getMoneySack"
    //     0x86d12c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10360] "getMoneySack"
    //     0x86d130: ldr             x0, [x0, #0x360]
    // 0x86d134: b               #0x8838b4
    // 0x86d138: r17 = 9300
    //     0x86d138: movz            x17, #0x2454
    // 0x86d13c: cmp             x0, x17
    // 0x86d140: b.ge            #0x86d154
    // 0x86d144: nop             
    // 0x86d148: r0 = "getExpSnack"
    //     0x86d148: add             x0, PP, #0x10, lsl #12  ; [pp+0x10368] "getExpSnack"
    //     0x86d14c: ldr             x0, [x0, #0x368]
    // 0x86d150: b               #0x8838b4
    // 0x86d154: r17 = 9500
    //     0x86d154: movz            x17, #0x251c
    // 0x86d158: cmp             x0, x17
    // 0x86d15c: b.ge            #0x86d170
    // 0x86d160: nop             
    // 0x86d164: r0 = "getChanceCard"
    //     0x86d164: add             x0, PP, #0x10, lsl #12  ; [pp+0x10370] "getChanceCard"
    //     0x86d168: ldr             x0, [x0, #0x370]
    // 0x86d16c: b               #0x8838b4
    // 0x86d170: r17 = 9700
    //     0x86d170: movz            x17, #0x25e4
    // 0x86d174: cmp             x0, x17
    // 0x86d178: b.ge            #0x86d1e4
    // 0x86d17c: nop             
    // 0x86d180: r1 = Null
    //     0x86d180: mov             x1, NULL
    // 0x86d184: r0 = Random()
    //     0x86d184: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86d188: mov             x1, x0
    // 0x86d18c: r2 = 3
    //     0x86d18c: movz            x2, #0x3
    // 0x86d190: r0 = nextInt()
    //     0x86d190: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86d194: cbnz            x0, #0x86d1a8
    // 0x86d198: nop             
    // 0x86d19c: r1 = "getStaCandy"
    //     0x86d19c: add             x1, PP, #0x10, lsl #12  ; [pp+0x10378] "getStaCandy"
    //     0x86d1a0: ldr             x1, [x1, #0x378]
    // 0x86d1a4: b               #0x86d1b0
    // 0x86d1a8: r1 = "getExp"
    //     0x86d1a8: add             x1, PP, #0x10, lsl #12  ; [pp+0x10350] "getExp"
    //     0x86d1ac: ldr             x1, [x1, #0x350]
    // 0x86d1b0: cmp             x0, #1
    // 0x86d1b4: b.ne            #0x86d1c4
    // 0x86d1b8: nop             
    // 0x86d1bc: r1 = "getActCandy"
    //     0x86d1bc: add             x1, PP, #0x10, lsl #12  ; [pp+0x10380] "getActCandy"
    //     0x86d1c0: ldr             x1, [x1, #0x380]
    // 0x86d1c4: cmp             x0, #2
    // 0x86d1c8: b.ne            #0x86d1dc
    // 0x86d1cc: nop             
    // 0x86d1d0: r0 = "getSpCandy"
    //     0x86d1d0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10388] "getSpCandy"
    //     0x86d1d4: ldr             x0, [x0, #0x388]
    // 0x86d1d8: b               #0x8838b4
    // 0x86d1dc: mov             x0, x1
    // 0x86d1e0: b               #0x8838b4
    // 0x86d1e4: r17 = 9900
    //     0x86d1e4: movz            x17, #0x26ac
    // 0x86d1e8: cmp             x0, x17
    // 0x86d1ec: b.ge            #0x86d200
    // 0x86d1f0: nop             
    // 0x86d1f4: r0 = "getSeafoodBento"
    //     0x86d1f4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10320] "getSeafoodBento"
    //     0x86d1f8: ldr             x0, [x0, #0x320]
    // 0x86d1fc: b               #0x8838b4
    // 0x86d200: r17 = 9999
    //     0x86d200: movz            x17, #0x270f
    // 0x86d204: cmp             x0, x17
    // 0x86d208: b.gt            #0x86d21c
    // 0x86d20c: nop             
    // 0x86d210: r0 = "getLevelBean"
    //     0x86d210: add             x0, PP, #0x10, lsl #12  ; [pp+0x10390] "getLevelBean"
    //     0x86d214: ldr             x0, [x0, #0x390]
    // 0x86d218: b               #0x8838b4
    // 0x86d21c: r0 = "getExp"
    //     0x86d21c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] "getExp"
    //     0x86d220: ldr             x0, [x0, #0x350]
    // 0x86d224: b               #0x8838b4
    // 0x86d228: r16 = "randomPass"
    //     0x86d228: add             x16, PP, #0x10, lsl #12  ; [pp+0x10398] "randomPass"
    //     0x86d22c: ldr             x16, [x16, #0x398]
    // 0x86d230: ldur            lr, [fp, #-0x28]
    // 0x86d234: stp             lr, x16, [SP]
    // 0x86d238: r0 = ==()
    //     0x86d238: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86d23c: tbnz            w0, #4, #0x86d974
    // 0x86d240: nop             
    // 0x86d244: r0 = LoadStaticField(0xb54)
    //     0x86d244: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d248: ldr             x0, [x0, #0x16a8]
    // 0x86d24c: cmp             w0, NULL
    // 0x86d250: b.ne            #0x86d260
    // 0x86d254: nop             
    // 0x86d258: r0 = Null
    //     0x86d258: mov             x0, NULL
    // 0x86d25c: b               #0x86d288
    // 0x86d260: r17 = 335
    //     0x86d260: movz            x17, #0x14f
    // 0x86d264: ldr             w1, [x0, x17]
    // 0x86d268: DecompressPointer r1
    //     0x86d268: add             x1, x1, HEAP, lsl #32
    // 0x86d26c: r0 = LoadClassIdInstr(r1)
    //     0x86d26c: ldur            x0, [x1, #-1]
    //     0x86d270: ubfx            x0, x0, #0xc, #0x14
    // 0x86d274: r2 = "trainpass"
    //     0x86d274: add             x2, PP, #0x10, lsl #12  ; [pp+0x103a0] "trainpass"
    //     0x86d278: ldr             x2, [x2, #0x3a0]
    // 0x86d27c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d27c: sub             lr, x0, #0xb4
    //     0x86d280: ldr             lr, [x21, lr, lsl #3]
    //     0x86d284: blr             lr
    // 0x86d288: cmp             w0, NULL
    // 0x86d28c: b.ne            #0x86d29c
    // 0x86d290: nop             
    // 0x86d294: r3 = false
    //     0x86d294: add             x3, NULL, #0x30  ; false
    // 0x86d298: b               #0x86d2a0
    // 0x86d29c: mov             x3, x0
    // 0x86d2a0: mov             x0, x3
    // 0x86d2a4: stur            x3, [fp, #-8]
    // 0x86d2a8: r2 = Null
    //     0x86d2a8: mov             x2, NULL
    // 0x86d2ac: r1 = Null
    //     0x86d2ac: mov             x1, NULL
    // 0x86d2b0: r4 = 59
    //     0x86d2b0: movz            x4, #0x3b
    // 0x86d2b4: branchIfSmi(r0, 0x86d2c4)
    //     0x86d2b4: tbz             w0, #0, #0x86d2c4
    //     0x86d2b8: nop             
    // 0x86d2bc: r4 = LoadClassIdInstr(r0)
    //     0x86d2bc: ldur            x4, [x0, #-1]
    //     0x86d2c0: ubfx            x4, x4, #0xc, #0x14
    // 0x86d2c4: cmp             x4, #0x3e
    // 0x86d2c8: b.eq            #0x86d2e0
    // 0x86d2cc: nop             
    // 0x86d2d0: r8 = bool
    //     0x86d2d0: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86d2d4: r3 = Null
    //     0x86d2d4: add             x3, PP, #0x10, lsl #12  ; [pp+0x103a8] Null
    //     0x86d2d8: ldr             x3, [x3, #0x3a8]
    // 0x86d2dc: r0 = bool()
    //     0x86d2dc: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86d2e0: r0 = LoadStaticField(0xb54)
    //     0x86d2e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d2e4: ldr             x0, [x0, #0x16a8]
    // 0x86d2e8: cmp             w0, NULL
    // 0x86d2ec: b.ne            #0x86d2fc
    // 0x86d2f0: nop             
    // 0x86d2f4: r0 = Null
    //     0x86d2f4: mov             x0, NULL
    // 0x86d2f8: b               #0x86d324
    // 0x86d2fc: r17 = 335
    //     0x86d2fc: movz            x17, #0x14f
    // 0x86d300: ldr             w1, [x0, x17]
    // 0x86d304: DecompressPointer r1
    //     0x86d304: add             x1, x1, HEAP, lsl #32
    // 0x86d308: r0 = LoadClassIdInstr(r1)
    //     0x86d308: ldur            x0, [x1, #-1]
    //     0x86d30c: ubfx            x0, x0, #0xc, #0x14
    // 0x86d310: r2 = "exppass"
    //     0x86d310: add             x2, PP, #0x10, lsl #12  ; [pp+0x103b8] "exppass"
    //     0x86d314: ldr             x2, [x2, #0x3b8]
    // 0x86d318: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d318: sub             lr, x0, #0xb4
    //     0x86d31c: ldr             lr, [x21, lr, lsl #3]
    //     0x86d320: blr             lr
    // 0x86d324: cmp             w0, NULL
    // 0x86d328: b.ne            #0x86d338
    // 0x86d32c: nop             
    // 0x86d330: r3 = false
    //     0x86d330: add             x3, NULL, #0x30  ; false
    // 0x86d334: b               #0x86d33c
    // 0x86d338: mov             x3, x0
    // 0x86d33c: mov             x0, x3
    // 0x86d340: stur            x3, [fp, #-0x10]
    // 0x86d344: r2 = Null
    //     0x86d344: mov             x2, NULL
    // 0x86d348: r1 = Null
    //     0x86d348: mov             x1, NULL
    // 0x86d34c: r4 = 59
    //     0x86d34c: movz            x4, #0x3b
    // 0x86d350: branchIfSmi(r0, 0x86d360)
    //     0x86d350: tbz             w0, #0, #0x86d360
    //     0x86d354: nop             
    // 0x86d358: r4 = LoadClassIdInstr(r0)
    //     0x86d358: ldur            x4, [x0, #-1]
    //     0x86d35c: ubfx            x4, x4, #0xc, #0x14
    // 0x86d360: cmp             x4, #0x3e
    // 0x86d364: b.eq            #0x86d37c
    // 0x86d368: nop             
    // 0x86d36c: r8 = bool
    //     0x86d36c: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86d370: r3 = Null
    //     0x86d370: add             x3, PP, #0x10, lsl #12  ; [pp+0x103c0] Null
    //     0x86d374: ldr             x3, [x3, #0x3c0]
    // 0x86d378: r0 = bool()
    //     0x86d378: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86d37c: r0 = LoadStaticField(0xb54)
    //     0x86d37c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d380: ldr             x0, [x0, #0x16a8]
    // 0x86d384: cmp             w0, NULL
    // 0x86d388: b.ne            #0x86d398
    // 0x86d38c: nop             
    // 0x86d390: r0 = Null
    //     0x86d390: mov             x0, NULL
    // 0x86d394: b               #0x86d3c0
    // 0x86d398: r17 = 335
    //     0x86d398: movz            x17, #0x14f
    // 0x86d39c: ldr             w1, [x0, x17]
    // 0x86d3a0: DecompressPointer r1
    //     0x86d3a0: add             x1, x1, HEAP, lsl #32
    // 0x86d3a4: r0 = LoadClassIdInstr(r1)
    //     0x86d3a4: ldur            x0, [x1, #-1]
    //     0x86d3a8: ubfx            x0, x0, #0xc, #0x14
    // 0x86d3ac: r2 = "goldpass"
    //     0x86d3ac: add             x2, PP, #0x10, lsl #12  ; [pp+0x103d0] "goldpass"
    //     0x86d3b0: ldr             x2, [x2, #0x3d0]
    // 0x86d3b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d3b4: sub             lr, x0, #0xb4
    //     0x86d3b8: ldr             lr, [x21, lr, lsl #3]
    //     0x86d3bc: blr             lr
    // 0x86d3c0: cmp             w0, NULL
    // 0x86d3c4: b.ne            #0x86d3d4
    // 0x86d3c8: nop             
    // 0x86d3cc: r3 = false
    //     0x86d3cc: add             x3, NULL, #0x30  ; false
    // 0x86d3d0: b               #0x86d3d8
    // 0x86d3d4: mov             x3, x0
    // 0x86d3d8: mov             x0, x3
    // 0x86d3dc: stur            x3, [fp, #-0x18]
    // 0x86d3e0: r2 = Null
    //     0x86d3e0: mov             x2, NULL
    // 0x86d3e4: r1 = Null
    //     0x86d3e4: mov             x1, NULL
    // 0x86d3e8: r4 = 59
    //     0x86d3e8: movz            x4, #0x3b
    // 0x86d3ec: branchIfSmi(r0, 0x86d3fc)
    //     0x86d3ec: tbz             w0, #0, #0x86d3fc
    //     0x86d3f0: nop             
    // 0x86d3f4: r4 = LoadClassIdInstr(r0)
    //     0x86d3f4: ldur            x4, [x0, #-1]
    //     0x86d3f8: ubfx            x4, x4, #0xc, #0x14
    // 0x86d3fc: cmp             x4, #0x3e
    // 0x86d400: b.eq            #0x86d418
    // 0x86d404: nop             
    // 0x86d408: r8 = bool
    //     0x86d408: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86d40c: r3 = Null
    //     0x86d40c: add             x3, PP, #0x10, lsl #12  ; [pp+0x103d8] Null
    //     0x86d410: ldr             x3, [x3, #0x3d8]
    // 0x86d414: r0 = bool()
    //     0x86d414: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86d418: r0 = LoadStaticField(0xb54)
    //     0x86d418: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d41c: ldr             x0, [x0, #0x16a8]
    // 0x86d420: cmp             w0, NULL
    // 0x86d424: b.ne            #0x86d434
    // 0x86d428: nop             
    // 0x86d42c: r0 = Null
    //     0x86d42c: mov             x0, NULL
    // 0x86d430: b               #0x86d45c
    // 0x86d434: r17 = 335
    //     0x86d434: movz            x17, #0x14f
    // 0x86d438: ldr             w1, [x0, x17]
    // 0x86d43c: DecompressPointer r1
    //     0x86d43c: add             x1, x1, HEAP, lsl #32
    // 0x86d440: r0 = LoadClassIdInstr(r1)
    //     0x86d440: ldur            x0, [x1, #-1]
    //     0x86d444: ubfx            x0, x0, #0xc, #0x14
    // 0x86d448: r2 = "spapass"
    //     0x86d448: add             x2, PP, #0x10, lsl #12  ; [pp+0x103e8] "spapass"
    //     0x86d44c: ldr             x2, [x2, #0x3e8]
    // 0x86d450: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d450: sub             lr, x0, #0xb4
    //     0x86d454: ldr             lr, [x21, lr, lsl #3]
    //     0x86d458: blr             lr
    // 0x86d45c: cmp             w0, NULL
    // 0x86d460: b.ne            #0x86d470
    // 0x86d464: nop             
    // 0x86d468: r3 = false
    //     0x86d468: add             x3, NULL, #0x30  ; false
    // 0x86d46c: b               #0x86d474
    // 0x86d470: mov             x3, x0
    // 0x86d474: mov             x0, x3
    // 0x86d478: stur            x3, [fp, #-0x30]
    // 0x86d47c: r2 = Null
    //     0x86d47c: mov             x2, NULL
    // 0x86d480: r1 = Null
    //     0x86d480: mov             x1, NULL
    // 0x86d484: r4 = 59
    //     0x86d484: movz            x4, #0x3b
    // 0x86d488: branchIfSmi(r0, 0x86d498)
    //     0x86d488: tbz             w0, #0, #0x86d498
    //     0x86d48c: nop             
    // 0x86d490: r4 = LoadClassIdInstr(r0)
    //     0x86d490: ldur            x4, [x0, #-1]
    //     0x86d494: ubfx            x4, x4, #0xc, #0x14
    // 0x86d498: cmp             x4, #0x3e
    // 0x86d49c: b.eq            #0x86d4b4
    // 0x86d4a0: nop             
    // 0x86d4a4: r8 = bool
    //     0x86d4a4: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86d4a8: r3 = Null
    //     0x86d4a8: add             x3, PP, #0x10, lsl #12  ; [pp+0x103f0] Null
    //     0x86d4ac: ldr             x3, [x3, #0x3f0]
    // 0x86d4b0: r0 = bool()
    //     0x86d4b0: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86d4b4: r0 = LoadStaticField(0xb54)
    //     0x86d4b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d4b8: ldr             x0, [x0, #0x16a8]
    // 0x86d4bc: cmp             w0, NULL
    // 0x86d4c0: b.ne            #0x86d4d0
    // 0x86d4c4: nop             
    // 0x86d4c8: r0 = Null
    //     0x86d4c8: mov             x0, NULL
    // 0x86d4cc: b               #0x86d4f8
    // 0x86d4d0: r17 = 331
    //     0x86d4d0: movz            x17, #0x14b
    // 0x86d4d4: ldr             w1, [x0, x17]
    // 0x86d4d8: DecompressPointer r1
    //     0x86d4d8: add             x1, x1, HEAP, lsl #32
    // 0x86d4dc: r0 = LoadClassIdInstr(r1)
    //     0x86d4dc: ldur            x0, [x1, #-1]
    //     0x86d4e0: ubfx            x0, x0, #0xc, #0x14
    // 0x86d4e4: r2 = "trainPass"
    //     0x86d4e4: add             x2, PP, #0xf, lsl #12  ; [pp+0xfea8] "trainPass"
    //     0x86d4e8: ldr             x2, [x2, #0xea8]
    // 0x86d4ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d4ec: sub             lr, x0, #0xb4
    //     0x86d4f0: ldr             lr, [x21, lr, lsl #3]
    //     0x86d4f4: blr             lr
    // 0x86d4f8: cmp             w0, NULL
    // 0x86d4fc: b.ne            #0x86d518
    // 0x86d500: nop             
    // 0x86d504: r1 = Null
    //     0x86d504: mov             x1, NULL
    // 0x86d508: r2 = 0
    //     0x86d508: movz            x2, #0
    // 0x86d50c: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86d50c: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86d510: mov             x3, x0
    // 0x86d514: b               #0x86d51c
    // 0x86d518: mov             x3, x0
    // 0x86d51c: mov             x0, x3
    // 0x86d520: stur            x3, [fp, #-0x40]
    // 0x86d524: r2 = Null
    //     0x86d524: mov             x2, NULL
    // 0x86d528: r1 = Null
    //     0x86d528: mov             x1, NULL
    // 0x86d52c: r4 = 59
    //     0x86d52c: movz            x4, #0x3b
    // 0x86d530: branchIfSmi(r0, 0x86d540)
    //     0x86d530: tbz             w0, #0, #0x86d540
    //     0x86d534: nop             
    // 0x86d538: r4 = LoadClassIdInstr(r0)
    //     0x86d538: ldur            x4, [x0, #-1]
    //     0x86d53c: ubfx            x4, x4, #0xc, #0x14
    // 0x86d540: cmp             x4, #0xcdb
    // 0x86d544: b.eq            #0x86d560
    // 0x86d548: nop             
    // 0x86d54c: r8 = Timestamp
    //     0x86d54c: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86d550: ldr             x8, [x8, #0xa30]
    // 0x86d554: r3 = Null
    //     0x86d554: add             x3, PP, #0x10, lsl #12  ; [pp+0x10400] Null
    //     0x86d558: ldr             x3, [x3, #0x400]
    // 0x86d55c: r0 = Timestamp()
    //     0x86d55c: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86d560: r0 = LoadStaticField(0xb54)
    //     0x86d560: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d564: ldr             x0, [x0, #0x16a8]
    // 0x86d568: cmp             w0, NULL
    // 0x86d56c: b.ne            #0x86d57c
    // 0x86d570: nop             
    // 0x86d574: r0 = Null
    //     0x86d574: mov             x0, NULL
    // 0x86d578: b               #0x86d5a4
    // 0x86d57c: r17 = 331
    //     0x86d57c: movz            x17, #0x14b
    // 0x86d580: ldr             w1, [x0, x17]
    // 0x86d584: DecompressPointer r1
    //     0x86d584: add             x1, x1, HEAP, lsl #32
    // 0x86d588: r0 = LoadClassIdInstr(r1)
    //     0x86d588: ldur            x0, [x1, #-1]
    //     0x86d58c: ubfx            x0, x0, #0xc, #0x14
    // 0x86d590: r2 = "expPass"
    //     0x86d590: add             x2, PP, #0x10, lsl #12  ; [pp+0x10410] "expPass"
    //     0x86d594: ldr             x2, [x2, #0x410]
    // 0x86d598: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d598: sub             lr, x0, #0xb4
    //     0x86d59c: ldr             lr, [x21, lr, lsl #3]
    //     0x86d5a0: blr             lr
    // 0x86d5a4: cmp             w0, NULL
    // 0x86d5a8: b.ne            #0x86d5c4
    // 0x86d5ac: nop             
    // 0x86d5b0: r1 = Null
    //     0x86d5b0: mov             x1, NULL
    // 0x86d5b4: r2 = 0
    //     0x86d5b4: movz            x2, #0
    // 0x86d5b8: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86d5b8: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86d5bc: mov             x3, x0
    // 0x86d5c0: b               #0x86d5c8
    // 0x86d5c4: mov             x3, x0
    // 0x86d5c8: mov             x0, x3
    // 0x86d5cc: stur            x3, [fp, #-0x48]
    // 0x86d5d0: r2 = Null
    //     0x86d5d0: mov             x2, NULL
    // 0x86d5d4: r1 = Null
    //     0x86d5d4: mov             x1, NULL
    // 0x86d5d8: r4 = 59
    //     0x86d5d8: movz            x4, #0x3b
    // 0x86d5dc: branchIfSmi(r0, 0x86d5ec)
    //     0x86d5dc: tbz             w0, #0, #0x86d5ec
    //     0x86d5e0: nop             
    // 0x86d5e4: r4 = LoadClassIdInstr(r0)
    //     0x86d5e4: ldur            x4, [x0, #-1]
    //     0x86d5e8: ubfx            x4, x4, #0xc, #0x14
    // 0x86d5ec: cmp             x4, #0xcdb
    // 0x86d5f0: b.eq            #0x86d60c
    // 0x86d5f4: nop             
    // 0x86d5f8: r8 = Timestamp
    //     0x86d5f8: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86d5fc: ldr             x8, [x8, #0xa30]
    // 0x86d600: r3 = Null
    //     0x86d600: add             x3, PP, #0x10, lsl #12  ; [pp+0x10418] Null
    //     0x86d604: ldr             x3, [x3, #0x418]
    // 0x86d608: r0 = Timestamp()
    //     0x86d608: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86d60c: r0 = LoadStaticField(0xb54)
    //     0x86d60c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d610: ldr             x0, [x0, #0x16a8]
    // 0x86d614: cmp             w0, NULL
    // 0x86d618: b.ne            #0x86d628
    // 0x86d61c: nop             
    // 0x86d620: r0 = Null
    //     0x86d620: mov             x0, NULL
    // 0x86d624: b               #0x86d650
    // 0x86d628: r17 = 331
    //     0x86d628: movz            x17, #0x14b
    // 0x86d62c: ldr             w1, [x0, x17]
    // 0x86d630: DecompressPointer r1
    //     0x86d630: add             x1, x1, HEAP, lsl #32
    // 0x86d634: r0 = LoadClassIdInstr(r1)
    //     0x86d634: ldur            x0, [x1, #-1]
    //     0x86d638: ubfx            x0, x0, #0xc, #0x14
    // 0x86d63c: r2 = "goldPass"
    //     0x86d63c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10428] "goldPass"
    //     0x86d640: ldr             x2, [x2, #0x428]
    // 0x86d644: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d644: sub             lr, x0, #0xb4
    //     0x86d648: ldr             lr, [x21, lr, lsl #3]
    //     0x86d64c: blr             lr
    // 0x86d650: cmp             w0, NULL
    // 0x86d654: b.ne            #0x86d670
    // 0x86d658: nop             
    // 0x86d65c: r1 = Null
    //     0x86d65c: mov             x1, NULL
    // 0x86d660: r2 = 0
    //     0x86d660: movz            x2, #0
    // 0x86d664: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86d664: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86d668: mov             x3, x0
    // 0x86d66c: b               #0x86d674
    // 0x86d670: mov             x3, x0
    // 0x86d674: mov             x0, x3
    // 0x86d678: stur            x3, [fp, #-0x50]
    // 0x86d67c: r2 = Null
    //     0x86d67c: mov             x2, NULL
    // 0x86d680: r1 = Null
    //     0x86d680: mov             x1, NULL
    // 0x86d684: r4 = 59
    //     0x86d684: movz            x4, #0x3b
    // 0x86d688: branchIfSmi(r0, 0x86d698)
    //     0x86d688: tbz             w0, #0, #0x86d698
    //     0x86d68c: nop             
    // 0x86d690: r4 = LoadClassIdInstr(r0)
    //     0x86d690: ldur            x4, [x0, #-1]
    //     0x86d694: ubfx            x4, x4, #0xc, #0x14
    // 0x86d698: cmp             x4, #0xcdb
    // 0x86d69c: b.eq            #0x86d6b8
    // 0x86d6a0: nop             
    // 0x86d6a4: r8 = Timestamp
    //     0x86d6a4: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86d6a8: ldr             x8, [x8, #0xa30]
    // 0x86d6ac: r3 = Null
    //     0x86d6ac: add             x3, PP, #0x10, lsl #12  ; [pp+0x10430] Null
    //     0x86d6b0: ldr             x3, [x3, #0x430]
    // 0x86d6b4: r0 = Timestamp()
    //     0x86d6b4: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86d6b8: r0 = LoadStaticField(0xb54)
    //     0x86d6b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d6bc: ldr             x0, [x0, #0x16a8]
    // 0x86d6c0: cmp             w0, NULL
    // 0x86d6c4: b.ne            #0x86d6d4
    // 0x86d6c8: nop             
    // 0x86d6cc: r0 = Null
    //     0x86d6cc: mov             x0, NULL
    // 0x86d6d0: b               #0x86d6fc
    // 0x86d6d4: r17 = 331
    //     0x86d6d4: movz            x17, #0x14b
    // 0x86d6d8: ldr             w1, [x0, x17]
    // 0x86d6dc: DecompressPointer r1
    //     0x86d6dc: add             x1, x1, HEAP, lsl #32
    // 0x86d6e0: r0 = LoadClassIdInstr(r1)
    //     0x86d6e0: ldur            x0, [x1, #-1]
    //     0x86d6e4: ubfx            x0, x0, #0xc, #0x14
    // 0x86d6e8: r2 = "spaPass"
    //     0x86d6e8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe70] "spaPass"
    //     0x86d6ec: ldr             x2, [x2, #0xe70]
    // 0x86d6f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d6f0: sub             lr, x0, #0xb4
    //     0x86d6f4: ldr             lr, [x21, lr, lsl #3]
    //     0x86d6f8: blr             lr
    // 0x86d6fc: cmp             w0, NULL
    // 0x86d700: b.ne            #0x86d71c
    // 0x86d704: nop             
    // 0x86d708: r1 = Null
    //     0x86d708: mov             x1, NULL
    // 0x86d70c: r2 = 0
    //     0x86d70c: movz            x2, #0
    // 0x86d710: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x86d710: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x86d714: mov             x4, x0
    // 0x86d718: b               #0x86d720
    // 0x86d71c: mov             x4, x0
    // 0x86d720: ldur            x3, [fp, #-8]
    // 0x86d724: mov             x0, x4
    // 0x86d728: stur            x4, [fp, #-0x58]
    // 0x86d72c: r2 = Null
    //     0x86d72c: mov             x2, NULL
    // 0x86d730: r1 = Null
    //     0x86d730: mov             x1, NULL
    // 0x86d734: r4 = 59
    //     0x86d734: movz            x4, #0x3b
    // 0x86d738: branchIfSmi(r0, 0x86d748)
    //     0x86d738: tbz             w0, #0, #0x86d748
    //     0x86d73c: nop             
    // 0x86d740: r4 = LoadClassIdInstr(r0)
    //     0x86d740: ldur            x4, [x0, #-1]
    //     0x86d744: ubfx            x4, x4, #0xc, #0x14
    // 0x86d748: cmp             x4, #0xcdb
    // 0x86d74c: b.eq            #0x86d768
    // 0x86d750: nop             
    // 0x86d754: r8 = Timestamp
    //     0x86d754: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x86d758: ldr             x8, [x8, #0xa30]
    // 0x86d75c: r3 = Null
    //     0x86d75c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10440] Null
    //     0x86d760: ldr             x3, [x3, #0x440]
    // 0x86d764: r0 = Timestamp()
    //     0x86d764: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x86d768: ldur            x0, [fp, #-8]
    // 0x86d76c: tbnz            w0, #4, #0x86d7d8
    // 0x86d770: nop             
    // 0x86d774: r0 = getTrueTimestamp()
    //     0x86d774: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86d778: mov             x1, x0
    // 0x86d77c: r0 = toDate()
    //     0x86d77c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d780: ldur            x1, [fp, #-0x40]
    // 0x86d784: stur            x0, [fp, #-8]
    // 0x86d788: r0 = toDate()
    //     0x86d788: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d78c: ldur            x1, [fp, #-8]
    // 0x86d790: mov             x2, x0
    // 0x86d794: r0 = difference()
    //     0x86d794: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86d798: mov             x1, x0
    // 0x86d79c: r0 = inSeconds()
    //     0x86d79c: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86d7a0: mov             x1, x0
    // 0x86d7a4: r0 = 604800
    //     0x86d7a4: movz            x0, #0x3a80
    //     0x86d7a8: movk            x0, #0x9, lsl #16
    // 0x86d7ac: sub             x2, x0, x1
    // 0x86d7b0: cmp             x2, #0
    // 0x86d7b4: r16 = true
    //     0x86d7b4: add             x16, NULL, #0x20  ; true
    // 0x86d7b8: r17 = false
    //     0x86d7b8: add             x17, NULL, #0x30  ; false
    // 0x86d7bc: csel            x1, x16, x17, gt
    // 0x86d7c0: tst             x1, #0x10
    // 0x86d7c4: cset            x2, eq
    // 0x86d7c8: lsl             x2, x2, #1
    // 0x86d7cc: r1 = LoadInt32Instr(r2)
    //     0x86d7cc: sbfx            x1, x2, #1, #0x1f
    // 0x86d7d0: mov             x2, x1
    // 0x86d7d4: b               #0x86d7e4
    // 0x86d7d8: r0 = 604800
    //     0x86d7d8: movz            x0, #0x3a80
    //     0x86d7dc: movk            x0, #0x9, lsl #16
    // 0x86d7e0: r2 = 0
    //     0x86d7e0: movz            x2, #0
    // 0x86d7e4: ldur            x1, [fp, #-0x10]
    // 0x86d7e8: stur            x2, [fp, #-0x38]
    // 0x86d7ec: tbnz            w1, #4, #0x86d858
    // 0x86d7f0: nop             
    // 0x86d7f4: r0 = getTrueTimestamp()
    //     0x86d7f4: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86d7f8: mov             x1, x0
    // 0x86d7fc: r0 = toDate()
    //     0x86d7fc: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d800: ldur            x1, [fp, #-0x48]
    // 0x86d804: stur            x0, [fp, #-8]
    // 0x86d808: r0 = toDate()
    //     0x86d808: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d80c: ldur            x1, [fp, #-8]
    // 0x86d810: mov             x2, x0
    // 0x86d814: r0 = difference()
    //     0x86d814: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86d818: mov             x1, x0
    // 0x86d81c: r0 = inSeconds()
    //     0x86d81c: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86d820: mov             x1, x0
    // 0x86d824: r0 = 604800
    //     0x86d824: movz            x0, #0x3a80
    //     0x86d828: movk            x0, #0x9, lsl #16
    // 0x86d82c: sub             x2, x0, x1
    // 0x86d830: cmp             x2, #0
    // 0x86d834: b.le            #0x86d84c
    // 0x86d838: nop             
    // 0x86d83c: ldur            x1, [fp, #-0x38]
    // 0x86d840: add             x2, x1, #1
    // 0x86d844: mov             x1, x2
    // 0x86d848: b               #0x86d850
    // 0x86d84c: ldur            x1, [fp, #-0x38]
    // 0x86d850: mov             x2, x1
    // 0x86d854: b               #0x86d860
    // 0x86d858: mov             x1, x2
    // 0x86d85c: mov             x2, x1
    // 0x86d860: ldur            x1, [fp, #-0x18]
    // 0x86d864: stur            x2, [fp, #-0x38]
    // 0x86d868: tbnz            w1, #4, #0x86d8d4
    // 0x86d86c: nop             
    // 0x86d870: r0 = getTrueTimestamp()
    //     0x86d870: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86d874: mov             x1, x0
    // 0x86d878: r0 = toDate()
    //     0x86d878: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d87c: ldur            x1, [fp, #-0x50]
    // 0x86d880: stur            x0, [fp, #-8]
    // 0x86d884: r0 = toDate()
    //     0x86d884: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d888: ldur            x1, [fp, #-8]
    // 0x86d88c: mov             x2, x0
    // 0x86d890: r0 = difference()
    //     0x86d890: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86d894: mov             x1, x0
    // 0x86d898: r0 = inSeconds()
    //     0x86d898: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86d89c: mov             x1, x0
    // 0x86d8a0: r0 = 604800
    //     0x86d8a0: movz            x0, #0x3a80
    //     0x86d8a4: movk            x0, #0x9, lsl #16
    // 0x86d8a8: sub             x2, x0, x1
    // 0x86d8ac: cmp             x2, #0
    // 0x86d8b0: b.le            #0x86d8c8
    // 0x86d8b4: nop             
    // 0x86d8b8: ldur            x1, [fp, #-0x38]
    // 0x86d8bc: add             x2, x1, #1
    // 0x86d8c0: mov             x1, x2
    // 0x86d8c4: b               #0x86d8cc
    // 0x86d8c8: ldur            x1, [fp, #-0x38]
    // 0x86d8cc: mov             x2, x1
    // 0x86d8d0: b               #0x86d8dc
    // 0x86d8d4: mov             x1, x2
    // 0x86d8d8: mov             x2, x1
    // 0x86d8dc: ldur            x1, [fp, #-0x30]
    // 0x86d8e0: stur            x2, [fp, #-0x38]
    // 0x86d8e4: tbnz            w1, #4, #0x86d94c
    // 0x86d8e8: nop             
    // 0x86d8ec: r0 = getTrueTimestamp()
    //     0x86d8ec: bl              #0x92fc00  ; [package:battlecross/method/commonMethod.dart] ::getTrueTimestamp
    // 0x86d8f0: mov             x1, x0
    // 0x86d8f4: r0 = toDate()
    //     0x86d8f4: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d8f8: ldur            x1, [fp, #-0x58]
    // 0x86d8fc: stur            x0, [fp, #-8]
    // 0x86d900: r0 = toDate()
    //     0x86d900: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x86d904: ldur            x1, [fp, #-8]
    // 0x86d908: mov             x2, x0
    // 0x86d90c: r0 = difference()
    //     0x86d90c: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x86d910: mov             x1, x0
    // 0x86d914: r0 = inSeconds()
    //     0x86d914: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x86d918: mov             x1, x0
    // 0x86d91c: r0 = 604800
    //     0x86d91c: movz            x0, #0x3a80
    //     0x86d920: movk            x0, #0x9, lsl #16
    // 0x86d924: sub             x2, x0, x1
    // 0x86d928: cmp             x2, #0
    // 0x86d92c: b.le            #0x86d944
    // 0x86d930: nop             
    // 0x86d934: ldur            x0, [fp, #-0x38]
    // 0x86d938: add             x1, x0, #1
    // 0x86d93c: mov             x0, x1
    // 0x86d940: b               #0x86d950
    // 0x86d944: ldur            x0, [fp, #-0x38]
    // 0x86d948: b               #0x86d950
    // 0x86d94c: mov             x0, x2
    // 0x86d950: cmp             x0, #2
    // 0x86d954: b.lt            #0x86d968
    // 0x86d958: nop             
    // 0x86d95c: r0 = "getEnergyDrink"
    //     0x86d95c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86d960: ldr             x0, [x0, #0x358]
    // 0x86d964: b               #0x8838b4
    // 0x86d968: r0 = "getRandomPass"
    //     0x86d968: add             x0, PP, #0x10, lsl #12  ; [pp+0x10450] "getRandomPass"
    //     0x86d96c: ldr             x0, [x0, #0x450]
    // 0x86d970: b               #0x8838b4
    // 0x86d974: r16 = "pvpWinReward"
    //     0x86d974: add             x16, PP, #0x10, lsl #12  ; [pp+0x10458] "pvpWinReward"
    //     0x86d978: ldr             x16, [x16, #0x458]
    // 0x86d97c: ldur            lr, [fp, #-0x28]
    // 0x86d980: stp             lr, x16, [SP]
    // 0x86d984: r0 = ==()
    //     0x86d984: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86d988: tbnz            w0, #4, #0x86dcc0
    // 0x86d98c: nop             
    // 0x86d990: r0 = LoadStaticField(0xb54)
    //     0x86d990: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86d994: ldr             x0, [x0, #0x16a8]
    // 0x86d998: cmp             w0, NULL
    // 0x86d99c: b.ne            #0x86d9ac
    // 0x86d9a0: nop             
    // 0x86d9a4: r0 = Null
    //     0x86d9a4: mov             x0, NULL
    // 0x86d9a8: b               #0x86d9d4
    // 0x86d9ac: r17 = 347
    //     0x86d9ac: movz            x17, #0x15b
    // 0x86d9b0: ldr             w1, [x0, x17]
    // 0x86d9b4: DecompressPointer r1
    //     0x86d9b4: add             x1, x1, HEAP, lsl #32
    // 0x86d9b8: r0 = LoadClassIdInstr(r1)
    //     0x86d9b8: ldur            x0, [x1, #-1]
    //     0x86d9bc: ubfx            x0, x0, #0xc, #0x14
    // 0x86d9c0: r2 = "pvpDailyWin"
    //     0x86d9c0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10460] "pvpDailyWin"
    //     0x86d9c4: ldr             x2, [x2, #0x460]
    // 0x86d9c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86d9c8: sub             lr, x0, #0xb4
    //     0x86d9cc: ldr             lr, [x21, lr, lsl #3]
    //     0x86d9d0: blr             lr
    // 0x86d9d4: cmp             w0, NULL
    // 0x86d9d8: b.ne            #0x86d9e8
    // 0x86d9dc: nop             
    // 0x86d9e0: r3 = 0
    //     0x86d9e0: movz            x3, #0
    // 0x86d9e4: b               #0x86d9ec
    // 0x86d9e8: mov             x3, x0
    // 0x86d9ec: mov             x0, x3
    // 0x86d9f0: stur            x3, [fp, #-8]
    // 0x86d9f4: r2 = Null
    //     0x86d9f4: mov             x2, NULL
    // 0x86d9f8: r1 = Null
    //     0x86d9f8: mov             x1, NULL
    // 0x86d9fc: branchIfSmi(r0, 0x86da2c)
    //     0x86d9fc: tbz             w0, #0, #0x86da2c
    //     0x86da00: nop             
    // 0x86da04: r4 = LoadClassIdInstr(r0)
    //     0x86da04: ldur            x4, [x0, #-1]
    //     0x86da08: ubfx            x4, x4, #0xc, #0x14
    // 0x86da0c: sub             x4, x4, #0x3b
    // 0x86da10: cmp             x4, #1
    // 0x86da14: b.ls            #0x86da2c
    // 0x86da18: nop             
    // 0x86da1c: r8 = int
    //     0x86da1c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86da20: r3 = Null
    //     0x86da20: add             x3, PP, #0x10, lsl #12  ; [pp+0x10468] Null
    //     0x86da24: ldr             x3, [x3, #0x468]
    // 0x86da28: r0 = int()
    //     0x86da28: bl              #0x1524294  ; IsType_int_Stub
    // 0x86da2c: r0 = LoadStaticField(0xbf4)
    //     0x86da2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86da30: ldr             x0, [x0, #0x17e8]
    // 0x86da34: ldur            x1, [fp, #-8]
    // 0x86da38: r2 = LoadInt32Instr(r1)
    //     0x86da38: sbfx            x2, x1, #1, #0x1f
    //     0x86da3c: tbz             w1, #0, #0x86da48
    //     0x86da40: nop             
    //     0x86da44: ldur            x2, [x1, #7]
    // 0x86da48: r1 = LoadInt32Instr(r0)
    //     0x86da48: sbfx            x1, x0, #1, #0x1f
    //     0x86da4c: tbz             w0, #0, #0x86da58
    //     0x86da50: nop             
    //     0x86da54: ldur            x1, [x0, #7]
    // 0x86da58: cmp             x2, x1
    // 0x86da5c: b.lt            #0x86da6c
    // 0x86da60: nop             
    // 0x86da64: r0 = "end"
    //     0x86da64: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x86da68: b               #0x8838b4
    // 0x86da6c: r1 = Null
    //     0x86da6c: mov             x1, NULL
    // 0x86da70: r0 = Random()
    //     0x86da70: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86da74: mov             x1, x0
    // 0x86da78: r2 = 10000
    //     0x86da78: movz            x2, #0x2710
    // 0x86da7c: r0 = nextInt()
    //     0x86da7c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86da80: mov             x3, x0
    // 0x86da84: stur            x3, [fp, #-0x38]
    // 0x86da88: r0 = LoadStaticField(0xb54)
    //     0x86da88: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86da8c: ldr             x0, [x0, #0x16a8]
    // 0x86da90: cmp             w0, NULL
    // 0x86da94: b.ne            #0x86daa4
    // 0x86da98: nop             
    // 0x86da9c: r0 = Null
    //     0x86da9c: mov             x0, NULL
    // 0x86daa0: b               #0x86dacc
    // 0x86daa4: r17 = 327
    //     0x86daa4: movz            x17, #0x147
    // 0x86daa8: ldr             w1, [x0, x17]
    // 0x86daac: DecompressPointer r1
    //     0x86daac: add             x1, x1, HEAP, lsl #32
    // 0x86dab0: r0 = LoadClassIdInstr(r1)
    //     0x86dab0: ldur            x0, [x1, #-1]
    //     0x86dab4: ubfx            x0, x0, #0xc, #0x14
    // 0x86dab8: r2 = "storyMinaBadge"
    //     0x86dab8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10478] "storyMinaBadge"
    //     0x86dabc: ldr             x2, [x2, #0x478]
    // 0x86dac0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86dac0: sub             lr, x0, #0xb4
    //     0x86dac4: ldr             lr, [x21, lr, lsl #3]
    //     0x86dac8: blr             lr
    // 0x86dacc: r1 = 59
    //     0x86dacc: movz            x1, #0x3b
    // 0x86dad0: branchIfSmi(r0, 0x86dae0)
    //     0x86dad0: tbz             w0, #0, #0x86dae0
    //     0x86dad4: nop             
    // 0x86dad8: r1 = LoadClassIdInstr(r0)
    //     0x86dad8: ldur            x1, [x0, #-1]
    //     0x86dadc: ubfx            x1, x1, #0xc, #0x14
    // 0x86dae0: r16 = true
    //     0x86dae0: add             x16, NULL, #0x20  ; true
    // 0x86dae4: stp             x16, x0, [SP]
    // 0x86dae8: mov             x0, x1
    // 0x86daec: mov             lr, x0
    // 0x86daf0: ldr             lr, [x21, lr, lsl #3]
    // 0x86daf4: blr             lr
    // 0x86daf8: tbnz            w0, #4, #0x86dc0c
    // 0x86dafc: nop             
    // 0x86db00: ldur            x0, [fp, #-0x38]
    // 0x86db04: cmp             x0, #0xfa0
    // 0x86db08: b.ge            #0x86db44
    // 0x86db0c: nop             
    // 0x86db10: r1 = Null
    //     0x86db10: mov             x1, NULL
    // 0x86db14: r0 = Random()
    //     0x86db14: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86db18: mov             x1, x0
    // 0x86db1c: r2 = 2
    //     0x86db1c: movz            x2, #0x2
    // 0x86db20: r0 = nextInt()
    //     0x86db20: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86db24: cbnz            x0, #0x86db38
    // 0x86db28: nop             
    // 0x86db2c: r0 = "getExp"
    //     0x86db2c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] "getExp"
    //     0x86db30: ldr             x0, [x0, #0x350]
    // 0x86db34: b               #0x8838b4
    // 0x86db38: r0 = "getMoney"
    //     0x86db38: add             x0, PP, #0x10, lsl #12  ; [pp+0x10480] "getMoney"
    //     0x86db3c: ldr             x0, [x0, #0x480]
    // 0x86db40: b               #0x8838b4
    // 0x86db44: r17 = 7300
    //     0x86db44: movz            x17, #0x1c84
    // 0x86db48: cmp             x0, x17
    // 0x86db4c: b.ge            #0x86db60
    // 0x86db50: nop             
    // 0x86db54: r0 = "getEnergyDrink"
    //     0x86db54: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86db58: ldr             x0, [x0, #0x358]
    // 0x86db5c: b               #0x8838b4
    // 0x86db60: r17 = 9800
    //     0x86db60: movz            x17, #0x2648
    // 0x86db64: cmp             x0, x17
    // 0x86db68: b.ge            #0x86dbbc
    // 0x86db6c: nop             
    // 0x86db70: r1 = Null
    //     0x86db70: mov             x1, NULL
    // 0x86db74: r0 = Random()
    //     0x86db74: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86db78: mov             x1, x0
    // 0x86db7c: r2 = 3
    //     0x86db7c: movz            x2, #0x3
    // 0x86db80: r0 = nextInt()
    //     0x86db80: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86db84: cbnz            x0, #0x86db98
    // 0x86db88: nop             
    // 0x86db8c: r0 = "getPortal"
    //     0x86db8c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10488] "getPortal"
    //     0x86db90: ldr             x0, [x0, #0x488]
    // 0x86db94: b               #0x8838b4
    // 0x86db98: cmp             x0, #1
    // 0x86db9c: b.ne            #0x86dbb0
    // 0x86dba0: nop             
    // 0x86dba4: r0 = "getTaxi"
    //     0x86dba4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10490] "getTaxi"
    //     0x86dba8: ldr             x0, [x0, #0x490]
    // 0x86dbac: b               #0x8838b4
    // 0x86dbb0: r0 = "getAtm"
    //     0x86dbb0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10498] "getAtm"
    //     0x86dbb4: ldr             x0, [x0, #0x498]
    // 0x86dbb8: b               #0x8838b4
    // 0x86dbbc: r17 = 9999
    //     0x86dbbc: movz            x17, #0x270f
    // 0x86dbc0: cmp             x0, x17
    // 0x86dbc4: b.gt            #0x86dc00
    // 0x86dbc8: nop             
    // 0x86dbcc: r1 = Null
    //     0x86dbcc: mov             x1, NULL
    // 0x86dbd0: r0 = Random()
    //     0x86dbd0: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86dbd4: mov             x1, x0
    // 0x86dbd8: r2 = 2
    //     0x86dbd8: movz            x2, #0x2
    // 0x86dbdc: r0 = nextInt()
    //     0x86dbdc: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86dbe0: cbnz            x0, #0x86dbf4
    // 0x86dbe4: nop             
    // 0x86dbe8: r0 = "getBathtub"
    //     0x86dbe8: add             x0, PP, #0x10, lsl #12  ; [pp+0x104a0] "getBathtub"
    //     0x86dbec: ldr             x0, [x0, #0x4a0]
    // 0x86dbf0: b               #0x8838b4
    // 0x86dbf4: r0 = "getChanceCard"
    //     0x86dbf4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10370] "getChanceCard"
    //     0x86dbf8: ldr             x0, [x0, #0x370]
    // 0x86dbfc: b               #0x8838b4
    // 0x86dc00: r0 = "getEnergyDrink"
    //     0x86dc00: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86dc04: ldr             x0, [x0, #0x358]
    // 0x86dc08: b               #0x8838b4
    // 0x86dc0c: ldur            x0, [fp, #-0x38]
    // 0x86dc10: r17 = 5000
    //     0x86dc10: movz            x17, #0x1388
    // 0x86dc14: cmp             x0, x17
    // 0x86dc18: b.ge            #0x86dc2c
    // 0x86dc1c: nop             
    // 0x86dc20: r0 = "getEnergyDrink"
    //     0x86dc20: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86dc24: ldr             x0, [x0, #0x358]
    // 0x86dc28: b               #0x8838b4
    // 0x86dc2c: r17 = 9800
    //     0x86dc2c: movz            x17, #0x2648
    // 0x86dc30: cmp             x0, x17
    // 0x86dc34: b.ge            #0x86dc70
    // 0x86dc38: nop             
    // 0x86dc3c: r1 = Null
    //     0x86dc3c: mov             x1, NULL
    // 0x86dc40: r0 = Random()
    //     0x86dc40: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86dc44: mov             x1, x0
    // 0x86dc48: r2 = 2
    //     0x86dc48: movz            x2, #0x2
    // 0x86dc4c: r0 = nextInt()
    //     0x86dc4c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86dc50: cbnz            x0, #0x86dc64
    // 0x86dc54: nop             
    // 0x86dc58: r0 = "getExp"
    //     0x86dc58: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] "getExp"
    //     0x86dc5c: ldr             x0, [x0, #0x350]
    // 0x86dc60: b               #0x8838b4
    // 0x86dc64: r0 = "getMoney"
    //     0x86dc64: add             x0, PP, #0x10, lsl #12  ; [pp+0x10480] "getMoney"
    //     0x86dc68: ldr             x0, [x0, #0x480]
    // 0x86dc6c: b               #0x8838b4
    // 0x86dc70: r17 = 9999
    //     0x86dc70: movz            x17, #0x270f
    // 0x86dc74: cmp             x0, x17
    // 0x86dc78: b.gt            #0x86dcb4
    // 0x86dc7c: nop             
    // 0x86dc80: r1 = Null
    //     0x86dc80: mov             x1, NULL
    // 0x86dc84: r0 = Random()
    //     0x86dc84: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86dc88: mov             x1, x0
    // 0x86dc8c: r2 = 2
    //     0x86dc8c: movz            x2, #0x2
    // 0x86dc90: r0 = nextInt()
    //     0x86dc90: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86dc94: cbnz            x0, #0x86dca8
    // 0x86dc98: nop             
    // 0x86dc9c: r0 = "getBathtub"
    //     0x86dc9c: add             x0, PP, #0x10, lsl #12  ; [pp+0x104a0] "getBathtub"
    //     0x86dca0: ldr             x0, [x0, #0x4a0]
    // 0x86dca4: b               #0x8838b4
    // 0x86dca8: r0 = "getChanceCard"
    //     0x86dca8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10370] "getChanceCard"
    //     0x86dcac: ldr             x0, [x0, #0x370]
    // 0x86dcb0: b               #0x8838b4
    // 0x86dcb4: r0 = "getEnergyDrink"
    //     0x86dcb4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86dcb8: ldr             x0, [x0, #0x358]
    // 0x86dcbc: b               #0x8838b4
    // 0x86dcc0: r16 = "tokenCapsule"
    //     0x86dcc0: add             x16, PP, #0x10, lsl #12  ; [pp+0x104a8] "tokenCapsule"
    //     0x86dcc4: ldr             x16, [x16, #0x4a8]
    // 0x86dcc8: ldur            lr, [fp, #-0x28]
    // 0x86dccc: stp             lr, x16, [SP]
    // 0x86dcd0: r0 = ==()
    //     0x86dcd0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86dcd4: tbnz            w0, #4, #0x86e0b4
    // 0x86dcd8: nop             
    // 0x86dcdc: r0 = LoadStaticField(0xb54)
    //     0x86dcdc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86dce0: ldr             x0, [x0, #0x16a8]
    // 0x86dce4: cmp             w0, NULL
    // 0x86dce8: b.eq            #0x86de30
    // 0x86dcec: nop             
    // 0x86dcf0: r17 = 351
    //     0x86dcf0: movz            x17, #0x15f
    // 0x86dcf4: ldr             w1, [x0, x17]
    // 0x86dcf8: DecompressPointer r1
    //     0x86dcf8: add             x1, x1, HEAP, lsl #32
    // 0x86dcfc: r0 = LoadClassIdInstr(r1)
    //     0x86dcfc: ldur            x0, [x1, #-1]
    //     0x86dd00: ubfx            x0, x0, #0xc, #0x14
    // 0x86dd04: r2 = "tokenCapsule"
    //     0x86dd04: add             x2, PP, #0x10, lsl #12  ; [pp+0x104a8] "tokenCapsule"
    //     0x86dd08: ldr             x2, [x2, #0x4a8]
    // 0x86dd0c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86dd0c: sub             lr, x0, #0xb4
    //     0x86dd10: ldr             lr, [x21, lr, lsl #3]
    //     0x86dd14: blr             lr
    // 0x86dd18: cmp             w0, NULL
    // 0x86dd1c: b.eq            #0x86de30
    // 0x86dd20: nop             
    // 0x86dd24: r0 = LoadStaticField(0xb54)
    //     0x86dd24: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86dd28: ldr             x0, [x0, #0x16a8]
    // 0x86dd2c: cmp             w0, NULL
    // 0x86dd30: b.ne            #0x86dd40
    // 0x86dd34: nop             
    // 0x86dd38: r0 = Null
    //     0x86dd38: mov             x0, NULL
    // 0x86dd3c: b               #0x86dd68
    // 0x86dd40: r17 = 351
    //     0x86dd40: movz            x17, #0x15f
    // 0x86dd44: ldr             w1, [x0, x17]
    // 0x86dd48: DecompressPointer r1
    //     0x86dd48: add             x1, x1, HEAP, lsl #32
    // 0x86dd4c: r0 = LoadClassIdInstr(r1)
    //     0x86dd4c: ldur            x0, [x1, #-1]
    //     0x86dd50: ubfx            x0, x0, #0xc, #0x14
    // 0x86dd54: r2 = "tokenCapsule"
    //     0x86dd54: add             x2, PP, #0x10, lsl #12  ; [pp+0x104a8] "tokenCapsule"
    //     0x86dd58: ldr             x2, [x2, #0x4a8]
    // 0x86dd5c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86dd5c: sub             lr, x0, #0xb4
    //     0x86dd60: ldr             lr, [x21, lr, lsl #3]
    //     0x86dd64: blr             lr
    // 0x86dd68: r1 = 59
    //     0x86dd68: movz            x1, #0x3b
    // 0x86dd6c: branchIfSmi(r0, 0x86dd7c)
    //     0x86dd6c: tbz             w0, #0, #0x86dd7c
    //     0x86dd70: nop             
    // 0x86dd74: r1 = LoadClassIdInstr(r0)
    //     0x86dd74: ldur            x1, [x0, #-1]
    //     0x86dd78: ubfx            x1, x1, #0xc, #0x14
    // 0x86dd7c: r16 = ""
    //     0x86dd7c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86dd80: stp             x16, x0, [SP]
    // 0x86dd84: mov             x0, x1
    // 0x86dd88: mov             lr, x0
    // 0x86dd8c: ldr             lr, [x21, lr, lsl #3]
    // 0x86dd90: blr             lr
    // 0x86dd94: tbz             w0, #4, #0x86de30
    // 0x86dd98: nop             
    // 0x86dd9c: r0 = LoadStaticField(0xb54)
    //     0x86dd9c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86dda0: ldr             x0, [x0, #0x16a8]
    // 0x86dda4: cmp             w0, NULL
    // 0x86dda8: b.ne            #0x86ddb8
    // 0x86ddac: nop             
    // 0x86ddb0: r3 = Null
    //     0x86ddb0: mov             x3, NULL
    // 0x86ddb4: b               #0x86dde4
    // 0x86ddb8: r17 = 351
    //     0x86ddb8: movz            x17, #0x15f
    // 0x86ddbc: ldr             w1, [x0, x17]
    // 0x86ddc0: DecompressPointer r1
    //     0x86ddc0: add             x1, x1, HEAP, lsl #32
    // 0x86ddc4: r0 = LoadClassIdInstr(r1)
    //     0x86ddc4: ldur            x0, [x1, #-1]
    //     0x86ddc8: ubfx            x0, x0, #0xc, #0x14
    // 0x86ddcc: r2 = "tokenCapsule"
    //     0x86ddcc: add             x2, PP, #0x10, lsl #12  ; [pp+0x104a8] "tokenCapsule"
    //     0x86ddd0: ldr             x2, [x2, #0x4a8]
    // 0x86ddd4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ddd4: sub             lr, x0, #0xb4
    //     0x86ddd8: ldr             lr, [x21, lr, lsl #3]
    //     0x86dddc: blr             lr
    // 0x86dde0: mov             x3, x0
    // 0x86dde4: mov             x0, x3
    // 0x86dde8: stur            x3, [fp, #-8]
    // 0x86ddec: r2 = Null
    //     0x86ddec: mov             x2, NULL
    // 0x86ddf0: r1 = Null
    //     0x86ddf0: mov             x1, NULL
    // 0x86ddf4: r4 = 59
    //     0x86ddf4: movz            x4, #0x3b
    // 0x86ddf8: branchIfSmi(r0, 0x86de08)
    //     0x86ddf8: tbz             w0, #0, #0x86de08
    //     0x86ddfc: nop             
    // 0x86de00: r4 = LoadClassIdInstr(r0)
    //     0x86de00: ldur            x4, [x0, #-1]
    //     0x86de04: ubfx            x4, x4, #0xc, #0x14
    // 0x86de08: sub             x4, x4, #0x5d
    // 0x86de0c: cmp             x4, #1
    // 0x86de10: b.ls            #0x86de28
    // 0x86de14: nop             
    // 0x86de18: r8 = String
    //     0x86de18: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86de1c: r3 = Null
    //     0x86de1c: add             x3, PP, #0x10, lsl #12  ; [pp+0x104b0] Null
    //     0x86de20: ldr             x3, [x3, #0x4b0]
    // 0x86de24: r0 = String()
    //     0x86de24: bl              #0x1523244  ; IsType_String_Stub
    // 0x86de28: ldur            x0, [fp, #-8]
    // 0x86de2c: b               #0x8838b4
    // 0x86de30: r1 = Null
    //     0x86de30: mov             x1, NULL
    // 0x86de34: r0 = Random()
    //     0x86de34: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86de38: mov             x1, x0
    // 0x86de3c: r2 = 10000
    //     0x86de3c: movz            x2, #0x2710
    // 0x86de40: r0 = nextInt()
    //     0x86de40: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86de44: cmp             x0, #0x5dc
    // 0x86de48: b.ge            #0x86de5c
    // 0x86de4c: nop             
    // 0x86de50: r4 = "get1000G"
    //     0x86de50: add             x4, PP, #0x10, lsl #12  ; [pp+0x104c0] "get1000G"
    //     0x86de54: ldr             x4, [x4, #0x4c0]
    // 0x86de58: b               #0x86e05c
    // 0x86de5c: cmp             x0, #0xbb8
    // 0x86de60: b.ge            #0x86de74
    // 0x86de64: nop             
    // 0x86de68: r0 = "get1000Exp"
    //     0x86de68: add             x0, PP, #0x10, lsl #12  ; [pp+0x104c8] "get1000Exp"
    //     0x86de6c: ldr             x0, [x0, #0x4c8]
    // 0x86de70: b               #0x86e058
    // 0x86de74: cmp             x0, #0xed8
    // 0x86de78: b.ge            #0x86de8c
    // 0x86de7c: nop             
    // 0x86de80: r0 = "getEnergyDrink"
    //     0x86de80: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86de84: ldr             x0, [x0, #0x358]
    // 0x86de88: b               #0x86e058
    // 0x86de8c: r17 = 4300
    //     0x86de8c: movz            x17, #0x10cc
    // 0x86de90: cmp             x0, x17
    // 0x86de94: b.ge            #0x86dea8
    // 0x86de98: nop             
    // 0x86de9c: r0 = "getTaxi"
    //     0x86de9c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10490] "getTaxi"
    //     0x86dea0: ldr             x0, [x0, #0x490]
    // 0x86dea4: b               #0x86e058
    // 0x86dea8: r17 = 4800
    //     0x86dea8: movz            x17, #0x12c0
    // 0x86deac: cmp             x0, x17
    // 0x86deb0: b.ge            #0x86dec4
    // 0x86deb4: nop             
    // 0x86deb8: r0 = "getAtm"
    //     0x86deb8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10498] "getAtm"
    //     0x86debc: ldr             x0, [x0, #0x498]
    // 0x86dec0: b               #0x86e058
    // 0x86dec4: r17 = 5300
    //     0x86dec4: movz            x17, #0x14b4
    // 0x86dec8: cmp             x0, x17
    // 0x86decc: b.ge            #0x86dee0
    // 0x86ded0: nop             
    // 0x86ded4: r0 = "getPortal"
    //     0x86ded4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10488] "getPortal"
    //     0x86ded8: ldr             x0, [x0, #0x488]
    // 0x86dedc: b               #0x86e058
    // 0x86dee0: r17 = 5500
    //     0x86dee0: movz            x17, #0x157c
    // 0x86dee4: cmp             x0, x17
    // 0x86dee8: b.ge            #0x86defc
    // 0x86deec: nop             
    // 0x86def0: r0 = "getLevelBean"
    //     0x86def0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10390] "getLevelBean"
    //     0x86def4: ldr             x0, [x0, #0x390]
    // 0x86def8: b               #0x86e058
    // 0x86defc: r17 = 5700
    //     0x86defc: movz            x17, #0x1644
    // 0x86df00: cmp             x0, x17
    // 0x86df04: b.ge            #0x86df18
    // 0x86df08: nop             
    // 0x86df0c: r0 = "getChanceCard"
    //     0x86df0c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10370] "getChanceCard"
    //     0x86df10: ldr             x0, [x0, #0x370]
    // 0x86df14: b               #0x86e058
    // 0x86df18: r17 = 5900
    //     0x86df18: movz            x17, #0x170c
    // 0x86df1c: cmp             x0, x17
    // 0x86df20: b.ge            #0x86df34
    // 0x86df24: nop             
    // 0x86df28: r0 = "getBathTub"
    //     0x86df28: add             x0, PP, #0x10, lsl #12  ; [pp+0x104d0] "getBathTub"
    //     0x86df2c: ldr             x0, [x0, #0x4d0]
    // 0x86df30: b               #0x86e058
    // 0x86df34: r17 = 6000
    //     0x86df34: movz            x17, #0x1770
    // 0x86df38: cmp             x0, x17
    // 0x86df3c: b.ge            #0x86df50
    // 0x86df40: nop             
    // 0x86df44: r0 = "getNameTag"
    //     0x86df44: add             x0, PP, #0x10, lsl #12  ; [pp+0x104d8] "getNameTag"
    //     0x86df48: ldr             x0, [x0, #0x4d8]
    // 0x86df4c: b               #0x86e058
    // 0x86df50: r17 = 7200
    //     0x86df50: movz            x17, #0x1c20
    // 0x86df54: cmp             x0, x17
    // 0x86df58: b.ge            #0x86df6c
    // 0x86df5c: nop             
    // 0x86df60: r0 = "get15Token"
    //     0x86df60: add             x0, PP, #0x10, lsl #12  ; [pp+0x104e0] "get15Token"
    //     0x86df64: ldr             x0, [x0, #0x4e0]
    // 0x86df68: b               #0x86e058
    // 0x86df6c: r17 = 7700
    //     0x86df6c: movz            x17, #0x1e14
    // 0x86df70: cmp             x0, x17
    // 0x86df74: b.ge            #0x86df88
    // 0x86df78: nop             
    // 0x86df7c: r0 = "get30Token"
    //     0x86df7c: add             x0, PP, #0x10, lsl #12  ; [pp+0x104e8] "get30Token"
    //     0x86df80: ldr             x0, [x0, #0x4e8]
    // 0x86df84: b               #0x86e058
    // 0x86df88: r17 = 7900
    //     0x86df88: movz            x17, #0x1edc
    // 0x86df8c: cmp             x0, x17
    // 0x86df90: b.ge            #0x86dfa4
    // 0x86df94: nop             
    // 0x86df98: r0 = "get50Token"
    //     0x86df98: add             x0, PP, #0x10, lsl #12  ; [pp+0x104f0] "get50Token"
    //     0x86df9c: ldr             x0, [x0, #0x4f0]
    // 0x86dfa0: b               #0x86e058
    // 0x86dfa4: r17 = 8000
    //     0x86dfa4: movz            x17, #0x1f40
    // 0x86dfa8: cmp             x0, x17
    // 0x86dfac: b.ge            #0x86dfc0
    // 0x86dfb0: nop             
    // 0x86dfb4: r0 = "get100Token"
    //     0x86dfb4: add             x0, PP, #0x10, lsl #12  ; [pp+0x104f8] "get100Token"
    //     0x86dfb8: ldr             x0, [x0, #0x4f8]
    // 0x86dfbc: b               #0x86e058
    // 0x86dfc0: r17 = 9000
    //     0x86dfc0: movz            x17, #0x2328
    // 0x86dfc4: cmp             x0, x17
    // 0x86dfc8: b.gt            #0x86e034
    // 0x86dfcc: nop             
    // 0x86dfd0: r1 = Null
    //     0x86dfd0: mov             x1, NULL
    // 0x86dfd4: r0 = Random()
    //     0x86dfd4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86dfd8: mov             x1, x0
    // 0x86dfdc: r2 = 5
    //     0x86dfdc: movz            x2, #0x5
    // 0x86dfe0: r0 = nextInt()
    //     0x86dfe0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86dfe4: add             x3, x0, #1
    // 0x86dfe8: stur            x3, [fp, #-0x38]
    // 0x86dfec: r1 = Null
    //     0x86dfec: mov             x1, NULL
    // 0x86dff0: r2 = 4
    //     0x86dff0: movz            x2, #0x4
    // 0x86dff4: r0 = AllocateArray()
    //     0x86dff4: bl              #0x1502560  ; AllocateArrayStub
    // 0x86dff8: mov             x2, x0
    // 0x86dffc: r17 = "getShopCard"
    //     0x86dffc: add             x17, PP, #0x10, lsl #12  ; [pp+0x10500] "getShopCard"
    //     0x86e000: ldr             x17, [x17, #0x500]
    // 0x86e004: StoreField: r2->field_f = r17
    //     0x86e004: stur            w17, [x2, #0xf]
    // 0x86e008: ldur            x3, [fp, #-0x38]
    // 0x86e00c: r0 = BoxInt64Instr(r3)
    //     0x86e00c: sbfiz           x0, x3, #1, #0x1f
    //     0x86e010: cmp             x3, x0, asr #1
    //     0x86e014: b.eq            #0x86e024
    //     0x86e018: nop             
    //     0x86e01c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x86e020: stur            x3, [x0, #7]
    // 0x86e024: StoreField: r2->field_13 = r0
    //     0x86e024: stur            w0, [x2, #0x13]
    // 0x86e028: str             x2, [SP]
    // 0x86e02c: r0 = _interpolate()
    //     0x86e02c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x86e030: b               #0x86e058
    // 0x86e034: r17 = 9999
    //     0x86e034: movz            x17, #0x270f
    // 0x86e038: cmp             x0, x17
    // 0x86e03c: b.gt            #0x86e050
    // 0x86e040: nop             
    // 0x86e044: r0 = "getShopGear"
    //     0x86e044: add             x0, PP, #0x10, lsl #12  ; [pp+0x10508] "getShopGear"
    //     0x86e048: ldr             x0, [x0, #0x508]
    // 0x86e04c: b               #0x86e058
    // 0x86e050: r0 = "get5Token"
    //     0x86e050: add             x0, PP, #0x10, lsl #12  ; [pp+0x10510] "get5Token"
    //     0x86e054: ldr             x0, [x0, #0x510]
    // 0x86e058: mov             x4, x0
    // 0x86e05c: stur            x4, [fp, #-8]
    // 0x86e060: r0 = LoadStaticField(0xb54)
    //     0x86e060: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e064: ldr             x0, [x0, #0x16a8]
    // 0x86e068: cmp             w0, NULL
    // 0x86e06c: b.eq            #0x86e0a0
    // 0x86e070: nop             
    // 0x86e074: r17 = 351
    //     0x86e074: movz            x17, #0x15f
    // 0x86e078: ldr             w1, [x0, x17]
    // 0x86e07c: DecompressPointer r1
    //     0x86e07c: add             x1, x1, HEAP, lsl #32
    // 0x86e080: r0 = LoadClassIdInstr(r1)
    //     0x86e080: ldur            x0, [x1, #-1]
    //     0x86e084: ubfx            x0, x0, #0xc, #0x14
    // 0x86e088: mov             x3, x4
    // 0x86e08c: r2 = "tokenCapsule"
    //     0x86e08c: add             x2, PP, #0x10, lsl #12  ; [pp+0x104a8] "tokenCapsule"
    //     0x86e090: ldr             x2, [x2, #0x4a8]
    // 0x86e094: r0 = GDT[cid_x0 + 0x2da]()
    //     0x86e094: add             lr, x0, #0x2da
    //     0x86e098: ldr             lr, [x21, lr, lsl #3]
    //     0x86e09c: blr             lr
    // 0x86e0a0: r1 = Null
    //     0x86e0a0: mov             x1, NULL
    // 0x86e0a4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86e0a4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86e0a8: r0 = syncPlayer()
    //     0x86e0a8: bl              #0x865b88  ; [package:battlecross/method/playerMethod.dart] ::syncPlayer
    // 0x86e0ac: ldur            x0, [fp, #-8]
    // 0x86e0b0: b               #0x8838b4
    // 0x86e0b4: r16 = "legendPackCard"
    //     0x86e0b4: add             x16, PP, #0xf, lsl #12  ; [pp+0xfca8] "legendPackCard"
    //     0x86e0b8: ldr             x16, [x16, #0xca8]
    // 0x86e0bc: ldur            lr, [fp, #-0x28]
    // 0x86e0c0: stp             lr, x16, [SP]
    // 0x86e0c4: r0 = ==()
    //     0x86e0c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e0c8: tbnz            w0, #4, #0x86e194
    // 0x86e0cc: nop             
    // 0x86e0d0: r1 = <CardRarity>
    //     0x86e0d0: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x86e0d4: ldr             x1, [x1, #0x518]
    // 0x86e0d8: r2 = Instance_CardRarity
    //     0x86e0d8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10520] Obj!CardRarity@ec84e1
    //     0x86e0dc: ldr             x2, [x2, #0x520]
    // 0x86e0e0: r0 = _GrowableList._literal1()
    //     0x86e0e0: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x86e0e4: stur            x0, [fp, #-8]
    // 0x86e0e8: r0 = cardList()
    //     0x86e0e8: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x86e0ec: mov             x1, x0
    // 0x86e0f0: ldur            x2, [fp, #-8]
    // 0x86e0f4: r0 = getCardListByRarity()
    //     0x86e0f4: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x86e0f8: mov             x1, x0
    // 0x86e0fc: stur            x0, [fp, #-8]
    // 0x86e100: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86e100: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86e104: r0 = filterUnobtainedCard()
    //     0x86e104: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x86e108: mov             x1, x0
    // 0x86e10c: r0 = isNotEmpty()
    //     0x86e10c: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x86e110: tbnz            w0, #4, #0x86e18c
    // 0x86e114: nop             
    // 0x86e118: r16 = true
    //     0x86e118: add             x16, NULL, #0x20  ; true
    // 0x86e11c: str             x16, [SP]
    // 0x86e120: ldur            x1, [fp, #-8]
    // 0x86e124: r4 = const [0, 0x2, 0x1, 0x1, isIncludeExclusive, 0x1, null]
    //     0x86e124: add             x4, PP, #0x10, lsl #12  ; [pp+0x10528] List(7) [0, 0x2, 0x1, 0x1, "isIncludeExclusive", 0x1, Null]
    //     0x86e128: ldr             x4, [x4, #0x528]
    // 0x86e12c: r0 = filterUnobtainedCard()
    //     0x86e12c: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x86e130: mov             x1, x0
    // 0x86e134: r0 = shuffle()
    //     0x86e134: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86e138: mov             x1, x0
    // 0x86e13c: r0 = first()
    //     0x86e13c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86e140: mov             x3, x0
    // 0x86e144: r2 = Null
    //     0x86e144: mov             x2, NULL
    // 0x86e148: r1 = Null
    //     0x86e148: mov             x1, NULL
    // 0x86e14c: stur            x3, [fp, #-8]
    // 0x86e150: r4 = 59
    //     0x86e150: movz            x4, #0x3b
    // 0x86e154: branchIfSmi(r0, 0x86e164)
    //     0x86e154: tbz             w0, #0, #0x86e164
    //     0x86e158: nop             
    // 0x86e15c: r4 = LoadClassIdInstr(r0)
    //     0x86e15c: ldur            x4, [x0, #-1]
    //     0x86e160: ubfx            x4, x4, #0xc, #0x14
    // 0x86e164: sub             x4, x4, #0x5d
    // 0x86e168: cmp             x4, #1
    // 0x86e16c: b.ls            #0x86e184
    // 0x86e170: nop             
    // 0x86e174: r8 = String
    //     0x86e174: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86e178: r3 = Null
    //     0x86e178: add             x3, PP, #0x10, lsl #12  ; [pp+0x10530] Null
    //     0x86e17c: ldr             x3, [x3, #0x530]
    // 0x86e180: r0 = String()
    //     0x86e180: bl              #0x1523244  ; IsType_String_Stub
    // 0x86e184: ldur            x0, [fp, #-8]
    // 0x86e188: b               #0x8838b4
    // 0x86e18c: r0 = ""
    //     0x86e18c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86e190: b               #0x8838b4
    // 0x86e194: r16 = "legendPackGear"
    //     0x86e194: add             x16, PP, #0xf, lsl #12  ; [pp+0xfcb8] "legendPackGear"
    //     0x86e198: ldr             x16, [x16, #0xcb8]
    // 0x86e19c: ldur            lr, [fp, #-0x28]
    // 0x86e1a0: stp             lr, x16, [SP]
    // 0x86e1a4: r0 = ==()
    //     0x86e1a4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e1a8: tbnz            w0, #4, #0x86e310
    // 0x86e1ac: nop             
    // 0x86e1b0: r0 = racketList()
    //     0x86e1b0: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x86e1b4: stur            x0, [fp, #-8]
    // 0x86e1b8: r0 = shoeList()
    //     0x86e1b8: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x86e1bc: ldur            x1, [fp, #-8]
    // 0x86e1c0: mov             x2, x0
    // 0x86e1c4: r0 = +()
    //     0x86e1c4: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86e1c8: stur            x0, [fp, #-8]
    // 0x86e1cc: r0 = accessoryList()
    //     0x86e1cc: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x86e1d0: ldur            x1, [fp, #-8]
    // 0x86e1d4: mov             x2, x0
    // 0x86e1d8: r0 = +()
    //     0x86e1d8: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86e1dc: mov             x1, x0
    // 0x86e1e0: r0 = shuffle()
    //     0x86e1e0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86e1e4: mov             x1, x0
    // 0x86e1e8: r0 = iterator()
    //     0x86e1e8: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x86e1ec: stur            x0, [fp, #-8]
    // 0x86e1f0: CheckStackOverflow
    //     0x86e1f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x86e1f4: cmp             SP, x16
    //     0x86e1f8: b.ls            #0x8838e8
    //     0x86e1fc: nop             
    // 0x86e200: mov             x1, x0
    // 0x86e204: r0 = moveNext()
    //     0x86e204: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x86e208: tbnz            w0, #4, #0x86e308
    // 0x86e20c: nop             
    // 0x86e210: ldur            x1, [fp, #-8]
    // 0x86e214: r0 = current()
    //     0x86e214: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x86e218: mov             x3, x0
    // 0x86e21c: r2 = Null
    //     0x86e21c: mov             x2, NULL
    // 0x86e220: r1 = Null
    //     0x86e220: mov             x1, NULL
    // 0x86e224: stur            x3, [fp, #-0x10]
    // 0x86e228: r4 = 59
    //     0x86e228: movz            x4, #0x3b
    // 0x86e22c: branchIfSmi(r0, 0x86e23c)
    //     0x86e22c: tbz             w0, #0, #0x86e23c
    //     0x86e230: nop             
    // 0x86e234: r4 = LoadClassIdInstr(r0)
    //     0x86e234: ldur            x4, [x0, #-1]
    //     0x86e238: ubfx            x4, x4, #0xc, #0x14
    // 0x86e23c: sub             x4, x4, #0x5d
    // 0x86e240: cmp             x4, #1
    // 0x86e244: b.ls            #0x86e25c
    // 0x86e248: nop             
    // 0x86e24c: r8 = String
    //     0x86e24c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86e250: r3 = Null
    //     0x86e250: add             x3, PP, #0x10, lsl #12  ; [pp+0x10540] Null
    //     0x86e254: ldr             x3, [x3, #0x540]
    // 0x86e258: r0 = String()
    //     0x86e258: bl              #0x1523244  ; IsType_String_Stub
    // 0x86e25c: ldur            x1, [fp, #-0x10]
    // 0x86e260: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86e260: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86e264: r0 = getGear()
    //     0x86e264: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x86e268: LoadField: r1 = r0->field_1f
    //     0x86e268: ldur            w1, [x0, #0x1f]
    // 0x86e26c: DecompressPointer r1
    //     0x86e26c: add             x1, x1, HEAP, lsl #32
    // 0x86e270: r16 = Instance_GearRarity
    //     0x86e270: add             x16, PP, #0x10, lsl #12  ; [pp+0x10550] Obj!GearRarity@ec8541
    //     0x86e274: ldr             x16, [x16, #0x550]
    // 0x86e278: cmp             w1, w16
    // 0x86e27c: b.ne            #0x86e300
    // 0x86e280: nop             
    // 0x86e284: r0 = LoadStaticField(0xb54)
    //     0x86e284: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e288: ldr             x0, [x0, #0x16a8]
    // 0x86e28c: cmp             w0, NULL
    // 0x86e290: b.ne            #0x86e2a0
    // 0x86e294: nop             
    // 0x86e298: r0 = Null
    //     0x86e298: mov             x0, NULL
    // 0x86e29c: b               #0x86e2c4
    // 0x86e2a0: r17 = 323
    //     0x86e2a0: movz            x17, #0x143
    // 0x86e2a4: ldr             w1, [x0, x17]
    // 0x86e2a8: DecompressPointer r1
    //     0x86e2a8: add             x1, x1, HEAP, lsl #32
    // 0x86e2ac: r0 = LoadClassIdInstr(r1)
    //     0x86e2ac: ldur            x0, [x1, #-1]
    //     0x86e2b0: ubfx            x0, x0, #0xc, #0x14
    // 0x86e2b4: ldur            x2, [fp, #-0x10]
    // 0x86e2b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e2b8: sub             lr, x0, #0xb4
    //     0x86e2bc: ldr             lr, [x21, lr, lsl #3]
    //     0x86e2c0: blr             lr
    // 0x86e2c4: r1 = 59
    //     0x86e2c4: movz            x1, #0x3b
    // 0x86e2c8: branchIfSmi(r0, 0x86e2d8)
    //     0x86e2c8: tbz             w0, #0, #0x86e2d8
    //     0x86e2cc: nop             
    // 0x86e2d0: r1 = LoadClassIdInstr(r0)
    //     0x86e2d0: ldur            x1, [x0, #-1]
    //     0x86e2d4: ubfx            x1, x1, #0xc, #0x14
    // 0x86e2d8: r16 = true
    //     0x86e2d8: add             x16, NULL, #0x20  ; true
    // 0x86e2dc: stp             x16, x0, [SP]
    // 0x86e2e0: mov             x0, x1
    // 0x86e2e4: mov             lr, x0
    // 0x86e2e8: ldr             lr, [x21, lr, lsl #3]
    // 0x86e2ec: blr             lr
    // 0x86e2f0: tbz             w0, #4, #0x86e300
    // 0x86e2f4: nop             
    // 0x86e2f8: ldur            x0, [fp, #-0x10]
    // 0x86e2fc: b               #0x8838b4
    // 0x86e300: ldur            x0, [fp, #-8]
    // 0x86e304: b               #0x86e1f0
    // 0x86e308: r0 = ""
    //     0x86e308: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86e30c: b               #0x8838b4
    // 0x86e310: r16 = "legendPackCard2"
    //     0x86e310: add             x16, PP, #0xf, lsl #12  ; [pp+0xfce8] "legendPackCard2"
    //     0x86e314: ldr             x16, [x16, #0xce8]
    // 0x86e318: ldur            lr, [fp, #-0x28]
    // 0x86e31c: stp             lr, x16, [SP]
    // 0x86e320: r0 = ==()
    //     0x86e320: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e324: tbnz            w0, #4, #0x86e3f0
    // 0x86e328: nop             
    // 0x86e32c: r1 = <CardRarity>
    //     0x86e32c: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x86e330: ldr             x1, [x1, #0x518]
    // 0x86e334: r2 = Instance_CardRarity
    //     0x86e334: add             x2, PP, #0x10, lsl #12  ; [pp+0x10558] Obj!CardRarity@ec84c1
    //     0x86e338: ldr             x2, [x2, #0x558]
    // 0x86e33c: r0 = _GrowableList._literal1()
    //     0x86e33c: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x86e340: stur            x0, [fp, #-8]
    // 0x86e344: r0 = cardList()
    //     0x86e344: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x86e348: mov             x1, x0
    // 0x86e34c: ldur            x2, [fp, #-8]
    // 0x86e350: r0 = getCardListByRarity()
    //     0x86e350: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x86e354: mov             x1, x0
    // 0x86e358: stur            x0, [fp, #-8]
    // 0x86e35c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86e35c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86e360: r0 = filterUnobtainedCard()
    //     0x86e360: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x86e364: mov             x1, x0
    // 0x86e368: r0 = isNotEmpty()
    //     0x86e368: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x86e36c: tbnz            w0, #4, #0x86e3e8
    // 0x86e370: nop             
    // 0x86e374: r16 = true
    //     0x86e374: add             x16, NULL, #0x20  ; true
    // 0x86e378: str             x16, [SP]
    // 0x86e37c: ldur            x1, [fp, #-8]
    // 0x86e380: r4 = const [0, 0x2, 0x1, 0x1, isIncludeExclusive, 0x1, null]
    //     0x86e380: add             x4, PP, #0x10, lsl #12  ; [pp+0x10528] List(7) [0, 0x2, 0x1, 0x1, "isIncludeExclusive", 0x1, Null]
    //     0x86e384: ldr             x4, [x4, #0x528]
    // 0x86e388: r0 = filterUnobtainedCard()
    //     0x86e388: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x86e38c: mov             x1, x0
    // 0x86e390: r0 = shuffle()
    //     0x86e390: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86e394: mov             x1, x0
    // 0x86e398: r0 = first()
    //     0x86e398: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86e39c: mov             x3, x0
    // 0x86e3a0: r2 = Null
    //     0x86e3a0: mov             x2, NULL
    // 0x86e3a4: r1 = Null
    //     0x86e3a4: mov             x1, NULL
    // 0x86e3a8: stur            x3, [fp, #-8]
    // 0x86e3ac: r4 = 59
    //     0x86e3ac: movz            x4, #0x3b
    // 0x86e3b0: branchIfSmi(r0, 0x86e3c0)
    //     0x86e3b0: tbz             w0, #0, #0x86e3c0
    //     0x86e3b4: nop             
    // 0x86e3b8: r4 = LoadClassIdInstr(r0)
    //     0x86e3b8: ldur            x4, [x0, #-1]
    //     0x86e3bc: ubfx            x4, x4, #0xc, #0x14
    // 0x86e3c0: sub             x4, x4, #0x5d
    // 0x86e3c4: cmp             x4, #1
    // 0x86e3c8: b.ls            #0x86e3e0
    // 0x86e3cc: nop             
    // 0x86e3d0: r8 = String
    //     0x86e3d0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86e3d4: r3 = Null
    //     0x86e3d4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10560] Null
    //     0x86e3d8: ldr             x3, [x3, #0x560]
    // 0x86e3dc: r0 = String()
    //     0x86e3dc: bl              #0x1523244  ; IsType_String_Stub
    // 0x86e3e0: ldur            x0, [fp, #-8]
    // 0x86e3e4: b               #0x8838b4
    // 0x86e3e8: r0 = ""
    //     0x86e3e8: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86e3ec: b               #0x8838b4
    // 0x86e3f0: r16 = "legendPackGear2"
    //     0x86e3f0: add             x16, PP, #0xf, lsl #12  ; [pp+0xfcf0] "legendPackGear2"
    //     0x86e3f4: ldr             x16, [x16, #0xcf0]
    // 0x86e3f8: ldur            lr, [fp, #-0x28]
    // 0x86e3fc: stp             lr, x16, [SP]
    // 0x86e400: r0 = ==()
    //     0x86e400: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e404: tbnz            w0, #4, #0x86e56c
    // 0x86e408: nop             
    // 0x86e40c: r0 = racketList()
    //     0x86e40c: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x86e410: stur            x0, [fp, #-8]
    // 0x86e414: r0 = shoeList()
    //     0x86e414: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x86e418: ldur            x1, [fp, #-8]
    // 0x86e41c: mov             x2, x0
    // 0x86e420: r0 = +()
    //     0x86e420: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86e424: stur            x0, [fp, #-8]
    // 0x86e428: r0 = accessoryList()
    //     0x86e428: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x86e42c: ldur            x1, [fp, #-8]
    // 0x86e430: mov             x2, x0
    // 0x86e434: r0 = +()
    //     0x86e434: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86e438: mov             x1, x0
    // 0x86e43c: r0 = shuffle()
    //     0x86e43c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86e440: mov             x1, x0
    // 0x86e444: r0 = iterator()
    //     0x86e444: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x86e448: stur            x0, [fp, #-8]
    // 0x86e44c: CheckStackOverflow
    //     0x86e44c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x86e450: cmp             SP, x16
    //     0x86e454: b.ls            #0x8838f0
    //     0x86e458: nop             
    // 0x86e45c: mov             x1, x0
    // 0x86e460: r0 = moveNext()
    //     0x86e460: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x86e464: tbnz            w0, #4, #0x86e564
    // 0x86e468: nop             
    // 0x86e46c: ldur            x1, [fp, #-8]
    // 0x86e470: r0 = current()
    //     0x86e470: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x86e474: mov             x3, x0
    // 0x86e478: r2 = Null
    //     0x86e478: mov             x2, NULL
    // 0x86e47c: r1 = Null
    //     0x86e47c: mov             x1, NULL
    // 0x86e480: stur            x3, [fp, #-0x10]
    // 0x86e484: r4 = 59
    //     0x86e484: movz            x4, #0x3b
    // 0x86e488: branchIfSmi(r0, 0x86e498)
    //     0x86e488: tbz             w0, #0, #0x86e498
    //     0x86e48c: nop             
    // 0x86e490: r4 = LoadClassIdInstr(r0)
    //     0x86e490: ldur            x4, [x0, #-1]
    //     0x86e494: ubfx            x4, x4, #0xc, #0x14
    // 0x86e498: sub             x4, x4, #0x5d
    // 0x86e49c: cmp             x4, #1
    // 0x86e4a0: b.ls            #0x86e4b8
    // 0x86e4a4: nop             
    // 0x86e4a8: r8 = String
    //     0x86e4a8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86e4ac: r3 = Null
    //     0x86e4ac: add             x3, PP, #0x10, lsl #12  ; [pp+0x10570] Null
    //     0x86e4b0: ldr             x3, [x3, #0x570]
    // 0x86e4b4: r0 = String()
    //     0x86e4b4: bl              #0x1523244  ; IsType_String_Stub
    // 0x86e4b8: ldur            x1, [fp, #-0x10]
    // 0x86e4bc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86e4bc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86e4c0: r0 = getGear()
    //     0x86e4c0: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x86e4c4: LoadField: r1 = r0->field_1f
    //     0x86e4c4: ldur            w1, [x0, #0x1f]
    // 0x86e4c8: DecompressPointer r1
    //     0x86e4c8: add             x1, x1, HEAP, lsl #32
    // 0x86e4cc: r16 = Instance_GearRarity
    //     0x86e4cc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10580] Obj!GearRarity@ec85a1
    //     0x86e4d0: ldr             x16, [x16, #0x580]
    // 0x86e4d4: cmp             w1, w16
    // 0x86e4d8: b.ne            #0x86e55c
    // 0x86e4dc: nop             
    // 0x86e4e0: r0 = LoadStaticField(0xb54)
    //     0x86e4e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e4e4: ldr             x0, [x0, #0x16a8]
    // 0x86e4e8: cmp             w0, NULL
    // 0x86e4ec: b.ne            #0x86e4fc
    // 0x86e4f0: nop             
    // 0x86e4f4: r0 = Null
    //     0x86e4f4: mov             x0, NULL
    // 0x86e4f8: b               #0x86e520
    // 0x86e4fc: r17 = 323
    //     0x86e4fc: movz            x17, #0x143
    // 0x86e500: ldr             w1, [x0, x17]
    // 0x86e504: DecompressPointer r1
    //     0x86e504: add             x1, x1, HEAP, lsl #32
    // 0x86e508: r0 = LoadClassIdInstr(r1)
    //     0x86e508: ldur            x0, [x1, #-1]
    //     0x86e50c: ubfx            x0, x0, #0xc, #0x14
    // 0x86e510: ldur            x2, [fp, #-0x10]
    // 0x86e514: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e514: sub             lr, x0, #0xb4
    //     0x86e518: ldr             lr, [x21, lr, lsl #3]
    //     0x86e51c: blr             lr
    // 0x86e520: r1 = 59
    //     0x86e520: movz            x1, #0x3b
    // 0x86e524: branchIfSmi(r0, 0x86e534)
    //     0x86e524: tbz             w0, #0, #0x86e534
    //     0x86e528: nop             
    // 0x86e52c: r1 = LoadClassIdInstr(r0)
    //     0x86e52c: ldur            x1, [x0, #-1]
    //     0x86e530: ubfx            x1, x1, #0xc, #0x14
    // 0x86e534: r16 = true
    //     0x86e534: add             x16, NULL, #0x20  ; true
    // 0x86e538: stp             x16, x0, [SP]
    // 0x86e53c: mov             x0, x1
    // 0x86e540: mov             lr, x0
    // 0x86e544: ldr             lr, [x21, lr, lsl #3]
    // 0x86e548: blr             lr
    // 0x86e54c: tbz             w0, #4, #0x86e55c
    // 0x86e550: nop             
    // 0x86e554: ldur            x0, [fp, #-0x10]
    // 0x86e558: b               #0x8838b4
    // 0x86e55c: ldur            x0, [fp, #-8]
    // 0x86e560: b               #0x86e44c
    // 0x86e564: r0 = ""
    //     0x86e564: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x86e568: b               #0x8838b4
    // 0x86e56c: r16 = "dahliaTrain"
    //     0x86e56c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10588] "dahliaTrain"
    //     0x86e570: ldr             x16, [x16, #0x588]
    // 0x86e574: ldur            lr, [fp, #-0x28]
    // 0x86e578: stp             lr, x16, [SP]
    // 0x86e57c: r0 = ==()
    //     0x86e57c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e580: tbnz            w0, #4, #0x86e65c
    // 0x86e584: nop             
    // 0x86e588: r0 = LoadStaticField(0xb54)
    //     0x86e588: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e58c: ldr             x0, [x0, #0x16a8]
    // 0x86e590: cmp             w0, NULL
    // 0x86e594: b.ne            #0x86e5a4
    // 0x86e598: nop             
    // 0x86e59c: r0 = Null
    //     0x86e59c: mov             x0, NULL
    // 0x86e5a0: b               #0x86e5cc
    // 0x86e5a4: r17 = 339
    //     0x86e5a4: movz            x17, #0x153
    // 0x86e5a8: ldr             w1, [x0, x17]
    // 0x86e5ac: DecompressPointer r1
    //     0x86e5ac: add             x1, x1, HEAP, lsl #32
    // 0x86e5b0: r0 = LoadClassIdInstr(r1)
    //     0x86e5b0: ldur            x0, [x1, #-1]
    //     0x86e5b4: ubfx            x0, x0, #0xc, #0x14
    // 0x86e5b8: r2 = "energydrink"
    //     0x86e5b8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10590] "energydrink"
    //     0x86e5bc: ldr             x2, [x2, #0x590]
    // 0x86e5c0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e5c0: sub             lr, x0, #0xb4
    //     0x86e5c4: ldr             lr, [x21, lr, lsl #3]
    //     0x86e5c8: blr             lr
    // 0x86e5cc: cmp             w0, NULL
    // 0x86e5d0: b.ne            #0x86e5e0
    // 0x86e5d4: nop             
    // 0x86e5d8: r3 = 0
    //     0x86e5d8: movz            x3, #0
    // 0x86e5dc: b               #0x86e5e4
    // 0x86e5e0: mov             x3, x0
    // 0x86e5e4: mov             x0, x3
    // 0x86e5e8: stur            x3, [fp, #-8]
    // 0x86e5ec: r2 = Null
    //     0x86e5ec: mov             x2, NULL
    // 0x86e5f0: r1 = Null
    //     0x86e5f0: mov             x1, NULL
    // 0x86e5f4: branchIfSmi(r0, 0x86e624)
    //     0x86e5f4: tbz             w0, #0, #0x86e624
    //     0x86e5f8: nop             
    // 0x86e5fc: r4 = LoadClassIdInstr(r0)
    //     0x86e5fc: ldur            x4, [x0, #-1]
    //     0x86e600: ubfx            x4, x4, #0xc, #0x14
    // 0x86e604: sub             x4, x4, #0x3b
    // 0x86e608: cmp             x4, #1
    // 0x86e60c: b.ls            #0x86e624
    // 0x86e610: nop             
    // 0x86e614: r8 = int
    //     0x86e614: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86e618: r3 = Null
    //     0x86e618: add             x3, PP, #0x10, lsl #12  ; [pp+0x10598] Null
    //     0x86e61c: ldr             x3, [x3, #0x598]
    // 0x86e620: r0 = int()
    //     0x86e620: bl              #0x1524294  ; IsType_int_Stub
    // 0x86e624: ldur            x0, [fp, #-8]
    // 0x86e628: r1 = LoadInt32Instr(r0)
    //     0x86e628: sbfx            x1, x0, #1, #0x1f
    //     0x86e62c: tbz             w0, #0, #0x86e638
    //     0x86e630: nop             
    //     0x86e634: ldur            x1, [x0, #7]
    // 0x86e638: cmp             x1, #5
    // 0x86e63c: b.lt            #0x86e650
    // 0x86e640: nop             
    // 0x86e644: r0 = "trainYes"
    //     0x86e644: add             x0, PP, #0x10, lsl #12  ; [pp+0x105a8] "trainYes"
    //     0x86e648: ldr             x0, [x0, #0x5a8]
    // 0x86e64c: b               #0x8838b4
    // 0x86e650: r0 = "noEnoughDrink"
    //     0x86e650: add             x0, PP, #0x10, lsl #12  ; [pp+0x105b0] "noEnoughDrink"
    //     0x86e654: ldr             x0, [x0, #0x5b0]
    // 0x86e658: b               #0x8838b4
    // 0x86e65c: r16 = "buy9EnergyDrink"
    //     0x86e65c: add             x16, PP, #0x10, lsl #12  ; [pp+0x105b8] "buy9EnergyDrink"
    //     0x86e660: ldr             x16, [x16, #0x5b8]
    // 0x86e664: ldur            lr, [fp, #-0x28]
    // 0x86e668: stp             lr, x16, [SP]
    // 0x86e66c: r0 = ==()
    //     0x86e66c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e670: tbnz            w0, #4, #0x86e74c
    // 0x86e674: nop             
    // 0x86e678: r0 = LoadStaticField(0xb54)
    //     0x86e678: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e67c: ldr             x0, [x0, #0x16a8]
    // 0x86e680: cmp             w0, NULL
    // 0x86e684: b.ne            #0x86e694
    // 0x86e688: nop             
    // 0x86e68c: r0 = Null
    //     0x86e68c: mov             x0, NULL
    // 0x86e690: b               #0x86e6bc
    // 0x86e694: r17 = 347
    //     0x86e694: movz            x17, #0x15b
    // 0x86e698: ldr             w1, [x0, x17]
    // 0x86e69c: DecompressPointer r1
    //     0x86e69c: add             x1, x1, HEAP, lsl #32
    // 0x86e6a0: r0 = LoadClassIdInstr(r1)
    //     0x86e6a0: ldur            x0, [x1, #-1]
    //     0x86e6a4: ubfx            x0, x0, #0xc, #0x14
    // 0x86e6a8: r2 = "token"
    //     0x86e6a8: add             x2, PP, #0x10, lsl #12  ; [pp+0x105c0] "token"
    //     0x86e6ac: ldr             x2, [x2, #0x5c0]
    // 0x86e6b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e6b0: sub             lr, x0, #0xb4
    //     0x86e6b4: ldr             lr, [x21, lr, lsl #3]
    //     0x86e6b8: blr             lr
    // 0x86e6bc: cmp             w0, NULL
    // 0x86e6c0: b.ne            #0x86e6d0
    // 0x86e6c4: nop             
    // 0x86e6c8: r3 = 0
    //     0x86e6c8: movz            x3, #0
    // 0x86e6cc: b               #0x86e6d4
    // 0x86e6d0: mov             x3, x0
    // 0x86e6d4: mov             x0, x3
    // 0x86e6d8: stur            x3, [fp, #-8]
    // 0x86e6dc: r2 = Null
    //     0x86e6dc: mov             x2, NULL
    // 0x86e6e0: r1 = Null
    //     0x86e6e0: mov             x1, NULL
    // 0x86e6e4: branchIfSmi(r0, 0x86e714)
    //     0x86e6e4: tbz             w0, #0, #0x86e714
    //     0x86e6e8: nop             
    // 0x86e6ec: r4 = LoadClassIdInstr(r0)
    //     0x86e6ec: ldur            x4, [x0, #-1]
    //     0x86e6f0: ubfx            x4, x4, #0xc, #0x14
    // 0x86e6f4: sub             x4, x4, #0x3b
    // 0x86e6f8: cmp             x4, #1
    // 0x86e6fc: b.ls            #0x86e714
    // 0x86e700: nop             
    // 0x86e704: r8 = int
    //     0x86e704: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86e708: r3 = Null
    //     0x86e708: add             x3, PP, #0x10, lsl #12  ; [pp+0x105c8] Null
    //     0x86e70c: ldr             x3, [x3, #0x5c8]
    // 0x86e710: r0 = int()
    //     0x86e710: bl              #0x1524294  ; IsType_int_Stub
    // 0x86e714: ldur            x0, [fp, #-8]
    // 0x86e718: r1 = LoadInt32Instr(r0)
    //     0x86e718: sbfx            x1, x0, #1, #0x1f
    //     0x86e71c: tbz             w0, #0, #0x86e728
    //     0x86e720: nop             
    //     0x86e724: ldur            x1, [x0, #7]
    // 0x86e728: cmp             x1, #0x64
    // 0x86e72c: b.lt            #0x86e740
    // 0x86e730: nop             
    // 0x86e734: r0 = "buy"
    //     0x86e734: add             x0, PP, #0x10, lsl #12  ; [pp+0x105d8] "buy"
    //     0x86e738: ldr             x0, [x0, #0x5d8]
    // 0x86e73c: b               #0x8838b4
    // 0x86e740: r0 = "noMoney"
    //     0x86e740: add             x0, PP, #0x10, lsl #12  ; [pp+0x105e0] "noMoney"
    //     0x86e744: ldr             x0, [x0, #0x5e0]
    // 0x86e748: b               #0x8838b4
    // 0x86e74c: r16 = "check100T"
    //     0x86e74c: add             x16, PP, #0x10, lsl #12  ; [pp+0x105e8] "check100T"
    //     0x86e750: ldr             x16, [x16, #0x5e8]
    // 0x86e754: ldur            lr, [fp, #-0x28]
    // 0x86e758: stp             lr, x16, [SP]
    // 0x86e75c: r0 = ==()
    //     0x86e75c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e760: tbnz            w0, #4, #0x86e83c
    // 0x86e764: nop             
    // 0x86e768: r0 = LoadStaticField(0xb54)
    //     0x86e768: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e76c: ldr             x0, [x0, #0x16a8]
    // 0x86e770: cmp             w0, NULL
    // 0x86e774: b.ne            #0x86e784
    // 0x86e778: nop             
    // 0x86e77c: r0 = Null
    //     0x86e77c: mov             x0, NULL
    // 0x86e780: b               #0x86e7ac
    // 0x86e784: r17 = 347
    //     0x86e784: movz            x17, #0x15b
    // 0x86e788: ldr             w1, [x0, x17]
    // 0x86e78c: DecompressPointer r1
    //     0x86e78c: add             x1, x1, HEAP, lsl #32
    // 0x86e790: r0 = LoadClassIdInstr(r1)
    //     0x86e790: ldur            x0, [x1, #-1]
    //     0x86e794: ubfx            x0, x0, #0xc, #0x14
    // 0x86e798: r2 = "token"
    //     0x86e798: add             x2, PP, #0x10, lsl #12  ; [pp+0x105c0] "token"
    //     0x86e79c: ldr             x2, [x2, #0x5c0]
    // 0x86e7a0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e7a0: sub             lr, x0, #0xb4
    //     0x86e7a4: ldr             lr, [x21, lr, lsl #3]
    //     0x86e7a8: blr             lr
    // 0x86e7ac: cmp             w0, NULL
    // 0x86e7b0: b.ne            #0x86e7c0
    // 0x86e7b4: nop             
    // 0x86e7b8: r3 = 0
    //     0x86e7b8: movz            x3, #0
    // 0x86e7bc: b               #0x86e7c4
    // 0x86e7c0: mov             x3, x0
    // 0x86e7c4: mov             x0, x3
    // 0x86e7c8: stur            x3, [fp, #-8]
    // 0x86e7cc: r2 = Null
    //     0x86e7cc: mov             x2, NULL
    // 0x86e7d0: r1 = Null
    //     0x86e7d0: mov             x1, NULL
    // 0x86e7d4: branchIfSmi(r0, 0x86e804)
    //     0x86e7d4: tbz             w0, #0, #0x86e804
    //     0x86e7d8: nop             
    // 0x86e7dc: r4 = LoadClassIdInstr(r0)
    //     0x86e7dc: ldur            x4, [x0, #-1]
    //     0x86e7e0: ubfx            x4, x4, #0xc, #0x14
    // 0x86e7e4: sub             x4, x4, #0x3b
    // 0x86e7e8: cmp             x4, #1
    // 0x86e7ec: b.ls            #0x86e804
    // 0x86e7f0: nop             
    // 0x86e7f4: r8 = int
    //     0x86e7f4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86e7f8: r3 = Null
    //     0x86e7f8: add             x3, PP, #0x10, lsl #12  ; [pp+0x105f0] Null
    //     0x86e7fc: ldr             x3, [x3, #0x5f0]
    // 0x86e800: r0 = int()
    //     0x86e800: bl              #0x1524294  ; IsType_int_Stub
    // 0x86e804: ldur            x0, [fp, #-8]
    // 0x86e808: r1 = LoadInt32Instr(r0)
    //     0x86e808: sbfx            x1, x0, #1, #0x1f
    //     0x86e80c: tbz             w0, #0, #0x86e818
    //     0x86e810: nop             
    //     0x86e814: ldur            x1, [x0, #7]
    // 0x86e818: cmp             x1, #0x64
    // 0x86e81c: b.lt            #0x86e830
    // 0x86e820: nop             
    // 0x86e824: r0 = "token"
    //     0x86e824: add             x0, PP, #0x10, lsl #12  ; [pp+0x105c0] "token"
    //     0x86e828: ldr             x0, [x0, #0x5c0]
    // 0x86e82c: b               #0x8838b4
    // 0x86e830: r0 = "noEnoughToken"
    //     0x86e830: add             x0, PP, #0x10, lsl #12  ; [pp+0x10600] "noEnoughToken"
    //     0x86e834: ldr             x0, [x0, #0x600]
    // 0x86e838: b               #0x8838b4
    // 0x86e83c: r16 = "buy9ATM"
    //     0x86e83c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10608] "buy9ATM"
    //     0x86e840: ldr             x16, [x16, #0x608]
    // 0x86e844: ldur            lr, [fp, #-0x28]
    // 0x86e848: stp             lr, x16, [SP]
    // 0x86e84c: r0 = ==()
    //     0x86e84c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e850: tbnz            w0, #4, #0x86e92c
    // 0x86e854: nop             
    // 0x86e858: r0 = LoadStaticField(0xb54)
    //     0x86e858: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e85c: ldr             x0, [x0, #0x16a8]
    // 0x86e860: cmp             w0, NULL
    // 0x86e864: b.ne            #0x86e874
    // 0x86e868: nop             
    // 0x86e86c: r0 = Null
    //     0x86e86c: mov             x0, NULL
    // 0x86e870: b               #0x86e89c
    // 0x86e874: r17 = 347
    //     0x86e874: movz            x17, #0x15b
    // 0x86e878: ldr             w1, [x0, x17]
    // 0x86e87c: DecompressPointer r1
    //     0x86e87c: add             x1, x1, HEAP, lsl #32
    // 0x86e880: r0 = LoadClassIdInstr(r1)
    //     0x86e880: ldur            x0, [x1, #-1]
    //     0x86e884: ubfx            x0, x0, #0xc, #0x14
    // 0x86e888: r2 = "token"
    //     0x86e888: add             x2, PP, #0x10, lsl #12  ; [pp+0x105c0] "token"
    //     0x86e88c: ldr             x2, [x2, #0x5c0]
    // 0x86e890: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e890: sub             lr, x0, #0xb4
    //     0x86e894: ldr             lr, [x21, lr, lsl #3]
    //     0x86e898: blr             lr
    // 0x86e89c: cmp             w0, NULL
    // 0x86e8a0: b.ne            #0x86e8b0
    // 0x86e8a4: nop             
    // 0x86e8a8: r3 = 0
    //     0x86e8a8: movz            x3, #0
    // 0x86e8ac: b               #0x86e8b4
    // 0x86e8b0: mov             x3, x0
    // 0x86e8b4: mov             x0, x3
    // 0x86e8b8: stur            x3, [fp, #-8]
    // 0x86e8bc: r2 = Null
    //     0x86e8bc: mov             x2, NULL
    // 0x86e8c0: r1 = Null
    //     0x86e8c0: mov             x1, NULL
    // 0x86e8c4: branchIfSmi(r0, 0x86e8f4)
    //     0x86e8c4: tbz             w0, #0, #0x86e8f4
    //     0x86e8c8: nop             
    // 0x86e8cc: r4 = LoadClassIdInstr(r0)
    //     0x86e8cc: ldur            x4, [x0, #-1]
    //     0x86e8d0: ubfx            x4, x4, #0xc, #0x14
    // 0x86e8d4: sub             x4, x4, #0x3b
    // 0x86e8d8: cmp             x4, #1
    // 0x86e8dc: b.ls            #0x86e8f4
    // 0x86e8e0: nop             
    // 0x86e8e4: r8 = int
    //     0x86e8e4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86e8e8: r3 = Null
    //     0x86e8e8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10610] Null
    //     0x86e8ec: ldr             x3, [x3, #0x610]
    // 0x86e8f0: r0 = int()
    //     0x86e8f0: bl              #0x1524294  ; IsType_int_Stub
    // 0x86e8f4: ldur            x0, [fp, #-8]
    // 0x86e8f8: r1 = LoadInt32Instr(r0)
    //     0x86e8f8: sbfx            x1, x0, #1, #0x1f
    //     0x86e8fc: tbz             w0, #0, #0x86e908
    //     0x86e900: nop             
    //     0x86e904: ldur            x1, [x0, #7]
    // 0x86e908: cmp             x1, #0x64
    // 0x86e90c: b.lt            #0x86e920
    // 0x86e910: nop             
    // 0x86e914: r0 = "buy"
    //     0x86e914: add             x0, PP, #0x10, lsl #12  ; [pp+0x105d8] "buy"
    //     0x86e918: ldr             x0, [x0, #0x5d8]
    // 0x86e91c: b               #0x8838b4
    // 0x86e920: r0 = "noMoney"
    //     0x86e920: add             x0, PP, #0x10, lsl #12  ; [pp+0x105e0] "noMoney"
    //     0x86e924: ldr             x0, [x0, #0x5e0]
    // 0x86e928: b               #0x8838b4
    // 0x86e92c: r16 = "9snack9sack"
    //     0x86e92c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10620] "9snack9sack"
    //     0x86e930: ldr             x16, [x16, #0x620]
    // 0x86e934: ldur            lr, [fp, #-0x28]
    // 0x86e938: stp             lr, x16, [SP]
    // 0x86e93c: r0 = ==()
    //     0x86e93c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86e940: tbnz            w0, #4, #0x86eadc
    // 0x86e944: nop             
    // 0x86e948: r0 = LoadStaticField(0xb54)
    //     0x86e948: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e94c: ldr             x0, [x0, #0x16a8]
    // 0x86e950: cmp             w0, NULL
    // 0x86e954: b.ne            #0x86e964
    // 0x86e958: nop             
    // 0x86e95c: r0 = Null
    //     0x86e95c: mov             x0, NULL
    // 0x86e960: b               #0x86e98c
    // 0x86e964: r17 = 339
    //     0x86e964: movz            x17, #0x153
    // 0x86e968: ldr             w1, [x0, x17]
    // 0x86e96c: DecompressPointer r1
    //     0x86e96c: add             x1, x1, HEAP, lsl #32
    // 0x86e970: r0 = LoadClassIdInstr(r1)
    //     0x86e970: ldur            x0, [x1, #-1]
    //     0x86e974: ubfx            x0, x0, #0xc, #0x14
    // 0x86e978: r2 = "moneysack"
    //     0x86e978: add             x2, PP, #0x10, lsl #12  ; [pp+0x10628] "moneysack"
    //     0x86e97c: ldr             x2, [x2, #0x628]
    // 0x86e980: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86e980: sub             lr, x0, #0xb4
    //     0x86e984: ldr             lr, [x21, lr, lsl #3]
    //     0x86e988: blr             lr
    // 0x86e98c: cmp             w0, NULL
    // 0x86e990: b.ne            #0x86e9a0
    // 0x86e994: nop             
    // 0x86e998: r3 = 0
    //     0x86e998: movz            x3, #0
    // 0x86e99c: b               #0x86e9a4
    // 0x86e9a0: mov             x3, x0
    // 0x86e9a4: mov             x0, x3
    // 0x86e9a8: stur            x3, [fp, #-8]
    // 0x86e9ac: r2 = Null
    //     0x86e9ac: mov             x2, NULL
    // 0x86e9b0: r1 = Null
    //     0x86e9b0: mov             x1, NULL
    // 0x86e9b4: branchIfSmi(r0, 0x86e9e4)
    //     0x86e9b4: tbz             w0, #0, #0x86e9e4
    //     0x86e9b8: nop             
    // 0x86e9bc: r4 = LoadClassIdInstr(r0)
    //     0x86e9bc: ldur            x4, [x0, #-1]
    //     0x86e9c0: ubfx            x4, x4, #0xc, #0x14
    // 0x86e9c4: sub             x4, x4, #0x3b
    // 0x86e9c8: cmp             x4, #1
    // 0x86e9cc: b.ls            #0x86e9e4
    // 0x86e9d0: nop             
    // 0x86e9d4: r8 = int
    //     0x86e9d4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86e9d8: r3 = Null
    //     0x86e9d8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10630] Null
    //     0x86e9dc: ldr             x3, [x3, #0x630]
    // 0x86e9e0: r0 = int()
    //     0x86e9e0: bl              #0x1524294  ; IsType_int_Stub
    // 0x86e9e4: r0 = LoadStaticField(0xb54)
    //     0x86e9e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86e9e8: ldr             x0, [x0, #0x16a8]
    // 0x86e9ec: cmp             w0, NULL
    // 0x86e9f0: b.ne            #0x86ea00
    // 0x86e9f4: nop             
    // 0x86e9f8: r0 = Null
    //     0x86e9f8: mov             x0, NULL
    // 0x86e9fc: b               #0x86ea28
    // 0x86ea00: r17 = 339
    //     0x86ea00: movz            x17, #0x153
    // 0x86ea04: ldr             w1, [x0, x17]
    // 0x86ea08: DecompressPointer r1
    //     0x86ea08: add             x1, x1, HEAP, lsl #32
    // 0x86ea0c: r0 = LoadClassIdInstr(r1)
    //     0x86ea0c: ldur            x0, [x1, #-1]
    //     0x86ea10: ubfx            x0, x0, #0xc, #0x14
    // 0x86ea14: r2 = "expsnack"
    //     0x86ea14: add             x2, PP, #0x10, lsl #12  ; [pp+0x10640] "expsnack"
    //     0x86ea18: ldr             x2, [x2, #0x640]
    // 0x86ea1c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ea1c: sub             lr, x0, #0xb4
    //     0x86ea20: ldr             lr, [x21, lr, lsl #3]
    //     0x86ea24: blr             lr
    // 0x86ea28: cmp             w0, NULL
    // 0x86ea2c: b.ne            #0x86ea3c
    // 0x86ea30: nop             
    // 0x86ea34: r4 = 0
    //     0x86ea34: movz            x4, #0
    // 0x86ea38: b               #0x86ea40
    // 0x86ea3c: mov             x4, x0
    // 0x86ea40: ldur            x3, [fp, #-8]
    // 0x86ea44: mov             x0, x4
    // 0x86ea48: stur            x4, [fp, #-0x10]
    // 0x86ea4c: r2 = Null
    //     0x86ea4c: mov             x2, NULL
    // 0x86ea50: r1 = Null
    //     0x86ea50: mov             x1, NULL
    // 0x86ea54: branchIfSmi(r0, 0x86ea84)
    //     0x86ea54: tbz             w0, #0, #0x86ea84
    //     0x86ea58: nop             
    // 0x86ea5c: r4 = LoadClassIdInstr(r0)
    //     0x86ea5c: ldur            x4, [x0, #-1]
    //     0x86ea60: ubfx            x4, x4, #0xc, #0x14
    // 0x86ea64: sub             x4, x4, #0x3b
    // 0x86ea68: cmp             x4, #1
    // 0x86ea6c: b.ls            #0x86ea84
    // 0x86ea70: nop             
    // 0x86ea74: r8 = int
    //     0x86ea74: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86ea78: r3 = Null
    //     0x86ea78: add             x3, PP, #0x10, lsl #12  ; [pp+0x10648] Null
    //     0x86ea7c: ldr             x3, [x3, #0x648]
    // 0x86ea80: r0 = int()
    //     0x86ea80: bl              #0x1524294  ; IsType_int_Stub
    // 0x86ea84: ldur            x0, [fp, #-8]
    // 0x86ea88: r1 = LoadInt32Instr(r0)
    //     0x86ea88: sbfx            x1, x0, #1, #0x1f
    //     0x86ea8c: tbz             w0, #0, #0x86ea98
    //     0x86ea90: nop             
    //     0x86ea94: ldur            x1, [x0, #7]
    // 0x86ea98: cmp             x1, #9
    // 0x86ea9c: b.lt            #0x86ead0
    // 0x86eaa0: nop             
    // 0x86eaa4: ldur            x0, [fp, #-0x10]
    // 0x86eaa8: r1 = LoadInt32Instr(r0)
    //     0x86eaa8: sbfx            x1, x0, #1, #0x1f
    //     0x86eaac: tbz             w0, #0, #0x86eab8
    //     0x86eab0: nop             
    //     0x86eab4: ldur            x1, [x0, #7]
    // 0x86eab8: cmp             x1, #9
    // 0x86eabc: b.lt            #0x86ead0
    // 0x86eac0: nop             
    // 0x86eac4: r0 = "9snack9sack"
    //     0x86eac4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10620] "9snack9sack"
    //     0x86eac8: ldr             x0, [x0, #0x620]
    // 0x86eacc: b               #0x8838b4
    // 0x86ead0: r0 = "noEnough"
    //     0x86ead0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10658] "noEnough"
    //     0x86ead4: ldr             x0, [x0, #0x658]
    // 0x86ead8: b               #0x8838b4
    // 0x86eadc: r16 = "9snack9sackgear"
    //     0x86eadc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10660] "9snack9sackgear"
    //     0x86eae0: ldr             x16, [x16, #0x660]
    // 0x86eae4: ldur            lr, [fp, #-0x28]
    // 0x86eae8: stp             lr, x16, [SP]
    // 0x86eaec: r0 = ==()
    //     0x86eaec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86eaf0: tbnz            w0, #4, #0x86ece8
    // 0x86eaf4: nop             
    // 0x86eaf8: r4 = const [0, 0, 0, 0, null]
    //     0x86eaf8: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x86eafc: r0 = getTotalUnlockedCards()
    //     0x86eafc: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x86eb00: mov             x3, x0
    // 0x86eb04: stur            x3, [fp, #-0x38]
    // 0x86eb08: r0 = LoadStaticField(0xb54)
    //     0x86eb08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86eb0c: ldr             x0, [x0, #0x16a8]
    // 0x86eb10: cmp             w0, NULL
    // 0x86eb14: b.ne            #0x86eb28
    // 0x86eb18: nop             
    // 0x86eb1c: mov             x1, x3
    // 0x86eb20: r0 = Null
    //     0x86eb20: mov             x0, NULL
    // 0x86eb24: b               #0x86eb54
    // 0x86eb28: r17 = 351
    //     0x86eb28: movz            x17, #0x15f
    // 0x86eb2c: ldr             w1, [x0, x17]
    // 0x86eb30: DecompressPointer r1
    //     0x86eb30: add             x1, x1, HEAP, lsl #32
    // 0x86eb34: r0 = LoadClassIdInstr(r1)
    //     0x86eb34: ldur            x0, [x1, #-1]
    //     0x86eb38: ubfx            x0, x0, #0xc, #0x14
    // 0x86eb3c: r2 = "9exp9goldTradeType"
    //     0x86eb3c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc98] "9exp9goldTradeType"
    //     0x86eb40: ldr             x2, [x2, #0xc98]
    // 0x86eb44: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86eb44: sub             lr, x0, #0xb4
    //     0x86eb48: ldr             lr, [x21, lr, lsl #3]
    //     0x86eb4c: blr             lr
    // 0x86eb50: ldur            x1, [fp, #-0x38]
    // 0x86eb54: r2 = 59
    //     0x86eb54: movz            x2, #0x3b
    // 0x86eb58: branchIfSmi(r0, 0x86eb68)
    //     0x86eb58: tbz             w0, #0, #0x86eb68
    //     0x86eb5c: nop             
    // 0x86eb60: r2 = LoadClassIdInstr(r0)
    //     0x86eb60: ldur            x2, [x0, #-1]
    //     0x86eb64: ubfx            x2, x2, #0xc, #0x14
    // 0x86eb68: r16 = "9bundle"
    //     0x86eb68: add             x16, PP, #0xf, lsl #12  ; [pp+0xfc90] "9bundle"
    //     0x86eb6c: ldr             x16, [x16, #0xc90]
    // 0x86eb70: stp             x16, x0, [SP]
    // 0x86eb74: mov             x0, x2
    // 0x86eb78: mov             lr, x0
    // 0x86eb7c: ldr             lr, [x21, lr, lsl #3]
    // 0x86eb80: blr             lr
    // 0x86eb84: mov             x1, x0
    // 0x86eb88: ldur            x0, [fp, #-0x38]
    // 0x86eb8c: cmp             x0, #0x1e
    // 0x86eb90: b.ge            #0x86ebac
    // 0x86eb94: nop             
    // 0x86eb98: tbz             w1, #4, #0x86ebac
    // 0x86eb9c: nop             
    // 0x86eba0: r0 = Instance_GearRarity
    //     0x86eba0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10668] Obj!GearRarity@ec8581
    //     0x86eba4: ldr             x0, [x0, #0x668]
    // 0x86eba8: b               #0x86ebd4
    // 0x86ebac: cmp             x0, #0x1e
    // 0x86ebb0: b.lt            #0x86ebcc
    // 0x86ebb4: nop             
    // 0x86ebb8: tbnz            w1, #4, #0x86ebcc
    // 0x86ebbc: nop             
    // 0x86ebc0: r0 = Instance_GearRarity
    //     0x86ebc0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x86ebc4: ldr             x0, [x0, #0x670]
    // 0x86ebc8: b               #0x86ebd4
    // 0x86ebcc: r0 = Instance_GearRarity
    //     0x86ebcc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10678] Obj!GearRarity@ec85c1
    //     0x86ebd0: ldr             x0, [x0, #0x678]
    // 0x86ebd4: stur            x0, [fp, #-8]
    // 0x86ebd8: r0 = racketList()
    //     0x86ebd8: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x86ebdc: stur            x0, [fp, #-0x10]
    // 0x86ebe0: r0 = shoeList()
    //     0x86ebe0: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x86ebe4: ldur            x1, [fp, #-0x10]
    // 0x86ebe8: mov             x2, x0
    // 0x86ebec: r0 = +()
    //     0x86ebec: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86ebf0: stur            x0, [fp, #-0x10]
    // 0x86ebf4: r0 = accessoryList()
    //     0x86ebf4: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x86ebf8: ldur            x1, [fp, #-0x10]
    // 0x86ebfc: mov             x2, x0
    // 0x86ec00: r0 = +()
    //     0x86ec00: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x86ec04: mov             x1, x0
    // 0x86ec08: r0 = shuffle()
    //     0x86ec08: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86ec0c: mov             x1, x0
    // 0x86ec10: r0 = iterator()
    //     0x86ec10: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x86ec14: stur            x0, [fp, #-0x10]
    // 0x86ec18: ldur            x2, [fp, #-8]
    // 0x86ec1c: CheckStackOverflow
    //     0x86ec1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x86ec20: cmp             SP, x16
    //     0x86ec24: b.ls            #0x8838f8
    //     0x86ec28: nop             
    // 0x86ec2c: mov             x1, x0
    // 0x86ec30: r0 = moveNext()
    //     0x86ec30: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x86ec34: tbnz            w0, #4, #0x86ecdc
    // 0x86ec38: nop             
    // 0x86ec3c: ldur            x0, [fp, #-8]
    // 0x86ec40: ldur            x1, [fp, #-0x10]
    // 0x86ec44: r0 = current()
    //     0x86ec44: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x86ec48: mov             x3, x0
    // 0x86ec4c: r2 = Null
    //     0x86ec4c: mov             x2, NULL
    // 0x86ec50: r1 = Null
    //     0x86ec50: mov             x1, NULL
    // 0x86ec54: stur            x3, [fp, #-0x18]
    // 0x86ec58: r4 = 59
    //     0x86ec58: movz            x4, #0x3b
    // 0x86ec5c: branchIfSmi(r0, 0x86ec6c)
    //     0x86ec5c: tbz             w0, #0, #0x86ec6c
    //     0x86ec60: nop             
    // 0x86ec64: r4 = LoadClassIdInstr(r0)
    //     0x86ec64: ldur            x4, [x0, #-1]
    //     0x86ec68: ubfx            x4, x4, #0xc, #0x14
    // 0x86ec6c: sub             x4, x4, #0x5d
    // 0x86ec70: cmp             x4, #1
    // 0x86ec74: b.ls            #0x86ec8c
    // 0x86ec78: nop             
    // 0x86ec7c: r8 = String
    //     0x86ec7c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86ec80: r3 = Null
    //     0x86ec80: add             x3, PP, #0x10, lsl #12  ; [pp+0x10680] Null
    //     0x86ec84: ldr             x3, [x3, #0x680]
    // 0x86ec88: r0 = String()
    //     0x86ec88: bl              #0x1523244  ; IsType_String_Stub
    // 0x86ec8c: ldur            x1, [fp, #-0x18]
    // 0x86ec90: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86ec90: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86ec94: r0 = getGear()
    //     0x86ec94: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x86ec98: LoadField: r1 = r0->field_1f
    //     0x86ec98: ldur            w1, [x0, #0x1f]
    // 0x86ec9c: DecompressPointer r1
    //     0x86ec9c: add             x1, x1, HEAP, lsl #32
    // 0x86eca0: ldur            x0, [fp, #-8]
    // 0x86eca4: cmp             w1, w0
    // 0x86eca8: b.ne            #0x86ecd4
    // 0x86ecac: nop             
    // 0x86ecb0: ldur            x1, [fp, #-0x18]
    // 0x86ecb4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x86ecb4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x86ecb8: r0 = getGear()
    //     0x86ecb8: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x86ecbc: LoadField: r1 = r0->field_9b
    //     0x86ecbc: ldur            w1, [x0, #0x9b]
    // 0x86ecc0: DecompressPointer r1
    //     0x86ecc0: add             x1, x1, HEAP, lsl #32
    // 0x86ecc4: tbz             w1, #4, #0x86ecd4
    // 0x86ecc8: nop             
    // 0x86eccc: ldur            x0, [fp, #-0x18]
    // 0x86ecd0: b               #0x8838b4
    // 0x86ecd4: ldur            x0, [fp, #-0x10]
    // 0x86ecd8: b               #0x86ec18
    // 0x86ecdc: r0 = "metalracket"
    //     0x86ecdc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x86ece0: ldr             x0, [x0, #0x690]
    // 0x86ece4: b               #0x8838b4
    // 0x86ece8: r16 = "9exp9goldString"
    //     0x86ece8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10698] "9exp9goldString"
    //     0x86ecec: ldr             x16, [x16, #0x698]
    // 0x86ecf0: ldur            lr, [fp, #-0x28]
    // 0x86ecf4: stp             lr, x16, [SP]
    // 0x86ecf8: r0 = ==()
    //     0x86ecf8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86ecfc: tbnz            w0, #4, #0x86edb0
    // 0x86ed00: nop             
    // 0x86ed04: r0 = LoadStaticField(0xb54)
    //     0x86ed04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ed08: ldr             x0, [x0, #0x16a8]
    // 0x86ed0c: cmp             w0, NULL
    // 0x86ed10: b.ne            #0x86ed20
    // 0x86ed14: nop             
    // 0x86ed18: r0 = Null
    //     0x86ed18: mov             x0, NULL
    // 0x86ed1c: b               #0x86ed48
    // 0x86ed20: r17 = 351
    //     0x86ed20: movz            x17, #0x15f
    // 0x86ed24: ldr             w1, [x0, x17]
    // 0x86ed28: DecompressPointer r1
    //     0x86ed28: add             x1, x1, HEAP, lsl #32
    // 0x86ed2c: r0 = LoadClassIdInstr(r1)
    //     0x86ed2c: ldur            x0, [x1, #-1]
    //     0x86ed30: ubfx            x0, x0, #0xc, #0x14
    // 0x86ed34: r2 = "9exp9goldTrade"
    //     0x86ed34: add             x2, PP, #0xf, lsl #12  ; [pp+0xfca0] "9exp9goldTrade"
    //     0x86ed38: ldr             x2, [x2, #0xca0]
    // 0x86ed3c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ed3c: sub             lr, x0, #0xb4
    //     0x86ed40: ldr             lr, [x21, lr, lsl #3]
    //     0x86ed44: blr             lr
    // 0x86ed48: cmp             w0, NULL
    // 0x86ed4c: b.ne            #0x86ed60
    // 0x86ed50: nop             
    // 0x86ed54: r3 = "get250G"
    //     0x86ed54: add             x3, PP, #0x10, lsl #12  ; [pp+0x106a0] "get250G"
    //     0x86ed58: ldr             x3, [x3, #0x6a0]
    // 0x86ed5c: b               #0x86ed64
    // 0x86ed60: mov             x3, x0
    // 0x86ed64: mov             x0, x3
    // 0x86ed68: stur            x3, [fp, #-8]
    // 0x86ed6c: r2 = Null
    //     0x86ed6c: mov             x2, NULL
    // 0x86ed70: r1 = Null
    //     0x86ed70: mov             x1, NULL
    // 0x86ed74: r4 = 59
    //     0x86ed74: movz            x4, #0x3b
    // 0x86ed78: branchIfSmi(r0, 0x86ed88)
    //     0x86ed78: tbz             w0, #0, #0x86ed88
    //     0x86ed7c: nop             
    // 0x86ed80: r4 = LoadClassIdInstr(r0)
    //     0x86ed80: ldur            x4, [x0, #-1]
    //     0x86ed84: ubfx            x4, x4, #0xc, #0x14
    // 0x86ed88: sub             x4, x4, #0x5d
    // 0x86ed8c: cmp             x4, #1
    // 0x86ed90: b.ls            #0x86eda8
    // 0x86ed94: nop             
    // 0x86ed98: r8 = String
    //     0x86ed98: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86ed9c: r3 = Null
    //     0x86ed9c: add             x3, PP, #0x10, lsl #12  ; [pp+0x106a8] Null
    //     0x86eda0: ldr             x3, [x3, #0x6a8]
    // 0x86eda4: r0 = String()
    //     0x86eda4: bl              #0x1523244  ; IsType_String_Stub
    // 0x86eda8: ldur            x0, [fp, #-8]
    // 0x86edac: b               #0x8838b4
    // 0x86edb0: r16 = "checkRainDollEaster"
    //     0x86edb0: add             x16, PP, #0x10, lsl #12  ; [pp+0x106b8] "checkRainDollEaster"
    //     0x86edb4: ldr             x16, [x16, #0x6b8]
    // 0x86edb8: ldur            lr, [fp, #-0x28]
    // 0x86edbc: stp             lr, x16, [SP]
    // 0x86edc0: r0 = ==()
    //     0x86edc0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86edc4: tbnz            w0, #4, #0x86ef0c
    // 0x86edc8: nop             
    // 0x86edcc: r0 = LoadStaticField(0xb54)
    //     0x86edcc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86edd0: ldr             x0, [x0, #0x16a8]
    // 0x86edd4: cmp             w0, NULL
    // 0x86edd8: b.ne            #0x86ede8
    // 0x86eddc: nop             
    // 0x86ede0: r0 = Null
    //     0x86ede0: mov             x0, NULL
    // 0x86ede4: b               #0x86ee10
    // 0x86ede8: r17 = 327
    //     0x86ede8: movz            x17, #0x147
    // 0x86edec: ldr             w1, [x0, x17]
    // 0x86edf0: DecompressPointer r1
    //     0x86edf0: add             x1, x1, HEAP, lsl #32
    // 0x86edf4: r0 = LoadClassIdInstr(r1)
    //     0x86edf4: ldur            x0, [x1, #-1]
    //     0x86edf8: ubfx            x0, x0, #0xc, #0x14
    // 0x86edfc: r2 = "rainDollEaster"
    //     0x86edfc: add             x2, PP, #0x10, lsl #12  ; [pp+0x106c0] "rainDollEaster"
    //     0x86ee00: ldr             x2, [x2, #0x6c0]
    // 0x86ee04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ee04: sub             lr, x0, #0xb4
    //     0x86ee08: ldr             lr, [x21, lr, lsl #3]
    //     0x86ee0c: blr             lr
    // 0x86ee10: cmp             w0, NULL
    // 0x86ee14: b.ne            #0x86ee24
    // 0x86ee18: nop             
    // 0x86ee1c: r3 = false
    //     0x86ee1c: add             x3, NULL, #0x30  ; false
    // 0x86ee20: b               #0x86ee28
    // 0x86ee24: mov             x3, x0
    // 0x86ee28: mov             x0, x3
    // 0x86ee2c: stur            x3, [fp, #-8]
    // 0x86ee30: r2 = Null
    //     0x86ee30: mov             x2, NULL
    // 0x86ee34: r1 = Null
    //     0x86ee34: mov             x1, NULL
    // 0x86ee38: r4 = 59
    //     0x86ee38: movz            x4, #0x3b
    // 0x86ee3c: branchIfSmi(r0, 0x86ee4c)
    //     0x86ee3c: tbz             w0, #0, #0x86ee4c
    //     0x86ee40: nop             
    // 0x86ee44: r4 = LoadClassIdInstr(r0)
    //     0x86ee44: ldur            x4, [x0, #-1]
    //     0x86ee48: ubfx            x4, x4, #0xc, #0x14
    // 0x86ee4c: cmp             x4, #0x3e
    // 0x86ee50: b.eq            #0x86ee68
    // 0x86ee54: nop             
    // 0x86ee58: r8 = bool
    //     0x86ee58: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86ee5c: r3 = Null
    //     0x86ee5c: add             x3, PP, #0x10, lsl #12  ; [pp+0x106c8] Null
    //     0x86ee60: ldr             x3, [x3, #0x6c8]
    // 0x86ee64: r0 = bool()
    //     0x86ee64: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86ee68: r0 = LoadStaticField(0xb54)
    //     0x86ee68: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ee6c: ldr             x0, [x0, #0x16a8]
    // 0x86ee70: cmp             w0, NULL
    // 0x86ee74: b.ne            #0x86ee84
    // 0x86ee78: nop             
    // 0x86ee7c: r0 = Null
    //     0x86ee7c: mov             x0, NULL
    // 0x86ee80: b               #0x86eeac
    // 0x86ee84: r17 = 351
    //     0x86ee84: movz            x17, #0x15f
    // 0x86ee88: ldr             w1, [x0, x17]
    // 0x86ee8c: DecompressPointer r1
    //     0x86ee8c: add             x1, x1, HEAP, lsl #32
    // 0x86ee90: r0 = LoadClassIdInstr(r1)
    //     0x86ee90: ldur            x0, [x1, #-1]
    //     0x86ee94: ubfx            x0, x0, #0xc, #0x14
    // 0x86ee98: r2 = "weather"
    //     0x86ee98: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd08] "weather"
    //     0x86ee9c: ldr             x2, [x2, #0xd08]
    // 0x86eea0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86eea0: sub             lr, x0, #0xb4
    //     0x86eea4: ldr             lr, [x21, lr, lsl #3]
    //     0x86eea8: blr             lr
    // 0x86eeac: ldur            x1, [fp, #-8]
    // 0x86eeb0: r2 = 59
    //     0x86eeb0: movz            x2, #0x3b
    // 0x86eeb4: branchIfSmi(r0, 0x86eec4)
    //     0x86eeb4: tbz             w0, #0, #0x86eec4
    //     0x86eeb8: nop             
    // 0x86eebc: r2 = LoadClassIdInstr(r0)
    //     0x86eebc: ldur            x2, [x0, #-1]
    //     0x86eec0: ubfx            x2, x2, #0xc, #0x14
    // 0x86eec4: r16 = "rainy"
    //     0x86eec4: add             x16, PP, #0x10, lsl #12  ; [pp+0x106d8] "rainy"
    //     0x86eec8: ldr             x16, [x16, #0x6d8]
    // 0x86eecc: stp             x16, x0, [SP]
    // 0x86eed0: mov             x0, x2
    // 0x86eed4: mov             lr, x0
    // 0x86eed8: ldr             lr, [x21, lr, lsl #3]
    // 0x86eedc: blr             lr
    // 0x86eee0: mov             x1, x0
    // 0x86eee4: ldur            x0, [fp, #-8]
    // 0x86eee8: tbz             w0, #4, #0x86ef04
    // 0x86eeec: nop             
    // 0x86eef0: tbnz            w1, #4, #0x86ef04
    // 0x86eef4: nop             
    // 0x86eef8: r0 = "checkRainDollEaster"
    //     0x86eef8: add             x0, PP, #0x10, lsl #12  ; [pp+0x106b8] "checkRainDollEaster"
    //     0x86eefc: ldr             x0, [x0, #0x6b8]
    // 0x86ef00: b               #0x8838b4
    // 0x86ef04: r0 = "end"
    //     0x86ef04: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x86ef08: b               #0x8838b4
    // 0x86ef0c: r16 = "checkFogDollEaster"
    //     0x86ef0c: add             x16, PP, #0x10, lsl #12  ; [pp+0x106e0] "checkFogDollEaster"
    //     0x86ef10: ldr             x16, [x16, #0x6e0]
    // 0x86ef14: ldur            lr, [fp, #-0x28]
    // 0x86ef18: stp             lr, x16, [SP]
    // 0x86ef1c: r0 = ==()
    //     0x86ef1c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86ef20: tbnz            w0, #4, #0x86f068
    // 0x86ef24: nop             
    // 0x86ef28: r0 = LoadStaticField(0xb54)
    //     0x86ef28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86ef2c: ldr             x0, [x0, #0x16a8]
    // 0x86ef30: cmp             w0, NULL
    // 0x86ef34: b.ne            #0x86ef44
    // 0x86ef38: nop             
    // 0x86ef3c: r0 = Null
    //     0x86ef3c: mov             x0, NULL
    // 0x86ef40: b               #0x86ef6c
    // 0x86ef44: r17 = 327
    //     0x86ef44: movz            x17, #0x147
    // 0x86ef48: ldr             w1, [x0, x17]
    // 0x86ef4c: DecompressPointer r1
    //     0x86ef4c: add             x1, x1, HEAP, lsl #32
    // 0x86ef50: r0 = LoadClassIdInstr(r1)
    //     0x86ef50: ldur            x0, [x1, #-1]
    //     0x86ef54: ubfx            x0, x0, #0xc, #0x14
    // 0x86ef58: r2 = "fogDollEaster"
    //     0x86ef58: add             x2, PP, #0x10, lsl #12  ; [pp+0x106e8] "fogDollEaster"
    //     0x86ef5c: ldr             x2, [x2, #0x6e8]
    // 0x86ef60: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86ef60: sub             lr, x0, #0xb4
    //     0x86ef64: ldr             lr, [x21, lr, lsl #3]
    //     0x86ef68: blr             lr
    // 0x86ef6c: cmp             w0, NULL
    // 0x86ef70: b.ne            #0x86ef80
    // 0x86ef74: nop             
    // 0x86ef78: r3 = false
    //     0x86ef78: add             x3, NULL, #0x30  ; false
    // 0x86ef7c: b               #0x86ef84
    // 0x86ef80: mov             x3, x0
    // 0x86ef84: mov             x0, x3
    // 0x86ef88: stur            x3, [fp, #-8]
    // 0x86ef8c: r2 = Null
    //     0x86ef8c: mov             x2, NULL
    // 0x86ef90: r1 = Null
    //     0x86ef90: mov             x1, NULL
    // 0x86ef94: r4 = 59
    //     0x86ef94: movz            x4, #0x3b
    // 0x86ef98: branchIfSmi(r0, 0x86efa8)
    //     0x86ef98: tbz             w0, #0, #0x86efa8
    //     0x86ef9c: nop             
    // 0x86efa0: r4 = LoadClassIdInstr(r0)
    //     0x86efa0: ldur            x4, [x0, #-1]
    //     0x86efa4: ubfx            x4, x4, #0xc, #0x14
    // 0x86efa8: cmp             x4, #0x3e
    // 0x86efac: b.eq            #0x86efc4
    // 0x86efb0: nop             
    // 0x86efb4: r8 = bool
    //     0x86efb4: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x86efb8: r3 = Null
    //     0x86efb8: add             x3, PP, #0x10, lsl #12  ; [pp+0x106f0] Null
    //     0x86efbc: ldr             x3, [x3, #0x6f0]
    // 0x86efc0: r0 = bool()
    //     0x86efc0: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x86efc4: r0 = LoadStaticField(0xb54)
    //     0x86efc4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86efc8: ldr             x0, [x0, #0x16a8]
    // 0x86efcc: cmp             w0, NULL
    // 0x86efd0: b.ne            #0x86efe0
    // 0x86efd4: nop             
    // 0x86efd8: r0 = Null
    //     0x86efd8: mov             x0, NULL
    // 0x86efdc: b               #0x86f008
    // 0x86efe0: r17 = 351
    //     0x86efe0: movz            x17, #0x15f
    // 0x86efe4: ldr             w1, [x0, x17]
    // 0x86efe8: DecompressPointer r1
    //     0x86efe8: add             x1, x1, HEAP, lsl #32
    // 0x86efec: r0 = LoadClassIdInstr(r1)
    //     0x86efec: ldur            x0, [x1, #-1]
    //     0x86eff0: ubfx            x0, x0, #0xc, #0x14
    // 0x86eff4: r2 = "weather"
    //     0x86eff4: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd08] "weather"
    //     0x86eff8: ldr             x2, [x2, #0xd08]
    // 0x86effc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86effc: sub             lr, x0, #0xb4
    //     0x86f000: ldr             lr, [x21, lr, lsl #3]
    //     0x86f004: blr             lr
    // 0x86f008: ldur            x1, [fp, #-8]
    // 0x86f00c: r2 = 59
    //     0x86f00c: movz            x2, #0x3b
    // 0x86f010: branchIfSmi(r0, 0x86f020)
    //     0x86f010: tbz             w0, #0, #0x86f020
    //     0x86f014: nop             
    // 0x86f018: r2 = LoadClassIdInstr(r0)
    //     0x86f018: ldur            x2, [x0, #-1]
    //     0x86f01c: ubfx            x2, x2, #0xc, #0x14
    // 0x86f020: r16 = "foggy"
    //     0x86f020: add             x16, PP, #0x10, lsl #12  ; [pp+0x10700] "foggy"
    //     0x86f024: ldr             x16, [x16, #0x700]
    // 0x86f028: stp             x16, x0, [SP]
    // 0x86f02c: mov             x0, x2
    // 0x86f030: mov             lr, x0
    // 0x86f034: ldr             lr, [x21, lr, lsl #3]
    // 0x86f038: blr             lr
    // 0x86f03c: mov             x1, x0
    // 0x86f040: ldur            x0, [fp, #-8]
    // 0x86f044: tbz             w0, #4, #0x86f060
    // 0x86f048: nop             
    // 0x86f04c: tbnz            w1, #4, #0x86f060
    // 0x86f050: nop             
    // 0x86f054: r0 = "checkFogDollEaster"
    //     0x86f054: add             x0, PP, #0x10, lsl #12  ; [pp+0x106e0] "checkFogDollEaster"
    //     0x86f058: ldr             x0, [x0, #0x6e0]
    // 0x86f05c: b               #0x8838b4
    // 0x86f060: r0 = "end"
    //     0x86f060: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x86f064: b               #0x8838b4
    // 0x86f068: r16 = "9exp9goldTrade"
    //     0x86f068: add             x16, PP, #0xf, lsl #12  ; [pp+0xfca0] "9exp9goldTrade"
    //     0x86f06c: ldr             x16, [x16, #0xca0]
    // 0x86f070: ldur            lr, [fp, #-0x28]
    // 0x86f074: stp             lr, x16, [SP]
    // 0x86f078: r0 = ==()
    //     0x86f078: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86f07c: tbnz            w0, #4, #0x86f17c
    // 0x86f080: nop             
    // 0x86f084: r1 = Null
    //     0x86f084: mov             x1, NULL
    // 0x86f088: r0 = Random()
    //     0x86f088: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86f08c: mov             x1, x0
    // 0x86f090: r2 = 100
    //     0x86f090: movz            x2, #0x64
    // 0x86f094: r0 = nextInt()
    //     0x86f094: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86f098: cmp             x0, #0x19
    // 0x86f09c: b.gt            #0x86f0b0
    // 0x86f0a0: nop             
    // 0x86f0a4: r0 = "getGear"
    //     0x86f0a4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10708] "getGear"
    //     0x86f0a8: ldr             x0, [x0, #0x708]
    // 0x86f0ac: b               #0x8838b4
    // 0x86f0b0: cmp             x0, #0x3c
    // 0x86f0b4: b.gt            #0x86f0c8
    // 0x86f0b8: nop             
    // 0x86f0bc: r0 = "getEnergyDrink"
    //     0x86f0bc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] "getEnergyDrink"
    //     0x86f0c0: ldr             x0, [x0, #0x358]
    // 0x86f0c4: b               #0x8838b4
    // 0x86f0c8: cmp             x0, #0x57
    // 0x86f0cc: b.gt            #0x86f0e0
    // 0x86f0d0: nop             
    // 0x86f0d4: r0 = "get250G"
    //     0x86f0d4: add             x0, PP, #0x10, lsl #12  ; [pp+0x106a0] "get250G"
    //     0x86f0d8: ldr             x0, [x0, #0x6a0]
    // 0x86f0dc: b               #0x8838b4
    // 0x86f0e0: cmp             x0, #0x58
    // 0x86f0e4: b.gt            #0x86f0f8
    // 0x86f0e8: nop             
    // 0x86f0ec: r0 = "getRainyDoll"
    //     0x86f0ec: add             x0, PP, #0x10, lsl #12  ; [pp+0x10710] "getRainyDoll"
    //     0x86f0f0: ldr             x0, [x0, #0x710]
    // 0x86f0f4: b               #0x8838b4
    // 0x86f0f8: cmp             x0, #0x59
    // 0x86f0fc: b.gt            #0x86f110
    // 0x86f100: nop             
    // 0x86f104: r0 = "getFoggyDoll"
    //     0x86f104: add             x0, PP, #0x10, lsl #12  ; [pp+0x10718] "getFoggyDoll"
    //     0x86f108: ldr             x0, [x0, #0x718]
    // 0x86f10c: b               #0x8838b4
    // 0x86f110: cmp             x0, #0x5a
    // 0x86f114: b.gt            #0x86f128
    // 0x86f118: nop             
    // 0x86f11c: r0 = "getSunnyDoll"
    //     0x86f11c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10720] "getSunnyDoll"
    //     0x86f120: ldr             x0, [x0, #0x720]
    // 0x86f124: b               #0x8838b4
    // 0x86f128: cmp             x0, #0x5d
    // 0x86f12c: b.gt            #0x86f140
    // 0x86f130: nop             
    // 0x86f134: r0 = "getSeafoodBento"
    //     0x86f134: add             x0, PP, #0x10, lsl #12  ; [pp+0x10320] "getSeafoodBento"
    //     0x86f138: ldr             x0, [x0, #0x320]
    // 0x86f13c: b               #0x8838b4
    // 0x86f140: cmp             x0, #0x60
    // 0x86f144: b.gt            #0x86f158
    // 0x86f148: nop             
    // 0x86f14c: r0 = "getChanceCard"
    //     0x86f14c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10370] "getChanceCard"
    //     0x86f150: ldr             x0, [x0, #0x370]
    // 0x86f154: b               #0x8838b4
    // 0x86f158: cmp             x0, #0x63
    // 0x86f15c: b.gt            #0x86f170
    // 0x86f160: nop             
    // 0x86f164: r0 = "getBathtub"
    //     0x86f164: add             x0, PP, #0x10, lsl #12  ; [pp+0x104a0] "getBathtub"
    //     0x86f168: ldr             x0, [x0, #0x4a0]
    // 0x86f16c: b               #0x8838b4
    // 0x86f170: r0 = "getLevelBean"
    //     0x86f170: add             x0, PP, #0x10, lsl #12  ; [pp+0x10390] "getLevelBean"
    //     0x86f174: ldr             x0, [x0, #0x390]
    // 0x86f178: b               #0x8838b4
    // 0x86f17c: r16 = "checkConsumableTrade"
    //     0x86f17c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10728] "checkConsumableTrade"
    //     0x86f180: ldr             x16, [x16, #0x728]
    // 0x86f184: ldur            lr, [fp, #-0x28]
    // 0x86f188: stp             lr, x16, [SP]
    // 0x86f18c: r0 = ==()
    //     0x86f18c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86f190: tbnz            w0, #4, #0x86fa68
    // 0x86f194: nop             
    // 0x86f198: r1 = Null
    //     0x86f198: mov             x1, NULL
    // 0x86f19c: r2 = 0
    //     0x86f19c: movz            x2, #0
    // 0x86f1a0: r0 = _GrowableList()
    //     0x86f1a0: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x86f1a4: mov             x3, x0
    // 0x86f1a8: stur            x3, [fp, #-8]
    // 0x86f1ac: r0 = LoadStaticField(0xb54)
    //     0x86f1ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f1b0: ldr             x0, [x0, #0x16a8]
    // 0x86f1b4: cmp             w0, NULL
    // 0x86f1b8: b.ne            #0x86f1c8
    // 0x86f1bc: nop             
    // 0x86f1c0: r0 = Null
    //     0x86f1c0: mov             x0, NULL
    // 0x86f1c4: b               #0x86f1f0
    // 0x86f1c8: r17 = 339
    //     0x86f1c8: movz            x17, #0x153
    // 0x86f1cc: ldr             w1, [x0, x17]
    // 0x86f1d0: DecompressPointer r1
    //     0x86f1d0: add             x1, x1, HEAP, lsl #32
    // 0x86f1d4: r0 = LoadClassIdInstr(r1)
    //     0x86f1d4: ldur            x0, [x1, #-1]
    //     0x86f1d8: ubfx            x0, x0, #0xc, #0x14
    // 0x86f1dc: r2 = "moneysack"
    //     0x86f1dc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10628] "moneysack"
    //     0x86f1e0: ldr             x2, [x2, #0x628]
    // 0x86f1e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f1e4: sub             lr, x0, #0xb4
    //     0x86f1e8: ldr             lr, [x21, lr, lsl #3]
    //     0x86f1ec: blr             lr
    // 0x86f1f0: cmp             w0, NULL
    // 0x86f1f4: b.ne            #0x86f204
    // 0x86f1f8: nop             
    // 0x86f1fc: r3 = 0
    //     0x86f1fc: movz            x3, #0
    // 0x86f200: b               #0x86f208
    // 0x86f204: mov             x3, x0
    // 0x86f208: mov             x0, x3
    // 0x86f20c: stur            x3, [fp, #-0x10]
    // 0x86f210: r2 = Null
    //     0x86f210: mov             x2, NULL
    // 0x86f214: r1 = Null
    //     0x86f214: mov             x1, NULL
    // 0x86f218: branchIfSmi(r0, 0x86f248)
    //     0x86f218: tbz             w0, #0, #0x86f248
    //     0x86f21c: nop             
    // 0x86f220: r4 = LoadClassIdInstr(r0)
    //     0x86f220: ldur            x4, [x0, #-1]
    //     0x86f224: ubfx            x4, x4, #0xc, #0x14
    // 0x86f228: sub             x4, x4, #0x3b
    // 0x86f22c: cmp             x4, #1
    // 0x86f230: b.ls            #0x86f248
    // 0x86f234: nop             
    // 0x86f238: r8 = int
    //     0x86f238: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f23c: r3 = Null
    //     0x86f23c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10730] Null
    //     0x86f240: ldr             x3, [x3, #0x730]
    // 0x86f244: r0 = int()
    //     0x86f244: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f248: r0 = LoadStaticField(0xb54)
    //     0x86f248: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f24c: ldr             x0, [x0, #0x16a8]
    // 0x86f250: cmp             w0, NULL
    // 0x86f254: b.ne            #0x86f264
    // 0x86f258: nop             
    // 0x86f25c: r0 = Null
    //     0x86f25c: mov             x0, NULL
    // 0x86f260: b               #0x86f28c
    // 0x86f264: r17 = 339
    //     0x86f264: movz            x17, #0x153
    // 0x86f268: ldr             w1, [x0, x17]
    // 0x86f26c: DecompressPointer r1
    //     0x86f26c: add             x1, x1, HEAP, lsl #32
    // 0x86f270: r0 = LoadClassIdInstr(r1)
    //     0x86f270: ldur            x0, [x1, #-1]
    //     0x86f274: ubfx            x0, x0, #0xc, #0x14
    // 0x86f278: r2 = "expsnack"
    //     0x86f278: add             x2, PP, #0x10, lsl #12  ; [pp+0x10640] "expsnack"
    //     0x86f27c: ldr             x2, [x2, #0x640]
    // 0x86f280: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f280: sub             lr, x0, #0xb4
    //     0x86f284: ldr             lr, [x21, lr, lsl #3]
    //     0x86f288: blr             lr
    // 0x86f28c: cmp             w0, NULL
    // 0x86f290: b.ne            #0x86f2a0
    // 0x86f294: nop             
    // 0x86f298: r3 = 0
    //     0x86f298: movz            x3, #0
    // 0x86f29c: b               #0x86f2a4
    // 0x86f2a0: mov             x3, x0
    // 0x86f2a4: mov             x0, x3
    // 0x86f2a8: stur            x3, [fp, #-0x18]
    // 0x86f2ac: r2 = Null
    //     0x86f2ac: mov             x2, NULL
    // 0x86f2b0: r1 = Null
    //     0x86f2b0: mov             x1, NULL
    // 0x86f2b4: branchIfSmi(r0, 0x86f2e4)
    //     0x86f2b4: tbz             w0, #0, #0x86f2e4
    //     0x86f2b8: nop             
    // 0x86f2bc: r4 = LoadClassIdInstr(r0)
    //     0x86f2bc: ldur            x4, [x0, #-1]
    //     0x86f2c0: ubfx            x4, x4, #0xc, #0x14
    // 0x86f2c4: sub             x4, x4, #0x3b
    // 0x86f2c8: cmp             x4, #1
    // 0x86f2cc: b.ls            #0x86f2e4
    // 0x86f2d0: nop             
    // 0x86f2d4: r8 = int
    //     0x86f2d4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f2d8: r3 = Null
    //     0x86f2d8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10740] Null
    //     0x86f2dc: ldr             x3, [x3, #0x740]
    // 0x86f2e0: r0 = int()
    //     0x86f2e0: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f2e4: r0 = LoadStaticField(0xb54)
    //     0x86f2e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f2e8: ldr             x0, [x0, #0x16a8]
    // 0x86f2ec: cmp             w0, NULL
    // 0x86f2f0: b.ne            #0x86f300
    // 0x86f2f4: nop             
    // 0x86f2f8: r0 = Null
    //     0x86f2f8: mov             x0, NULL
    // 0x86f2fc: b               #0x86f328
    // 0x86f300: r17 = 339
    //     0x86f300: movz            x17, #0x153
    // 0x86f304: ldr             w1, [x0, x17]
    // 0x86f308: DecompressPointer r1
    //     0x86f308: add             x1, x1, HEAP, lsl #32
    // 0x86f30c: r0 = LoadClassIdInstr(r1)
    //     0x86f30c: ldur            x0, [x1, #-1]
    //     0x86f310: ubfx            x0, x0, #0xc, #0x14
    // 0x86f314: r2 = "remoteatm"
    //     0x86f314: add             x2, PP, #0x10, lsl #12  ; [pp+0x10750] "remoteatm"
    //     0x86f318: ldr             x2, [x2, #0x750]
    // 0x86f31c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f31c: sub             lr, x0, #0xb4
    //     0x86f320: ldr             lr, [x21, lr, lsl #3]
    //     0x86f324: blr             lr
    // 0x86f328: cmp             w0, NULL
    // 0x86f32c: b.ne            #0x86f33c
    // 0x86f330: nop             
    // 0x86f334: r3 = 0
    //     0x86f334: movz            x3, #0
    // 0x86f338: b               #0x86f340
    // 0x86f33c: mov             x3, x0
    // 0x86f340: mov             x0, x3
    // 0x86f344: stur            x3, [fp, #-0x30]
    // 0x86f348: r2 = Null
    //     0x86f348: mov             x2, NULL
    // 0x86f34c: r1 = Null
    //     0x86f34c: mov             x1, NULL
    // 0x86f350: branchIfSmi(r0, 0x86f380)
    //     0x86f350: tbz             w0, #0, #0x86f380
    //     0x86f354: nop             
    // 0x86f358: r4 = LoadClassIdInstr(r0)
    //     0x86f358: ldur            x4, [x0, #-1]
    //     0x86f35c: ubfx            x4, x4, #0xc, #0x14
    // 0x86f360: sub             x4, x4, #0x3b
    // 0x86f364: cmp             x4, #1
    // 0x86f368: b.ls            #0x86f380
    // 0x86f36c: nop             
    // 0x86f370: r8 = int
    //     0x86f370: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f374: r3 = Null
    //     0x86f374: add             x3, PP, #0x10, lsl #12  ; [pp+0x10758] Null
    //     0x86f378: ldr             x3, [x3, #0x758]
    // 0x86f37c: r0 = int()
    //     0x86f37c: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f380: r0 = LoadStaticField(0xb54)
    //     0x86f380: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f384: ldr             x0, [x0, #0x16a8]
    // 0x86f388: cmp             w0, NULL
    // 0x86f38c: b.ne            #0x86f39c
    // 0x86f390: nop             
    // 0x86f394: r0 = Null
    //     0x86f394: mov             x0, NULL
    // 0x86f398: b               #0x86f3c4
    // 0x86f39c: r17 = 339
    //     0x86f39c: movz            x17, #0x153
    // 0x86f3a0: ldr             w1, [x0, x17]
    // 0x86f3a4: DecompressPointer r1
    //     0x86f3a4: add             x1, x1, HEAP, lsl #32
    // 0x86f3a8: r0 = LoadClassIdInstr(r1)
    //     0x86f3a8: ldur            x0, [x1, #-1]
    //     0x86f3ac: ubfx            x0, x0, #0xc, #0x14
    // 0x86f3b0: r2 = "portal"
    //     0x86f3b0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10768] "portal"
    //     0x86f3b4: ldr             x2, [x2, #0x768]
    // 0x86f3b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f3b8: sub             lr, x0, #0xb4
    //     0x86f3bc: ldr             lr, [x21, lr, lsl #3]
    //     0x86f3c0: blr             lr
    // 0x86f3c4: cmp             w0, NULL
    // 0x86f3c8: b.ne            #0x86f3d8
    // 0x86f3cc: nop             
    // 0x86f3d0: r3 = 0
    //     0x86f3d0: movz            x3, #0
    // 0x86f3d4: b               #0x86f3dc
    // 0x86f3d8: mov             x3, x0
    // 0x86f3dc: mov             x0, x3
    // 0x86f3e0: stur            x3, [fp, #-0x40]
    // 0x86f3e4: r2 = Null
    //     0x86f3e4: mov             x2, NULL
    // 0x86f3e8: r1 = Null
    //     0x86f3e8: mov             x1, NULL
    // 0x86f3ec: branchIfSmi(r0, 0x86f41c)
    //     0x86f3ec: tbz             w0, #0, #0x86f41c
    //     0x86f3f0: nop             
    // 0x86f3f4: r4 = LoadClassIdInstr(r0)
    //     0x86f3f4: ldur            x4, [x0, #-1]
    //     0x86f3f8: ubfx            x4, x4, #0xc, #0x14
    // 0x86f3fc: sub             x4, x4, #0x3b
    // 0x86f400: cmp             x4, #1
    // 0x86f404: b.ls            #0x86f41c
    // 0x86f408: nop             
    // 0x86f40c: r8 = int
    //     0x86f40c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f410: r3 = Null
    //     0x86f410: add             x3, PP, #0x10, lsl #12  ; [pp+0x10770] Null
    //     0x86f414: ldr             x3, [x3, #0x770]
    // 0x86f418: r0 = int()
    //     0x86f418: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f41c: r0 = LoadStaticField(0xb54)
    //     0x86f41c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f420: ldr             x0, [x0, #0x16a8]
    // 0x86f424: cmp             w0, NULL
    // 0x86f428: b.ne            #0x86f438
    // 0x86f42c: nop             
    // 0x86f430: r0 = Null
    //     0x86f430: mov             x0, NULL
    // 0x86f434: b               #0x86f460
    // 0x86f438: r17 = 339
    //     0x86f438: movz            x17, #0x153
    // 0x86f43c: ldr             w1, [x0, x17]
    // 0x86f440: DecompressPointer r1
    //     0x86f440: add             x1, x1, HEAP, lsl #32
    // 0x86f444: r0 = LoadClassIdInstr(r1)
    //     0x86f444: ldur            x0, [x1, #-1]
    //     0x86f448: ubfx            x0, x0, #0xc, #0x14
    // 0x86f44c: r2 = "taxi"
    //     0x86f44c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10780] "taxi"
    //     0x86f450: ldr             x2, [x2, #0x780]
    // 0x86f454: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f454: sub             lr, x0, #0xb4
    //     0x86f458: ldr             lr, [x21, lr, lsl #3]
    //     0x86f45c: blr             lr
    // 0x86f460: cmp             w0, NULL
    // 0x86f464: b.ne            #0x86f474
    // 0x86f468: nop             
    // 0x86f46c: r3 = 0
    //     0x86f46c: movz            x3, #0
    // 0x86f470: b               #0x86f478
    // 0x86f474: mov             x3, x0
    // 0x86f478: mov             x0, x3
    // 0x86f47c: stur            x3, [fp, #-0x48]
    // 0x86f480: r2 = Null
    //     0x86f480: mov             x2, NULL
    // 0x86f484: r1 = Null
    //     0x86f484: mov             x1, NULL
    // 0x86f488: branchIfSmi(r0, 0x86f4b8)
    //     0x86f488: tbz             w0, #0, #0x86f4b8
    //     0x86f48c: nop             
    // 0x86f490: r4 = LoadClassIdInstr(r0)
    //     0x86f490: ldur            x4, [x0, #-1]
    //     0x86f494: ubfx            x4, x4, #0xc, #0x14
    // 0x86f498: sub             x4, x4, #0x3b
    // 0x86f49c: cmp             x4, #1
    // 0x86f4a0: b.ls            #0x86f4b8
    // 0x86f4a4: nop             
    // 0x86f4a8: r8 = int
    //     0x86f4a8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f4ac: r3 = Null
    //     0x86f4ac: add             x3, PP, #0x10, lsl #12  ; [pp+0x10788] Null
    //     0x86f4b0: ldr             x3, [x3, #0x788]
    // 0x86f4b4: r0 = int()
    //     0x86f4b4: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f4b8: r0 = LoadStaticField(0xb54)
    //     0x86f4b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f4bc: ldr             x0, [x0, #0x16a8]
    // 0x86f4c0: cmp             w0, NULL
    // 0x86f4c4: b.ne            #0x86f4d4
    // 0x86f4c8: nop             
    // 0x86f4cc: r0 = Null
    //     0x86f4cc: mov             x0, NULL
    // 0x86f4d0: b               #0x86f4fc
    // 0x86f4d4: r17 = 339
    //     0x86f4d4: movz            x17, #0x153
    // 0x86f4d8: ldr             w1, [x0, x17]
    // 0x86f4dc: DecompressPointer r1
    //     0x86f4dc: add             x1, x1, HEAP, lsl #32
    // 0x86f4e0: r0 = LoadClassIdInstr(r1)
    //     0x86f4e0: ldur            x0, [x1, #-1]
    //     0x86f4e4: ubfx            x0, x0, #0xc, #0x14
    // 0x86f4e8: r2 = "energydrink"
    //     0x86f4e8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10590] "energydrink"
    //     0x86f4ec: ldr             x2, [x2, #0x590]
    // 0x86f4f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f4f0: sub             lr, x0, #0xb4
    //     0x86f4f4: ldr             lr, [x21, lr, lsl #3]
    //     0x86f4f8: blr             lr
    // 0x86f4fc: cmp             w0, NULL
    // 0x86f500: b.ne            #0x86f510
    // 0x86f504: nop             
    // 0x86f508: r3 = 0
    //     0x86f508: movz            x3, #0
    // 0x86f50c: b               #0x86f514
    // 0x86f510: mov             x3, x0
    // 0x86f514: mov             x0, x3
    // 0x86f518: stur            x3, [fp, #-0x50]
    // 0x86f51c: r2 = Null
    //     0x86f51c: mov             x2, NULL
    // 0x86f520: r1 = Null
    //     0x86f520: mov             x1, NULL
    // 0x86f524: branchIfSmi(r0, 0x86f554)
    //     0x86f524: tbz             w0, #0, #0x86f554
    //     0x86f528: nop             
    // 0x86f52c: r4 = LoadClassIdInstr(r0)
    //     0x86f52c: ldur            x4, [x0, #-1]
    //     0x86f530: ubfx            x4, x4, #0xc, #0x14
    // 0x86f534: sub             x4, x4, #0x3b
    // 0x86f538: cmp             x4, #1
    // 0x86f53c: b.ls            #0x86f554
    // 0x86f540: nop             
    // 0x86f544: r8 = int
    //     0x86f544: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f548: r3 = Null
    //     0x86f548: add             x3, PP, #0x10, lsl #12  ; [pp+0x10798] Null
    //     0x86f54c: ldr             x3, [x3, #0x798]
    // 0x86f550: r0 = int()
    //     0x86f550: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f554: r0 = LoadStaticField(0xb54)
    //     0x86f554: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f558: ldr             x0, [x0, #0x16a8]
    // 0x86f55c: cmp             w0, NULL
    // 0x86f560: b.ne            #0x86f570
    // 0x86f564: nop             
    // 0x86f568: r0 = Null
    //     0x86f568: mov             x0, NULL
    // 0x86f56c: b               #0x86f598
    // 0x86f570: r17 = 339
    //     0x86f570: movz            x17, #0x153
    // 0x86f574: ldr             w1, [x0, x17]
    // 0x86f578: DecompressPointer r1
    //     0x86f578: add             x1, x1, HEAP, lsl #32
    // 0x86f57c: r0 = LoadClassIdInstr(r1)
    //     0x86f57c: ldur            x0, [x1, #-1]
    //     0x86f580: ubfx            x0, x0, #0xc, #0x14
    // 0x86f584: r2 = "seafoodbento"
    //     0x86f584: add             x2, PP, #0x10, lsl #12  ; [pp+0x107a8] "seafoodbento"
    //     0x86f588: ldr             x2, [x2, #0x7a8]
    // 0x86f58c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f58c: sub             lr, x0, #0xb4
    //     0x86f590: ldr             lr, [x21, lr, lsl #3]
    //     0x86f594: blr             lr
    // 0x86f598: cmp             w0, NULL
    // 0x86f59c: b.ne            #0x86f5ac
    // 0x86f5a0: nop             
    // 0x86f5a4: r3 = 0
    //     0x86f5a4: movz            x3, #0
    // 0x86f5a8: b               #0x86f5b0
    // 0x86f5ac: mov             x3, x0
    // 0x86f5b0: mov             x0, x3
    // 0x86f5b4: stur            x3, [fp, #-0x58]
    // 0x86f5b8: r2 = Null
    //     0x86f5b8: mov             x2, NULL
    // 0x86f5bc: r1 = Null
    //     0x86f5bc: mov             x1, NULL
    // 0x86f5c0: branchIfSmi(r0, 0x86f5f0)
    //     0x86f5c0: tbz             w0, #0, #0x86f5f0
    //     0x86f5c4: nop             
    // 0x86f5c8: r4 = LoadClassIdInstr(r0)
    //     0x86f5c8: ldur            x4, [x0, #-1]
    //     0x86f5cc: ubfx            x4, x4, #0xc, #0x14
    // 0x86f5d0: sub             x4, x4, #0x3b
    // 0x86f5d4: cmp             x4, #1
    // 0x86f5d8: b.ls            #0x86f5f0
    // 0x86f5dc: nop             
    // 0x86f5e0: r8 = int
    //     0x86f5e0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f5e4: r3 = Null
    //     0x86f5e4: add             x3, PP, #0x10, lsl #12  ; [pp+0x107b0] Null
    //     0x86f5e8: ldr             x3, [x3, #0x7b0]
    // 0x86f5ec: r0 = int()
    //     0x86f5ec: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f5f0: r0 = LoadStaticField(0xb54)
    //     0x86f5f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f5f4: ldr             x0, [x0, #0x16a8]
    // 0x86f5f8: cmp             w0, NULL
    // 0x86f5fc: b.ne            #0x86f60c
    // 0x86f600: nop             
    // 0x86f604: r0 = Null
    //     0x86f604: mov             x0, NULL
    // 0x86f608: b               #0x86f634
    // 0x86f60c: r17 = 339
    //     0x86f60c: movz            x17, #0x153
    // 0x86f610: ldr             w1, [x0, x17]
    // 0x86f614: DecompressPointer r1
    //     0x86f614: add             x1, x1, HEAP, lsl #32
    // 0x86f618: r0 = LoadClassIdInstr(r1)
    //     0x86f618: ldur            x0, [x1, #-1]
    //     0x86f61c: ubfx            x0, x0, #0xc, #0x14
    // 0x86f620: r2 = "chancecard"
    //     0x86f620: add             x2, PP, #0x10, lsl #12  ; [pp+0x107c0] "chancecard"
    //     0x86f624: ldr             x2, [x2, #0x7c0]
    // 0x86f628: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f628: sub             lr, x0, #0xb4
    //     0x86f62c: ldr             lr, [x21, lr, lsl #3]
    //     0x86f630: blr             lr
    // 0x86f634: cmp             w0, NULL
    // 0x86f638: b.ne            #0x86f648
    // 0x86f63c: nop             
    // 0x86f640: r3 = 0
    //     0x86f640: movz            x3, #0
    // 0x86f644: b               #0x86f64c
    // 0x86f648: mov             x3, x0
    // 0x86f64c: mov             x0, x3
    // 0x86f650: stur            x3, [fp, #-0x60]
    // 0x86f654: r2 = Null
    //     0x86f654: mov             x2, NULL
    // 0x86f658: r1 = Null
    //     0x86f658: mov             x1, NULL
    // 0x86f65c: branchIfSmi(r0, 0x86f68c)
    //     0x86f65c: tbz             w0, #0, #0x86f68c
    //     0x86f660: nop             
    // 0x86f664: r4 = LoadClassIdInstr(r0)
    //     0x86f664: ldur            x4, [x0, #-1]
    //     0x86f668: ubfx            x4, x4, #0xc, #0x14
    // 0x86f66c: sub             x4, x4, #0x3b
    // 0x86f670: cmp             x4, #1
    // 0x86f674: b.ls            #0x86f68c
    // 0x86f678: nop             
    // 0x86f67c: r8 = int
    //     0x86f67c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f680: r3 = Null
    //     0x86f680: add             x3, PP, #0x10, lsl #12  ; [pp+0x107c8] Null
    //     0x86f684: ldr             x3, [x3, #0x7c8]
    // 0x86f688: r0 = int()
    //     0x86f688: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f68c: r0 = LoadStaticField(0xb54)
    //     0x86f68c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f690: ldr             x0, [x0, #0x16a8]
    // 0x86f694: cmp             w0, NULL
    // 0x86f698: b.ne            #0x86f6a8
    // 0x86f69c: nop             
    // 0x86f6a0: r0 = Null
    //     0x86f6a0: mov             x0, NULL
    // 0x86f6a4: b               #0x86f6d0
    // 0x86f6a8: r17 = 339
    //     0x86f6a8: movz            x17, #0x153
    // 0x86f6ac: ldr             w1, [x0, x17]
    // 0x86f6b0: DecompressPointer r1
    //     0x86f6b0: add             x1, x1, HEAP, lsl #32
    // 0x86f6b4: r0 = LoadClassIdInstr(r1)
    //     0x86f6b4: ldur            x0, [x1, #-1]
    //     0x86f6b8: ubfx            x0, x0, #0xc, #0x14
    // 0x86f6bc: r2 = "bathtub"
    //     0x86f6bc: add             x2, PP, #0x10, lsl #12  ; [pp+0x107d8] "bathtub"
    //     0x86f6c0: ldr             x2, [x2, #0x7d8]
    // 0x86f6c4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f6c4: sub             lr, x0, #0xb4
    //     0x86f6c8: ldr             lr, [x21, lr, lsl #3]
    //     0x86f6cc: blr             lr
    // 0x86f6d0: cmp             w0, NULL
    // 0x86f6d4: b.ne            #0x86f6e4
    // 0x86f6d8: nop             
    // 0x86f6dc: r3 = 0
    //     0x86f6dc: movz            x3, #0
    // 0x86f6e0: b               #0x86f6e8
    // 0x86f6e4: mov             x3, x0
    // 0x86f6e8: mov             x0, x3
    // 0x86f6ec: stur            x3, [fp, #-0x68]
    // 0x86f6f0: r2 = Null
    //     0x86f6f0: mov             x2, NULL
    // 0x86f6f4: r1 = Null
    //     0x86f6f4: mov             x1, NULL
    // 0x86f6f8: branchIfSmi(r0, 0x86f728)
    //     0x86f6f8: tbz             w0, #0, #0x86f728
    //     0x86f6fc: nop             
    // 0x86f700: r4 = LoadClassIdInstr(r0)
    //     0x86f700: ldur            x4, [x0, #-1]
    //     0x86f704: ubfx            x4, x4, #0xc, #0x14
    // 0x86f708: sub             x4, x4, #0x3b
    // 0x86f70c: cmp             x4, #1
    // 0x86f710: b.ls            #0x86f728
    // 0x86f714: nop             
    // 0x86f718: r8 = int
    //     0x86f718: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f71c: r3 = Null
    //     0x86f71c: add             x3, PP, #0x10, lsl #12  ; [pp+0x107e0] Null
    //     0x86f720: ldr             x3, [x3, #0x7e0]
    // 0x86f724: r0 = int()
    //     0x86f724: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f728: r0 = LoadStaticField(0xb54)
    //     0x86f728: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f72c: ldr             x0, [x0, #0x16a8]
    // 0x86f730: cmp             w0, NULL
    // 0x86f734: b.ne            #0x86f744
    // 0x86f738: nop             
    // 0x86f73c: r0 = Null
    //     0x86f73c: mov             x0, NULL
    // 0x86f740: b               #0x86f76c
    // 0x86f744: r17 = 339
    //     0x86f744: movz            x17, #0x153
    // 0x86f748: ldr             w1, [x0, x17]
    // 0x86f74c: DecompressPointer r1
    //     0x86f74c: add             x1, x1, HEAP, lsl #32
    // 0x86f750: r0 = LoadClassIdInstr(r1)
    //     0x86f750: ldur            x0, [x1, #-1]
    //     0x86f754: ubfx            x0, x0, #0xc, #0x14
    // 0x86f758: r2 = "levelbean"
    //     0x86f758: add             x2, PP, #0x10, lsl #12  ; [pp+0x107f0] "levelbean"
    //     0x86f75c: ldr             x2, [x2, #0x7f0]
    // 0x86f760: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f760: sub             lr, x0, #0xb4
    //     0x86f764: ldr             lr, [x21, lr, lsl #3]
    //     0x86f768: blr             lr
    // 0x86f76c: cmp             w0, NULL
    // 0x86f770: b.ne            #0x86f780
    // 0x86f774: nop             
    // 0x86f778: r3 = 0
    //     0x86f778: movz            x3, #0
    // 0x86f77c: b               #0x86f784
    // 0x86f780: mov             x3, x0
    // 0x86f784: mov             x0, x3
    // 0x86f788: stur            x3, [fp, #-0x70]
    // 0x86f78c: r2 = Null
    //     0x86f78c: mov             x2, NULL
    // 0x86f790: r1 = Null
    //     0x86f790: mov             x1, NULL
    // 0x86f794: branchIfSmi(r0, 0x86f7c4)
    //     0x86f794: tbz             w0, #0, #0x86f7c4
    //     0x86f798: nop             
    // 0x86f79c: r4 = LoadClassIdInstr(r0)
    //     0x86f79c: ldur            x4, [x0, #-1]
    //     0x86f7a0: ubfx            x4, x4, #0xc, #0x14
    // 0x86f7a4: sub             x4, x4, #0x3b
    // 0x86f7a8: cmp             x4, #1
    // 0x86f7ac: b.ls            #0x86f7c4
    // 0x86f7b0: nop             
    // 0x86f7b4: r8 = int
    //     0x86f7b4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f7b8: r3 = Null
    //     0x86f7b8: add             x3, PP, #0x10, lsl #12  ; [pp+0x107f8] Null
    //     0x86f7bc: ldr             x3, [x3, #0x7f8]
    // 0x86f7c0: r0 = int()
    //     0x86f7c0: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f7c4: r0 = LoadStaticField(0xb54)
    //     0x86f7c4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86f7c8: ldr             x0, [x0, #0x16a8]
    // 0x86f7cc: cmp             w0, NULL
    // 0x86f7d0: b.ne            #0x86f7e0
    // 0x86f7d4: nop             
    // 0x86f7d8: r0 = Null
    //     0x86f7d8: mov             x0, NULL
    // 0x86f7dc: b               #0x86f808
    // 0x86f7e0: r17 = 339
    //     0x86f7e0: movz            x17, #0x153
    // 0x86f7e4: ldr             w1, [x0, x17]
    // 0x86f7e8: DecompressPointer r1
    //     0x86f7e8: add             x1, x1, HEAP, lsl #32
    // 0x86f7ec: r0 = LoadClassIdInstr(r1)
    //     0x86f7ec: ldur            x0, [x1, #-1]
    //     0x86f7f0: ubfx            x0, x0, #0xc, #0x14
    // 0x86f7f4: r2 = "nametag"
    //     0x86f7f4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10808] "nametag"
    //     0x86f7f8: ldr             x2, [x2, #0x808]
    // 0x86f7fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86f7fc: sub             lr, x0, #0xb4
    //     0x86f800: ldr             lr, [x21, lr, lsl #3]
    //     0x86f804: blr             lr
    // 0x86f808: cmp             w0, NULL
    // 0x86f80c: b.ne            #0x86f81c
    // 0x86f810: nop             
    // 0x86f814: r4 = 0
    //     0x86f814: movz            x4, #0
    // 0x86f818: b               #0x86f820
    // 0x86f81c: mov             x4, x0
    // 0x86f820: ldur            x3, [fp, #-0x10]
    // 0x86f824: mov             x0, x4
    // 0x86f828: stur            x4, [fp, #-0x78]
    // 0x86f82c: r2 = Null
    //     0x86f82c: mov             x2, NULL
    // 0x86f830: r1 = Null
    //     0x86f830: mov             x1, NULL
    // 0x86f834: branchIfSmi(r0, 0x86f864)
    //     0x86f834: tbz             w0, #0, #0x86f864
    //     0x86f838: nop             
    // 0x86f83c: r4 = LoadClassIdInstr(r0)
    //     0x86f83c: ldur            x4, [x0, #-1]
    //     0x86f840: ubfx            x4, x4, #0xc, #0x14
    // 0x86f844: sub             x4, x4, #0x3b
    // 0x86f848: cmp             x4, #1
    // 0x86f84c: b.ls            #0x86f864
    // 0x86f850: nop             
    // 0x86f854: r8 = int
    //     0x86f854: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x86f858: r3 = Null
    //     0x86f858: add             x3, PP, #0x10, lsl #12  ; [pp+0x10810] Null
    //     0x86f85c: ldr             x3, [x3, #0x810]
    // 0x86f860: r0 = int()
    //     0x86f860: bl              #0x1524294  ; IsType_int_Stub
    // 0x86f864: ldur            x0, [fp, #-0x10]
    // 0x86f868: cmp             w0, #0x12
    // 0x86f86c: b.ne            #0x86f888
    // 0x86f870: nop             
    // 0x86f874: ldur            x16, [fp, #-8]
    // 0x86f878: r30 = "moneysack"
    //     0x86f878: add             lr, PP, #0x10, lsl #12  ; [pp+0x10628] "moneysack"
    //     0x86f87c: ldr             lr, [lr, #0x628]
    // 0x86f880: stp             lr, x16, [SP]
    // 0x86f884: r0 = add()
    //     0x86f884: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f888: ldur            x0, [fp, #-0x18]
    // 0x86f88c: cmp             w0, #0x12
    // 0x86f890: b.ne            #0x86f8ac
    // 0x86f894: nop             
    // 0x86f898: ldur            x16, [fp, #-8]
    // 0x86f89c: r30 = "expsnack"
    //     0x86f89c: add             lr, PP, #0x10, lsl #12  ; [pp+0x10640] "expsnack"
    //     0x86f8a0: ldr             lr, [lr, #0x640]
    // 0x86f8a4: stp             lr, x16, [SP]
    // 0x86f8a8: r0 = add()
    //     0x86f8a8: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f8ac: ldur            x0, [fp, #-0x30]
    // 0x86f8b0: cmp             w0, #0x12
    // 0x86f8b4: b.ne            #0x86f8d0
    // 0x86f8b8: nop             
    // 0x86f8bc: ldur            x16, [fp, #-8]
    // 0x86f8c0: r30 = "remoteatm"
    //     0x86f8c0: add             lr, PP, #0x10, lsl #12  ; [pp+0x10750] "remoteatm"
    //     0x86f8c4: ldr             lr, [lr, #0x750]
    // 0x86f8c8: stp             lr, x16, [SP]
    // 0x86f8cc: r0 = add()
    //     0x86f8cc: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f8d0: ldur            x0, [fp, #-0x40]
    // 0x86f8d4: cmp             w0, #0x12
    // 0x86f8d8: b.ne            #0x86f8f4
    // 0x86f8dc: nop             
    // 0x86f8e0: ldur            x16, [fp, #-8]
    // 0x86f8e4: r30 = "portal"
    //     0x86f8e4: add             lr, PP, #0x10, lsl #12  ; [pp+0x10768] "portal"
    //     0x86f8e8: ldr             lr, [lr, #0x768]
    // 0x86f8ec: stp             lr, x16, [SP]
    // 0x86f8f0: r0 = add()
    //     0x86f8f0: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f8f4: ldur            x0, [fp, #-0x48]
    // 0x86f8f8: cmp             w0, #0x12
    // 0x86f8fc: b.ne            #0x86f918
    // 0x86f900: nop             
    // 0x86f904: ldur            x16, [fp, #-8]
    // 0x86f908: r30 = "taxi"
    //     0x86f908: add             lr, PP, #0x10, lsl #12  ; [pp+0x10780] "taxi"
    //     0x86f90c: ldr             lr, [lr, #0x780]
    // 0x86f910: stp             lr, x16, [SP]
    // 0x86f914: r0 = add()
    //     0x86f914: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f918: ldur            x0, [fp, #-0x50]
    // 0x86f91c: cmp             w0, #0x12
    // 0x86f920: b.ne            #0x86f93c
    // 0x86f924: nop             
    // 0x86f928: ldur            x16, [fp, #-8]
    // 0x86f92c: r30 = "energydrink"
    //     0x86f92c: add             lr, PP, #0x10, lsl #12  ; [pp+0x10590] "energydrink"
    //     0x86f930: ldr             lr, [lr, #0x590]
    // 0x86f934: stp             lr, x16, [SP]
    // 0x86f938: r0 = add()
    //     0x86f938: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f93c: ldur            x0, [fp, #-0x58]
    // 0x86f940: cmp             w0, #0x12
    // 0x86f944: b.ne            #0x86f960
    // 0x86f948: nop             
    // 0x86f94c: ldur            x16, [fp, #-8]
    // 0x86f950: r30 = "seafoodbento"
    //     0x86f950: add             lr, PP, #0x10, lsl #12  ; [pp+0x107a8] "seafoodbento"
    //     0x86f954: ldr             lr, [lr, #0x7a8]
    // 0x86f958: stp             lr, x16, [SP]
    // 0x86f95c: r0 = add()
    //     0x86f95c: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f960: ldur            x0, [fp, #-0x60]
    // 0x86f964: cmp             w0, #0x12
    // 0x86f968: b.ne            #0x86f984
    // 0x86f96c: nop             
    // 0x86f970: ldur            x16, [fp, #-8]
    // 0x86f974: r30 = "chancecard"
    //     0x86f974: add             lr, PP, #0x10, lsl #12  ; [pp+0x107c0] "chancecard"
    //     0x86f978: ldr             lr, [lr, #0x7c0]
    // 0x86f97c: stp             lr, x16, [SP]
    // 0x86f980: r0 = add()
    //     0x86f980: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f984: ldur            x0, [fp, #-0x68]
    // 0x86f988: cmp             w0, #0x12
    // 0x86f98c: b.ne            #0x86f9a8
    // 0x86f990: nop             
    // 0x86f994: ldur            x16, [fp, #-8]
    // 0x86f998: r30 = "bathtub"
    //     0x86f998: add             lr, PP, #0x10, lsl #12  ; [pp+0x107d8] "bathtub"
    //     0x86f99c: ldr             lr, [lr, #0x7d8]
    // 0x86f9a0: stp             lr, x16, [SP]
    // 0x86f9a4: r0 = add()
    //     0x86f9a4: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f9a8: ldur            x0, [fp, #-0x70]
    // 0x86f9ac: cmp             w0, #0x12
    // 0x86f9b0: b.ne            #0x86f9cc
    // 0x86f9b4: nop             
    // 0x86f9b8: ldur            x16, [fp, #-8]
    // 0x86f9bc: r30 = "levelbean"
    //     0x86f9bc: add             lr, PP, #0x10, lsl #12  ; [pp+0x107f0] "levelbean"
    //     0x86f9c0: ldr             lr, [lr, #0x7f0]
    // 0x86f9c4: stp             lr, x16, [SP]
    // 0x86f9c8: r0 = add()
    //     0x86f9c8: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f9cc: ldur            x0, [fp, #-0x78]
    // 0x86f9d0: cmp             w0, #0x12
    // 0x86f9d4: b.ne            #0x86f9f0
    // 0x86f9d8: nop             
    // 0x86f9dc: ldur            x16, [fp, #-8]
    // 0x86f9e0: r30 = "nametag"
    //     0x86f9e0: add             lr, PP, #0x10, lsl #12  ; [pp+0x10808] "nametag"
    //     0x86f9e4: ldr             lr, [lr, #0x808]
    // 0x86f9e8: stp             lr, x16, [SP]
    // 0x86f9ec: r0 = add()
    //     0x86f9ec: bl              #0x942088  ; [dart:core] _GrowableList::add
    // 0x86f9f0: ldur            x1, [fp, #-8]
    // 0x86f9f4: r0 = isNotEmpty()
    //     0x86f9f4: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x86f9f8: tbnz            w0, #4, #0x86fa5c
    // 0x86f9fc: nop             
    // 0x86fa00: ldur            x1, [fp, #-8]
    // 0x86fa04: r0 = shuffle()
    //     0x86fa04: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86fa08: mov             x1, x0
    // 0x86fa0c: r0 = first()
    //     0x86fa0c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86fa10: mov             x3, x0
    // 0x86fa14: r2 = Null
    //     0x86fa14: mov             x2, NULL
    // 0x86fa18: r1 = Null
    //     0x86fa18: mov             x1, NULL
    // 0x86fa1c: stur            x3, [fp, #-8]
    // 0x86fa20: r4 = 59
    //     0x86fa20: movz            x4, #0x3b
    // 0x86fa24: branchIfSmi(r0, 0x86fa34)
    //     0x86fa24: tbz             w0, #0, #0x86fa34
    //     0x86fa28: nop             
    // 0x86fa2c: r4 = LoadClassIdInstr(r0)
    //     0x86fa2c: ldur            x4, [x0, #-1]
    //     0x86fa30: ubfx            x4, x4, #0xc, #0x14
    // 0x86fa34: sub             x4, x4, #0x5d
    // 0x86fa38: cmp             x4, #1
    // 0x86fa3c: b.ls            #0x86fa54
    // 0x86fa40: nop             
    // 0x86fa44: r8 = String
    //     0x86fa44: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86fa48: r3 = Null
    //     0x86fa48: add             x3, PP, #0x10, lsl #12  ; [pp+0x10820] Null
    //     0x86fa4c: ldr             x3, [x3, #0x820]
    // 0x86fa50: r0 = String()
    //     0x86fa50: bl              #0x1523244  ; IsType_String_Stub
    // 0x86fa54: ldur            x0, [fp, #-8]
    // 0x86fa58: b               #0x8838b4
    // 0x86fa5c: r0 = "normalTrade"
    //     0x86fa5c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10830] "normalTrade"
    //     0x86fa60: ldr             x0, [x0, #0x830]
    // 0x86fa64: b               #0x8838b4
    // 0x86fa68: r16 = "punchingHighest"
    //     0x86fa68: add             x16, PP, #0x10, lsl #12  ; [pp+0x10838] "punchingHighest"
    //     0x86fa6c: ldr             x16, [x16, #0x838]
    // 0x86fa70: ldur            lr, [fp, #-0x28]
    // 0x86fa74: stp             lr, x16, [SP]
    // 0x86fa78: r0 = ==()
    //     0x86fa78: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86fa7c: tbnz            w0, #4, #0x86fbd4
    // 0x86fa80: nop             
    // 0x86fa84: r0 = LoadStaticField(0xb54)
    //     0x86fa84: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fa88: ldr             x0, [x0, #0x16a8]
    // 0x86fa8c: cmp             w0, NULL
    // 0x86fa90: b.eq            #0x86fbc8
    // 0x86fa94: nop             
    // 0x86fa98: r17 = 359
    //     0x86fa98: movz            x17, #0x167
    // 0x86fa9c: ldr             w1, [x0, x17]
    // 0x86faa0: DecompressPointer r1
    //     0x86faa0: add             x1, x1, HEAP, lsl #32
    // 0x86faa4: r0 = LoadClassIdInstr(r1)
    //     0x86faa4: ldur            x0, [x1, #-1]
    //     0x86faa8: ubfx            x0, x0, #0xc, #0x14
    // 0x86faac: r2 = "mg1"
    //     0x86faac: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fab0: ldr             x2, [x2, #0x840]
    // 0x86fab4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fab4: sub             lr, x0, #0xb4
    //     0x86fab8: ldr             lr, [x21, lr, lsl #3]
    //     0x86fabc: blr             lr
    // 0x86fac0: cmp             w0, NULL
    // 0x86fac4: b.eq            #0x86fbc8
    // 0x86fac8: nop             
    // 0x86facc: r0 = LoadStaticField(0xb54)
    //     0x86facc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fad0: ldr             x0, [x0, #0x16a8]
    // 0x86fad4: cmp             w0, NULL
    // 0x86fad8: b.ne            #0x86fae8
    // 0x86fadc: nop             
    // 0x86fae0: r0 = Null
    //     0x86fae0: mov             x0, NULL
    // 0x86fae4: b               #0x86fb10
    // 0x86fae8: r17 = 359
    //     0x86fae8: movz            x17, #0x167
    // 0x86faec: ldr             w1, [x0, x17]
    // 0x86faf0: DecompressPointer r1
    //     0x86faf0: add             x1, x1, HEAP, lsl #32
    // 0x86faf4: r0 = LoadClassIdInstr(r1)
    //     0x86faf4: ldur            x0, [x1, #-1]
    //     0x86faf8: ubfx            x0, x0, #0xc, #0x14
    // 0x86fafc: r2 = "mg1"
    //     0x86fafc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fb00: ldr             x2, [x2, #0x840]
    // 0x86fb04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fb04: sub             lr, x0, #0xb4
    //     0x86fb08: ldr             lr, [x21, lr, lsl #3]
    //     0x86fb0c: blr             lr
    // 0x86fb10: r16 = 180
    //     0x86fb10: movz            x16, #0xb4
    // 0x86fb14: stp             x16, x0, [SP]
    // 0x86fb18: r4 = 0
    //     0x86fb18: movz            x4, #0
    // 0x86fb1c: ldr             x0, [SP, #8]
    // 0x86fb20: r16 = UnlinkedCall_0x7b3c80
    //     0x86fb20: add             x16, PP, #0x10, lsl #12  ; [pp+0x10848] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fb24: add             x16, x16, #0x848
    // 0x86fb28: ldp             x5, lr, [x16]
    // 0x86fb2c: blr             lr
    // 0x86fb30: tbnz            w0, #4, #0x86fb44
    // 0x86fb34: nop             
    // 0x86fb38: r0 = "fundBestPerform"
    //     0x86fb38: add             x0, PP, #0x10, lsl #12  ; [pp+0x10858] "fundBestPerform"
    //     0x86fb3c: ldr             x0, [x0, #0x858]
    // 0x86fb40: b               #0x8838b4
    // 0x86fb44: r0 = LoadStaticField(0xb54)
    //     0x86fb44: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fb48: ldr             x0, [x0, #0x16a8]
    // 0x86fb4c: cmp             w0, NULL
    // 0x86fb50: b.ne            #0x86fb60
    // 0x86fb54: nop             
    // 0x86fb58: r0 = Null
    //     0x86fb58: mov             x0, NULL
    // 0x86fb5c: b               #0x86fb88
    // 0x86fb60: r17 = 359
    //     0x86fb60: movz            x17, #0x167
    // 0x86fb64: ldr             w1, [x0, x17]
    // 0x86fb68: DecompressPointer r1
    //     0x86fb68: add             x1, x1, HEAP, lsl #32
    // 0x86fb6c: r0 = LoadClassIdInstr(r1)
    //     0x86fb6c: ldur            x0, [x1, #-1]
    //     0x86fb70: ubfx            x0, x0, #0xc, #0x14
    // 0x86fb74: r2 = "mg1"
    //     0x86fb74: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fb78: ldr             x2, [x2, #0x840]
    // 0x86fb7c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fb7c: sub             lr, x0, #0xb4
    //     0x86fb80: ldr             lr, [x21, lr, lsl #3]
    //     0x86fb84: blr             lr
    // 0x86fb88: r16 = 120
    //     0x86fb88: movz            x16, #0x78
    // 0x86fb8c: stp             x16, x0, [SP]
    // 0x86fb90: r4 = 0
    //     0x86fb90: movz            x4, #0
    // 0x86fb94: ldr             x0, [SP, #8]
    // 0x86fb98: r16 = UnlinkedCall_0x7b3c80
    //     0x86fb98: add             x16, PP, #0x10, lsl #12  ; [pp+0x10860] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fb9c: add             x16, x16, #0x860
    // 0x86fba0: ldp             x5, lr, [x16]
    // 0x86fba4: blr             lr
    // 0x86fba8: tbnz            w0, #4, #0x86fbbc
    // 0x86fbac: nop             
    // 0x86fbb0: r0 = "fundGoodPerform"
    //     0x86fbb0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10870] "fundGoodPerform"
    //     0x86fbb4: ldr             x0, [x0, #0x870]
    // 0x86fbb8: b               #0x8838b4
    // 0x86fbbc: r0 = "fundBadPerform"
    //     0x86fbbc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x86fbc0: ldr             x0, [x0, #0x878]
    // 0x86fbc4: b               #0x8838b4
    // 0x86fbc8: r0 = "fundBadPerform"
    //     0x86fbc8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x86fbcc: ldr             x0, [x0, #0x878]
    // 0x86fbd0: b               #0x8838b4
    // 0x86fbd4: r16 = "punchingHighestPetition"
    //     0x86fbd4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10880] "punchingHighestPetition"
    //     0x86fbd8: ldr             x16, [x16, #0x880]
    // 0x86fbdc: ldur            lr, [fp, #-0x28]
    // 0x86fbe0: stp             lr, x16, [SP]
    // 0x86fbe4: r0 = ==()
    //     0x86fbe4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86fbe8: tbnz            w0, #4, #0x86fd40
    // 0x86fbec: nop             
    // 0x86fbf0: r0 = LoadStaticField(0xb54)
    //     0x86fbf0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fbf4: ldr             x0, [x0, #0x16a8]
    // 0x86fbf8: cmp             w0, NULL
    // 0x86fbfc: b.eq            #0x86fd34
    // 0x86fc00: nop             
    // 0x86fc04: r17 = 359
    //     0x86fc04: movz            x17, #0x167
    // 0x86fc08: ldr             w1, [x0, x17]
    // 0x86fc0c: DecompressPointer r1
    //     0x86fc0c: add             x1, x1, HEAP, lsl #32
    // 0x86fc10: r0 = LoadClassIdInstr(r1)
    //     0x86fc10: ldur            x0, [x1, #-1]
    //     0x86fc14: ubfx            x0, x0, #0xc, #0x14
    // 0x86fc18: r2 = "mg1"
    //     0x86fc18: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fc1c: ldr             x2, [x2, #0x840]
    // 0x86fc20: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fc20: sub             lr, x0, #0xb4
    //     0x86fc24: ldr             lr, [x21, lr, lsl #3]
    //     0x86fc28: blr             lr
    // 0x86fc2c: cmp             w0, NULL
    // 0x86fc30: b.eq            #0x86fd34
    // 0x86fc34: nop             
    // 0x86fc38: r0 = LoadStaticField(0xb54)
    //     0x86fc38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fc3c: ldr             x0, [x0, #0x16a8]
    // 0x86fc40: cmp             w0, NULL
    // 0x86fc44: b.ne            #0x86fc54
    // 0x86fc48: nop             
    // 0x86fc4c: r0 = Null
    //     0x86fc4c: mov             x0, NULL
    // 0x86fc50: b               #0x86fc7c
    // 0x86fc54: r17 = 359
    //     0x86fc54: movz            x17, #0x167
    // 0x86fc58: ldr             w1, [x0, x17]
    // 0x86fc5c: DecompressPointer r1
    //     0x86fc5c: add             x1, x1, HEAP, lsl #32
    // 0x86fc60: r0 = LoadClassIdInstr(r1)
    //     0x86fc60: ldur            x0, [x1, #-1]
    //     0x86fc64: ubfx            x0, x0, #0xc, #0x14
    // 0x86fc68: r2 = "mg1"
    //     0x86fc68: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fc6c: ldr             x2, [x2, #0x840]
    // 0x86fc70: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fc70: sub             lr, x0, #0xb4
    //     0x86fc74: ldr             lr, [x21, lr, lsl #3]
    //     0x86fc78: blr             lr
    // 0x86fc7c: r16 = 200
    //     0x86fc7c: movz            x16, #0xc8
    // 0x86fc80: stp             x16, x0, [SP]
    // 0x86fc84: r4 = 0
    //     0x86fc84: movz            x4, #0
    // 0x86fc88: ldr             x0, [SP, #8]
    // 0x86fc8c: r16 = UnlinkedCall_0x7b3c80
    //     0x86fc8c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10888] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fc90: add             x16, x16, #0x888
    // 0x86fc94: ldp             x5, lr, [x16]
    // 0x86fc98: blr             lr
    // 0x86fc9c: tbnz            w0, #4, #0x86fcb0
    // 0x86fca0: nop             
    // 0x86fca4: r0 = "petitionBestPerform"
    //     0x86fca4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10898] "petitionBestPerform"
    //     0x86fca8: ldr             x0, [x0, #0x898]
    // 0x86fcac: b               #0x8838b4
    // 0x86fcb0: r0 = LoadStaticField(0xb54)
    //     0x86fcb0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fcb4: ldr             x0, [x0, #0x16a8]
    // 0x86fcb8: cmp             w0, NULL
    // 0x86fcbc: b.ne            #0x86fccc
    // 0x86fcc0: nop             
    // 0x86fcc4: r0 = Null
    //     0x86fcc4: mov             x0, NULL
    // 0x86fcc8: b               #0x86fcf4
    // 0x86fccc: r17 = 359
    //     0x86fccc: movz            x17, #0x167
    // 0x86fcd0: ldr             w1, [x0, x17]
    // 0x86fcd4: DecompressPointer r1
    //     0x86fcd4: add             x1, x1, HEAP, lsl #32
    // 0x86fcd8: r0 = LoadClassIdInstr(r1)
    //     0x86fcd8: ldur            x0, [x1, #-1]
    //     0x86fcdc: ubfx            x0, x0, #0xc, #0x14
    // 0x86fce0: r2 = "mg1"
    //     0x86fce0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10840] "mg1"
    //     0x86fce4: ldr             x2, [x2, #0x840]
    // 0x86fce8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fce8: sub             lr, x0, #0xb4
    //     0x86fcec: ldr             lr, [x21, lr, lsl #3]
    //     0x86fcf0: blr             lr
    // 0x86fcf4: r16 = 160
    //     0x86fcf4: movz            x16, #0xa0
    // 0x86fcf8: stp             x16, x0, [SP]
    // 0x86fcfc: r4 = 0
    //     0x86fcfc: movz            x4, #0
    // 0x86fd00: ldr             x0, [SP, #8]
    // 0x86fd04: r16 = UnlinkedCall_0x7b3c80
    //     0x86fd04: add             x16, PP, #0x10, lsl #12  ; [pp+0x108a0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fd08: add             x16, x16, #0x8a0
    // 0x86fd0c: ldp             x5, lr, [x16]
    // 0x86fd10: blr             lr
    // 0x86fd14: tbnz            w0, #4, #0x86fd28
    // 0x86fd18: nop             
    // 0x86fd1c: r0 = "petitionGoodPerform"
    //     0x86fd1c: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b0] "petitionGoodPerform"
    //     0x86fd20: ldr             x0, [x0, #0x8b0]
    // 0x86fd24: b               #0x8838b4
    // 0x86fd28: r0 = "petitionBadPerform"
    //     0x86fd28: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x86fd2c: ldr             x0, [x0, #0x8b8]
    // 0x86fd30: b               #0x8838b4
    // 0x86fd34: r0 = "petitionBadPerform"
    //     0x86fd34: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x86fd38: ldr             x0, [x0, #0x8b8]
    // 0x86fd3c: b               #0x8838b4
    // 0x86fd40: r16 = "dancingHighest"
    //     0x86fd40: add             x16, PP, #0x10, lsl #12  ; [pp+0x108c0] "dancingHighest"
    //     0x86fd44: ldr             x16, [x16, #0x8c0]
    // 0x86fd48: ldur            lr, [fp, #-0x28]
    // 0x86fd4c: stp             lr, x16, [SP]
    // 0x86fd50: r0 = ==()
    //     0x86fd50: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86fd54: tbnz            w0, #4, #0x86feac
    // 0x86fd58: nop             
    // 0x86fd5c: r0 = LoadStaticField(0xb54)
    //     0x86fd5c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fd60: ldr             x0, [x0, #0x16a8]
    // 0x86fd64: cmp             w0, NULL
    // 0x86fd68: b.eq            #0x86fea0
    // 0x86fd6c: nop             
    // 0x86fd70: r17 = 359
    //     0x86fd70: movz            x17, #0x167
    // 0x86fd74: ldr             w1, [x0, x17]
    // 0x86fd78: DecompressPointer r1
    //     0x86fd78: add             x1, x1, HEAP, lsl #32
    // 0x86fd7c: r0 = LoadClassIdInstr(r1)
    //     0x86fd7c: ldur            x0, [x1, #-1]
    //     0x86fd80: ubfx            x0, x0, #0xc, #0x14
    // 0x86fd84: r2 = "mg2"
    //     0x86fd84: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x86fd88: ldr             x2, [x2, #0x8c8]
    // 0x86fd8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fd8c: sub             lr, x0, #0xb4
    //     0x86fd90: ldr             lr, [x21, lr, lsl #3]
    //     0x86fd94: blr             lr
    // 0x86fd98: cmp             w0, NULL
    // 0x86fd9c: b.eq            #0x86fea0
    // 0x86fda0: nop             
    // 0x86fda4: r0 = LoadStaticField(0xb54)
    //     0x86fda4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fda8: ldr             x0, [x0, #0x16a8]
    // 0x86fdac: cmp             w0, NULL
    // 0x86fdb0: b.ne            #0x86fdc0
    // 0x86fdb4: nop             
    // 0x86fdb8: r0 = Null
    //     0x86fdb8: mov             x0, NULL
    // 0x86fdbc: b               #0x86fde8
    // 0x86fdc0: r17 = 359
    //     0x86fdc0: movz            x17, #0x167
    // 0x86fdc4: ldr             w1, [x0, x17]
    // 0x86fdc8: DecompressPointer r1
    //     0x86fdc8: add             x1, x1, HEAP, lsl #32
    // 0x86fdcc: r0 = LoadClassIdInstr(r1)
    //     0x86fdcc: ldur            x0, [x1, #-1]
    //     0x86fdd0: ubfx            x0, x0, #0xc, #0x14
    // 0x86fdd4: r2 = "mg2"
    //     0x86fdd4: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x86fdd8: ldr             x2, [x2, #0x8c8]
    // 0x86fddc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fddc: sub             lr, x0, #0xb4
    //     0x86fde0: ldr             lr, [x21, lr, lsl #3]
    //     0x86fde4: blr             lr
    // 0x86fde8: r16 = 180
    //     0x86fde8: movz            x16, #0xb4
    // 0x86fdec: stp             x16, x0, [SP]
    // 0x86fdf0: r4 = 0
    //     0x86fdf0: movz            x4, #0
    // 0x86fdf4: ldr             x0, [SP, #8]
    // 0x86fdf8: r16 = UnlinkedCall_0x7b3c80
    //     0x86fdf8: add             x16, PP, #0x10, lsl #12  ; [pp+0x108d0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fdfc: add             x16, x16, #0x8d0
    // 0x86fe00: ldp             x5, lr, [x16]
    // 0x86fe04: blr             lr
    // 0x86fe08: tbnz            w0, #4, #0x86fe1c
    // 0x86fe0c: nop             
    // 0x86fe10: r0 = "fundBestPerform"
    //     0x86fe10: add             x0, PP, #0x10, lsl #12  ; [pp+0x10858] "fundBestPerform"
    //     0x86fe14: ldr             x0, [x0, #0x858]
    // 0x86fe18: b               #0x8838b4
    // 0x86fe1c: r0 = LoadStaticField(0xb54)
    //     0x86fe1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x86fe20: ldr             x0, [x0, #0x16a8]
    // 0x86fe24: cmp             w0, NULL
    // 0x86fe28: b.ne            #0x86fe38
    // 0x86fe2c: nop             
    // 0x86fe30: r0 = Null
    //     0x86fe30: mov             x0, NULL
    // 0x86fe34: b               #0x86fe60
    // 0x86fe38: r17 = 359
    //     0x86fe38: movz            x17, #0x167
    // 0x86fe3c: ldr             w1, [x0, x17]
    // 0x86fe40: DecompressPointer r1
    //     0x86fe40: add             x1, x1, HEAP, lsl #32
    // 0x86fe44: r0 = LoadClassIdInstr(r1)
    //     0x86fe44: ldur            x0, [x1, #-1]
    //     0x86fe48: ubfx            x0, x0, #0xc, #0x14
    // 0x86fe4c: r2 = "mg2"
    //     0x86fe4c: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x86fe50: ldr             x2, [x2, #0x8c8]
    // 0x86fe54: r0 = GDT[cid_x0 + -0xb4]()
    //     0x86fe54: sub             lr, x0, #0xb4
    //     0x86fe58: ldr             lr, [x21, lr, lsl #3]
    //     0x86fe5c: blr             lr
    // 0x86fe60: r16 = 120
    //     0x86fe60: movz            x16, #0x78
    // 0x86fe64: stp             x16, x0, [SP]
    // 0x86fe68: r4 = 0
    //     0x86fe68: movz            x4, #0
    // 0x86fe6c: ldr             x0, [SP, #8]
    // 0x86fe70: r16 = UnlinkedCall_0x7b3c80
    //     0x86fe70: add             x16, PP, #0x10, lsl #12  ; [pp+0x108e0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x86fe74: add             x16, x16, #0x8e0
    // 0x86fe78: ldp             x5, lr, [x16]
    // 0x86fe7c: blr             lr
    // 0x86fe80: tbnz            w0, #4, #0x86fe94
    // 0x86fe84: nop             
    // 0x86fe88: r0 = "fundGoodPerform"
    //     0x86fe88: add             x0, PP, #0x10, lsl #12  ; [pp+0x10870] "fundGoodPerform"
    //     0x86fe8c: ldr             x0, [x0, #0x870]
    // 0x86fe90: b               #0x8838b4
    // 0x86fe94: r0 = "fundBadPerform"
    //     0x86fe94: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x86fe98: ldr             x0, [x0, #0x878]
    // 0x86fe9c: b               #0x8838b4
    // 0x86fea0: r0 = "fundBadPerform"
    //     0x86fea0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x86fea4: ldr             x0, [x0, #0x878]
    // 0x86fea8: b               #0x8838b4
    // 0x86feac: r16 = "flashDeal"
    //     0x86feac: add             x16, PP, #0xf, lsl #12  ; [pp+0xfbc8] "flashDeal"
    //     0x86feb0: ldr             x16, [x16, #0xbc8]
    // 0x86feb4: ldur            lr, [fp, #-0x28]
    // 0x86feb8: stp             lr, x16, [SP]
    // 0x86febc: r0 = ==()
    //     0x86febc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x86fec0: tbnz            w0, #4, #0x870440
    // 0x86fec4: nop             
    // 0x86fec8: r1 = Null
    //     0x86fec8: mov             x1, NULL
    // 0x86fecc: r0 = Random()
    //     0x86fecc: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x86fed0: mov             x1, x0
    // 0x86fed4: r2 = 100
    //     0x86fed4: movz            x2, #0x64
    // 0x86fed8: r0 = nextInt()
    //     0x86fed8: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x86fedc: stur            x0, [fp, #-0x38]
    // 0x86fee0: r1 = 1
    //     0x86fee0: movz            x1, #0x1
    // 0x86fee4: r0 = AllocateContext()
    //     0x86fee4: bl              #0x15014c4  ; AllocateContextStub
    // 0x86fee8: stur            x0, [fp, #-8]
    // 0x86feec: StoreField: r0->field_f = rZR
    //     0x86feec: stur            wzr, [x0, #0xf]
    // 0x86fef0: r1 = LoadStaticField(0xb54)
    //     0x86fef0: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x86fef4: ldr             x1, [x1, #0x16a8]
    // 0x86fef8: cmp             w1, NULL
    // 0x86fefc: b.ne            #0x86ff0c
    // 0x86ff00: nop             
    // 0x86ff04: r1 = Null
    //     0x86ff04: mov             x1, NULL
    // 0x86ff08: b               #0x86ff1c
    // 0x86ff0c: r17 = 395
    //     0x86ff0c: movz            x17, #0x18b
    // 0x86ff10: ldr             w2, [x1, x17]
    // 0x86ff14: DecompressPointer r2
    //     0x86ff14: add             x2, x2, HEAP, lsl #32
    // 0x86ff18: mov             x1, x2
    // 0x86ff1c: cmp             w1, NULL
    // 0x86ff20: b.ne            #0x86ff3c
    // 0x86ff24: nop             
    // 0x86ff28: ldr             x16, [THR, #0x88]  ; THR::empty_array
    // 0x86ff2c: stp             x16, NULL, [SP]
    // 0x86ff30: r0 = Map._fromLiteral()
    //     0x86ff30: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0x86ff34: mov             x2, x0
    // 0x86ff38: b               #0x86ff40
    // 0x86ff3c: mov             x2, x1
    // 0x86ff40: ldur            x0, [fp, #-8]
    // 0x86ff44: r1 = <String, Timestamp>
    //     0x86ff44: add             x1, PP, #0x10, lsl #12  ; [pp+0x108f0] TypeArguments: <String, Timestamp>
    //     0x86ff48: ldr             x1, [x1, #0x8f0]
    // 0x86ff4c: r0 = LinkedHashMap.from()
    //     0x86ff4c: bl              #0x858348  ; [dart:collection] LinkedHashMap::LinkedHashMap.from
    // 0x86ff50: ldur            x2, [fp, #-8]
    // 0x86ff54: r1 = Function '<anonymous closure>': static.
    //     0x86ff54: add             x1, PP, #0x10, lsl #12  ; [pp+0x108f8] AnonymousClosure: static (0x8dc160), in [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventString (0x86a3d4)
    //     0x86ff58: ldr             x1, [x1, #0x8f8]
    // 0x86ff5c: stur            x0, [fp, #-0x10]
    // 0x86ff60: r0 = AllocateClosure()
    //     0x86ff60: bl              #0x1501888  ; AllocateClosureStub
    // 0x86ff64: ldur            x1, [fp, #-0x10]
    // 0x86ff68: mov             x2, x0
    // 0x86ff6c: r0 = forEach()
    //     0x86ff6c: bl              #0x1478cc0  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::forEach
    // 0x86ff70: ldur            x0, [fp, #-8]
    // 0x86ff74: LoadField: r1 = r0->field_f
    //     0x86ff74: ldur            w1, [x0, #0xf]
    // 0x86ff78: DecompressPointer r1
    //     0x86ff78: add             x1, x1, HEAP, lsl #32
    // 0x86ff7c: cbnz            w1, #0x87017c
    // 0x86ff80: nop             
    // 0x86ff84: ldur            x1, [fp, #-0x38]
    // 0x86ff88: cmp             x1, #0x32
    // 0x86ff8c: b.ge            #0x870008
    // 0x86ff90: nop             
    // 0x86ff94: r1 = Null
    //     0x86ff94: mov             x1, NULL
    // 0x86ff98: r2 = "reward1"
    //     0x86ff98: add             x2, PP, #0x10, lsl #12  ; [pp+0x10900] "reward1"
    //     0x86ff9c: ldr             x2, [x2, #0x900]
    // 0x86ffa0: r3 = "reward2"
    //     0x86ffa0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10908] "reward2"
    //     0x86ffa4: ldr             x3, [x3, #0x908]
    // 0x86ffa8: r0 = _GrowableList._literal2()
    //     0x86ffa8: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x86ffac: mov             x1, x0
    // 0x86ffb0: r0 = shuffle()
    //     0x86ffb0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x86ffb4: mov             x1, x0
    // 0x86ffb8: r0 = first()
    //     0x86ffb8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x86ffbc: mov             x3, x0
    // 0x86ffc0: r2 = Null
    //     0x86ffc0: mov             x2, NULL
    // 0x86ffc4: r1 = Null
    //     0x86ffc4: mov             x1, NULL
    // 0x86ffc8: stur            x3, [fp, #-0x10]
    // 0x86ffcc: r4 = 59
    //     0x86ffcc: movz            x4, #0x3b
    // 0x86ffd0: branchIfSmi(r0, 0x86ffe0)
    //     0x86ffd0: tbz             w0, #0, #0x86ffe0
    //     0x86ffd4: nop             
    // 0x86ffd8: r4 = LoadClassIdInstr(r0)
    //     0x86ffd8: ldur            x4, [x0, #-1]
    //     0x86ffdc: ubfx            x4, x4, #0xc, #0x14
    // 0x86ffe0: sub             x4, x4, #0x5d
    // 0x86ffe4: cmp             x4, #1
    // 0x86ffe8: b.ls            #0x870000
    // 0x86ffec: nop             
    // 0x86fff0: r8 = String
    //     0x86fff0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x86fff4: r3 = Null
    //     0x86fff4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10910] Null
    //     0x86fff8: ldr             x3, [x3, #0x910]
    // 0x86fffc: r0 = String()
    //     0x86fffc: bl              #0x1523244  ; IsType_String_Stub
    // 0x870000: ldur            x0, [fp, #-0x10]
    // 0x870004: b               #0x8838b4
    // 0x870008: cmp             x1, #0x4b
    // 0x87000c: b.ge            #0x870088
    // 0x870010: nop             
    // 0x870014: r1 = Null
    //     0x870014: mov             x1, NULL
    // 0x870018: r2 = "reward3"
    //     0x870018: add             x2, PP, #0x10, lsl #12  ; [pp+0x10920] "reward3"
    //     0x87001c: ldr             x2, [x2, #0x920]
    // 0x870020: r3 = "reward4"
    //     0x870020: add             x3, PP, #0x10, lsl #12  ; [pp+0x10928] "reward4"
    //     0x870024: ldr             x3, [x3, #0x928]
    // 0x870028: r0 = _GrowableList._literal2()
    //     0x870028: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x87002c: mov             x1, x0
    // 0x870030: r0 = shuffle()
    //     0x870030: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x870034: mov             x1, x0
    // 0x870038: r0 = first()
    //     0x870038: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x87003c: mov             x3, x0
    // 0x870040: r2 = Null
    //     0x870040: mov             x2, NULL
    // 0x870044: r1 = Null
    //     0x870044: mov             x1, NULL
    // 0x870048: stur            x3, [fp, #-0x10]
    // 0x87004c: r4 = 59
    //     0x87004c: movz            x4, #0x3b
    // 0x870050: branchIfSmi(r0, 0x870060)
    //     0x870050: tbz             w0, #0, #0x870060
    //     0x870054: nop             
    // 0x870058: r4 = LoadClassIdInstr(r0)
    //     0x870058: ldur            x4, [x0, #-1]
    //     0x87005c: ubfx            x4, x4, #0xc, #0x14
    // 0x870060: sub             x4, x4, #0x5d
    // 0x870064: cmp             x4, #1
    // 0x870068: b.ls            #0x870080
    // 0x87006c: nop             
    // 0x870070: r8 = String
    //     0x870070: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x870074: r3 = Null
    //     0x870074: add             x3, PP, #0x10, lsl #12  ; [pp+0x10930] Null
    //     0x870078: ldr             x3, [x3, #0x930]
    // 0x87007c: r0 = String()
    //     0x87007c: bl              #0x1523244  ; IsType_String_Stub
    // 0x870080: ldur            x0, [fp, #-0x10]
    // 0x870084: b               #0x8838b4
    // 0x870088: cmp             x1, #0x5a
    // 0x87008c: b.ge            #0x870108
    // 0x870090: nop             
    // 0x870094: r1 = Null
    //     0x870094: mov             x1, NULL
    // 0x870098: r2 = "reward5"
    //     0x870098: add             x2, PP, #0x10, lsl #12  ; [pp+0x10940] "reward5"
    //     0x87009c: ldr             x2, [x2, #0x940]
    // 0x8700a0: r3 = "reward6"
    //     0x8700a0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10948] "reward6"
    //     0x8700a4: ldr             x3, [x3, #0x948]
    // 0x8700a8: r0 = _GrowableList._literal2()
    //     0x8700a8: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x8700ac: mov             x1, x0
    // 0x8700b0: r0 = shuffle()
    //     0x8700b0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8700b4: mov             x1, x0
    // 0x8700b8: r0 = first()
    //     0x8700b8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8700bc: mov             x3, x0
    // 0x8700c0: r2 = Null
    //     0x8700c0: mov             x2, NULL
    // 0x8700c4: r1 = Null
    //     0x8700c4: mov             x1, NULL
    // 0x8700c8: stur            x3, [fp, #-0x10]
    // 0x8700cc: r4 = 59
    //     0x8700cc: movz            x4, #0x3b
    // 0x8700d0: branchIfSmi(r0, 0x8700e0)
    //     0x8700d0: tbz             w0, #0, #0x8700e0
    //     0x8700d4: nop             
    // 0x8700d8: r4 = LoadClassIdInstr(r0)
    //     0x8700d8: ldur            x4, [x0, #-1]
    //     0x8700dc: ubfx            x4, x4, #0xc, #0x14
    // 0x8700e0: sub             x4, x4, #0x5d
    // 0x8700e4: cmp             x4, #1
    // 0x8700e8: b.ls            #0x870100
    // 0x8700ec: nop             
    // 0x8700f0: r8 = String
    //     0x8700f0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8700f4: r3 = Null
    //     0x8700f4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10950] Null
    //     0x8700f8: ldr             x3, [x3, #0x950]
    // 0x8700fc: r0 = String()
    //     0x8700fc: bl              #0x1523244  ; IsType_String_Stub
    // 0x870100: ldur            x0, [fp, #-0x10]
    // 0x870104: b               #0x8838b4
    // 0x870108: r1 = Null
    //     0x870108: mov             x1, NULL
    // 0x87010c: r2 = "reward7"
    //     0x87010c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10960] "reward7"
    //     0x870110: ldr             x2, [x2, #0x960]
    // 0x870114: r3 = "reward8"
    //     0x870114: add             x3, PP, #0x10, lsl #12  ; [pp+0x10968] "reward8"
    //     0x870118: ldr             x3, [x3, #0x968]
    // 0x87011c: r0 = _GrowableList._literal2()
    //     0x87011c: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x870120: mov             x1, x0
    // 0x870124: r0 = shuffle()
    //     0x870124: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x870128: mov             x1, x0
    // 0x87012c: r0 = first()
    //     0x87012c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x870130: mov             x3, x0
    // 0x870134: r2 = Null
    //     0x870134: mov             x2, NULL
    // 0x870138: r1 = Null
    //     0x870138: mov             x1, NULL
    // 0x87013c: stur            x3, [fp, #-0x10]
    // 0x870140: r4 = 59
    //     0x870140: movz            x4, #0x3b
    // 0x870144: branchIfSmi(r0, 0x870154)
    //     0x870144: tbz             w0, #0, #0x870154
    //     0x870148: nop             
    // 0x87014c: r4 = LoadClassIdInstr(r0)
    //     0x87014c: ldur            x4, [x0, #-1]
    //     0x870150: ubfx            x4, x4, #0xc, #0x14
    // 0x870154: sub             x4, x4, #0x5d
    // 0x870158: cmp             x4, #1
    // 0x87015c: b.ls            #0x870174
    // 0x870160: nop             
    // 0x870164: r8 = String
    //     0x870164: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x870168: r3 = Null
    //     0x870168: add             x3, PP, #0x10, lsl #12  ; [pp+0x10970] Null
    //     0x87016c: ldr             x3, [x3, #0x970]
    // 0x870170: r0 = String()
    //     0x870170: bl              #0x1523244  ; IsType_String_Stub
    // 0x870174: ldur            x0, [fp, #-0x10]
    // 0x870178: b               #0x8838b4
    // 0x87017c: ldur            x1, [fp, #-0x38]
    // 0x870180: LoadField: r2 = r0->field_f
    //     0x870180: ldur            w2, [x0, #0xf]
    // 0x870184: DecompressPointer r2
    //     0x870184: add             x2, x2, HEAP, lsl #32
    // 0x870188: r3 = LoadInt32Instr(r2)
    //     0x870188: sbfx            x3, x2, #1, #0x1f
    //     0x87018c: tbz             w2, #0, #0x870198
    //     0x870190: nop             
    //     0x870194: ldur            x3, [x2, #7]
    // 0x870198: cmp             x3, #0
    // 0x87019c: b.le            #0x8703bc
    // 0x8701a0: nop             
    // 0x8701a4: LoadField: r2 = r0->field_f
    //     0x8701a4: ldur            w2, [x0, #0xf]
    // 0x8701a8: DecompressPointer r2
    //     0x8701a8: add             x2, x2, HEAP, lsl #32
    // 0x8701ac: r0 = LoadInt32Instr(r2)
    //     0x8701ac: sbfx            x0, x2, #1, #0x1f
    //     0x8701b0: tbz             w2, #0, #0x8701bc
    //     0x8701b4: nop             
    //     0x8701b8: ldur            x0, [x2, #7]
    // 0x8701bc: cmp             x0, #3
    // 0x8701c0: b.ge            #0x8703bc
    // 0x8701c4: nop             
    // 0x8701c8: cmp             x1, #0xa
    // 0x8701cc: b.ge            #0x870248
    // 0x8701d0: nop             
    // 0x8701d4: r1 = Null
    //     0x8701d4: mov             x1, NULL
    // 0x8701d8: r2 = "reward1"
    //     0x8701d8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10900] "reward1"
    //     0x8701dc: ldr             x2, [x2, #0x900]
    // 0x8701e0: r3 = "reward2"
    //     0x8701e0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10908] "reward2"
    //     0x8701e4: ldr             x3, [x3, #0x908]
    // 0x8701e8: r0 = _GrowableList._literal2()
    //     0x8701e8: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x8701ec: mov             x1, x0
    // 0x8701f0: r0 = shuffle()
    //     0x8701f0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8701f4: mov             x1, x0
    // 0x8701f8: r0 = first()
    //     0x8701f8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8701fc: mov             x3, x0
    // 0x870200: r2 = Null
    //     0x870200: mov             x2, NULL
    // 0x870204: r1 = Null
    //     0x870204: mov             x1, NULL
    // 0x870208: stur            x3, [fp, #-8]
    // 0x87020c: r4 = 59
    //     0x87020c: movz            x4, #0x3b
    // 0x870210: branchIfSmi(r0, 0x870220)
    //     0x870210: tbz             w0, #0, #0x870220
    //     0x870214: nop             
    // 0x870218: r4 = LoadClassIdInstr(r0)
    //     0x870218: ldur            x4, [x0, #-1]
    //     0x87021c: ubfx            x4, x4, #0xc, #0x14
    // 0x870220: sub             x4, x4, #0x5d
    // 0x870224: cmp             x4, #1
    // 0x870228: b.ls            #0x870240
    // 0x87022c: nop             
    // 0x870230: r8 = String
    //     0x870230: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x870234: r3 = Null
    //     0x870234: add             x3, PP, #0x10, lsl #12  ; [pp+0x10980] Null
    //     0x870238: ldr             x3, [x3, #0x980]
    // 0x87023c: r0 = String()
    //     0x87023c: bl              #0x1523244  ; IsType_String_Stub
    // 0x870240: ldur            x0, [fp, #-8]
    // 0x870244: b               #0x8838b4
    // 0x870248: cmp             x1, #0x28
    // 0x87024c: b.ge            #0x8702c8
    // 0x870250: nop             
    // 0x870254: r1 = Null
    //     0x870254: mov             x1, NULL
    // 0x870258: r2 = "reward3"
    //     0x870258: add             x2, PP, #0x10, lsl #12  ; [pp+0x10920] "reward3"
    //     0x87025c: ldr             x2, [x2, #0x920]
    // 0x870260: r3 = "reward4"
    //     0x870260: add             x3, PP, #0x10, lsl #12  ; [pp+0x10928] "reward4"
    //     0x870264: ldr             x3, [x3, #0x928]
    // 0x870268: r0 = _GrowableList._literal2()
    //     0x870268: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x87026c: mov             x1, x0
    // 0x870270: r0 = shuffle()
    //     0x870270: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x870274: mov             x1, x0
    // 0x870278: r0 = first()
    //     0x870278: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x87027c: mov             x3, x0
    // 0x870280: r2 = Null
    //     0x870280: mov             x2, NULL
    // 0x870284: r1 = Null
    //     0x870284: mov             x1, NULL
    // 0x870288: stur            x3, [fp, #-8]
    // 0x87028c: r4 = 59
    //     0x87028c: movz            x4, #0x3b
    // 0x870290: branchIfSmi(r0, 0x8702a0)
    //     0x870290: tbz             w0, #0, #0x8702a0
    //     0x870294: nop             
    // 0x870298: r4 = LoadClassIdInstr(r0)
    //     0x870298: ldur            x4, [x0, #-1]
    //     0x87029c: ubfx            x4, x4, #0xc, #0x14
    // 0x8702a0: sub             x4, x4, #0x5d
    // 0x8702a4: cmp             x4, #1
    // 0x8702a8: b.ls            #0x8702c0
    // 0x8702ac: nop             
    // 0x8702b0: r8 = String
    //     0x8702b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8702b4: r3 = Null
    //     0x8702b4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10990] Null
    //     0x8702b8: ldr             x3, [x3, #0x990]
    // 0x8702bc: r0 = String()
    //     0x8702bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8702c0: ldur            x0, [fp, #-8]
    // 0x8702c4: b               #0x8838b4
    // 0x8702c8: cmp             x1, #0x46
    // 0x8702cc: b.ge            #0x870348
    // 0x8702d0: nop             
    // 0x8702d4: r1 = Null
    //     0x8702d4: mov             x1, NULL
    // 0x8702d8: r2 = "reward5"
    //     0x8702d8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10940] "reward5"
    //     0x8702dc: ldr             x2, [x2, #0x940]
    // 0x8702e0: r3 = "reward6"
    //     0x8702e0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10948] "reward6"
    //     0x8702e4: ldr             x3, [x3, #0x948]
    // 0x8702e8: r0 = _GrowableList._literal2()
    //     0x8702e8: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x8702ec: mov             x1, x0
    // 0x8702f0: r0 = shuffle()
    //     0x8702f0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8702f4: mov             x1, x0
    // 0x8702f8: r0 = first()
    //     0x8702f8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8702fc: mov             x3, x0
    // 0x870300: r2 = Null
    //     0x870300: mov             x2, NULL
    // 0x870304: r1 = Null
    //     0x870304: mov             x1, NULL
    // 0x870308: stur            x3, [fp, #-8]
    // 0x87030c: r4 = 59
    //     0x87030c: movz            x4, #0x3b
    // 0x870310: branchIfSmi(r0, 0x870320)
    //     0x870310: tbz             w0, #0, #0x870320
    //     0x870314: nop             
    // 0x870318: r4 = LoadClassIdInstr(r0)
    //     0x870318: ldur            x4, [x0, #-1]
    //     0x87031c: ubfx            x4, x4, #0xc, #0x14
    // 0x870320: sub             x4, x4, #0x5d
    // 0x870324: cmp             x4, #1
    // 0x870328: b.ls            #0x870340
    // 0x87032c: nop             
    // 0x870330: r8 = String
    //     0x870330: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x870334: r3 = Null
    //     0x870334: add             x3, PP, #0x10, lsl #12  ; [pp+0x109a0] Null
    //     0x870338: ldr             x3, [x3, #0x9a0]
    // 0x87033c: r0 = String()
    //     0x87033c: bl              #0x1523244  ; IsType_String_Stub
    // 0x870340: ldur            x0, [fp, #-8]
    // 0x870344: b               #0x8838b4
    // 0x870348: r1 = Null
    //     0x870348: mov             x1, NULL
    // 0x87034c: r2 = "reward7"
    //     0x87034c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10960] "reward7"
    //     0x870350: ldr             x2, [x2, #0x960]
    // 0x870354: r3 = "reward8"
    //     0x870354: add             x3, PP, #0x10, lsl #12  ; [pp+0x10968] "reward8"
    //     0x870358: ldr             x3, [x3, #0x968]
    // 0x87035c: r0 = _GrowableList._literal2()
    //     0x87035c: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x870360: mov             x1, x0
    // 0x870364: r0 = shuffle()
    //     0x870364: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x870368: mov             x1, x0
    // 0x87036c: r0 = first()
    //     0x87036c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x870370: mov             x3, x0
    // 0x870374: r2 = Null
    //     0x870374: mov             x2, NULL
    // 0x870378: r1 = Null
    //     0x870378: mov             x1, NULL
    // 0x87037c: stur            x3, [fp, #-8]
    // 0x870380: r4 = 59
    //     0x870380: movz            x4, #0x3b
    // 0x870384: branchIfSmi(r0, 0x870394)
    //     0x870384: tbz             w0, #0, #0x870394
    //     0x870388: nop             
    // 0x87038c: r4 = LoadClassIdInstr(r0)
    //     0x87038c: ldur            x4, [x0, #-1]
    //     0x870390: ubfx            x4, x4, #0xc, #0x14
    // 0x870394: sub             x4, x4, #0x5d
    // 0x870398: cmp             x4, #1
    // 0x87039c: b.ls            #0x8703b4
    // 0x8703a0: nop             
    // 0x8703a4: r8 = String
    //     0x8703a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8703a8: r3 = Null
    //     0x8703a8: add             x3, PP, #0x10, lsl #12  ; [pp+0x109b0] Null
    //     0x8703ac: ldr             x3, [x3, #0x9b0]
    // 0x8703b0: r0 = String()
    //     0x8703b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8703b4: ldur            x0, [fp, #-8]
    // 0x8703b8: b               #0x8838b4
    // 0x8703bc: r1 = Null
    //     0x8703bc: mov             x1, NULL
    // 0x8703c0: r2 = "reward5"
    //     0x8703c0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10940] "reward5"
    //     0x8703c4: ldr             x2, [x2, #0x940]
    // 0x8703c8: r3 = "reward6"
    //     0x8703c8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10948] "reward6"
    //     0x8703cc: ldr             x3, [x3, #0x948]
    // 0x8703d0: r5 = "reward7"
    //     0x8703d0: add             x5, PP, #0x10, lsl #12  ; [pp+0x10960] "reward7"
    //     0x8703d4: ldr             x5, [x5, #0x960]
    // 0x8703d8: r6 = "reward8"
    //     0x8703d8: add             x6, PP, #0x10, lsl #12  ; [pp+0x10968] "reward8"
    //     0x8703dc: ldr             x6, [x6, #0x968]
    // 0x8703e0: r0 = _GrowableList._literal4()
    //     0x8703e0: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x8703e4: mov             x1, x0
    // 0x8703e8: r0 = shuffle()
    //     0x8703e8: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8703ec: mov             x1, x0
    // 0x8703f0: r0 = first()
    //     0x8703f0: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8703f4: mov             x3, x0
    // 0x8703f8: r2 = Null
    //     0x8703f8: mov             x2, NULL
    // 0x8703fc: r1 = Null
    //     0x8703fc: mov             x1, NULL
    // 0x870400: stur            x3, [fp, #-8]
    // 0x870404: r4 = 59
    //     0x870404: movz            x4, #0x3b
    // 0x870408: branchIfSmi(r0, 0x870418)
    //     0x870408: tbz             w0, #0, #0x870418
    //     0x87040c: nop             
    // 0x870410: r4 = LoadClassIdInstr(r0)
    //     0x870410: ldur            x4, [x0, #-1]
    //     0x870414: ubfx            x4, x4, #0xc, #0x14
    // 0x870418: sub             x4, x4, #0x5d
    // 0x87041c: cmp             x4, #1
    // 0x870420: b.ls            #0x870438
    // 0x870424: nop             
    // 0x870428: r8 = String
    //     0x870428: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87042c: r3 = Null
    //     0x87042c: add             x3, PP, #0x10, lsl #12  ; [pp+0x109c0] Null
    //     0x870430: ldr             x3, [x3, #0x9c0]
    // 0x870434: r0 = String()
    //     0x870434: bl              #0x1523244  ; IsType_String_Stub
    // 0x870438: ldur            x0, [fp, #-8]
    // 0x87043c: b               #0x8838b4
    // 0x870440: r16 = "dancingHighestPetition"
    //     0x870440: add             x16, PP, #0x10, lsl #12  ; [pp+0x109d0] "dancingHighestPetition"
    //     0x870444: ldr             x16, [x16, #0x9d0]
    // 0x870448: ldur            lr, [fp, #-0x28]
    // 0x87044c: stp             lr, x16, [SP]
    // 0x870450: r0 = ==()
    //     0x870450: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x870454: tbnz            w0, #4, #0x8705ac
    // 0x870458: nop             
    // 0x87045c: r0 = LoadStaticField(0xb54)
    //     0x87045c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870460: ldr             x0, [x0, #0x16a8]
    // 0x870464: cmp             w0, NULL
    // 0x870468: b.eq            #0x8705a0
    // 0x87046c: nop             
    // 0x870470: r17 = 359
    //     0x870470: movz            x17, #0x167
    // 0x870474: ldr             w1, [x0, x17]
    // 0x870478: DecompressPointer r1
    //     0x870478: add             x1, x1, HEAP, lsl #32
    // 0x87047c: r0 = LoadClassIdInstr(r1)
    //     0x87047c: ldur            x0, [x1, #-1]
    //     0x870480: ubfx            x0, x0, #0xc, #0x14
    // 0x870484: r2 = "mg2"
    //     0x870484: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x870488: ldr             x2, [x2, #0x8c8]
    // 0x87048c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87048c: sub             lr, x0, #0xb4
    //     0x870490: ldr             lr, [x21, lr, lsl #3]
    //     0x870494: blr             lr
    // 0x870498: cmp             w0, NULL
    // 0x87049c: b.eq            #0x8705a0
    // 0x8704a0: nop             
    // 0x8704a4: r0 = LoadStaticField(0xb54)
    //     0x8704a4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8704a8: ldr             x0, [x0, #0x16a8]
    // 0x8704ac: cmp             w0, NULL
    // 0x8704b0: b.ne            #0x8704c0
    // 0x8704b4: nop             
    // 0x8704b8: r0 = Null
    //     0x8704b8: mov             x0, NULL
    // 0x8704bc: b               #0x8704e8
    // 0x8704c0: r17 = 359
    //     0x8704c0: movz            x17, #0x167
    // 0x8704c4: ldr             w1, [x0, x17]
    // 0x8704c8: DecompressPointer r1
    //     0x8704c8: add             x1, x1, HEAP, lsl #32
    // 0x8704cc: r0 = LoadClassIdInstr(r1)
    //     0x8704cc: ldur            x0, [x1, #-1]
    //     0x8704d0: ubfx            x0, x0, #0xc, #0x14
    // 0x8704d4: r2 = "mg2"
    //     0x8704d4: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x8704d8: ldr             x2, [x2, #0x8c8]
    // 0x8704dc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8704dc: sub             lr, x0, #0xb4
    //     0x8704e0: ldr             lr, [x21, lr, lsl #3]
    //     0x8704e4: blr             lr
    // 0x8704e8: r16 = 200
    //     0x8704e8: movz            x16, #0xc8
    // 0x8704ec: stp             x16, x0, [SP]
    // 0x8704f0: r4 = 0
    //     0x8704f0: movz            x4, #0
    // 0x8704f4: ldr             x0, [SP, #8]
    // 0x8704f8: r16 = UnlinkedCall_0x7b3c80
    //     0x8704f8: add             x16, PP, #0x10, lsl #12  ; [pp+0x109d8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8704fc: add             x16, x16, #0x9d8
    // 0x870500: ldp             x5, lr, [x16]
    // 0x870504: blr             lr
    // 0x870508: tbnz            w0, #4, #0x87051c
    // 0x87050c: nop             
    // 0x870510: r0 = "petitionBestPerform"
    //     0x870510: add             x0, PP, #0x10, lsl #12  ; [pp+0x10898] "petitionBestPerform"
    //     0x870514: ldr             x0, [x0, #0x898]
    // 0x870518: b               #0x8838b4
    // 0x87051c: r0 = LoadStaticField(0xb54)
    //     0x87051c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870520: ldr             x0, [x0, #0x16a8]
    // 0x870524: cmp             w0, NULL
    // 0x870528: b.ne            #0x870538
    // 0x87052c: nop             
    // 0x870530: r0 = Null
    //     0x870530: mov             x0, NULL
    // 0x870534: b               #0x870560
    // 0x870538: r17 = 359
    //     0x870538: movz            x17, #0x167
    // 0x87053c: ldr             w1, [x0, x17]
    // 0x870540: DecompressPointer r1
    //     0x870540: add             x1, x1, HEAP, lsl #32
    // 0x870544: r0 = LoadClassIdInstr(r1)
    //     0x870544: ldur            x0, [x1, #-1]
    //     0x870548: ubfx            x0, x0, #0xc, #0x14
    // 0x87054c: r2 = "mg2"
    //     0x87054c: add             x2, PP, #0x10, lsl #12  ; [pp+0x108c8] "mg2"
    //     0x870550: ldr             x2, [x2, #0x8c8]
    // 0x870554: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870554: sub             lr, x0, #0xb4
    //     0x870558: ldr             lr, [x21, lr, lsl #3]
    //     0x87055c: blr             lr
    // 0x870560: r16 = 160
    //     0x870560: movz            x16, #0xa0
    // 0x870564: stp             x16, x0, [SP]
    // 0x870568: r4 = 0
    //     0x870568: movz            x4, #0
    // 0x87056c: ldr             x0, [SP, #8]
    // 0x870570: r16 = UnlinkedCall_0x7b3c80
    //     0x870570: add             x16, PP, #0x10, lsl #12  ; [pp+0x109e8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x870574: add             x16, x16, #0x9e8
    // 0x870578: ldp             x5, lr, [x16]
    // 0x87057c: blr             lr
    // 0x870580: tbnz            w0, #4, #0x870594
    // 0x870584: nop             
    // 0x870588: r0 = "petitionGoodPerform"
    //     0x870588: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b0] "petitionGoodPerform"
    //     0x87058c: ldr             x0, [x0, #0x8b0]
    // 0x870590: b               #0x8838b4
    // 0x870594: r0 = "petitionBadPerform"
    //     0x870594: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x870598: ldr             x0, [x0, #0x8b8]
    // 0x87059c: b               #0x8838b4
    // 0x8705a0: r0 = "petitionBadPerform"
    //     0x8705a0: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x8705a4: ldr             x0, [x0, #0x8b8]
    // 0x8705a8: b               #0x8838b4
    // 0x8705ac: r16 = "sprintingHighest"
    //     0x8705ac: add             x16, PP, #0x10, lsl #12  ; [pp+0x109f8] "sprintingHighest"
    //     0x8705b0: ldr             x16, [x16, #0x9f8]
    // 0x8705b4: ldur            lr, [fp, #-0x28]
    // 0x8705b8: stp             lr, x16, [SP]
    // 0x8705bc: r0 = ==()
    //     0x8705bc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8705c0: tbnz            w0, #4, #0x870718
    // 0x8705c4: nop             
    // 0x8705c8: r0 = LoadStaticField(0xb54)
    //     0x8705c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8705cc: ldr             x0, [x0, #0x16a8]
    // 0x8705d0: cmp             w0, NULL
    // 0x8705d4: b.eq            #0x87070c
    // 0x8705d8: nop             
    // 0x8705dc: r17 = 359
    //     0x8705dc: movz            x17, #0x167
    // 0x8705e0: ldr             w1, [x0, x17]
    // 0x8705e4: DecompressPointer r1
    //     0x8705e4: add             x1, x1, HEAP, lsl #32
    // 0x8705e8: r0 = LoadClassIdInstr(r1)
    //     0x8705e8: ldur            x0, [x1, #-1]
    //     0x8705ec: ubfx            x0, x0, #0xc, #0x14
    // 0x8705f0: r2 = "mg3"
    //     0x8705f0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x8705f4: ldr             x2, [x2, #0xa00]
    // 0x8705f8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8705f8: sub             lr, x0, #0xb4
    //     0x8705fc: ldr             lr, [x21, lr, lsl #3]
    //     0x870600: blr             lr
    // 0x870604: cmp             w0, NULL
    // 0x870608: b.eq            #0x87070c
    // 0x87060c: nop             
    // 0x870610: r0 = LoadStaticField(0xb54)
    //     0x870610: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870614: ldr             x0, [x0, #0x16a8]
    // 0x870618: cmp             w0, NULL
    // 0x87061c: b.ne            #0x87062c
    // 0x870620: nop             
    // 0x870624: r0 = Null
    //     0x870624: mov             x0, NULL
    // 0x870628: b               #0x870654
    // 0x87062c: r17 = 359
    //     0x87062c: movz            x17, #0x167
    // 0x870630: ldr             w1, [x0, x17]
    // 0x870634: DecompressPointer r1
    //     0x870634: add             x1, x1, HEAP, lsl #32
    // 0x870638: r0 = LoadClassIdInstr(r1)
    //     0x870638: ldur            x0, [x1, #-1]
    //     0x87063c: ubfx            x0, x0, #0xc, #0x14
    // 0x870640: r2 = "mg3"
    //     0x870640: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x870644: ldr             x2, [x2, #0xa00]
    // 0x870648: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870648: sub             lr, x0, #0xb4
    //     0x87064c: ldr             lr, [x21, lr, lsl #3]
    //     0x870650: blr             lr
    // 0x870654: r16 = 180
    //     0x870654: movz            x16, #0xb4
    // 0x870658: stp             x16, x0, [SP]
    // 0x87065c: r4 = 0
    //     0x87065c: movz            x4, #0
    // 0x870660: ldr             x0, [SP, #8]
    // 0x870664: r16 = UnlinkedCall_0x7b3c80
    //     0x870664: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a08] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x870668: add             x16, x16, #0xa08
    // 0x87066c: ldp             x5, lr, [x16]
    // 0x870670: blr             lr
    // 0x870674: tbnz            w0, #4, #0x870688
    // 0x870678: nop             
    // 0x87067c: r0 = "fundBestPerform"
    //     0x87067c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10858] "fundBestPerform"
    //     0x870680: ldr             x0, [x0, #0x858]
    // 0x870684: b               #0x8838b4
    // 0x870688: r0 = LoadStaticField(0xb54)
    //     0x870688: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87068c: ldr             x0, [x0, #0x16a8]
    // 0x870690: cmp             w0, NULL
    // 0x870694: b.ne            #0x8706a4
    // 0x870698: nop             
    // 0x87069c: r0 = Null
    //     0x87069c: mov             x0, NULL
    // 0x8706a0: b               #0x8706cc
    // 0x8706a4: r17 = 359
    //     0x8706a4: movz            x17, #0x167
    // 0x8706a8: ldr             w1, [x0, x17]
    // 0x8706ac: DecompressPointer r1
    //     0x8706ac: add             x1, x1, HEAP, lsl #32
    // 0x8706b0: r0 = LoadClassIdInstr(r1)
    //     0x8706b0: ldur            x0, [x1, #-1]
    //     0x8706b4: ubfx            x0, x0, #0xc, #0x14
    // 0x8706b8: r2 = "mg3"
    //     0x8706b8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x8706bc: ldr             x2, [x2, #0xa00]
    // 0x8706c0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8706c0: sub             lr, x0, #0xb4
    //     0x8706c4: ldr             lr, [x21, lr, lsl #3]
    //     0x8706c8: blr             lr
    // 0x8706cc: r16 = 120
    //     0x8706cc: movz            x16, #0x78
    // 0x8706d0: stp             x16, x0, [SP]
    // 0x8706d4: r4 = 0
    //     0x8706d4: movz            x4, #0
    // 0x8706d8: ldr             x0, [SP, #8]
    // 0x8706dc: r16 = UnlinkedCall_0x7b3c80
    //     0x8706dc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a18] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8706e0: add             x16, x16, #0xa18
    // 0x8706e4: ldp             x5, lr, [x16]
    // 0x8706e8: blr             lr
    // 0x8706ec: tbnz            w0, #4, #0x870700
    // 0x8706f0: nop             
    // 0x8706f4: r0 = "fundGoodPerform"
    //     0x8706f4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10870] "fundGoodPerform"
    //     0x8706f8: ldr             x0, [x0, #0x870]
    // 0x8706fc: b               #0x8838b4
    // 0x870700: r0 = "fundBadPerform"
    //     0x870700: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x870704: ldr             x0, [x0, #0x878]
    // 0x870708: b               #0x8838b4
    // 0x87070c: r0 = "fundBadPerform"
    //     0x87070c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10878] "fundBadPerform"
    //     0x870710: ldr             x0, [x0, #0x878]
    // 0x870714: b               #0x8838b4
    // 0x870718: r16 = "checkUpperlineCode"
    //     0x870718: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a28] "checkUpperlineCode"
    //     0x87071c: ldr             x16, [x16, #0xa28]
    // 0x870720: ldur            lr, [fp, #-0x28]
    // 0x870724: stp             lr, x16, [SP]
    // 0x870728: r0 = ==()
    //     0x870728: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87072c: tbnz            w0, #4, #0x870814
    // 0x870730: nop             
    // 0x870734: r0 = LoadStaticField(0xb54)
    //     0x870734: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870738: ldr             x0, [x0, #0x16a8]
    // 0x87073c: cmp             w0, NULL
    // 0x870740: b.ne            #0x870750
    // 0x870744: nop             
    // 0x870748: r0 = Null
    //     0x870748: mov             x0, NULL
    // 0x87074c: b               #0x870760
    // 0x870750: r17 = 403
    //     0x870750: movz            x17, #0x193
    // 0x870754: ldr             w1, [x0, x17]
    // 0x870758: DecompressPointer r1
    //     0x870758: add             x1, x1, HEAP, lsl #32
    // 0x87075c: mov             x0, x1
    // 0x870760: cmp             w0, NULL
    // 0x870764: b.ne            #0x870770
    // 0x870768: nop             
    // 0x87076c: r0 = ""
    //     0x87076c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x870770: str             x0, [SP]
    // 0x870774: r0 = isEmpty()
    //     0x870774: bl              #0x7c13ec  ; [dart:core] _StringBase::isEmpty
    // 0x870778: tbnz            w0, #4, #0x870808
    // 0x87077c: nop             
    // 0x870780: r0 = LoadStaticField(0xb54)
    //     0x870780: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870784: ldr             x0, [x0, #0x16a8]
    // 0x870788: cmp             w0, NULL
    // 0x87078c: b.ne            #0x87079c
    // 0x870790: nop             
    // 0x870794: r0 = Null
    //     0x870794: mov             x0, NULL
    // 0x870798: b               #0x8707c4
    // 0x87079c: r17 = 347
    //     0x87079c: movz            x17, #0x15b
    // 0x8707a0: ldr             w1, [x0, x17]
    // 0x8707a4: DecompressPointer r1
    //     0x8707a4: add             x1, x1, HEAP, lsl #32
    // 0x8707a8: r0 = LoadClassIdInstr(r1)
    //     0x8707a8: ldur            x0, [x1, #-1]
    //     0x8707ac: ubfx            x0, x0, #0xc, #0x14
    // 0x8707b0: r2 = "loginDay"
    //     0x8707b0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a30] "loginDay"
    //     0x8707b4: ldr             x2, [x2, #0xa30]
    // 0x8707b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8707b8: sub             lr, x0, #0xb4
    //     0x8707bc: ldr             lr, [x21, lr, lsl #3]
    //     0x8707c0: blr             lr
    // 0x8707c4: cmp             w0, NULL
    // 0x8707c8: b.ne            #0x8707d4
    // 0x8707cc: nop             
    // 0x8707d0: r0 = 0
    //     0x8707d0: movz            x0, #0
    // 0x8707d4: r16 = 20
    //     0x8707d4: movz            x16, #0x14
    // 0x8707d8: stp             x16, x0, [SP]
    // 0x8707dc: r4 = 0
    //     0x8707dc: movz            x4, #0
    // 0x8707e0: ldr             x0, [SP, #8]
    // 0x8707e4: r16 = UnlinkedCall_0x7b3c80
    //     0x8707e4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a38] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8707e8: add             x16, x16, #0xa38
    // 0x8707ec: ldp             x5, lr, [x16]
    // 0x8707f0: blr             lr
    // 0x8707f4: tbnz            w0, #4, #0x870808
    // 0x8707f8: nop             
    // 0x8707fc: r0 = "notYetHaveUpperLine"
    //     0x8707fc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10a48] "notYetHaveUpperLine"
    //     0x870800: ldr             x0, [x0, #0xa48]
    // 0x870804: b               #0x8838b4
    // 0x870808: r0 = "choice"
    //     0x870808: add             x0, PP, #0x10, lsl #12  ; [pp+0x10a50] "choice"
    //     0x87080c: ldr             x0, [x0, #0xa50]
    // 0x870810: b               #0x8838b4
    // 0x870814: r16 = "checkUpperlineCode2"
    //     0x870814: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a58] "checkUpperlineCode2"
    //     0x870818: ldr             x16, [x16, #0xa58]
    // 0x87081c: ldur            lr, [fp, #-0x28]
    // 0x870820: stp             lr, x16, [SP]
    // 0x870824: r0 = ==()
    //     0x870824: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x870828: tbnz            w0, #4, #0x870910
    // 0x87082c: nop             
    // 0x870830: r0 = LoadStaticField(0xb54)
    //     0x870830: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870834: ldr             x0, [x0, #0x16a8]
    // 0x870838: cmp             w0, NULL
    // 0x87083c: b.ne            #0x87084c
    // 0x870840: nop             
    // 0x870844: r0 = Null
    //     0x870844: mov             x0, NULL
    // 0x870848: b               #0x87085c
    // 0x87084c: r17 = 403
    //     0x87084c: movz            x17, #0x193
    // 0x870850: ldr             w1, [x0, x17]
    // 0x870854: DecompressPointer r1
    //     0x870854: add             x1, x1, HEAP, lsl #32
    // 0x870858: mov             x0, x1
    // 0x87085c: cmp             w0, NULL
    // 0x870860: b.ne            #0x87086c
    // 0x870864: nop             
    // 0x870868: r0 = ""
    //     0x870868: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87086c: str             x0, [SP]
    // 0x870870: r0 = isEmpty()
    //     0x870870: bl              #0x7c13ec  ; [dart:core] _StringBase::isEmpty
    // 0x870874: tbnz            w0, #4, #0x870904
    // 0x870878: nop             
    // 0x87087c: r0 = LoadStaticField(0xb54)
    //     0x87087c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870880: ldr             x0, [x0, #0x16a8]
    // 0x870884: cmp             w0, NULL
    // 0x870888: b.ne            #0x870898
    // 0x87088c: nop             
    // 0x870890: r0 = Null
    //     0x870890: mov             x0, NULL
    // 0x870894: b               #0x8708c0
    // 0x870898: r17 = 347
    //     0x870898: movz            x17, #0x15b
    // 0x87089c: ldr             w1, [x0, x17]
    // 0x8708a0: DecompressPointer r1
    //     0x8708a0: add             x1, x1, HEAP, lsl #32
    // 0x8708a4: r0 = LoadClassIdInstr(r1)
    //     0x8708a4: ldur            x0, [x1, #-1]
    //     0x8708a8: ubfx            x0, x0, #0xc, #0x14
    // 0x8708ac: r2 = "loginDay"
    //     0x8708ac: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a30] "loginDay"
    //     0x8708b0: ldr             x2, [x2, #0xa30]
    // 0x8708b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8708b4: sub             lr, x0, #0xb4
    //     0x8708b8: ldr             lr, [x21, lr, lsl #3]
    //     0x8708bc: blr             lr
    // 0x8708c0: cmp             w0, NULL
    // 0x8708c4: b.ne            #0x8708d0
    // 0x8708c8: nop             
    // 0x8708cc: r0 = 0
    //     0x8708cc: movz            x0, #0
    // 0x8708d0: r16 = 20
    //     0x8708d0: movz            x16, #0x14
    // 0x8708d4: stp             x16, x0, [SP]
    // 0x8708d8: r4 = 0
    //     0x8708d8: movz            x4, #0
    // 0x8708dc: ldr             x0, [SP, #8]
    // 0x8708e0: r16 = UnlinkedCall_0x7b3c80
    //     0x8708e0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a60] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8708e4: add             x16, x16, #0xa60
    // 0x8708e8: ldp             x5, lr, [x16]
    // 0x8708ec: blr             lr
    // 0x8708f0: tbnz            w0, #4, #0x870904
    // 0x8708f4: nop             
    // 0x8708f8: r0 = "notYetHaveUpperLine2"
    //     0x8708f8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10a70] "notYetHaveUpperLine2"
    //     0x8708fc: ldr             x0, [x0, #0xa70]
    // 0x870900: b               #0x8838b4
    // 0x870904: r0 = "choice"
    //     0x870904: add             x0, PP, #0x10, lsl #12  ; [pp+0x10a50] "choice"
    //     0x870908: ldr             x0, [x0, #0xa50]
    // 0x87090c: b               #0x8838b4
    // 0x870910: r16 = "sprintingHighestPetition"
    //     0x870910: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a78] "sprintingHighestPetition"
    //     0x870914: ldr             x16, [x16, #0xa78]
    // 0x870918: ldur            lr, [fp, #-0x28]
    // 0x87091c: stp             lr, x16, [SP]
    // 0x870920: r0 = ==()
    //     0x870920: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x870924: tbnz            w0, #4, #0x870a7c
    // 0x870928: nop             
    // 0x87092c: r0 = LoadStaticField(0xb54)
    //     0x87092c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870930: ldr             x0, [x0, #0x16a8]
    // 0x870934: cmp             w0, NULL
    // 0x870938: b.eq            #0x870a70
    // 0x87093c: nop             
    // 0x870940: r17 = 359
    //     0x870940: movz            x17, #0x167
    // 0x870944: ldr             w1, [x0, x17]
    // 0x870948: DecompressPointer r1
    //     0x870948: add             x1, x1, HEAP, lsl #32
    // 0x87094c: r0 = LoadClassIdInstr(r1)
    //     0x87094c: ldur            x0, [x1, #-1]
    //     0x870950: ubfx            x0, x0, #0xc, #0x14
    // 0x870954: r2 = "mg3"
    //     0x870954: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x870958: ldr             x2, [x2, #0xa00]
    // 0x87095c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87095c: sub             lr, x0, #0xb4
    //     0x870960: ldr             lr, [x21, lr, lsl #3]
    //     0x870964: blr             lr
    // 0x870968: cmp             w0, NULL
    // 0x87096c: b.eq            #0x870a70
    // 0x870970: nop             
    // 0x870974: r0 = LoadStaticField(0xb54)
    //     0x870974: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870978: ldr             x0, [x0, #0x16a8]
    // 0x87097c: cmp             w0, NULL
    // 0x870980: b.ne            #0x870990
    // 0x870984: nop             
    // 0x870988: r0 = Null
    //     0x870988: mov             x0, NULL
    // 0x87098c: b               #0x8709b8
    // 0x870990: r17 = 359
    //     0x870990: movz            x17, #0x167
    // 0x870994: ldr             w1, [x0, x17]
    // 0x870998: DecompressPointer r1
    //     0x870998: add             x1, x1, HEAP, lsl #32
    // 0x87099c: r0 = LoadClassIdInstr(r1)
    //     0x87099c: ldur            x0, [x1, #-1]
    //     0x8709a0: ubfx            x0, x0, #0xc, #0x14
    // 0x8709a4: r2 = "mg3"
    //     0x8709a4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x8709a8: ldr             x2, [x2, #0xa00]
    // 0x8709ac: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8709ac: sub             lr, x0, #0xb4
    //     0x8709b0: ldr             lr, [x21, lr, lsl #3]
    //     0x8709b4: blr             lr
    // 0x8709b8: r16 = 200
    //     0x8709b8: movz            x16, #0xc8
    // 0x8709bc: stp             x16, x0, [SP]
    // 0x8709c0: r4 = 0
    //     0x8709c0: movz            x4, #0
    // 0x8709c4: ldr             x0, [SP, #8]
    // 0x8709c8: r16 = UnlinkedCall_0x7b3c80
    //     0x8709c8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a80] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8709cc: add             x16, x16, #0xa80
    // 0x8709d0: ldp             x5, lr, [x16]
    // 0x8709d4: blr             lr
    // 0x8709d8: tbnz            w0, #4, #0x8709ec
    // 0x8709dc: nop             
    // 0x8709e0: r0 = "petitionBestPerform"
    //     0x8709e0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10898] "petitionBestPerform"
    //     0x8709e4: ldr             x0, [x0, #0x898]
    // 0x8709e8: b               #0x8838b4
    // 0x8709ec: r0 = LoadStaticField(0xb54)
    //     0x8709ec: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8709f0: ldr             x0, [x0, #0x16a8]
    // 0x8709f4: cmp             w0, NULL
    // 0x8709f8: b.ne            #0x870a08
    // 0x8709fc: nop             
    // 0x870a00: r0 = Null
    //     0x870a00: mov             x0, NULL
    // 0x870a04: b               #0x870a30
    // 0x870a08: r17 = 359
    //     0x870a08: movz            x17, #0x167
    // 0x870a0c: ldr             w1, [x0, x17]
    // 0x870a10: DecompressPointer r1
    //     0x870a10: add             x1, x1, HEAP, lsl #32
    // 0x870a14: r0 = LoadClassIdInstr(r1)
    //     0x870a14: ldur            x0, [x1, #-1]
    //     0x870a18: ubfx            x0, x0, #0xc, #0x14
    // 0x870a1c: r2 = "mg3"
    //     0x870a1c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10a00] "mg3"
    //     0x870a20: ldr             x2, [x2, #0xa00]
    // 0x870a24: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870a24: sub             lr, x0, #0xb4
    //     0x870a28: ldr             lr, [x21, lr, lsl #3]
    //     0x870a2c: blr             lr
    // 0x870a30: r16 = 160
    //     0x870a30: movz            x16, #0xa0
    // 0x870a34: stp             x16, x0, [SP]
    // 0x870a38: r4 = 0
    //     0x870a38: movz            x4, #0
    // 0x870a3c: ldr             x0, [SP, #8]
    // 0x870a40: r16 = UnlinkedCall_0x7b3c80
    //     0x870a40: add             x16, PP, #0x10, lsl #12  ; [pp+0x10a90] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x870a44: add             x16, x16, #0xa90
    // 0x870a48: ldp             x5, lr, [x16]
    // 0x870a4c: blr             lr
    // 0x870a50: tbnz            w0, #4, #0x870a64
    // 0x870a54: nop             
    // 0x870a58: r0 = "petitionGoodPerform"
    //     0x870a58: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b0] "petitionGoodPerform"
    //     0x870a5c: ldr             x0, [x0, #0x8b0]
    // 0x870a60: b               #0x8838b4
    // 0x870a64: r0 = "petitionBadPerform"
    //     0x870a64: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x870a68: ldr             x0, [x0, #0x8b8]
    // 0x870a6c: b               #0x8838b4
    // 0x870a70: r0 = "petitionBadPerform"
    //     0x870a70: add             x0, PP, #0x10, lsl #12  ; [pp+0x108b8] "petitionBadPerform"
    //     0x870a74: ldr             x0, [x0, #0x8b8]
    // 0x870a78: b               #0x8838b4
    // 0x870a7c: r16 = "azurashop"
    //     0x870a7c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10aa0] "azurashop"
    //     0x870a80: ldr             x16, [x16, #0xaa0]
    // 0x870a84: ldur            lr, [fp, #-0x28]
    // 0x870a88: stp             lr, x16, [SP]
    // 0x870a8c: r0 = ==()
    //     0x870a8c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x870a90: tbnz            w0, #4, #0x870e34
    // 0x870a94: nop             
    // 0x870a98: r0 = LoadStaticField(0xb54)
    //     0x870a98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870a9c: ldr             x0, [x0, #0x16a8]
    // 0x870aa0: cmp             w0, NULL
    // 0x870aa4: b.ne            #0x870ab4
    // 0x870aa8: nop             
    // 0x870aac: r0 = Null
    //     0x870aac: mov             x0, NULL
    // 0x870ab0: b               #0x870adc
    // 0x870ab4: r17 = 327
    //     0x870ab4: movz            x17, #0x147
    // 0x870ab8: ldr             w1, [x0, x17]
    // 0x870abc: DecompressPointer r1
    //     0x870abc: add             x1, x1, HEAP, lsl #32
    // 0x870ac0: r0 = LoadClassIdInstr(r1)
    //     0x870ac0: ldur            x0, [x1, #-1]
    //     0x870ac4: ubfx            x0, x0, #0xc, #0x14
    // 0x870ac8: r2 = "storyShoumaBadge.6"
    //     0x870ac8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10aa8] "storyShoumaBadge.6"
    //     0x870acc: ldr             x2, [x2, #0xaa8]
    // 0x870ad0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870ad0: sub             lr, x0, #0xb4
    //     0x870ad4: ldr             lr, [x21, lr, lsl #3]
    //     0x870ad8: blr             lr
    // 0x870adc: r1 = 59
    //     0x870adc: movz            x1, #0x3b
    // 0x870ae0: branchIfSmi(r0, 0x870af0)
    //     0x870ae0: tbz             w0, #0, #0x870af0
    //     0x870ae4: nop             
    // 0x870ae8: r1 = LoadClassIdInstr(r0)
    //     0x870ae8: ldur            x1, [x0, #-1]
    //     0x870aec: ubfx            x1, x1, #0xc, #0x14
    // 0x870af0: r16 = true
    //     0x870af0: add             x16, NULL, #0x20  ; true
    // 0x870af4: stp             x16, x0, [SP]
    // 0x870af8: mov             x0, x1
    // 0x870afc: mov             lr, x0
    // 0x870b00: ldr             lr, [x21, lr, lsl #3]
    // 0x870b04: blr             lr
    // 0x870b08: tbnz            w0, #4, #0x870b1c
    // 0x870b0c: nop             
    // 0x870b10: r3 = "sportshop2"
    //     0x870b10: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ab0] "sportshop2"
    //     0x870b14: ldr             x3, [x3, #0xab0]
    // 0x870b18: b               #0x870b24
    // 0x870b1c: r3 = "sportshop"
    //     0x870b1c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ab8] "sportshop"
    //     0x870b20: ldr             x3, [x3, #0xab8]
    // 0x870b24: stur            x3, [fp, #-8]
    // 0x870b28: r0 = LoadStaticField(0xb54)
    //     0x870b28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870b2c: ldr             x0, [x0, #0x16a8]
    // 0x870b30: cmp             w0, NULL
    // 0x870b34: b.ne            #0x870b44
    // 0x870b38: nop             
    // 0x870b3c: r0 = Null
    //     0x870b3c: mov             x0, NULL
    // 0x870b40: b               #0x870b6c
    // 0x870b44: r17 = 327
    //     0x870b44: movz            x17, #0x147
    // 0x870b48: ldr             w1, [x0, x17]
    // 0x870b4c: DecompressPointer r1
    //     0x870b4c: add             x1, x1, HEAP, lsl #32
    // 0x870b50: r0 = LoadClassIdInstr(r1)
    //     0x870b50: ldur            x0, [x1, #-1]
    //     0x870b54: ubfx            x0, x0, #0xc, #0x14
    // 0x870b58: r2 = "storyDojo.End"
    //     0x870b58: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ac0] "storyDojo.End"
    //     0x870b5c: ldr             x2, [x2, #0xac0]
    // 0x870b60: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870b60: sub             lr, x0, #0xb4
    //     0x870b64: ldr             lr, [x21, lr, lsl #3]
    //     0x870b68: blr             lr
    // 0x870b6c: r1 = 59
    //     0x870b6c: movz            x1, #0x3b
    // 0x870b70: branchIfSmi(r0, 0x870b80)
    //     0x870b70: tbz             w0, #0, #0x870b80
    //     0x870b74: nop             
    // 0x870b78: r1 = LoadClassIdInstr(r0)
    //     0x870b78: ldur            x1, [x0, #-1]
    //     0x870b7c: ubfx            x1, x1, #0xc, #0x14
    // 0x870b80: r16 = true
    //     0x870b80: add             x16, NULL, #0x20  ; true
    // 0x870b84: stp             x16, x0, [SP]
    // 0x870b88: mov             x0, x1
    // 0x870b8c: mov             lr, x0
    // 0x870b90: ldr             lr, [x21, lr, lsl #3]
    // 0x870b94: blr             lr
    // 0x870b98: tbnz            w0, #4, #0x870bac
    // 0x870b9c: nop             
    // 0x870ba0: r3 = "sportshop3"
    //     0x870ba0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ac8] "sportshop3"
    //     0x870ba4: ldr             x3, [x3, #0xac8]
    // 0x870ba8: b               #0x870bb0
    // 0x870bac: ldur            x3, [fp, #-8]
    // 0x870bb0: stur            x3, [fp, #-8]
    // 0x870bb4: r0 = LoadStaticField(0xb54)
    //     0x870bb4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870bb8: ldr             x0, [x0, #0x16a8]
    // 0x870bbc: cmp             w0, NULL
    // 0x870bc0: b.ne            #0x870bd0
    // 0x870bc4: nop             
    // 0x870bc8: r0 = Null
    //     0x870bc8: mov             x0, NULL
    // 0x870bcc: b               #0x870bf8
    // 0x870bd0: r17 = 327
    //     0x870bd0: movz            x17, #0x147
    // 0x870bd4: ldr             w1, [x0, x17]
    // 0x870bd8: DecompressPointer r1
    //     0x870bd8: add             x1, x1, HEAP, lsl #32
    // 0x870bdc: r0 = LoadClassIdInstr(r1)
    //     0x870bdc: ldur            x0, [x1, #-1]
    //     0x870be0: ubfx            x0, x0, #0xc, #0x14
    // 0x870be4: r2 = "storyFundRaise.End"
    //     0x870be4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ad0] "storyFundRaise.End"
    //     0x870be8: ldr             x2, [x2, #0xad0]
    // 0x870bec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870bec: sub             lr, x0, #0xb4
    //     0x870bf0: ldr             lr, [x21, lr, lsl #3]
    //     0x870bf4: blr             lr
    // 0x870bf8: r1 = 59
    //     0x870bf8: movz            x1, #0x3b
    // 0x870bfc: branchIfSmi(r0, 0x870c0c)
    //     0x870bfc: tbz             w0, #0, #0x870c0c
    //     0x870c00: nop             
    // 0x870c04: r1 = LoadClassIdInstr(r0)
    //     0x870c04: ldur            x1, [x0, #-1]
    //     0x870c08: ubfx            x1, x1, #0xc, #0x14
    // 0x870c0c: r16 = true
    //     0x870c0c: add             x16, NULL, #0x20  ; true
    // 0x870c10: stp             x16, x0, [SP]
    // 0x870c14: mov             x0, x1
    // 0x870c18: mov             lr, x0
    // 0x870c1c: ldr             lr, [x21, lr, lsl #3]
    // 0x870c20: blr             lr
    // 0x870c24: tbz             w0, #4, #0x870ca4
    // 0x870c28: nop             
    // 0x870c2c: r0 = LoadStaticField(0xb54)
    //     0x870c2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870c30: ldr             x0, [x0, #0x16a8]
    // 0x870c34: cmp             w0, NULL
    // 0x870c38: b.ne            #0x870c48
    // 0x870c3c: nop             
    // 0x870c40: r0 = Null
    //     0x870c40: mov             x0, NULL
    // 0x870c44: b               #0x870c70
    // 0x870c48: r17 = 327
    //     0x870c48: movz            x17, #0x147
    // 0x870c4c: ldr             w1, [x0, x17]
    // 0x870c50: DecompressPointer r1
    //     0x870c50: add             x1, x1, HEAP, lsl #32
    // 0x870c54: r0 = LoadClassIdInstr(r1)
    //     0x870c54: ldur            x0, [x1, #-1]
    //     0x870c58: ubfx            x0, x0, #0xc, #0x14
    // 0x870c5c: r2 = "storyPetition.End"
    //     0x870c5c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ad8] "storyPetition.End"
    //     0x870c60: ldr             x2, [x2, #0xad8]
    // 0x870c64: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870c64: sub             lr, x0, #0xb4
    //     0x870c68: ldr             lr, [x21, lr, lsl #3]
    //     0x870c6c: blr             lr
    // 0x870c70: r1 = 59
    //     0x870c70: movz            x1, #0x3b
    // 0x870c74: branchIfSmi(r0, 0x870c84)
    //     0x870c74: tbz             w0, #0, #0x870c84
    //     0x870c78: nop             
    // 0x870c7c: r1 = LoadClassIdInstr(r0)
    //     0x870c7c: ldur            x1, [x0, #-1]
    //     0x870c80: ubfx            x1, x1, #0xc, #0x14
    // 0x870c84: r16 = true
    //     0x870c84: add             x16, NULL, #0x20  ; true
    // 0x870c88: stp             x16, x0, [SP]
    // 0x870c8c: mov             x0, x1
    // 0x870c90: mov             lr, x0
    // 0x870c94: ldr             lr, [x21, lr, lsl #3]
    // 0x870c98: blr             lr
    // 0x870c9c: tbnz            w0, #4, #0x870cb0
    // 0x870ca0: nop             
    // 0x870ca4: r3 = "sportshop4"
    //     0x870ca4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ae0] "sportshop4"
    //     0x870ca8: ldr             x3, [x3, #0xae0]
    // 0x870cac: b               #0x870cb4
    // 0x870cb0: ldur            x3, [fp, #-8]
    // 0x870cb4: stur            x3, [fp, #-8]
    // 0x870cb8: r0 = LoadStaticField(0xb54)
    //     0x870cb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870cbc: ldr             x0, [x0, #0x16a8]
    // 0x870cc0: cmp             w0, NULL
    // 0x870cc4: b.ne            #0x870cd4
    // 0x870cc8: nop             
    // 0x870ccc: r0 = Null
    //     0x870ccc: mov             x0, NULL
    // 0x870cd0: b               #0x870cfc
    // 0x870cd4: r17 = 327
    //     0x870cd4: movz            x17, #0x147
    // 0x870cd8: ldr             w1, [x0, x17]
    // 0x870cdc: DecompressPointer r1
    //     0x870cdc: add             x1, x1, HEAP, lsl #32
    // 0x870ce0: r0 = LoadClassIdInstr(r1)
    //     0x870ce0: ldur            x0, [x1, #-1]
    //     0x870ce4: ubfx            x0, x0, #0xc, #0x14
    // 0x870ce8: r2 = "storyFinale.End"
    //     0x870ce8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfbd8] "storyFinale.End"
    //     0x870cec: ldr             x2, [x2, #0xbd8]
    // 0x870cf0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870cf0: sub             lr, x0, #0xb4
    //     0x870cf4: ldr             lr, [x21, lr, lsl #3]
    //     0x870cf8: blr             lr
    // 0x870cfc: r1 = 59
    //     0x870cfc: movz            x1, #0x3b
    // 0x870d00: branchIfSmi(r0, 0x870d10)
    //     0x870d00: tbz             w0, #0, #0x870d10
    //     0x870d04: nop             
    // 0x870d08: r1 = LoadClassIdInstr(r0)
    //     0x870d08: ldur            x1, [x0, #-1]
    //     0x870d0c: ubfx            x1, x1, #0xc, #0x14
    // 0x870d10: r16 = true
    //     0x870d10: add             x16, NULL, #0x20  ; true
    // 0x870d14: stp             x16, x0, [SP]
    // 0x870d18: mov             x0, x1
    // 0x870d1c: mov             lr, x0
    // 0x870d20: ldr             lr, [x21, lr, lsl #3]
    // 0x870d24: blr             lr
    // 0x870d28: tbz             w0, #4, #0x870e20
    // 0x870d2c: nop             
    // 0x870d30: r0 = LoadStaticField(0xb54)
    //     0x870d30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870d34: ldr             x0, [x0, #0x16a8]
    // 0x870d38: cmp             w0, NULL
    // 0x870d3c: b.ne            #0x870d4c
    // 0x870d40: nop             
    // 0x870d44: r0 = Null
    //     0x870d44: mov             x0, NULL
    // 0x870d48: b               #0x870d74
    // 0x870d4c: r17 = 327
    //     0x870d4c: movz            x17, #0x147
    // 0x870d50: ldr             w1, [x0, x17]
    // 0x870d54: DecompressPointer r1
    //     0x870d54: add             x1, x1, HEAP, lsl #32
    // 0x870d58: r0 = LoadClassIdInstr(r1)
    //     0x870d58: ldur            x0, [x1, #-1]
    //     0x870d5c: ubfx            x0, x0, #0xc, #0x14
    // 0x870d60: r2 = "storyTrueFinale.End"
    //     0x870d60: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ae8] "storyTrueFinale.End"
    //     0x870d64: ldr             x2, [x2, #0xae8]
    // 0x870d68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870d68: sub             lr, x0, #0xb4
    //     0x870d6c: ldr             lr, [x21, lr, lsl #3]
    //     0x870d70: blr             lr
    // 0x870d74: r1 = 59
    //     0x870d74: movz            x1, #0x3b
    // 0x870d78: branchIfSmi(r0, 0x870d88)
    //     0x870d78: tbz             w0, #0, #0x870d88
    //     0x870d7c: nop             
    // 0x870d80: r1 = LoadClassIdInstr(r0)
    //     0x870d80: ldur            x1, [x0, #-1]
    //     0x870d84: ubfx            x1, x1, #0xc, #0x14
    // 0x870d88: r16 = true
    //     0x870d88: add             x16, NULL, #0x20  ; true
    // 0x870d8c: stp             x16, x0, [SP]
    // 0x870d90: mov             x0, x1
    // 0x870d94: mov             lr, x0
    // 0x870d98: ldr             lr, [x21, lr, lsl #3]
    // 0x870d9c: blr             lr
    // 0x870da0: tbz             w0, #4, #0x870e20
    // 0x870da4: nop             
    // 0x870da8: r0 = LoadStaticField(0xb54)
    //     0x870da8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870dac: ldr             x0, [x0, #0x16a8]
    // 0x870db0: cmp             w0, NULL
    // 0x870db4: b.ne            #0x870dc4
    // 0x870db8: nop             
    // 0x870dbc: r0 = Null
    //     0x870dbc: mov             x0, NULL
    // 0x870dc0: b               #0x870dec
    // 0x870dc4: r17 = 327
    //     0x870dc4: movz            x17, #0x147
    // 0x870dc8: ldr             w1, [x0, x17]
    // 0x870dcc: DecompressPointer r1
    //     0x870dcc: add             x1, x1, HEAP, lsl #32
    // 0x870dd0: r0 = LoadClassIdInstr(r1)
    //     0x870dd0: ldur            x0, [x1, #-1]
    //     0x870dd4: ubfx            x0, x0, #0xc, #0x14
    // 0x870dd8: r2 = "storyTrueFinale.BadEnd"
    //     0x870dd8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10af0] "storyTrueFinale.BadEnd"
    //     0x870ddc: ldr             x2, [x2, #0xaf0]
    // 0x870de0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870de0: sub             lr, x0, #0xb4
    //     0x870de4: ldr             lr, [x21, lr, lsl #3]
    //     0x870de8: blr             lr
    // 0x870dec: r1 = 59
    //     0x870dec: movz            x1, #0x3b
    // 0x870df0: branchIfSmi(r0, 0x870e00)
    //     0x870df0: tbz             w0, #0, #0x870e00
    //     0x870df4: nop             
    // 0x870df8: r1 = LoadClassIdInstr(r0)
    //     0x870df8: ldur            x1, [x0, #-1]
    //     0x870dfc: ubfx            x1, x1, #0xc, #0x14
    // 0x870e00: r16 = true
    //     0x870e00: add             x16, NULL, #0x20  ; true
    // 0x870e04: stp             x16, x0, [SP]
    // 0x870e08: mov             x0, x1
    // 0x870e0c: mov             lr, x0
    // 0x870e10: ldr             lr, [x21, lr, lsl #3]
    // 0x870e14: blr             lr
    // 0x870e18: tbnz            w0, #4, #0x870e2c
    // 0x870e1c: nop             
    // 0x870e20: r0 = "sportshop5"
    //     0x870e20: add             x0, PP, #0x10, lsl #12  ; [pp+0x10af8] "sportshop5"
    //     0x870e24: ldr             x0, [x0, #0xaf8]
    // 0x870e28: b               #0x8838b4
    // 0x870e2c: ldur            x0, [fp, #-8]
    // 0x870e30: b               #0x8838b4
    // 0x870e34: r16 = "azurashoppromotion"
    //     0x870e34: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b00] "azurashoppromotion"
    //     0x870e38: ldr             x16, [x16, #0xb00]
    // 0x870e3c: ldur            lr, [fp, #-0x28]
    // 0x870e40: stp             lr, x16, [SP]
    // 0x870e44: r0 = ==()
    //     0x870e44: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x870e48: tbnz            w0, #4, #0x8711ec
    // 0x870e4c: nop             
    // 0x870e50: r0 = LoadStaticField(0xb54)
    //     0x870e50: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870e54: ldr             x0, [x0, #0x16a8]
    // 0x870e58: cmp             w0, NULL
    // 0x870e5c: b.ne            #0x870e6c
    // 0x870e60: nop             
    // 0x870e64: r0 = Null
    //     0x870e64: mov             x0, NULL
    // 0x870e68: b               #0x870e94
    // 0x870e6c: r17 = 327
    //     0x870e6c: movz            x17, #0x147
    // 0x870e70: ldr             w1, [x0, x17]
    // 0x870e74: DecompressPointer r1
    //     0x870e74: add             x1, x1, HEAP, lsl #32
    // 0x870e78: r0 = LoadClassIdInstr(r1)
    //     0x870e78: ldur            x0, [x1, #-1]
    //     0x870e7c: ubfx            x0, x0, #0xc, #0x14
    // 0x870e80: r2 = "storyShoumaBadge.6"
    //     0x870e80: add             x2, PP, #0x10, lsl #12  ; [pp+0x10aa8] "storyShoumaBadge.6"
    //     0x870e84: ldr             x2, [x2, #0xaa8]
    // 0x870e88: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870e88: sub             lr, x0, #0xb4
    //     0x870e8c: ldr             lr, [x21, lr, lsl #3]
    //     0x870e90: blr             lr
    // 0x870e94: r1 = 59
    //     0x870e94: movz            x1, #0x3b
    // 0x870e98: branchIfSmi(r0, 0x870ea8)
    //     0x870e98: tbz             w0, #0, #0x870ea8
    //     0x870e9c: nop             
    // 0x870ea0: r1 = LoadClassIdInstr(r0)
    //     0x870ea0: ldur            x1, [x0, #-1]
    //     0x870ea4: ubfx            x1, x1, #0xc, #0x14
    // 0x870ea8: r16 = true
    //     0x870ea8: add             x16, NULL, #0x20  ; true
    // 0x870eac: stp             x16, x0, [SP]
    // 0x870eb0: mov             x0, x1
    // 0x870eb4: mov             lr, x0
    // 0x870eb8: ldr             lr, [x21, lr, lsl #3]
    // 0x870ebc: blr             lr
    // 0x870ec0: tbnz            w0, #4, #0x870ed4
    // 0x870ec4: nop             
    // 0x870ec8: r3 = "sportshopP2"
    //     0x870ec8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10b08] "sportshopP2"
    //     0x870ecc: ldr             x3, [x3, #0xb08]
    // 0x870ed0: b               #0x870edc
    // 0x870ed4: r3 = "sportshopP"
    //     0x870ed4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10b10] "sportshopP"
    //     0x870ed8: ldr             x3, [x3, #0xb10]
    // 0x870edc: stur            x3, [fp, #-8]
    // 0x870ee0: r0 = LoadStaticField(0xb54)
    //     0x870ee0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870ee4: ldr             x0, [x0, #0x16a8]
    // 0x870ee8: cmp             w0, NULL
    // 0x870eec: b.ne            #0x870efc
    // 0x870ef0: nop             
    // 0x870ef4: r0 = Null
    //     0x870ef4: mov             x0, NULL
    // 0x870ef8: b               #0x870f24
    // 0x870efc: r17 = 327
    //     0x870efc: movz            x17, #0x147
    // 0x870f00: ldr             w1, [x0, x17]
    // 0x870f04: DecompressPointer r1
    //     0x870f04: add             x1, x1, HEAP, lsl #32
    // 0x870f08: r0 = LoadClassIdInstr(r1)
    //     0x870f08: ldur            x0, [x1, #-1]
    //     0x870f0c: ubfx            x0, x0, #0xc, #0x14
    // 0x870f10: r2 = "storyDojo.End"
    //     0x870f10: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ac0] "storyDojo.End"
    //     0x870f14: ldr             x2, [x2, #0xac0]
    // 0x870f18: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870f18: sub             lr, x0, #0xb4
    //     0x870f1c: ldr             lr, [x21, lr, lsl #3]
    //     0x870f20: blr             lr
    // 0x870f24: r1 = 59
    //     0x870f24: movz            x1, #0x3b
    // 0x870f28: branchIfSmi(r0, 0x870f38)
    //     0x870f28: tbz             w0, #0, #0x870f38
    //     0x870f2c: nop             
    // 0x870f30: r1 = LoadClassIdInstr(r0)
    //     0x870f30: ldur            x1, [x0, #-1]
    //     0x870f34: ubfx            x1, x1, #0xc, #0x14
    // 0x870f38: r16 = true
    //     0x870f38: add             x16, NULL, #0x20  ; true
    // 0x870f3c: stp             x16, x0, [SP]
    // 0x870f40: mov             x0, x1
    // 0x870f44: mov             lr, x0
    // 0x870f48: ldr             lr, [x21, lr, lsl #3]
    // 0x870f4c: blr             lr
    // 0x870f50: tbnz            w0, #4, #0x870f64
    // 0x870f54: nop             
    // 0x870f58: r3 = "sportshopP3"
    //     0x870f58: add             x3, PP, #0x10, lsl #12  ; [pp+0x10b18] "sportshopP3"
    //     0x870f5c: ldr             x3, [x3, #0xb18]
    // 0x870f60: b               #0x870f68
    // 0x870f64: ldur            x3, [fp, #-8]
    // 0x870f68: stur            x3, [fp, #-8]
    // 0x870f6c: r0 = LoadStaticField(0xb54)
    //     0x870f6c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870f70: ldr             x0, [x0, #0x16a8]
    // 0x870f74: cmp             w0, NULL
    // 0x870f78: b.ne            #0x870f88
    // 0x870f7c: nop             
    // 0x870f80: r0 = Null
    //     0x870f80: mov             x0, NULL
    // 0x870f84: b               #0x870fb0
    // 0x870f88: r17 = 327
    //     0x870f88: movz            x17, #0x147
    // 0x870f8c: ldr             w1, [x0, x17]
    // 0x870f90: DecompressPointer r1
    //     0x870f90: add             x1, x1, HEAP, lsl #32
    // 0x870f94: r0 = LoadClassIdInstr(r1)
    //     0x870f94: ldur            x0, [x1, #-1]
    //     0x870f98: ubfx            x0, x0, #0xc, #0x14
    // 0x870f9c: r2 = "storyFundRaise.End"
    //     0x870f9c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ad0] "storyFundRaise.End"
    //     0x870fa0: ldr             x2, [x2, #0xad0]
    // 0x870fa4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x870fa4: sub             lr, x0, #0xb4
    //     0x870fa8: ldr             lr, [x21, lr, lsl #3]
    //     0x870fac: blr             lr
    // 0x870fb0: r1 = 59
    //     0x870fb0: movz            x1, #0x3b
    // 0x870fb4: branchIfSmi(r0, 0x870fc4)
    //     0x870fb4: tbz             w0, #0, #0x870fc4
    //     0x870fb8: nop             
    // 0x870fbc: r1 = LoadClassIdInstr(r0)
    //     0x870fbc: ldur            x1, [x0, #-1]
    //     0x870fc0: ubfx            x1, x1, #0xc, #0x14
    // 0x870fc4: r16 = true
    //     0x870fc4: add             x16, NULL, #0x20  ; true
    // 0x870fc8: stp             x16, x0, [SP]
    // 0x870fcc: mov             x0, x1
    // 0x870fd0: mov             lr, x0
    // 0x870fd4: ldr             lr, [x21, lr, lsl #3]
    // 0x870fd8: blr             lr
    // 0x870fdc: tbz             w0, #4, #0x87105c
    // 0x870fe0: nop             
    // 0x870fe4: r0 = LoadStaticField(0xb54)
    //     0x870fe4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x870fe8: ldr             x0, [x0, #0x16a8]
    // 0x870fec: cmp             w0, NULL
    // 0x870ff0: b.ne            #0x871000
    // 0x870ff4: nop             
    // 0x870ff8: r0 = Null
    //     0x870ff8: mov             x0, NULL
    // 0x870ffc: b               #0x871028
    // 0x871000: r17 = 327
    //     0x871000: movz            x17, #0x147
    // 0x871004: ldr             w1, [x0, x17]
    // 0x871008: DecompressPointer r1
    //     0x871008: add             x1, x1, HEAP, lsl #32
    // 0x87100c: r0 = LoadClassIdInstr(r1)
    //     0x87100c: ldur            x0, [x1, #-1]
    //     0x871010: ubfx            x0, x0, #0xc, #0x14
    // 0x871014: r2 = "storyPetition.End"
    //     0x871014: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ad8] "storyPetition.End"
    //     0x871018: ldr             x2, [x2, #0xad8]
    // 0x87101c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87101c: sub             lr, x0, #0xb4
    //     0x871020: ldr             lr, [x21, lr, lsl #3]
    //     0x871024: blr             lr
    // 0x871028: r1 = 59
    //     0x871028: movz            x1, #0x3b
    // 0x87102c: branchIfSmi(r0, 0x87103c)
    //     0x87102c: tbz             w0, #0, #0x87103c
    //     0x871030: nop             
    // 0x871034: r1 = LoadClassIdInstr(r0)
    //     0x871034: ldur            x1, [x0, #-1]
    //     0x871038: ubfx            x1, x1, #0xc, #0x14
    // 0x87103c: r16 = true
    //     0x87103c: add             x16, NULL, #0x20  ; true
    // 0x871040: stp             x16, x0, [SP]
    // 0x871044: mov             x0, x1
    // 0x871048: mov             lr, x0
    // 0x87104c: ldr             lr, [x21, lr, lsl #3]
    // 0x871050: blr             lr
    // 0x871054: tbnz            w0, #4, #0x871068
    // 0x871058: nop             
    // 0x87105c: r3 = "sportshopP4"
    //     0x87105c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10b20] "sportshopP4"
    //     0x871060: ldr             x3, [x3, #0xb20]
    // 0x871064: b               #0x87106c
    // 0x871068: ldur            x3, [fp, #-8]
    // 0x87106c: stur            x3, [fp, #-8]
    // 0x871070: r0 = LoadStaticField(0xb54)
    //     0x871070: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871074: ldr             x0, [x0, #0x16a8]
    // 0x871078: cmp             w0, NULL
    // 0x87107c: b.ne            #0x87108c
    // 0x871080: nop             
    // 0x871084: r0 = Null
    //     0x871084: mov             x0, NULL
    // 0x871088: b               #0x8710b4
    // 0x87108c: r17 = 327
    //     0x87108c: movz            x17, #0x147
    // 0x871090: ldr             w1, [x0, x17]
    // 0x871094: DecompressPointer r1
    //     0x871094: add             x1, x1, HEAP, lsl #32
    // 0x871098: r0 = LoadClassIdInstr(r1)
    //     0x871098: ldur            x0, [x1, #-1]
    //     0x87109c: ubfx            x0, x0, #0xc, #0x14
    // 0x8710a0: r2 = "storyFinale.End"
    //     0x8710a0: add             x2, PP, #0xf, lsl #12  ; [pp+0xfbd8] "storyFinale.End"
    //     0x8710a4: ldr             x2, [x2, #0xbd8]
    // 0x8710a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8710a8: sub             lr, x0, #0xb4
    //     0x8710ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8710b0: blr             lr
    // 0x8710b4: r1 = 59
    //     0x8710b4: movz            x1, #0x3b
    // 0x8710b8: branchIfSmi(r0, 0x8710c8)
    //     0x8710b8: tbz             w0, #0, #0x8710c8
    //     0x8710bc: nop             
    // 0x8710c0: r1 = LoadClassIdInstr(r0)
    //     0x8710c0: ldur            x1, [x0, #-1]
    //     0x8710c4: ubfx            x1, x1, #0xc, #0x14
    // 0x8710c8: r16 = true
    //     0x8710c8: add             x16, NULL, #0x20  ; true
    // 0x8710cc: stp             x16, x0, [SP]
    // 0x8710d0: mov             x0, x1
    // 0x8710d4: mov             lr, x0
    // 0x8710d8: ldr             lr, [x21, lr, lsl #3]
    // 0x8710dc: blr             lr
    // 0x8710e0: tbz             w0, #4, #0x8711d8
    // 0x8710e4: nop             
    // 0x8710e8: r0 = LoadStaticField(0xb54)
    //     0x8710e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8710ec: ldr             x0, [x0, #0x16a8]
    // 0x8710f0: cmp             w0, NULL
    // 0x8710f4: b.ne            #0x871104
    // 0x8710f8: nop             
    // 0x8710fc: r0 = Null
    //     0x8710fc: mov             x0, NULL
    // 0x871100: b               #0x87112c
    // 0x871104: r17 = 327
    //     0x871104: movz            x17, #0x147
    // 0x871108: ldr             w1, [x0, x17]
    // 0x87110c: DecompressPointer r1
    //     0x87110c: add             x1, x1, HEAP, lsl #32
    // 0x871110: r0 = LoadClassIdInstr(r1)
    //     0x871110: ldur            x0, [x1, #-1]
    //     0x871114: ubfx            x0, x0, #0xc, #0x14
    // 0x871118: r2 = "storyTrueFinale.End"
    //     0x871118: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ae8] "storyTrueFinale.End"
    //     0x87111c: ldr             x2, [x2, #0xae8]
    // 0x871120: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871120: sub             lr, x0, #0xb4
    //     0x871124: ldr             lr, [x21, lr, lsl #3]
    //     0x871128: blr             lr
    // 0x87112c: r1 = 59
    //     0x87112c: movz            x1, #0x3b
    // 0x871130: branchIfSmi(r0, 0x871140)
    //     0x871130: tbz             w0, #0, #0x871140
    //     0x871134: nop             
    // 0x871138: r1 = LoadClassIdInstr(r0)
    //     0x871138: ldur            x1, [x0, #-1]
    //     0x87113c: ubfx            x1, x1, #0xc, #0x14
    // 0x871140: r16 = true
    //     0x871140: add             x16, NULL, #0x20  ; true
    // 0x871144: stp             x16, x0, [SP]
    // 0x871148: mov             x0, x1
    // 0x87114c: mov             lr, x0
    // 0x871150: ldr             lr, [x21, lr, lsl #3]
    // 0x871154: blr             lr
    // 0x871158: tbz             w0, #4, #0x8711d8
    // 0x87115c: nop             
    // 0x871160: r0 = LoadStaticField(0xb54)
    //     0x871160: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871164: ldr             x0, [x0, #0x16a8]
    // 0x871168: cmp             w0, NULL
    // 0x87116c: b.ne            #0x87117c
    // 0x871170: nop             
    // 0x871174: r0 = Null
    //     0x871174: mov             x0, NULL
    // 0x871178: b               #0x8711a4
    // 0x87117c: r17 = 327
    //     0x87117c: movz            x17, #0x147
    // 0x871180: ldr             w1, [x0, x17]
    // 0x871184: DecompressPointer r1
    //     0x871184: add             x1, x1, HEAP, lsl #32
    // 0x871188: r0 = LoadClassIdInstr(r1)
    //     0x871188: ldur            x0, [x1, #-1]
    //     0x87118c: ubfx            x0, x0, #0xc, #0x14
    // 0x871190: r2 = "storyTrueFinale.BadEnd"
    //     0x871190: add             x2, PP, #0x10, lsl #12  ; [pp+0x10af0] "storyTrueFinale.BadEnd"
    //     0x871194: ldr             x2, [x2, #0xaf0]
    // 0x871198: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871198: sub             lr, x0, #0xb4
    //     0x87119c: ldr             lr, [x21, lr, lsl #3]
    //     0x8711a0: blr             lr
    // 0x8711a4: r1 = 59
    //     0x8711a4: movz            x1, #0x3b
    // 0x8711a8: branchIfSmi(r0, 0x8711b8)
    //     0x8711a8: tbz             w0, #0, #0x8711b8
    //     0x8711ac: nop             
    // 0x8711b0: r1 = LoadClassIdInstr(r0)
    //     0x8711b0: ldur            x1, [x0, #-1]
    //     0x8711b4: ubfx            x1, x1, #0xc, #0x14
    // 0x8711b8: r16 = true
    //     0x8711b8: add             x16, NULL, #0x20  ; true
    // 0x8711bc: stp             x16, x0, [SP]
    // 0x8711c0: mov             x0, x1
    // 0x8711c4: mov             lr, x0
    // 0x8711c8: ldr             lr, [x21, lr, lsl #3]
    // 0x8711cc: blr             lr
    // 0x8711d0: tbnz            w0, #4, #0x8711e4
    // 0x8711d4: nop             
    // 0x8711d8: r0 = "sportshopP5"
    //     0x8711d8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b28] "sportshopP5"
    //     0x8711dc: ldr             x0, [x0, #0xb28]
    // 0x8711e0: b               #0x8838b4
    // 0x8711e4: ldur            x0, [fp, #-8]
    // 0x8711e8: b               #0x8838b4
    // 0x8711ec: r16 = "guanHint"
    //     0x8711ec: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b30] "guanHint"
    //     0x8711f0: ldr             x16, [x16, #0xb30]
    // 0x8711f4: ldur            lr, [fp, #-0x28]
    // 0x8711f8: stp             lr, x16, [SP]
    // 0x8711fc: r0 = ==()
    //     0x8711fc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x871200: tbnz            w0, #4, #0x871408
    // 0x871204: nop             
    // 0x871208: r0 = LoadStaticField(0xb54)
    //     0x871208: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87120c: ldr             x0, [x0, #0x16a8]
    // 0x871210: cmp             w0, NULL
    // 0x871214: b.ne            #0x871224
    // 0x871218: nop             
    // 0x87121c: r0 = Null
    //     0x87121c: mov             x0, NULL
    // 0x871220: b               #0x871234
    // 0x871224: r17 = 311
    //     0x871224: movz            x17, #0x137
    // 0x871228: ldr             w1, [x0, x17]
    // 0x87122c: DecompressPointer r1
    //     0x87122c: add             x1, x1, HEAP, lsl #32
    // 0x871230: mov             x0, x1
    // 0x871234: cmp             w0, NULL
    // 0x871238: b.ne            #0x87124c
    // 0x87123c: nop             
    // 0x871240: r1 = <String>
    //     0x871240: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x871244: r2 = 0
    //     0x871244: movz            x2, #0
    // 0x871248: r0 = _GrowableList()
    //     0x871248: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x87124c: r1 = LoadClassIdInstr(r0)
    //     0x87124c: ldur            x1, [x0, #-1]
    //     0x871250: ubfx            x1, x1, #0xc, #0x14
    // 0x871254: str             x0, [SP]
    // 0x871258: mov             x0, x1
    // 0x87125c: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x87125c: movz            x17, #0x8ca0
    //     0x871260: add             lr, x0, x17
    //     0x871264: ldr             lr, [x21, lr, lsl #3]
    //     0x871268: blr             lr
    // 0x87126c: r1 = LoadInt32Instr(r0)
    //     0x87126c: sbfx            x1, x0, #1, #0x1f
    //     0x871270: tbz             w0, #0, #0x87127c
    //     0x871274: nop             
    //     0x871278: ldur            x1, [x0, #7]
    // 0x87127c: cmp             x1, #0xa
    // 0x871280: b.le            #0x871294
    // 0x871284: nop             
    // 0x871288: r0 = "deckHint"
    //     0x871288: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b38] "deckHint"
    //     0x87128c: ldr             x0, [x0, #0xb38]
    // 0x871290: b               #0x8838b4
    // 0x871294: r0 = LoadStaticField(0xb54)
    //     0x871294: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871298: ldr             x0, [x0, #0x16a8]
    // 0x87129c: cmp             w0, NULL
    // 0x8712a0: b.ne            #0x8712b0
    // 0x8712a4: nop             
    // 0x8712a8: r0 = Null
    //     0x8712a8: mov             x0, NULL
    // 0x8712ac: b               #0x8712cc
    // 0x8712b0: LoadField: r2 = r0->field_bb
    //     0x8712b0: ldur            x2, [x0, #0xbb]
    // 0x8712b4: r0 = BoxInt64Instr(r2)
    //     0x8712b4: sbfiz           x0, x2, #1, #0x1f
    //     0x8712b8: cmp             x2, x0, asr #1
    //     0x8712bc: b.eq            #0x8712cc
    //     0x8712c0: nop             
    //     0x8712c4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8712c8: stur            x2, [x0, #7]
    // 0x8712cc: cmp             w0, NULL
    // 0x8712d0: b.ne            #0x8712e0
    // 0x8712d4: nop             
    // 0x8712d8: r0 = 0
    //     0x8712d8: movz            x0, #0
    // 0x8712dc: b               #0x8712f4
    // 0x8712e0: r1 = LoadInt32Instr(r0)
    //     0x8712e0: sbfx            x1, x0, #1, #0x1f
    //     0x8712e4: tbz             w0, #0, #0x8712f0
    //     0x8712e8: nop             
    //     0x8712ec: ldur            x1, [x0, #7]
    // 0x8712f0: mov             x0, x1
    // 0x8712f4: cmp             x0, #0xa
    // 0x8712f8: b.ge            #0x87130c
    // 0x8712fc: nop             
    // 0x871300: r0 = "actHint"
    //     0x871300: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b40] "actHint"
    //     0x871304: ldr             x0, [x0, #0xb40]
    // 0x871308: b               #0x8838b4
    // 0x87130c: r0 = LoadStaticField(0xb54)
    //     0x87130c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871310: ldr             x0, [x0, #0x16a8]
    // 0x871314: cmp             w0, NULL
    // 0x871318: b.ne            #0x871328
    // 0x87131c: nop             
    // 0x871320: r0 = Null
    //     0x871320: mov             x0, NULL
    // 0x871324: b               #0x871344
    // 0x871328: LoadField: r2 = r0->field_b3
    //     0x871328: ldur            x2, [x0, #0xb3]
    // 0x87132c: r0 = BoxInt64Instr(r2)
    //     0x87132c: sbfiz           x0, x2, #1, #0x1f
    //     0x871330: cmp             x2, x0, asr #1
    //     0x871334: b.eq            #0x871344
    //     0x871338: nop             
    //     0x87133c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x871340: stur            x2, [x0, #7]
    // 0x871344: cmp             w0, NULL
    // 0x871348: b.ne            #0x871358
    // 0x87134c: nop             
    // 0x871350: r0 = 0
    //     0x871350: movz            x0, #0
    // 0x871354: b               #0x87136c
    // 0x871358: r1 = LoadInt32Instr(r0)
    //     0x871358: sbfx            x1, x0, #1, #0x1f
    //     0x87135c: tbz             w0, #0, #0x871368
    //     0x871360: nop             
    //     0x871364: ldur            x1, [x0, #7]
    // 0x871368: mov             x0, x1
    // 0x87136c: cmp             x0, #3
    // 0x871370: b.ge            #0x871384
    // 0x871374: nop             
    // 0x871378: r0 = "recHint"
    //     0x871378: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b48] "recHint"
    //     0x87137c: ldr             x0, [x0, #0xb48]
    // 0x871380: b               #0x8838b4
    // 0x871384: r0 = LoadStaticField(0xb54)
    //     0x871384: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871388: ldr             x0, [x0, #0x16a8]
    // 0x87138c: cmp             w0, NULL
    // 0x871390: b.ne            #0x8713a0
    // 0x871394: nop             
    // 0x871398: r0 = Null
    //     0x871398: mov             x0, NULL
    // 0x87139c: b               #0x8713bc
    // 0x8713a0: LoadField: r2 = r0->field_9b
    //     0x8713a0: ldur            x2, [x0, #0x9b]
    // 0x8713a4: r0 = BoxInt64Instr(r2)
    //     0x8713a4: sbfiz           x0, x2, #1, #0x1f
    //     0x8713a8: cmp             x2, x0, asr #1
    //     0x8713ac: b.eq            #0x8713bc
    //     0x8713b0: nop             
    //     0x8713b4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8713b8: stur            x2, [x0, #7]
    // 0x8713bc: cmp             w0, NULL
    // 0x8713c0: b.ne            #0x8713d0
    // 0x8713c4: nop             
    // 0x8713c8: r0 = 0
    //     0x8713c8: movz            x0, #0
    // 0x8713cc: b               #0x8713e4
    // 0x8713d0: r1 = LoadInt32Instr(r0)
    //     0x8713d0: sbfx            x1, x0, #1, #0x1f
    //     0x8713d4: tbz             w0, #0, #0x8713e0
    //     0x8713d8: nop             
    //     0x8713dc: ldur            x1, [x0, #7]
    // 0x8713e0: mov             x0, x1
    // 0x8713e4: cmp             x0, #5
    // 0x8713e8: b.ge            #0x8713fc
    // 0x8713ec: nop             
    // 0x8713f0: r0 = "techHint"
    //     0x8713f0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b50] "techHint"
    //     0x8713f4: ldr             x0, [x0, #0xb50]
    // 0x8713f8: b               #0x8838b4
    // 0x8713fc: r0 = "endHint"
    //     0x8713fc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b58] "endHint"
    //     0x871400: ldr             x0, [x0, #0xb58]
    // 0x871404: b               #0x8838b4
    // 0x871408: r16 = "legendCheck"
    //     0x871408: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b60] "legendCheck"
    //     0x87140c: ldr             x16, [x16, #0xb60]
    // 0x871410: ldur            lr, [fp, #-0x28]
    // 0x871414: stp             lr, x16, [SP]
    // 0x871418: r0 = ==()
    //     0x871418: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87141c: tbnz            w0, #4, #0x871650
    // 0x871420: nop             
    // 0x871424: r0 = LoadStaticField(0xb54)
    //     0x871424: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871428: ldr             x0, [x0, #0x16a8]
    // 0x87142c: cmp             w0, NULL
    // 0x871430: b.ne            #0x871440
    // 0x871434: nop             
    // 0x871438: r0 = Null
    //     0x871438: mov             x0, NULL
    // 0x87143c: b               #0x871468
    // 0x871440: r17 = 351
    //     0x871440: movz            x17, #0x15f
    // 0x871444: ldr             w1, [x0, x17]
    // 0x871448: DecompressPointer r1
    //     0x871448: add             x1, x1, HEAP, lsl #32
    // 0x87144c: r0 = LoadClassIdInstr(r1)
    //     0x87144c: ldur            x0, [x1, #-1]
    //     0x871450: ubfx            x0, x0, #0xc, #0x14
    // 0x871454: r2 = "legendBattle"
    //     0x871454: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x871458: ldr             x2, [x2, #0xb68]
    // 0x87145c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87145c: sub             lr, x0, #0xb4
    //     0x871460: ldr             lr, [x21, lr, lsl #3]
    //     0x871464: blr             lr
    // 0x871468: r1 = 59
    //     0x871468: movz            x1, #0x3b
    // 0x87146c: branchIfSmi(r0, 0x87147c)
    //     0x87146c: tbz             w0, #0, #0x87147c
    //     0x871470: nop             
    // 0x871474: r1 = LoadClassIdInstr(r0)
    //     0x871474: ldur            x1, [x0, #-1]
    //     0x871478: ubfx            x1, x1, #0xc, #0x14
    // 0x87147c: r16 = "leecw"
    //     0x87147c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4a8] "leecw"
    //     0x871480: ldr             x16, [x16, #0x4a8]
    // 0x871484: stp             x16, x0, [SP]
    // 0x871488: mov             x0, x1
    // 0x87148c: mov             lr, x0
    // 0x871490: ldr             lr, [x21, lr, lsl #3]
    // 0x871494: blr             lr
    // 0x871498: tbnz            w0, #4, #0x8714ac
    // 0x87149c: nop             
    // 0x8714a0: r0 = "legend1"
    //     0x8714a0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b70] "legend1"
    //     0x8714a4: ldr             x0, [x0, #0xb70]
    // 0x8714a8: b               #0x8838b4
    // 0x8714ac: r0 = LoadStaticField(0xb54)
    //     0x8714ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8714b0: ldr             x0, [x0, #0x16a8]
    // 0x8714b4: cmp             w0, NULL
    // 0x8714b8: b.ne            #0x8714c8
    // 0x8714bc: nop             
    // 0x8714c0: r0 = Null
    //     0x8714c0: mov             x0, NULL
    // 0x8714c4: b               #0x8714f0
    // 0x8714c8: r17 = 351
    //     0x8714c8: movz            x17, #0x15f
    // 0x8714cc: ldr             w1, [x0, x17]
    // 0x8714d0: DecompressPointer r1
    //     0x8714d0: add             x1, x1, HEAP, lsl #32
    // 0x8714d4: r0 = LoadClassIdInstr(r1)
    //     0x8714d4: ldur            x0, [x1, #-1]
    //     0x8714d8: ubfx            x0, x0, #0xc, #0x14
    // 0x8714dc: r2 = "legendBattle"
    //     0x8714dc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x8714e0: ldr             x2, [x2, #0xb68]
    // 0x8714e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8714e4: sub             lr, x0, #0xb4
    //     0x8714e8: ldr             lr, [x21, lr, lsl #3]
    //     0x8714ec: blr             lr
    // 0x8714f0: r1 = 59
    //     0x8714f0: movz            x1, #0x3b
    // 0x8714f4: branchIfSmi(r0, 0x871504)
    //     0x8714f4: tbz             w0, #0, #0x871504
    //     0x8714f8: nop             
    // 0x8714fc: r1 = LoadClassIdInstr(r0)
    //     0x8714fc: ldur            x1, [x0, #-1]
    //     0x871500: ubfx            x1, x1, #0xc, #0x14
    // 0x871504: r16 = "lind"
    //     0x871504: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4b0] "lind"
    //     0x871508: ldr             x16, [x16, #0x4b0]
    // 0x87150c: stp             x16, x0, [SP]
    // 0x871510: mov             x0, x1
    // 0x871514: mov             lr, x0
    // 0x871518: ldr             lr, [x21, lr, lsl #3]
    // 0x87151c: blr             lr
    // 0x871520: tbnz            w0, #4, #0x871534
    // 0x871524: nop             
    // 0x871528: r0 = "legend2"
    //     0x871528: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b78] "legend2"
    //     0x87152c: ldr             x0, [x0, #0xb78]
    // 0x871530: b               #0x8838b4
    // 0x871534: r0 = LoadStaticField(0xb54)
    //     0x871534: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871538: ldr             x0, [x0, #0x16a8]
    // 0x87153c: cmp             w0, NULL
    // 0x871540: b.ne            #0x871550
    // 0x871544: nop             
    // 0x871548: r0 = Null
    //     0x871548: mov             x0, NULL
    // 0x87154c: b               #0x871578
    // 0x871550: r17 = 351
    //     0x871550: movz            x17, #0x15f
    // 0x871554: ldr             w1, [x0, x17]
    // 0x871558: DecompressPointer r1
    //     0x871558: add             x1, x1, HEAP, lsl #32
    // 0x87155c: r0 = LoadClassIdInstr(r1)
    //     0x87155c: ldur            x0, [x1, #-1]
    //     0x871560: ubfx            x0, x0, #0xc, #0x14
    // 0x871564: r2 = "legendBattle"
    //     0x871564: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x871568: ldr             x2, [x2, #0xb68]
    // 0x87156c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87156c: sub             lr, x0, #0xb4
    //     0x871570: ldr             lr, [x21, lr, lsl #3]
    //     0x871574: blr             lr
    // 0x871578: r1 = 59
    //     0x871578: movz            x1, #0x3b
    // 0x87157c: branchIfSmi(r0, 0x87158c)
    //     0x87157c: tbz             w0, #0, #0x87158c
    //     0x871580: nop             
    // 0x871584: r1 = LoadClassIdInstr(r0)
    //     0x871584: ldur            x1, [x0, #-1]
    //     0x871588: ubfx            x1, x1, #0xc, #0x14
    // 0x87158c: r16 = "taufikh"
    //     0x87158c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4b8] "taufikh"
    //     0x871590: ldr             x16, [x16, #0x4b8]
    // 0x871594: stp             x16, x0, [SP]
    // 0x871598: mov             x0, x1
    // 0x87159c: mov             lr, x0
    // 0x8715a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8715a4: blr             lr
    // 0x8715a8: tbnz            w0, #4, #0x8715bc
    // 0x8715ac: nop             
    // 0x8715b0: r0 = "legend3"
    //     0x8715b0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b80] "legend3"
    //     0x8715b4: ldr             x0, [x0, #0xb80]
    // 0x8715b8: b               #0x8838b4
    // 0x8715bc: r0 = LoadStaticField(0xb54)
    //     0x8715bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8715c0: ldr             x0, [x0, #0x16a8]
    // 0x8715c4: cmp             w0, NULL
    // 0x8715c8: b.ne            #0x8715d8
    // 0x8715cc: nop             
    // 0x8715d0: r0 = Null
    //     0x8715d0: mov             x0, NULL
    // 0x8715d4: b               #0x871600
    // 0x8715d8: r17 = 351
    //     0x8715d8: movz            x17, #0x15f
    // 0x8715dc: ldr             w1, [x0, x17]
    // 0x8715e0: DecompressPointer r1
    //     0x8715e0: add             x1, x1, HEAP, lsl #32
    // 0x8715e4: r0 = LoadClassIdInstr(r1)
    //     0x8715e4: ldur            x0, [x1, #-1]
    //     0x8715e8: ubfx            x0, x0, #0xc, #0x14
    // 0x8715ec: r2 = "legendBattle"
    //     0x8715ec: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x8715f0: ldr             x2, [x2, #0xb68]
    // 0x8715f4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8715f4: sub             lr, x0, #0xb4
    //     0x8715f8: ldr             lr, [x21, lr, lsl #3]
    //     0x8715fc: blr             lr
    // 0x871600: r1 = 59
    //     0x871600: movz            x1, #0x3b
    // 0x871604: branchIfSmi(r0, 0x871614)
    //     0x871604: tbz             w0, #0, #0x871614
    //     0x871608: nop             
    // 0x87160c: r1 = LoadClassIdInstr(r0)
    //     0x87160c: ldur            x1, [x0, #-1]
    //     0x871610: ubfx            x1, x1, #0xc, #0x14
    // 0x871614: r16 = "peterg"
    //     0x871614: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4c0] "peterg"
    //     0x871618: ldr             x16, [x16, #0x4c0]
    // 0x87161c: stp             x16, x0, [SP]
    // 0x871620: mov             x0, x1
    // 0x871624: mov             lr, x0
    // 0x871628: ldr             lr, [x21, lr, lsl #3]
    // 0x87162c: blr             lr
    // 0x871630: tbnz            w0, #4, #0x871644
    // 0x871634: nop             
    // 0x871638: r0 = "legend4"
    //     0x871638: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b88] "legend4"
    //     0x87163c: ldr             x0, [x0, #0xb88]
    // 0x871640: b               #0x8838b4
    // 0x871644: r0 = "legend1"
    //     0x871644: add             x0, PP, #0x10, lsl #12  ; [pp+0x10b70] "legend1"
    //     0x871648: ldr             x0, [x0, #0xb70]
    // 0x87164c: b               #0x8838b4
    // 0x871650: r16 = "gearAnswer"
    //     0x871650: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b90] "gearAnswer"
    //     0x871654: ldr             x16, [x16, #0xb90]
    // 0x871658: ldur            lr, [fp, #-0x28]
    // 0x87165c: stp             lr, x16, [SP]
    // 0x871660: r0 = ==()
    //     0x871660: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x871664: tbnz            w0, #4, #0x871718
    // 0x871668: nop             
    // 0x87166c: r16 = "hint6"
    //     0x87166c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b98] "hint6"
    //     0x871670: ldr             x16, [x16, #0xb98]
    // 0x871674: r30 = "hint7"
    //     0x871674: add             lr, PP, #0x10, lsl #12  ; [pp+0x10ba0] "hint7"
    //     0x871678: ldr             lr, [lr, #0xba0]
    // 0x87167c: stp             lr, x16, [SP, #8]
    // 0x871680: r16 = "hint8"
    //     0x871680: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ba8] "hint8"
    //     0x871684: ldr             x16, [x16, #0xba8]
    // 0x871688: str             x16, [SP]
    // 0x87168c: r1 = Null
    //     0x87168c: mov             x1, NULL
    // 0x871690: r2 = "hint1"
    //     0x871690: add             x2, PP, #0x10, lsl #12  ; [pp+0x10bb0] "hint1"
    //     0x871694: ldr             x2, [x2, #0xbb0]
    // 0x871698: r3 = "hint2"
    //     0x871698: add             x3, PP, #0x10, lsl #12  ; [pp+0x10bb8] "hint2"
    //     0x87169c: ldr             x3, [x3, #0xbb8]
    // 0x8716a0: r5 = "hint3"
    //     0x8716a0: add             x5, PP, #0x10, lsl #12  ; [pp+0x10bc0] "hint3"
    //     0x8716a4: ldr             x5, [x5, #0xbc0]
    // 0x8716a8: r6 = "hint4"
    //     0x8716a8: add             x6, PP, #0x10, lsl #12  ; [pp+0x10bc8] "hint4"
    //     0x8716ac: ldr             x6, [x6, #0xbc8]
    // 0x8716b0: r7 = "hint5"
    //     0x8716b0: add             x7, PP, #0x10, lsl #12  ; [pp+0x10bd0] "hint5"
    //     0x8716b4: ldr             x7, [x7, #0xbd0]
    // 0x8716b8: r0 = _GrowableList._literal8()
    //     0x8716b8: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x8716bc: mov             x1, x0
    // 0x8716c0: r0 = shuffle()
    //     0x8716c0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8716c4: mov             x1, x0
    // 0x8716c8: r0 = first()
    //     0x8716c8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8716cc: mov             x3, x0
    // 0x8716d0: r2 = Null
    //     0x8716d0: mov             x2, NULL
    // 0x8716d4: r1 = Null
    //     0x8716d4: mov             x1, NULL
    // 0x8716d8: stur            x3, [fp, #-8]
    // 0x8716dc: r4 = 59
    //     0x8716dc: movz            x4, #0x3b
    // 0x8716e0: branchIfSmi(r0, 0x8716f0)
    //     0x8716e0: tbz             w0, #0, #0x8716f0
    //     0x8716e4: nop             
    // 0x8716e8: r4 = LoadClassIdInstr(r0)
    //     0x8716e8: ldur            x4, [x0, #-1]
    //     0x8716ec: ubfx            x4, x4, #0xc, #0x14
    // 0x8716f0: sub             x4, x4, #0x5d
    // 0x8716f4: cmp             x4, #1
    // 0x8716f8: b.ls            #0x871710
    // 0x8716fc: nop             
    // 0x871700: r8 = String
    //     0x871700: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871704: r3 = Null
    //     0x871704: add             x3, PP, #0x10, lsl #12  ; [pp+0x10bd8] Null
    //     0x871708: ldr             x3, [x3, #0xbd8]
    // 0x87170c: r0 = String()
    //     0x87170c: bl              #0x1523244  ; IsType_String_Stub
    // 0x871710: ldur            x0, [fp, #-8]
    // 0x871714: b               #0x8838b4
    // 0x871718: r16 = "gearExamQuestion"
    //     0x871718: add             x16, PP, #0x10, lsl #12  ; [pp+0x10be8] "gearExamQuestion"
    //     0x87171c: ldr             x16, [x16, #0xbe8]
    // 0x871720: ldur            lr, [fp, #-0x28]
    // 0x871724: stp             lr, x16, [SP]
    // 0x871728: r0 = ==()
    //     0x871728: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87172c: tbnz            w0, #4, #0x871974
    // 0x871730: nop             
    // 0x871734: r16 = "question6"
    //     0x871734: add             x16, PP, #0x10, lsl #12  ; [pp+0x10bf0] "question6"
    //     0x871738: ldr             x16, [x16, #0xbf0]
    // 0x87173c: r30 = "question7"
    //     0x87173c: add             lr, PP, #0x10, lsl #12  ; [pp+0x10bf8] "question7"
    //     0x871740: ldr             lr, [lr, #0xbf8]
    // 0x871744: stp             lr, x16, [SP, #8]
    // 0x871748: r16 = "question8"
    //     0x871748: add             x16, PP, #0x10, lsl #12  ; [pp+0x10c00] "question8"
    //     0x87174c: ldr             x16, [x16, #0xc00]
    // 0x871750: str             x16, [SP]
    // 0x871754: r1 = Null
    //     0x871754: mov             x1, NULL
    // 0x871758: r2 = "question1"
    //     0x871758: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c08] "question1"
    //     0x87175c: ldr             x2, [x2, #0xc08]
    // 0x871760: r3 = "question2"
    //     0x871760: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c10] "question2"
    //     0x871764: ldr             x3, [x3, #0xc10]
    // 0x871768: r5 = "question3"
    //     0x871768: add             x5, PP, #0x10, lsl #12  ; [pp+0x10c18] "question3"
    //     0x87176c: ldr             x5, [x5, #0xc18]
    // 0x871770: r6 = "question4"
    //     0x871770: add             x6, PP, #0x10, lsl #12  ; [pp+0x10c20] "question4"
    //     0x871774: ldr             x6, [x6, #0xc20]
    // 0x871778: r7 = "question5"
    //     0x871778: add             x7, PP, #0x10, lsl #12  ; [pp+0x10c28] "question5"
    //     0x87177c: ldr             x7, [x7, #0xc28]
    // 0x871780: r0 = _GrowableList._literal8()
    //     0x871780: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x871784: mov             x3, x0
    // 0x871788: stur            x3, [fp, #-8]
    // 0x87178c: r0 = LoadStaticField(0xb54)
    //     0x87178c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871790: ldr             x0, [x0, #0x16a8]
    // 0x871794: cmp             w0, NULL
    // 0x871798: b.ne            #0x8717a8
    // 0x87179c: nop             
    // 0x8717a0: r0 = Null
    //     0x8717a0: mov             x0, NULL
    // 0x8717a4: b               #0x8717d0
    // 0x8717a8: r17 = 351
    //     0x8717a8: movz            x17, #0x15f
    // 0x8717ac: ldr             w1, [x0, x17]
    // 0x8717b0: DecompressPointer r1
    //     0x8717b0: add             x1, x1, HEAP, lsl #32
    // 0x8717b4: r0 = LoadClassIdInstr(r1)
    //     0x8717b4: ldur            x0, [x1, #-1]
    //     0x8717b8: ubfx            x0, x0, #0xc, #0x14
    // 0x8717bc: r2 = "gearExamQuestion"
    //     0x8717bc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10be8] "gearExamQuestion"
    //     0x8717c0: ldr             x2, [x2, #0xbe8]
    // 0x8717c4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8717c4: sub             lr, x0, #0xb4
    //     0x8717c8: ldr             lr, [x21, lr, lsl #3]
    //     0x8717cc: blr             lr
    // 0x8717d0: cmp             w0, NULL
    // 0x8717d4: b.ne            #0x8717e8
    // 0x8717d8: nop             
    // 0x8717dc: r3 = "12345"
    //     0x8717dc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c30] "12345"
    //     0x8717e0: ldr             x3, [x3, #0xc30]
    // 0x8717e4: b               #0x8717ec
    // 0x8717e8: mov             x3, x0
    // 0x8717ec: mov             x0, x3
    // 0x8717f0: stur            x3, [fp, #-0x10]
    // 0x8717f4: r2 = Null
    //     0x8717f4: mov             x2, NULL
    // 0x8717f8: r1 = Null
    //     0x8717f8: mov             x1, NULL
    // 0x8717fc: r4 = 59
    //     0x8717fc: movz            x4, #0x3b
    // 0x871800: branchIfSmi(r0, 0x871810)
    //     0x871800: tbz             w0, #0, #0x871810
    //     0x871804: nop             
    // 0x871808: r4 = LoadClassIdInstr(r0)
    //     0x871808: ldur            x4, [x0, #-1]
    //     0x87180c: ubfx            x4, x4, #0xc, #0x14
    // 0x871810: sub             x4, x4, #0x5d
    // 0x871814: cmp             x4, #1
    // 0x871818: b.ls            #0x871830
    // 0x87181c: nop             
    // 0x871820: r8 = String
    //     0x871820: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871824: r3 = Null
    //     0x871824: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c38] Null
    //     0x871828: ldr             x3, [x3, #0xc38]
    // 0x87182c: r0 = String()
    //     0x87182c: bl              #0x1523244  ; IsType_String_Stub
    // 0x871830: r0 = LoadStaticField(0xb54)
    //     0x871830: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871834: ldr             x0, [x0, #0x16a8]
    // 0x871838: cmp             w0, NULL
    // 0x87183c: b.ne            #0x87184c
    // 0x871840: nop             
    // 0x871844: r0 = Null
    //     0x871844: mov             x0, NULL
    // 0x871848: b               #0x871874
    // 0x87184c: r17 = 347
    //     0x87184c: movz            x17, #0x15b
    // 0x871850: ldr             w1, [x0, x17]
    // 0x871854: DecompressPointer r1
    //     0x871854: add             x1, x1, HEAP, lsl #32
    // 0x871858: r0 = LoadClassIdInstr(r1)
    //     0x871858: ldur            x0, [x1, #-1]
    //     0x87185c: ubfx            x0, x0, #0xc, #0x14
    // 0x871860: r2 = "gearExamQuestion"
    //     0x871860: add             x2, PP, #0x10, lsl #12  ; [pp+0x10be8] "gearExamQuestion"
    //     0x871864: ldr             x2, [x2, #0xbe8]
    // 0x871868: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871868: sub             lr, x0, #0xb4
    //     0x87186c: ldr             lr, [x21, lr, lsl #3]
    //     0x871870: blr             lr
    // 0x871874: cmp             w0, NULL
    // 0x871878: b.ne            #0x871888
    // 0x87187c: nop             
    // 0x871880: r4 = 0
    //     0x871880: movz            x4, #0
    // 0x871884: b               #0x87188c
    // 0x871888: mov             x4, x0
    // 0x87188c: ldur            x3, [fp, #-8]
    // 0x871890: mov             x0, x4
    // 0x871894: stur            x4, [fp, #-0x18]
    // 0x871898: r2 = Null
    //     0x871898: mov             x2, NULL
    // 0x87189c: r1 = Null
    //     0x87189c: mov             x1, NULL
    // 0x8718a0: branchIfSmi(r0, 0x8718d0)
    //     0x8718a0: tbz             w0, #0, #0x8718d0
    //     0x8718a4: nop             
    // 0x8718a8: r4 = LoadClassIdInstr(r0)
    //     0x8718a8: ldur            x4, [x0, #-1]
    //     0x8718ac: ubfx            x4, x4, #0xc, #0x14
    // 0x8718b0: sub             x4, x4, #0x3b
    // 0x8718b4: cmp             x4, #1
    // 0x8718b8: b.ls            #0x8718d0
    // 0x8718bc: nop             
    // 0x8718c0: r8 = int
    //     0x8718c0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8718c4: r3 = Null
    //     0x8718c4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c48] Null
    //     0x8718c8: ldr             x3, [x3, #0xc48]
    // 0x8718cc: r0 = int()
    //     0x8718cc: bl              #0x1524294  ; IsType_int_Stub
    // 0x8718d0: ldur            x16, [fp, #-0x10]
    // 0x8718d4: ldur            lr, [fp, #-0x18]
    // 0x8718d8: stp             lr, x16, [SP]
    // 0x8718dc: r0 = []()
    //     0x8718dc: bl              #0x7c125c  ; [dart:core] _StringBase::[]
    // 0x8718e0: mov             x1, x0
    // 0x8718e4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8718e4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8718e8: r0 = parse()
    //     0x8718e8: bl              #0x7c36d0  ; [dart:core] int::parse
    // 0x8718ec: mov             x3, x0
    // 0x8718f0: ldur            x2, [fp, #-8]
    // 0x8718f4: LoadField: r0 = r2->field_b
    //     0x8718f4: ldur            w0, [x2, #0xb]
    // 0x8718f8: DecompressPointer r0
    //     0x8718f8: add             x0, x0, HEAP, lsl #32
    // 0x8718fc: r1 = LoadInt32Instr(r0)
    //     0x8718fc: sbfx            x1, x0, #1, #0x1f
    // 0x871900: mov             x0, x1
    // 0x871904: mov             x1, x3
    // 0x871908: cmp             x1, x0
    // 0x87190c: b.hs            #0x883900
    // 0x871910: nop             
    // 0x871914: LoadField: r0 = r2->field_f
    //     0x871914: ldur            w0, [x2, #0xf]
    // 0x871918: DecompressPointer r0
    //     0x871918: add             x0, x0, HEAP, lsl #32
    // 0x87191c: ArrayLoad: r4 = r0[r3]  ; Unknown_4
    //     0x87191c: add             x16, x0, x3, lsl #2
    //     0x871920: ldur            w4, [x16, #0xf]
    // 0x871924: DecompressPointer r4
    //     0x871924: add             x4, x4, HEAP, lsl #32
    // 0x871928: mov             x0, x4
    // 0x87192c: stur            x4, [fp, #-8]
    // 0x871930: r2 = Null
    //     0x871930: mov             x2, NULL
    // 0x871934: r1 = Null
    //     0x871934: mov             x1, NULL
    // 0x871938: r4 = 59
    //     0x871938: movz            x4, #0x3b
    // 0x87193c: branchIfSmi(r0, 0x87194c)
    //     0x87193c: tbz             w0, #0, #0x87194c
    //     0x871940: nop             
    // 0x871944: r4 = LoadClassIdInstr(r0)
    //     0x871944: ldur            x4, [x0, #-1]
    //     0x871948: ubfx            x4, x4, #0xc, #0x14
    // 0x87194c: sub             x4, x4, #0x5d
    // 0x871950: cmp             x4, #1
    // 0x871954: b.ls            #0x87196c
    // 0x871958: nop             
    // 0x87195c: r8 = String
    //     0x87195c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871960: r3 = Null
    //     0x871960: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c58] Null
    //     0x871964: ldr             x3, [x3, #0xc58]
    // 0x871968: r0 = String()
    //     0x871968: bl              #0x1523244  ; IsType_String_Stub
    // 0x87196c: ldur            x0, [fp, #-8]
    // 0x871970: b               #0x8838b4
    // 0x871974: r16 = "geographyExamQuestion"
    //     0x871974: add             x16, PP, #0x10, lsl #12  ; [pp+0x10c68] "geographyExamQuestion"
    //     0x871978: ldr             x16, [x16, #0xc68]
    // 0x87197c: ldur            lr, [fp, #-0x28]
    // 0x871980: stp             lr, x16, [SP]
    // 0x871984: r0 = ==()
    //     0x871984: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x871988: tbnz            w0, #4, #0x871bd0
    // 0x87198c: nop             
    // 0x871990: r16 = "question6"
    //     0x871990: add             x16, PP, #0x10, lsl #12  ; [pp+0x10bf0] "question6"
    //     0x871994: ldr             x16, [x16, #0xbf0]
    // 0x871998: r30 = "question7"
    //     0x871998: add             lr, PP, #0x10, lsl #12  ; [pp+0x10bf8] "question7"
    //     0x87199c: ldr             lr, [lr, #0xbf8]
    // 0x8719a0: stp             lr, x16, [SP, #8]
    // 0x8719a4: r16 = "question8"
    //     0x8719a4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10c00] "question8"
    //     0x8719a8: ldr             x16, [x16, #0xc00]
    // 0x8719ac: str             x16, [SP]
    // 0x8719b0: r1 = Null
    //     0x8719b0: mov             x1, NULL
    // 0x8719b4: r2 = "question1"
    //     0x8719b4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c08] "question1"
    //     0x8719b8: ldr             x2, [x2, #0xc08]
    // 0x8719bc: r3 = "question2"
    //     0x8719bc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c10] "question2"
    //     0x8719c0: ldr             x3, [x3, #0xc10]
    // 0x8719c4: r5 = "question3"
    //     0x8719c4: add             x5, PP, #0x10, lsl #12  ; [pp+0x10c18] "question3"
    //     0x8719c8: ldr             x5, [x5, #0xc18]
    // 0x8719cc: r6 = "question4"
    //     0x8719cc: add             x6, PP, #0x10, lsl #12  ; [pp+0x10c20] "question4"
    //     0x8719d0: ldr             x6, [x6, #0xc20]
    // 0x8719d4: r7 = "question5"
    //     0x8719d4: add             x7, PP, #0x10, lsl #12  ; [pp+0x10c28] "question5"
    //     0x8719d8: ldr             x7, [x7, #0xc28]
    // 0x8719dc: r0 = _GrowableList._literal8()
    //     0x8719dc: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x8719e0: mov             x3, x0
    // 0x8719e4: stur            x3, [fp, #-8]
    // 0x8719e8: r0 = LoadStaticField(0xb54)
    //     0x8719e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8719ec: ldr             x0, [x0, #0x16a8]
    // 0x8719f0: cmp             w0, NULL
    // 0x8719f4: b.ne            #0x871a04
    // 0x8719f8: nop             
    // 0x8719fc: r0 = Null
    //     0x8719fc: mov             x0, NULL
    // 0x871a00: b               #0x871a2c
    // 0x871a04: r17 = 351
    //     0x871a04: movz            x17, #0x15f
    // 0x871a08: ldr             w1, [x0, x17]
    // 0x871a0c: DecompressPointer r1
    //     0x871a0c: add             x1, x1, HEAP, lsl #32
    // 0x871a10: r0 = LoadClassIdInstr(r1)
    //     0x871a10: ldur            x0, [x1, #-1]
    //     0x871a14: ubfx            x0, x0, #0xc, #0x14
    // 0x871a18: r2 = "geographyExamQuestion"
    //     0x871a18: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c68] "geographyExamQuestion"
    //     0x871a1c: ldr             x2, [x2, #0xc68]
    // 0x871a20: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871a20: sub             lr, x0, #0xb4
    //     0x871a24: ldr             lr, [x21, lr, lsl #3]
    //     0x871a28: blr             lr
    // 0x871a2c: cmp             w0, NULL
    // 0x871a30: b.ne            #0x871a44
    // 0x871a34: nop             
    // 0x871a38: r3 = "123456"
    //     0x871a38: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c70] "123456"
    //     0x871a3c: ldr             x3, [x3, #0xc70]
    // 0x871a40: b               #0x871a48
    // 0x871a44: mov             x3, x0
    // 0x871a48: mov             x0, x3
    // 0x871a4c: stur            x3, [fp, #-0x10]
    // 0x871a50: r2 = Null
    //     0x871a50: mov             x2, NULL
    // 0x871a54: r1 = Null
    //     0x871a54: mov             x1, NULL
    // 0x871a58: r4 = 59
    //     0x871a58: movz            x4, #0x3b
    // 0x871a5c: branchIfSmi(r0, 0x871a6c)
    //     0x871a5c: tbz             w0, #0, #0x871a6c
    //     0x871a60: nop             
    // 0x871a64: r4 = LoadClassIdInstr(r0)
    //     0x871a64: ldur            x4, [x0, #-1]
    //     0x871a68: ubfx            x4, x4, #0xc, #0x14
    // 0x871a6c: sub             x4, x4, #0x5d
    // 0x871a70: cmp             x4, #1
    // 0x871a74: b.ls            #0x871a8c
    // 0x871a78: nop             
    // 0x871a7c: r8 = String
    //     0x871a7c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871a80: r3 = Null
    //     0x871a80: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c78] Null
    //     0x871a84: ldr             x3, [x3, #0xc78]
    // 0x871a88: r0 = String()
    //     0x871a88: bl              #0x1523244  ; IsType_String_Stub
    // 0x871a8c: r0 = LoadStaticField(0xb54)
    //     0x871a8c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871a90: ldr             x0, [x0, #0x16a8]
    // 0x871a94: cmp             w0, NULL
    // 0x871a98: b.ne            #0x871aa8
    // 0x871a9c: nop             
    // 0x871aa0: r0 = Null
    //     0x871aa0: mov             x0, NULL
    // 0x871aa4: b               #0x871ad0
    // 0x871aa8: r17 = 347
    //     0x871aa8: movz            x17, #0x15b
    // 0x871aac: ldr             w1, [x0, x17]
    // 0x871ab0: DecompressPointer r1
    //     0x871ab0: add             x1, x1, HEAP, lsl #32
    // 0x871ab4: r0 = LoadClassIdInstr(r1)
    //     0x871ab4: ldur            x0, [x1, #-1]
    //     0x871ab8: ubfx            x0, x0, #0xc, #0x14
    // 0x871abc: r2 = "geographyExamQuestion"
    //     0x871abc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c68] "geographyExamQuestion"
    //     0x871ac0: ldr             x2, [x2, #0xc68]
    // 0x871ac4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871ac4: sub             lr, x0, #0xb4
    //     0x871ac8: ldr             lr, [x21, lr, lsl #3]
    //     0x871acc: blr             lr
    // 0x871ad0: cmp             w0, NULL
    // 0x871ad4: b.ne            #0x871ae4
    // 0x871ad8: nop             
    // 0x871adc: r4 = 0
    //     0x871adc: movz            x4, #0
    // 0x871ae0: b               #0x871ae8
    // 0x871ae4: mov             x4, x0
    // 0x871ae8: ldur            x3, [fp, #-8]
    // 0x871aec: mov             x0, x4
    // 0x871af0: stur            x4, [fp, #-0x18]
    // 0x871af4: r2 = Null
    //     0x871af4: mov             x2, NULL
    // 0x871af8: r1 = Null
    //     0x871af8: mov             x1, NULL
    // 0x871afc: branchIfSmi(r0, 0x871b2c)
    //     0x871afc: tbz             w0, #0, #0x871b2c
    //     0x871b00: nop             
    // 0x871b04: r4 = LoadClassIdInstr(r0)
    //     0x871b04: ldur            x4, [x0, #-1]
    //     0x871b08: ubfx            x4, x4, #0xc, #0x14
    // 0x871b0c: sub             x4, x4, #0x3b
    // 0x871b10: cmp             x4, #1
    // 0x871b14: b.ls            #0x871b2c
    // 0x871b18: nop             
    // 0x871b1c: r8 = int
    //     0x871b1c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871b20: r3 = Null
    //     0x871b20: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c88] Null
    //     0x871b24: ldr             x3, [x3, #0xc88]
    // 0x871b28: r0 = int()
    //     0x871b28: bl              #0x1524294  ; IsType_int_Stub
    // 0x871b2c: ldur            x16, [fp, #-0x10]
    // 0x871b30: ldur            lr, [fp, #-0x18]
    // 0x871b34: stp             lr, x16, [SP]
    // 0x871b38: r0 = []()
    //     0x871b38: bl              #0x7c125c  ; [dart:core] _StringBase::[]
    // 0x871b3c: mov             x1, x0
    // 0x871b40: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x871b40: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x871b44: r0 = parse()
    //     0x871b44: bl              #0x7c36d0  ; [dart:core] int::parse
    // 0x871b48: mov             x3, x0
    // 0x871b4c: ldur            x2, [fp, #-8]
    // 0x871b50: LoadField: r0 = r2->field_b
    //     0x871b50: ldur            w0, [x2, #0xb]
    // 0x871b54: DecompressPointer r0
    //     0x871b54: add             x0, x0, HEAP, lsl #32
    // 0x871b58: r1 = LoadInt32Instr(r0)
    //     0x871b58: sbfx            x1, x0, #1, #0x1f
    // 0x871b5c: mov             x0, x1
    // 0x871b60: mov             x1, x3
    // 0x871b64: cmp             x1, x0
    // 0x871b68: b.hs            #0x883904
    // 0x871b6c: nop             
    // 0x871b70: LoadField: r0 = r2->field_f
    //     0x871b70: ldur            w0, [x2, #0xf]
    // 0x871b74: DecompressPointer r0
    //     0x871b74: add             x0, x0, HEAP, lsl #32
    // 0x871b78: ArrayLoad: r4 = r0[r3]  ; Unknown_4
    //     0x871b78: add             x16, x0, x3, lsl #2
    //     0x871b7c: ldur            w4, [x16, #0xf]
    // 0x871b80: DecompressPointer r4
    //     0x871b80: add             x4, x4, HEAP, lsl #32
    // 0x871b84: mov             x0, x4
    // 0x871b88: stur            x4, [fp, #-8]
    // 0x871b8c: r2 = Null
    //     0x871b8c: mov             x2, NULL
    // 0x871b90: r1 = Null
    //     0x871b90: mov             x1, NULL
    // 0x871b94: r4 = 59
    //     0x871b94: movz            x4, #0x3b
    // 0x871b98: branchIfSmi(r0, 0x871ba8)
    //     0x871b98: tbz             w0, #0, #0x871ba8
    //     0x871b9c: nop             
    // 0x871ba0: r4 = LoadClassIdInstr(r0)
    //     0x871ba0: ldur            x4, [x0, #-1]
    //     0x871ba4: ubfx            x4, x4, #0xc, #0x14
    // 0x871ba8: sub             x4, x4, #0x5d
    // 0x871bac: cmp             x4, #1
    // 0x871bb0: b.ls            #0x871bc8
    // 0x871bb4: nop             
    // 0x871bb8: r8 = String
    //     0x871bb8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871bbc: r3 = Null
    //     0x871bbc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c98] Null
    //     0x871bc0: ldr             x3, [x3, #0xc98]
    // 0x871bc4: r0 = String()
    //     0x871bc4: bl              #0x1523244  ; IsType_String_Stub
    // 0x871bc8: ldur            x0, [fp, #-8]
    // 0x871bcc: b               #0x8838b4
    // 0x871bd0: r16 = "cardsExamQuestion"
    //     0x871bd0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ca8] "cardsExamQuestion"
    //     0x871bd4: ldr             x16, [x16, #0xca8]
    // 0x871bd8: ldur            lr, [fp, #-0x28]
    // 0x871bdc: stp             lr, x16, [SP]
    // 0x871be0: r0 = ==()
    //     0x871be0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x871be4: tbnz            w0, #4, #0x871e2c
    // 0x871be8: nop             
    // 0x871bec: r16 = "question6"
    //     0x871bec: add             x16, PP, #0x10, lsl #12  ; [pp+0x10bf0] "question6"
    //     0x871bf0: ldr             x16, [x16, #0xbf0]
    // 0x871bf4: r30 = "question7"
    //     0x871bf4: add             lr, PP, #0x10, lsl #12  ; [pp+0x10bf8] "question7"
    //     0x871bf8: ldr             lr, [lr, #0xbf8]
    // 0x871bfc: stp             lr, x16, [SP, #8]
    // 0x871c00: r16 = "question8"
    //     0x871c00: add             x16, PP, #0x10, lsl #12  ; [pp+0x10c00] "question8"
    //     0x871c04: ldr             x16, [x16, #0xc00]
    // 0x871c08: str             x16, [SP]
    // 0x871c0c: r1 = Null
    //     0x871c0c: mov             x1, NULL
    // 0x871c10: r2 = "question1"
    //     0x871c10: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c08] "question1"
    //     0x871c14: ldr             x2, [x2, #0xc08]
    // 0x871c18: r3 = "question2"
    //     0x871c18: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c10] "question2"
    //     0x871c1c: ldr             x3, [x3, #0xc10]
    // 0x871c20: r5 = "question3"
    //     0x871c20: add             x5, PP, #0x10, lsl #12  ; [pp+0x10c18] "question3"
    //     0x871c24: ldr             x5, [x5, #0xc18]
    // 0x871c28: r6 = "question4"
    //     0x871c28: add             x6, PP, #0x10, lsl #12  ; [pp+0x10c20] "question4"
    //     0x871c2c: ldr             x6, [x6, #0xc20]
    // 0x871c30: r7 = "question5"
    //     0x871c30: add             x7, PP, #0x10, lsl #12  ; [pp+0x10c28] "question5"
    //     0x871c34: ldr             x7, [x7, #0xc28]
    // 0x871c38: r0 = _GrowableList._literal8()
    //     0x871c38: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x871c3c: mov             x3, x0
    // 0x871c40: stur            x3, [fp, #-8]
    // 0x871c44: r0 = LoadStaticField(0xb54)
    //     0x871c44: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871c48: ldr             x0, [x0, #0x16a8]
    // 0x871c4c: cmp             w0, NULL
    // 0x871c50: b.ne            #0x871c60
    // 0x871c54: nop             
    // 0x871c58: r0 = Null
    //     0x871c58: mov             x0, NULL
    // 0x871c5c: b               #0x871c88
    // 0x871c60: r17 = 351
    //     0x871c60: movz            x17, #0x15f
    // 0x871c64: ldr             w1, [x0, x17]
    // 0x871c68: DecompressPointer r1
    //     0x871c68: add             x1, x1, HEAP, lsl #32
    // 0x871c6c: r0 = LoadClassIdInstr(r1)
    //     0x871c6c: ldur            x0, [x1, #-1]
    //     0x871c70: ubfx            x0, x0, #0xc, #0x14
    // 0x871c74: r2 = "cardsExamQuestion"
    //     0x871c74: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ca8] "cardsExamQuestion"
    //     0x871c78: ldr             x2, [x2, #0xca8]
    // 0x871c7c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871c7c: sub             lr, x0, #0xb4
    //     0x871c80: ldr             lr, [x21, lr, lsl #3]
    //     0x871c84: blr             lr
    // 0x871c88: cmp             w0, NULL
    // 0x871c8c: b.ne            #0x871ca0
    // 0x871c90: nop             
    // 0x871c94: r3 = "123456"
    //     0x871c94: add             x3, PP, #0x10, lsl #12  ; [pp+0x10c70] "123456"
    //     0x871c98: ldr             x3, [x3, #0xc70]
    // 0x871c9c: b               #0x871ca4
    // 0x871ca0: mov             x3, x0
    // 0x871ca4: mov             x0, x3
    // 0x871ca8: stur            x3, [fp, #-0x10]
    // 0x871cac: r2 = Null
    //     0x871cac: mov             x2, NULL
    // 0x871cb0: r1 = Null
    //     0x871cb0: mov             x1, NULL
    // 0x871cb4: r4 = 59
    //     0x871cb4: movz            x4, #0x3b
    // 0x871cb8: branchIfSmi(r0, 0x871cc8)
    //     0x871cb8: tbz             w0, #0, #0x871cc8
    //     0x871cbc: nop             
    // 0x871cc0: r4 = LoadClassIdInstr(r0)
    //     0x871cc0: ldur            x4, [x0, #-1]
    //     0x871cc4: ubfx            x4, x4, #0xc, #0x14
    // 0x871cc8: sub             x4, x4, #0x5d
    // 0x871ccc: cmp             x4, #1
    // 0x871cd0: b.ls            #0x871ce8
    // 0x871cd4: nop             
    // 0x871cd8: r8 = String
    //     0x871cd8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871cdc: r3 = Null
    //     0x871cdc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10cb0] Null
    //     0x871ce0: ldr             x3, [x3, #0xcb0]
    // 0x871ce4: r0 = String()
    //     0x871ce4: bl              #0x1523244  ; IsType_String_Stub
    // 0x871ce8: r0 = LoadStaticField(0xb54)
    //     0x871ce8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x871cec: ldr             x0, [x0, #0x16a8]
    // 0x871cf0: cmp             w0, NULL
    // 0x871cf4: b.ne            #0x871d04
    // 0x871cf8: nop             
    // 0x871cfc: r0 = Null
    //     0x871cfc: mov             x0, NULL
    // 0x871d00: b               #0x871d2c
    // 0x871d04: r17 = 347
    //     0x871d04: movz            x17, #0x15b
    // 0x871d08: ldr             w1, [x0, x17]
    // 0x871d0c: DecompressPointer r1
    //     0x871d0c: add             x1, x1, HEAP, lsl #32
    // 0x871d10: r0 = LoadClassIdInstr(r1)
    //     0x871d10: ldur            x0, [x1, #-1]
    //     0x871d14: ubfx            x0, x0, #0xc, #0x14
    // 0x871d18: r2 = "cardsExamQuestion"
    //     0x871d18: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ca8] "cardsExamQuestion"
    //     0x871d1c: ldr             x2, [x2, #0xca8]
    // 0x871d20: r0 = GDT[cid_x0 + -0xb4]()
    //     0x871d20: sub             lr, x0, #0xb4
    //     0x871d24: ldr             lr, [x21, lr, lsl #3]
    //     0x871d28: blr             lr
    // 0x871d2c: cmp             w0, NULL
    // 0x871d30: b.ne            #0x871d40
    // 0x871d34: nop             
    // 0x871d38: r4 = 0
    //     0x871d38: movz            x4, #0
    // 0x871d3c: b               #0x871d44
    // 0x871d40: mov             x4, x0
    // 0x871d44: ldur            x3, [fp, #-8]
    // 0x871d48: mov             x0, x4
    // 0x871d4c: stur            x4, [fp, #-0x18]
    // 0x871d50: r2 = Null
    //     0x871d50: mov             x2, NULL
    // 0x871d54: r1 = Null
    //     0x871d54: mov             x1, NULL
    // 0x871d58: branchIfSmi(r0, 0x871d88)
    //     0x871d58: tbz             w0, #0, #0x871d88
    //     0x871d5c: nop             
    // 0x871d60: r4 = LoadClassIdInstr(r0)
    //     0x871d60: ldur            x4, [x0, #-1]
    //     0x871d64: ubfx            x4, x4, #0xc, #0x14
    // 0x871d68: sub             x4, x4, #0x3b
    // 0x871d6c: cmp             x4, #1
    // 0x871d70: b.ls            #0x871d88
    // 0x871d74: nop             
    // 0x871d78: r8 = int
    //     0x871d78: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871d7c: r3 = Null
    //     0x871d7c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10cc0] Null
    //     0x871d80: ldr             x3, [x3, #0xcc0]
    // 0x871d84: r0 = int()
    //     0x871d84: bl              #0x1524294  ; IsType_int_Stub
    // 0x871d88: ldur            x16, [fp, #-0x10]
    // 0x871d8c: ldur            lr, [fp, #-0x18]
    // 0x871d90: stp             lr, x16, [SP]
    // 0x871d94: r0 = []()
    //     0x871d94: bl              #0x7c125c  ; [dart:core] _StringBase::[]
    // 0x871d98: mov             x1, x0
    // 0x871d9c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x871d9c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x871da0: r0 = parse()
    //     0x871da0: bl              #0x7c36d0  ; [dart:core] int::parse
    // 0x871da4: mov             x3, x0
    // 0x871da8: ldur            x2, [fp, #-8]
    // 0x871dac: LoadField: r0 = r2->field_b
    //     0x871dac: ldur            w0, [x2, #0xb]
    // 0x871db0: DecompressPointer r0
    //     0x871db0: add             x0, x0, HEAP, lsl #32
    // 0x871db4: r1 = LoadInt32Instr(r0)
    //     0x871db4: sbfx            x1, x0, #1, #0x1f
    // 0x871db8: mov             x0, x1
    // 0x871dbc: mov             x1, x3
    // 0x871dc0: cmp             x1, x0
    // 0x871dc4: b.hs            #0x883908
    // 0x871dc8: nop             
    // 0x871dcc: LoadField: r0 = r2->field_f
    //     0x871dcc: ldur            w0, [x2, #0xf]
    // 0x871dd0: DecompressPointer r0
    //     0x871dd0: add             x0, x0, HEAP, lsl #32
    // 0x871dd4: ArrayLoad: r4 = r0[r3]  ; Unknown_4
    //     0x871dd4: add             x16, x0, x3, lsl #2
    //     0x871dd8: ldur            w4, [x16, #0xf]
    // 0x871ddc: DecompressPointer r4
    //     0x871ddc: add             x4, x4, HEAP, lsl #32
    // 0x871de0: mov             x0, x4
    // 0x871de4: stur            x4, [fp, #-8]
    // 0x871de8: r2 = Null
    //     0x871de8: mov             x2, NULL
    // 0x871dec: r1 = Null
    //     0x871dec: mov             x1, NULL
    // 0x871df0: r4 = 59
    //     0x871df0: movz            x4, #0x3b
    // 0x871df4: branchIfSmi(r0, 0x871e04)
    //     0x871df4: tbz             w0, #0, #0x871e04
    //     0x871df8: nop             
    // 0x871dfc: r4 = LoadClassIdInstr(r0)
    //     0x871dfc: ldur            x4, [x0, #-1]
    //     0x871e00: ubfx            x4, x4, #0xc, #0x14
    // 0x871e04: sub             x4, x4, #0x5d
    // 0x871e08: cmp             x4, #1
    // 0x871e0c: b.ls            #0x871e24
    // 0x871e10: nop             
    // 0x871e14: r8 = String
    //     0x871e14: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x871e18: r3 = Null
    //     0x871e18: add             x3, PP, #0x10, lsl #12  ; [pp+0x10cd0] Null
    //     0x871e1c: ldr             x3, [x3, #0xcd0]
    // 0x871e20: r0 = String()
    //     0x871e20: bl              #0x1523244  ; IsType_String_Stub
    // 0x871e24: ldur            x0, [fp, #-8]
    // 0x871e28: b               #0x8838b4
    // 0x871e2c: r16 = "gearExamQuestionSet"
    //     0x871e2c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ce0] "gearExamQuestionSet"
    //     0x871e30: ldr             x16, [x16, #0xce0]
    // 0x871e34: ldur            lr, [fp, #-0x28]
    // 0x871e38: stp             lr, x16, [SP]
    // 0x871e3c: r0 = ==()
    //     0x871e3c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x871e40: tbnz            w0, #4, #0x8720f0
    // 0x871e44: nop             
    // 0x871e48: r16 = 10
    //     0x871e48: movz            x16, #0xa
    // 0x871e4c: r30 = 12
    //     0x871e4c: movz            lr, #0xc
    // 0x871e50: stp             lr, x16, [SP, #8]
    // 0x871e54: r16 = 14
    //     0x871e54: movz            x16, #0xe
    // 0x871e58: str             x16, [SP]
    // 0x871e5c: r1 = Null
    //     0x871e5c: mov             x1, NULL
    // 0x871e60: r2 = 0
    //     0x871e60: movz            x2, #0
    // 0x871e64: r3 = 2
    //     0x871e64: movz            x3, #0x2
    // 0x871e68: r5 = 4
    //     0x871e68: movz            x5, #0x4
    // 0x871e6c: r6 = 6
    //     0x871e6c: movz            x6, #0x6
    // 0x871e70: r7 = 8
    //     0x871e70: movz            x7, #0x8
    // 0x871e74: r0 = _GrowableList._literal8()
    //     0x871e74: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x871e78: mov             x1, x0
    // 0x871e7c: stur            x0, [fp, #-8]
    // 0x871e80: r0 = shuffle()
    //     0x871e80: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x871e84: mov             x1, x0
    // 0x871e88: r0 = first()
    //     0x871e88: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x871e8c: mov             x3, x0
    // 0x871e90: r2 = Null
    //     0x871e90: mov             x2, NULL
    // 0x871e94: r1 = Null
    //     0x871e94: mov             x1, NULL
    // 0x871e98: stur            x3, [fp, #-0x10]
    // 0x871e9c: branchIfSmi(r0, 0x871ecc)
    //     0x871e9c: tbz             w0, #0, #0x871ecc
    //     0x871ea0: nop             
    // 0x871ea4: r4 = LoadClassIdInstr(r0)
    //     0x871ea4: ldur            x4, [x0, #-1]
    //     0x871ea8: ubfx            x4, x4, #0xc, #0x14
    // 0x871eac: sub             x4, x4, #0x3b
    // 0x871eb0: cmp             x4, #1
    // 0x871eb4: b.ls            #0x871ecc
    // 0x871eb8: nop             
    // 0x871ebc: r8 = int
    //     0x871ebc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871ec0: r3 = Null
    //     0x871ec0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ce8] Null
    //     0x871ec4: ldr             x3, [x3, #0xce8]
    // 0x871ec8: r0 = int()
    //     0x871ec8: bl              #0x1524294  ; IsType_int_Stub
    // 0x871ecc: ldur            x1, [fp, #-8]
    // 0x871ed0: ldur            x2, [fp, #-0x10]
    // 0x871ed4: r0 = remove()
    //     0x871ed4: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x871ed8: ldur            x1, [fp, #-8]
    // 0x871edc: r0 = shuffle()
    //     0x871edc: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x871ee0: mov             x1, x0
    // 0x871ee4: r0 = first()
    //     0x871ee4: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x871ee8: mov             x3, x0
    // 0x871eec: r2 = Null
    //     0x871eec: mov             x2, NULL
    // 0x871ef0: r1 = Null
    //     0x871ef0: mov             x1, NULL
    // 0x871ef4: stur            x3, [fp, #-0x18]
    // 0x871ef8: branchIfSmi(r0, 0x871f28)
    //     0x871ef8: tbz             w0, #0, #0x871f28
    //     0x871efc: nop             
    // 0x871f00: r4 = LoadClassIdInstr(r0)
    //     0x871f00: ldur            x4, [x0, #-1]
    //     0x871f04: ubfx            x4, x4, #0xc, #0x14
    // 0x871f08: sub             x4, x4, #0x3b
    // 0x871f0c: cmp             x4, #1
    // 0x871f10: b.ls            #0x871f28
    // 0x871f14: nop             
    // 0x871f18: r8 = int
    //     0x871f18: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871f1c: r3 = Null
    //     0x871f1c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10cf8] Null
    //     0x871f20: ldr             x3, [x3, #0xcf8]
    // 0x871f24: r0 = int()
    //     0x871f24: bl              #0x1524294  ; IsType_int_Stub
    // 0x871f28: ldur            x1, [fp, #-8]
    // 0x871f2c: ldur            x2, [fp, #-0x18]
    // 0x871f30: r0 = remove()
    //     0x871f30: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x871f34: ldur            x1, [fp, #-8]
    // 0x871f38: r0 = shuffle()
    //     0x871f38: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x871f3c: mov             x1, x0
    // 0x871f40: r0 = first()
    //     0x871f40: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x871f44: mov             x3, x0
    // 0x871f48: r2 = Null
    //     0x871f48: mov             x2, NULL
    // 0x871f4c: r1 = Null
    //     0x871f4c: mov             x1, NULL
    // 0x871f50: stur            x3, [fp, #-0x30]
    // 0x871f54: branchIfSmi(r0, 0x871f84)
    //     0x871f54: tbz             w0, #0, #0x871f84
    //     0x871f58: nop             
    // 0x871f5c: r4 = LoadClassIdInstr(r0)
    //     0x871f5c: ldur            x4, [x0, #-1]
    //     0x871f60: ubfx            x4, x4, #0xc, #0x14
    // 0x871f64: sub             x4, x4, #0x3b
    // 0x871f68: cmp             x4, #1
    // 0x871f6c: b.ls            #0x871f84
    // 0x871f70: nop             
    // 0x871f74: r8 = int
    //     0x871f74: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871f78: r3 = Null
    //     0x871f78: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d08] Null
    //     0x871f7c: ldr             x3, [x3, #0xd08]
    // 0x871f80: r0 = int()
    //     0x871f80: bl              #0x1524294  ; IsType_int_Stub
    // 0x871f84: ldur            x1, [fp, #-8]
    // 0x871f88: ldur            x2, [fp, #-0x30]
    // 0x871f8c: r0 = remove()
    //     0x871f8c: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x871f90: ldur            x1, [fp, #-8]
    // 0x871f94: r0 = shuffle()
    //     0x871f94: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x871f98: mov             x1, x0
    // 0x871f9c: r0 = first()
    //     0x871f9c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x871fa0: mov             x3, x0
    // 0x871fa4: r2 = Null
    //     0x871fa4: mov             x2, NULL
    // 0x871fa8: r1 = Null
    //     0x871fa8: mov             x1, NULL
    // 0x871fac: stur            x3, [fp, #-0x40]
    // 0x871fb0: branchIfSmi(r0, 0x871fe0)
    //     0x871fb0: tbz             w0, #0, #0x871fe0
    //     0x871fb4: nop             
    // 0x871fb8: r4 = LoadClassIdInstr(r0)
    //     0x871fb8: ldur            x4, [x0, #-1]
    //     0x871fbc: ubfx            x4, x4, #0xc, #0x14
    // 0x871fc0: sub             x4, x4, #0x3b
    // 0x871fc4: cmp             x4, #1
    // 0x871fc8: b.ls            #0x871fe0
    // 0x871fcc: nop             
    // 0x871fd0: r8 = int
    //     0x871fd0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x871fd4: r3 = Null
    //     0x871fd4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d18] Null
    //     0x871fd8: ldr             x3, [x3, #0xd18]
    // 0x871fdc: r0 = int()
    //     0x871fdc: bl              #0x1524294  ; IsType_int_Stub
    // 0x871fe0: ldur            x1, [fp, #-8]
    // 0x871fe4: ldur            x2, [fp, #-0x40]
    // 0x871fe8: r0 = remove()
    //     0x871fe8: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x871fec: ldur            x1, [fp, #-8]
    // 0x871ff0: r0 = shuffle()
    //     0x871ff0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x871ff4: mov             x1, x0
    // 0x871ff8: r0 = first()
    //     0x871ff8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x871ffc: mov             x3, x0
    // 0x872000: r2 = Null
    //     0x872000: mov             x2, NULL
    // 0x872004: r1 = Null
    //     0x872004: mov             x1, NULL
    // 0x872008: stur            x3, [fp, #-0x48]
    // 0x87200c: branchIfSmi(r0, 0x87203c)
    //     0x87200c: tbz             w0, #0, #0x87203c
    //     0x872010: nop             
    // 0x872014: r4 = LoadClassIdInstr(r0)
    //     0x872014: ldur            x4, [x0, #-1]
    //     0x872018: ubfx            x4, x4, #0xc, #0x14
    // 0x87201c: sub             x4, x4, #0x3b
    // 0x872020: cmp             x4, #1
    // 0x872024: b.ls            #0x87203c
    // 0x872028: nop             
    // 0x87202c: r8 = int
    //     0x87202c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872030: r3 = Null
    //     0x872030: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d28] Null
    //     0x872034: ldr             x3, [x3, #0xd28]
    // 0x872038: r0 = int()
    //     0x872038: bl              #0x1524294  ; IsType_int_Stub
    // 0x87203c: ldur            x1, [fp, #-8]
    // 0x872040: ldur            x2, [fp, #-0x48]
    // 0x872044: r0 = remove()
    //     0x872044: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872048: ldur            x1, [fp, #-8]
    // 0x87204c: r0 = shuffle()
    //     0x87204c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872050: mov             x1, x0
    // 0x872054: r0 = first()
    //     0x872054: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872058: mov             x3, x0
    // 0x87205c: r2 = Null
    //     0x87205c: mov             x2, NULL
    // 0x872060: r1 = Null
    //     0x872060: mov             x1, NULL
    // 0x872064: stur            x3, [fp, #-0x50]
    // 0x872068: branchIfSmi(r0, 0x872098)
    //     0x872068: tbz             w0, #0, #0x872098
    //     0x87206c: nop             
    // 0x872070: r4 = LoadClassIdInstr(r0)
    //     0x872070: ldur            x4, [x0, #-1]
    //     0x872074: ubfx            x4, x4, #0xc, #0x14
    // 0x872078: sub             x4, x4, #0x3b
    // 0x87207c: cmp             x4, #1
    // 0x872080: b.ls            #0x872098
    // 0x872084: nop             
    // 0x872088: r8 = int
    //     0x872088: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87208c: r3 = Null
    //     0x87208c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d38] Null
    //     0x872090: ldr             x3, [x3, #0xd38]
    // 0x872094: r0 = int()
    //     0x872094: bl              #0x1524294  ; IsType_int_Stub
    // 0x872098: ldur            x1, [fp, #-8]
    // 0x87209c: ldur            x2, [fp, #-0x50]
    // 0x8720a0: r0 = remove()
    //     0x8720a0: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x8720a4: r1 = Null
    //     0x8720a4: mov             x1, NULL
    // 0x8720a8: r2 = 12
    //     0x8720a8: movz            x2, #0xc
    // 0x8720ac: r0 = AllocateArray()
    //     0x8720ac: bl              #0x1502560  ; AllocateArrayStub
    // 0x8720b0: mov             x1, x0
    // 0x8720b4: ldur            x0, [fp, #-0x10]
    // 0x8720b8: StoreField: r1->field_f = r0
    //     0x8720b8: stur            w0, [x1, #0xf]
    // 0x8720bc: ldur            x0, [fp, #-0x18]
    // 0x8720c0: StoreField: r1->field_13 = r0
    //     0x8720c0: stur            w0, [x1, #0x13]
    // 0x8720c4: ldur            x0, [fp, #-0x30]
    // 0x8720c8: ArrayStore: r1[0] = r0  ; List_4
    //     0x8720c8: stur            w0, [x1, #0x17]
    // 0x8720cc: ldur            x0, [fp, #-0x40]
    // 0x8720d0: StoreField: r1->field_1b = r0
    //     0x8720d0: stur            w0, [x1, #0x1b]
    // 0x8720d4: ldur            x0, [fp, #-0x48]
    // 0x8720d8: StoreField: r1->field_1f = r0
    //     0x8720d8: stur            w0, [x1, #0x1f]
    // 0x8720dc: ldur            x0, [fp, #-0x50]
    // 0x8720e0: StoreField: r1->field_23 = r0
    //     0x8720e0: stur            w0, [x1, #0x23]
    // 0x8720e4: str             x1, [SP]
    // 0x8720e8: r0 = _interpolate()
    //     0x8720e8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8720ec: b               #0x8838b4
    // 0x8720f0: r16 = "geographyExamQuestionSet"
    //     0x8720f0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10d48] "geographyExamQuestionSet"
    //     0x8720f4: ldr             x16, [x16, #0xd48]
    // 0x8720f8: ldur            lr, [fp, #-0x28]
    // 0x8720fc: stp             lr, x16, [SP]
    // 0x872100: r0 = ==()
    //     0x872100: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872104: tbnz            w0, #4, #0x8723b4
    // 0x872108: nop             
    // 0x87210c: r16 = 10
    //     0x87210c: movz            x16, #0xa
    // 0x872110: r30 = 12
    //     0x872110: movz            lr, #0xc
    // 0x872114: stp             lr, x16, [SP, #8]
    // 0x872118: r16 = 14
    //     0x872118: movz            x16, #0xe
    // 0x87211c: str             x16, [SP]
    // 0x872120: r1 = Null
    //     0x872120: mov             x1, NULL
    // 0x872124: r2 = 0
    //     0x872124: movz            x2, #0
    // 0x872128: r3 = 2
    //     0x872128: movz            x3, #0x2
    // 0x87212c: r5 = 4
    //     0x87212c: movz            x5, #0x4
    // 0x872130: r6 = 6
    //     0x872130: movz            x6, #0x6
    // 0x872134: r7 = 8
    //     0x872134: movz            x7, #0x8
    // 0x872138: r0 = _GrowableList._literal8()
    //     0x872138: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x87213c: mov             x1, x0
    // 0x872140: stur            x0, [fp, #-8]
    // 0x872144: r0 = shuffle()
    //     0x872144: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872148: mov             x1, x0
    // 0x87214c: r0 = first()
    //     0x87214c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872150: mov             x3, x0
    // 0x872154: r2 = Null
    //     0x872154: mov             x2, NULL
    // 0x872158: r1 = Null
    //     0x872158: mov             x1, NULL
    // 0x87215c: stur            x3, [fp, #-0x10]
    // 0x872160: branchIfSmi(r0, 0x872190)
    //     0x872160: tbz             w0, #0, #0x872190
    //     0x872164: nop             
    // 0x872168: r4 = LoadClassIdInstr(r0)
    //     0x872168: ldur            x4, [x0, #-1]
    //     0x87216c: ubfx            x4, x4, #0xc, #0x14
    // 0x872170: sub             x4, x4, #0x3b
    // 0x872174: cmp             x4, #1
    // 0x872178: b.ls            #0x872190
    // 0x87217c: nop             
    // 0x872180: r8 = int
    //     0x872180: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872184: r3 = Null
    //     0x872184: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d50] Null
    //     0x872188: ldr             x3, [x3, #0xd50]
    // 0x87218c: r0 = int()
    //     0x87218c: bl              #0x1524294  ; IsType_int_Stub
    // 0x872190: ldur            x1, [fp, #-8]
    // 0x872194: ldur            x2, [fp, #-0x10]
    // 0x872198: r0 = remove()
    //     0x872198: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x87219c: ldur            x1, [fp, #-8]
    // 0x8721a0: r0 = shuffle()
    //     0x8721a0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8721a4: mov             x1, x0
    // 0x8721a8: r0 = first()
    //     0x8721a8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8721ac: mov             x3, x0
    // 0x8721b0: r2 = Null
    //     0x8721b0: mov             x2, NULL
    // 0x8721b4: r1 = Null
    //     0x8721b4: mov             x1, NULL
    // 0x8721b8: stur            x3, [fp, #-0x18]
    // 0x8721bc: branchIfSmi(r0, 0x8721ec)
    //     0x8721bc: tbz             w0, #0, #0x8721ec
    //     0x8721c0: nop             
    // 0x8721c4: r4 = LoadClassIdInstr(r0)
    //     0x8721c4: ldur            x4, [x0, #-1]
    //     0x8721c8: ubfx            x4, x4, #0xc, #0x14
    // 0x8721cc: sub             x4, x4, #0x3b
    // 0x8721d0: cmp             x4, #1
    // 0x8721d4: b.ls            #0x8721ec
    // 0x8721d8: nop             
    // 0x8721dc: r8 = int
    //     0x8721dc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8721e0: r3 = Null
    //     0x8721e0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d60] Null
    //     0x8721e4: ldr             x3, [x3, #0xd60]
    // 0x8721e8: r0 = int()
    //     0x8721e8: bl              #0x1524294  ; IsType_int_Stub
    // 0x8721ec: ldur            x1, [fp, #-8]
    // 0x8721f0: ldur            x2, [fp, #-0x18]
    // 0x8721f4: r0 = remove()
    //     0x8721f4: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x8721f8: ldur            x1, [fp, #-8]
    // 0x8721fc: r0 = shuffle()
    //     0x8721fc: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872200: mov             x1, x0
    // 0x872204: r0 = first()
    //     0x872204: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872208: mov             x3, x0
    // 0x87220c: r2 = Null
    //     0x87220c: mov             x2, NULL
    // 0x872210: r1 = Null
    //     0x872210: mov             x1, NULL
    // 0x872214: stur            x3, [fp, #-0x30]
    // 0x872218: branchIfSmi(r0, 0x872248)
    //     0x872218: tbz             w0, #0, #0x872248
    //     0x87221c: nop             
    // 0x872220: r4 = LoadClassIdInstr(r0)
    //     0x872220: ldur            x4, [x0, #-1]
    //     0x872224: ubfx            x4, x4, #0xc, #0x14
    // 0x872228: sub             x4, x4, #0x3b
    // 0x87222c: cmp             x4, #1
    // 0x872230: b.ls            #0x872248
    // 0x872234: nop             
    // 0x872238: r8 = int
    //     0x872238: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87223c: r3 = Null
    //     0x87223c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d70] Null
    //     0x872240: ldr             x3, [x3, #0xd70]
    // 0x872244: r0 = int()
    //     0x872244: bl              #0x1524294  ; IsType_int_Stub
    // 0x872248: ldur            x1, [fp, #-8]
    // 0x87224c: ldur            x2, [fp, #-0x30]
    // 0x872250: r0 = remove()
    //     0x872250: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872254: ldur            x1, [fp, #-8]
    // 0x872258: r0 = shuffle()
    //     0x872258: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87225c: mov             x1, x0
    // 0x872260: r0 = first()
    //     0x872260: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872264: mov             x3, x0
    // 0x872268: r2 = Null
    //     0x872268: mov             x2, NULL
    // 0x87226c: r1 = Null
    //     0x87226c: mov             x1, NULL
    // 0x872270: stur            x3, [fp, #-0x40]
    // 0x872274: branchIfSmi(r0, 0x8722a4)
    //     0x872274: tbz             w0, #0, #0x8722a4
    //     0x872278: nop             
    // 0x87227c: r4 = LoadClassIdInstr(r0)
    //     0x87227c: ldur            x4, [x0, #-1]
    //     0x872280: ubfx            x4, x4, #0xc, #0x14
    // 0x872284: sub             x4, x4, #0x3b
    // 0x872288: cmp             x4, #1
    // 0x87228c: b.ls            #0x8722a4
    // 0x872290: nop             
    // 0x872294: r8 = int
    //     0x872294: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872298: r3 = Null
    //     0x872298: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d80] Null
    //     0x87229c: ldr             x3, [x3, #0xd80]
    // 0x8722a0: r0 = int()
    //     0x8722a0: bl              #0x1524294  ; IsType_int_Stub
    // 0x8722a4: ldur            x1, [fp, #-8]
    // 0x8722a8: ldur            x2, [fp, #-0x40]
    // 0x8722ac: r0 = remove()
    //     0x8722ac: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x8722b0: ldur            x1, [fp, #-8]
    // 0x8722b4: r0 = shuffle()
    //     0x8722b4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8722b8: mov             x1, x0
    // 0x8722bc: r0 = first()
    //     0x8722bc: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8722c0: mov             x3, x0
    // 0x8722c4: r2 = Null
    //     0x8722c4: mov             x2, NULL
    // 0x8722c8: r1 = Null
    //     0x8722c8: mov             x1, NULL
    // 0x8722cc: stur            x3, [fp, #-0x48]
    // 0x8722d0: branchIfSmi(r0, 0x872300)
    //     0x8722d0: tbz             w0, #0, #0x872300
    //     0x8722d4: nop             
    // 0x8722d8: r4 = LoadClassIdInstr(r0)
    //     0x8722d8: ldur            x4, [x0, #-1]
    //     0x8722dc: ubfx            x4, x4, #0xc, #0x14
    // 0x8722e0: sub             x4, x4, #0x3b
    // 0x8722e4: cmp             x4, #1
    // 0x8722e8: b.ls            #0x872300
    // 0x8722ec: nop             
    // 0x8722f0: r8 = int
    //     0x8722f0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8722f4: r3 = Null
    //     0x8722f4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10d90] Null
    //     0x8722f8: ldr             x3, [x3, #0xd90]
    // 0x8722fc: r0 = int()
    //     0x8722fc: bl              #0x1524294  ; IsType_int_Stub
    // 0x872300: ldur            x1, [fp, #-8]
    // 0x872304: ldur            x2, [fp, #-0x48]
    // 0x872308: r0 = remove()
    //     0x872308: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x87230c: ldur            x1, [fp, #-8]
    // 0x872310: r0 = shuffle()
    //     0x872310: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872314: mov             x1, x0
    // 0x872318: r0 = first()
    //     0x872318: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x87231c: mov             x3, x0
    // 0x872320: r2 = Null
    //     0x872320: mov             x2, NULL
    // 0x872324: r1 = Null
    //     0x872324: mov             x1, NULL
    // 0x872328: stur            x3, [fp, #-0x50]
    // 0x87232c: branchIfSmi(r0, 0x87235c)
    //     0x87232c: tbz             w0, #0, #0x87235c
    //     0x872330: nop             
    // 0x872334: r4 = LoadClassIdInstr(r0)
    //     0x872334: ldur            x4, [x0, #-1]
    //     0x872338: ubfx            x4, x4, #0xc, #0x14
    // 0x87233c: sub             x4, x4, #0x3b
    // 0x872340: cmp             x4, #1
    // 0x872344: b.ls            #0x87235c
    // 0x872348: nop             
    // 0x87234c: r8 = int
    //     0x87234c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872350: r3 = Null
    //     0x872350: add             x3, PP, #0x10, lsl #12  ; [pp+0x10da0] Null
    //     0x872354: ldr             x3, [x3, #0xda0]
    // 0x872358: r0 = int()
    //     0x872358: bl              #0x1524294  ; IsType_int_Stub
    // 0x87235c: ldur            x1, [fp, #-8]
    // 0x872360: ldur            x2, [fp, #-0x50]
    // 0x872364: r0 = remove()
    //     0x872364: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872368: r1 = Null
    //     0x872368: mov             x1, NULL
    // 0x87236c: r2 = 12
    //     0x87236c: movz            x2, #0xc
    // 0x872370: r0 = AllocateArray()
    //     0x872370: bl              #0x1502560  ; AllocateArrayStub
    // 0x872374: mov             x1, x0
    // 0x872378: ldur            x0, [fp, #-0x10]
    // 0x87237c: StoreField: r1->field_f = r0
    //     0x87237c: stur            w0, [x1, #0xf]
    // 0x872380: ldur            x0, [fp, #-0x18]
    // 0x872384: StoreField: r1->field_13 = r0
    //     0x872384: stur            w0, [x1, #0x13]
    // 0x872388: ldur            x0, [fp, #-0x30]
    // 0x87238c: ArrayStore: r1[0] = r0  ; List_4
    //     0x87238c: stur            w0, [x1, #0x17]
    // 0x872390: ldur            x0, [fp, #-0x40]
    // 0x872394: StoreField: r1->field_1b = r0
    //     0x872394: stur            w0, [x1, #0x1b]
    // 0x872398: ldur            x0, [fp, #-0x48]
    // 0x87239c: StoreField: r1->field_1f = r0
    //     0x87239c: stur            w0, [x1, #0x1f]
    // 0x8723a0: ldur            x0, [fp, #-0x50]
    // 0x8723a4: StoreField: r1->field_23 = r0
    //     0x8723a4: stur            w0, [x1, #0x23]
    // 0x8723a8: str             x1, [SP]
    // 0x8723ac: r0 = _interpolate()
    //     0x8723ac: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8723b0: b               #0x8838b4
    // 0x8723b4: r16 = "cardsExamQuestionSet"
    //     0x8723b4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10db0] "cardsExamQuestionSet"
    //     0x8723b8: ldr             x16, [x16, #0xdb0]
    // 0x8723bc: ldur            lr, [fp, #-0x28]
    // 0x8723c0: stp             lr, x16, [SP]
    // 0x8723c4: r0 = ==()
    //     0x8723c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8723c8: tbnz            w0, #4, #0x872678
    // 0x8723cc: nop             
    // 0x8723d0: r16 = 10
    //     0x8723d0: movz            x16, #0xa
    // 0x8723d4: r30 = 12
    //     0x8723d4: movz            lr, #0xc
    // 0x8723d8: stp             lr, x16, [SP, #8]
    // 0x8723dc: r16 = 14
    //     0x8723dc: movz            x16, #0xe
    // 0x8723e0: str             x16, [SP]
    // 0x8723e4: r1 = Null
    //     0x8723e4: mov             x1, NULL
    // 0x8723e8: r2 = 0
    //     0x8723e8: movz            x2, #0
    // 0x8723ec: r3 = 2
    //     0x8723ec: movz            x3, #0x2
    // 0x8723f0: r5 = 4
    //     0x8723f0: movz            x5, #0x4
    // 0x8723f4: r6 = 6
    //     0x8723f4: movz            x6, #0x6
    // 0x8723f8: r7 = 8
    //     0x8723f8: movz            x7, #0x8
    // 0x8723fc: r0 = _GrowableList._literal8()
    //     0x8723fc: bl              #0x8a5940  ; [dart:core] _GrowableList::_GrowableList._literal8
    // 0x872400: mov             x1, x0
    // 0x872404: stur            x0, [fp, #-8]
    // 0x872408: r0 = shuffle()
    //     0x872408: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87240c: mov             x1, x0
    // 0x872410: r0 = first()
    //     0x872410: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872414: mov             x3, x0
    // 0x872418: r2 = Null
    //     0x872418: mov             x2, NULL
    // 0x87241c: r1 = Null
    //     0x87241c: mov             x1, NULL
    // 0x872420: stur            x3, [fp, #-0x10]
    // 0x872424: branchIfSmi(r0, 0x872454)
    //     0x872424: tbz             w0, #0, #0x872454
    //     0x872428: nop             
    // 0x87242c: r4 = LoadClassIdInstr(r0)
    //     0x87242c: ldur            x4, [x0, #-1]
    //     0x872430: ubfx            x4, x4, #0xc, #0x14
    // 0x872434: sub             x4, x4, #0x3b
    // 0x872438: cmp             x4, #1
    // 0x87243c: b.ls            #0x872454
    // 0x872440: nop             
    // 0x872444: r8 = int
    //     0x872444: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872448: r3 = Null
    //     0x872448: add             x3, PP, #0x10, lsl #12  ; [pp+0x10db8] Null
    //     0x87244c: ldr             x3, [x3, #0xdb8]
    // 0x872450: r0 = int()
    //     0x872450: bl              #0x1524294  ; IsType_int_Stub
    // 0x872454: ldur            x1, [fp, #-8]
    // 0x872458: ldur            x2, [fp, #-0x10]
    // 0x87245c: r0 = remove()
    //     0x87245c: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872460: ldur            x1, [fp, #-8]
    // 0x872464: r0 = shuffle()
    //     0x872464: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872468: mov             x1, x0
    // 0x87246c: r0 = first()
    //     0x87246c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872470: mov             x3, x0
    // 0x872474: r2 = Null
    //     0x872474: mov             x2, NULL
    // 0x872478: r1 = Null
    //     0x872478: mov             x1, NULL
    // 0x87247c: stur            x3, [fp, #-0x18]
    // 0x872480: branchIfSmi(r0, 0x8724b0)
    //     0x872480: tbz             w0, #0, #0x8724b0
    //     0x872484: nop             
    // 0x872488: r4 = LoadClassIdInstr(r0)
    //     0x872488: ldur            x4, [x0, #-1]
    //     0x87248c: ubfx            x4, x4, #0xc, #0x14
    // 0x872490: sub             x4, x4, #0x3b
    // 0x872494: cmp             x4, #1
    // 0x872498: b.ls            #0x8724b0
    // 0x87249c: nop             
    // 0x8724a0: r8 = int
    //     0x8724a0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8724a4: r3 = Null
    //     0x8724a4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10dc8] Null
    //     0x8724a8: ldr             x3, [x3, #0xdc8]
    // 0x8724ac: r0 = int()
    //     0x8724ac: bl              #0x1524294  ; IsType_int_Stub
    // 0x8724b0: ldur            x1, [fp, #-8]
    // 0x8724b4: ldur            x2, [fp, #-0x18]
    // 0x8724b8: r0 = remove()
    //     0x8724b8: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x8724bc: ldur            x1, [fp, #-8]
    // 0x8724c0: r0 = shuffle()
    //     0x8724c0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8724c4: mov             x1, x0
    // 0x8724c8: r0 = first()
    //     0x8724c8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8724cc: mov             x3, x0
    // 0x8724d0: r2 = Null
    //     0x8724d0: mov             x2, NULL
    // 0x8724d4: r1 = Null
    //     0x8724d4: mov             x1, NULL
    // 0x8724d8: stur            x3, [fp, #-0x30]
    // 0x8724dc: branchIfSmi(r0, 0x87250c)
    //     0x8724dc: tbz             w0, #0, #0x87250c
    //     0x8724e0: nop             
    // 0x8724e4: r4 = LoadClassIdInstr(r0)
    //     0x8724e4: ldur            x4, [x0, #-1]
    //     0x8724e8: ubfx            x4, x4, #0xc, #0x14
    // 0x8724ec: sub             x4, x4, #0x3b
    // 0x8724f0: cmp             x4, #1
    // 0x8724f4: b.ls            #0x87250c
    // 0x8724f8: nop             
    // 0x8724fc: r8 = int
    //     0x8724fc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872500: r3 = Null
    //     0x872500: add             x3, PP, #0x10, lsl #12  ; [pp+0x10dd8] Null
    //     0x872504: ldr             x3, [x3, #0xdd8]
    // 0x872508: r0 = int()
    //     0x872508: bl              #0x1524294  ; IsType_int_Stub
    // 0x87250c: ldur            x1, [fp, #-8]
    // 0x872510: ldur            x2, [fp, #-0x30]
    // 0x872514: r0 = remove()
    //     0x872514: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872518: ldur            x1, [fp, #-8]
    // 0x87251c: r0 = shuffle()
    //     0x87251c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872520: mov             x1, x0
    // 0x872524: r0 = first()
    //     0x872524: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872528: mov             x3, x0
    // 0x87252c: r2 = Null
    //     0x87252c: mov             x2, NULL
    // 0x872530: r1 = Null
    //     0x872530: mov             x1, NULL
    // 0x872534: stur            x3, [fp, #-0x40]
    // 0x872538: branchIfSmi(r0, 0x872568)
    //     0x872538: tbz             w0, #0, #0x872568
    //     0x87253c: nop             
    // 0x872540: r4 = LoadClassIdInstr(r0)
    //     0x872540: ldur            x4, [x0, #-1]
    //     0x872544: ubfx            x4, x4, #0xc, #0x14
    // 0x872548: sub             x4, x4, #0x3b
    // 0x87254c: cmp             x4, #1
    // 0x872550: b.ls            #0x872568
    // 0x872554: nop             
    // 0x872558: r8 = int
    //     0x872558: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87255c: r3 = Null
    //     0x87255c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10de8] Null
    //     0x872560: ldr             x3, [x3, #0xde8]
    // 0x872564: r0 = int()
    //     0x872564: bl              #0x1524294  ; IsType_int_Stub
    // 0x872568: ldur            x1, [fp, #-8]
    // 0x87256c: ldur            x2, [fp, #-0x40]
    // 0x872570: r0 = remove()
    //     0x872570: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x872574: ldur            x1, [fp, #-8]
    // 0x872578: r0 = shuffle()
    //     0x872578: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87257c: mov             x1, x0
    // 0x872580: r0 = first()
    //     0x872580: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872584: mov             x3, x0
    // 0x872588: r2 = Null
    //     0x872588: mov             x2, NULL
    // 0x87258c: r1 = Null
    //     0x87258c: mov             x1, NULL
    // 0x872590: stur            x3, [fp, #-0x48]
    // 0x872594: branchIfSmi(r0, 0x8725c4)
    //     0x872594: tbz             w0, #0, #0x8725c4
    //     0x872598: nop             
    // 0x87259c: r4 = LoadClassIdInstr(r0)
    //     0x87259c: ldur            x4, [x0, #-1]
    //     0x8725a0: ubfx            x4, x4, #0xc, #0x14
    // 0x8725a4: sub             x4, x4, #0x3b
    // 0x8725a8: cmp             x4, #1
    // 0x8725ac: b.ls            #0x8725c4
    // 0x8725b0: nop             
    // 0x8725b4: r8 = int
    //     0x8725b4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8725b8: r3 = Null
    //     0x8725b8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10df8] Null
    //     0x8725bc: ldr             x3, [x3, #0xdf8]
    // 0x8725c0: r0 = int()
    //     0x8725c0: bl              #0x1524294  ; IsType_int_Stub
    // 0x8725c4: ldur            x1, [fp, #-8]
    // 0x8725c8: ldur            x2, [fp, #-0x48]
    // 0x8725cc: r0 = remove()
    //     0x8725cc: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x8725d0: ldur            x1, [fp, #-8]
    // 0x8725d4: r0 = shuffle()
    //     0x8725d4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8725d8: mov             x1, x0
    // 0x8725dc: r0 = first()
    //     0x8725dc: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8725e0: mov             x3, x0
    // 0x8725e4: r2 = Null
    //     0x8725e4: mov             x2, NULL
    // 0x8725e8: r1 = Null
    //     0x8725e8: mov             x1, NULL
    // 0x8725ec: stur            x3, [fp, #-0x50]
    // 0x8725f0: branchIfSmi(r0, 0x872620)
    //     0x8725f0: tbz             w0, #0, #0x872620
    //     0x8725f4: nop             
    // 0x8725f8: r4 = LoadClassIdInstr(r0)
    //     0x8725f8: ldur            x4, [x0, #-1]
    //     0x8725fc: ubfx            x4, x4, #0xc, #0x14
    // 0x872600: sub             x4, x4, #0x3b
    // 0x872604: cmp             x4, #1
    // 0x872608: b.ls            #0x872620
    // 0x87260c: nop             
    // 0x872610: r8 = int
    //     0x872610: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x872614: r3 = Null
    //     0x872614: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e08] Null
    //     0x872618: ldr             x3, [x3, #0xe08]
    // 0x87261c: r0 = int()
    //     0x87261c: bl              #0x1524294  ; IsType_int_Stub
    // 0x872620: ldur            x1, [fp, #-8]
    // 0x872624: ldur            x2, [fp, #-0x50]
    // 0x872628: r0 = remove()
    //     0x872628: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x87262c: r1 = Null
    //     0x87262c: mov             x1, NULL
    // 0x872630: r2 = 12
    //     0x872630: movz            x2, #0xc
    // 0x872634: r0 = AllocateArray()
    //     0x872634: bl              #0x1502560  ; AllocateArrayStub
    // 0x872638: mov             x1, x0
    // 0x87263c: ldur            x0, [fp, #-0x10]
    // 0x872640: StoreField: r1->field_f = r0
    //     0x872640: stur            w0, [x1, #0xf]
    // 0x872644: ldur            x0, [fp, #-0x18]
    // 0x872648: StoreField: r1->field_13 = r0
    //     0x872648: stur            w0, [x1, #0x13]
    // 0x87264c: ldur            x0, [fp, #-0x30]
    // 0x872650: ArrayStore: r1[0] = r0  ; List_4
    //     0x872650: stur            w0, [x1, #0x17]
    // 0x872654: ldur            x0, [fp, #-0x40]
    // 0x872658: StoreField: r1->field_1b = r0
    //     0x872658: stur            w0, [x1, #0x1b]
    // 0x87265c: ldur            x0, [fp, #-0x48]
    // 0x872660: StoreField: r1->field_1f = r0
    //     0x872660: stur            w0, [x1, #0x1f]
    // 0x872664: ldur            x0, [fp, #-0x50]
    // 0x872668: StoreField: r1->field_23 = r0
    //     0x872668: stur            w0, [x1, #0x23]
    // 0x87266c: str             x1, [SP]
    // 0x872670: r0 = _interpolate()
    //     0x872670: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x872674: b               #0x8838b4
    // 0x872678: r16 = "esterMiniGame"
    //     0x872678: add             x16, PP, #0x10, lsl #12  ; [pp+0x10e18] "esterMiniGame"
    //     0x87267c: ldr             x16, [x16, #0xe18]
    // 0x872680: ldur            lr, [fp, #-0x28]
    // 0x872684: stp             lr, x16, [SP]
    // 0x872688: r0 = ==()
    //     0x872688: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87268c: tbnz            w0, #4, #0x872740
    // 0x872690: nop             
    // 0x872694: r0 = LoadStaticField(0xb54)
    //     0x872694: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872698: ldr             x0, [x0, #0x16a8]
    // 0x87269c: cmp             w0, NULL
    // 0x8726a0: b.ne            #0x8726b0
    // 0x8726a4: nop             
    // 0x8726a8: r0 = Null
    //     0x8726a8: mov             x0, NULL
    // 0x8726ac: b               #0x8726d8
    // 0x8726b0: r17 = 351
    //     0x8726b0: movz            x17, #0x15f
    // 0x8726b4: ldr             w1, [x0, x17]
    // 0x8726b8: DecompressPointer r1
    //     0x8726b8: add             x1, x1, HEAP, lsl #32
    // 0x8726bc: r0 = LoadClassIdInstr(r1)
    //     0x8726bc: ldur            x0, [x1, #-1]
    //     0x8726c0: ubfx            x0, x0, #0xc, #0x14
    // 0x8726c4: r2 = "esterMiniGame"
    //     0x8726c4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10e18] "esterMiniGame"
    //     0x8726c8: ldr             x2, [x2, #0xe18]
    // 0x8726cc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8726cc: sub             lr, x0, #0xb4
    //     0x8726d0: ldr             lr, [x21, lr, lsl #3]
    //     0x8726d4: blr             lr
    // 0x8726d8: cmp             w0, NULL
    // 0x8726dc: b.ne            #0x8726f0
    // 0x8726e0: nop             
    // 0x8726e4: r3 = "miniGame5"
    //     0x8726e4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e20] "miniGame5"
    //     0x8726e8: ldr             x3, [x3, #0xe20]
    // 0x8726ec: b               #0x8726f4
    // 0x8726f0: mov             x3, x0
    // 0x8726f4: mov             x0, x3
    // 0x8726f8: stur            x3, [fp, #-8]
    // 0x8726fc: r2 = Null
    //     0x8726fc: mov             x2, NULL
    // 0x872700: r1 = Null
    //     0x872700: mov             x1, NULL
    // 0x872704: r4 = 59
    //     0x872704: movz            x4, #0x3b
    // 0x872708: branchIfSmi(r0, 0x872718)
    //     0x872708: tbz             w0, #0, #0x872718
    //     0x87270c: nop             
    // 0x872710: r4 = LoadClassIdInstr(r0)
    //     0x872710: ldur            x4, [x0, #-1]
    //     0x872714: ubfx            x4, x4, #0xc, #0x14
    // 0x872718: sub             x4, x4, #0x5d
    // 0x87271c: cmp             x4, #1
    // 0x872720: b.ls            #0x872738
    // 0x872724: nop             
    // 0x872728: r8 = String
    //     0x872728: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87272c: r3 = Null
    //     0x87272c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e28] Null
    //     0x872730: ldr             x3, [x3, #0xe28]
    // 0x872734: r0 = String()
    //     0x872734: bl              #0x1523244  ; IsType_String_Stub
    // 0x872738: ldur            x0, [fp, #-8]
    // 0x87273c: b               #0x8838b4
    // 0x872740: r16 = "give9EnergyDrinks"
    //     0x872740: add             x16, PP, #0x10, lsl #12  ; [pp+0x10e38] "give9EnergyDrinks"
    //     0x872744: ldr             x16, [x16, #0xe38]
    // 0x872748: ldur            lr, [fp, #-0x28]
    // 0x87274c: stp             lr, x16, [SP]
    // 0x872750: r0 = ==()
    //     0x872750: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872754: tbnz            w0, #4, #0x872830
    // 0x872758: nop             
    // 0x87275c: r0 = LoadStaticField(0xb54)
    //     0x87275c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872760: ldr             x0, [x0, #0x16a8]
    // 0x872764: cmp             w0, NULL
    // 0x872768: b.ne            #0x872778
    // 0x87276c: nop             
    // 0x872770: r0 = Null
    //     0x872770: mov             x0, NULL
    // 0x872774: b               #0x8727a0
    // 0x872778: r17 = 339
    //     0x872778: movz            x17, #0x153
    // 0x87277c: ldr             w1, [x0, x17]
    // 0x872780: DecompressPointer r1
    //     0x872780: add             x1, x1, HEAP, lsl #32
    // 0x872784: r0 = LoadClassIdInstr(r1)
    //     0x872784: ldur            x0, [x1, #-1]
    //     0x872788: ubfx            x0, x0, #0xc, #0x14
    // 0x87278c: r2 = "energydrink"
    //     0x87278c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10590] "energydrink"
    //     0x872790: ldr             x2, [x2, #0x590]
    // 0x872794: r0 = GDT[cid_x0 + -0xb4]()
    //     0x872794: sub             lr, x0, #0xb4
    //     0x872798: ldr             lr, [x21, lr, lsl #3]
    //     0x87279c: blr             lr
    // 0x8727a0: cmp             w0, NULL
    // 0x8727a4: b.ne            #0x8727b4
    // 0x8727a8: nop             
    // 0x8727ac: r3 = 0
    //     0x8727ac: movz            x3, #0
    // 0x8727b0: b               #0x8727b8
    // 0x8727b4: mov             x3, x0
    // 0x8727b8: mov             x0, x3
    // 0x8727bc: stur            x3, [fp, #-8]
    // 0x8727c0: r2 = Null
    //     0x8727c0: mov             x2, NULL
    // 0x8727c4: r1 = Null
    //     0x8727c4: mov             x1, NULL
    // 0x8727c8: branchIfSmi(r0, 0x8727f8)
    //     0x8727c8: tbz             w0, #0, #0x8727f8
    //     0x8727cc: nop             
    // 0x8727d0: r4 = LoadClassIdInstr(r0)
    //     0x8727d0: ldur            x4, [x0, #-1]
    //     0x8727d4: ubfx            x4, x4, #0xc, #0x14
    // 0x8727d8: sub             x4, x4, #0x3b
    // 0x8727dc: cmp             x4, #1
    // 0x8727e0: b.ls            #0x8727f8
    // 0x8727e4: nop             
    // 0x8727e8: r8 = int
    //     0x8727e8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8727ec: r3 = Null
    //     0x8727ec: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e40] Null
    //     0x8727f0: ldr             x3, [x3, #0xe40]
    // 0x8727f4: r0 = int()
    //     0x8727f4: bl              #0x1524294  ; IsType_int_Stub
    // 0x8727f8: ldur            x0, [fp, #-8]
    // 0x8727fc: r1 = LoadInt32Instr(r0)
    //     0x8727fc: sbfx            x1, x0, #1, #0x1f
    //     0x872800: tbz             w0, #0, #0x87280c
    //     0x872804: nop             
    //     0x872808: ldur            x1, [x0, #7]
    // 0x87280c: cmp             x1, #9
    // 0x872810: b.lt            #0x872824
    // 0x872814: nop             
    // 0x872818: r0 = "success"
    //     0x872818: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e50] "success"
    //     0x87281c: ldr             x0, [x0, #0xe50]
    // 0x872820: b               #0x8838b4
    // 0x872824: r0 = "noHave"
    //     0x872824: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e58] "noHave"
    //     0x872828: ldr             x0, [x0, #0xe58]
    // 0x87282c: b               #0x8838b4
    // 0x872830: r16 = "totalAct20"
    //     0x872830: add             x16, PP, #0x10, lsl #12  ; [pp+0x10e60] "totalAct20"
    //     0x872834: ldr             x16, [x16, #0xe60]
    // 0x872838: ldur            lr, [fp, #-0x28]
    // 0x87283c: stp             lr, x16, [SP]
    // 0x872840: r0 = ==()
    //     0x872840: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872844: tbnz            w0, #4, #0x8728cc
    // 0x872848: nop             
    // 0x87284c: r0 = LoadStaticField(0xb54)
    //     0x87284c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872850: ldr             x0, [x0, #0x16a8]
    // 0x872854: cmp             w0, NULL
    // 0x872858: b.ne            #0x872868
    // 0x87285c: nop             
    // 0x872860: r0 = Null
    //     0x872860: mov             x0, NULL
    // 0x872864: b               #0x872884
    // 0x872868: LoadField: r2 = r0->field_bb
    //     0x872868: ldur            x2, [x0, #0xbb]
    // 0x87286c: r0 = BoxInt64Instr(r2)
    //     0x87286c: sbfiz           x0, x2, #1, #0x1f
    //     0x872870: cmp             x2, x0, asr #1
    //     0x872874: b.eq            #0x872884
    //     0x872878: nop             
    //     0x87287c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x872880: stur            x2, [x0, #7]
    // 0x872884: cmp             w0, NULL
    // 0x872888: b.ne            #0x872898
    // 0x87288c: nop             
    // 0x872890: r0 = 0
    //     0x872890: movz            x0, #0
    // 0x872894: b               #0x8728ac
    // 0x872898: r1 = LoadInt32Instr(r0)
    //     0x872898: sbfx            x1, x0, #1, #0x1f
    //     0x87289c: tbz             w0, #0, #0x8728a8
    //     0x8728a0: nop             
    //     0x8728a4: ldur            x1, [x0, #7]
    // 0x8728a8: mov             x0, x1
    // 0x8728ac: cmp             x0, #0x14
    // 0x8728b0: b.ge            #0x8728c4
    // 0x8728b4: nop             
    // 0x8728b8: r0 = "battle"
    //     0x8728b8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e68] "battle"
    //     0x8728bc: ldr             x0, [x0, #0xe68]
    // 0x8728c0: b               #0x8838b4
    // 0x8728c4: r0 = "error"
    //     0x8728c4: ldr             x0, [PP, #0x1c98]  ; [pp+0x1c98] "error"
    // 0x8728c8: b               #0x8838b4
    // 0x8728cc: r16 = "checkCard3Act"
    //     0x8728cc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10e70] "checkCard3Act"
    //     0x8728d0: ldr             x16, [x16, #0xe70]
    // 0x8728d4: ldur            lr, [fp, #-0x28]
    // 0x8728d8: stp             lr, x16, [SP]
    // 0x8728dc: r0 = ==()
    //     0x8728dc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8728e0: tbnz            w0, #4, #0x872a14
    // 0x8728e4: nop             
    // 0x8728e8: r0 = LoadStaticField(0xb54)
    //     0x8728e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8728ec: ldr             x0, [x0, #0x16a8]
    // 0x8728f0: cmp             w0, NULL
    // 0x8728f4: b.ne            #0x872904
    // 0x8728f8: nop             
    // 0x8728fc: r0 = Null
    //     0x8728fc: mov             x0, NULL
    // 0x872900: b               #0x872914
    // 0x872904: r17 = 311
    //     0x872904: movz            x17, #0x137
    // 0x872908: ldr             w1, [x0, x17]
    // 0x87290c: DecompressPointer r1
    //     0x87290c: add             x1, x1, HEAP, lsl #32
    // 0x872910: mov             x0, x1
    // 0x872914: cmp             w0, NULL
    // 0x872918: b.ne            #0x872934
    // 0x87291c: nop             
    // 0x872920: r1 = Null
    //     0x872920: mov             x1, NULL
    // 0x872924: r2 = 0
    //     0x872924: movz            x2, #0
    // 0x872928: r0 = _GrowableList()
    //     0x872928: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x87292c: mov             x1, x0
    // 0x872930: b               #0x872938
    // 0x872934: mov             x1, x0
    // 0x872938: r0 = LoadClassIdInstr(r1)
    //     0x872938: ldur            x0, [x1, #-1]
    //     0x87293c: ubfx            x0, x0, #0xc, #0x14
    // 0x872940: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x872940: movz            x17, #0xa37b
    //     0x872944: add             lr, x0, x17
    //     0x872948: ldr             lr, [x21, lr, lsl #3]
    //     0x87294c: blr             lr
    // 0x872950: stur            x0, [fp, #-8]
    // 0x872954: CheckStackOverflow
    //     0x872954: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x872958: cmp             SP, x16
    //     0x87295c: b.ls            #0x88390c
    //     0x872960: nop             
    // 0x872964: mov             x1, x0
    // 0x872968: r0 = moveNext()
    //     0x872968: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x87296c: tbnz            w0, #4, #0x872a08
    // 0x872970: nop             
    // 0x872974: ldur            x1, [fp, #-8]
    // 0x872978: r0 = current()
    //     0x872978: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x87297c: mov             x3, x0
    // 0x872980: r2 = Null
    //     0x872980: mov             x2, NULL
    // 0x872984: r1 = Null
    //     0x872984: mov             x1, NULL
    // 0x872988: stur            x3, [fp, #-0x10]
    // 0x87298c: r4 = 59
    //     0x87298c: movz            x4, #0x3b
    // 0x872990: branchIfSmi(r0, 0x8729a0)
    //     0x872990: tbz             w0, #0, #0x8729a0
    //     0x872994: nop             
    // 0x872998: r4 = LoadClassIdInstr(r0)
    //     0x872998: ldur            x4, [x0, #-1]
    //     0x87299c: ubfx            x4, x4, #0xc, #0x14
    // 0x8729a0: sub             x4, x4, #0x5d
    // 0x8729a4: cmp             x4, #1
    // 0x8729a8: b.ls            #0x8729c0
    // 0x8729ac: nop             
    // 0x8729b0: r8 = String
    //     0x8729b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8729b4: r3 = Null
    //     0x8729b4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e78] Null
    //     0x8729b8: ldr             x3, [x3, #0xe78]
    // 0x8729bc: r0 = String()
    //     0x8729bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8729c0: ldur            x1, [fp, #-0x10]
    // 0x8729c4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8729c4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8729c8: r0 = getCard()
    //     0x8729c8: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x8729cc: LoadField: r1 = r0->field_27
    //     0x8729cc: ldur            w1, [x0, #0x27]
    // 0x8729d0: DecompressPointer r1
    //     0x8729d0: add             x1, x1, HEAP, lsl #32
    // 0x8729d4: cmp             w1, NULL
    // 0x8729d8: b.ne            #0x8729e8
    // 0x8729dc: nop             
    // 0x8729e0: r0 = 0
    //     0x8729e0: movz            x0, #0
    // 0x8729e4: b               #0x8729ec
    // 0x8729e8: r0 = LoadInt32Instr(r1)
    //     0x8729e8: sbfx            x0, x1, #1, #0x1f
    // 0x8729ec: cmp             x0, #3
    // 0x8729f0: b.ge            #0x872a00
    // 0x8729f4: nop             
    // 0x8729f8: ldur            x0, [fp, #-8]
    // 0x8729fc: b               #0x872954
    // 0x872a00: r0 = "error"
    //     0x872a00: ldr             x0, [PP, #0x1c98]  ; [pp+0x1c98] "error"
    // 0x872a04: b               #0x8838b4
    // 0x872a08: r0 = "battle"
    //     0x872a08: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e68] "battle"
    //     0x872a0c: ldr             x0, [x0, #0xe68]
    // 0x872a10: b               #0x8838b4
    // 0x872a14: r16 = "techMoreHit"
    //     0x872a14: add             x16, PP, #0x10, lsl #12  ; [pp+0x10e88] "techMoreHit"
    //     0x872a18: ldr             x16, [x16, #0xe88]
    // 0x872a1c: ldur            lr, [fp, #-0x28]
    // 0x872a20: stp             lr, x16, [SP]
    // 0x872a24: r0 = ==()
    //     0x872a24: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872a28: tbnz            w0, #4, #0x872bd4
    // 0x872a2c: nop             
    // 0x872a30: r0 = LoadStaticField(0xb54)
    //     0x872a30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872a34: ldr             x0, [x0, #0x16a8]
    // 0x872a38: cmp             w0, NULL
    // 0x872a3c: b.ne            #0x872a4c
    // 0x872a40: nop             
    // 0x872a44: r0 = Null
    //     0x872a44: mov             x0, NULL
    // 0x872a48: b               #0x872a5c
    // 0x872a4c: r17 = 311
    //     0x872a4c: movz            x17, #0x137
    // 0x872a50: ldr             w1, [x0, x17]
    // 0x872a54: DecompressPointer r1
    //     0x872a54: add             x1, x1, HEAP, lsl #32
    // 0x872a58: mov             x0, x1
    // 0x872a5c: cmp             w0, NULL
    // 0x872a60: b.ne            #0x872a7c
    // 0x872a64: nop             
    // 0x872a68: r1 = Null
    //     0x872a68: mov             x1, NULL
    // 0x872a6c: r2 = 0
    //     0x872a6c: movz            x2, #0
    // 0x872a70: r0 = _GrowableList()
    //     0x872a70: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x872a74: mov             x1, x0
    // 0x872a78: b               #0x872a80
    // 0x872a7c: mov             x1, x0
    // 0x872a80: r0 = LoadClassIdInstr(r1)
    //     0x872a80: ldur            x0, [x1, #-1]
    //     0x872a84: ubfx            x0, x0, #0xc, #0x14
    // 0x872a88: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x872a88: movz            x17, #0xa37b
    //     0x872a8c: add             lr, x0, x17
    //     0x872a90: ldr             lr, [x21, lr, lsl #3]
    //     0x872a94: blr             lr
    // 0x872a98: stur            x0, [fp, #-8]
    // 0x872a9c: r3 = 0
    //     0x872a9c: movz            x3, #0
    // 0x872aa0: r2 = 0
    //     0x872aa0: movz            x2, #0
    // 0x872aa4: stur            x3, [fp, #-0x38]
    // 0x872aa8: stur            x2, [fp, #-0x80]
    // 0x872aac: CheckStackOverflow
    //     0x872aac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x872ab0: cmp             SP, x16
    //     0x872ab4: b.ls            #0x883914
    //     0x872ab8: nop             
    // 0x872abc: mov             x1, x0
    // 0x872ac0: r0 = moveNext()
    //     0x872ac0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x872ac4: tbnz            w0, #4, #0x872ba8
    // 0x872ac8: nop             
    // 0x872acc: ldur            x1, [fp, #-8]
    // 0x872ad0: r0 = current()
    //     0x872ad0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x872ad4: mov             x3, x0
    // 0x872ad8: r2 = Null
    //     0x872ad8: mov             x2, NULL
    // 0x872adc: r1 = Null
    //     0x872adc: mov             x1, NULL
    // 0x872ae0: stur            x3, [fp, #-0x10]
    // 0x872ae4: r4 = 59
    //     0x872ae4: movz            x4, #0x3b
    // 0x872ae8: branchIfSmi(r0, 0x872af8)
    //     0x872ae8: tbz             w0, #0, #0x872af8
    //     0x872aec: nop             
    // 0x872af0: r4 = LoadClassIdInstr(r0)
    //     0x872af0: ldur            x4, [x0, #-1]
    //     0x872af4: ubfx            x4, x4, #0xc, #0x14
    // 0x872af8: sub             x4, x4, #0x5d
    // 0x872afc: cmp             x4, #1
    // 0x872b00: b.ls            #0x872b18
    // 0x872b04: nop             
    // 0x872b08: r8 = String
    //     0x872b08: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x872b0c: r3 = Null
    //     0x872b0c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10e90] Null
    //     0x872b10: ldr             x3, [x3, #0xe90]
    // 0x872b14: r0 = String()
    //     0x872b14: bl              #0x1523244  ; IsType_String_Stub
    // 0x872b18: ldur            x1, [fp, #-0x10]
    // 0x872b1c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x872b1c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x872b20: r0 = getCard()
    //     0x872b20: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x872b24: stur            x0, [fp, #-0x10]
    // 0x872b28: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x872b28: ldur            w1, [x0, #0x17]
    // 0x872b2c: DecompressPointer r1
    //     0x872b2c: add             x1, x1, HEAP, lsl #32
    // 0x872b30: r16 = Instance_CardType
    //     0x872b30: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ea0] Obj!CardType@ec8721
    //     0x872b34: ldr             x16, [x16, #0xea0]
    // 0x872b38: stp             x16, x1, [SP]
    // 0x872b3c: r0 = ==()
    //     0x872b3c: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x872b40: tbnz            w0, #4, #0x872b5c
    // 0x872b44: nop             
    // 0x872b48: ldur            x0, [fp, #-0x80]
    // 0x872b4c: add             x1, x0, #1
    // 0x872b50: ldur            x3, [fp, #-0x38]
    // 0x872b54: mov             x2, x1
    // 0x872b58: b               #0x872ba0
    // 0x872b5c: ldur            x0, [fp, #-0x80]
    // 0x872b60: ldur            x1, [fp, #-0x10]
    // 0x872b64: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x872b64: ldur            w2, [x1, #0x17]
    // 0x872b68: DecompressPointer r2
    //     0x872b68: add             x2, x2, HEAP, lsl #32
    // 0x872b6c: r16 = Instance_CardType
    //     0x872b6c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ea8] Obj!CardType@ec8701
    //     0x872b70: ldr             x16, [x16, #0xea8]
    // 0x872b74: stp             x16, x2, [SP]
    // 0x872b78: r0 = ==()
    //     0x872b78: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x872b7c: tbnz            w0, #4, #0x872b94
    // 0x872b80: nop             
    // 0x872b84: ldur            x0, [fp, #-0x38]
    // 0x872b88: add             x1, x0, #1
    // 0x872b8c: mov             x0, x1
    // 0x872b90: b               #0x872b98
    // 0x872b94: ldur            x0, [fp, #-0x38]
    // 0x872b98: mov             x3, x0
    // 0x872b9c: ldur            x2, [fp, #-0x80]
    // 0x872ba0: ldur            x0, [fp, #-8]
    // 0x872ba4: b               #0x872aa4
    // 0x872ba8: ldur            x0, [fp, #-0x38]
    // 0x872bac: ldur            x1, [fp, #-0x80]
    // 0x872bb0: lsl             x2, x1, #1
    // 0x872bb4: cmp             x0, x2
    // 0x872bb8: b.lt            #0x872bcc
    // 0x872bbc: nop             
    // 0x872bc0: r0 = "battle"
    //     0x872bc0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e68] "battle"
    //     0x872bc4: ldr             x0, [x0, #0xe68]
    // 0x872bc8: b               #0x8838b4
    // 0x872bcc: r0 = "error"
    //     0x872bcc: ldr             x0, [PP, #0x1c98]  ; [pp+0x1c98] "error"
    // 0x872bd0: b               #0x8838b4
    // 0x872bd4: r16 = "checkCardMin3Act"
    //     0x872bd4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10eb0] "checkCardMin3Act"
    //     0x872bd8: ldr             x16, [x16, #0xeb0]
    // 0x872bdc: ldur            lr, [fp, #-0x28]
    // 0x872be0: stp             lr, x16, [SP]
    // 0x872be4: r0 = ==()
    //     0x872be4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872be8: tbnz            w0, #4, #0x872d1c
    // 0x872bec: nop             
    // 0x872bf0: r0 = LoadStaticField(0xb54)
    //     0x872bf0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872bf4: ldr             x0, [x0, #0x16a8]
    // 0x872bf8: cmp             w0, NULL
    // 0x872bfc: b.ne            #0x872c0c
    // 0x872c00: nop             
    // 0x872c04: r0 = Null
    //     0x872c04: mov             x0, NULL
    // 0x872c08: b               #0x872c1c
    // 0x872c0c: r17 = 311
    //     0x872c0c: movz            x17, #0x137
    // 0x872c10: ldr             w1, [x0, x17]
    // 0x872c14: DecompressPointer r1
    //     0x872c14: add             x1, x1, HEAP, lsl #32
    // 0x872c18: mov             x0, x1
    // 0x872c1c: cmp             w0, NULL
    // 0x872c20: b.ne            #0x872c3c
    // 0x872c24: nop             
    // 0x872c28: r1 = Null
    //     0x872c28: mov             x1, NULL
    // 0x872c2c: r2 = 0
    //     0x872c2c: movz            x2, #0
    // 0x872c30: r0 = _GrowableList()
    //     0x872c30: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x872c34: mov             x1, x0
    // 0x872c38: b               #0x872c40
    // 0x872c3c: mov             x1, x0
    // 0x872c40: r0 = LoadClassIdInstr(r1)
    //     0x872c40: ldur            x0, [x1, #-1]
    //     0x872c44: ubfx            x0, x0, #0xc, #0x14
    // 0x872c48: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x872c48: movz            x17, #0xa37b
    //     0x872c4c: add             lr, x0, x17
    //     0x872c50: ldr             lr, [x21, lr, lsl #3]
    //     0x872c54: blr             lr
    // 0x872c58: stur            x0, [fp, #-8]
    // 0x872c5c: CheckStackOverflow
    //     0x872c5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x872c60: cmp             SP, x16
    //     0x872c64: b.ls            #0x88391c
    //     0x872c68: nop             
    // 0x872c6c: mov             x1, x0
    // 0x872c70: r0 = moveNext()
    //     0x872c70: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x872c74: tbnz            w0, #4, #0x872d10
    // 0x872c78: nop             
    // 0x872c7c: ldur            x1, [fp, #-8]
    // 0x872c80: r0 = current()
    //     0x872c80: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x872c84: mov             x3, x0
    // 0x872c88: r2 = Null
    //     0x872c88: mov             x2, NULL
    // 0x872c8c: r1 = Null
    //     0x872c8c: mov             x1, NULL
    // 0x872c90: stur            x3, [fp, #-0x10]
    // 0x872c94: r4 = 59
    //     0x872c94: movz            x4, #0x3b
    // 0x872c98: branchIfSmi(r0, 0x872ca8)
    //     0x872c98: tbz             w0, #0, #0x872ca8
    //     0x872c9c: nop             
    // 0x872ca0: r4 = LoadClassIdInstr(r0)
    //     0x872ca0: ldur            x4, [x0, #-1]
    //     0x872ca4: ubfx            x4, x4, #0xc, #0x14
    // 0x872ca8: sub             x4, x4, #0x5d
    // 0x872cac: cmp             x4, #1
    // 0x872cb0: b.ls            #0x872cc8
    // 0x872cb4: nop             
    // 0x872cb8: r8 = String
    //     0x872cb8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x872cbc: r3 = Null
    //     0x872cbc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10eb8] Null
    //     0x872cc0: ldr             x3, [x3, #0xeb8]
    // 0x872cc4: r0 = String()
    //     0x872cc4: bl              #0x1523244  ; IsType_String_Stub
    // 0x872cc8: ldur            x1, [fp, #-0x10]
    // 0x872ccc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x872ccc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x872cd0: r0 = getCard()
    //     0x872cd0: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x872cd4: LoadField: r1 = r0->field_27
    //     0x872cd4: ldur            w1, [x0, #0x27]
    // 0x872cd8: DecompressPointer r1
    //     0x872cd8: add             x1, x1, HEAP, lsl #32
    // 0x872cdc: cmp             w1, NULL
    // 0x872ce0: b.ne            #0x872cf0
    // 0x872ce4: nop             
    // 0x872ce8: r0 = 0
    //     0x872ce8: movz            x0, #0
    // 0x872cec: b               #0x872cf4
    // 0x872cf0: r0 = LoadInt32Instr(r1)
    //     0x872cf0: sbfx            x0, x1, #1, #0x1f
    // 0x872cf4: cmp             x0, #3
    // 0x872cf8: b.lt            #0x872d08
    // 0x872cfc: nop             
    // 0x872d00: ldur            x0, [fp, #-8]
    // 0x872d04: b               #0x872c5c
    // 0x872d08: r0 = "error"
    //     0x872d08: ldr             x0, [PP, #0x1c98]  ; [pp+0x1c98] "error"
    // 0x872d0c: b               #0x8838b4
    // 0x872d10: r0 = "battle"
    //     0x872d10: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e68] "battle"
    //     0x872d14: ldr             x0, [x0, #0xe68]
    // 0x872d18: b               #0x8838b4
    // 0x872d1c: r16 = "check21Cards"
    //     0x872d1c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ec8] "check21Cards"
    //     0x872d20: ldr             x16, [x16, #0xec8]
    // 0x872d24: ldur            lr, [fp, #-0x28]
    // 0x872d28: stp             lr, x16, [SP]
    // 0x872d2c: r0 = ==()
    //     0x872d2c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872d30: tbnz            w0, #4, #0x872dcc
    // 0x872d34: nop             
    // 0x872d38: r0 = LoadStaticField(0xb54)
    //     0x872d38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872d3c: ldr             x0, [x0, #0x16a8]
    // 0x872d40: cmp             w0, NULL
    // 0x872d44: b.ne            #0x872d54
    // 0x872d48: nop             
    // 0x872d4c: r0 = Null
    //     0x872d4c: mov             x0, NULL
    // 0x872d50: b               #0x872d64
    // 0x872d54: r17 = 311
    //     0x872d54: movz            x17, #0x137
    // 0x872d58: ldr             w1, [x0, x17]
    // 0x872d5c: DecompressPointer r1
    //     0x872d5c: add             x1, x1, HEAP, lsl #32
    // 0x872d60: mov             x0, x1
    // 0x872d64: cmp             w0, NULL
    // 0x872d68: b.ne            #0x872d7c
    // 0x872d6c: nop             
    // 0x872d70: r1 = Null
    //     0x872d70: mov             x1, NULL
    // 0x872d74: r2 = 0
    //     0x872d74: movz            x2, #0
    // 0x872d78: r0 = _GrowableList()
    //     0x872d78: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x872d7c: r1 = LoadClassIdInstr(r0)
    //     0x872d7c: ldur            x1, [x0, #-1]
    //     0x872d80: ubfx            x1, x1, #0xc, #0x14
    // 0x872d84: str             x0, [SP]
    // 0x872d88: mov             x0, x1
    // 0x872d8c: r0 = GDT[cid_x0 + 0x8ca0]()
    //     0x872d8c: movz            x17, #0x8ca0
    //     0x872d90: add             lr, x0, x17
    //     0x872d94: ldr             lr, [x21, lr, lsl #3]
    //     0x872d98: blr             lr
    // 0x872d9c: r1 = LoadInt32Instr(r0)
    //     0x872d9c: sbfx            x1, x0, #1, #0x1f
    //     0x872da0: tbz             w0, #0, #0x872dac
    //     0x872da4: nop             
    //     0x872da8: ldur            x1, [x0, #7]
    // 0x872dac: cmp             x1, #0x14
    // 0x872db0: b.le            #0x872dc4
    // 0x872db4: nop             
    // 0x872db8: r0 = "battle"
    //     0x872db8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10e68] "battle"
    //     0x872dbc: ldr             x0, [x0, #0xe68]
    // 0x872dc0: b               #0x8838b4
    // 0x872dc4: r0 = "error"
    //     0x872dc4: ldr             x0, [PP, #0x1c98]  ; [pp+0x1c98] "error"
    // 0x872dc8: b               #0x8838b4
    // 0x872dcc: r16 = "legendBattle"
    //     0x872dcc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x872dd0: ldr             x16, [x16, #0xb68]
    // 0x872dd4: ldur            lr, [fp, #-0x28]
    // 0x872dd8: stp             lr, x16, [SP]
    // 0x872ddc: r0 = ==()
    //     0x872ddc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872de0: tbnz            w0, #4, #0x872f54
    // 0x872de4: nop             
    // 0x872de8: r0 = LoadStaticField(0xb54)
    //     0x872de8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x872dec: ldr             x0, [x0, #0x16a8]
    // 0x872df0: cmp             w0, NULL
    // 0x872df4: b.ne            #0x872e04
    // 0x872df8: nop             
    // 0x872dfc: r0 = Null
    //     0x872dfc: mov             x0, NULL
    // 0x872e00: b               #0x872e2c
    // 0x872e04: r17 = 351
    //     0x872e04: movz            x17, #0x15f
    // 0x872e08: ldr             w1, [x0, x17]
    // 0x872e0c: DecompressPointer r1
    //     0x872e0c: add             x1, x1, HEAP, lsl #32
    // 0x872e10: r0 = LoadClassIdInstr(r1)
    //     0x872e10: ldur            x0, [x1, #-1]
    //     0x872e14: ubfx            x0, x0, #0xc, #0x14
    // 0x872e18: r2 = "legendBattle"
    //     0x872e18: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x872e1c: ldr             x2, [x2, #0xb68]
    // 0x872e20: r0 = GDT[cid_x0 + -0xb4]()
    //     0x872e20: sub             lr, x0, #0xb4
    //     0x872e24: ldr             lr, [x21, lr, lsl #3]
    //     0x872e28: blr             lr
    // 0x872e2c: cmp             w0, NULL
    // 0x872e30: b.ne            #0x872e40
    // 0x872e34: nop             
    // 0x872e38: r3 = ""
    //     0x872e38: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x872e3c: b               #0x872e44
    // 0x872e40: mov             x3, x0
    // 0x872e44: mov             x0, x3
    // 0x872e48: stur            x3, [fp, #-8]
    // 0x872e4c: r2 = Null
    //     0x872e4c: mov             x2, NULL
    // 0x872e50: r1 = Null
    //     0x872e50: mov             x1, NULL
    // 0x872e54: r4 = 59
    //     0x872e54: movz            x4, #0x3b
    // 0x872e58: branchIfSmi(r0, 0x872e68)
    //     0x872e58: tbz             w0, #0, #0x872e68
    //     0x872e5c: nop             
    // 0x872e60: r4 = LoadClassIdInstr(r0)
    //     0x872e60: ldur            x4, [x0, #-1]
    //     0x872e64: ubfx            x4, x4, #0xc, #0x14
    // 0x872e68: sub             x4, x4, #0x5d
    // 0x872e6c: cmp             x4, #1
    // 0x872e70: b.ls            #0x872e88
    // 0x872e74: nop             
    // 0x872e78: r8 = String
    //     0x872e78: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x872e7c: r3 = Null
    //     0x872e7c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ed0] Null
    //     0x872e80: ldr             x3, [x3, #0xed0]
    // 0x872e84: r0 = String()
    //     0x872e84: bl              #0x1523244  ; IsType_String_Stub
    // 0x872e88: r1 = Null
    //     0x872e88: mov             x1, NULL
    // 0x872e8c: r2 = "leecw"
    //     0x872e8c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf4a8] "leecw"
    //     0x872e90: ldr             x2, [x2, #0x4a8]
    // 0x872e94: r3 = "lind"
    //     0x872e94: add             x3, PP, #0xf, lsl #12  ; [pp+0xf4b0] "lind"
    //     0x872e98: ldr             x3, [x3, #0x4b0]
    // 0x872e9c: r5 = "taufikh"
    //     0x872e9c: add             x5, PP, #0xf, lsl #12  ; [pp+0xf4b8] "taufikh"
    //     0x872ea0: ldr             x5, [x5, #0x4b8]
    // 0x872ea4: r6 = "peterg"
    //     0x872ea4: add             x6, PP, #0xf, lsl #12  ; [pp+0xf4c0] "peterg"
    //     0x872ea8: ldr             x6, [x6, #0x4c0]
    // 0x872eac: r0 = _GrowableList._literal4()
    //     0x872eac: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x872eb0: stur            x0, [fp, #-0x10]
    // 0x872eb4: ldur            x16, [fp, #-8]
    // 0x872eb8: str             x16, [SP]
    // 0x872ebc: r0 = isEmpty()
    //     0x872ebc: bl              #0x7c13ec  ; [dart:core] _StringBase::isEmpty
    // 0x872ec0: tbz             w0, #4, #0x872ef0
    // 0x872ec4: nop             
    // 0x872ec8: ldur            x1, [fp, #-8]
    // 0x872ecc: r0 = LoadClassIdInstr(r1)
    //     0x872ecc: ldur            x0, [x1, #-1]
    //     0x872ed0: ubfx            x0, x0, #0xc, #0x14
    // 0x872ed4: r16 = ""
    //     0x872ed4: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x872ed8: stp             x16, x1, [SP]
    // 0x872edc: mov             lr, x0
    // 0x872ee0: ldr             lr, [x21, lr, lsl #3]
    // 0x872ee4: blr             lr
    // 0x872ee8: tbnz            w0, #4, #0x872f4c
    // 0x872eec: nop             
    // 0x872ef0: ldur            x1, [fp, #-0x10]
    // 0x872ef4: r0 = shuffle()
    //     0x872ef4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872ef8: mov             x1, x0
    // 0x872efc: r0 = first()
    //     0x872efc: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872f00: mov             x3, x0
    // 0x872f04: r2 = Null
    //     0x872f04: mov             x2, NULL
    // 0x872f08: r1 = Null
    //     0x872f08: mov             x1, NULL
    // 0x872f0c: stur            x3, [fp, #-0x10]
    // 0x872f10: r4 = 59
    //     0x872f10: movz            x4, #0x3b
    // 0x872f14: branchIfSmi(r0, 0x872f24)
    //     0x872f14: tbz             w0, #0, #0x872f24
    //     0x872f18: nop             
    // 0x872f1c: r4 = LoadClassIdInstr(r0)
    //     0x872f1c: ldur            x4, [x0, #-1]
    //     0x872f20: ubfx            x4, x4, #0xc, #0x14
    // 0x872f24: sub             x4, x4, #0x5d
    // 0x872f28: cmp             x4, #1
    // 0x872f2c: b.ls            #0x872f44
    // 0x872f30: nop             
    // 0x872f34: r8 = String
    //     0x872f34: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x872f38: r3 = Null
    //     0x872f38: add             x3, PP, #0x10, lsl #12  ; [pp+0x10ee0] Null
    //     0x872f3c: ldr             x3, [x3, #0xee0]
    // 0x872f40: r0 = String()
    //     0x872f40: bl              #0x1523244  ; IsType_String_Stub
    // 0x872f44: ldur            x0, [fp, #-0x10]
    // 0x872f48: b               #0x8838b4
    // 0x872f4c: ldur            x0, [fp, #-8]
    // 0x872f50: b               #0x8838b4
    // 0x872f54: r16 = "mysteryCard"
    //     0x872f54: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ef0] "mysteryCard"
    //     0x872f58: ldr             x16, [x16, #0xef0]
    // 0x872f5c: ldur            lr, [fp, #-0x28]
    // 0x872f60: stp             lr, x16, [SP]
    // 0x872f64: r0 = ==()
    //     0x872f64: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x872f68: tbnz            w0, #4, #0x873044
    // 0x872f6c: nop             
    // 0x872f70: r1 = <CardRarity>
    //     0x872f70: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x872f74: ldr             x1, [x1, #0x518]
    // 0x872f78: r2 = Instance_CardRarity
    //     0x872f78: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ef8] Obj!CardRarity@ec84a1
    //     0x872f7c: ldr             x2, [x2, #0xef8]
    // 0x872f80: r3 = Instance_CardRarity
    //     0x872f80: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f00] Obj!CardRarity@ec8481
    //     0x872f84: ldr             x3, [x3, #0xf00]
    // 0x872f88: r5 = Instance_CardRarity
    //     0x872f88: add             x5, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x872f8c: ldr             x5, [x5, #0xf08]
    // 0x872f90: r6 = Instance_CardRarity
    //     0x872f90: add             x6, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x872f94: ldr             x6, [x6, #0xf10]
    // 0x872f98: r0 = _GrowableList._literal4()
    //     0x872f98: bl              #0x7d1478  ; [dart:core] _GrowableList::_GrowableList._literal4
    // 0x872f9c: stur            x0, [fp, #-8]
    // 0x872fa0: r0 = cardList()
    //     0x872fa0: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x872fa4: mov             x1, x0
    // 0x872fa8: ldur            x2, [fp, #-8]
    // 0x872fac: r0 = getCardListByRarity()
    //     0x872fac: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x872fb0: mov             x1, x0
    // 0x872fb4: stur            x0, [fp, #-8]
    // 0x872fb8: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x872fb8: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x872fbc: r0 = filterUnobtainedCard()
    //     0x872fbc: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x872fc0: mov             x1, x0
    // 0x872fc4: r0 = isNotEmpty()
    //     0x872fc4: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x872fc8: tbnz            w0, #4, #0x873038
    // 0x872fcc: nop             
    // 0x872fd0: ldur            x1, [fp, #-8]
    // 0x872fd4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x872fd4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x872fd8: r0 = filterUnobtainedCard()
    //     0x872fd8: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x872fdc: mov             x1, x0
    // 0x872fe0: r0 = shuffle()
    //     0x872fe0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x872fe4: mov             x1, x0
    // 0x872fe8: r0 = first()
    //     0x872fe8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x872fec: mov             x3, x0
    // 0x872ff0: r2 = Null
    //     0x872ff0: mov             x2, NULL
    // 0x872ff4: r1 = Null
    //     0x872ff4: mov             x1, NULL
    // 0x872ff8: stur            x3, [fp, #-8]
    // 0x872ffc: r4 = 59
    //     0x872ffc: movz            x4, #0x3b
    // 0x873000: branchIfSmi(r0, 0x873010)
    //     0x873000: tbz             w0, #0, #0x873010
    //     0x873004: nop             
    // 0x873008: r4 = LoadClassIdInstr(r0)
    //     0x873008: ldur            x4, [x0, #-1]
    //     0x87300c: ubfx            x4, x4, #0xc, #0x14
    // 0x873010: sub             x4, x4, #0x5d
    // 0x873014: cmp             x4, #1
    // 0x873018: b.ls            #0x873030
    // 0x87301c: nop             
    // 0x873020: r8 = String
    //     0x873020: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x873024: r3 = Null
    //     0x873024: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f18] Null
    //     0x873028: ldr             x3, [x3, #0xf18]
    // 0x87302c: r0 = String()
    //     0x87302c: bl              #0x1523244  ; IsType_String_Stub
    // 0x873030: ldur            x0, [fp, #-8]
    // 0x873034: b               #0x8838b4
    // 0x873038: r0 = "stroke"
    //     0x873038: add             x0, PP, #0xf, lsl #12  ; [pp+0xf2d0] "stroke"
    //     0x87303c: ldr             x0, [x0, #0x2d0]
    // 0x873040: b               #0x8838b4
    // 0x873044: r16 = "angCard"
    //     0x873044: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f28] "angCard"
    //     0x873048: ldr             x16, [x16, #0xf28]
    // 0x87304c: ldur            lr, [fp, #-0x28]
    // 0x873050: stp             lr, x16, [SP]
    // 0x873054: r0 = ==()
    //     0x873054: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873058: tbnz            w0, #4, #0x8730ec
    // 0x87305c: nop             
    // 0x873060: r1 = <CardRarity>
    //     0x873060: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x873064: ldr             x1, [x1, #0x518]
    // 0x873068: r2 = Instance_CardRarity
    //     0x873068: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x87306c: ldr             x2, [x2, #0xf08]
    // 0x873070: r3 = Instance_CardRarity
    //     0x873070: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x873074: ldr             x3, [x3, #0xf10]
    // 0x873078: r0 = _GrowableList._literal2()
    //     0x873078: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x87307c: stur            x0, [fp, #-8]
    // 0x873080: r0 = cardList()
    //     0x873080: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x873084: mov             x1, x0
    // 0x873088: ldur            x2, [fp, #-8]
    // 0x87308c: r0 = getCardListByRarity()
    //     0x87308c: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x873090: mov             x1, x0
    // 0x873094: r0 = shuffle()
    //     0x873094: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873098: mov             x1, x0
    // 0x87309c: r0 = first()
    //     0x87309c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8730a0: mov             x3, x0
    // 0x8730a4: r2 = Null
    //     0x8730a4: mov             x2, NULL
    // 0x8730a8: r1 = Null
    //     0x8730a8: mov             x1, NULL
    // 0x8730ac: stur            x3, [fp, #-8]
    // 0x8730b0: r4 = 59
    //     0x8730b0: movz            x4, #0x3b
    // 0x8730b4: branchIfSmi(r0, 0x8730c4)
    //     0x8730b4: tbz             w0, #0, #0x8730c4
    //     0x8730b8: nop             
    // 0x8730bc: r4 = LoadClassIdInstr(r0)
    //     0x8730bc: ldur            x4, [x0, #-1]
    //     0x8730c0: ubfx            x4, x4, #0xc, #0x14
    // 0x8730c4: sub             x4, x4, #0x5d
    // 0x8730c8: cmp             x4, #1
    // 0x8730cc: b.ls            #0x8730e4
    // 0x8730d0: nop             
    // 0x8730d4: r8 = String
    //     0x8730d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8730d8: r3 = Null
    //     0x8730d8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f30] Null
    //     0x8730dc: ldr             x3, [x3, #0xf30]
    // 0x8730e0: r0 = String()
    //     0x8730e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8730e4: ldur            x0, [fp, #-8]
    // 0x8730e8: b               #0x8838b4
    // 0x8730ec: r16 = "angGear"
    //     0x8730ec: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f40] "angGear"
    //     0x8730f0: ldr             x16, [x16, #0xf40]
    // 0x8730f4: ldur            lr, [fp, #-0x28]
    // 0x8730f8: stp             lr, x16, [SP]
    // 0x8730fc: r0 = ==()
    //     0x8730fc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873100: tbnz            w0, #4, #0x873214
    // 0x873104: nop             
    // 0x873108: r0 = racketList()
    //     0x873108: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x87310c: stur            x0, [fp, #-8]
    // 0x873110: r0 = shoeList()
    //     0x873110: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x873114: ldur            x1, [fp, #-8]
    // 0x873118: mov             x2, x0
    // 0x87311c: r0 = +()
    //     0x87311c: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873120: stur            x0, [fp, #-8]
    // 0x873124: r0 = accessoryList()
    //     0x873124: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x873128: ldur            x1, [fp, #-8]
    // 0x87312c: mov             x2, x0
    // 0x873130: r0 = +()
    //     0x873130: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873134: mov             x1, x0
    // 0x873138: r0 = shuffle()
    //     0x873138: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87313c: mov             x1, x0
    // 0x873140: r0 = iterator()
    //     0x873140: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x873144: stur            x0, [fp, #-8]
    // 0x873148: CheckStackOverflow
    //     0x873148: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x87314c: cmp             SP, x16
    //     0x873150: b.ls            #0x883924
    //     0x873154: nop             
    // 0x873158: mov             x1, x0
    // 0x87315c: r0 = moveNext()
    //     0x87315c: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x873160: tbnz            w0, #4, #0x873208
    // 0x873164: nop             
    // 0x873168: ldur            x1, [fp, #-8]
    // 0x87316c: r0 = current()
    //     0x87316c: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x873170: mov             x3, x0
    // 0x873174: r2 = Null
    //     0x873174: mov             x2, NULL
    // 0x873178: r1 = Null
    //     0x873178: mov             x1, NULL
    // 0x87317c: stur            x3, [fp, #-0x10]
    // 0x873180: r4 = 59
    //     0x873180: movz            x4, #0x3b
    // 0x873184: branchIfSmi(r0, 0x873194)
    //     0x873184: tbz             w0, #0, #0x873194
    //     0x873188: nop             
    // 0x87318c: r4 = LoadClassIdInstr(r0)
    //     0x87318c: ldur            x4, [x0, #-1]
    //     0x873190: ubfx            x4, x4, #0xc, #0x14
    // 0x873194: sub             x4, x4, #0x5d
    // 0x873198: cmp             x4, #1
    // 0x87319c: b.ls            #0x8731b4
    // 0x8731a0: nop             
    // 0x8731a4: r8 = String
    //     0x8731a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8731a8: r3 = Null
    //     0x8731a8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f48] Null
    //     0x8731ac: ldr             x3, [x3, #0xf48]
    // 0x8731b0: r0 = String()
    //     0x8731b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8731b4: ldur            x1, [fp, #-0x10]
    // 0x8731b8: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8731b8: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8731bc: r0 = getGear()
    //     0x8731bc: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x8731c0: LoadField: r1 = r0->field_1f
    //     0x8731c0: ldur            w1, [x0, #0x1f]
    // 0x8731c4: DecompressPointer r1
    //     0x8731c4: add             x1, x1, HEAP, lsl #32
    // 0x8731c8: r16 = Instance_GearRarity
    //     0x8731c8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x8731cc: ldr             x16, [x16, #0x670]
    // 0x8731d0: cmp             w1, w16
    // 0x8731d4: b.ne            #0x873200
    // 0x8731d8: nop             
    // 0x8731dc: ldur            x1, [fp, #-0x10]
    // 0x8731e0: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8731e0: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8731e4: r0 = getGear()
    //     0x8731e4: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x8731e8: LoadField: r1 = r0->field_9b
    //     0x8731e8: ldur            w1, [x0, #0x9b]
    // 0x8731ec: DecompressPointer r1
    //     0x8731ec: add             x1, x1, HEAP, lsl #32
    // 0x8731f0: tbz             w1, #4, #0x873200
    // 0x8731f4: nop             
    // 0x8731f8: ldur            x0, [fp, #-0x10]
    // 0x8731fc: b               #0x8838b4
    // 0x873200: ldur            x0, [fp, #-8]
    // 0x873204: b               #0x873148
    // 0x873208: r0 = "metalracket"
    //     0x873208: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x87320c: ldr             x0, [x0, #0x690]
    // 0x873210: b               #0x8838b4
    // 0x873214: r16 = "candyPacket"
    //     0x873214: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f58] "candyPacket"
    //     0x873218: ldr             x16, [x16, #0xf58]
    // 0x87321c: ldur            lr, [fp, #-0x28]
    // 0x873220: stp             lr, x16, [SP]
    // 0x873224: r0 = ==()
    //     0x873224: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873228: tbnz            w0, #4, #0x8732b4
    // 0x87322c: nop             
    // 0x873230: r16 = "staminapacket"
    //     0x873230: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f60] "staminapacket"
    //     0x873234: ldr             x16, [x16, #0xf60]
    // 0x873238: ldur            lr, [fp, #-0x20]
    // 0x87323c: stp             lr, x16, [SP]
    // 0x873240: r0 = ==()
    //     0x873240: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873244: tbnz            w0, #4, #0x873258
    // 0x873248: nop             
    // 0x87324c: r0 = "staminacandy"
    //     0x87324c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f68] "staminacandy"
    //     0x873250: ldr             x0, [x0, #0xf68]
    // 0x873254: b               #0x8838b4
    // 0x873258: r16 = "actionpacket"
    //     0x873258: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f70] "actionpacket"
    //     0x87325c: ldr             x16, [x16, #0xf70]
    // 0x873260: ldur            lr, [fp, #-0x20]
    // 0x873264: stp             lr, x16, [SP]
    // 0x873268: r0 = ==()
    //     0x873268: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87326c: tbnz            w0, #4, #0x873280
    // 0x873270: nop             
    // 0x873274: r0 = "actioncandy"
    //     0x873274: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f78] "actioncandy"
    //     0x873278: ldr             x0, [x0, #0xf78]
    // 0x87327c: b               #0x8838b4
    // 0x873280: r16 = "skillpacket"
    //     0x873280: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f80] "skillpacket"
    //     0x873284: ldr             x16, [x16, #0xf80]
    // 0x873288: ldur            lr, [fp, #-0x20]
    // 0x87328c: stp             lr, x16, [SP]
    // 0x873290: r0 = ==()
    //     0x873290: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873294: tbnz            w0, #4, #0x8732a8
    // 0x873298: nop             
    // 0x87329c: r0 = "skillcandy"
    //     0x87329c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f88] "skillcandy"
    //     0x8732a0: ldr             x0, [x0, #0xf88]
    // 0x8732a4: b               #0x8838b4
    // 0x8732a8: r0 = "staminacandy"
    //     0x8732a8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f68] "staminacandy"
    //     0x8732ac: ldr             x0, [x0, #0xf68]
    // 0x8732b0: b               #0x8838b4
    // 0x8732b4: r16 = "candyPacketPurchase"
    //     0x8732b4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f90] "candyPacketPurchase"
    //     0x8732b8: ldr             x16, [x16, #0xf90]
    // 0x8732bc: ldur            lr, [fp, #-0x28]
    // 0x8732c0: stp             lr, x16, [SP]
    // 0x8732c4: r0 = ==()
    //     0x8732c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8732c8: tbnz            w0, #4, #0x873354
    // 0x8732cc: nop             
    // 0x8732d0: r16 = "staminapacket"
    //     0x8732d0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f60] "staminapacket"
    //     0x8732d4: ldr             x16, [x16, #0xf60]
    // 0x8732d8: ldur            lr, [fp, #-0x20]
    // 0x8732dc: stp             lr, x16, [SP]
    // 0x8732e0: r0 = ==()
    //     0x8732e0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8732e4: tbnz            w0, #4, #0x8732f8
    // 0x8732e8: nop             
    // 0x8732ec: r0 = "staminaPacketPurchase"
    //     0x8732ec: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f98] "staminaPacketPurchase"
    //     0x8732f0: ldr             x0, [x0, #0xf98]
    // 0x8732f4: b               #0x8838b4
    // 0x8732f8: r16 = "actionpacket"
    //     0x8732f8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f70] "actionpacket"
    //     0x8732fc: ldr             x16, [x16, #0xf70]
    // 0x873300: ldur            lr, [fp, #-0x20]
    // 0x873304: stp             lr, x16, [SP]
    // 0x873308: r0 = ==()
    //     0x873308: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87330c: tbnz            w0, #4, #0x873320
    // 0x873310: nop             
    // 0x873314: r0 = "actionPacketPurchase"
    //     0x873314: add             x0, PP, #0x10, lsl #12  ; [pp+0x10fa0] "actionPacketPurchase"
    //     0x873318: ldr             x0, [x0, #0xfa0]
    // 0x87331c: b               #0x8838b4
    // 0x873320: r16 = "skillpacket"
    //     0x873320: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f80] "skillpacket"
    //     0x873324: ldr             x16, [x16, #0xf80]
    // 0x873328: ldur            lr, [fp, #-0x20]
    // 0x87332c: stp             lr, x16, [SP]
    // 0x873330: r0 = ==()
    //     0x873330: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873334: tbnz            w0, #4, #0x873348
    // 0x873338: nop             
    // 0x87333c: r0 = "skillPacketPurchase"
    //     0x87333c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10fa8] "skillPacketPurchase"
    //     0x873340: ldr             x0, [x0, #0xfa8]
    // 0x873344: b               #0x8838b4
    // 0x873348: r0 = "staminaPacketPurchase"
    //     0x873348: add             x0, PP, #0x10, lsl #12  ; [pp+0x10f98] "staminaPacketPurchase"
    //     0x87334c: ldr             x0, [x0, #0xf98]
    // 0x873350: b               #0x8838b4
    // 0x873354: r16 = "uncommonCard"
    //     0x873354: add             x16, PP, #0x10, lsl #12  ; [pp+0x10fb0] "uncommonCard"
    //     0x873358: ldr             x16, [x16, #0xfb0]
    // 0x87335c: ldur            lr, [fp, #-0x28]
    // 0x873360: stp             lr, x16, [SP]
    // 0x873364: r0 = ==()
    //     0x873364: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873368: tbnz            w0, #4, #0x87342c
    // 0x87336c: nop             
    // 0x873370: r1 = <CardRarity>
    //     0x873370: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x873374: ldr             x1, [x1, #0x518]
    // 0x873378: r2 = Instance_CardRarity
    //     0x873378: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f00] Obj!CardRarity@ec8481
    //     0x87337c: ldr             x2, [x2, #0xf00]
    // 0x873380: r0 = _GrowableList._literal1()
    //     0x873380: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x873384: stur            x0, [fp, #-8]
    // 0x873388: r0 = cardList()
    //     0x873388: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x87338c: mov             x1, x0
    // 0x873390: ldur            x2, [fp, #-8]
    // 0x873394: r0 = getCardListByRarity()
    //     0x873394: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x873398: mov             x1, x0
    // 0x87339c: stur            x0, [fp, #-8]
    // 0x8733a0: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8733a0: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8733a4: r0 = filterUnobtainedCard()
    //     0x8733a4: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x8733a8: mov             x1, x0
    // 0x8733ac: r0 = isNotEmpty()
    //     0x8733ac: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x8733b0: tbnz            w0, #4, #0x873420
    // 0x8733b4: nop             
    // 0x8733b8: ldur            x1, [fp, #-8]
    // 0x8733bc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8733bc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8733c0: r0 = filterUnobtainedCard()
    //     0x8733c0: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x8733c4: mov             x1, x0
    // 0x8733c8: r0 = shuffle()
    //     0x8733c8: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8733cc: mov             x1, x0
    // 0x8733d0: r0 = first()
    //     0x8733d0: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8733d4: mov             x3, x0
    // 0x8733d8: r2 = Null
    //     0x8733d8: mov             x2, NULL
    // 0x8733dc: r1 = Null
    //     0x8733dc: mov             x1, NULL
    // 0x8733e0: stur            x3, [fp, #-8]
    // 0x8733e4: r4 = 59
    //     0x8733e4: movz            x4, #0x3b
    // 0x8733e8: branchIfSmi(r0, 0x8733f8)
    //     0x8733e8: tbz             w0, #0, #0x8733f8
    //     0x8733ec: nop             
    // 0x8733f0: r4 = LoadClassIdInstr(r0)
    //     0x8733f0: ldur            x4, [x0, #-1]
    //     0x8733f4: ubfx            x4, x4, #0xc, #0x14
    // 0x8733f8: sub             x4, x4, #0x5d
    // 0x8733fc: cmp             x4, #1
    // 0x873400: b.ls            #0x873418
    // 0x873404: nop             
    // 0x873408: r8 = String
    //     0x873408: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87340c: r3 = Null
    //     0x87340c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10fb8] Null
    //     0x873410: ldr             x3, [x3, #0xfb8]
    // 0x873414: r0 = String()
    //     0x873414: bl              #0x1523244  ; IsType_String_Stub
    // 0x873418: ldur            x0, [fp, #-8]
    // 0x87341c: b               #0x8838b4
    // 0x873420: r0 = "halfsmash"
    //     0x873420: add             x0, PP, #0xf, lsl #12  ; [pp+0xf370] "halfsmash"
    //     0x873424: ldr             x0, [x0, #0x370]
    // 0x873428: b               #0x8838b4
    // 0x87342c: r16 = "rareCard"
    //     0x87342c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10fc8] "rareCard"
    //     0x873430: ldr             x16, [x16, #0xfc8]
    // 0x873434: ldur            lr, [fp, #-0x28]
    // 0x873438: stp             lr, x16, [SP]
    // 0x87343c: r0 = ==()
    //     0x87343c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873440: tbnz            w0, #4, #0x873504
    // 0x873444: nop             
    // 0x873448: r1 = <CardRarity>
    //     0x873448: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x87344c: ldr             x1, [x1, #0x518]
    // 0x873450: r2 = Instance_CardRarity
    //     0x873450: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x873454: ldr             x2, [x2, #0xf08]
    // 0x873458: r0 = _GrowableList._literal1()
    //     0x873458: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x87345c: stur            x0, [fp, #-8]
    // 0x873460: r0 = cardList()
    //     0x873460: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x873464: mov             x1, x0
    // 0x873468: ldur            x2, [fp, #-8]
    // 0x87346c: r0 = getCardListByRarity()
    //     0x87346c: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x873470: mov             x1, x0
    // 0x873474: stur            x0, [fp, #-8]
    // 0x873478: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873478: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87347c: r0 = filterUnobtainedCard()
    //     0x87347c: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873480: mov             x1, x0
    // 0x873484: r0 = isNotEmpty()
    //     0x873484: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x873488: tbnz            w0, #4, #0x8734f8
    // 0x87348c: nop             
    // 0x873490: ldur            x1, [fp, #-8]
    // 0x873494: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873494: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873498: r0 = filterUnobtainedCard()
    //     0x873498: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x87349c: mov             x1, x0
    // 0x8734a0: r0 = shuffle()
    //     0x8734a0: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8734a4: mov             x1, x0
    // 0x8734a8: r0 = first()
    //     0x8734a8: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8734ac: mov             x3, x0
    // 0x8734b0: r2 = Null
    //     0x8734b0: mov             x2, NULL
    // 0x8734b4: r1 = Null
    //     0x8734b4: mov             x1, NULL
    // 0x8734b8: stur            x3, [fp, #-8]
    // 0x8734bc: r4 = 59
    //     0x8734bc: movz            x4, #0x3b
    // 0x8734c0: branchIfSmi(r0, 0x8734d0)
    //     0x8734c0: tbz             w0, #0, #0x8734d0
    //     0x8734c4: nop             
    // 0x8734c8: r4 = LoadClassIdInstr(r0)
    //     0x8734c8: ldur            x4, [x0, #-1]
    //     0x8734cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8734d0: sub             x4, x4, #0x5d
    // 0x8734d4: cmp             x4, #1
    // 0x8734d8: b.ls            #0x8734f0
    // 0x8734dc: nop             
    // 0x8734e0: r8 = String
    //     0x8734e0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8734e4: r3 = Null
    //     0x8734e4: add             x3, PP, #0x10, lsl #12  ; [pp+0x10fd0] Null
    //     0x8734e8: ldr             x3, [x3, #0xfd0]
    // 0x8734ec: r0 = String()
    //     0x8734ec: bl              #0x1523244  ; IsType_String_Stub
    // 0x8734f0: ldur            x0, [fp, #-8]
    // 0x8734f4: b               #0x8838b4
    // 0x8734f8: r0 = "hairpin"
    //     0x8734f8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf418] "hairpin"
    //     0x8734fc: ldr             x0, [x0, #0x418]
    // 0x873500: b               #0x8838b4
    // 0x873504: r16 = "superrareCard"
    //     0x873504: add             x16, PP, #0x10, lsl #12  ; [pp+0x10fe0] "superrareCard"
    //     0x873508: ldr             x16, [x16, #0xfe0]
    // 0x87350c: ldur            lr, [fp, #-0x28]
    // 0x873510: stp             lr, x16, [SP]
    // 0x873514: r0 = ==()
    //     0x873514: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873518: tbnz            w0, #4, #0x8735dc
    // 0x87351c: nop             
    // 0x873520: r1 = <CardRarity>
    //     0x873520: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x873524: ldr             x1, [x1, #0x518]
    // 0x873528: r2 = Instance_CardRarity
    //     0x873528: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x87352c: ldr             x2, [x2, #0xf10]
    // 0x873530: r0 = _GrowableList._literal1()
    //     0x873530: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x873534: stur            x0, [fp, #-8]
    // 0x873538: r0 = cardList()
    //     0x873538: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x87353c: mov             x1, x0
    // 0x873540: ldur            x2, [fp, #-8]
    // 0x873544: r0 = getCardListByRarity()
    //     0x873544: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x873548: mov             x1, x0
    // 0x87354c: stur            x0, [fp, #-8]
    // 0x873550: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873550: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873554: r0 = filterUnobtainedCard()
    //     0x873554: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873558: mov             x1, x0
    // 0x87355c: r0 = isNotEmpty()
    //     0x87355c: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x873560: tbnz            w0, #4, #0x8735d0
    // 0x873564: nop             
    // 0x873568: ldur            x1, [fp, #-8]
    // 0x87356c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87356c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873570: r0 = filterUnobtainedCard()
    //     0x873570: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873574: mov             x1, x0
    // 0x873578: r0 = shuffle()
    //     0x873578: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87357c: mov             x1, x0
    // 0x873580: r0 = first()
    //     0x873580: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x873584: mov             x3, x0
    // 0x873588: r2 = Null
    //     0x873588: mov             x2, NULL
    // 0x87358c: r1 = Null
    //     0x87358c: mov             x1, NULL
    // 0x873590: stur            x3, [fp, #-8]
    // 0x873594: r4 = 59
    //     0x873594: movz            x4, #0x3b
    // 0x873598: branchIfSmi(r0, 0x8735a8)
    //     0x873598: tbz             w0, #0, #0x8735a8
    //     0x87359c: nop             
    // 0x8735a0: r4 = LoadClassIdInstr(r0)
    //     0x8735a0: ldur            x4, [x0, #-1]
    //     0x8735a4: ubfx            x4, x4, #0xc, #0x14
    // 0x8735a8: sub             x4, x4, #0x5d
    // 0x8735ac: cmp             x4, #1
    // 0x8735b0: b.ls            #0x8735c8
    // 0x8735b4: nop             
    // 0x8735b8: r8 = String
    //     0x8735b8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8735bc: r3 = Null
    //     0x8735bc: add             x3, PP, #0x10, lsl #12  ; [pp+0x10fe8] Null
    //     0x8735c0: ldr             x3, [x3, #0xfe8]
    // 0x8735c4: r0 = String()
    //     0x8735c4: bl              #0x1523244  ; IsType_String_Stub
    // 0x8735c8: ldur            x0, [fp, #-8]
    // 0x8735cc: b               #0x8838b4
    // 0x8735d0: r0 = "stroke"
    //     0x8735d0: add             x0, PP, #0xf, lsl #12  ; [pp+0xf2d0] "stroke"
    //     0x8735d4: ldr             x0, [x0, #0x2d0]
    // 0x8735d8: b               #0x8838b4
    // 0x8735dc: r16 = "mythicalCard"
    //     0x8735dc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ff8] "mythicalCard"
    //     0x8735e0: ldr             x16, [x16, #0xff8]
    // 0x8735e4: ldur            lr, [fp, #-0x28]
    // 0x8735e8: stp             lr, x16, [SP]
    // 0x8735ec: r0 = ==()
    //     0x8735ec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8735f0: tbnz            w0, #4, #0x8736b4
    // 0x8735f4: nop             
    // 0x8735f8: r1 = <CardRarity>
    //     0x8735f8: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x8735fc: ldr             x1, [x1, #0x518]
    // 0x873600: r2 = Instance_CardRarity
    //     0x873600: add             x2, PP, #0x10, lsl #12  ; [pp+0x10558] Obj!CardRarity@ec84c1
    //     0x873604: ldr             x2, [x2, #0x558]
    // 0x873608: r0 = _GrowableList._literal1()
    //     0x873608: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x87360c: stur            x0, [fp, #-8]
    // 0x873610: r0 = cardList()
    //     0x873610: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x873614: mov             x1, x0
    // 0x873618: ldur            x2, [fp, #-8]
    // 0x87361c: r0 = getCardListByRarity()
    //     0x87361c: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x873620: mov             x1, x0
    // 0x873624: stur            x0, [fp, #-8]
    // 0x873628: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873628: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87362c: r0 = filterUnobtainedCard()
    //     0x87362c: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873630: mov             x1, x0
    // 0x873634: r0 = isNotEmpty()
    //     0x873634: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x873638: tbnz            w0, #4, #0x8736a8
    // 0x87363c: nop             
    // 0x873640: ldur            x1, [fp, #-8]
    // 0x873644: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873644: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873648: r0 = filterUnobtainedCard()
    //     0x873648: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x87364c: mov             x1, x0
    // 0x873650: r0 = shuffle()
    //     0x873650: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873654: mov             x1, x0
    // 0x873658: r0 = first()
    //     0x873658: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x87365c: mov             x3, x0
    // 0x873660: r2 = Null
    //     0x873660: mov             x2, NULL
    // 0x873664: r1 = Null
    //     0x873664: mov             x1, NULL
    // 0x873668: stur            x3, [fp, #-8]
    // 0x87366c: r4 = 59
    //     0x87366c: movz            x4, #0x3b
    // 0x873670: branchIfSmi(r0, 0x873680)
    //     0x873670: tbz             w0, #0, #0x873680
    //     0x873674: nop             
    // 0x873678: r4 = LoadClassIdInstr(r0)
    //     0x873678: ldur            x4, [x0, #-1]
    //     0x87367c: ubfx            x4, x4, #0xc, #0x14
    // 0x873680: sub             x4, x4, #0x5d
    // 0x873684: cmp             x4, #1
    // 0x873688: b.ls            #0x8736a0
    // 0x87368c: nop             
    // 0x873690: r8 = String
    //     0x873690: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x873694: r3 = Null
    //     0x873694: add             x3, PP, #0x11, lsl #12  ; [pp+0x11000] Null
    //     0x873698: ldr             x3, [x3]
    // 0x87369c: r0 = String()
    //     0x87369c: bl              #0x1523244  ; IsType_String_Stub
    // 0x8736a0: ldur            x0, [fp, #-8]
    // 0x8736a4: b               #0x8838b4
    // 0x8736a8: r0 = "evergreen"
    //     0x8736a8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf5d0] "evergreen"
    //     0x8736ac: ldr             x0, [x0, #0x5d0]
    // 0x8736b0: b               #0x8838b4
    // 0x8736b4: r16 = "legendaryCard"
    //     0x8736b4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11010] "legendaryCard"
    //     0x8736b8: ldr             x16, [x16, #0x10]
    // 0x8736bc: ldur            lr, [fp, #-0x28]
    // 0x8736c0: stp             lr, x16, [SP]
    // 0x8736c4: r0 = ==()
    //     0x8736c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8736c8: tbnz            w0, #4, #0x87378c
    // 0x8736cc: nop             
    // 0x8736d0: r1 = <CardRarity>
    //     0x8736d0: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x8736d4: ldr             x1, [x1, #0x518]
    // 0x8736d8: r2 = Instance_CardRarity
    //     0x8736d8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10520] Obj!CardRarity@ec84e1
    //     0x8736dc: ldr             x2, [x2, #0x520]
    // 0x8736e0: r0 = _GrowableList._literal1()
    //     0x8736e0: bl              #0x7d0e00  ; [dart:core] _GrowableList::_GrowableList._literal1
    // 0x8736e4: stur            x0, [fp, #-8]
    // 0x8736e8: r0 = cardList()
    //     0x8736e8: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x8736ec: mov             x1, x0
    // 0x8736f0: ldur            x2, [fp, #-8]
    // 0x8736f4: r0 = getCardListByRarity()
    //     0x8736f4: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x8736f8: mov             x1, x0
    // 0x8736fc: stur            x0, [fp, #-8]
    // 0x873700: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873700: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873704: r0 = filterUnobtainedCard()
    //     0x873704: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873708: mov             x1, x0
    // 0x87370c: r0 = isNotEmpty()
    //     0x87370c: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x873710: tbnz            w0, #4, #0x873780
    // 0x873714: nop             
    // 0x873718: ldur            x1, [fp, #-8]
    // 0x87371c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87371c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873720: r0 = filterUnobtainedCard()
    //     0x873720: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x873724: mov             x1, x0
    // 0x873728: r0 = shuffle()
    //     0x873728: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x87372c: mov             x1, x0
    // 0x873730: r0 = first()
    //     0x873730: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x873734: mov             x3, x0
    // 0x873738: r2 = Null
    //     0x873738: mov             x2, NULL
    // 0x87373c: r1 = Null
    //     0x87373c: mov             x1, NULL
    // 0x873740: stur            x3, [fp, #-8]
    // 0x873744: r4 = 59
    //     0x873744: movz            x4, #0x3b
    // 0x873748: branchIfSmi(r0, 0x873758)
    //     0x873748: tbz             w0, #0, #0x873758
    //     0x87374c: nop             
    // 0x873750: r4 = LoadClassIdInstr(r0)
    //     0x873750: ldur            x4, [x0, #-1]
    //     0x873754: ubfx            x4, x4, #0xc, #0x14
    // 0x873758: sub             x4, x4, #0x5d
    // 0x87375c: cmp             x4, #1
    // 0x873760: b.ls            #0x873778
    // 0x873764: nop             
    // 0x873768: r8 = String
    //     0x873768: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87376c: r3 = Null
    //     0x87376c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11018] Null
    //     0x873770: ldr             x3, [x3, #0x18]
    // 0x873774: r0 = String()
    //     0x873774: bl              #0x1523244  ; IsType_String_Stub
    // 0x873778: ldur            x0, [fp, #-8]
    // 0x87377c: b               #0x8838b4
    // 0x873780: r0 = "lastresort"
    //     0x873780: add             x0, PP, #0xf, lsl #12  ; [pp+0xf8f8] "lastresort"
    //     0x873784: ldr             x0, [x0, #0x8f8]
    // 0x873788: b               #0x8838b4
    // 0x87378c: r16 = "rareGear"
    //     0x87378c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11028] "rareGear"
    //     0x873790: ldr             x16, [x16, #0x28]
    // 0x873794: ldur            lr, [fp, #-0x28]
    // 0x873798: stp             lr, x16, [SP]
    // 0x87379c: r0 = ==()
    //     0x87379c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8737a0: tbnz            w0, #4, #0x873928
    // 0x8737a4: nop             
    // 0x8737a8: r0 = racketList()
    //     0x8737a8: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x8737ac: stur            x0, [fp, #-8]
    // 0x8737b0: r0 = shoeList()
    //     0x8737b0: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x8737b4: ldur            x1, [fp, #-8]
    // 0x8737b8: mov             x2, x0
    // 0x8737bc: r0 = +()
    //     0x8737bc: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x8737c0: stur            x0, [fp, #-8]
    // 0x8737c4: r0 = accessoryList()
    //     0x8737c4: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x8737c8: ldur            x1, [fp, #-8]
    // 0x8737cc: mov             x2, x0
    // 0x8737d0: r0 = +()
    //     0x8737d0: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x8737d4: mov             x1, x0
    // 0x8737d8: r0 = shuffle()
    //     0x8737d8: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8737dc: mov             x1, x0
    // 0x8737e0: r0 = iterator()
    //     0x8737e0: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x8737e4: stur            x0, [fp, #-8]
    // 0x8737e8: CheckStackOverflow
    //     0x8737e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8737ec: cmp             SP, x16
    //     0x8737f0: b.ls            #0x88392c
    //     0x8737f4: nop             
    // 0x8737f8: mov             x1, x0
    // 0x8737fc: r0 = moveNext()
    //     0x8737fc: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x873800: tbnz            w0, #4, #0x87391c
    // 0x873804: nop             
    // 0x873808: ldur            x1, [fp, #-8]
    // 0x87380c: r0 = current()
    //     0x87380c: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x873810: mov             x3, x0
    // 0x873814: r2 = Null
    //     0x873814: mov             x2, NULL
    // 0x873818: r1 = Null
    //     0x873818: mov             x1, NULL
    // 0x87381c: stur            x3, [fp, #-0x10]
    // 0x873820: r4 = 59
    //     0x873820: movz            x4, #0x3b
    // 0x873824: branchIfSmi(r0, 0x873834)
    //     0x873824: tbz             w0, #0, #0x873834
    //     0x873828: nop             
    // 0x87382c: r4 = LoadClassIdInstr(r0)
    //     0x87382c: ldur            x4, [x0, #-1]
    //     0x873830: ubfx            x4, x4, #0xc, #0x14
    // 0x873834: sub             x4, x4, #0x5d
    // 0x873838: cmp             x4, #1
    // 0x87383c: b.ls            #0x873854
    // 0x873840: nop             
    // 0x873844: r8 = String
    //     0x873844: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x873848: r3 = Null
    //     0x873848: add             x3, PP, #0x11, lsl #12  ; [pp+0x11030] Null
    //     0x87384c: ldr             x3, [x3, #0x30]
    // 0x873850: r0 = String()
    //     0x873850: bl              #0x1523244  ; IsType_String_Stub
    // 0x873854: ldur            x1, [fp, #-0x10]
    // 0x873858: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873858: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87385c: r0 = getGear()
    //     0x87385c: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873860: LoadField: r1 = r0->field_1f
    //     0x873860: ldur            w1, [x0, #0x1f]
    // 0x873864: DecompressPointer r1
    //     0x873864: add             x1, x1, HEAP, lsl #32
    // 0x873868: r16 = Instance_GearRarity
    //     0x873868: add             x16, PP, #0x10, lsl #12  ; [pp+0x10678] Obj!GearRarity@ec85c1
    //     0x87386c: ldr             x16, [x16, #0x678]
    // 0x873870: cmp             w1, w16
    // 0x873874: b.ne            #0x873914
    // 0x873878: nop             
    // 0x87387c: r0 = LoadStaticField(0xb54)
    //     0x87387c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873880: ldr             x0, [x0, #0x16a8]
    // 0x873884: cmp             w0, NULL
    // 0x873888: b.ne            #0x873898
    // 0x87388c: nop             
    // 0x873890: r0 = Null
    //     0x873890: mov             x0, NULL
    // 0x873894: b               #0x8738bc
    // 0x873898: r17 = 323
    //     0x873898: movz            x17, #0x143
    // 0x87389c: ldr             w1, [x0, x17]
    // 0x8738a0: DecompressPointer r1
    //     0x8738a0: add             x1, x1, HEAP, lsl #32
    // 0x8738a4: r0 = LoadClassIdInstr(r1)
    //     0x8738a4: ldur            x0, [x1, #-1]
    //     0x8738a8: ubfx            x0, x0, #0xc, #0x14
    // 0x8738ac: ldur            x2, [fp, #-0x10]
    // 0x8738b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8738b0: sub             lr, x0, #0xb4
    //     0x8738b4: ldr             lr, [x21, lr, lsl #3]
    //     0x8738b8: blr             lr
    // 0x8738bc: r1 = 59
    //     0x8738bc: movz            x1, #0x3b
    // 0x8738c0: branchIfSmi(r0, 0x8738d0)
    //     0x8738c0: tbz             w0, #0, #0x8738d0
    //     0x8738c4: nop             
    // 0x8738c8: r1 = LoadClassIdInstr(r0)
    //     0x8738c8: ldur            x1, [x0, #-1]
    //     0x8738cc: ubfx            x1, x1, #0xc, #0x14
    // 0x8738d0: r16 = true
    //     0x8738d0: add             x16, NULL, #0x20  ; true
    // 0x8738d4: stp             x16, x0, [SP]
    // 0x8738d8: mov             x0, x1
    // 0x8738dc: mov             lr, x0
    // 0x8738e0: ldr             lr, [x21, lr, lsl #3]
    // 0x8738e4: blr             lr
    // 0x8738e8: tbz             w0, #4, #0x873914
    // 0x8738ec: nop             
    // 0x8738f0: ldur            x1, [fp, #-0x10]
    // 0x8738f4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8738f4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8738f8: r0 = getGear()
    //     0x8738f8: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x8738fc: LoadField: r1 = r0->field_9b
    //     0x8738fc: ldur            w1, [x0, #0x9b]
    // 0x873900: DecompressPointer r1
    //     0x873900: add             x1, x1, HEAP, lsl #32
    // 0x873904: tbz             w1, #4, #0x873914
    // 0x873908: nop             
    // 0x87390c: ldur            x0, [fp, #-0x10]
    // 0x873910: b               #0x8838b4
    // 0x873914: ldur            x0, [fp, #-8]
    // 0x873918: b               #0x8737e8
    // 0x87391c: r0 = "metalracket"
    //     0x87391c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x873920: ldr             x0, [x0, #0x690]
    // 0x873924: b               #0x8838b4
    // 0x873928: r16 = "superrareGear"
    //     0x873928: add             x16, PP, #0x11, lsl #12  ; [pp+0x11040] "superrareGear"
    //     0x87392c: ldr             x16, [x16, #0x40]
    // 0x873930: ldur            lr, [fp, #-0x28]
    // 0x873934: stp             lr, x16, [SP]
    // 0x873938: r0 = ==()
    //     0x873938: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87393c: tbnz            w0, #4, #0x873ac4
    // 0x873940: nop             
    // 0x873944: r0 = racketList()
    //     0x873944: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x873948: stur            x0, [fp, #-8]
    // 0x87394c: r0 = shoeList()
    //     0x87394c: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x873950: ldur            x1, [fp, #-8]
    // 0x873954: mov             x2, x0
    // 0x873958: r0 = +()
    //     0x873958: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x87395c: stur            x0, [fp, #-8]
    // 0x873960: r0 = accessoryList()
    //     0x873960: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x873964: ldur            x1, [fp, #-8]
    // 0x873968: mov             x2, x0
    // 0x87396c: r0 = +()
    //     0x87396c: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873970: mov             x1, x0
    // 0x873974: r0 = shuffle()
    //     0x873974: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873978: mov             x1, x0
    // 0x87397c: r0 = iterator()
    //     0x87397c: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x873980: stur            x0, [fp, #-8]
    // 0x873984: CheckStackOverflow
    //     0x873984: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x873988: cmp             SP, x16
    //     0x87398c: b.ls            #0x883934
    //     0x873990: nop             
    // 0x873994: mov             x1, x0
    // 0x873998: r0 = moveNext()
    //     0x873998: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x87399c: tbnz            w0, #4, #0x873ab8
    // 0x8739a0: nop             
    // 0x8739a4: ldur            x1, [fp, #-8]
    // 0x8739a8: r0 = current()
    //     0x8739a8: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x8739ac: mov             x3, x0
    // 0x8739b0: r2 = Null
    //     0x8739b0: mov             x2, NULL
    // 0x8739b4: r1 = Null
    //     0x8739b4: mov             x1, NULL
    // 0x8739b8: stur            x3, [fp, #-0x10]
    // 0x8739bc: r4 = 59
    //     0x8739bc: movz            x4, #0x3b
    // 0x8739c0: branchIfSmi(r0, 0x8739d0)
    //     0x8739c0: tbz             w0, #0, #0x8739d0
    //     0x8739c4: nop             
    // 0x8739c8: r4 = LoadClassIdInstr(r0)
    //     0x8739c8: ldur            x4, [x0, #-1]
    //     0x8739cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8739d0: sub             x4, x4, #0x5d
    // 0x8739d4: cmp             x4, #1
    // 0x8739d8: b.ls            #0x8739f0
    // 0x8739dc: nop             
    // 0x8739e0: r8 = String
    //     0x8739e0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8739e4: r3 = Null
    //     0x8739e4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11048] Null
    //     0x8739e8: ldr             x3, [x3, #0x48]
    // 0x8739ec: r0 = String()
    //     0x8739ec: bl              #0x1523244  ; IsType_String_Stub
    // 0x8739f0: ldur            x1, [fp, #-0x10]
    // 0x8739f4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8739f4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8739f8: r0 = getGear()
    //     0x8739f8: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x8739fc: LoadField: r1 = r0->field_1f
    //     0x8739fc: ldur            w1, [x0, #0x1f]
    // 0x873a00: DecompressPointer r1
    //     0x873a00: add             x1, x1, HEAP, lsl #32
    // 0x873a04: r16 = Instance_GearRarity
    //     0x873a04: add             x16, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x873a08: ldr             x16, [x16, #0x670]
    // 0x873a0c: cmp             w1, w16
    // 0x873a10: b.ne            #0x873ab0
    // 0x873a14: nop             
    // 0x873a18: r0 = LoadStaticField(0xb54)
    //     0x873a18: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873a1c: ldr             x0, [x0, #0x16a8]
    // 0x873a20: cmp             w0, NULL
    // 0x873a24: b.ne            #0x873a34
    // 0x873a28: nop             
    // 0x873a2c: r0 = Null
    //     0x873a2c: mov             x0, NULL
    // 0x873a30: b               #0x873a58
    // 0x873a34: r17 = 323
    //     0x873a34: movz            x17, #0x143
    // 0x873a38: ldr             w1, [x0, x17]
    // 0x873a3c: DecompressPointer r1
    //     0x873a3c: add             x1, x1, HEAP, lsl #32
    // 0x873a40: r0 = LoadClassIdInstr(r1)
    //     0x873a40: ldur            x0, [x1, #-1]
    //     0x873a44: ubfx            x0, x0, #0xc, #0x14
    // 0x873a48: ldur            x2, [fp, #-0x10]
    // 0x873a4c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x873a4c: sub             lr, x0, #0xb4
    //     0x873a50: ldr             lr, [x21, lr, lsl #3]
    //     0x873a54: blr             lr
    // 0x873a58: r1 = 59
    //     0x873a58: movz            x1, #0x3b
    // 0x873a5c: branchIfSmi(r0, 0x873a6c)
    //     0x873a5c: tbz             w0, #0, #0x873a6c
    //     0x873a60: nop             
    // 0x873a64: r1 = LoadClassIdInstr(r0)
    //     0x873a64: ldur            x1, [x0, #-1]
    //     0x873a68: ubfx            x1, x1, #0xc, #0x14
    // 0x873a6c: r16 = true
    //     0x873a6c: add             x16, NULL, #0x20  ; true
    // 0x873a70: stp             x16, x0, [SP]
    // 0x873a74: mov             x0, x1
    // 0x873a78: mov             lr, x0
    // 0x873a7c: ldr             lr, [x21, lr, lsl #3]
    // 0x873a80: blr             lr
    // 0x873a84: tbz             w0, #4, #0x873ab0
    // 0x873a88: nop             
    // 0x873a8c: ldur            x1, [fp, #-0x10]
    // 0x873a90: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873a90: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873a94: r0 = getGear()
    //     0x873a94: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873a98: LoadField: r1 = r0->field_9b
    //     0x873a98: ldur            w1, [x0, #0x9b]
    // 0x873a9c: DecompressPointer r1
    //     0x873a9c: add             x1, x1, HEAP, lsl #32
    // 0x873aa0: tbz             w1, #4, #0x873ab0
    // 0x873aa4: nop             
    // 0x873aa8: ldur            x0, [fp, #-0x10]
    // 0x873aac: b               #0x8838b4
    // 0x873ab0: ldur            x0, [fp, #-8]
    // 0x873ab4: b               #0x873984
    // 0x873ab8: r0 = "metalracket"
    //     0x873ab8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x873abc: ldr             x0, [x0, #0x690]
    // 0x873ac0: b               #0x8838b4
    // 0x873ac4: r16 = "mythicalGear"
    //     0x873ac4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11058] "mythicalGear"
    //     0x873ac8: ldr             x16, [x16, #0x58]
    // 0x873acc: ldur            lr, [fp, #-0x28]
    // 0x873ad0: stp             lr, x16, [SP]
    // 0x873ad4: r0 = ==()
    //     0x873ad4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873ad8: tbnz            w0, #4, #0x873c60
    // 0x873adc: nop             
    // 0x873ae0: r0 = racketList()
    //     0x873ae0: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x873ae4: stur            x0, [fp, #-8]
    // 0x873ae8: r0 = shoeList()
    //     0x873ae8: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x873aec: ldur            x1, [fp, #-8]
    // 0x873af0: mov             x2, x0
    // 0x873af4: r0 = +()
    //     0x873af4: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873af8: stur            x0, [fp, #-8]
    // 0x873afc: r0 = accessoryList()
    //     0x873afc: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x873b00: ldur            x1, [fp, #-8]
    // 0x873b04: mov             x2, x0
    // 0x873b08: r0 = +()
    //     0x873b08: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873b0c: mov             x1, x0
    // 0x873b10: r0 = shuffle()
    //     0x873b10: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873b14: mov             x1, x0
    // 0x873b18: r0 = iterator()
    //     0x873b18: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x873b1c: stur            x0, [fp, #-8]
    // 0x873b20: CheckStackOverflow
    //     0x873b20: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x873b24: cmp             SP, x16
    //     0x873b28: b.ls            #0x88393c
    //     0x873b2c: nop             
    // 0x873b30: mov             x1, x0
    // 0x873b34: r0 = moveNext()
    //     0x873b34: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x873b38: tbnz            w0, #4, #0x873c54
    // 0x873b3c: nop             
    // 0x873b40: ldur            x1, [fp, #-8]
    // 0x873b44: r0 = current()
    //     0x873b44: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x873b48: mov             x3, x0
    // 0x873b4c: r2 = Null
    //     0x873b4c: mov             x2, NULL
    // 0x873b50: r1 = Null
    //     0x873b50: mov             x1, NULL
    // 0x873b54: stur            x3, [fp, #-0x10]
    // 0x873b58: r4 = 59
    //     0x873b58: movz            x4, #0x3b
    // 0x873b5c: branchIfSmi(r0, 0x873b6c)
    //     0x873b5c: tbz             w0, #0, #0x873b6c
    //     0x873b60: nop             
    // 0x873b64: r4 = LoadClassIdInstr(r0)
    //     0x873b64: ldur            x4, [x0, #-1]
    //     0x873b68: ubfx            x4, x4, #0xc, #0x14
    // 0x873b6c: sub             x4, x4, #0x5d
    // 0x873b70: cmp             x4, #1
    // 0x873b74: b.ls            #0x873b8c
    // 0x873b78: nop             
    // 0x873b7c: r8 = String
    //     0x873b7c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x873b80: r3 = Null
    //     0x873b80: add             x3, PP, #0x11, lsl #12  ; [pp+0x11060] Null
    //     0x873b84: ldr             x3, [x3, #0x60]
    // 0x873b88: r0 = String()
    //     0x873b88: bl              #0x1523244  ; IsType_String_Stub
    // 0x873b8c: ldur            x1, [fp, #-0x10]
    // 0x873b90: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873b90: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873b94: r0 = getGear()
    //     0x873b94: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873b98: LoadField: r1 = r0->field_1f
    //     0x873b98: ldur            w1, [x0, #0x1f]
    // 0x873b9c: DecompressPointer r1
    //     0x873b9c: add             x1, x1, HEAP, lsl #32
    // 0x873ba0: r16 = Instance_GearRarity
    //     0x873ba0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10580] Obj!GearRarity@ec85a1
    //     0x873ba4: ldr             x16, [x16, #0x580]
    // 0x873ba8: cmp             w1, w16
    // 0x873bac: b.ne            #0x873c4c
    // 0x873bb0: nop             
    // 0x873bb4: r0 = LoadStaticField(0xb54)
    //     0x873bb4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873bb8: ldr             x0, [x0, #0x16a8]
    // 0x873bbc: cmp             w0, NULL
    // 0x873bc0: b.ne            #0x873bd0
    // 0x873bc4: nop             
    // 0x873bc8: r0 = Null
    //     0x873bc8: mov             x0, NULL
    // 0x873bcc: b               #0x873bf4
    // 0x873bd0: r17 = 323
    //     0x873bd0: movz            x17, #0x143
    // 0x873bd4: ldr             w1, [x0, x17]
    // 0x873bd8: DecompressPointer r1
    //     0x873bd8: add             x1, x1, HEAP, lsl #32
    // 0x873bdc: r0 = LoadClassIdInstr(r1)
    //     0x873bdc: ldur            x0, [x1, #-1]
    //     0x873be0: ubfx            x0, x0, #0xc, #0x14
    // 0x873be4: ldur            x2, [fp, #-0x10]
    // 0x873be8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x873be8: sub             lr, x0, #0xb4
    //     0x873bec: ldr             lr, [x21, lr, lsl #3]
    //     0x873bf0: blr             lr
    // 0x873bf4: r1 = 59
    //     0x873bf4: movz            x1, #0x3b
    // 0x873bf8: branchIfSmi(r0, 0x873c08)
    //     0x873bf8: tbz             w0, #0, #0x873c08
    //     0x873bfc: nop             
    // 0x873c00: r1 = LoadClassIdInstr(r0)
    //     0x873c00: ldur            x1, [x0, #-1]
    //     0x873c04: ubfx            x1, x1, #0xc, #0x14
    // 0x873c08: r16 = true
    //     0x873c08: add             x16, NULL, #0x20  ; true
    // 0x873c0c: stp             x16, x0, [SP]
    // 0x873c10: mov             x0, x1
    // 0x873c14: mov             lr, x0
    // 0x873c18: ldr             lr, [x21, lr, lsl #3]
    // 0x873c1c: blr             lr
    // 0x873c20: tbz             w0, #4, #0x873c4c
    // 0x873c24: nop             
    // 0x873c28: ldur            x1, [fp, #-0x10]
    // 0x873c2c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873c2c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873c30: r0 = getGear()
    //     0x873c30: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873c34: LoadField: r1 = r0->field_9b
    //     0x873c34: ldur            w1, [x0, #0x9b]
    // 0x873c38: DecompressPointer r1
    //     0x873c38: add             x1, x1, HEAP, lsl #32
    // 0x873c3c: tbz             w1, #4, #0x873c4c
    // 0x873c40: nop             
    // 0x873c44: ldur            x0, [fp, #-0x10]
    // 0x873c48: b               #0x8838b4
    // 0x873c4c: ldur            x0, [fp, #-8]
    // 0x873c50: b               #0x873b20
    // 0x873c54: r0 = "metalracket"
    //     0x873c54: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x873c58: ldr             x0, [x0, #0x690]
    // 0x873c5c: b               #0x8838b4
    // 0x873c60: r16 = "legendaryGear"
    //     0x873c60: add             x16, PP, #0x11, lsl #12  ; [pp+0x11070] "legendaryGear"
    //     0x873c64: ldr             x16, [x16, #0x70]
    // 0x873c68: ldur            lr, [fp, #-0x28]
    // 0x873c6c: stp             lr, x16, [SP]
    // 0x873c70: r0 = ==()
    //     0x873c70: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873c74: tbnz            w0, #4, #0x873dfc
    // 0x873c78: nop             
    // 0x873c7c: r0 = racketList()
    //     0x873c7c: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x873c80: stur            x0, [fp, #-8]
    // 0x873c84: r0 = shoeList()
    //     0x873c84: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x873c88: ldur            x1, [fp, #-8]
    // 0x873c8c: mov             x2, x0
    // 0x873c90: r0 = +()
    //     0x873c90: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873c94: stur            x0, [fp, #-8]
    // 0x873c98: r0 = accessoryList()
    //     0x873c98: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x873c9c: ldur            x1, [fp, #-8]
    // 0x873ca0: mov             x2, x0
    // 0x873ca4: r0 = +()
    //     0x873ca4: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873ca8: mov             x1, x0
    // 0x873cac: r0 = shuffle()
    //     0x873cac: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873cb0: mov             x1, x0
    // 0x873cb4: r0 = iterator()
    //     0x873cb4: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x873cb8: stur            x0, [fp, #-8]
    // 0x873cbc: CheckStackOverflow
    //     0x873cbc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x873cc0: cmp             SP, x16
    //     0x873cc4: b.ls            #0x883944
    //     0x873cc8: nop             
    // 0x873ccc: mov             x1, x0
    // 0x873cd0: r0 = moveNext()
    //     0x873cd0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x873cd4: tbnz            w0, #4, #0x873df0
    // 0x873cd8: nop             
    // 0x873cdc: ldur            x1, [fp, #-8]
    // 0x873ce0: r0 = current()
    //     0x873ce0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x873ce4: mov             x3, x0
    // 0x873ce8: r2 = Null
    //     0x873ce8: mov             x2, NULL
    // 0x873cec: r1 = Null
    //     0x873cec: mov             x1, NULL
    // 0x873cf0: stur            x3, [fp, #-0x10]
    // 0x873cf4: r4 = 59
    //     0x873cf4: movz            x4, #0x3b
    // 0x873cf8: branchIfSmi(r0, 0x873d08)
    //     0x873cf8: tbz             w0, #0, #0x873d08
    //     0x873cfc: nop             
    // 0x873d00: r4 = LoadClassIdInstr(r0)
    //     0x873d00: ldur            x4, [x0, #-1]
    //     0x873d04: ubfx            x4, x4, #0xc, #0x14
    // 0x873d08: sub             x4, x4, #0x5d
    // 0x873d0c: cmp             x4, #1
    // 0x873d10: b.ls            #0x873d28
    // 0x873d14: nop             
    // 0x873d18: r8 = String
    //     0x873d18: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x873d1c: r3 = Null
    //     0x873d1c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11078] Null
    //     0x873d20: ldr             x3, [x3, #0x78]
    // 0x873d24: r0 = String()
    //     0x873d24: bl              #0x1523244  ; IsType_String_Stub
    // 0x873d28: ldur            x1, [fp, #-0x10]
    // 0x873d2c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873d2c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873d30: r0 = getGear()
    //     0x873d30: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873d34: LoadField: r1 = r0->field_1f
    //     0x873d34: ldur            w1, [x0, #0x1f]
    // 0x873d38: DecompressPointer r1
    //     0x873d38: add             x1, x1, HEAP, lsl #32
    // 0x873d3c: r16 = Instance_GearRarity
    //     0x873d3c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10550] Obj!GearRarity@ec8541
    //     0x873d40: ldr             x16, [x16, #0x550]
    // 0x873d44: cmp             w1, w16
    // 0x873d48: b.ne            #0x873de8
    // 0x873d4c: nop             
    // 0x873d50: r0 = LoadStaticField(0xb54)
    //     0x873d50: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873d54: ldr             x0, [x0, #0x16a8]
    // 0x873d58: cmp             w0, NULL
    // 0x873d5c: b.ne            #0x873d6c
    // 0x873d60: nop             
    // 0x873d64: r0 = Null
    //     0x873d64: mov             x0, NULL
    // 0x873d68: b               #0x873d90
    // 0x873d6c: r17 = 323
    //     0x873d6c: movz            x17, #0x143
    // 0x873d70: ldr             w1, [x0, x17]
    // 0x873d74: DecompressPointer r1
    //     0x873d74: add             x1, x1, HEAP, lsl #32
    // 0x873d78: r0 = LoadClassIdInstr(r1)
    //     0x873d78: ldur            x0, [x1, #-1]
    //     0x873d7c: ubfx            x0, x0, #0xc, #0x14
    // 0x873d80: ldur            x2, [fp, #-0x10]
    // 0x873d84: r0 = GDT[cid_x0 + -0xb4]()
    //     0x873d84: sub             lr, x0, #0xb4
    //     0x873d88: ldr             lr, [x21, lr, lsl #3]
    //     0x873d8c: blr             lr
    // 0x873d90: r1 = 59
    //     0x873d90: movz            x1, #0x3b
    // 0x873d94: branchIfSmi(r0, 0x873da4)
    //     0x873d94: tbz             w0, #0, #0x873da4
    //     0x873d98: nop             
    // 0x873d9c: r1 = LoadClassIdInstr(r0)
    //     0x873d9c: ldur            x1, [x0, #-1]
    //     0x873da0: ubfx            x1, x1, #0xc, #0x14
    // 0x873da4: r16 = true
    //     0x873da4: add             x16, NULL, #0x20  ; true
    // 0x873da8: stp             x16, x0, [SP]
    // 0x873dac: mov             x0, x1
    // 0x873db0: mov             lr, x0
    // 0x873db4: ldr             lr, [x21, lr, lsl #3]
    // 0x873db8: blr             lr
    // 0x873dbc: tbz             w0, #4, #0x873de8
    // 0x873dc0: nop             
    // 0x873dc4: ldur            x1, [fp, #-0x10]
    // 0x873dc8: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x873dc8: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x873dcc: r0 = getGear()
    //     0x873dcc: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x873dd0: LoadField: r1 = r0->field_9b
    //     0x873dd0: ldur            w1, [x0, #0x9b]
    // 0x873dd4: DecompressPointer r1
    //     0x873dd4: add             x1, x1, HEAP, lsl #32
    // 0x873dd8: tbz             w1, #4, #0x873de8
    // 0x873ddc: nop             
    // 0x873de0: ldur            x0, [fp, #-0x10]
    // 0x873de4: b               #0x8838b4
    // 0x873de8: ldur            x0, [fp, #-8]
    // 0x873dec: b               #0x873cbc
    // 0x873df0: r0 = "metalracket"
    //     0x873df0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x873df4: ldr             x0, [x0, #0x690]
    // 0x873df8: b               #0x8838b4
    // 0x873dfc: r16 = "randomCollectorRareGear"
    //     0x873dfc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11088] "randomCollectorRareGear"
    //     0x873e00: ldr             x16, [x16, #0x88]
    // 0x873e04: ldur            lr, [fp, #-0x28]
    // 0x873e08: stp             lr, x16, [SP]
    // 0x873e0c: r0 = ==()
    //     0x873e0c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x873e10: tbnz            w0, #4, #0x8742e8
    // 0x873e14: nop             
    // 0x873e18: r0 = racketList()
    //     0x873e18: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x873e1c: stur            x0, [fp, #-8]
    // 0x873e20: r0 = shoeList()
    //     0x873e20: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x873e24: ldur            x1, [fp, #-8]
    // 0x873e28: mov             x2, x0
    // 0x873e2c: r0 = +()
    //     0x873e2c: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873e30: stur            x0, [fp, #-8]
    // 0x873e34: r0 = accessoryList()
    //     0x873e34: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x873e38: ldur            x1, [fp, #-8]
    // 0x873e3c: mov             x2, x0
    // 0x873e40: r0 = +()
    //     0x873e40: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x873e44: mov             x1, x0
    // 0x873e48: r0 = shuffle()
    //     0x873e48: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x873e4c: mov             x3, x0
    // 0x873e50: stur            x3, [fp, #-8]
    // 0x873e54: r0 = LoadStaticField(0xb54)
    //     0x873e54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873e58: ldr             x0, [x0, #0x16a8]
    // 0x873e5c: cmp             w0, NULL
    // 0x873e60: b.ne            #0x873e70
    // 0x873e64: nop             
    // 0x873e68: r0 = Null
    //     0x873e68: mov             x0, NULL
    // 0x873e6c: b               #0x873e98
    // 0x873e70: r17 = 331
    //     0x873e70: movz            x17, #0x14b
    // 0x873e74: ldr             w1, [x0, x17]
    // 0x873e78: DecompressPointer r1
    //     0x873e78: add             x1, x1, HEAP, lsl #32
    // 0x873e7c: r0 = LoadClassIdInstr(r1)
    //     0x873e7c: ldur            x0, [x1, #-1]
    //     0x873e80: ubfx            x0, x0, #0xc, #0x14
    // 0x873e84: r2 = "visitorCollector"
    //     0x873e84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11090] "visitorCollector"
    //     0x873e88: ldr             x2, [x2, #0x90]
    // 0x873e8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x873e8c: sub             lr, x0, #0xb4
    //     0x873e90: ldr             lr, [x21, lr, lsl #3]
    //     0x873e94: blr             lr
    // 0x873e98: cmp             w0, NULL
    // 0x873e9c: b.ne            #0x873eb8
    // 0x873ea0: nop             
    // 0x873ea4: r1 = Null
    //     0x873ea4: mov             x1, NULL
    // 0x873ea8: r2 = 0
    //     0x873ea8: movz            x2, #0
    // 0x873eac: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x873eac: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x873eb0: mov             x3, x0
    // 0x873eb4: b               #0x873ebc
    // 0x873eb8: mov             x3, x0
    // 0x873ebc: mov             x0, x3
    // 0x873ec0: stur            x3, [fp, #-0x10]
    // 0x873ec4: r2 = Null
    //     0x873ec4: mov             x2, NULL
    // 0x873ec8: r1 = Null
    //     0x873ec8: mov             x1, NULL
    // 0x873ecc: r4 = 59
    //     0x873ecc: movz            x4, #0x3b
    // 0x873ed0: branchIfSmi(r0, 0x873ee0)
    //     0x873ed0: tbz             w0, #0, #0x873ee0
    //     0x873ed4: nop             
    // 0x873ed8: r4 = LoadClassIdInstr(r0)
    //     0x873ed8: ldur            x4, [x0, #-1]
    //     0x873edc: ubfx            x4, x4, #0xc, #0x14
    // 0x873ee0: cmp             x4, #0xcdb
    // 0x873ee4: b.eq            #0x873f00
    // 0x873ee8: nop             
    // 0x873eec: r8 = Timestamp
    //     0x873eec: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x873ef0: ldr             x8, [x8, #0xa30]
    // 0x873ef4: r3 = Null
    //     0x873ef4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11098] Null
    //     0x873ef8: ldr             x3, [x3, #0x98]
    // 0x873efc: r0 = Timestamp()
    //     0x873efc: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x873f00: ldur            x1, [fp, #-0x10]
    // 0x873f04: r0 = toDate()
    //     0x873f04: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x873f08: stur            x0, [fp, #-0x10]
    // 0x873f0c: r0 = getTrueDateTime()
    //     0x873f0c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x873f10: ldur            x1, [fp, #-0x10]
    // 0x873f14: stur            x0, [fp, #-0x18]
    // 0x873f18: r0 = day()
    //     0x873f18: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x873f1c: ldur            x1, [fp, #-0x18]
    // 0x873f20: stur            x0, [fp, #-0x38]
    // 0x873f24: r0 = day()
    //     0x873f24: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x873f28: mov             x1, x0
    // 0x873f2c: ldur            x0, [fp, #-0x38]
    // 0x873f30: cmp             x0, x1
    // 0x873f34: b.ne            #0x873f98
    // 0x873f38: nop             
    // 0x873f3c: ldur            x1, [fp, #-0x10]
    // 0x873f40: r0 = month()
    //     0x873f40: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x873f44: ldur            x1, [fp, #-0x18]
    // 0x873f48: stur            x0, [fp, #-0x38]
    // 0x873f4c: r0 = month()
    //     0x873f4c: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x873f50: mov             x1, x0
    // 0x873f54: ldur            x0, [fp, #-0x38]
    // 0x873f58: cmp             x0, x1
    // 0x873f5c: b.ne            #0x873f98
    // 0x873f60: nop             
    // 0x873f64: ldur            x1, [fp, #-0x10]
    // 0x873f68: r0 = year()
    //     0x873f68: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x873f6c: ldur            x1, [fp, #-0x18]
    // 0x873f70: stur            x0, [fp, #-0x38]
    // 0x873f74: r0 = year()
    //     0x873f74: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x873f78: mov             x1, x0
    // 0x873f7c: ldur            x0, [fp, #-0x38]
    // 0x873f80: cmp             x0, x1
    // 0x873f84: r16 = true
    //     0x873f84: add             x16, NULL, #0x20  ; true
    // 0x873f88: r17 = false
    //     0x873f88: add             x17, NULL, #0x30  ; false
    // 0x873f8c: csel            x2, x16, x17, eq
    // 0x873f90: mov             x3, x2
    // 0x873f94: b               #0x873f9c
    // 0x873f98: r3 = false
    //     0x873f98: add             x3, NULL, #0x30  ; false
    // 0x873f9c: stur            x3, [fp, #-0x10]
    // 0x873fa0: r0 = LoadStaticField(0xb54)
    //     0x873fa0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x873fa4: ldr             x0, [x0, #0x16a8]
    // 0x873fa8: cmp             w0, NULL
    // 0x873fac: b.eq            #0x873fe8
    // 0x873fb0: nop             
    // 0x873fb4: r17 = 351
    //     0x873fb4: movz            x17, #0x15f
    // 0x873fb8: ldr             w1, [x0, x17]
    // 0x873fbc: DecompressPointer r1
    //     0x873fbc: add             x1, x1, HEAP, lsl #32
    // 0x873fc0: r0 = LoadClassIdInstr(r1)
    //     0x873fc0: ldur            x0, [x1, #-1]
    //     0x873fc4: ubfx            x0, x0, #0xc, #0x14
    // 0x873fc8: r2 = "visitorCollectorGear"
    //     0x873fc8: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x873fcc: ldr             x2, [x2, #0xa8]
    // 0x873fd0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x873fd0: sub             lr, x0, #0xb4
    //     0x873fd4: ldr             lr, [x21, lr, lsl #3]
    //     0x873fd8: blr             lr
    // 0x873fdc: cmp             w0, NULL
    // 0x873fe0: b.ne            #0x874108
    // 0x873fe4: nop             
    // 0x873fe8: ldur            x1, [fp, #-8]
    // 0x873fec: r0 = iterator()
    //     0x873fec: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x873ff0: stur            x0, [fp, #-0x18]
    // 0x873ff4: CheckStackOverflow
    //     0x873ff4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x873ff8: cmp             SP, x16
    //     0x873ffc: b.ls            #0x88394c
    //     0x874000: nop             
    // 0x874004: mov             x1, x0
    // 0x874008: r0 = moveNext()
    //     0x874008: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x87400c: tbnz            w0, #4, #0x8740b4
    // 0x874010: nop             
    // 0x874014: ldur            x1, [fp, #-0x18]
    // 0x874018: r0 = current()
    //     0x874018: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x87401c: mov             x3, x0
    // 0x874020: r2 = Null
    //     0x874020: mov             x2, NULL
    // 0x874024: r1 = Null
    //     0x874024: mov             x1, NULL
    // 0x874028: stur            x3, [fp, #-0x20]
    // 0x87402c: r4 = 59
    //     0x87402c: movz            x4, #0x3b
    // 0x874030: branchIfSmi(r0, 0x874040)
    //     0x874030: tbz             w0, #0, #0x874040
    //     0x874034: nop             
    // 0x874038: r4 = LoadClassIdInstr(r0)
    //     0x874038: ldur            x4, [x0, #-1]
    //     0x87403c: ubfx            x4, x4, #0xc, #0x14
    // 0x874040: sub             x4, x4, #0x5d
    // 0x874044: cmp             x4, #1
    // 0x874048: b.ls            #0x874060
    // 0x87404c: nop             
    // 0x874050: r8 = String
    //     0x874050: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874054: r3 = Null
    //     0x874054: add             x3, PP, #0x11, lsl #12  ; [pp+0x110b0] Null
    //     0x874058: ldr             x3, [x3, #0xb0]
    // 0x87405c: r0 = String()
    //     0x87405c: bl              #0x1523244  ; IsType_String_Stub
    // 0x874060: ldur            x1, [fp, #-0x20]
    // 0x874064: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874064: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874068: r0 = getGear()
    //     0x874068: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x87406c: LoadField: r1 = r0->field_1f
    //     0x87406c: ldur            w1, [x0, #0x1f]
    // 0x874070: DecompressPointer r1
    //     0x874070: add             x1, x1, HEAP, lsl #32
    // 0x874074: r16 = Instance_GearRarity
    //     0x874074: add             x16, PP, #0x10, lsl #12  ; [pp+0x10678] Obj!GearRarity@ec85c1
    //     0x874078: ldr             x16, [x16, #0x678]
    // 0x87407c: cmp             w1, w16
    // 0x874080: b.ne            #0x8740ac
    // 0x874084: nop             
    // 0x874088: ldur            x1, [fp, #-0x20]
    // 0x87408c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87408c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874090: r0 = getGear()
    //     0x874090: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874094: LoadField: r1 = r0->field_9b
    //     0x874094: ldur            w1, [x0, #0x9b]
    // 0x874098: DecompressPointer r1
    //     0x874098: add             x1, x1, HEAP, lsl #32
    // 0x87409c: tbz             w1, #4, #0x8740ac
    // 0x8740a0: nop             
    // 0x8740a4: ldur            x4, [fp, #-0x20]
    // 0x8740a8: b               #0x8740bc
    // 0x8740ac: ldur            x0, [fp, #-0x18]
    // 0x8740b0: b               #0x873ff4
    // 0x8740b4: r4 = "metalracket"
    //     0x8740b4: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x8740b8: ldr             x4, [x4, #0x690]
    // 0x8740bc: stur            x4, [fp, #-0x18]
    // 0x8740c0: r0 = LoadStaticField(0xb54)
    //     0x8740c0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8740c4: ldr             x0, [x0, #0x16a8]
    // 0x8740c8: cmp             w0, NULL
    // 0x8740cc: b.eq            #0x874100
    // 0x8740d0: nop             
    // 0x8740d4: r17 = 351
    //     0x8740d4: movz            x17, #0x15f
    // 0x8740d8: ldr             w1, [x0, x17]
    // 0x8740dc: DecompressPointer r1
    //     0x8740dc: add             x1, x1, HEAP, lsl #32
    // 0x8740e0: r0 = LoadClassIdInstr(r1)
    //     0x8740e0: ldur            x0, [x1, #-1]
    //     0x8740e4: ubfx            x0, x0, #0xc, #0x14
    // 0x8740e8: mov             x3, x4
    // 0x8740ec: r2 = "visitorCollectorGear"
    //     0x8740ec: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8740f0: ldr             x2, [x2, #0xa8]
    // 0x8740f4: r0 = GDT[cid_x0 + 0x2da]()
    //     0x8740f4: add             lr, x0, #0x2da
    //     0x8740f8: ldr             lr, [x21, lr, lsl #3]
    //     0x8740fc: blr             lr
    // 0x874100: ldur            x0, [fp, #-0x18]
    // 0x874104: b               #0x8838b4
    // 0x874108: ldur            x16, [fp, #-0x10]
    // 0x87410c: r30 = true
    //     0x87410c: add             lr, NULL, #0x20  ; true
    // 0x874110: stp             lr, x16, [SP]
    // 0x874114: r0 = ==()
    //     0x874114: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x874118: tbnz            w0, #4, #0x8741c8
    // 0x87411c: nop             
    // 0x874120: r0 = LoadStaticField(0xb54)
    //     0x874120: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874124: ldr             x0, [x0, #0x16a8]
    // 0x874128: cmp             w0, NULL
    // 0x87412c: b.ne            #0x87413c
    // 0x874130: nop             
    // 0x874134: r0 = Null
    //     0x874134: mov             x0, NULL
    // 0x874138: b               #0x874164
    // 0x87413c: r17 = 351
    //     0x87413c: movz            x17, #0x15f
    // 0x874140: ldr             w1, [x0, x17]
    // 0x874144: DecompressPointer r1
    //     0x874144: add             x1, x1, HEAP, lsl #32
    // 0x874148: r0 = LoadClassIdInstr(r1)
    //     0x874148: ldur            x0, [x1, #-1]
    //     0x87414c: ubfx            x0, x0, #0xc, #0x14
    // 0x874150: r2 = "visitorCollectorGear"
    //     0x874150: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x874154: ldr             x2, [x2, #0xa8]
    // 0x874158: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874158: sub             lr, x0, #0xb4
    //     0x87415c: ldr             lr, [x21, lr, lsl #3]
    //     0x874160: blr             lr
    // 0x874164: cmp             w0, NULL
    // 0x874168: b.ne            #0x874178
    // 0x87416c: nop             
    // 0x874170: r3 = ""
    //     0x874170: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x874174: b               #0x87417c
    // 0x874178: mov             x3, x0
    // 0x87417c: mov             x0, x3
    // 0x874180: stur            x3, [fp, #-0x10]
    // 0x874184: r2 = Null
    //     0x874184: mov             x2, NULL
    // 0x874188: r1 = Null
    //     0x874188: mov             x1, NULL
    // 0x87418c: r4 = 59
    //     0x87418c: movz            x4, #0x3b
    // 0x874190: branchIfSmi(r0, 0x8741a0)
    //     0x874190: tbz             w0, #0, #0x8741a0
    //     0x874194: nop             
    // 0x874198: r4 = LoadClassIdInstr(r0)
    //     0x874198: ldur            x4, [x0, #-1]
    //     0x87419c: ubfx            x4, x4, #0xc, #0x14
    // 0x8741a0: sub             x4, x4, #0x5d
    // 0x8741a4: cmp             x4, #1
    // 0x8741a8: b.ls            #0x8741c0
    // 0x8741ac: nop             
    // 0x8741b0: r8 = String
    //     0x8741b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8741b4: r3 = Null
    //     0x8741b4: add             x3, PP, #0x11, lsl #12  ; [pp+0x110c0] Null
    //     0x8741b8: ldr             x3, [x3, #0xc0]
    // 0x8741bc: r0 = String()
    //     0x8741bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8741c0: ldur            x0, [fp, #-0x10]
    // 0x8741c4: b               #0x8838b4
    // 0x8741c8: ldur            x1, [fp, #-8]
    // 0x8741cc: r0 = iterator()
    //     0x8741cc: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x8741d0: stur            x0, [fp, #-8]
    // 0x8741d4: CheckStackOverflow
    //     0x8741d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8741d8: cmp             SP, x16
    //     0x8741dc: b.ls            #0x883954
    //     0x8741e0: nop             
    // 0x8741e4: mov             x1, x0
    // 0x8741e8: r0 = moveNext()
    //     0x8741e8: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x8741ec: tbnz            w0, #4, #0x874294
    // 0x8741f0: nop             
    // 0x8741f4: ldur            x1, [fp, #-8]
    // 0x8741f8: r0 = current()
    //     0x8741f8: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x8741fc: mov             x3, x0
    // 0x874200: r2 = Null
    //     0x874200: mov             x2, NULL
    // 0x874204: r1 = Null
    //     0x874204: mov             x1, NULL
    // 0x874208: stur            x3, [fp, #-0x10]
    // 0x87420c: r4 = 59
    //     0x87420c: movz            x4, #0x3b
    // 0x874210: branchIfSmi(r0, 0x874220)
    //     0x874210: tbz             w0, #0, #0x874220
    //     0x874214: nop             
    // 0x874218: r4 = LoadClassIdInstr(r0)
    //     0x874218: ldur            x4, [x0, #-1]
    //     0x87421c: ubfx            x4, x4, #0xc, #0x14
    // 0x874220: sub             x4, x4, #0x5d
    // 0x874224: cmp             x4, #1
    // 0x874228: b.ls            #0x874240
    // 0x87422c: nop             
    // 0x874230: r8 = String
    //     0x874230: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874234: r3 = Null
    //     0x874234: add             x3, PP, #0x11, lsl #12  ; [pp+0x110d0] Null
    //     0x874238: ldr             x3, [x3, #0xd0]
    // 0x87423c: r0 = String()
    //     0x87423c: bl              #0x1523244  ; IsType_String_Stub
    // 0x874240: ldur            x1, [fp, #-0x10]
    // 0x874244: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874244: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874248: r0 = getGear()
    //     0x874248: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x87424c: LoadField: r1 = r0->field_1f
    //     0x87424c: ldur            w1, [x0, #0x1f]
    // 0x874250: DecompressPointer r1
    //     0x874250: add             x1, x1, HEAP, lsl #32
    // 0x874254: r16 = Instance_GearRarity
    //     0x874254: add             x16, PP, #0x10, lsl #12  ; [pp+0x10678] Obj!GearRarity@ec85c1
    //     0x874258: ldr             x16, [x16, #0x678]
    // 0x87425c: cmp             w1, w16
    // 0x874260: b.ne            #0x87428c
    // 0x874264: nop             
    // 0x874268: ldur            x1, [fp, #-0x10]
    // 0x87426c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87426c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874270: r0 = getGear()
    //     0x874270: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874274: LoadField: r1 = r0->field_9b
    //     0x874274: ldur            w1, [x0, #0x9b]
    // 0x874278: DecompressPointer r1
    //     0x874278: add             x1, x1, HEAP, lsl #32
    // 0x87427c: tbz             w1, #4, #0x87428c
    // 0x874280: nop             
    // 0x874284: ldur            x4, [fp, #-0x10]
    // 0x874288: b               #0x87429c
    // 0x87428c: ldur            x0, [fp, #-8]
    // 0x874290: b               #0x8741d4
    // 0x874294: r4 = "metalracket"
    //     0x874294: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874298: ldr             x4, [x4, #0x690]
    // 0x87429c: stur            x4, [fp, #-8]
    // 0x8742a0: r0 = LoadStaticField(0xb54)
    //     0x8742a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8742a4: ldr             x0, [x0, #0x16a8]
    // 0x8742a8: cmp             w0, NULL
    // 0x8742ac: b.eq            #0x8742e0
    // 0x8742b0: nop             
    // 0x8742b4: r17 = 351
    //     0x8742b4: movz            x17, #0x15f
    // 0x8742b8: ldr             w1, [x0, x17]
    // 0x8742bc: DecompressPointer r1
    //     0x8742bc: add             x1, x1, HEAP, lsl #32
    // 0x8742c0: r0 = LoadClassIdInstr(r1)
    //     0x8742c0: ldur            x0, [x1, #-1]
    //     0x8742c4: ubfx            x0, x0, #0xc, #0x14
    // 0x8742c8: mov             x3, x4
    // 0x8742cc: r2 = "visitorCollectorGear"
    //     0x8742cc: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8742d0: ldr             x2, [x2, #0xa8]
    // 0x8742d4: r0 = GDT[cid_x0 + 0x2da]()
    //     0x8742d4: add             lr, x0, #0x2da
    //     0x8742d8: ldr             lr, [x21, lr, lsl #3]
    //     0x8742dc: blr             lr
    // 0x8742e0: ldur            x0, [fp, #-8]
    // 0x8742e4: b               #0x8838b4
    // 0x8742e8: r16 = "randomCollectorSuperrareGear"
    //     0x8742e8: add             x16, PP, #0x11, lsl #12  ; [pp+0x110e0] "randomCollectorSuperrareGear"
    //     0x8742ec: ldr             x16, [x16, #0xe0]
    // 0x8742f0: ldur            lr, [fp, #-0x28]
    // 0x8742f4: stp             lr, x16, [SP]
    // 0x8742f8: r0 = ==()
    //     0x8742f8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8742fc: tbnz            w0, #4, #0x8747d4
    // 0x874300: nop             
    // 0x874304: r0 = racketList()
    //     0x874304: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x874308: stur            x0, [fp, #-8]
    // 0x87430c: r0 = shoeList()
    //     0x87430c: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x874310: ldur            x1, [fp, #-8]
    // 0x874314: mov             x2, x0
    // 0x874318: r0 = +()
    //     0x874318: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x87431c: stur            x0, [fp, #-8]
    // 0x874320: r0 = accessoryList()
    //     0x874320: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x874324: ldur            x1, [fp, #-8]
    // 0x874328: mov             x2, x0
    // 0x87432c: r0 = +()
    //     0x87432c: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874330: mov             x1, x0
    // 0x874334: r0 = shuffle()
    //     0x874334: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x874338: mov             x3, x0
    // 0x87433c: stur            x3, [fp, #-8]
    // 0x874340: r0 = LoadStaticField(0xb54)
    //     0x874340: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874344: ldr             x0, [x0, #0x16a8]
    // 0x874348: cmp             w0, NULL
    // 0x87434c: b.ne            #0x87435c
    // 0x874350: nop             
    // 0x874354: r0 = Null
    //     0x874354: mov             x0, NULL
    // 0x874358: b               #0x874384
    // 0x87435c: r17 = 331
    //     0x87435c: movz            x17, #0x14b
    // 0x874360: ldr             w1, [x0, x17]
    // 0x874364: DecompressPointer r1
    //     0x874364: add             x1, x1, HEAP, lsl #32
    // 0x874368: r0 = LoadClassIdInstr(r1)
    //     0x874368: ldur            x0, [x1, #-1]
    //     0x87436c: ubfx            x0, x0, #0xc, #0x14
    // 0x874370: r2 = "visitorCollector"
    //     0x874370: add             x2, PP, #0x11, lsl #12  ; [pp+0x11090] "visitorCollector"
    //     0x874374: ldr             x2, [x2, #0x90]
    // 0x874378: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874378: sub             lr, x0, #0xb4
    //     0x87437c: ldr             lr, [x21, lr, lsl #3]
    //     0x874380: blr             lr
    // 0x874384: cmp             w0, NULL
    // 0x874388: b.ne            #0x8743a4
    // 0x87438c: nop             
    // 0x874390: r1 = Null
    //     0x874390: mov             x1, NULL
    // 0x874394: r2 = 0
    //     0x874394: movz            x2, #0
    // 0x874398: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x874398: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x87439c: mov             x3, x0
    // 0x8743a0: b               #0x8743a8
    // 0x8743a4: mov             x3, x0
    // 0x8743a8: mov             x0, x3
    // 0x8743ac: stur            x3, [fp, #-0x10]
    // 0x8743b0: r2 = Null
    //     0x8743b0: mov             x2, NULL
    // 0x8743b4: r1 = Null
    //     0x8743b4: mov             x1, NULL
    // 0x8743b8: r4 = 59
    //     0x8743b8: movz            x4, #0x3b
    // 0x8743bc: branchIfSmi(r0, 0x8743cc)
    //     0x8743bc: tbz             w0, #0, #0x8743cc
    //     0x8743c0: nop             
    // 0x8743c4: r4 = LoadClassIdInstr(r0)
    //     0x8743c4: ldur            x4, [x0, #-1]
    //     0x8743c8: ubfx            x4, x4, #0xc, #0x14
    // 0x8743cc: cmp             x4, #0xcdb
    // 0x8743d0: b.eq            #0x8743ec
    // 0x8743d4: nop             
    // 0x8743d8: r8 = Timestamp
    //     0x8743d8: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x8743dc: ldr             x8, [x8, #0xa30]
    // 0x8743e0: r3 = Null
    //     0x8743e0: add             x3, PP, #0x11, lsl #12  ; [pp+0x110e8] Null
    //     0x8743e4: ldr             x3, [x3, #0xe8]
    // 0x8743e8: r0 = Timestamp()
    //     0x8743e8: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x8743ec: ldur            x1, [fp, #-0x10]
    // 0x8743f0: r0 = toDate()
    //     0x8743f0: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8743f4: stur            x0, [fp, #-0x10]
    // 0x8743f8: r0 = getTrueDateTime()
    //     0x8743f8: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8743fc: ldur            x1, [fp, #-0x10]
    // 0x874400: stur            x0, [fp, #-0x18]
    // 0x874404: r0 = day()
    //     0x874404: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x874408: ldur            x1, [fp, #-0x18]
    // 0x87440c: stur            x0, [fp, #-0x38]
    // 0x874410: r0 = day()
    //     0x874410: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x874414: mov             x1, x0
    // 0x874418: ldur            x0, [fp, #-0x38]
    // 0x87441c: cmp             x0, x1
    // 0x874420: b.ne            #0x874484
    // 0x874424: nop             
    // 0x874428: ldur            x1, [fp, #-0x10]
    // 0x87442c: r0 = month()
    //     0x87442c: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x874430: ldur            x1, [fp, #-0x18]
    // 0x874434: stur            x0, [fp, #-0x38]
    // 0x874438: r0 = month()
    //     0x874438: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x87443c: mov             x1, x0
    // 0x874440: ldur            x0, [fp, #-0x38]
    // 0x874444: cmp             x0, x1
    // 0x874448: b.ne            #0x874484
    // 0x87444c: nop             
    // 0x874450: ldur            x1, [fp, #-0x10]
    // 0x874454: r0 = year()
    //     0x874454: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x874458: ldur            x1, [fp, #-0x18]
    // 0x87445c: stur            x0, [fp, #-0x38]
    // 0x874460: r0 = year()
    //     0x874460: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x874464: mov             x1, x0
    // 0x874468: ldur            x0, [fp, #-0x38]
    // 0x87446c: cmp             x0, x1
    // 0x874470: r16 = true
    //     0x874470: add             x16, NULL, #0x20  ; true
    // 0x874474: r17 = false
    //     0x874474: add             x17, NULL, #0x30  ; false
    // 0x874478: csel            x2, x16, x17, eq
    // 0x87447c: mov             x3, x2
    // 0x874480: b               #0x874488
    // 0x874484: r3 = false
    //     0x874484: add             x3, NULL, #0x30  ; false
    // 0x874488: stur            x3, [fp, #-0x10]
    // 0x87448c: r0 = LoadStaticField(0xb54)
    //     0x87448c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874490: ldr             x0, [x0, #0x16a8]
    // 0x874494: cmp             w0, NULL
    // 0x874498: b.eq            #0x8744d4
    // 0x87449c: nop             
    // 0x8744a0: r17 = 351
    //     0x8744a0: movz            x17, #0x15f
    // 0x8744a4: ldr             w1, [x0, x17]
    // 0x8744a8: DecompressPointer r1
    //     0x8744a8: add             x1, x1, HEAP, lsl #32
    // 0x8744ac: r0 = LoadClassIdInstr(r1)
    //     0x8744ac: ldur            x0, [x1, #-1]
    //     0x8744b0: ubfx            x0, x0, #0xc, #0x14
    // 0x8744b4: r2 = "visitorCollectorGear"
    //     0x8744b4: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8744b8: ldr             x2, [x2, #0xa8]
    // 0x8744bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8744bc: sub             lr, x0, #0xb4
    //     0x8744c0: ldr             lr, [x21, lr, lsl #3]
    //     0x8744c4: blr             lr
    // 0x8744c8: cmp             w0, NULL
    // 0x8744cc: b.ne            #0x8745f4
    // 0x8744d0: nop             
    // 0x8744d4: ldur            x1, [fp, #-8]
    // 0x8744d8: r0 = iterator()
    //     0x8744d8: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x8744dc: stur            x0, [fp, #-0x18]
    // 0x8744e0: CheckStackOverflow
    //     0x8744e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8744e4: cmp             SP, x16
    //     0x8744e8: b.ls            #0x88395c
    //     0x8744ec: nop             
    // 0x8744f0: mov             x1, x0
    // 0x8744f4: r0 = moveNext()
    //     0x8744f4: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x8744f8: tbnz            w0, #4, #0x8745a0
    // 0x8744fc: nop             
    // 0x874500: ldur            x1, [fp, #-0x18]
    // 0x874504: r0 = current()
    //     0x874504: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x874508: mov             x3, x0
    // 0x87450c: r2 = Null
    //     0x87450c: mov             x2, NULL
    // 0x874510: r1 = Null
    //     0x874510: mov             x1, NULL
    // 0x874514: stur            x3, [fp, #-0x20]
    // 0x874518: r4 = 59
    //     0x874518: movz            x4, #0x3b
    // 0x87451c: branchIfSmi(r0, 0x87452c)
    //     0x87451c: tbz             w0, #0, #0x87452c
    //     0x874520: nop             
    // 0x874524: r4 = LoadClassIdInstr(r0)
    //     0x874524: ldur            x4, [x0, #-1]
    //     0x874528: ubfx            x4, x4, #0xc, #0x14
    // 0x87452c: sub             x4, x4, #0x5d
    // 0x874530: cmp             x4, #1
    // 0x874534: b.ls            #0x87454c
    // 0x874538: nop             
    // 0x87453c: r8 = String
    //     0x87453c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874540: r3 = Null
    //     0x874540: add             x3, PP, #0x11, lsl #12  ; [pp+0x110f8] Null
    //     0x874544: ldr             x3, [x3, #0xf8]
    // 0x874548: r0 = String()
    //     0x874548: bl              #0x1523244  ; IsType_String_Stub
    // 0x87454c: ldur            x1, [fp, #-0x20]
    // 0x874550: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874550: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874554: r0 = getGear()
    //     0x874554: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874558: LoadField: r1 = r0->field_1f
    //     0x874558: ldur            w1, [x0, #0x1f]
    // 0x87455c: DecompressPointer r1
    //     0x87455c: add             x1, x1, HEAP, lsl #32
    // 0x874560: r16 = Instance_GearRarity
    //     0x874560: add             x16, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x874564: ldr             x16, [x16, #0x670]
    // 0x874568: cmp             w1, w16
    // 0x87456c: b.ne            #0x874598
    // 0x874570: nop             
    // 0x874574: ldur            x1, [fp, #-0x20]
    // 0x874578: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874578: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87457c: r0 = getGear()
    //     0x87457c: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874580: LoadField: r1 = r0->field_9b
    //     0x874580: ldur            w1, [x0, #0x9b]
    // 0x874584: DecompressPointer r1
    //     0x874584: add             x1, x1, HEAP, lsl #32
    // 0x874588: tbz             w1, #4, #0x874598
    // 0x87458c: nop             
    // 0x874590: ldur            x4, [fp, #-0x20]
    // 0x874594: b               #0x8745a8
    // 0x874598: ldur            x0, [fp, #-0x18]
    // 0x87459c: b               #0x8744e0
    // 0x8745a0: r4 = "metalracket"
    //     0x8745a0: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x8745a4: ldr             x4, [x4, #0x690]
    // 0x8745a8: stur            x4, [fp, #-0x18]
    // 0x8745ac: r0 = LoadStaticField(0xb54)
    //     0x8745ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8745b0: ldr             x0, [x0, #0x16a8]
    // 0x8745b4: cmp             w0, NULL
    // 0x8745b8: b.eq            #0x8745ec
    // 0x8745bc: nop             
    // 0x8745c0: r17 = 351
    //     0x8745c0: movz            x17, #0x15f
    // 0x8745c4: ldr             w1, [x0, x17]
    // 0x8745c8: DecompressPointer r1
    //     0x8745c8: add             x1, x1, HEAP, lsl #32
    // 0x8745cc: r0 = LoadClassIdInstr(r1)
    //     0x8745cc: ldur            x0, [x1, #-1]
    //     0x8745d0: ubfx            x0, x0, #0xc, #0x14
    // 0x8745d4: mov             x3, x4
    // 0x8745d8: r2 = "visitorCollectorGear"
    //     0x8745d8: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8745dc: ldr             x2, [x2, #0xa8]
    // 0x8745e0: r0 = GDT[cid_x0 + 0x2da]()
    //     0x8745e0: add             lr, x0, #0x2da
    //     0x8745e4: ldr             lr, [x21, lr, lsl #3]
    //     0x8745e8: blr             lr
    // 0x8745ec: ldur            x0, [fp, #-0x18]
    // 0x8745f0: b               #0x8838b4
    // 0x8745f4: ldur            x16, [fp, #-0x10]
    // 0x8745f8: r30 = true
    //     0x8745f8: add             lr, NULL, #0x20  ; true
    // 0x8745fc: stp             lr, x16, [SP]
    // 0x874600: r0 = ==()
    //     0x874600: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x874604: tbnz            w0, #4, #0x8746b4
    // 0x874608: nop             
    // 0x87460c: r0 = LoadStaticField(0xb54)
    //     0x87460c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874610: ldr             x0, [x0, #0x16a8]
    // 0x874614: cmp             w0, NULL
    // 0x874618: b.ne            #0x874628
    // 0x87461c: nop             
    // 0x874620: r0 = Null
    //     0x874620: mov             x0, NULL
    // 0x874624: b               #0x874650
    // 0x874628: r17 = 351
    //     0x874628: movz            x17, #0x15f
    // 0x87462c: ldr             w1, [x0, x17]
    // 0x874630: DecompressPointer r1
    //     0x874630: add             x1, x1, HEAP, lsl #32
    // 0x874634: r0 = LoadClassIdInstr(r1)
    //     0x874634: ldur            x0, [x1, #-1]
    //     0x874638: ubfx            x0, x0, #0xc, #0x14
    // 0x87463c: r2 = "visitorCollectorGear"
    //     0x87463c: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x874640: ldr             x2, [x2, #0xa8]
    // 0x874644: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874644: sub             lr, x0, #0xb4
    //     0x874648: ldr             lr, [x21, lr, lsl #3]
    //     0x87464c: blr             lr
    // 0x874650: cmp             w0, NULL
    // 0x874654: b.ne            #0x874664
    // 0x874658: nop             
    // 0x87465c: r3 = ""
    //     0x87465c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x874660: b               #0x874668
    // 0x874664: mov             x3, x0
    // 0x874668: mov             x0, x3
    // 0x87466c: stur            x3, [fp, #-0x10]
    // 0x874670: r2 = Null
    //     0x874670: mov             x2, NULL
    // 0x874674: r1 = Null
    //     0x874674: mov             x1, NULL
    // 0x874678: r4 = 59
    //     0x874678: movz            x4, #0x3b
    // 0x87467c: branchIfSmi(r0, 0x87468c)
    //     0x87467c: tbz             w0, #0, #0x87468c
    //     0x874680: nop             
    // 0x874684: r4 = LoadClassIdInstr(r0)
    //     0x874684: ldur            x4, [x0, #-1]
    //     0x874688: ubfx            x4, x4, #0xc, #0x14
    // 0x87468c: sub             x4, x4, #0x5d
    // 0x874690: cmp             x4, #1
    // 0x874694: b.ls            #0x8746ac
    // 0x874698: nop             
    // 0x87469c: r8 = String
    //     0x87469c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8746a0: r3 = Null
    //     0x8746a0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11108] Null
    //     0x8746a4: ldr             x3, [x3, #0x108]
    // 0x8746a8: r0 = String()
    //     0x8746a8: bl              #0x1523244  ; IsType_String_Stub
    // 0x8746ac: ldur            x0, [fp, #-0x10]
    // 0x8746b0: b               #0x8838b4
    // 0x8746b4: ldur            x1, [fp, #-8]
    // 0x8746b8: r0 = iterator()
    //     0x8746b8: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x8746bc: stur            x0, [fp, #-8]
    // 0x8746c0: CheckStackOverflow
    //     0x8746c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8746c4: cmp             SP, x16
    //     0x8746c8: b.ls            #0x883964
    //     0x8746cc: nop             
    // 0x8746d0: mov             x1, x0
    // 0x8746d4: r0 = moveNext()
    //     0x8746d4: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x8746d8: tbnz            w0, #4, #0x874780
    // 0x8746dc: nop             
    // 0x8746e0: ldur            x1, [fp, #-8]
    // 0x8746e4: r0 = current()
    //     0x8746e4: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x8746e8: mov             x3, x0
    // 0x8746ec: r2 = Null
    //     0x8746ec: mov             x2, NULL
    // 0x8746f0: r1 = Null
    //     0x8746f0: mov             x1, NULL
    // 0x8746f4: stur            x3, [fp, #-0x10]
    // 0x8746f8: r4 = 59
    //     0x8746f8: movz            x4, #0x3b
    // 0x8746fc: branchIfSmi(r0, 0x87470c)
    //     0x8746fc: tbz             w0, #0, #0x87470c
    //     0x874700: nop             
    // 0x874704: r4 = LoadClassIdInstr(r0)
    //     0x874704: ldur            x4, [x0, #-1]
    //     0x874708: ubfx            x4, x4, #0xc, #0x14
    // 0x87470c: sub             x4, x4, #0x5d
    // 0x874710: cmp             x4, #1
    // 0x874714: b.ls            #0x87472c
    // 0x874718: nop             
    // 0x87471c: r8 = String
    //     0x87471c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874720: r3 = Null
    //     0x874720: add             x3, PP, #0x11, lsl #12  ; [pp+0x11118] Null
    //     0x874724: ldr             x3, [x3, #0x118]
    // 0x874728: r0 = String()
    //     0x874728: bl              #0x1523244  ; IsType_String_Stub
    // 0x87472c: ldur            x1, [fp, #-0x10]
    // 0x874730: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874730: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874734: r0 = getGear()
    //     0x874734: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874738: LoadField: r1 = r0->field_1f
    //     0x874738: ldur            w1, [x0, #0x1f]
    // 0x87473c: DecompressPointer r1
    //     0x87473c: add             x1, x1, HEAP, lsl #32
    // 0x874740: r16 = Instance_GearRarity
    //     0x874740: add             x16, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x874744: ldr             x16, [x16, #0x670]
    // 0x874748: cmp             w1, w16
    // 0x87474c: b.ne            #0x874778
    // 0x874750: nop             
    // 0x874754: ldur            x1, [fp, #-0x10]
    // 0x874758: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874758: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87475c: r0 = getGear()
    //     0x87475c: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874760: LoadField: r1 = r0->field_9b
    //     0x874760: ldur            w1, [x0, #0x9b]
    // 0x874764: DecompressPointer r1
    //     0x874764: add             x1, x1, HEAP, lsl #32
    // 0x874768: tbz             w1, #4, #0x874778
    // 0x87476c: nop             
    // 0x874770: ldur            x4, [fp, #-0x10]
    // 0x874774: b               #0x874788
    // 0x874778: ldur            x0, [fp, #-8]
    // 0x87477c: b               #0x8746c0
    // 0x874780: r4 = "metalracket"
    //     0x874780: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874784: ldr             x4, [x4, #0x690]
    // 0x874788: stur            x4, [fp, #-8]
    // 0x87478c: r0 = LoadStaticField(0xb54)
    //     0x87478c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874790: ldr             x0, [x0, #0x16a8]
    // 0x874794: cmp             w0, NULL
    // 0x874798: b.eq            #0x8747cc
    // 0x87479c: nop             
    // 0x8747a0: r17 = 351
    //     0x8747a0: movz            x17, #0x15f
    // 0x8747a4: ldr             w1, [x0, x17]
    // 0x8747a8: DecompressPointer r1
    //     0x8747a8: add             x1, x1, HEAP, lsl #32
    // 0x8747ac: r0 = LoadClassIdInstr(r1)
    //     0x8747ac: ldur            x0, [x1, #-1]
    //     0x8747b0: ubfx            x0, x0, #0xc, #0x14
    // 0x8747b4: mov             x3, x4
    // 0x8747b8: r2 = "visitorCollectorGear"
    //     0x8747b8: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8747bc: ldr             x2, [x2, #0xa8]
    // 0x8747c0: r0 = GDT[cid_x0 + 0x2da]()
    //     0x8747c0: add             lr, x0, #0x2da
    //     0x8747c4: ldr             lr, [x21, lr, lsl #3]
    //     0x8747c8: blr             lr
    // 0x8747cc: ldur            x0, [fp, #-8]
    // 0x8747d0: b               #0x8838b4
    // 0x8747d4: r16 = "randomCollectorMythicalGear"
    //     0x8747d4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11128] "randomCollectorMythicalGear"
    //     0x8747d8: ldr             x16, [x16, #0x128]
    // 0x8747dc: ldur            lr, [fp, #-0x28]
    // 0x8747e0: stp             lr, x16, [SP]
    // 0x8747e4: r0 = ==()
    //     0x8747e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8747e8: tbnz            w0, #4, #0x874cc0
    // 0x8747ec: nop             
    // 0x8747f0: r0 = racketList()
    //     0x8747f0: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x8747f4: stur            x0, [fp, #-8]
    // 0x8747f8: r0 = shoeList()
    //     0x8747f8: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x8747fc: ldur            x1, [fp, #-8]
    // 0x874800: mov             x2, x0
    // 0x874804: r0 = +()
    //     0x874804: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874808: stur            x0, [fp, #-8]
    // 0x87480c: r0 = accessoryList()
    //     0x87480c: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x874810: ldur            x1, [fp, #-8]
    // 0x874814: mov             x2, x0
    // 0x874818: r0 = +()
    //     0x874818: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x87481c: mov             x1, x0
    // 0x874820: r0 = shuffle()
    //     0x874820: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x874824: mov             x3, x0
    // 0x874828: stur            x3, [fp, #-8]
    // 0x87482c: r0 = LoadStaticField(0xb54)
    //     0x87482c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874830: ldr             x0, [x0, #0x16a8]
    // 0x874834: cmp             w0, NULL
    // 0x874838: b.ne            #0x874848
    // 0x87483c: nop             
    // 0x874840: r0 = Null
    //     0x874840: mov             x0, NULL
    // 0x874844: b               #0x874870
    // 0x874848: r17 = 331
    //     0x874848: movz            x17, #0x14b
    // 0x87484c: ldr             w1, [x0, x17]
    // 0x874850: DecompressPointer r1
    //     0x874850: add             x1, x1, HEAP, lsl #32
    // 0x874854: r0 = LoadClassIdInstr(r1)
    //     0x874854: ldur            x0, [x1, #-1]
    //     0x874858: ubfx            x0, x0, #0xc, #0x14
    // 0x87485c: r2 = "visitorCollector"
    //     0x87485c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11090] "visitorCollector"
    //     0x874860: ldr             x2, [x2, #0x90]
    // 0x874864: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874864: sub             lr, x0, #0xb4
    //     0x874868: ldr             lr, [x21, lr, lsl #3]
    //     0x87486c: blr             lr
    // 0x874870: cmp             w0, NULL
    // 0x874874: b.ne            #0x874890
    // 0x874878: nop             
    // 0x87487c: r1 = Null
    //     0x87487c: mov             x1, NULL
    // 0x874880: r2 = 0
    //     0x874880: movz            x2, #0
    // 0x874884: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x874884: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x874888: mov             x3, x0
    // 0x87488c: b               #0x874894
    // 0x874890: mov             x3, x0
    // 0x874894: mov             x0, x3
    // 0x874898: stur            x3, [fp, #-0x10]
    // 0x87489c: r2 = Null
    //     0x87489c: mov             x2, NULL
    // 0x8748a0: r1 = Null
    //     0x8748a0: mov             x1, NULL
    // 0x8748a4: r4 = 59
    //     0x8748a4: movz            x4, #0x3b
    // 0x8748a8: branchIfSmi(r0, 0x8748b8)
    //     0x8748a8: tbz             w0, #0, #0x8748b8
    //     0x8748ac: nop             
    // 0x8748b0: r4 = LoadClassIdInstr(r0)
    //     0x8748b0: ldur            x4, [x0, #-1]
    //     0x8748b4: ubfx            x4, x4, #0xc, #0x14
    // 0x8748b8: cmp             x4, #0xcdb
    // 0x8748bc: b.eq            #0x8748d8
    // 0x8748c0: nop             
    // 0x8748c4: r8 = Timestamp
    //     0x8748c4: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x8748c8: ldr             x8, [x8, #0xa30]
    // 0x8748cc: r3 = Null
    //     0x8748cc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11130] Null
    //     0x8748d0: ldr             x3, [x3, #0x130]
    // 0x8748d4: r0 = Timestamp()
    //     0x8748d4: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x8748d8: ldur            x1, [fp, #-0x10]
    // 0x8748dc: r0 = toDate()
    //     0x8748dc: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8748e0: stur            x0, [fp, #-0x10]
    // 0x8748e4: r0 = getTrueDateTime()
    //     0x8748e4: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8748e8: ldur            x1, [fp, #-0x10]
    // 0x8748ec: stur            x0, [fp, #-0x18]
    // 0x8748f0: r0 = day()
    //     0x8748f0: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x8748f4: ldur            x1, [fp, #-0x18]
    // 0x8748f8: stur            x0, [fp, #-0x38]
    // 0x8748fc: r0 = day()
    //     0x8748fc: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x874900: mov             x1, x0
    // 0x874904: ldur            x0, [fp, #-0x38]
    // 0x874908: cmp             x0, x1
    // 0x87490c: b.ne            #0x874970
    // 0x874910: nop             
    // 0x874914: ldur            x1, [fp, #-0x10]
    // 0x874918: r0 = month()
    //     0x874918: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x87491c: ldur            x1, [fp, #-0x18]
    // 0x874920: stur            x0, [fp, #-0x38]
    // 0x874924: r0 = month()
    //     0x874924: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x874928: mov             x1, x0
    // 0x87492c: ldur            x0, [fp, #-0x38]
    // 0x874930: cmp             x0, x1
    // 0x874934: b.ne            #0x874970
    // 0x874938: nop             
    // 0x87493c: ldur            x1, [fp, #-0x10]
    // 0x874940: r0 = year()
    //     0x874940: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x874944: ldur            x1, [fp, #-0x18]
    // 0x874948: stur            x0, [fp, #-0x38]
    // 0x87494c: r0 = year()
    //     0x87494c: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x874950: mov             x1, x0
    // 0x874954: ldur            x0, [fp, #-0x38]
    // 0x874958: cmp             x0, x1
    // 0x87495c: r16 = true
    //     0x87495c: add             x16, NULL, #0x20  ; true
    // 0x874960: r17 = false
    //     0x874960: add             x17, NULL, #0x30  ; false
    // 0x874964: csel            x2, x16, x17, eq
    // 0x874968: mov             x3, x2
    // 0x87496c: b               #0x874974
    // 0x874970: r3 = false
    //     0x874970: add             x3, NULL, #0x30  ; false
    // 0x874974: stur            x3, [fp, #-0x10]
    // 0x874978: r0 = LoadStaticField(0xb54)
    //     0x874978: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87497c: ldr             x0, [x0, #0x16a8]
    // 0x874980: cmp             w0, NULL
    // 0x874984: b.eq            #0x8749c0
    // 0x874988: nop             
    // 0x87498c: r17 = 351
    //     0x87498c: movz            x17, #0x15f
    // 0x874990: ldr             w1, [x0, x17]
    // 0x874994: DecompressPointer r1
    //     0x874994: add             x1, x1, HEAP, lsl #32
    // 0x874998: r0 = LoadClassIdInstr(r1)
    //     0x874998: ldur            x0, [x1, #-1]
    //     0x87499c: ubfx            x0, x0, #0xc, #0x14
    // 0x8749a0: r2 = "visitorCollectorGear"
    //     0x8749a0: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x8749a4: ldr             x2, [x2, #0xa8]
    // 0x8749a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8749a8: sub             lr, x0, #0xb4
    //     0x8749ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8749b0: blr             lr
    // 0x8749b4: cmp             w0, NULL
    // 0x8749b8: b.ne            #0x874ae0
    // 0x8749bc: nop             
    // 0x8749c0: ldur            x1, [fp, #-8]
    // 0x8749c4: r0 = iterator()
    //     0x8749c4: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x8749c8: stur            x0, [fp, #-0x18]
    // 0x8749cc: CheckStackOverflow
    //     0x8749cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8749d0: cmp             SP, x16
    //     0x8749d4: b.ls            #0x88396c
    //     0x8749d8: nop             
    // 0x8749dc: mov             x1, x0
    // 0x8749e0: r0 = moveNext()
    //     0x8749e0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x8749e4: tbnz            w0, #4, #0x874a8c
    // 0x8749e8: nop             
    // 0x8749ec: ldur            x1, [fp, #-0x18]
    // 0x8749f0: r0 = current()
    //     0x8749f0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x8749f4: mov             x3, x0
    // 0x8749f8: r2 = Null
    //     0x8749f8: mov             x2, NULL
    // 0x8749fc: r1 = Null
    //     0x8749fc: mov             x1, NULL
    // 0x874a00: stur            x3, [fp, #-0x20]
    // 0x874a04: r4 = 59
    //     0x874a04: movz            x4, #0x3b
    // 0x874a08: branchIfSmi(r0, 0x874a18)
    //     0x874a08: tbz             w0, #0, #0x874a18
    //     0x874a0c: nop             
    // 0x874a10: r4 = LoadClassIdInstr(r0)
    //     0x874a10: ldur            x4, [x0, #-1]
    //     0x874a14: ubfx            x4, x4, #0xc, #0x14
    // 0x874a18: sub             x4, x4, #0x5d
    // 0x874a1c: cmp             x4, #1
    // 0x874a20: b.ls            #0x874a38
    // 0x874a24: nop             
    // 0x874a28: r8 = String
    //     0x874a28: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874a2c: r3 = Null
    //     0x874a2c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11140] Null
    //     0x874a30: ldr             x3, [x3, #0x140]
    // 0x874a34: r0 = String()
    //     0x874a34: bl              #0x1523244  ; IsType_String_Stub
    // 0x874a38: ldur            x1, [fp, #-0x20]
    // 0x874a3c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874a3c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874a40: r0 = getGear()
    //     0x874a40: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874a44: LoadField: r1 = r0->field_1f
    //     0x874a44: ldur            w1, [x0, #0x1f]
    // 0x874a48: DecompressPointer r1
    //     0x874a48: add             x1, x1, HEAP, lsl #32
    // 0x874a4c: r16 = Instance_GearRarity
    //     0x874a4c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10580] Obj!GearRarity@ec85a1
    //     0x874a50: ldr             x16, [x16, #0x580]
    // 0x874a54: cmp             w1, w16
    // 0x874a58: b.ne            #0x874a84
    // 0x874a5c: nop             
    // 0x874a60: ldur            x1, [fp, #-0x20]
    // 0x874a64: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874a64: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874a68: r0 = getGear()
    //     0x874a68: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874a6c: LoadField: r1 = r0->field_9b
    //     0x874a6c: ldur            w1, [x0, #0x9b]
    // 0x874a70: DecompressPointer r1
    //     0x874a70: add             x1, x1, HEAP, lsl #32
    // 0x874a74: tbz             w1, #4, #0x874a84
    // 0x874a78: nop             
    // 0x874a7c: ldur            x4, [fp, #-0x20]
    // 0x874a80: b               #0x874a94
    // 0x874a84: ldur            x0, [fp, #-0x18]
    // 0x874a88: b               #0x8749cc
    // 0x874a8c: r4 = "metalracket"
    //     0x874a8c: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874a90: ldr             x4, [x4, #0x690]
    // 0x874a94: stur            x4, [fp, #-0x18]
    // 0x874a98: r0 = LoadStaticField(0xb54)
    //     0x874a98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874a9c: ldr             x0, [x0, #0x16a8]
    // 0x874aa0: cmp             w0, NULL
    // 0x874aa4: b.eq            #0x874ad8
    // 0x874aa8: nop             
    // 0x874aac: r17 = 351
    //     0x874aac: movz            x17, #0x15f
    // 0x874ab0: ldr             w1, [x0, x17]
    // 0x874ab4: DecompressPointer r1
    //     0x874ab4: add             x1, x1, HEAP, lsl #32
    // 0x874ab8: r0 = LoadClassIdInstr(r1)
    //     0x874ab8: ldur            x0, [x1, #-1]
    //     0x874abc: ubfx            x0, x0, #0xc, #0x14
    // 0x874ac0: mov             x3, x4
    // 0x874ac4: r2 = "visitorCollectorGear"
    //     0x874ac4: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x874ac8: ldr             x2, [x2, #0xa8]
    // 0x874acc: r0 = GDT[cid_x0 + 0x2da]()
    //     0x874acc: add             lr, x0, #0x2da
    //     0x874ad0: ldr             lr, [x21, lr, lsl #3]
    //     0x874ad4: blr             lr
    // 0x874ad8: ldur            x0, [fp, #-0x18]
    // 0x874adc: b               #0x8838b4
    // 0x874ae0: ldur            x16, [fp, #-0x10]
    // 0x874ae4: r30 = true
    //     0x874ae4: add             lr, NULL, #0x20  ; true
    // 0x874ae8: stp             lr, x16, [SP]
    // 0x874aec: r0 = ==()
    //     0x874aec: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x874af0: tbnz            w0, #4, #0x874ba0
    // 0x874af4: nop             
    // 0x874af8: r0 = LoadStaticField(0xb54)
    //     0x874af8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874afc: ldr             x0, [x0, #0x16a8]
    // 0x874b00: cmp             w0, NULL
    // 0x874b04: b.ne            #0x874b14
    // 0x874b08: nop             
    // 0x874b0c: r0 = Null
    //     0x874b0c: mov             x0, NULL
    // 0x874b10: b               #0x874b3c
    // 0x874b14: r17 = 351
    //     0x874b14: movz            x17, #0x15f
    // 0x874b18: ldr             w1, [x0, x17]
    // 0x874b1c: DecompressPointer r1
    //     0x874b1c: add             x1, x1, HEAP, lsl #32
    // 0x874b20: r0 = LoadClassIdInstr(r1)
    //     0x874b20: ldur            x0, [x1, #-1]
    //     0x874b24: ubfx            x0, x0, #0xc, #0x14
    // 0x874b28: r2 = "visitorCollectorGear"
    //     0x874b28: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x874b2c: ldr             x2, [x2, #0xa8]
    // 0x874b30: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874b30: sub             lr, x0, #0xb4
    //     0x874b34: ldr             lr, [x21, lr, lsl #3]
    //     0x874b38: blr             lr
    // 0x874b3c: cmp             w0, NULL
    // 0x874b40: b.ne            #0x874b50
    // 0x874b44: nop             
    // 0x874b48: r3 = ""
    //     0x874b48: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x874b4c: b               #0x874b54
    // 0x874b50: mov             x3, x0
    // 0x874b54: mov             x0, x3
    // 0x874b58: stur            x3, [fp, #-0x10]
    // 0x874b5c: r2 = Null
    //     0x874b5c: mov             x2, NULL
    // 0x874b60: r1 = Null
    //     0x874b60: mov             x1, NULL
    // 0x874b64: r4 = 59
    //     0x874b64: movz            x4, #0x3b
    // 0x874b68: branchIfSmi(r0, 0x874b78)
    //     0x874b68: tbz             w0, #0, #0x874b78
    //     0x874b6c: nop             
    // 0x874b70: r4 = LoadClassIdInstr(r0)
    //     0x874b70: ldur            x4, [x0, #-1]
    //     0x874b74: ubfx            x4, x4, #0xc, #0x14
    // 0x874b78: sub             x4, x4, #0x5d
    // 0x874b7c: cmp             x4, #1
    // 0x874b80: b.ls            #0x874b98
    // 0x874b84: nop             
    // 0x874b88: r8 = String
    //     0x874b88: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874b8c: r3 = Null
    //     0x874b8c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11150] Null
    //     0x874b90: ldr             x3, [x3, #0x150]
    // 0x874b94: r0 = String()
    //     0x874b94: bl              #0x1523244  ; IsType_String_Stub
    // 0x874b98: ldur            x0, [fp, #-0x10]
    // 0x874b9c: b               #0x8838b4
    // 0x874ba0: ldur            x1, [fp, #-8]
    // 0x874ba4: r0 = iterator()
    //     0x874ba4: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x874ba8: stur            x0, [fp, #-8]
    // 0x874bac: CheckStackOverflow
    //     0x874bac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x874bb0: cmp             SP, x16
    //     0x874bb4: b.ls            #0x883974
    //     0x874bb8: nop             
    // 0x874bbc: mov             x1, x0
    // 0x874bc0: r0 = moveNext()
    //     0x874bc0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x874bc4: tbnz            w0, #4, #0x874c6c
    // 0x874bc8: nop             
    // 0x874bcc: ldur            x1, [fp, #-8]
    // 0x874bd0: r0 = current()
    //     0x874bd0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x874bd4: mov             x3, x0
    // 0x874bd8: r2 = Null
    //     0x874bd8: mov             x2, NULL
    // 0x874bdc: r1 = Null
    //     0x874bdc: mov             x1, NULL
    // 0x874be0: stur            x3, [fp, #-0x10]
    // 0x874be4: r4 = 59
    //     0x874be4: movz            x4, #0x3b
    // 0x874be8: branchIfSmi(r0, 0x874bf8)
    //     0x874be8: tbz             w0, #0, #0x874bf8
    //     0x874bec: nop             
    // 0x874bf0: r4 = LoadClassIdInstr(r0)
    //     0x874bf0: ldur            x4, [x0, #-1]
    //     0x874bf4: ubfx            x4, x4, #0xc, #0x14
    // 0x874bf8: sub             x4, x4, #0x5d
    // 0x874bfc: cmp             x4, #1
    // 0x874c00: b.ls            #0x874c18
    // 0x874c04: nop             
    // 0x874c08: r8 = String
    //     0x874c08: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874c0c: r3 = Null
    //     0x874c0c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11160] Null
    //     0x874c10: ldr             x3, [x3, #0x160]
    // 0x874c14: r0 = String()
    //     0x874c14: bl              #0x1523244  ; IsType_String_Stub
    // 0x874c18: ldur            x1, [fp, #-0x10]
    // 0x874c1c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874c1c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874c20: r0 = getGear()
    //     0x874c20: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874c24: LoadField: r1 = r0->field_1f
    //     0x874c24: ldur            w1, [x0, #0x1f]
    // 0x874c28: DecompressPointer r1
    //     0x874c28: add             x1, x1, HEAP, lsl #32
    // 0x874c2c: r16 = Instance_GearRarity
    //     0x874c2c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10580] Obj!GearRarity@ec85a1
    //     0x874c30: ldr             x16, [x16, #0x580]
    // 0x874c34: cmp             w1, w16
    // 0x874c38: b.ne            #0x874c64
    // 0x874c3c: nop             
    // 0x874c40: ldur            x1, [fp, #-0x10]
    // 0x874c44: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874c44: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874c48: r0 = getGear()
    //     0x874c48: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874c4c: LoadField: r1 = r0->field_9b
    //     0x874c4c: ldur            w1, [x0, #0x9b]
    // 0x874c50: DecompressPointer r1
    //     0x874c50: add             x1, x1, HEAP, lsl #32
    // 0x874c54: tbz             w1, #4, #0x874c64
    // 0x874c58: nop             
    // 0x874c5c: ldur            x4, [fp, #-0x10]
    // 0x874c60: b               #0x874c74
    // 0x874c64: ldur            x0, [fp, #-8]
    // 0x874c68: b               #0x874bac
    // 0x874c6c: r4 = "metalracket"
    //     0x874c6c: add             x4, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874c70: ldr             x4, [x4, #0x690]
    // 0x874c74: stur            x4, [fp, #-8]
    // 0x874c78: r0 = LoadStaticField(0xb54)
    //     0x874c78: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874c7c: ldr             x0, [x0, #0x16a8]
    // 0x874c80: cmp             w0, NULL
    // 0x874c84: b.eq            #0x874cb8
    // 0x874c88: nop             
    // 0x874c8c: r17 = 351
    //     0x874c8c: movz            x17, #0x15f
    // 0x874c90: ldr             w1, [x0, x17]
    // 0x874c94: DecompressPointer r1
    //     0x874c94: add             x1, x1, HEAP, lsl #32
    // 0x874c98: r0 = LoadClassIdInstr(r1)
    //     0x874c98: ldur            x0, [x1, #-1]
    //     0x874c9c: ubfx            x0, x0, #0xc, #0x14
    // 0x874ca0: mov             x3, x4
    // 0x874ca4: r2 = "visitorCollectorGear"
    //     0x874ca4: add             x2, PP, #0x11, lsl #12  ; [pp+0x110a8] "visitorCollectorGear"
    //     0x874ca8: ldr             x2, [x2, #0xa8]
    // 0x874cac: r0 = GDT[cid_x0 + 0x2da]()
    //     0x874cac: add             lr, x0, #0x2da
    //     0x874cb0: ldr             lr, [x21, lr, lsl #3]
    //     0x874cb4: blr             lr
    // 0x874cb8: ldur            x0, [fp, #-8]
    // 0x874cbc: b               #0x8838b4
    // 0x874cc0: r16 = "randomRareGear"
    //     0x874cc0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11170] "randomRareGear"
    //     0x874cc4: ldr             x16, [x16, #0x170]
    // 0x874cc8: ldur            lr, [fp, #-0x28]
    // 0x874ccc: stp             lr, x16, [SP]
    // 0x874cd0: r0 = ==()
    //     0x874cd0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x874cd4: tbnz            w0, #4, #0x874e10
    // 0x874cd8: nop             
    // 0x874cdc: r0 = racketList()
    //     0x874cdc: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x874ce0: stur            x0, [fp, #-8]
    // 0x874ce4: r0 = shoeList()
    //     0x874ce4: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x874ce8: ldur            x1, [fp, #-8]
    // 0x874cec: mov             x2, x0
    // 0x874cf0: r0 = +()
    //     0x874cf0: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874cf4: stur            x0, [fp, #-8]
    // 0x874cf8: r0 = accessoryList()
    //     0x874cf8: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x874cfc: ldur            x1, [fp, #-8]
    // 0x874d00: mov             x2, x0
    // 0x874d04: r0 = +()
    //     0x874d04: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874d08: mov             x1, x0
    // 0x874d0c: r0 = shuffle()
    //     0x874d0c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x874d10: mov             x1, x0
    // 0x874d14: r0 = iterator()
    //     0x874d14: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x874d18: stur            x0, [fp, #-8]
    // 0x874d1c: CheckStackOverflow
    //     0x874d1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x874d20: cmp             SP, x16
    //     0x874d24: b.ls            #0x88397c
    //     0x874d28: nop             
    // 0x874d2c: mov             x1, x0
    // 0x874d30: r0 = moveNext()
    //     0x874d30: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x874d34: tbnz            w0, #4, #0x874e04
    // 0x874d38: nop             
    // 0x874d3c: ldur            x1, [fp, #-8]
    // 0x874d40: r0 = current()
    //     0x874d40: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x874d44: mov             x3, x0
    // 0x874d48: r2 = Null
    //     0x874d48: mov             x2, NULL
    // 0x874d4c: r1 = Null
    //     0x874d4c: mov             x1, NULL
    // 0x874d50: stur            x3, [fp, #-0x10]
    // 0x874d54: r4 = 59
    //     0x874d54: movz            x4, #0x3b
    // 0x874d58: branchIfSmi(r0, 0x874d68)
    //     0x874d58: tbz             w0, #0, #0x874d68
    //     0x874d5c: nop             
    // 0x874d60: r4 = LoadClassIdInstr(r0)
    //     0x874d60: ldur            x4, [x0, #-1]
    //     0x874d64: ubfx            x4, x4, #0xc, #0x14
    // 0x874d68: sub             x4, x4, #0x5d
    // 0x874d6c: cmp             x4, #1
    // 0x874d70: b.ls            #0x874d88
    // 0x874d74: nop             
    // 0x874d78: r8 = String
    //     0x874d78: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874d7c: r3 = Null
    //     0x874d7c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11178] Null
    //     0x874d80: ldr             x3, [x3, #0x178]
    // 0x874d84: r0 = String()
    //     0x874d84: bl              #0x1523244  ; IsType_String_Stub
    // 0x874d88: ldur            x1, [fp, #-0x10]
    // 0x874d8c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874d8c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874d90: r0 = getGear()
    //     0x874d90: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874d94: LoadField: r1 = r0->field_1f
    //     0x874d94: ldur            w1, [x0, #0x1f]
    // 0x874d98: DecompressPointer r1
    //     0x874d98: add             x1, x1, HEAP, lsl #32
    // 0x874d9c: r16 = Instance_GearRarity
    //     0x874d9c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10678] Obj!GearRarity@ec85c1
    //     0x874da0: ldr             x16, [x16, #0x678]
    // 0x874da4: cmp             w1, w16
    // 0x874da8: b.eq            #0x874dd8
    // 0x874dac: nop             
    // 0x874db0: ldur            x1, [fp, #-0x10]
    // 0x874db4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874db4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874db8: r0 = getGear()
    //     0x874db8: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874dbc: LoadField: r1 = r0->field_1f
    //     0x874dbc: ldur            w1, [x0, #0x1f]
    // 0x874dc0: DecompressPointer r1
    //     0x874dc0: add             x1, x1, HEAP, lsl #32
    // 0x874dc4: r16 = Instance_GearRarity
    //     0x874dc4: add             x16, PP, #0x10, lsl #12  ; [pp+0x10668] Obj!GearRarity@ec8581
    //     0x874dc8: ldr             x16, [x16, #0x668]
    // 0x874dcc: cmp             w1, w16
    // 0x874dd0: b.ne            #0x874dfc
    // 0x874dd4: nop             
    // 0x874dd8: ldur            x1, [fp, #-0x10]
    // 0x874ddc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874ddc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874de0: r0 = getGear()
    //     0x874de0: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874de4: LoadField: r1 = r0->field_9b
    //     0x874de4: ldur            w1, [x0, #0x9b]
    // 0x874de8: DecompressPointer r1
    //     0x874de8: add             x1, x1, HEAP, lsl #32
    // 0x874dec: tbz             w1, #4, #0x874dfc
    // 0x874df0: nop             
    // 0x874df4: ldur            x0, [fp, #-0x10]
    // 0x874df8: b               #0x8838b4
    // 0x874dfc: ldur            x0, [fp, #-8]
    // 0x874e00: b               #0x874d1c
    // 0x874e04: r0 = "metalracket"
    //     0x874e04: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874e08: ldr             x0, [x0, #0x690]
    // 0x874e0c: b               #0x8838b4
    // 0x874e10: r16 = "randomRareMythicalGear"
    //     0x874e10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11188] "randomRareMythicalGear"
    //     0x874e14: ldr             x16, [x16, #0x188]
    // 0x874e18: ldur            lr, [fp, #-0x28]
    // 0x874e1c: stp             lr, x16, [SP]
    // 0x874e20: r0 = ==()
    //     0x874e20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x874e24: tbnz            w0, #4, #0x874f60
    // 0x874e28: nop             
    // 0x874e2c: r0 = racketList()
    //     0x874e2c: bl              #0x8a5f28  ; [package:battlecross/constants.dart] ::racketList
    // 0x874e30: stur            x0, [fp, #-8]
    // 0x874e34: r0 = shoeList()
    //     0x874e34: bl              #0x8a5c10  ; [package:battlecross/constants.dart] ::shoeList
    // 0x874e38: ldur            x1, [fp, #-8]
    // 0x874e3c: mov             x2, x0
    // 0x874e40: r0 = +()
    //     0x874e40: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874e44: stur            x0, [fp, #-8]
    // 0x874e48: r0 = accessoryList()
    //     0x874e48: bl              #0x8a59e8  ; [package:battlecross/constants.dart] ::accessoryList
    // 0x874e4c: ldur            x1, [fp, #-8]
    // 0x874e50: mov             x2, x0
    // 0x874e54: r0 = +()
    //     0x874e54: bl              #0x7b80f8  ; [dart:collection] ListBase::+
    // 0x874e58: mov             x1, x0
    // 0x874e5c: r0 = shuffle()
    //     0x874e5c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x874e60: mov             x1, x0
    // 0x874e64: r0 = iterator()
    //     0x874e64: bl              #0x9eac7c  ; [dart:core] _GrowableList::iterator
    // 0x874e68: stur            x0, [fp, #-8]
    // 0x874e6c: CheckStackOverflow
    //     0x874e6c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x874e70: cmp             SP, x16
    //     0x874e74: b.ls            #0x883984
    //     0x874e78: nop             
    // 0x874e7c: mov             x1, x0
    // 0x874e80: r0 = moveNext()
    //     0x874e80: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x874e84: tbnz            w0, #4, #0x874f54
    // 0x874e88: nop             
    // 0x874e8c: ldur            x1, [fp, #-8]
    // 0x874e90: r0 = current()
    //     0x874e90: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x874e94: mov             x3, x0
    // 0x874e98: r2 = Null
    //     0x874e98: mov             x2, NULL
    // 0x874e9c: r1 = Null
    //     0x874e9c: mov             x1, NULL
    // 0x874ea0: stur            x3, [fp, #-0x10]
    // 0x874ea4: r4 = 59
    //     0x874ea4: movz            x4, #0x3b
    // 0x874ea8: branchIfSmi(r0, 0x874eb8)
    //     0x874ea8: tbz             w0, #0, #0x874eb8
    //     0x874eac: nop             
    // 0x874eb0: r4 = LoadClassIdInstr(r0)
    //     0x874eb0: ldur            x4, [x0, #-1]
    //     0x874eb4: ubfx            x4, x4, #0xc, #0x14
    // 0x874eb8: sub             x4, x4, #0x5d
    // 0x874ebc: cmp             x4, #1
    // 0x874ec0: b.ls            #0x874ed8
    // 0x874ec4: nop             
    // 0x874ec8: r8 = String
    //     0x874ec8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x874ecc: r3 = Null
    //     0x874ecc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11190] Null
    //     0x874ed0: ldr             x3, [x3, #0x190]
    // 0x874ed4: r0 = String()
    //     0x874ed4: bl              #0x1523244  ; IsType_String_Stub
    // 0x874ed8: ldur            x1, [fp, #-0x10]
    // 0x874edc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874edc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874ee0: r0 = getGear()
    //     0x874ee0: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874ee4: LoadField: r1 = r0->field_1f
    //     0x874ee4: ldur            w1, [x0, #0x1f]
    // 0x874ee8: DecompressPointer r1
    //     0x874ee8: add             x1, x1, HEAP, lsl #32
    // 0x874eec: r16 = Instance_GearRarity
    //     0x874eec: add             x16, PP, #0x10, lsl #12  ; [pp+0x10670] Obj!GearRarity@ec8561
    //     0x874ef0: ldr             x16, [x16, #0x670]
    // 0x874ef4: cmp             w1, w16
    // 0x874ef8: b.eq            #0x874f28
    // 0x874efc: nop             
    // 0x874f00: ldur            x1, [fp, #-0x10]
    // 0x874f04: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874f04: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874f08: r0 = getGear()
    //     0x874f08: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874f0c: LoadField: r1 = r0->field_1f
    //     0x874f0c: ldur            w1, [x0, #0x1f]
    // 0x874f10: DecompressPointer r1
    //     0x874f10: add             x1, x1, HEAP, lsl #32
    // 0x874f14: r16 = Instance_GearRarity
    //     0x874f14: add             x16, PP, #0x10, lsl #12  ; [pp+0x10580] Obj!GearRarity@ec85a1
    //     0x874f18: ldr             x16, [x16, #0x580]
    // 0x874f1c: cmp             w1, w16
    // 0x874f20: b.ne            #0x874f4c
    // 0x874f24: nop             
    // 0x874f28: ldur            x1, [fp, #-0x10]
    // 0x874f2c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x874f2c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x874f30: r0 = getGear()
    //     0x874f30: bl              #0x83d52c  ; [package:battlecross/library/gearLibrary.dart] ::getGear
    // 0x874f34: LoadField: r1 = r0->field_9b
    //     0x874f34: ldur            w1, [x0, #0x9b]
    // 0x874f38: DecompressPointer r1
    //     0x874f38: add             x1, x1, HEAP, lsl #32
    // 0x874f3c: tbz             w1, #4, #0x874f4c
    // 0x874f40: nop             
    // 0x874f44: ldur            x0, [fp, #-0x10]
    // 0x874f48: b               #0x8838b4
    // 0x874f4c: ldur            x0, [fp, #-8]
    // 0x874f50: b               #0x874e6c
    // 0x874f54: r0 = "metalracket"
    //     0x874f54: add             x0, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x874f58: ldr             x0, [x0, #0x690]
    // 0x874f5c: b               #0x8838b4
    // 0x874f60: r16 = "jimaMemento"
    //     0x874f60: add             x16, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x874f64: ldr             x16, [x16, #0x1a0]
    // 0x874f68: ldur            lr, [fp, #-0x28]
    // 0x874f6c: stp             lr, x16, [SP]
    // 0x874f70: r0 = ==()
    //     0x874f70: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x874f74: tbnz            w0, #4, #0x8752b8
    // 0x874f78: nop             
    // 0x874f7c: r1 = <CardRarity>
    //     0x874f7c: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x874f80: ldr             x1, [x1, #0x518]
    // 0x874f84: r2 = Instance_CardRarity
    //     0x874f84: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f00] Obj!CardRarity@ec8481
    //     0x874f88: ldr             x2, [x2, #0xf00]
    // 0x874f8c: r3 = Instance_CardRarity
    //     0x874f8c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x874f90: ldr             x3, [x3, #0xf08]
    // 0x874f94: r5 = Instance_CardRarity
    //     0x874f94: add             x5, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x874f98: ldr             x5, [x5, #0xf10]
    // 0x874f9c: r0 = _GrowableList._literal3()
    //     0x874f9c: bl              #0x821d38  ; [dart:core] _GrowableList::_GrowableList._literal3
    // 0x874fa0: stur            x0, [fp, #-8]
    // 0x874fa4: r0 = cardList()
    //     0x874fa4: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x874fa8: mov             x1, x0
    // 0x874fac: ldur            x2, [fp, #-8]
    // 0x874fb0: r0 = getCardListByRarity()
    //     0x874fb0: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x874fb4: mov             x3, x0
    // 0x874fb8: stur            x3, [fp, #-8]
    // 0x874fbc: r0 = LoadStaticField(0xb54)
    //     0x874fbc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x874fc0: ldr             x0, [x0, #0x16a8]
    // 0x874fc4: cmp             w0, NULL
    // 0x874fc8: b.eq            #0x8751d4
    // 0x874fcc: nop             
    // 0x874fd0: r17 = 351
    //     0x874fd0: movz            x17, #0x15f
    // 0x874fd4: ldr             w1, [x0, x17]
    // 0x874fd8: DecompressPointer r1
    //     0x874fd8: add             x1, x1, HEAP, lsl #32
    // 0x874fdc: r0 = LoadClassIdInstr(r1)
    //     0x874fdc: ldur            x0, [x1, #-1]
    //     0x874fe0: ubfx            x0, x0, #0xc, #0x14
    // 0x874fe4: r2 = "jimaMemento"
    //     0x874fe4: add             x2, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x874fe8: ldr             x2, [x2, #0x1a0]
    // 0x874fec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x874fec: sub             lr, x0, #0xb4
    //     0x874ff0: ldr             lr, [x21, lr, lsl #3]
    //     0x874ff4: blr             lr
    // 0x874ff8: cmp             w0, NULL
    // 0x874ffc: b.eq            #0x8751d4
    // 0x875000: nop             
    // 0x875004: r0 = LoadStaticField(0xb54)
    //     0x875004: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875008: ldr             x0, [x0, #0x16a8]
    // 0x87500c: cmp             w0, NULL
    // 0x875010: b.ne            #0x875020
    // 0x875014: nop             
    // 0x875018: r0 = Null
    //     0x875018: mov             x0, NULL
    // 0x87501c: b               #0x875048
    // 0x875020: r17 = 351
    //     0x875020: movz            x17, #0x15f
    // 0x875024: ldr             w1, [x0, x17]
    // 0x875028: DecompressPointer r1
    //     0x875028: add             x1, x1, HEAP, lsl #32
    // 0x87502c: r0 = LoadClassIdInstr(r1)
    //     0x87502c: ldur            x0, [x1, #-1]
    //     0x875030: ubfx            x0, x0, #0xc, #0x14
    // 0x875034: r2 = "jimaMemento"
    //     0x875034: add             x2, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x875038: ldr             x2, [x2, #0x1a0]
    // 0x87503c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87503c: sub             lr, x0, #0xb4
    //     0x875040: ldr             lr, [x21, lr, lsl #3]
    //     0x875044: blr             lr
    // 0x875048: r1 = 59
    //     0x875048: movz            x1, #0x3b
    // 0x87504c: branchIfSmi(r0, 0x87505c)
    //     0x87504c: tbz             w0, #0, #0x87505c
    //     0x875050: nop             
    // 0x875054: r1 = LoadClassIdInstr(r0)
    //     0x875054: ldur            x1, [x0, #-1]
    //     0x875058: ubfx            x1, x1, #0xc, #0x14
    // 0x87505c: r16 = ""
    //     0x87505c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x875060: stp             x16, x0, [SP]
    // 0x875064: mov             x0, x1
    // 0x875068: mov             lr, x0
    // 0x87506c: ldr             lr, [x21, lr, lsl #3]
    // 0x875070: blr             lr
    // 0x875074: tbz             w0, #4, #0x8751d4
    // 0x875078: nop             
    // 0x87507c: r0 = LoadStaticField(0xb54)
    //     0x87507c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875080: ldr             x0, [x0, #0x16a8]
    // 0x875084: cmp             w0, NULL
    // 0x875088: b.ne            #0x875098
    // 0x87508c: nop             
    // 0x875090: r0 = Null
    //     0x875090: mov             x0, NULL
    // 0x875094: b               #0x87510c
    // 0x875098: r17 = 319
    //     0x875098: movz            x17, #0x13f
    // 0x87509c: ldr             w3, [x0, x17]
    // 0x8750a0: DecompressPointer r3
    //     0x8750a0: add             x3, x3, HEAP, lsl #32
    // 0x8750a4: stur            x3, [fp, #-0x10]
    // 0x8750a8: r0 = LoadStaticField(0xb54)
    //     0x8750a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8750ac: ldr             x0, [x0, #0x16a8]
    // 0x8750b0: cmp             w0, NULL
    // 0x8750b4: b.ne            #0x8750c8
    // 0x8750b8: nop             
    // 0x8750bc: mov             x1, x3
    // 0x8750c0: r2 = Null
    //     0x8750c0: mov             x2, NULL
    // 0x8750c4: b               #0x8750f8
    // 0x8750c8: r17 = 351
    //     0x8750c8: movz            x17, #0x15f
    // 0x8750cc: ldr             w1, [x0, x17]
    // 0x8750d0: DecompressPointer r1
    //     0x8750d0: add             x1, x1, HEAP, lsl #32
    // 0x8750d4: r0 = LoadClassIdInstr(r1)
    //     0x8750d4: ldur            x0, [x1, #-1]
    //     0x8750d8: ubfx            x0, x0, #0xc, #0x14
    // 0x8750dc: r2 = "jimaMemento"
    //     0x8750dc: add             x2, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x8750e0: ldr             x2, [x2, #0x1a0]
    // 0x8750e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8750e4: sub             lr, x0, #0xb4
    //     0x8750e8: ldr             lr, [x21, lr, lsl #3]
    //     0x8750ec: blr             lr
    // 0x8750f0: mov             x2, x0
    // 0x8750f4: ldur            x1, [fp, #-0x10]
    // 0x8750f8: r0 = LoadClassIdInstr(r1)
    //     0x8750f8: ldur            x0, [x1, #-1]
    //     0x8750fc: ubfx            x0, x0, #0xc, #0x14
    // 0x875100: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875100: sub             lr, x0, #0xb4
    //     0x875104: ldr             lr, [x21, lr, lsl #3]
    //     0x875108: blr             lr
    // 0x87510c: r1 = 59
    //     0x87510c: movz            x1, #0x3b
    // 0x875110: branchIfSmi(r0, 0x875120)
    //     0x875110: tbz             w0, #0, #0x875120
    //     0x875114: nop             
    // 0x875118: r1 = LoadClassIdInstr(r0)
    //     0x875118: ldur            x1, [x0, #-1]
    //     0x87511c: ubfx            x1, x1, #0xc, #0x14
    // 0x875120: r16 = true
    //     0x875120: add             x16, NULL, #0x20  ; true
    // 0x875124: stp             x16, x0, [SP]
    // 0x875128: mov             x0, x1
    // 0x87512c: mov             lr, x0
    // 0x875130: ldr             lr, [x21, lr, lsl #3]
    // 0x875134: blr             lr
    // 0x875138: tbz             w0, #4, #0x8751d4
    // 0x87513c: nop             
    // 0x875140: r0 = LoadStaticField(0xb54)
    //     0x875140: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875144: ldr             x0, [x0, #0x16a8]
    // 0x875148: cmp             w0, NULL
    // 0x87514c: b.ne            #0x87515c
    // 0x875150: nop             
    // 0x875154: r3 = Null
    //     0x875154: mov             x3, NULL
    // 0x875158: b               #0x875188
    // 0x87515c: r17 = 351
    //     0x87515c: movz            x17, #0x15f
    // 0x875160: ldr             w1, [x0, x17]
    // 0x875164: DecompressPointer r1
    //     0x875164: add             x1, x1, HEAP, lsl #32
    // 0x875168: r0 = LoadClassIdInstr(r1)
    //     0x875168: ldur            x0, [x1, #-1]
    //     0x87516c: ubfx            x0, x0, #0xc, #0x14
    // 0x875170: r2 = "jimaMemento"
    //     0x875170: add             x2, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x875174: ldr             x2, [x2, #0x1a0]
    // 0x875178: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875178: sub             lr, x0, #0xb4
    //     0x87517c: ldr             lr, [x21, lr, lsl #3]
    //     0x875180: blr             lr
    // 0x875184: mov             x3, x0
    // 0x875188: mov             x0, x3
    // 0x87518c: stur            x3, [fp, #-0x10]
    // 0x875190: r2 = Null
    //     0x875190: mov             x2, NULL
    // 0x875194: r1 = Null
    //     0x875194: mov             x1, NULL
    // 0x875198: r4 = 59
    //     0x875198: movz            x4, #0x3b
    // 0x87519c: branchIfSmi(r0, 0x8751ac)
    //     0x87519c: tbz             w0, #0, #0x8751ac
    //     0x8751a0: nop             
    // 0x8751a4: r4 = LoadClassIdInstr(r0)
    //     0x8751a4: ldur            x4, [x0, #-1]
    //     0x8751a8: ubfx            x4, x4, #0xc, #0x14
    // 0x8751ac: sub             x4, x4, #0x5d
    // 0x8751b0: cmp             x4, #1
    // 0x8751b4: b.ls            #0x8751cc
    // 0x8751b8: nop             
    // 0x8751bc: r8 = String
    //     0x8751bc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8751c0: r3 = Null
    //     0x8751c0: add             x3, PP, #0x11, lsl #12  ; [pp+0x111a8] Null
    //     0x8751c4: ldr             x3, [x3, #0x1a8]
    // 0x8751c8: r0 = String()
    //     0x8751c8: bl              #0x1523244  ; IsType_String_Stub
    // 0x8751cc: ldur            x0, [fp, #-0x10]
    // 0x8751d0: b               #0x8838b4
    // 0x8751d4: ldur            x1, [fp, #-8]
    // 0x8751d8: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8751d8: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8751dc: r0 = filterUnobtainedCard()
    //     0x8751dc: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x8751e0: mov             x1, x0
    // 0x8751e4: r0 = isNotEmpty()
    //     0x8751e4: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x8751e8: tbnz            w0, #4, #0x875258
    // 0x8751ec: nop             
    // 0x8751f0: ldur            x1, [fp, #-8]
    // 0x8751f4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8751f4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8751f8: r0 = filterUnobtainedCard()
    //     0x8751f8: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x8751fc: mov             x1, x0
    // 0x875200: r0 = shuffle()
    //     0x875200: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x875204: mov             x1, x0
    // 0x875208: r0 = first()
    //     0x875208: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x87520c: mov             x3, x0
    // 0x875210: r2 = Null
    //     0x875210: mov             x2, NULL
    // 0x875214: r1 = Null
    //     0x875214: mov             x1, NULL
    // 0x875218: stur            x3, [fp, #-8]
    // 0x87521c: r4 = 59
    //     0x87521c: movz            x4, #0x3b
    // 0x875220: branchIfSmi(r0, 0x875230)
    //     0x875220: tbz             w0, #0, #0x875230
    //     0x875224: nop             
    // 0x875228: r4 = LoadClassIdInstr(r0)
    //     0x875228: ldur            x4, [x0, #-1]
    //     0x87522c: ubfx            x4, x4, #0xc, #0x14
    // 0x875230: sub             x4, x4, #0x5d
    // 0x875234: cmp             x4, #1
    // 0x875238: b.ls            #0x875250
    // 0x87523c: nop             
    // 0x875240: r8 = String
    //     0x875240: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x875244: r3 = Null
    //     0x875244: add             x3, PP, #0x11, lsl #12  ; [pp+0x111b8] Null
    //     0x875248: ldr             x3, [x3, #0x1b8]
    // 0x87524c: r0 = String()
    //     0x87524c: bl              #0x1523244  ; IsType_String_Stub
    // 0x875250: ldur            x4, [fp, #-8]
    // 0x875254: b               #0x875260
    // 0x875258: r4 = "stroke"
    //     0x875258: add             x4, PP, #0xf, lsl #12  ; [pp+0xf2d0] "stroke"
    //     0x87525c: ldr             x4, [x4, #0x2d0]
    // 0x875260: stur            x4, [fp, #-8]
    // 0x875264: r0 = LoadStaticField(0xb54)
    //     0x875264: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875268: ldr             x0, [x0, #0x16a8]
    // 0x87526c: cmp             w0, NULL
    // 0x875270: b.eq            #0x8752a4
    // 0x875274: nop             
    // 0x875278: r17 = 351
    //     0x875278: movz            x17, #0x15f
    // 0x87527c: ldr             w1, [x0, x17]
    // 0x875280: DecompressPointer r1
    //     0x875280: add             x1, x1, HEAP, lsl #32
    // 0x875284: r0 = LoadClassIdInstr(r1)
    //     0x875284: ldur            x0, [x1, #-1]
    //     0x875288: ubfx            x0, x0, #0xc, #0x14
    // 0x87528c: mov             x3, x4
    // 0x875290: r2 = "jimaMemento"
    //     0x875290: add             x2, PP, #0x11, lsl #12  ; [pp+0x111a0] "jimaMemento"
    //     0x875294: ldr             x2, [x2, #0x1a0]
    // 0x875298: r0 = GDT[cid_x0 + 0x2da]()
    //     0x875298: add             lr, x0, #0x2da
    //     0x87529c: ldr             lr, [x21, lr, lsl #3]
    //     0x8752a0: blr             lr
    // 0x8752a4: r1 = Null
    //     0x8752a4: mov             x1, NULL
    // 0x8752a8: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8752a8: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8752ac: r0 = syncPlayer()
    //     0x8752ac: bl              #0x865b88  ; [package:battlecross/method/playerMethod.dart] ::syncPlayer
    // 0x8752b0: ldur            x0, [fp, #-8]
    // 0x8752b4: b               #0x8838b4
    // 0x8752b8: r16 = "jimaMemento2"
    //     0x8752b8: add             x16, PP, #0x11, lsl #12  ; [pp+0x111c8] "jimaMemento2"
    //     0x8752bc: ldr             x16, [x16, #0x1c8]
    // 0x8752c0: ldur            lr, [fp, #-0x28]
    // 0x8752c4: stp             lr, x16, [SP]
    // 0x8752c8: r0 = ==()
    //     0x8752c8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8752cc: tbnz            w0, #4, #0x875380
    // 0x8752d0: nop             
    // 0x8752d4: r0 = LoadStaticField(0xb54)
    //     0x8752d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8752d8: ldr             x0, [x0, #0x16a8]
    // 0x8752dc: cmp             w0, NULL
    // 0x8752e0: b.ne            #0x8752f0
    // 0x8752e4: nop             
    // 0x8752e8: r0 = Null
    //     0x8752e8: mov             x0, NULL
    // 0x8752ec: b               #0x875318
    // 0x8752f0: r17 = 351
    //     0x8752f0: movz            x17, #0x15f
    // 0x8752f4: ldr             w1, [x0, x17]
    // 0x8752f8: DecompressPointer r1
    //     0x8752f8: add             x1, x1, HEAP, lsl #32
    // 0x8752fc: r0 = LoadClassIdInstr(r1)
    //     0x8752fc: ldur            x0, [x1, #-1]
    //     0x875300: ubfx            x0, x0, #0xc, #0x14
    // 0x875304: r2 = "jimaMemento2"
    //     0x875304: add             x2, PP, #0x11, lsl #12  ; [pp+0x111c8] "jimaMemento2"
    //     0x875308: ldr             x2, [x2, #0x1c8]
    // 0x87530c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87530c: sub             lr, x0, #0xb4
    //     0x875310: ldr             lr, [x21, lr, lsl #3]
    //     0x875314: blr             lr
    // 0x875318: cmp             w0, NULL
    // 0x87531c: b.ne            #0x875330
    // 0x875320: nop             
    // 0x875324: r3 = "metalracket"
    //     0x875324: add             x3, PP, #0x10, lsl #12  ; [pp+0x10690] "metalracket"
    //     0x875328: ldr             x3, [x3, #0x690]
    // 0x87532c: b               #0x875334
    // 0x875330: mov             x3, x0
    // 0x875334: mov             x0, x3
    // 0x875338: stur            x3, [fp, #-8]
    // 0x87533c: r2 = Null
    //     0x87533c: mov             x2, NULL
    // 0x875340: r1 = Null
    //     0x875340: mov             x1, NULL
    // 0x875344: r4 = 59
    //     0x875344: movz            x4, #0x3b
    // 0x875348: branchIfSmi(r0, 0x875358)
    //     0x875348: tbz             w0, #0, #0x875358
    //     0x87534c: nop             
    // 0x875350: r4 = LoadClassIdInstr(r0)
    //     0x875350: ldur            x4, [x0, #-1]
    //     0x875354: ubfx            x4, x4, #0xc, #0x14
    // 0x875358: sub             x4, x4, #0x5d
    // 0x87535c: cmp             x4, #1
    // 0x875360: b.ls            #0x875378
    // 0x875364: nop             
    // 0x875368: r8 = String
    //     0x875368: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87536c: r3 = Null
    //     0x87536c: add             x3, PP, #0x11, lsl #12  ; [pp+0x111d0] Null
    //     0x875370: ldr             x3, [x3, #0x1d0]
    // 0x875374: r0 = String()
    //     0x875374: bl              #0x1523244  ; IsType_String_Stub
    // 0x875378: ldur            x0, [fp, #-8]
    // 0x87537c: b               #0x8838b4
    // 0x875380: r16 = "travellingCoach1"
    //     0x875380: add             x16, PP, #0x11, lsl #12  ; [pp+0x111e0] "travellingCoach1"
    //     0x875384: ldr             x16, [x16, #0x1e0]
    // 0x875388: ldur            lr, [fp, #-0x28]
    // 0x87538c: stp             lr, x16, [SP]
    // 0x875390: r0 = ==()
    //     0x875390: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875394: tbnz            w0, #4, #0x8757d8
    // 0x875398: nop             
    // 0x87539c: r0 = LoadStaticField(0xb54)
    //     0x87539c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8753a0: ldr             x0, [x0, #0x16a8]
    // 0x8753a4: cmp             w0, NULL
    // 0x8753a8: b.ne            #0x8753b8
    // 0x8753ac: nop             
    // 0x8753b0: r0 = Null
    //     0x8753b0: mov             x0, NULL
    // 0x8753b4: b               #0x8753e0
    // 0x8753b8: r17 = 331
    //     0x8753b8: movz            x17, #0x14b
    // 0x8753bc: ldr             w1, [x0, x17]
    // 0x8753c0: DecompressPointer r1
    //     0x8753c0: add             x1, x1, HEAP, lsl #32
    // 0x8753c4: r0 = LoadClassIdInstr(r1)
    //     0x8753c4: ldur            x0, [x1, #-1]
    //     0x8753c8: ubfx            x0, x0, #0xc, #0x14
    // 0x8753cc: r2 = "visitorCoach"
    //     0x8753cc: add             x2, PP, #0x11, lsl #12  ; [pp+0x111e8] "visitorCoach"
    //     0x8753d0: ldr             x2, [x2, #0x1e8]
    // 0x8753d4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8753d4: sub             lr, x0, #0xb4
    //     0x8753d8: ldr             lr, [x21, lr, lsl #3]
    //     0x8753dc: blr             lr
    // 0x8753e0: cmp             w0, NULL
    // 0x8753e4: b.ne            #0x875400
    // 0x8753e8: nop             
    // 0x8753ec: r1 = Null
    //     0x8753ec: mov             x1, NULL
    // 0x8753f0: r2 = 0
    //     0x8753f0: movz            x2, #0
    // 0x8753f4: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x8753f4: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x8753f8: mov             x3, x0
    // 0x8753fc: b               #0x875404
    // 0x875400: mov             x3, x0
    // 0x875404: mov             x0, x3
    // 0x875408: stur            x3, [fp, #-8]
    // 0x87540c: r2 = Null
    //     0x87540c: mov             x2, NULL
    // 0x875410: r1 = Null
    //     0x875410: mov             x1, NULL
    // 0x875414: r4 = 59
    //     0x875414: movz            x4, #0x3b
    // 0x875418: branchIfSmi(r0, 0x875428)
    //     0x875418: tbz             w0, #0, #0x875428
    //     0x87541c: nop             
    // 0x875420: r4 = LoadClassIdInstr(r0)
    //     0x875420: ldur            x4, [x0, #-1]
    //     0x875424: ubfx            x4, x4, #0xc, #0x14
    // 0x875428: cmp             x4, #0xcdb
    // 0x87542c: b.eq            #0x875448
    // 0x875430: nop             
    // 0x875434: r8 = Timestamp
    //     0x875434: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x875438: ldr             x8, [x8, #0xa30]
    // 0x87543c: r3 = Null
    //     0x87543c: add             x3, PP, #0x11, lsl #12  ; [pp+0x111f0] Null
    //     0x875440: ldr             x3, [x3, #0x1f0]
    // 0x875444: r0 = Timestamp()
    //     0x875444: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x875448: ldur            x1, [fp, #-8]
    // 0x87544c: r0 = toDate()
    //     0x87544c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x875450: stur            x0, [fp, #-8]
    // 0x875454: r0 = getTrueDateTime()
    //     0x875454: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x875458: ldur            x1, [fp, #-8]
    // 0x87545c: stur            x0, [fp, #-0x10]
    // 0x875460: r0 = day()
    //     0x875460: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x875464: ldur            x1, [fp, #-0x10]
    // 0x875468: stur            x0, [fp, #-0x38]
    // 0x87546c: r0 = day()
    //     0x87546c: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x875470: mov             x1, x0
    // 0x875474: ldur            x0, [fp, #-0x38]
    // 0x875478: cmp             x0, x1
    // 0x87547c: b.ne            #0x8754e0
    // 0x875480: nop             
    // 0x875484: ldur            x1, [fp, #-8]
    // 0x875488: r0 = month()
    //     0x875488: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x87548c: ldur            x1, [fp, #-0x10]
    // 0x875490: stur            x0, [fp, #-0x38]
    // 0x875494: r0 = month()
    //     0x875494: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x875498: mov             x1, x0
    // 0x87549c: ldur            x0, [fp, #-0x38]
    // 0x8754a0: cmp             x0, x1
    // 0x8754a4: b.ne            #0x8754e0
    // 0x8754a8: nop             
    // 0x8754ac: ldur            x1, [fp, #-8]
    // 0x8754b0: r0 = year()
    //     0x8754b0: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x8754b4: ldur            x1, [fp, #-0x10]
    // 0x8754b8: stur            x0, [fp, #-0x38]
    // 0x8754bc: r0 = year()
    //     0x8754bc: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x8754c0: mov             x1, x0
    // 0x8754c4: ldur            x0, [fp, #-0x38]
    // 0x8754c8: cmp             x0, x1
    // 0x8754cc: r16 = true
    //     0x8754cc: add             x16, NULL, #0x20  ; true
    // 0x8754d0: r17 = false
    //     0x8754d0: add             x17, NULL, #0x30  ; false
    // 0x8754d4: csel            x2, x16, x17, eq
    // 0x8754d8: mov             x0, x2
    // 0x8754dc: b               #0x8754e4
    // 0x8754e0: r0 = false
    //     0x8754e0: add             x0, NULL, #0x30  ; false
    // 0x8754e4: stur            x0, [fp, #-8]
    // 0x8754e8: r1 = <CardRarity>
    //     0x8754e8: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x8754ec: ldr             x1, [x1, #0x518]
    // 0x8754f0: r2 = Instance_CardRarity
    //     0x8754f0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f00] Obj!CardRarity@ec8481
    //     0x8754f4: ldr             x2, [x2, #0xf00]
    // 0x8754f8: r3 = Instance_CardRarity
    //     0x8754f8: add             x3, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x8754fc: ldr             x3, [x3, #0xf08]
    // 0x875500: r0 = _GrowableList._literal2()
    //     0x875500: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x875504: stur            x0, [fp, #-0x10]
    // 0x875508: r0 = cardList()
    //     0x875508: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x87550c: mov             x1, x0
    // 0x875510: ldur            x2, [fp, #-0x10]
    // 0x875514: r0 = getCardListByRarity()
    //     0x875514: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x875518: mov             x3, x0
    // 0x87551c: stur            x3, [fp, #-0x10]
    // 0x875520: r0 = LoadStaticField(0xb54)
    //     0x875520: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875524: ldr             x0, [x0, #0x16a8]
    // 0x875528: cmp             w0, NULL
    // 0x87552c: b.eq            #0x875568
    // 0x875530: nop             
    // 0x875534: r17 = 351
    //     0x875534: movz            x17, #0x15f
    // 0x875538: ldr             w1, [x0, x17]
    // 0x87553c: DecompressPointer r1
    //     0x87553c: add             x1, x1, HEAP, lsl #32
    // 0x875540: r0 = LoadClassIdInstr(r1)
    //     0x875540: ldur            x0, [x1, #-1]
    //     0x875544: ubfx            x0, x0, #0xc, #0x14
    // 0x875548: r2 = "visitorCoachCard"
    //     0x875548: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x87554c: ldr             x2, [x2, #0x200]
    // 0x875550: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875550: sub             lr, x0, #0xb4
    //     0x875554: ldr             lr, [x21, lr, lsl #3]
    //     0x875558: blr             lr
    // 0x87555c: cmp             w0, NULL
    // 0x875560: b.ne            #0x875640
    // 0x875564: nop             
    // 0x875568: ldur            x1, [fp, #-0x10]
    // 0x87556c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87556c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x875570: r0 = filterUnobtainedCard()
    //     0x875570: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x875574: mov             x1, x0
    // 0x875578: r0 = isNotEmpty()
    //     0x875578: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x87557c: tbnz            w0, #4, #0x8755ec
    // 0x875580: nop             
    // 0x875584: ldur            x1, [fp, #-0x10]
    // 0x875588: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x875588: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87558c: r0 = filterUnobtainedCard()
    //     0x87558c: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x875590: mov             x1, x0
    // 0x875594: r0 = shuffle()
    //     0x875594: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x875598: mov             x1, x0
    // 0x87559c: r0 = first()
    //     0x87559c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8755a0: mov             x3, x0
    // 0x8755a4: r2 = Null
    //     0x8755a4: mov             x2, NULL
    // 0x8755a8: r1 = Null
    //     0x8755a8: mov             x1, NULL
    // 0x8755ac: stur            x3, [fp, #-0x18]
    // 0x8755b0: r4 = 59
    //     0x8755b0: movz            x4, #0x3b
    // 0x8755b4: branchIfSmi(r0, 0x8755c4)
    //     0x8755b4: tbz             w0, #0, #0x8755c4
    //     0x8755b8: nop             
    // 0x8755bc: r4 = LoadClassIdInstr(r0)
    //     0x8755bc: ldur            x4, [x0, #-1]
    //     0x8755c0: ubfx            x4, x4, #0xc, #0x14
    // 0x8755c4: sub             x4, x4, #0x5d
    // 0x8755c8: cmp             x4, #1
    // 0x8755cc: b.ls            #0x8755e4
    // 0x8755d0: nop             
    // 0x8755d4: r8 = String
    //     0x8755d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8755d8: r3 = Null
    //     0x8755d8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11208] Null
    //     0x8755dc: ldr             x3, [x3, #0x208]
    // 0x8755e0: r0 = String()
    //     0x8755e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8755e4: ldur            x4, [fp, #-0x18]
    // 0x8755e8: b               #0x8755f4
    // 0x8755ec: r4 = "stroke"
    //     0x8755ec: add             x4, PP, #0xf, lsl #12  ; [pp+0xf2d0] "stroke"
    //     0x8755f0: ldr             x4, [x4, #0x2d0]
    // 0x8755f4: stur            x4, [fp, #-0x18]
    // 0x8755f8: r0 = LoadStaticField(0xb54)
    //     0x8755f8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8755fc: ldr             x0, [x0, #0x16a8]
    // 0x875600: cmp             w0, NULL
    // 0x875604: b.eq            #0x875638
    // 0x875608: nop             
    // 0x87560c: r17 = 351
    //     0x87560c: movz            x17, #0x15f
    // 0x875610: ldr             w1, [x0, x17]
    // 0x875614: DecompressPointer r1
    //     0x875614: add             x1, x1, HEAP, lsl #32
    // 0x875618: r0 = LoadClassIdInstr(r1)
    //     0x875618: ldur            x0, [x1, #-1]
    //     0x87561c: ubfx            x0, x0, #0xc, #0x14
    // 0x875620: mov             x3, x4
    // 0x875624: r2 = "visitorCoachCard"
    //     0x875624: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x875628: ldr             x2, [x2, #0x200]
    // 0x87562c: r0 = GDT[cid_x0 + 0x2da]()
    //     0x87562c: add             lr, x0, #0x2da
    //     0x875630: ldr             lr, [x21, lr, lsl #3]
    //     0x875634: blr             lr
    // 0x875638: ldur            x0, [fp, #-0x18]
    // 0x87563c: b               #0x8838b4
    // 0x875640: ldur            x16, [fp, #-8]
    // 0x875644: r30 = true
    //     0x875644: add             lr, NULL, #0x20  ; true
    // 0x875648: stp             lr, x16, [SP]
    // 0x87564c: r0 = ==()
    //     0x87564c: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x875650: tbnz            w0, #4, #0x875700
    // 0x875654: nop             
    // 0x875658: r0 = LoadStaticField(0xb54)
    //     0x875658: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87565c: ldr             x0, [x0, #0x16a8]
    // 0x875660: cmp             w0, NULL
    // 0x875664: b.ne            #0x875674
    // 0x875668: nop             
    // 0x87566c: r0 = Null
    //     0x87566c: mov             x0, NULL
    // 0x875670: b               #0x87569c
    // 0x875674: r17 = 351
    //     0x875674: movz            x17, #0x15f
    // 0x875678: ldr             w1, [x0, x17]
    // 0x87567c: DecompressPointer r1
    //     0x87567c: add             x1, x1, HEAP, lsl #32
    // 0x875680: r0 = LoadClassIdInstr(r1)
    //     0x875680: ldur            x0, [x1, #-1]
    //     0x875684: ubfx            x0, x0, #0xc, #0x14
    // 0x875688: r2 = "visitorCoachCard"
    //     0x875688: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x87568c: ldr             x2, [x2, #0x200]
    // 0x875690: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875690: sub             lr, x0, #0xb4
    //     0x875694: ldr             lr, [x21, lr, lsl #3]
    //     0x875698: blr             lr
    // 0x87569c: cmp             w0, NULL
    // 0x8756a0: b.ne            #0x8756b0
    // 0x8756a4: nop             
    // 0x8756a8: r3 = ""
    //     0x8756a8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8756ac: b               #0x8756b4
    // 0x8756b0: mov             x3, x0
    // 0x8756b4: mov             x0, x3
    // 0x8756b8: stur            x3, [fp, #-8]
    // 0x8756bc: r2 = Null
    //     0x8756bc: mov             x2, NULL
    // 0x8756c0: r1 = Null
    //     0x8756c0: mov             x1, NULL
    // 0x8756c4: r4 = 59
    //     0x8756c4: movz            x4, #0x3b
    // 0x8756c8: branchIfSmi(r0, 0x8756d8)
    //     0x8756c8: tbz             w0, #0, #0x8756d8
    //     0x8756cc: nop             
    // 0x8756d0: r4 = LoadClassIdInstr(r0)
    //     0x8756d0: ldur            x4, [x0, #-1]
    //     0x8756d4: ubfx            x4, x4, #0xc, #0x14
    // 0x8756d8: sub             x4, x4, #0x5d
    // 0x8756dc: cmp             x4, #1
    // 0x8756e0: b.ls            #0x8756f8
    // 0x8756e4: nop             
    // 0x8756e8: r8 = String
    //     0x8756e8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8756ec: r3 = Null
    //     0x8756ec: add             x3, PP, #0x11, lsl #12  ; [pp+0x11218] Null
    //     0x8756f0: ldr             x3, [x3, #0x218]
    // 0x8756f4: r0 = String()
    //     0x8756f4: bl              #0x1523244  ; IsType_String_Stub
    // 0x8756f8: ldur            x0, [fp, #-8]
    // 0x8756fc: b               #0x8838b4
    // 0x875700: ldur            x1, [fp, #-0x10]
    // 0x875704: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x875704: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x875708: r0 = filterUnobtainedCard()
    //     0x875708: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x87570c: mov             x1, x0
    // 0x875710: r0 = isNotEmpty()
    //     0x875710: bl              #0x9d2c28  ; [dart:core] _GrowableList::isNotEmpty
    // 0x875714: tbnz            w0, #4, #0x875784
    // 0x875718: nop             
    // 0x87571c: ldur            x1, [fp, #-0x10]
    // 0x875720: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x875720: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x875724: r0 = filterUnobtainedCard()
    //     0x875724: bl              #0x8a62cc  ; [package:battlecross/method/cardMethod.dart] ::filterUnobtainedCard
    // 0x875728: mov             x1, x0
    // 0x87572c: r0 = shuffle()
    //     0x87572c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x875730: mov             x1, x0
    // 0x875734: r0 = first()
    //     0x875734: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x875738: mov             x3, x0
    // 0x87573c: r2 = Null
    //     0x87573c: mov             x2, NULL
    // 0x875740: r1 = Null
    //     0x875740: mov             x1, NULL
    // 0x875744: stur            x3, [fp, #-8]
    // 0x875748: r4 = 59
    //     0x875748: movz            x4, #0x3b
    // 0x87574c: branchIfSmi(r0, 0x87575c)
    //     0x87574c: tbz             w0, #0, #0x87575c
    //     0x875750: nop             
    // 0x875754: r4 = LoadClassIdInstr(r0)
    //     0x875754: ldur            x4, [x0, #-1]
    //     0x875758: ubfx            x4, x4, #0xc, #0x14
    // 0x87575c: sub             x4, x4, #0x5d
    // 0x875760: cmp             x4, #1
    // 0x875764: b.ls            #0x87577c
    // 0x875768: nop             
    // 0x87576c: r8 = String
    //     0x87576c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x875770: r3 = Null
    //     0x875770: add             x3, PP, #0x11, lsl #12  ; [pp+0x11228] Null
    //     0x875774: ldr             x3, [x3, #0x228]
    // 0x875778: r0 = String()
    //     0x875778: bl              #0x1523244  ; IsType_String_Stub
    // 0x87577c: ldur            x4, [fp, #-8]
    // 0x875780: b               #0x87578c
    // 0x875784: r4 = "stroke"
    //     0x875784: add             x4, PP, #0xf, lsl #12  ; [pp+0xf2d0] "stroke"
    //     0x875788: ldr             x4, [x4, #0x2d0]
    // 0x87578c: stur            x4, [fp, #-8]
    // 0x875790: r0 = LoadStaticField(0xb54)
    //     0x875790: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875794: ldr             x0, [x0, #0x16a8]
    // 0x875798: cmp             w0, NULL
    // 0x87579c: b.eq            #0x8757d0
    // 0x8757a0: nop             
    // 0x8757a4: r17 = 351
    //     0x8757a4: movz            x17, #0x15f
    // 0x8757a8: ldr             w1, [x0, x17]
    // 0x8757ac: DecompressPointer r1
    //     0x8757ac: add             x1, x1, HEAP, lsl #32
    // 0x8757b0: r0 = LoadClassIdInstr(r1)
    //     0x8757b0: ldur            x0, [x1, #-1]
    //     0x8757b4: ubfx            x0, x0, #0xc, #0x14
    // 0x8757b8: mov             x3, x4
    // 0x8757bc: r2 = "visitorCoachCard"
    //     0x8757bc: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x8757c0: ldr             x2, [x2, #0x200]
    // 0x8757c4: r0 = GDT[cid_x0 + 0x2da]()
    //     0x8757c4: add             lr, x0, #0x2da
    //     0x8757c8: ldr             lr, [x21, lr, lsl #3]
    //     0x8757cc: blr             lr
    // 0x8757d0: ldur            x0, [fp, #-8]
    // 0x8757d4: b               #0x8838b4
    // 0x8757d8: r16 = "travellingCoach2"
    //     0x8757d8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11238] "travellingCoach2"
    //     0x8757dc: ldr             x16, [x16, #0x238]
    // 0x8757e0: ldur            lr, [fp, #-0x28]
    // 0x8757e4: stp             lr, x16, [SP]
    // 0x8757e8: r0 = ==()
    //     0x8757e8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8757ec: tbnz            w0, #4, #0x875c00
    // 0x8757f0: nop             
    // 0x8757f4: r0 = LoadStaticField(0xb54)
    //     0x8757f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8757f8: ldr             x0, [x0, #0x16a8]
    // 0x8757fc: cmp             w0, NULL
    // 0x875800: b.ne            #0x875810
    // 0x875804: nop             
    // 0x875808: r0 = Null
    //     0x875808: mov             x0, NULL
    // 0x87580c: b               #0x875838
    // 0x875810: r17 = 331
    //     0x875810: movz            x17, #0x14b
    // 0x875814: ldr             w1, [x0, x17]
    // 0x875818: DecompressPointer r1
    //     0x875818: add             x1, x1, HEAP, lsl #32
    // 0x87581c: r0 = LoadClassIdInstr(r1)
    //     0x87581c: ldur            x0, [x1, #-1]
    //     0x875820: ubfx            x0, x0, #0xc, #0x14
    // 0x875824: r2 = "visitorCoach"
    //     0x875824: add             x2, PP, #0x11, lsl #12  ; [pp+0x111e8] "visitorCoach"
    //     0x875828: ldr             x2, [x2, #0x1e8]
    // 0x87582c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87582c: sub             lr, x0, #0xb4
    //     0x875830: ldr             lr, [x21, lr, lsl #3]
    //     0x875834: blr             lr
    // 0x875838: cmp             w0, NULL
    // 0x87583c: b.ne            #0x875858
    // 0x875840: nop             
    // 0x875844: r1 = Null
    //     0x875844: mov             x1, NULL
    // 0x875848: r2 = 0
    //     0x875848: movz            x2, #0
    // 0x87584c: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x87584c: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x875850: mov             x3, x0
    // 0x875854: b               #0x87585c
    // 0x875858: mov             x3, x0
    // 0x87585c: mov             x0, x3
    // 0x875860: stur            x3, [fp, #-8]
    // 0x875864: r2 = Null
    //     0x875864: mov             x2, NULL
    // 0x875868: r1 = Null
    //     0x875868: mov             x1, NULL
    // 0x87586c: r4 = 59
    //     0x87586c: movz            x4, #0x3b
    // 0x875870: branchIfSmi(r0, 0x875880)
    //     0x875870: tbz             w0, #0, #0x875880
    //     0x875874: nop             
    // 0x875878: r4 = LoadClassIdInstr(r0)
    //     0x875878: ldur            x4, [x0, #-1]
    //     0x87587c: ubfx            x4, x4, #0xc, #0x14
    // 0x875880: cmp             x4, #0xcdb
    // 0x875884: b.eq            #0x8758a0
    // 0x875888: nop             
    // 0x87588c: r8 = Timestamp
    //     0x87588c: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x875890: ldr             x8, [x8, #0xa30]
    // 0x875894: r3 = Null
    //     0x875894: add             x3, PP, #0x11, lsl #12  ; [pp+0x11240] Null
    //     0x875898: ldr             x3, [x3, #0x240]
    // 0x87589c: r0 = Timestamp()
    //     0x87589c: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x8758a0: ldur            x1, [fp, #-8]
    // 0x8758a4: r0 = toDate()
    //     0x8758a4: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8758a8: stur            x0, [fp, #-8]
    // 0x8758ac: r0 = getTrueDateTime()
    //     0x8758ac: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8758b0: ldur            x1, [fp, #-8]
    // 0x8758b4: stur            x0, [fp, #-0x10]
    // 0x8758b8: r0 = day()
    //     0x8758b8: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x8758bc: ldur            x1, [fp, #-0x10]
    // 0x8758c0: stur            x0, [fp, #-0x38]
    // 0x8758c4: r0 = day()
    //     0x8758c4: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x8758c8: mov             x1, x0
    // 0x8758cc: ldur            x0, [fp, #-0x38]
    // 0x8758d0: cmp             x0, x1
    // 0x8758d4: b.ne            #0x875938
    // 0x8758d8: nop             
    // 0x8758dc: ldur            x1, [fp, #-8]
    // 0x8758e0: r0 = month()
    //     0x8758e0: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x8758e4: ldur            x1, [fp, #-0x10]
    // 0x8758e8: stur            x0, [fp, #-0x38]
    // 0x8758ec: r0 = month()
    //     0x8758ec: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x8758f0: mov             x1, x0
    // 0x8758f4: ldur            x0, [fp, #-0x38]
    // 0x8758f8: cmp             x0, x1
    // 0x8758fc: b.ne            #0x875938
    // 0x875900: nop             
    // 0x875904: ldur            x1, [fp, #-8]
    // 0x875908: r0 = year()
    //     0x875908: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x87590c: ldur            x1, [fp, #-0x10]
    // 0x875910: stur            x0, [fp, #-0x38]
    // 0x875914: r0 = year()
    //     0x875914: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x875918: mov             x1, x0
    // 0x87591c: ldur            x0, [fp, #-0x38]
    // 0x875920: cmp             x0, x1
    // 0x875924: r16 = true
    //     0x875924: add             x16, NULL, #0x20  ; true
    // 0x875928: r17 = false
    //     0x875928: add             x17, NULL, #0x30  ; false
    // 0x87592c: csel            x2, x16, x17, eq
    // 0x875930: mov             x0, x2
    // 0x875934: b               #0x87593c
    // 0x875938: r0 = false
    //     0x875938: add             x0, NULL, #0x30  ; false
    // 0x87593c: stur            x0, [fp, #-8]
    // 0x875940: r1 = <CardRarity>
    //     0x875940: add             x1, PP, #0x10, lsl #12  ; [pp+0x10518] TypeArguments: <CardRarity>
    //     0x875944: ldr             x1, [x1, #0x518]
    // 0x875948: r2 = Instance_CardRarity
    //     0x875948: add             x2, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x87594c: ldr             x2, [x2, #0xf10]
    // 0x875950: r3 = Instance_CardRarity
    //     0x875950: add             x3, PP, #0x10, lsl #12  ; [pp+0x10558] Obj!CardRarity@ec84c1
    //     0x875954: ldr             x3, [x3, #0x558]
    // 0x875958: r0 = _GrowableList._literal2()
    //     0x875958: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x87595c: stur            x0, [fp, #-0x10]
    // 0x875960: r0 = cardList()
    //     0x875960: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x875964: mov             x1, x0
    // 0x875968: ldur            x2, [fp, #-0x10]
    // 0x87596c: r0 = getCardListByRarity()
    //     0x87596c: bl              #0x8a6690  ; [package:battlecross/method/cardMethod.dart] ::getCardListByRarity
    // 0x875970: mov             x3, x0
    // 0x875974: stur            x3, [fp, #-0x10]
    // 0x875978: r0 = LoadStaticField(0xb54)
    //     0x875978: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87597c: ldr             x0, [x0, #0x16a8]
    // 0x875980: cmp             w0, NULL
    // 0x875984: b.eq            #0x8759c0
    // 0x875988: nop             
    // 0x87598c: r17 = 351
    //     0x87598c: movz            x17, #0x15f
    // 0x875990: ldr             w1, [x0, x17]
    // 0x875994: DecompressPointer r1
    //     0x875994: add             x1, x1, HEAP, lsl #32
    // 0x875998: r0 = LoadClassIdInstr(r1)
    //     0x875998: ldur            x0, [x1, #-1]
    //     0x87599c: ubfx            x0, x0, #0xc, #0x14
    // 0x8759a0: r2 = "visitorCoachCard"
    //     0x8759a0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x8759a4: ldr             x2, [x2, #0x200]
    // 0x8759a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8759a8: sub             lr, x0, #0xb4
    //     0x8759ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8759b0: blr             lr
    // 0x8759b4: cmp             w0, NULL
    // 0x8759b8: b.ne            #0x875a80
    // 0x8759bc: nop             
    // 0x8759c0: CheckStackOverflow
    //     0x8759c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8759c4: cmp             SP, x16
    //     0x8759c8: b.ls            #0x88398c
    //     0x8759cc: nop             
    // 0x8759d0: ldur            x1, [fp, #-0x10]
    // 0x8759d4: r0 = shuffle()
    //     0x8759d4: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8759d8: mov             x1, x0
    // 0x8759dc: r0 = first()
    //     0x8759dc: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8759e0: mov             x3, x0
    // 0x8759e4: r2 = Null
    //     0x8759e4: mov             x2, NULL
    // 0x8759e8: r1 = Null
    //     0x8759e8: mov             x1, NULL
    // 0x8759ec: stur            x3, [fp, #-0x18]
    // 0x8759f0: r4 = 59
    //     0x8759f0: movz            x4, #0x3b
    // 0x8759f4: branchIfSmi(r0, 0x875a04)
    //     0x8759f4: tbz             w0, #0, #0x875a04
    //     0x8759f8: nop             
    // 0x8759fc: r4 = LoadClassIdInstr(r0)
    //     0x8759fc: ldur            x4, [x0, #-1]
    //     0x875a00: ubfx            x4, x4, #0xc, #0x14
    // 0x875a04: sub             x4, x4, #0x5d
    // 0x875a08: cmp             x4, #1
    // 0x875a0c: b.ls            #0x875a24
    // 0x875a10: nop             
    // 0x875a14: r8 = String
    //     0x875a14: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x875a18: r3 = Null
    //     0x875a18: add             x3, PP, #0x11, lsl #12  ; [pp+0x11250] Null
    //     0x875a1c: ldr             x3, [x3, #0x250]
    // 0x875a20: r0 = String()
    //     0x875a20: bl              #0x1523244  ; IsType_String_Stub
    // 0x875a24: r0 = cardList()
    //     0x875a24: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x875a28: mov             x1, x0
    // 0x875a2c: ldur            x2, [fp, #-0x18]
    // 0x875a30: r0 = contains()
    //     0x875a30: bl              #0x9de644  ; [dart:collection] ListBase::contains
    // 0x875a34: tbnz            w0, #4, #0x8759c0
    // 0x875a38: r0 = LoadStaticField(0xb54)
    //     0x875a38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875a3c: ldr             x0, [x0, #0x16a8]
    // 0x875a40: cmp             w0, NULL
    // 0x875a44: b.eq            #0x875a78
    // 0x875a48: nop             
    // 0x875a4c: r17 = 351
    //     0x875a4c: movz            x17, #0x15f
    // 0x875a50: ldr             w1, [x0, x17]
    // 0x875a54: DecompressPointer r1
    //     0x875a54: add             x1, x1, HEAP, lsl #32
    // 0x875a58: r0 = LoadClassIdInstr(r1)
    //     0x875a58: ldur            x0, [x1, #-1]
    //     0x875a5c: ubfx            x0, x0, #0xc, #0x14
    // 0x875a60: ldur            x3, [fp, #-0x18]
    // 0x875a64: r2 = "visitorCoachCard"
    //     0x875a64: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x875a68: ldr             x2, [x2, #0x200]
    // 0x875a6c: r0 = GDT[cid_x0 + 0x2da]()
    //     0x875a6c: add             lr, x0, #0x2da
    //     0x875a70: ldr             lr, [x21, lr, lsl #3]
    //     0x875a74: blr             lr
    // 0x875a78: ldur            x0, [fp, #-0x18]
    // 0x875a7c: b               #0x8838b4
    // 0x875a80: ldur            x16, [fp, #-8]
    // 0x875a84: r30 = true
    //     0x875a84: add             lr, NULL, #0x20  ; true
    // 0x875a88: stp             lr, x16, [SP]
    // 0x875a8c: r0 = ==()
    //     0x875a8c: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x875a90: tbnz            w0, #4, #0x875b40
    // 0x875a94: nop             
    // 0x875a98: r0 = LoadStaticField(0xb54)
    //     0x875a98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875a9c: ldr             x0, [x0, #0x16a8]
    // 0x875aa0: cmp             w0, NULL
    // 0x875aa4: b.ne            #0x875ab4
    // 0x875aa8: nop             
    // 0x875aac: r0 = Null
    //     0x875aac: mov             x0, NULL
    // 0x875ab0: b               #0x875adc
    // 0x875ab4: r17 = 351
    //     0x875ab4: movz            x17, #0x15f
    // 0x875ab8: ldr             w1, [x0, x17]
    // 0x875abc: DecompressPointer r1
    //     0x875abc: add             x1, x1, HEAP, lsl #32
    // 0x875ac0: r0 = LoadClassIdInstr(r1)
    //     0x875ac0: ldur            x0, [x1, #-1]
    //     0x875ac4: ubfx            x0, x0, #0xc, #0x14
    // 0x875ac8: r2 = "visitorCoachCard"
    //     0x875ac8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x875acc: ldr             x2, [x2, #0x200]
    // 0x875ad0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875ad0: sub             lr, x0, #0xb4
    //     0x875ad4: ldr             lr, [x21, lr, lsl #3]
    //     0x875ad8: blr             lr
    // 0x875adc: cmp             w0, NULL
    // 0x875ae0: b.ne            #0x875af0
    // 0x875ae4: nop             
    // 0x875ae8: r3 = ""
    //     0x875ae8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x875aec: b               #0x875af4
    // 0x875af0: mov             x3, x0
    // 0x875af4: mov             x0, x3
    // 0x875af8: stur            x3, [fp, #-8]
    // 0x875afc: r2 = Null
    //     0x875afc: mov             x2, NULL
    // 0x875b00: r1 = Null
    //     0x875b00: mov             x1, NULL
    // 0x875b04: r4 = 59
    //     0x875b04: movz            x4, #0x3b
    // 0x875b08: branchIfSmi(r0, 0x875b18)
    //     0x875b08: tbz             w0, #0, #0x875b18
    //     0x875b0c: nop             
    // 0x875b10: r4 = LoadClassIdInstr(r0)
    //     0x875b10: ldur            x4, [x0, #-1]
    //     0x875b14: ubfx            x4, x4, #0xc, #0x14
    // 0x875b18: sub             x4, x4, #0x5d
    // 0x875b1c: cmp             x4, #1
    // 0x875b20: b.ls            #0x875b38
    // 0x875b24: nop             
    // 0x875b28: r8 = String
    //     0x875b28: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x875b2c: r3 = Null
    //     0x875b2c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11260] Null
    //     0x875b30: ldr             x3, [x3, #0x260]
    // 0x875b34: r0 = String()
    //     0x875b34: bl              #0x1523244  ; IsType_String_Stub
    // 0x875b38: ldur            x0, [fp, #-8]
    // 0x875b3c: b               #0x8838b4
    // 0x875b40: CheckStackOverflow
    //     0x875b40: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x875b44: cmp             SP, x16
    //     0x875b48: b.ls            #0x883994
    //     0x875b4c: nop             
    // 0x875b50: ldur            x1, [fp, #-0x10]
    // 0x875b54: r0 = shuffle()
    //     0x875b54: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x875b58: mov             x1, x0
    // 0x875b5c: r0 = first()
    //     0x875b5c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x875b60: mov             x3, x0
    // 0x875b64: r2 = Null
    //     0x875b64: mov             x2, NULL
    // 0x875b68: r1 = Null
    //     0x875b68: mov             x1, NULL
    // 0x875b6c: stur            x3, [fp, #-8]
    // 0x875b70: r4 = 59
    //     0x875b70: movz            x4, #0x3b
    // 0x875b74: branchIfSmi(r0, 0x875b84)
    //     0x875b74: tbz             w0, #0, #0x875b84
    //     0x875b78: nop             
    // 0x875b7c: r4 = LoadClassIdInstr(r0)
    //     0x875b7c: ldur            x4, [x0, #-1]
    //     0x875b80: ubfx            x4, x4, #0xc, #0x14
    // 0x875b84: sub             x4, x4, #0x5d
    // 0x875b88: cmp             x4, #1
    // 0x875b8c: b.ls            #0x875ba4
    // 0x875b90: nop             
    // 0x875b94: r8 = String
    //     0x875b94: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x875b98: r3 = Null
    //     0x875b98: add             x3, PP, #0x11, lsl #12  ; [pp+0x11270] Null
    //     0x875b9c: ldr             x3, [x3, #0x270]
    // 0x875ba0: r0 = String()
    //     0x875ba0: bl              #0x1523244  ; IsType_String_Stub
    // 0x875ba4: r0 = cardList()
    //     0x875ba4: bl              #0x8a6d60  ; [package:battlecross/constants.dart] ::cardList
    // 0x875ba8: mov             x1, x0
    // 0x875bac: ldur            x2, [fp, #-8]
    // 0x875bb0: r0 = contains()
    //     0x875bb0: bl              #0x9de644  ; [dart:collection] ListBase::contains
    // 0x875bb4: tbnz            w0, #4, #0x875b40
    // 0x875bb8: r0 = LoadStaticField(0xb54)
    //     0x875bb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875bbc: ldr             x0, [x0, #0x16a8]
    // 0x875bc0: cmp             w0, NULL
    // 0x875bc4: b.eq            #0x875bf8
    // 0x875bc8: nop             
    // 0x875bcc: r17 = 351
    //     0x875bcc: movz            x17, #0x15f
    // 0x875bd0: ldr             w1, [x0, x17]
    // 0x875bd4: DecompressPointer r1
    //     0x875bd4: add             x1, x1, HEAP, lsl #32
    // 0x875bd8: r0 = LoadClassIdInstr(r1)
    //     0x875bd8: ldur            x0, [x1, #-1]
    //     0x875bdc: ubfx            x0, x0, #0xc, #0x14
    // 0x875be0: ldur            x3, [fp, #-8]
    // 0x875be4: r2 = "visitorCoachCard"
    //     0x875be4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11200] "visitorCoachCard"
    //     0x875be8: ldr             x2, [x2, #0x200]
    // 0x875bec: r0 = GDT[cid_x0 + 0x2da]()
    //     0x875bec: add             lr, x0, #0x2da
    //     0x875bf0: ldr             lr, [x21, lr, lsl #3]
    //     0x875bf4: blr             lr
    // 0x875bf8: ldur            x0, [fp, #-8]
    // 0x875bfc: b               #0x8838b4
    // 0x875c00: r16 = "council1Trigger"
    //     0x875c00: add             x16, PP, #0x11, lsl #12  ; [pp+0x11280] "council1Trigger"
    //     0x875c04: ldr             x16, [x16, #0x280]
    // 0x875c08: ldur            lr, [fp, #-0x28]
    // 0x875c0c: stp             lr, x16, [SP]
    // 0x875c10: r0 = ==()
    //     0x875c10: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875c14: tbnz            w0, #4, #0x875c44
    // 0x875c18: nop             
    // 0x875c1c: r4 = const [0, 0, 0, 0, null]
    //     0x875c1c: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x875c20: r0 = getTotalUnlockedCards()
    //     0x875c20: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x875c24: cmp             x0, #0x32
    // 0x875c28: b.lt            #0x875c3c
    // 0x875c2c: nop             
    // 0x875c30: r0 = "questCouncilStory"
    //     0x875c30: add             x0, PP, #0x11, lsl #12  ; [pp+0x11288] "questCouncilStory"
    //     0x875c34: ldr             x0, [x0, #0x288]
    // 0x875c38: b               #0x8838b4
    // 0x875c3c: r0 = "end"
    //     0x875c3c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x875c40: b               #0x8838b4
    // 0x875c44: r16 = "9exp9goldTradeType"
    //     0x875c44: add             x16, PP, #0xf, lsl #12  ; [pp+0xfc98] "9exp9goldTradeType"
    //     0x875c48: ldr             x16, [x16, #0xc98]
    // 0x875c4c: ldur            lr, [fp, #-0x28]
    // 0x875c50: stp             lr, x16, [SP]
    // 0x875c54: r0 = ==()
    //     0x875c54: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875c58: tbnz            w0, #4, #0x875cf4
    // 0x875c5c: nop             
    // 0x875c60: r0 = LoadStaticField(0xb54)
    //     0x875c60: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875c64: ldr             x0, [x0, #0x16a8]
    // 0x875c68: cmp             w0, NULL
    // 0x875c6c: b.ne            #0x875c7c
    // 0x875c70: nop             
    // 0x875c74: r0 = Null
    //     0x875c74: mov             x0, NULL
    // 0x875c78: b               #0x875ca4
    // 0x875c7c: r17 = 351
    //     0x875c7c: movz            x17, #0x15f
    // 0x875c80: ldr             w1, [x0, x17]
    // 0x875c84: DecompressPointer r1
    //     0x875c84: add             x1, x1, HEAP, lsl #32
    // 0x875c88: r0 = LoadClassIdInstr(r1)
    //     0x875c88: ldur            x0, [x1, #-1]
    //     0x875c8c: ubfx            x0, x0, #0xc, #0x14
    // 0x875c90: r2 = "9exp9goldTradeType"
    //     0x875c90: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc98] "9exp9goldTradeType"
    //     0x875c94: ldr             x2, [x2, #0xc98]
    // 0x875c98: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875c98: sub             lr, x0, #0xb4
    //     0x875c9c: ldr             lr, [x21, lr, lsl #3]
    //     0x875ca0: blr             lr
    // 0x875ca4: r1 = 59
    //     0x875ca4: movz            x1, #0x3b
    // 0x875ca8: branchIfSmi(r0, 0x875cb8)
    //     0x875ca8: tbz             w0, #0, #0x875cb8
    //     0x875cac: nop             
    // 0x875cb0: r1 = LoadClassIdInstr(r0)
    //     0x875cb0: ldur            x1, [x0, #-1]
    //     0x875cb4: ubfx            x1, x1, #0xc, #0x14
    // 0x875cb8: r16 = "9exp9gold"
    //     0x875cb8: add             x16, PP, #0xf, lsl #12  ; [pp+0xfc88] "9exp9gold"
    //     0x875cbc: ldr             x16, [x16, #0xc88]
    // 0x875cc0: stp             x16, x0, [SP]
    // 0x875cc4: mov             x0, x1
    // 0x875cc8: mov             lr, x0
    // 0x875ccc: ldr             lr, [x21, lr, lsl #3]
    // 0x875cd0: blr             lr
    // 0x875cd4: tbnz            w0, #4, #0x875ce8
    // 0x875cd8: nop             
    // 0x875cdc: r0 = "type1"
    //     0x875cdc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11290] "type1"
    //     0x875ce0: ldr             x0, [x0, #0x290]
    // 0x875ce4: b               #0x8838b4
    // 0x875ce8: r0 = "type2"
    //     0x875ce8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11298] "type2"
    //     0x875cec: ldr             x0, [x0, #0x298]
    // 0x875cf0: b               #0x8838b4
    // 0x875cf4: r16 = "9bundle"
    //     0x875cf4: add             x16, PP, #0xf, lsl #12  ; [pp+0xfc90] "9bundle"
    //     0x875cf8: ldr             x16, [x16, #0xc90]
    // 0x875cfc: ldur            lr, [fp, #-0x28]
    // 0x875d00: stp             lr, x16, [SP]
    // 0x875d04: r0 = ==()
    //     0x875d04: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875d08: tbnz            w0, #4, #0x875f60
    // 0x875d0c: nop             
    // 0x875d10: r0 = LoadStaticField(0xb54)
    //     0x875d10: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875d14: ldr             x0, [x0, #0x16a8]
    // 0x875d18: cmp             w0, NULL
    // 0x875d1c: b.ne            #0x875d2c
    // 0x875d20: nop             
    // 0x875d24: r0 = Null
    //     0x875d24: mov             x0, NULL
    // 0x875d28: b               #0x875d54
    // 0x875d2c: r17 = 339
    //     0x875d2c: movz            x17, #0x153
    // 0x875d30: ldr             w1, [x0, x17]
    // 0x875d34: DecompressPointer r1
    //     0x875d34: add             x1, x1, HEAP, lsl #32
    // 0x875d38: r0 = LoadClassIdInstr(r1)
    //     0x875d38: ldur            x0, [x1, #-1]
    //     0x875d3c: ubfx            x0, x0, #0xc, #0x14
    // 0x875d40: r2 = "portal"
    //     0x875d40: add             x2, PP, #0x10, lsl #12  ; [pp+0x10768] "portal"
    //     0x875d44: ldr             x2, [x2, #0x768]
    // 0x875d48: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875d48: sub             lr, x0, #0xb4
    //     0x875d4c: ldr             lr, [x21, lr, lsl #3]
    //     0x875d50: blr             lr
    // 0x875d54: cmp             w0, NULL
    // 0x875d58: b.ne            #0x875d68
    // 0x875d5c: nop             
    // 0x875d60: r3 = 0
    //     0x875d60: movz            x3, #0
    // 0x875d64: b               #0x875d6c
    // 0x875d68: mov             x3, x0
    // 0x875d6c: mov             x0, x3
    // 0x875d70: stur            x3, [fp, #-8]
    // 0x875d74: r2 = Null
    //     0x875d74: mov             x2, NULL
    // 0x875d78: r1 = Null
    //     0x875d78: mov             x1, NULL
    // 0x875d7c: branchIfSmi(r0, 0x875dac)
    //     0x875d7c: tbz             w0, #0, #0x875dac
    //     0x875d80: nop             
    // 0x875d84: r4 = LoadClassIdInstr(r0)
    //     0x875d84: ldur            x4, [x0, #-1]
    //     0x875d88: ubfx            x4, x4, #0xc, #0x14
    // 0x875d8c: sub             x4, x4, #0x3b
    // 0x875d90: cmp             x4, #1
    // 0x875d94: b.ls            #0x875dac
    // 0x875d98: nop             
    // 0x875d9c: r8 = int
    //     0x875d9c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x875da0: r3 = Null
    //     0x875da0: add             x3, PP, #0x11, lsl #12  ; [pp+0x112a0] Null
    //     0x875da4: ldr             x3, [x3, #0x2a0]
    // 0x875da8: r0 = int()
    //     0x875da8: bl              #0x1524294  ; IsType_int_Stub
    // 0x875dac: r0 = LoadStaticField(0xb54)
    //     0x875dac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875db0: ldr             x0, [x0, #0x16a8]
    // 0x875db4: cmp             w0, NULL
    // 0x875db8: b.ne            #0x875dc8
    // 0x875dbc: nop             
    // 0x875dc0: r0 = Null
    //     0x875dc0: mov             x0, NULL
    // 0x875dc4: b               #0x875df0
    // 0x875dc8: r17 = 339
    //     0x875dc8: movz            x17, #0x153
    // 0x875dcc: ldr             w1, [x0, x17]
    // 0x875dd0: DecompressPointer r1
    //     0x875dd0: add             x1, x1, HEAP, lsl #32
    // 0x875dd4: r0 = LoadClassIdInstr(r1)
    //     0x875dd4: ldur            x0, [x1, #-1]
    //     0x875dd8: ubfx            x0, x0, #0xc, #0x14
    // 0x875ddc: r2 = "taxi"
    //     0x875ddc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10780] "taxi"
    //     0x875de0: ldr             x2, [x2, #0x780]
    // 0x875de4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875de4: sub             lr, x0, #0xb4
    //     0x875de8: ldr             lr, [x21, lr, lsl #3]
    //     0x875dec: blr             lr
    // 0x875df0: cmp             w0, NULL
    // 0x875df4: b.ne            #0x875e04
    // 0x875df8: nop             
    // 0x875dfc: r3 = 0
    //     0x875dfc: movz            x3, #0
    // 0x875e00: b               #0x875e08
    // 0x875e04: mov             x3, x0
    // 0x875e08: mov             x0, x3
    // 0x875e0c: stur            x3, [fp, #-0x10]
    // 0x875e10: r2 = Null
    //     0x875e10: mov             x2, NULL
    // 0x875e14: r1 = Null
    //     0x875e14: mov             x1, NULL
    // 0x875e18: branchIfSmi(r0, 0x875e48)
    //     0x875e18: tbz             w0, #0, #0x875e48
    //     0x875e1c: nop             
    // 0x875e20: r4 = LoadClassIdInstr(r0)
    //     0x875e20: ldur            x4, [x0, #-1]
    //     0x875e24: ubfx            x4, x4, #0xc, #0x14
    // 0x875e28: sub             x4, x4, #0x3b
    // 0x875e2c: cmp             x4, #1
    // 0x875e30: b.ls            #0x875e48
    // 0x875e34: nop             
    // 0x875e38: r8 = int
    //     0x875e38: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x875e3c: r3 = Null
    //     0x875e3c: add             x3, PP, #0x11, lsl #12  ; [pp+0x112b0] Null
    //     0x875e40: ldr             x3, [x3, #0x2b0]
    // 0x875e44: r0 = int()
    //     0x875e44: bl              #0x1524294  ; IsType_int_Stub
    // 0x875e48: r0 = LoadStaticField(0xb54)
    //     0x875e48: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x875e4c: ldr             x0, [x0, #0x16a8]
    // 0x875e50: cmp             w0, NULL
    // 0x875e54: b.ne            #0x875e64
    // 0x875e58: nop             
    // 0x875e5c: r0 = Null
    //     0x875e5c: mov             x0, NULL
    // 0x875e60: b               #0x875e8c
    // 0x875e64: r17 = 339
    //     0x875e64: movz            x17, #0x153
    // 0x875e68: ldr             w1, [x0, x17]
    // 0x875e6c: DecompressPointer r1
    //     0x875e6c: add             x1, x1, HEAP, lsl #32
    // 0x875e70: r0 = LoadClassIdInstr(r1)
    //     0x875e70: ldur            x0, [x1, #-1]
    //     0x875e74: ubfx            x0, x0, #0xc, #0x14
    // 0x875e78: r2 = "remoteatm"
    //     0x875e78: add             x2, PP, #0x10, lsl #12  ; [pp+0x10750] "remoteatm"
    //     0x875e7c: ldr             x2, [x2, #0x750]
    // 0x875e80: r0 = GDT[cid_x0 + -0xb4]()
    //     0x875e80: sub             lr, x0, #0xb4
    //     0x875e84: ldr             lr, [x21, lr, lsl #3]
    //     0x875e88: blr             lr
    // 0x875e8c: cmp             w0, NULL
    // 0x875e90: b.ne            #0x875ea0
    // 0x875e94: nop             
    // 0x875e98: r4 = 0
    //     0x875e98: movz            x4, #0
    // 0x875e9c: b               #0x875ea4
    // 0x875ea0: mov             x4, x0
    // 0x875ea4: ldur            x3, [fp, #-8]
    // 0x875ea8: mov             x0, x4
    // 0x875eac: stur            x4, [fp, #-0x18]
    // 0x875eb0: r2 = Null
    //     0x875eb0: mov             x2, NULL
    // 0x875eb4: r1 = Null
    //     0x875eb4: mov             x1, NULL
    // 0x875eb8: branchIfSmi(r0, 0x875ee8)
    //     0x875eb8: tbz             w0, #0, #0x875ee8
    //     0x875ebc: nop             
    // 0x875ec0: r4 = LoadClassIdInstr(r0)
    //     0x875ec0: ldur            x4, [x0, #-1]
    //     0x875ec4: ubfx            x4, x4, #0xc, #0x14
    // 0x875ec8: sub             x4, x4, #0x3b
    // 0x875ecc: cmp             x4, #1
    // 0x875ed0: b.ls            #0x875ee8
    // 0x875ed4: nop             
    // 0x875ed8: r8 = int
    //     0x875ed8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x875edc: r3 = Null
    //     0x875edc: add             x3, PP, #0x11, lsl #12  ; [pp+0x112c0] Null
    //     0x875ee0: ldr             x3, [x3, #0x2c0]
    // 0x875ee4: r0 = int()
    //     0x875ee4: bl              #0x1524294  ; IsType_int_Stub
    // 0x875ee8: ldur            x0, [fp, #-8]
    // 0x875eec: r1 = LoadInt32Instr(r0)
    //     0x875eec: sbfx            x1, x0, #1, #0x1f
    //     0x875ef0: tbz             w0, #0, #0x875efc
    //     0x875ef4: nop             
    //     0x875ef8: ldur            x1, [x0, #7]
    // 0x875efc: cmp             x1, #9
    // 0x875f00: b.lt            #0x875f54
    // 0x875f04: nop             
    // 0x875f08: ldur            x0, [fp, #-0x10]
    // 0x875f0c: r1 = LoadInt32Instr(r0)
    //     0x875f0c: sbfx            x1, x0, #1, #0x1f
    //     0x875f10: tbz             w0, #0, #0x875f1c
    //     0x875f14: nop             
    //     0x875f18: ldur            x1, [x0, #7]
    // 0x875f1c: cmp             x1, #9
    // 0x875f20: b.lt            #0x875f54
    // 0x875f24: nop             
    // 0x875f28: ldur            x0, [fp, #-0x18]
    // 0x875f2c: r1 = LoadInt32Instr(r0)
    //     0x875f2c: sbfx            x1, x0, #1, #0x1f
    //     0x875f30: tbz             w0, #0, #0x875f3c
    //     0x875f34: nop             
    //     0x875f38: ldur            x1, [x0, #7]
    // 0x875f3c: cmp             x1, #9
    // 0x875f40: b.lt            #0x875f54
    // 0x875f44: nop             
    // 0x875f48: r0 = "9bundle"
    //     0x875f48: add             x0, PP, #0xf, lsl #12  ; [pp+0xfc90] "9bundle"
    //     0x875f4c: ldr             x0, [x0, #0xc90]
    // 0x875f50: b               #0x8838b4
    // 0x875f54: r0 = "noEnough"
    //     0x875f54: add             x0, PP, #0x10, lsl #12  ; [pp+0x10658] "noEnough"
    //     0x875f58: ldr             x0, [x0, #0x658]
    // 0x875f5c: b               #0x8838b4
    // 0x875f60: r16 = "ending1Trigger"
    //     0x875f60: add             x16, PP, #0x11, lsl #12  ; [pp+0x112d0] "ending1Trigger"
    //     0x875f64: ldr             x16, [x16, #0x2d0]
    // 0x875f68: ldur            lr, [fp, #-0x28]
    // 0x875f6c: stp             lr, x16, [SP]
    // 0x875f70: r0 = ==()
    //     0x875f70: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875f74: tbnz            w0, #4, #0x875fa8
    // 0x875f78: nop             
    // 0x875f7c: r4 = const [0, 0, 0, 0, null]
    //     0x875f7c: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x875f80: r0 = getTotalUnlockedCards()
    //     0x875f80: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x875f84: cmp             x0, #0x96
    // 0x875f88: b.lt            #0x875f9c
    // 0x875f8c: nop             
    // 0x875f90: r0 = "ver1"
    //     0x875f90: add             x0, PP, #0x11, lsl #12  ; [pp+0x112d8] "ver1"
    //     0x875f94: ldr             x0, [x0, #0x2d8]
    // 0x875f98: b               #0x8838b4
    // 0x875f9c: r0 = "ver2"
    //     0x875f9c: add             x0, PP, #0x11, lsl #12  ; [pp+0x112e0] "ver2"
    //     0x875fa0: ldr             x0, [x0, #0x2e0]
    // 0x875fa4: b               #0x8838b4
    // 0x875fa8: r16 = "timeToNextDay"
    //     0x875fa8: add             x16, PP, #0x11, lsl #12  ; [pp+0x112e8] "timeToNextDay"
    //     0x875fac: ldr             x16, [x16, #0x2e8]
    // 0x875fb0: ldur            lr, [fp, #-0x28]
    // 0x875fb4: stp             lr, x16, [SP]
    // 0x875fb8: r0 = ==()
    //     0x875fb8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x875fbc: tbnz            w0, #4, #0x8763dc
    // 0x875fc0: nop             
    // 0x875fc4: r0 = getTrueDateTime()
    //     0x875fc4: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x875fc8: mov             x1, x0
    // 0x875fcc: r0 = year()
    //     0x875fcc: bl              #0x147d970  ; [dart:core] DateTime::year
    // 0x875fd0: stur            x0, [fp, #-0x38]
    // 0x875fd4: r0 = getTrueDateTime()
    //     0x875fd4: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x875fd8: mov             x1, x0
    // 0x875fdc: r0 = month()
    //     0x875fdc: bl              #0x147d9d0  ; [dart:core] DateTime::month
    // 0x875fe0: stur            x0, [fp, #-0x80]
    // 0x875fe4: r0 = getTrueDateTime()
    //     0x875fe4: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x875fe8: mov             x1, x0
    // 0x875fec: r0 = day()
    //     0x875fec: bl              #0x147d794  ; [dart:core] DateTime::day
    // 0x875ff0: add             x2, x0, #1
    // 0x875ff4: ldur            x3, [fp, #-0x38]
    // 0x875ff8: r0 = BoxInt64Instr(r3)
    //     0x875ff8: sbfiz           x0, x3, #1, #0x1f
    //     0x875ffc: cmp             x3, x0, asr #1
    //     0x876000: b.eq            #0x876010
    //     0x876004: nop             
    //     0x876008: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x87600c: stur            x3, [x0, #7]
    // 0x876010: mov             x4, x0
    // 0x876014: ldur            x3, [fp, #-0x80]
    // 0x876018: stur            x4, [fp, #-0x18]
    // 0x87601c: r0 = BoxInt64Instr(r3)
    //     0x87601c: sbfiz           x0, x3, #1, #0x1f
    //     0x876020: cmp             x3, x0, asr #1
    //     0x876024: b.eq            #0x876034
    //     0x876028: nop             
    //     0x87602c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876030: stur            x3, [x0, #7]
    // 0x876034: mov             x3, x0
    // 0x876038: stur            x3, [fp, #-0x10]
    // 0x87603c: r0 = BoxInt64Instr(r2)
    //     0x87603c: sbfiz           x0, x2, #1, #0x1f
    //     0x876040: cmp             x2, x0, asr #1
    //     0x876044: b.eq            #0x876054
    //     0x876048: nop             
    //     0x87604c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876050: stur            x2, [x0, #7]
    // 0x876054: stur            x0, [fp, #-8]
    // 0x876058: r0 = DateTime()
    //     0x876058: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x87605c: stur            x0, [fp, #-0x20]
    // 0x876060: ldur            x16, [fp, #-0x10]
    // 0x876064: ldur            lr, [fp, #-8]
    // 0x876068: stp             lr, x16, [SP]
    // 0x87606c: mov             x1, x0
    // 0x876070: ldur            x2, [fp, #-0x18]
    // 0x876074: r4 = const [0, 0x4, 0x2, 0x4, null]
    //     0x876074: ldr             x4, [PP, #0x6790]  ; [pp+0x6790] List(5) [0, 0x4, 0x2, 0x4, Null]
    // 0x876078: r0 = DateTime()
    //     0x876078: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x87607c: r0 = getTrueDateTime()
    //     0x87607c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x876080: ldur            x1, [fp, #-0x20]
    // 0x876084: mov             x2, x0
    // 0x876088: r0 = difference()
    //     0x876088: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x87608c: mov             x1, x0
    // 0x876090: r0 = inSeconds()
    //     0x876090: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x876094: tbz             x0, #0x3f, #0x8760a0
    // 0x876098: nop             
    // 0x87609c: r0 = 0
    //     0x87609c: movz            x0, #0
    // 0x8760a0: d0 = 3600.000000
    //     0x8760a0: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f0] IMM: double(3600) from 0x40ac200000000000
    //     0x8760a4: ldr             d0, [x17, #0x2f0]
    // 0x8760a8: stur            x0, [fp, #-0x38]
    // 0x8760ac: scvtf           d1, x0
    // 0x8760b0: stur            d1, [fp, #-0x90]
    // 0x8760b4: fdiv            d2, d1, d0
    // 0x8760b8: r1 = inline_Allocate_Double()
    //     0x8760b8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x8760bc: add             x1, x1, #0x10
    //     0x8760c0: cmp             x2, x1
    //     0x8760c4: b.ls            #0x88399c
    //     0x8760c8: nop             
    //     0x8760cc: str             x1, [THR, #0x50]  ; THR::top
    //     0x8760d0: sub             x1, x1, #0xf
    //     0x8760d4: movz            x2, #0xd15c
    //     0x8760d8: movk            x2, #0x3, lsl #16
    //     0x8760dc: stur            x2, [x1, #-1]
    // 0x8760e0: StoreField: r1->field_7 = d2
    //     0x8760e0: stur            d2, [x1, #7]
    // 0x8760e4: str             x1, [SP]
    // 0x8760e8: r0 = floor()
    //     0x8760e8: bl              #0x14f4de4  ; [dart:core] _Double::floor
    // 0x8760ec: stur            x0, [fp, #-8]
    // 0x8760f0: r1 = LoadInt32Instr(r0)
    //     0x8760f0: sbfx            x1, x0, #1, #0x1f
    //     0x8760f4: tbz             w0, #0, #0x876100
    //     0x8760f8: nop             
    //     0x8760fc: ldur            x1, [x0, #7]
    // 0x876100: cmp             x1, #0xa
    // 0x876104: b.lt            #0x876118
    // 0x876108: nop             
    // 0x87610c: str             x0, [SP]
    // 0x876110: r0 = _interpolateSingle()
    //     0x876110: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x876114: b               #0x87613c
    // 0x876118: r1 = Null
    //     0x876118: mov             x1, NULL
    // 0x87611c: r2 = 4
    //     0x87611c: movz            x2, #0x4
    // 0x876120: r0 = AllocateArray()
    //     0x876120: bl              #0x1502560  ; AllocateArrayStub
    // 0x876124: r17 = "0"
    //     0x876124: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x876128: StoreField: r0->field_f = r17
    //     0x876128: stur            w17, [x0, #0xf]
    // 0x87612c: ldur            x1, [fp, #-8]
    // 0x876130: StoreField: r0->field_13 = r1
    //     0x876130: stur            w1, [x0, #0x13]
    // 0x876134: str             x0, [SP]
    // 0x876138: r0 = _interpolate()
    //     0x876138: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x87613c: ldur            d0, [fp, #-0x90]
    // 0x876140: d1 = 60.000000
    //     0x876140: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f8] IMM: double(60) from 0x404e000000000000
    //     0x876144: ldr             d1, [x17, #0x2f8]
    // 0x876148: stur            x0, [fp, #-8]
    // 0x87614c: fdiv            d2, d0, d1
    // 0x876150: r1 = inline_Allocate_Double()
    //     0x876150: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x876154: add             x1, x1, #0x10
    //     0x876158: cmp             x2, x1
    //     0x87615c: b.ls            #0x8839b8
    //     0x876160: nop             
    //     0x876164: str             x1, [THR, #0x50]  ; THR::top
    //     0x876168: sub             x1, x1, #0xf
    //     0x87616c: movz            x2, #0xd15c
    //     0x876170: movk            x2, #0x3, lsl #16
    //     0x876174: stur            x2, [x1, #-1]
    // 0x876178: StoreField: r1->field_7 = d2
    //     0x876178: stur            d2, [x1, #7]
    // 0x87617c: r16 = 120
    //     0x87617c: movz            x16, #0x78
    // 0x876180: stp             x16, x1, [SP]
    // 0x876184: r0 = %()
    //     0x876184: bl              #0x890458  ; [dart:core] _Double::%
    // 0x876188: str             x0, [SP]
    // 0x87618c: r0 = floor()
    //     0x87618c: bl              #0x14f4de4  ; [dart:core] _Double::floor
    // 0x876190: stur            x0, [fp, #-0x10]
    // 0x876194: r1 = LoadInt32Instr(r0)
    //     0x876194: sbfx            x1, x0, #1, #0x1f
    //     0x876198: tbz             w0, #0, #0x8761a4
    //     0x87619c: nop             
    //     0x8761a0: ldur            x1, [x0, #7]
    // 0x8761a4: cmp             x1, #0xa
    // 0x8761a8: b.lt            #0x8761c0
    // 0x8761ac: nop             
    // 0x8761b0: str             x0, [SP]
    // 0x8761b4: r0 = _interpolateSingle()
    //     0x8761b4: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x8761b8: mov             x2, x0
    // 0x8761bc: b               #0x8761e8
    // 0x8761c0: r1 = Null
    //     0x8761c0: mov             x1, NULL
    // 0x8761c4: r2 = 4
    //     0x8761c4: movz            x2, #0x4
    // 0x8761c8: r0 = AllocateArray()
    //     0x8761c8: bl              #0x1502560  ; AllocateArrayStub
    // 0x8761cc: r17 = "0"
    //     0x8761cc: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x8761d0: StoreField: r0->field_f = r17
    //     0x8761d0: stur            w17, [x0, #0xf]
    // 0x8761d4: ldur            x1, [fp, #-0x10]
    // 0x8761d8: StoreField: r0->field_13 = r1
    //     0x8761d8: stur            w1, [x0, #0x13]
    // 0x8761dc: str             x0, [SP]
    // 0x8761e0: r0 = _interpolate()
    //     0x8761e0: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8761e4: mov             x2, x0
    // 0x8761e8: ldur            x0, [fp, #-0x38]
    // 0x8761ec: r1 = 60
    //     0x8761ec: movz            x1, #0x3c
    // 0x8761f0: stur            x2, [fp, #-0x10]
    // 0x8761f4: sdiv            x4, x0, x1
    // 0x8761f8: msub            x3, x4, x1, x0
    // 0x8761fc: cmp             x3, xzr
    // 0x876200: b.lt            #0x8839d4
    // 0x876204: nop             
    // 0x876208: stur            x3, [fp, #-0x80]
    // 0x87620c: cmp             x3, #0xa
    // 0x876210: b.lt            #0x87622c
    // 0x876214: nop             
    // 0x876218: lsl             x0, x3, #1
    // 0x87621c: str             x0, [SP]
    // 0x876220: r0 = _interpolateSingle()
    //     0x876220: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x876224: mov             x3, x0
    // 0x876228: b               #0x876258
    // 0x87622c: r1 = Null
    //     0x87622c: mov             x1, NULL
    // 0x876230: r2 = 4
    //     0x876230: movz            x2, #0x4
    // 0x876234: r0 = AllocateArray()
    //     0x876234: bl              #0x1502560  ; AllocateArrayStub
    // 0x876238: r17 = "0"
    //     0x876238: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x87623c: StoreField: r0->field_f = r17
    //     0x87623c: stur            w17, [x0, #0xf]
    // 0x876240: ldur            x1, [fp, #-0x80]
    // 0x876244: lsl             x2, x1, #1
    // 0x876248: StoreField: r0->field_13 = r2
    //     0x876248: stur            w2, [x0, #0x13]
    // 0x87624c: str             x0, [SP]
    // 0x876250: r0 = _interpolate()
    //     0x876250: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876254: mov             x3, x0
    // 0x876258: ldur            x0, [fp, #-8]
    // 0x87625c: stur            x3, [fp, #-0x18]
    // 0x876260: r1 = Null
    //     0x876260: mov             x1, NULL
    // 0x876264: r2 = 24
    //     0x876264: movz            x2, #0x18
    // 0x876268: r0 = AllocateArray()
    //     0x876268: bl              #0x1502560  ; AllocateArrayStub
    // 0x87626c: stur            x0, [fp, #-0x20]
    // 0x876270: r17 = " "
    //     0x876270: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876274: StoreField: r0->field_f = r17
    //     0x876274: stur            w17, [x0, #0xf]
    // 0x876278: ldur            x1, [fp, #-8]
    // 0x87627c: StoreField: r0->field_13 = r1
    //     0x87627c: stur            w1, [x0, #0x13]
    // 0x876280: r17 = " "
    //     0x876280: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876284: ArrayStore: r0[0] = r17  ; List_4
    //     0x876284: stur            w17, [x0, #0x17]
    // 0x876288: r1 = "hour"
    //     0x876288: add             x1, PP, #0x11, lsl #12  ; [pp+0x11300] "hour"
    //     0x87628c: ldr             x1, [x1, #0x300]
    // 0x876290: r0 = getTranslate()
    //     0x876290: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x876294: ldur            x1, [fp, #-0x20]
    // 0x876298: ArrayStore: r1[3] = r0  ; List_4
    //     0x876298: add             x25, x1, #0x1b
    //     0x87629c: str             w0, [x25]
    //     0x8762a0: tbz             w0, #0, #0x8762c4
    //     0x8762a4: nop             
    //     0x8762a8: ldurb           w16, [x1, #-1]
    //     0x8762ac: ldurb           w17, [x0, #-1]
    //     0x8762b0: and             x16, x17, x16, lsr #2
    //     0x8762b4: tst             x16, HEAP, lsr #32
    //     0x8762b8: b.eq            #0x8762c4
    //     0x8762bc: nop             
    //     0x8762c0: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8762c4: ldur            x2, [fp, #-0x20]
    // 0x8762c8: r17 = " "
    //     0x8762c8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8762cc: StoreField: r2->field_1f = r17
    //     0x8762cc: stur            w17, [x2, #0x1f]
    // 0x8762d0: mov             x1, x2
    // 0x8762d4: ldur            x0, [fp, #-0x10]
    // 0x8762d8: ArrayStore: r1[5] = r0  ; List_4
    //     0x8762d8: add             x25, x1, #0x23
    //     0x8762dc: str             w0, [x25]
    //     0x8762e0: tbz             w0, #0, #0x876304
    //     0x8762e4: nop             
    //     0x8762e8: ldurb           w16, [x1, #-1]
    //     0x8762ec: ldurb           w17, [x0, #-1]
    //     0x8762f0: and             x16, x17, x16, lsr #2
    //     0x8762f4: tst             x16, HEAP, lsr #32
    //     0x8762f8: b.eq            #0x876304
    //     0x8762fc: nop             
    //     0x876300: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x876304: r17 = " "
    //     0x876304: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876308: StoreField: r2->field_27 = r17
    //     0x876308: stur            w17, [x2, #0x27]
    // 0x87630c: r1 = "minute"
    //     0x87630c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11308] "minute"
    //     0x876310: ldr             x1, [x1, #0x308]
    // 0x876314: r0 = getTranslate()
    //     0x876314: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x876318: ldur            x1, [fp, #-0x20]
    // 0x87631c: ArrayStore: r1[7] = r0  ; List_4
    //     0x87631c: add             x25, x1, #0x2b
    //     0x876320: str             w0, [x25]
    //     0x876324: tbz             w0, #0, #0x876348
    //     0x876328: nop             
    //     0x87632c: ldurb           w16, [x1, #-1]
    //     0x876330: ldurb           w17, [x0, #-1]
    //     0x876334: and             x16, x17, x16, lsr #2
    //     0x876338: tst             x16, HEAP, lsr #32
    //     0x87633c: b.eq            #0x876348
    //     0x876340: nop             
    //     0x876344: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x876348: ldur            x2, [fp, #-0x20]
    // 0x87634c: r17 = " "
    //     0x87634c: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876350: StoreField: r2->field_2f = r17
    //     0x876350: stur            w17, [x2, #0x2f]
    // 0x876354: mov             x1, x2
    // 0x876358: ldur            x0, [fp, #-0x18]
    // 0x87635c: ArrayStore: r1[9] = r0  ; List_4
    //     0x87635c: add             x25, x1, #0x33
    //     0x876360: str             w0, [x25]
    //     0x876364: tbz             w0, #0, #0x876388
    //     0x876368: nop             
    //     0x87636c: ldurb           w16, [x1, #-1]
    //     0x876370: ldurb           w17, [x0, #-1]
    //     0x876374: and             x16, x17, x16, lsr #2
    //     0x876378: tst             x16, HEAP, lsr #32
    //     0x87637c: b.eq            #0x876388
    //     0x876380: nop             
    //     0x876384: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x876388: r17 = " "
    //     0x876388: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x87638c: StoreField: r2->field_37 = r17
    //     0x87638c: stur            w17, [x2, #0x37]
    // 0x876390: r1 = "second"
    //     0x876390: add             x1, PP, #0x11, lsl #12  ; [pp+0x11310] "second"
    //     0x876394: ldr             x1, [x1, #0x310]
    // 0x876398: r0 = getTranslate()
    //     0x876398: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x87639c: ldur            x1, [fp, #-0x20]
    // 0x8763a0: ArrayStore: r1[11] = r0  ; List_4
    //     0x8763a0: add             x25, x1, #0x3b
    //     0x8763a4: str             w0, [x25]
    //     0x8763a8: tbz             w0, #0, #0x8763cc
    //     0x8763ac: nop             
    //     0x8763b0: ldurb           w16, [x1, #-1]
    //     0x8763b4: ldurb           w17, [x0, #-1]
    //     0x8763b8: and             x16, x17, x16, lsr #2
    //     0x8763bc: tst             x16, HEAP, lsr #32
    //     0x8763c0: b.eq            #0x8763cc
    //     0x8763c4: nop             
    //     0x8763c8: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8763cc: ldur            x16, [fp, #-0x20]
    // 0x8763d0: str             x16, [SP]
    // 0x8763d4: r0 = _interpolate()
    //     0x8763d4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8763d8: b               #0x8838b4
    // 0x8763dc: d0 = 3600.000000
    //     0x8763dc: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f0] IMM: double(3600) from 0x40ac200000000000
    //     0x8763e0: ldr             d0, [x17, #0x2f0]
    // 0x8763e4: d1 = 60.000000
    //     0x8763e4: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f8] IMM: double(60) from 0x404e000000000000
    //     0x8763e8: ldr             d1, [x17, #0x2f8]
    // 0x8763ec: r1 = 60
    //     0x8763ec: movz            x1, #0x3c
    // 0x8763f0: r16 = "prisonVisitTime"
    //     0x8763f0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11318] "prisonVisitTime"
    //     0x8763f4: ldr             x16, [x16, #0x318]
    // 0x8763f8: ldur            lr, [fp, #-0x28]
    // 0x8763fc: stp             lr, x16, [SP]
    // 0x876400: r0 = ==()
    //     0x876400: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x876404: tbnz            w0, #4, #0x876934
    // 0x876408: nop             
    // 0x87640c: r0 = LoadStaticField(0xb54)
    //     0x87640c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x876410: ldr             x0, [x0, #0x16a8]
    // 0x876414: cmp             w0, NULL
    // 0x876418: b.ne            #0x876428
    // 0x87641c: nop             
    // 0x876420: r0 = Null
    //     0x876420: mov             x0, NULL
    // 0x876424: b               #0x876450
    // 0x876428: r17 = 331
    //     0x876428: movz            x17, #0x14b
    // 0x87642c: ldr             w1, [x0, x17]
    // 0x876430: DecompressPointer r1
    //     0x876430: add             x1, x1, HEAP, lsl #32
    // 0x876434: r0 = LoadClassIdInstr(r1)
    //     0x876434: ldur            x0, [x1, #-1]
    //     0x876438: ubfx            x0, x0, #0xc, #0x14
    // 0x87643c: r2 = "visitPrison"
    //     0x87643c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11320] "visitPrison"
    //     0x876440: ldr             x2, [x2, #0x320]
    // 0x876444: r0 = GDT[cid_x0 + -0xb4]()
    //     0x876444: sub             lr, x0, #0xb4
    //     0x876448: ldr             lr, [x21, lr, lsl #3]
    //     0x87644c: blr             lr
    // 0x876450: cmp             w0, NULL
    // 0x876454: b.ne            #0x876470
    // 0x876458: nop             
    // 0x87645c: r1 = Null
    //     0x87645c: mov             x1, NULL
    // 0x876460: r2 = 0
    //     0x876460: movz            x2, #0
    // 0x876464: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x876464: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x876468: mov             x3, x0
    // 0x87646c: b               #0x876474
    // 0x876470: mov             x3, x0
    // 0x876474: mov             x0, x3
    // 0x876478: stur            x3, [fp, #-8]
    // 0x87647c: r2 = Null
    //     0x87647c: mov             x2, NULL
    // 0x876480: r1 = Null
    //     0x876480: mov             x1, NULL
    // 0x876484: r4 = 59
    //     0x876484: movz            x4, #0x3b
    // 0x876488: branchIfSmi(r0, 0x876498)
    //     0x876488: tbz             w0, #0, #0x876498
    //     0x87648c: nop             
    // 0x876490: r4 = LoadClassIdInstr(r0)
    //     0x876490: ldur            x4, [x0, #-1]
    //     0x876494: ubfx            x4, x4, #0xc, #0x14
    // 0x876498: cmp             x4, #0xcdb
    // 0x87649c: b.eq            #0x8764b8
    // 0x8764a0: nop             
    // 0x8764a4: r8 = Timestamp
    //     0x8764a4: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x8764a8: ldr             x8, [x8, #0xa30]
    // 0x8764ac: r3 = Null
    //     0x8764ac: add             x3, PP, #0x11, lsl #12  ; [pp+0x11328] Null
    //     0x8764b0: ldr             x3, [x3, #0x328]
    // 0x8764b4: r0 = Timestamp()
    //     0x8764b4: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x8764b8: r0 = LoadStaticField(0xb54)
    //     0x8764b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8764bc: ldr             x0, [x0, #0x16a8]
    // 0x8764c0: cmp             w0, NULL
    // 0x8764c4: b.eq            #0x8765ac
    // 0x8764c8: nop             
    // 0x8764cc: r17 = 327
    //     0x8764cc: movz            x17, #0x147
    // 0x8764d0: ldr             w1, [x0, x17]
    // 0x8764d4: DecompressPointer r1
    //     0x8764d4: add             x1, x1, HEAP, lsl #32
    // 0x8764d8: r0 = LoadClassIdInstr(r1)
    //     0x8764d8: ldur            x0, [x1, #-1]
    //     0x8764dc: ubfx            x0, x0, #0xc, #0x14
    // 0x8764e0: r2 = "prisonExtend"
    //     0x8764e0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11338] "prisonExtend"
    //     0x8764e4: ldr             x2, [x2, #0x338]
    // 0x8764e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8764e8: sub             lr, x0, #0xb4
    //     0x8764ec: ldr             lr, [x21, lr, lsl #3]
    //     0x8764f0: blr             lr
    // 0x8764f4: cmp             w0, NULL
    // 0x8764f8: b.eq            #0x8765ac
    // 0x8764fc: nop             
    // 0x876500: r0 = LoadStaticField(0xb54)
    //     0x876500: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x876504: ldr             x0, [x0, #0x16a8]
    // 0x876508: cmp             w0, NULL
    // 0x87650c: b.ne            #0x87651c
    // 0x876510: nop             
    // 0x876514: r3 = Null
    //     0x876514: mov             x3, NULL
    // 0x876518: b               #0x876548
    // 0x87651c: r17 = 327
    //     0x87651c: movz            x17, #0x147
    // 0x876520: ldr             w1, [x0, x17]
    // 0x876524: DecompressPointer r1
    //     0x876524: add             x1, x1, HEAP, lsl #32
    // 0x876528: r0 = LoadClassIdInstr(r1)
    //     0x876528: ldur            x0, [x1, #-1]
    //     0x87652c: ubfx            x0, x0, #0xc, #0x14
    // 0x876530: r2 = "prisonExtend"
    //     0x876530: add             x2, PP, #0x11, lsl #12  ; [pp+0x11338] "prisonExtend"
    //     0x876534: ldr             x2, [x2, #0x338]
    // 0x876538: r0 = GDT[cid_x0 + -0xb4]()
    //     0x876538: sub             lr, x0, #0xb4
    //     0x87653c: ldr             lr, [x21, lr, lsl #3]
    //     0x876540: blr             lr
    // 0x876544: mov             x3, x0
    // 0x876548: mov             x0, x3
    // 0x87654c: stur            x3, [fp, #-0x10]
    // 0x876550: r2 = Null
    //     0x876550: mov             x2, NULL
    // 0x876554: r1 = Null
    //     0x876554: mov             x1, NULL
    // 0x876558: r4 = 59
    //     0x876558: movz            x4, #0x3b
    // 0x87655c: branchIfSmi(r0, 0x87656c)
    //     0x87655c: tbz             w0, #0, #0x87656c
    //     0x876560: nop             
    // 0x876564: r4 = LoadClassIdInstr(r0)
    //     0x876564: ldur            x4, [x0, #-1]
    //     0x876568: ubfx            x4, x4, #0xc, #0x14
    // 0x87656c: cmp             x4, #0x3e
    // 0x876570: b.eq            #0x876588
    // 0x876574: nop             
    // 0x876578: r8 = bool
    //     0x876578: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x87657c: r3 = Null
    //     0x87657c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11340] Null
    //     0x876580: ldr             x3, [x3, #0x340]
    // 0x876584: r0 = bool()
    //     0x876584: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x876588: ldur            x0, [fp, #-0x10]
    // 0x87658c: tst             x0, #0x10
    // 0x876590: cset            x1, ne
    // 0x876594: sub             x1, x1, #1
    // 0x876598: r16 = 3600
    //     0x876598: movz            x16, #0xe10
    // 0x87659c: and             x1, x1, x16
    // 0x8765a0: add             x1, x1, #0xe10
    // 0x8765a4: r0 = LoadInt32Instr(r1)
    //     0x8765a4: sbfx            x0, x1, #1, #0x1f
    // 0x8765a8: b               #0x8765b0
    // 0x8765ac: r0 = 1800
    //     0x8765ac: movz            x0, #0x708
    // 0x8765b0: stur            x0, [fp, #-0x38]
    // 0x8765b4: r0 = getTrueDateTime()
    //     0x8765b4: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8765b8: ldur            x1, [fp, #-8]
    // 0x8765bc: stur            x0, [fp, #-8]
    // 0x8765c0: r0 = toDate()
    //     0x8765c0: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8765c4: ldur            x1, [fp, #-8]
    // 0x8765c8: mov             x2, x0
    // 0x8765cc: r0 = difference()
    //     0x8765cc: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x8765d0: mov             x1, x0
    // 0x8765d4: r0 = inSeconds()
    //     0x8765d4: bl              #0x8dbee8  ; [dart:core] Duration::inSeconds
    // 0x8765d8: mov             x1, x0
    // 0x8765dc: ldur            x0, [fp, #-0x38]
    // 0x8765e0: sub             x2, x0, x1
    // 0x8765e4: tbz             x2, #0x3f, #0x8765f4
    // 0x8765e8: nop             
    // 0x8765ec: r0 = 0
    //     0x8765ec: movz            x0, #0
    // 0x8765f0: b               #0x8765f8
    // 0x8765f4: mov             x0, x2
    // 0x8765f8: d0 = 3600.000000
    //     0x8765f8: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f0] IMM: double(3600) from 0x40ac200000000000
    //     0x8765fc: ldr             d0, [x17, #0x2f0]
    // 0x876600: stur            x0, [fp, #-0x38]
    // 0x876604: scvtf           d1, x0
    // 0x876608: stur            d1, [fp, #-0x90]
    // 0x87660c: fdiv            d2, d1, d0
    // 0x876610: r1 = inline_Allocate_Double()
    //     0x876610: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x876614: add             x1, x1, #0x10
    //     0x876618: cmp             x2, x1
    //     0x87661c: b.ls            #0x8839dc
    //     0x876620: nop             
    //     0x876624: str             x1, [THR, #0x50]  ; THR::top
    //     0x876628: sub             x1, x1, #0xf
    //     0x87662c: movz            x2, #0xd15c
    //     0x876630: movk            x2, #0x3, lsl #16
    //     0x876634: stur            x2, [x1, #-1]
    // 0x876638: StoreField: r1->field_7 = d2
    //     0x876638: stur            d2, [x1, #7]
    // 0x87663c: str             x1, [SP]
    // 0x876640: r0 = floor()
    //     0x876640: bl              #0x14f4de4  ; [dart:core] _Double::floor
    // 0x876644: stur            x0, [fp, #-8]
    // 0x876648: r1 = LoadInt32Instr(r0)
    //     0x876648: sbfx            x1, x0, #1, #0x1f
    //     0x87664c: tbz             w0, #0, #0x876658
    //     0x876650: nop             
    //     0x876654: ldur            x1, [x0, #7]
    // 0x876658: cmp             x1, #0xa
    // 0x87665c: b.lt            #0x876670
    // 0x876660: nop             
    // 0x876664: str             x0, [SP]
    // 0x876668: r0 = _interpolateSingle()
    //     0x876668: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x87666c: b               #0x876694
    // 0x876670: r1 = Null
    //     0x876670: mov             x1, NULL
    // 0x876674: r2 = 4
    //     0x876674: movz            x2, #0x4
    // 0x876678: r0 = AllocateArray()
    //     0x876678: bl              #0x1502560  ; AllocateArrayStub
    // 0x87667c: r17 = "0"
    //     0x87667c: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x876680: StoreField: r0->field_f = r17
    //     0x876680: stur            w17, [x0, #0xf]
    // 0x876684: ldur            x1, [fp, #-8]
    // 0x876688: StoreField: r0->field_13 = r1
    //     0x876688: stur            w1, [x0, #0x13]
    // 0x87668c: str             x0, [SP]
    // 0x876690: r0 = _interpolate()
    //     0x876690: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876694: ldur            d0, [fp, #-0x90]
    // 0x876698: d1 = 60.000000
    //     0x876698: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f8] IMM: double(60) from 0x404e000000000000
    //     0x87669c: ldr             d1, [x17, #0x2f8]
    // 0x8766a0: stur            x0, [fp, #-8]
    // 0x8766a4: fdiv            d2, d0, d1
    // 0x8766a8: r1 = inline_Allocate_Double()
    //     0x8766a8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x8766ac: add             x1, x1, #0x10
    //     0x8766b0: cmp             x2, x1
    //     0x8766b4: b.ls            #0x8839f8
    //     0x8766b8: nop             
    //     0x8766bc: str             x1, [THR, #0x50]  ; THR::top
    //     0x8766c0: sub             x1, x1, #0xf
    //     0x8766c4: movz            x2, #0xd15c
    //     0x8766c8: movk            x2, #0x3, lsl #16
    //     0x8766cc: stur            x2, [x1, #-1]
    // 0x8766d0: StoreField: r1->field_7 = d2
    //     0x8766d0: stur            d2, [x1, #7]
    // 0x8766d4: r16 = 120
    //     0x8766d4: movz            x16, #0x78
    // 0x8766d8: stp             x16, x1, [SP]
    // 0x8766dc: r0 = %()
    //     0x8766dc: bl              #0x890458  ; [dart:core] _Double::%
    // 0x8766e0: str             x0, [SP]
    // 0x8766e4: r0 = floor()
    //     0x8766e4: bl              #0x14f4de4  ; [dart:core] _Double::floor
    // 0x8766e8: stur            x0, [fp, #-0x10]
    // 0x8766ec: r1 = LoadInt32Instr(r0)
    //     0x8766ec: sbfx            x1, x0, #1, #0x1f
    //     0x8766f0: tbz             w0, #0, #0x8766fc
    //     0x8766f4: nop             
    //     0x8766f8: ldur            x1, [x0, #7]
    // 0x8766fc: cmp             x1, #0xa
    // 0x876700: b.lt            #0x876718
    // 0x876704: nop             
    // 0x876708: str             x0, [SP]
    // 0x87670c: r0 = _interpolateSingle()
    //     0x87670c: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x876710: mov             x2, x0
    // 0x876714: b               #0x876740
    // 0x876718: r1 = Null
    //     0x876718: mov             x1, NULL
    // 0x87671c: r2 = 4
    //     0x87671c: movz            x2, #0x4
    // 0x876720: r0 = AllocateArray()
    //     0x876720: bl              #0x1502560  ; AllocateArrayStub
    // 0x876724: r17 = "0"
    //     0x876724: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x876728: StoreField: r0->field_f = r17
    //     0x876728: stur            w17, [x0, #0xf]
    // 0x87672c: ldur            x1, [fp, #-0x10]
    // 0x876730: StoreField: r0->field_13 = r1
    //     0x876730: stur            w1, [x0, #0x13]
    // 0x876734: str             x0, [SP]
    // 0x876738: r0 = _interpolate()
    //     0x876738: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x87673c: mov             x2, x0
    // 0x876740: ldur            x0, [fp, #-0x38]
    // 0x876744: r1 = 60
    //     0x876744: movz            x1, #0x3c
    // 0x876748: stur            x2, [fp, #-0x10]
    // 0x87674c: sdiv            x4, x0, x1
    // 0x876750: msub            x3, x4, x1, x0
    // 0x876754: cmp             x3, xzr
    // 0x876758: b.lt            #0x883a14
    // 0x87675c: nop             
    // 0x876760: stur            x3, [fp, #-0x80]
    // 0x876764: cmp             x3, #0xa
    // 0x876768: b.lt            #0x876784
    // 0x87676c: nop             
    // 0x876770: lsl             x0, x3, #1
    // 0x876774: str             x0, [SP]
    // 0x876778: r0 = _interpolateSingle()
    //     0x876778: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x87677c: mov             x3, x0
    // 0x876780: b               #0x8767b0
    // 0x876784: r1 = Null
    //     0x876784: mov             x1, NULL
    // 0x876788: r2 = 4
    //     0x876788: movz            x2, #0x4
    // 0x87678c: r0 = AllocateArray()
    //     0x87678c: bl              #0x1502560  ; AllocateArrayStub
    // 0x876790: r17 = "0"
    //     0x876790: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x876794: StoreField: r0->field_f = r17
    //     0x876794: stur            w17, [x0, #0xf]
    // 0x876798: ldur            x1, [fp, #-0x80]
    // 0x87679c: lsl             x2, x1, #1
    // 0x8767a0: StoreField: r0->field_13 = r2
    //     0x8767a0: stur            w2, [x0, #0x13]
    // 0x8767a4: str             x0, [SP]
    // 0x8767a8: r0 = _interpolate()
    //     0x8767a8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8767ac: mov             x3, x0
    // 0x8767b0: ldur            x0, [fp, #-8]
    // 0x8767b4: stur            x3, [fp, #-0x18]
    // 0x8767b8: r1 = Null
    //     0x8767b8: mov             x1, NULL
    // 0x8767bc: r2 = 24
    //     0x8767bc: movz            x2, #0x18
    // 0x8767c0: r0 = AllocateArray()
    //     0x8767c0: bl              #0x1502560  ; AllocateArrayStub
    // 0x8767c4: stur            x0, [fp, #-0x20]
    // 0x8767c8: r17 = " "
    //     0x8767c8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8767cc: StoreField: r0->field_f = r17
    //     0x8767cc: stur            w17, [x0, #0xf]
    // 0x8767d0: ldur            x1, [fp, #-8]
    // 0x8767d4: StoreField: r0->field_13 = r1
    //     0x8767d4: stur            w1, [x0, #0x13]
    // 0x8767d8: r17 = " "
    //     0x8767d8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8767dc: ArrayStore: r0[0] = r17  ; List_4
    //     0x8767dc: stur            w17, [x0, #0x17]
    // 0x8767e0: r1 = "hour"
    //     0x8767e0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11300] "hour"
    //     0x8767e4: ldr             x1, [x1, #0x300]
    // 0x8767e8: r0 = getTranslate()
    //     0x8767e8: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x8767ec: ldur            x1, [fp, #-0x20]
    // 0x8767f0: ArrayStore: r1[3] = r0  ; List_4
    //     0x8767f0: add             x25, x1, #0x1b
    //     0x8767f4: str             w0, [x25]
    //     0x8767f8: tbz             w0, #0, #0x87681c
    //     0x8767fc: nop             
    //     0x876800: ldurb           w16, [x1, #-1]
    //     0x876804: ldurb           w17, [x0, #-1]
    //     0x876808: and             x16, x17, x16, lsr #2
    //     0x87680c: tst             x16, HEAP, lsr #32
    //     0x876810: b.eq            #0x87681c
    //     0x876814: nop             
    //     0x876818: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x87681c: ldur            x2, [fp, #-0x20]
    // 0x876820: r17 = " "
    //     0x876820: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876824: StoreField: r2->field_1f = r17
    //     0x876824: stur            w17, [x2, #0x1f]
    // 0x876828: mov             x1, x2
    // 0x87682c: ldur            x0, [fp, #-0x10]
    // 0x876830: ArrayStore: r1[5] = r0  ; List_4
    //     0x876830: add             x25, x1, #0x23
    //     0x876834: str             w0, [x25]
    //     0x876838: tbz             w0, #0, #0x87685c
    //     0x87683c: nop             
    //     0x876840: ldurb           w16, [x1, #-1]
    //     0x876844: ldurb           w17, [x0, #-1]
    //     0x876848: and             x16, x17, x16, lsr #2
    //     0x87684c: tst             x16, HEAP, lsr #32
    //     0x876850: b.eq            #0x87685c
    //     0x876854: nop             
    //     0x876858: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x87685c: r17 = " "
    //     0x87685c: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x876860: StoreField: r2->field_27 = r17
    //     0x876860: stur            w17, [x2, #0x27]
    // 0x876864: r1 = "minute"
    //     0x876864: add             x1, PP, #0x11, lsl #12  ; [pp+0x11308] "minute"
    //     0x876868: ldr             x1, [x1, #0x308]
    // 0x87686c: r0 = getTranslate()
    //     0x87686c: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x876870: ldur            x1, [fp, #-0x20]
    // 0x876874: ArrayStore: r1[7] = r0  ; List_4
    //     0x876874: add             x25, x1, #0x2b
    //     0x876878: str             w0, [x25]
    //     0x87687c: tbz             w0, #0, #0x8768a0
    //     0x876880: nop             
    //     0x876884: ldurb           w16, [x1, #-1]
    //     0x876888: ldurb           w17, [x0, #-1]
    //     0x87688c: and             x16, x17, x16, lsr #2
    //     0x876890: tst             x16, HEAP, lsr #32
    //     0x876894: b.eq            #0x8768a0
    //     0x876898: nop             
    //     0x87689c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8768a0: ldur            x2, [fp, #-0x20]
    // 0x8768a4: r17 = " "
    //     0x8768a4: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8768a8: StoreField: r2->field_2f = r17
    //     0x8768a8: stur            w17, [x2, #0x2f]
    // 0x8768ac: mov             x1, x2
    // 0x8768b0: ldur            x0, [fp, #-0x18]
    // 0x8768b4: ArrayStore: r1[9] = r0  ; List_4
    //     0x8768b4: add             x25, x1, #0x33
    //     0x8768b8: str             w0, [x25]
    //     0x8768bc: tbz             w0, #0, #0x8768e0
    //     0x8768c0: nop             
    //     0x8768c4: ldurb           w16, [x1, #-1]
    //     0x8768c8: ldurb           w17, [x0, #-1]
    //     0x8768cc: and             x16, x17, x16, lsr #2
    //     0x8768d0: tst             x16, HEAP, lsr #32
    //     0x8768d4: b.eq            #0x8768e0
    //     0x8768d8: nop             
    //     0x8768dc: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8768e0: r17 = " "
    //     0x8768e0: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8768e4: StoreField: r2->field_37 = r17
    //     0x8768e4: stur            w17, [x2, #0x37]
    // 0x8768e8: r1 = "second"
    //     0x8768e8: add             x1, PP, #0x11, lsl #12  ; [pp+0x11310] "second"
    //     0x8768ec: ldr             x1, [x1, #0x310]
    // 0x8768f0: r0 = getTranslate()
    //     0x8768f0: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x8768f4: ldur            x1, [fp, #-0x20]
    // 0x8768f8: ArrayStore: r1[11] = r0  ; List_4
    //     0x8768f8: add             x25, x1, #0x3b
    //     0x8768fc: str             w0, [x25]
    //     0x876900: tbz             w0, #0, #0x876924
    //     0x876904: nop             
    //     0x876908: ldurb           w16, [x1, #-1]
    //     0x87690c: ldurb           w17, [x0, #-1]
    //     0x876910: and             x16, x17, x16, lsr #2
    //     0x876914: tst             x16, HEAP, lsr #32
    //     0x876918: b.eq            #0x876924
    //     0x87691c: nop             
    //     0x876920: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x876924: ldur            x16, [fp, #-0x20]
    // 0x876928: str             x16, [SP]
    // 0x87692c: r0 = _interpolate()
    //     0x87692c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876930: b               #0x8838b4
    // 0x876934: r16 = "skipStoryChapter"
    //     0x876934: add             x16, PP, #0x11, lsl #12  ; [pp+0x11350] "skipStoryChapter"
    //     0x876938: ldr             x16, [x16, #0x350]
    // 0x87693c: ldur            lr, [fp, #-0x28]
    // 0x876940: stp             lr, x16, [SP]
    // 0x876944: r0 = ==()
    //     0x876944: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x876948: tbnz            w0, #4, #0x876998
    // 0x87694c: nop             
    // 0x876950: r4 = const [0, 0, 0, 0, null]
    //     0x876950: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x876954: r0 = getTotalUnlockedCards()
    //     0x876954: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x876958: r1 = "requireCards"
    //     0x876958: add             x1, PP, #0x11, lsl #12  ; [pp+0x11358] "requireCards"
    //     0x87695c: ldr             x1, [x1, #0x358]
    // 0x876960: stur            x0, [fp, #-0x38]
    // 0x876964: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x876964: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x876968: r0 = getCustomEventNumber()
    //     0x876968: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x87696c: mov             x1, x0
    // 0x876970: ldur            x0, [fp, #-0x38]
    // 0x876974: cmp             x0, x1
    // 0x876978: b.lt            #0x87698c
    // 0x87697c: nop             
    // 0x876980: r0 = "skip"
    //     0x876980: add             x0, PP, #0x11, lsl #12  ; [pp+0x11360] "skip"
    //     0x876984: ldr             x0, [x0, #0x360]
    // 0x876988: b               #0x8838b4
    // 0x87698c: r0 = "block"
    //     0x87698c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10040] "block"
    //     0x876990: ldr             x0, [x0, #0x40]
    // 0x876994: b               #0x8838b4
    // 0x876998: r16 = "nbaGymTraining"
    //     0x876998: add             x16, PP, #0x11, lsl #12  ; [pp+0x11368] "nbaGymTraining"
    //     0x87699c: ldr             x16, [x16, #0x368]
    // 0x8769a0: ldur            lr, [fp, #-0x28]
    // 0x8769a4: stp             lr, x16, [SP]
    // 0x8769a8: r0 = ==()
    //     0x8769a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8769ac: tbnz            w0, #4, #0x876a44
    // 0x8769b0: nop             
    // 0x8769b4: r0 = LoadStaticField(0xb54)
    //     0x8769b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8769b8: ldr             x0, [x0, #0x16a8]
    // 0x8769bc: cmp             w0, NULL
    // 0x8769c0: b.ne            #0x8769d0
    // 0x8769c4: nop             
    // 0x8769c8: r0 = Null
    //     0x8769c8: mov             x0, NULL
    // 0x8769cc: b               #0x8769f8
    // 0x8769d0: r17 = 327
    //     0x8769d0: movz            x17, #0x147
    // 0x8769d4: ldr             w1, [x0, x17]
    // 0x8769d8: DecompressPointer r1
    //     0x8769d8: add             x1, x1, HEAP, lsl #32
    // 0x8769dc: r0 = LoadClassIdInstr(r1)
    //     0x8769dc: ldur            x0, [x1, #-1]
    //     0x8769e0: ubfx            x0, x0, #0xc, #0x14
    // 0x8769e4: r2 = "storyGoodEnding"
    //     0x8769e4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11370] "storyGoodEnding"
    //     0x8769e8: ldr             x2, [x2, #0x370]
    // 0x8769ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8769ec: sub             lr, x0, #0xb4
    //     0x8769f0: ldr             lr, [x21, lr, lsl #3]
    //     0x8769f4: blr             lr
    // 0x8769f8: r1 = 59
    //     0x8769f8: movz            x1, #0x3b
    // 0x8769fc: branchIfSmi(r0, 0x876a0c)
    //     0x8769fc: tbz             w0, #0, #0x876a0c
    //     0x876a00: nop             
    // 0x876a04: r1 = LoadClassIdInstr(r0)
    //     0x876a04: ldur            x1, [x0, #-1]
    //     0x876a08: ubfx            x1, x1, #0xc, #0x14
    // 0x876a0c: r16 = true
    //     0x876a0c: add             x16, NULL, #0x20  ; true
    // 0x876a10: stp             x16, x0, [SP]
    // 0x876a14: mov             x0, x1
    // 0x876a18: mov             lr, x0
    // 0x876a1c: ldr             lr, [x21, lr, lsl #3]
    // 0x876a20: blr             lr
    // 0x876a24: tbnz            w0, #4, #0x876a38
    // 0x876a28: nop             
    // 0x876a2c: r0 = "nba"
    //     0x876a2c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11378] "nba"
    //     0x876a30: ldr             x0, [x0, #0x378]
    // 0x876a34: b               #0x8838b4
    // 0x876a38: r0 = "nba2"
    //     0x876a38: add             x0, PP, #0x11, lsl #12  ; [pp+0x11380] "nba2"
    //     0x876a3c: ldr             x0, [x0, #0x380]
    // 0x876a40: b               #0x8838b4
    // 0x876a44: r16 = "randomVisitor"
    //     0x876a44: add             x16, PP, #0x11, lsl #12  ; [pp+0x11388] "randomVisitor"
    //     0x876a48: ldr             x16, [x16, #0x388]
    // 0x876a4c: ldur            lr, [fp, #-0x28]
    // 0x876a50: stp             lr, x16, [SP]
    // 0x876a54: r0 = ==()
    //     0x876a54: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x876a58: tbnz            w0, #4, #0x876fc8
    // 0x876a5c: nop             
    // 0x876a60: r1 = Null
    //     0x876a60: mov             x1, NULL
    // 0x876a64: r2 = "coach"
    //     0x876a64: add             x2, PP, #0x11, lsl #12  ; [pp+0x11390] "coach"
    //     0x876a68: ldr             x2, [x2, #0x390]
    // 0x876a6c: r3 = "challenger"
    //     0x876a6c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876a70: ldr             x3, [x3, #0x398]
    // 0x876a74: r5 = "collector"
    //     0x876a74: add             x5, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876a78: ldr             x5, [x5, #0x3a0]
    // 0x876a7c: r0 = _GrowableList._literal3()
    //     0x876a7c: bl              #0x821d38  ; [dart:core] _GrowableList::_GrowableList._literal3
    // 0x876a80: mov             x1, x0
    // 0x876a84: r0 = shuffle()
    //     0x876a84: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x876a88: mov             x1, x0
    // 0x876a8c: r0 = first()
    //     0x876a8c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x876a90: r2 = Null
    //     0x876a90: mov             x2, NULL
    // 0x876a94: r1 = Null
    //     0x876a94: mov             x1, NULL
    // 0x876a98: r4 = 59
    //     0x876a98: movz            x4, #0x3b
    // 0x876a9c: branchIfSmi(r0, 0x876aac)
    //     0x876a9c: tbz             w0, #0, #0x876aac
    //     0x876aa0: nop             
    // 0x876aa4: r4 = LoadClassIdInstr(r0)
    //     0x876aa4: ldur            x4, [x0, #-1]
    //     0x876aa8: ubfx            x4, x4, #0xc, #0x14
    // 0x876aac: sub             x4, x4, #0x5d
    // 0x876ab0: cmp             x4, #1
    // 0x876ab4: b.ls            #0x876acc
    // 0x876ab8: nop             
    // 0x876abc: r8 = String
    //     0x876abc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x876ac0: r3 = Null
    //     0x876ac0: add             x3, PP, #0x11, lsl #12  ; [pp+0x113a8] Null
    //     0x876ac4: ldr             x3, [x3, #0x3a8]
    // 0x876ac8: r0 = String()
    //     0x876ac8: bl              #0x1523244  ; IsType_String_Stub
    // 0x876acc: r1 = Null
    //     0x876acc: mov             x1, NULL
    // 0x876ad0: r0 = Random()
    //     0x876ad0: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876ad4: mov             x1, x0
    // 0x876ad8: r2 = 100
    //     0x876ad8: movz            x2, #0x64
    // 0x876adc: r0 = nextInt()
    //     0x876adc: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876ae0: cmp             x0, #0x32
    // 0x876ae4: b.ge            #0x876af8
    // 0x876ae8: nop             
    // 0x876aec: r0 = "challenger"
    //     0x876aec: add             x0, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876af0: ldr             x0, [x0, #0x398]
    // 0x876af4: b               #0x876b18
    // 0x876af8: cmp             x0, #0x55
    // 0x876afc: b.ge            #0x876b10
    // 0x876b00: nop             
    // 0x876b04: r0 = "collector"
    //     0x876b04: add             x0, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876b08: ldr             x0, [x0, #0x3a0]
    // 0x876b0c: b               #0x876b18
    // 0x876b10: r0 = "coach"
    //     0x876b10: add             x0, PP, #0x11, lsl #12  ; [pp+0x11390] "coach"
    //     0x876b14: ldr             x0, [x0, #0x390]
    // 0x876b18: stur            x0, [fp, #-8]
    // 0x876b1c: r16 = "challenger"
    //     0x876b1c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876b20: ldr             x16, [x16, #0x398]
    // 0x876b24: stp             x16, x0, [SP]
    // 0x876b28: r0 = ==()
    //     0x876b28: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x876b2c: tbnz            w0, #4, #0x876cac
    // 0x876b30: nop             
    // 0x876b34: r4 = const [0, 0, 0, 0, null]
    //     0x876b34: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x876b38: r0 = getTotalUnlockedCards()
    //     0x876b38: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x876b3c: cmp             x0, #0x64
    // 0x876b40: b.lt            #0x876bac
    // 0x876b44: nop             
    // 0x876b48: r1 = Null
    //     0x876b48: mov             x1, NULL
    // 0x876b4c: r0 = Random()
    //     0x876b4c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876b50: mov             x1, x0
    // 0x876b54: r2 = 2
    //     0x876b54: movz            x2, #0x2
    // 0x876b58: r0 = nextInt()
    //     0x876b58: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876b5c: add             x3, x0, #3
    // 0x876b60: stur            x3, [fp, #-0x38]
    // 0x876b64: r1 = Null
    //     0x876b64: mov             x1, NULL
    // 0x876b68: r2 = 4
    //     0x876b68: movz            x2, #0x4
    // 0x876b6c: r0 = AllocateArray()
    //     0x876b6c: bl              #0x1502560  ; AllocateArrayStub
    // 0x876b70: mov             x2, x0
    // 0x876b74: r17 = "challenger"
    //     0x876b74: add             x17, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876b78: ldr             x17, [x17, #0x398]
    // 0x876b7c: StoreField: r2->field_f = r17
    //     0x876b7c: stur            w17, [x2, #0xf]
    // 0x876b80: ldur            x3, [fp, #-0x38]
    // 0x876b84: r0 = BoxInt64Instr(r3)
    //     0x876b84: sbfiz           x0, x3, #1, #0x1f
    //     0x876b88: cmp             x3, x0, asr #1
    //     0x876b8c: b.eq            #0x876b9c
    //     0x876b90: nop             
    //     0x876b94: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876b98: stur            x3, [x0, #7]
    // 0x876b9c: StoreField: r2->field_13 = r0
    //     0x876b9c: stur            w0, [x2, #0x13]
    // 0x876ba0: str             x2, [SP]
    // 0x876ba4: r0 = _interpolate()
    //     0x876ba4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876ba8: b               #0x876ca4
    // 0x876bac: r4 = const [0, 0, 0, 0, null]
    //     0x876bac: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x876bb0: r0 = getTotalUnlockedCards()
    //     0x876bb0: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x876bb4: cmp             x0, #0x3c
    // 0x876bb8: b.lt            #0x876c24
    // 0x876bbc: nop             
    // 0x876bc0: r1 = Null
    //     0x876bc0: mov             x1, NULL
    // 0x876bc4: r0 = Random()
    //     0x876bc4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876bc8: mov             x1, x0
    // 0x876bcc: r2 = 2
    //     0x876bcc: movz            x2, #0x2
    // 0x876bd0: r0 = nextInt()
    //     0x876bd0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876bd4: add             x3, x0, #2
    // 0x876bd8: stur            x3, [fp, #-0x38]
    // 0x876bdc: r1 = Null
    //     0x876bdc: mov             x1, NULL
    // 0x876be0: r2 = 4
    //     0x876be0: movz            x2, #0x4
    // 0x876be4: r0 = AllocateArray()
    //     0x876be4: bl              #0x1502560  ; AllocateArrayStub
    // 0x876be8: mov             x2, x0
    // 0x876bec: r17 = "challenger"
    //     0x876bec: add             x17, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876bf0: ldr             x17, [x17, #0x398]
    // 0x876bf4: StoreField: r2->field_f = r17
    //     0x876bf4: stur            w17, [x2, #0xf]
    // 0x876bf8: ldur            x3, [fp, #-0x38]
    // 0x876bfc: r0 = BoxInt64Instr(r3)
    //     0x876bfc: sbfiz           x0, x3, #1, #0x1f
    //     0x876c00: cmp             x3, x0, asr #1
    //     0x876c04: b.eq            #0x876c14
    //     0x876c08: nop             
    //     0x876c0c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876c10: stur            x3, [x0, #7]
    // 0x876c14: StoreField: r2->field_13 = r0
    //     0x876c14: stur            w0, [x2, #0x13]
    // 0x876c18: str             x2, [SP]
    // 0x876c1c: r0 = _interpolate()
    //     0x876c1c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876c20: b               #0x876ca4
    // 0x876c24: r4 = const [0, 0, 0, 0, null]
    //     0x876c24: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x876c28: r0 = getTotalUnlockedCards()
    //     0x876c28: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x876c2c: cmp             x0, #0x1e
    // 0x876c30: b.lt            #0x876c9c
    // 0x876c34: nop             
    // 0x876c38: r1 = Null
    //     0x876c38: mov             x1, NULL
    // 0x876c3c: r0 = Random()
    //     0x876c3c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876c40: mov             x1, x0
    // 0x876c44: r2 = 2
    //     0x876c44: movz            x2, #0x2
    // 0x876c48: r0 = nextInt()
    //     0x876c48: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876c4c: add             x3, x0, #1
    // 0x876c50: stur            x3, [fp, #-0x38]
    // 0x876c54: r1 = Null
    //     0x876c54: mov             x1, NULL
    // 0x876c58: r2 = 4
    //     0x876c58: movz            x2, #0x4
    // 0x876c5c: r0 = AllocateArray()
    //     0x876c5c: bl              #0x1502560  ; AllocateArrayStub
    // 0x876c60: mov             x2, x0
    // 0x876c64: r17 = "challenger"
    //     0x876c64: add             x17, PP, #0x11, lsl #12  ; [pp+0x11398] "challenger"
    //     0x876c68: ldr             x17, [x17, #0x398]
    // 0x876c6c: StoreField: r2->field_f = r17
    //     0x876c6c: stur            w17, [x2, #0xf]
    // 0x876c70: ldur            x3, [fp, #-0x38]
    // 0x876c74: r0 = BoxInt64Instr(r3)
    //     0x876c74: sbfiz           x0, x3, #1, #0x1f
    //     0x876c78: cmp             x3, x0, asr #1
    //     0x876c7c: b.eq            #0x876c8c
    //     0x876c80: nop             
    //     0x876c84: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876c88: stur            x3, [x0, #7]
    // 0x876c8c: StoreField: r2->field_13 = r0
    //     0x876c8c: stur            w0, [x2, #0x13]
    // 0x876c90: str             x2, [SP]
    // 0x876c94: r0 = _interpolate()
    //     0x876c94: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876c98: b               #0x876ca4
    // 0x876c9c: r0 = "challenger1"
    //     0x876c9c: add             x0, PP, #0x11, lsl #12  ; [pp+0x113b8] "challenger1"
    //     0x876ca0: ldr             x0, [x0, #0x3b8]
    // 0x876ca4: mov             x1, x0
    // 0x876ca8: b               #0x876cb0
    // 0x876cac: ldur            x1, [fp, #-8]
    // 0x876cb0: stur            x1, [fp, #-8]
    // 0x876cb4: r0 = LoadClassIdInstr(r1)
    //     0x876cb4: ldur            x0, [x1, #-1]
    //     0x876cb8: ubfx            x0, x0, #0xc, #0x14
    // 0x876cbc: r16 = "collector"
    //     0x876cbc: add             x16, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876cc0: ldr             x16, [x16, #0x3a0]
    // 0x876cc4: stp             x16, x1, [SP]
    // 0x876cc8: mov             lr, x0
    // 0x876ccc: ldr             lr, [x21, lr, lsl #3]
    // 0x876cd0: blr             lr
    // 0x876cd4: tbnz            w0, #4, #0x876f64
    // 0x876cd8: nop             
    // 0x876cdc: r0 = LoadStaticField(0xb54)
    //     0x876cdc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x876ce0: ldr             x0, [x0, #0x16a8]
    // 0x876ce4: cmp             w0, NULL
    // 0x876ce8: b.ne            #0x876cf8
    // 0x876cec: nop             
    // 0x876cf0: r0 = Null
    //     0x876cf0: mov             x0, NULL
    // 0x876cf4: b               #0x876d14
    // 0x876cf8: LoadField: r2 = r0->field_4b
    //     0x876cf8: ldur            x2, [x0, #0x4b]
    // 0x876cfc: r0 = BoxInt64Instr(r2)
    //     0x876cfc: sbfiz           x0, x2, #1, #0x1f
    //     0x876d00: cmp             x2, x0, asr #1
    //     0x876d04: b.eq            #0x876d14
    //     0x876d08: nop             
    //     0x876d0c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876d10: stur            x2, [x0, #7]
    // 0x876d14: cmp             w0, NULL
    // 0x876d18: b.ne            #0x876d28
    // 0x876d1c: nop             
    // 0x876d20: r3 = 0
    //     0x876d20: movz            x3, #0
    // 0x876d24: b               #0x876d3c
    // 0x876d28: r1 = LoadInt32Instr(r0)
    //     0x876d28: sbfx            x1, x0, #1, #0x1f
    //     0x876d2c: tbz             w0, #0, #0x876d38
    //     0x876d30: nop             
    //     0x876d34: ldur            x1, [x0, #7]
    // 0x876d38: mov             x3, x1
    // 0x876d3c: stur            x3, [fp, #-0x38]
    // 0x876d40: r0 = LoadStaticField(0xb54)
    //     0x876d40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x876d44: ldr             x0, [x0, #0x16a8]
    // 0x876d48: cmp             w0, NULL
    // 0x876d4c: b.ne            #0x876d5c
    // 0x876d50: nop             
    // 0x876d54: r0 = Null
    //     0x876d54: mov             x0, NULL
    // 0x876d58: b               #0x876d84
    // 0x876d5c: r17 = 347
    //     0x876d5c: movz            x17, #0x15b
    // 0x876d60: ldr             w1, [x0, x17]
    // 0x876d64: DecompressPointer r1
    //     0x876d64: add             x1, x1, HEAP, lsl #32
    // 0x876d68: r0 = LoadClassIdInstr(r1)
    //     0x876d68: ldur            x0, [x1, #-1]
    //     0x876d6c: ubfx            x0, x0, #0xc, #0x14
    // 0x876d70: r2 = "bankSavings"
    //     0x876d70: add             x2, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x876d74: ldr             x2, [x2, #0x3c0]
    // 0x876d78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x876d78: sub             lr, x0, #0xb4
    //     0x876d7c: ldr             lr, [x21, lr, lsl #3]
    //     0x876d80: blr             lr
    // 0x876d84: cmp             w0, NULL
    // 0x876d88: b.ne            #0x876d98
    // 0x876d8c: nop             
    // 0x876d90: r4 = 0
    //     0x876d90: movz            x4, #0
    // 0x876d94: b               #0x876d9c
    // 0x876d98: mov             x4, x0
    // 0x876d9c: ldur            x3, [fp, #-0x38]
    // 0x876da0: mov             x0, x4
    // 0x876da4: stur            x4, [fp, #-0x10]
    // 0x876da8: r2 = Null
    //     0x876da8: mov             x2, NULL
    // 0x876dac: r1 = Null
    //     0x876dac: mov             x1, NULL
    // 0x876db0: branchIfSmi(r0, 0x876de0)
    //     0x876db0: tbz             w0, #0, #0x876de0
    //     0x876db4: nop             
    // 0x876db8: r4 = LoadClassIdInstr(r0)
    //     0x876db8: ldur            x4, [x0, #-1]
    //     0x876dbc: ubfx            x4, x4, #0xc, #0x14
    // 0x876dc0: sub             x4, x4, #0x3b
    // 0x876dc4: cmp             x4, #1
    // 0x876dc8: b.ls            #0x876de0
    // 0x876dcc: nop             
    // 0x876dd0: r8 = int
    //     0x876dd0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x876dd4: r3 = Null
    //     0x876dd4: add             x3, PP, #0x11, lsl #12  ; [pp+0x113c8] Null
    //     0x876dd8: ldr             x3, [x3, #0x3c8]
    // 0x876ddc: r0 = int()
    //     0x876ddc: bl              #0x1524294  ; IsType_int_Stub
    // 0x876de0: ldur            x0, [fp, #-0x10]
    // 0x876de4: r1 = LoadInt32Instr(r0)
    //     0x876de4: sbfx            x1, x0, #1, #0x1f
    //     0x876de8: tbz             w0, #0, #0x876df4
    //     0x876dec: nop             
    //     0x876df0: ldur            x1, [x0, #7]
    // 0x876df4: ldur            x0, [fp, #-0x38]
    // 0x876df8: add             x2, x0, x1
    // 0x876dfc: stur            x2, [fp, #-0x80]
    // 0x876e00: r1 = Null
    //     0x876e00: mov             x1, NULL
    // 0x876e04: r0 = Random()
    //     0x876e04: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876e08: mov             x1, x0
    // 0x876e0c: r2 = 100
    //     0x876e0c: movz            x2, #0x64
    // 0x876e10: r0 = nextInt()
    //     0x876e10: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876e14: cmp             x0, #0x19
    // 0x876e18: b.ge            #0x876e84
    // 0x876e1c: nop             
    // 0x876e20: r1 = Null
    //     0x876e20: mov             x1, NULL
    // 0x876e24: r0 = Random()
    //     0x876e24: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876e28: mov             x1, x0
    // 0x876e2c: r2 = 3
    //     0x876e2c: movz            x2, #0x3
    // 0x876e30: r0 = nextInt()
    //     0x876e30: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876e34: add             x3, x0, #6
    // 0x876e38: stur            x3, [fp, #-0x38]
    // 0x876e3c: r1 = Null
    //     0x876e3c: mov             x1, NULL
    // 0x876e40: r2 = 4
    //     0x876e40: movz            x2, #0x4
    // 0x876e44: r0 = AllocateArray()
    //     0x876e44: bl              #0x1502560  ; AllocateArrayStub
    // 0x876e48: mov             x2, x0
    // 0x876e4c: r17 = "collector"
    //     0x876e4c: add             x17, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876e50: ldr             x17, [x17, #0x3a0]
    // 0x876e54: StoreField: r2->field_f = r17
    //     0x876e54: stur            w17, [x2, #0xf]
    // 0x876e58: ldur            x3, [fp, #-0x38]
    // 0x876e5c: r0 = BoxInt64Instr(r3)
    //     0x876e5c: sbfiz           x0, x3, #1, #0x1f
    //     0x876e60: cmp             x3, x0, asr #1
    //     0x876e64: b.eq            #0x876e74
    //     0x876e68: nop             
    //     0x876e6c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876e70: stur            x3, [x0, #7]
    // 0x876e74: StoreField: r2->field_13 = r0
    //     0x876e74: stur            w0, [x2, #0x13]
    // 0x876e78: str             x2, [SP]
    // 0x876e7c: r0 = _interpolate()
    //     0x876e7c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876e80: b               #0x876f5c
    // 0x876e84: ldur            x0, [fp, #-0x80]
    // 0x876e88: r17 = 10000
    //     0x876e88: movz            x17, #0x2710
    // 0x876e8c: cmp             x0, x17
    // 0x876e90: b.ge            #0x876efc
    // 0x876e94: nop             
    // 0x876e98: r1 = Null
    //     0x876e98: mov             x1, NULL
    // 0x876e9c: r0 = Random()
    //     0x876e9c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876ea0: mov             x1, x0
    // 0x876ea4: r2 = 2
    //     0x876ea4: movz            x2, #0x2
    // 0x876ea8: r0 = nextInt()
    //     0x876ea8: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876eac: add             x3, x0, #1
    // 0x876eb0: stur            x3, [fp, #-0x38]
    // 0x876eb4: r1 = Null
    //     0x876eb4: mov             x1, NULL
    // 0x876eb8: r2 = 4
    //     0x876eb8: movz            x2, #0x4
    // 0x876ebc: r0 = AllocateArray()
    //     0x876ebc: bl              #0x1502560  ; AllocateArrayStub
    // 0x876ec0: mov             x2, x0
    // 0x876ec4: r17 = "collector"
    //     0x876ec4: add             x17, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876ec8: ldr             x17, [x17, #0x3a0]
    // 0x876ecc: StoreField: r2->field_f = r17
    //     0x876ecc: stur            w17, [x2, #0xf]
    // 0x876ed0: ldur            x3, [fp, #-0x38]
    // 0x876ed4: r0 = BoxInt64Instr(r3)
    //     0x876ed4: sbfiz           x0, x3, #1, #0x1f
    //     0x876ed8: cmp             x3, x0, asr #1
    //     0x876edc: b.eq            #0x876eec
    //     0x876ee0: nop             
    //     0x876ee4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876ee8: stur            x3, [x0, #7]
    // 0x876eec: StoreField: r2->field_13 = r0
    //     0x876eec: stur            w0, [x2, #0x13]
    // 0x876ef0: str             x2, [SP]
    // 0x876ef4: r0 = _interpolate()
    //     0x876ef4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876ef8: b               #0x876f5c
    // 0x876efc: r1 = Null
    //     0x876efc: mov             x1, NULL
    // 0x876f00: r0 = Random()
    //     0x876f00: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x876f04: mov             x1, x0
    // 0x876f08: r2 = 3
    //     0x876f08: movz            x2, #0x3
    // 0x876f0c: r0 = nextInt()
    //     0x876f0c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x876f10: add             x3, x0, #3
    // 0x876f14: stur            x3, [fp, #-0x38]
    // 0x876f18: r1 = Null
    //     0x876f18: mov             x1, NULL
    // 0x876f1c: r2 = 4
    //     0x876f1c: movz            x2, #0x4
    // 0x876f20: r0 = AllocateArray()
    //     0x876f20: bl              #0x1502560  ; AllocateArrayStub
    // 0x876f24: mov             x2, x0
    // 0x876f28: r17 = "collector"
    //     0x876f28: add             x17, PP, #0x11, lsl #12  ; [pp+0x113a0] "collector"
    //     0x876f2c: ldr             x17, [x17, #0x3a0]
    // 0x876f30: StoreField: r2->field_f = r17
    //     0x876f30: stur            w17, [x2, #0xf]
    // 0x876f34: ldur            x3, [fp, #-0x38]
    // 0x876f38: r0 = BoxInt64Instr(r3)
    //     0x876f38: sbfiz           x0, x3, #1, #0x1f
    //     0x876f3c: cmp             x3, x0, asr #1
    //     0x876f40: b.eq            #0x876f50
    //     0x876f44: nop             
    //     0x876f48: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x876f4c: stur            x3, [x0, #7]
    // 0x876f50: StoreField: r2->field_13 = r0
    //     0x876f50: stur            w0, [x2, #0x13]
    // 0x876f54: str             x2, [SP]
    // 0x876f58: r0 = _interpolate()
    //     0x876f58: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x876f5c: mov             x1, x0
    // 0x876f60: b               #0x876f68
    // 0x876f64: ldur            x1, [fp, #-8]
    // 0x876f68: stur            x1, [fp, #-8]
    // 0x876f6c: r0 = LoadClassIdInstr(r1)
    //     0x876f6c: ldur            x0, [x1, #-1]
    //     0x876f70: ubfx            x0, x0, #0xc, #0x14
    // 0x876f74: r16 = "coach"
    //     0x876f74: add             x16, PP, #0x11, lsl #12  ; [pp+0x11390] "coach"
    //     0x876f78: ldr             x16, [x16, #0x390]
    // 0x876f7c: stp             x16, x1, [SP]
    // 0x876f80: mov             lr, x0
    // 0x876f84: ldr             lr, [x21, lr, lsl #3]
    // 0x876f88: blr             lr
    // 0x876f8c: tbnz            w0, #4, #0x876fc0
    // 0x876f90: nop             
    // 0x876f94: r4 = const [0, 0, 0, 0, null]
    //     0x876f94: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x876f98: r0 = getTotalUnlockedCards()
    //     0x876f98: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x876f9c: cmp             x0, #0x1e
    // 0x876fa0: b.lt            #0x876fb4
    // 0x876fa4: nop             
    // 0x876fa8: r0 = "coach2"
    //     0x876fa8: add             x0, PP, #0x11, lsl #12  ; [pp+0x113d8] "coach2"
    //     0x876fac: ldr             x0, [x0, #0x3d8]
    // 0x876fb0: b               #0x8838b4
    // 0x876fb4: r0 = "coach1"
    //     0x876fb4: add             x0, PP, #0x11, lsl #12  ; [pp+0x113e0] "coach1"
    //     0x876fb8: ldr             x0, [x0, #0x3e0]
    // 0x876fbc: b               #0x8838b4
    // 0x876fc0: ldur            x0, [fp, #-8]
    // 0x876fc4: b               #0x8838b4
    // 0x876fc8: r16 = "shoumaMemoryTrialNpc3"
    //     0x876fc8: add             x16, PP, #0x11, lsl #12  ; [pp+0x113e8] "shoumaMemoryTrialNpc3"
    //     0x876fcc: ldr             x16, [x16, #0x3e8]
    // 0x876fd0: ldur            lr, [fp, #-0x28]
    // 0x876fd4: stp             lr, x16, [SP]
    // 0x876fd8: r0 = ==()
    //     0x876fd8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x876fdc: tbnz            w0, #4, #0x8770c8
    // 0x876fe0: nop             
    // 0x876fe4: r0 = LoadStaticField(0xb54)
    //     0x876fe4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x876fe8: ldr             x0, [x0, #0x16a8]
    // 0x876fec: cmp             w0, NULL
    // 0x876ff0: b.ne            #0x877000
    // 0x876ff4: nop             
    // 0x876ff8: r0 = Null
    //     0x876ff8: mov             x0, NULL
    // 0x876ffc: b               #0x877028
    // 0x877000: r17 = 351
    //     0x877000: movz            x17, #0x15f
    // 0x877004: ldr             w1, [x0, x17]
    // 0x877008: DecompressPointer r1
    //     0x877008: add             x1, x1, HEAP, lsl #32
    // 0x87700c: r0 = LoadClassIdInstr(r1)
    //     0x87700c: ldur            x0, [x1, #-1]
    //     0x877010: ubfx            x0, x0, #0xc, #0x14
    // 0x877014: r2 = "shoumaMemoryTrialNpc3"
    //     0x877014: add             x2, PP, #0x11, lsl #12  ; [pp+0x113e8] "shoumaMemoryTrialNpc3"
    //     0x877018: ldr             x2, [x2, #0x3e8]
    // 0x87701c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87701c: sub             lr, x0, #0xb4
    //     0x877020: ldr             lr, [x21, lr, lsl #3]
    //     0x877024: blr             lr
    // 0x877028: cmp             w0, NULL
    // 0x87702c: b.ne            #0x87703c
    // 0x877030: nop             
    // 0x877034: r3 = ""
    //     0x877034: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877038: b               #0x877040
    // 0x87703c: mov             x3, x0
    // 0x877040: mov             x0, x3
    // 0x877044: stur            x3, [fp, #-8]
    // 0x877048: r2 = Null
    //     0x877048: mov             x2, NULL
    // 0x87704c: r1 = Null
    //     0x87704c: mov             x1, NULL
    // 0x877050: r4 = 59
    //     0x877050: movz            x4, #0x3b
    // 0x877054: branchIfSmi(r0, 0x877064)
    //     0x877054: tbz             w0, #0, #0x877064
    //     0x877058: nop             
    // 0x87705c: r4 = LoadClassIdInstr(r0)
    //     0x87705c: ldur            x4, [x0, #-1]
    //     0x877060: ubfx            x4, x4, #0xc, #0x14
    // 0x877064: sub             x4, x4, #0x5d
    // 0x877068: cmp             x4, #1
    // 0x87706c: b.ls            #0x877084
    // 0x877070: nop             
    // 0x877074: r8 = String
    //     0x877074: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877078: r3 = Null
    //     0x877078: add             x3, PP, #0x11, lsl #12  ; [pp+0x113f0] Null
    //     0x87707c: ldr             x3, [x3, #0x3f0]
    // 0x877080: r0 = String()
    //     0x877080: bl              #0x1523244  ; IsType_String_Stub
    // 0x877084: ldur            x0, [fp, #-8]
    // 0x877088: r1 = LoadClassIdInstr(r0)
    //     0x877088: ldur            x1, [x0, #-1]
    //     0x87708c: ubfx            x1, x1, #0xc, #0x14
    // 0x877090: r16 = ""
    //     0x877090: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877094: stp             x16, x0, [SP]
    // 0x877098: mov             x0, x1
    // 0x87709c: mov             lr, x0
    // 0x8770a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8770a4: blr             lr
    // 0x8770a8: tbnz            w0, #4, #0x8770bc
    // 0x8770ac: nop             
    // 0x8770b0: r0 = "fight"
    //     0x8770b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x8770b4: ldr             x0, [x0, #0x400]
    // 0x8770b8: b               #0x8838b4
    // 0x8770bc: r0 = "normalChat"
    //     0x8770bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x8770c0: ldr             x0, [x0, #0x408]
    // 0x8770c4: b               #0x8838b4
    // 0x8770c8: r16 = "shoumaMemoryTrialNpc4"
    //     0x8770c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11410] "shoumaMemoryTrialNpc4"
    //     0x8770cc: ldr             x16, [x16, #0x410]
    // 0x8770d0: ldur            lr, [fp, #-0x28]
    // 0x8770d4: stp             lr, x16, [SP]
    // 0x8770d8: r0 = ==()
    //     0x8770d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8770dc: tbnz            w0, #4, #0x8771c8
    // 0x8770e0: nop             
    // 0x8770e4: r0 = LoadStaticField(0xb54)
    //     0x8770e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8770e8: ldr             x0, [x0, #0x16a8]
    // 0x8770ec: cmp             w0, NULL
    // 0x8770f0: b.ne            #0x877100
    // 0x8770f4: nop             
    // 0x8770f8: r0 = Null
    //     0x8770f8: mov             x0, NULL
    // 0x8770fc: b               #0x877128
    // 0x877100: r17 = 351
    //     0x877100: movz            x17, #0x15f
    // 0x877104: ldr             w1, [x0, x17]
    // 0x877108: DecompressPointer r1
    //     0x877108: add             x1, x1, HEAP, lsl #32
    // 0x87710c: r0 = LoadClassIdInstr(r1)
    //     0x87710c: ldur            x0, [x1, #-1]
    //     0x877110: ubfx            x0, x0, #0xc, #0x14
    // 0x877114: r2 = "shoumaMemoryTrialNpc4"
    //     0x877114: add             x2, PP, #0x11, lsl #12  ; [pp+0x11410] "shoumaMemoryTrialNpc4"
    //     0x877118: ldr             x2, [x2, #0x410]
    // 0x87711c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87711c: sub             lr, x0, #0xb4
    //     0x877120: ldr             lr, [x21, lr, lsl #3]
    //     0x877124: blr             lr
    // 0x877128: cmp             w0, NULL
    // 0x87712c: b.ne            #0x87713c
    // 0x877130: nop             
    // 0x877134: r3 = ""
    //     0x877134: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877138: b               #0x877140
    // 0x87713c: mov             x3, x0
    // 0x877140: mov             x0, x3
    // 0x877144: stur            x3, [fp, #-8]
    // 0x877148: r2 = Null
    //     0x877148: mov             x2, NULL
    // 0x87714c: r1 = Null
    //     0x87714c: mov             x1, NULL
    // 0x877150: r4 = 59
    //     0x877150: movz            x4, #0x3b
    // 0x877154: branchIfSmi(r0, 0x877164)
    //     0x877154: tbz             w0, #0, #0x877164
    //     0x877158: nop             
    // 0x87715c: r4 = LoadClassIdInstr(r0)
    //     0x87715c: ldur            x4, [x0, #-1]
    //     0x877160: ubfx            x4, x4, #0xc, #0x14
    // 0x877164: sub             x4, x4, #0x5d
    // 0x877168: cmp             x4, #1
    // 0x87716c: b.ls            #0x877184
    // 0x877170: nop             
    // 0x877174: r8 = String
    //     0x877174: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877178: r3 = Null
    //     0x877178: add             x3, PP, #0x11, lsl #12  ; [pp+0x11418] Null
    //     0x87717c: ldr             x3, [x3, #0x418]
    // 0x877180: r0 = String()
    //     0x877180: bl              #0x1523244  ; IsType_String_Stub
    // 0x877184: ldur            x0, [fp, #-8]
    // 0x877188: r1 = LoadClassIdInstr(r0)
    //     0x877188: ldur            x1, [x0, #-1]
    //     0x87718c: ubfx            x1, x1, #0xc, #0x14
    // 0x877190: r16 = ""
    //     0x877190: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877194: stp             x16, x0, [SP]
    // 0x877198: mov             x0, x1
    // 0x87719c: mov             lr, x0
    // 0x8771a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8771a4: blr             lr
    // 0x8771a8: tbnz            w0, #4, #0x8771bc
    // 0x8771ac: nop             
    // 0x8771b0: r0 = "fight"
    //     0x8771b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x8771b4: ldr             x0, [x0, #0x400]
    // 0x8771b8: b               #0x8838b4
    // 0x8771bc: r0 = "normalChat"
    //     0x8771bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x8771c0: ldr             x0, [x0, #0x408]
    // 0x8771c4: b               #0x8838b4
    // 0x8771c8: r16 = "shoumaMemoryTrialNpc5"
    //     0x8771c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11428] "shoumaMemoryTrialNpc5"
    //     0x8771cc: ldr             x16, [x16, #0x428]
    // 0x8771d0: ldur            lr, [fp, #-0x28]
    // 0x8771d4: stp             lr, x16, [SP]
    // 0x8771d8: r0 = ==()
    //     0x8771d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8771dc: tbnz            w0, #4, #0x8772c8
    // 0x8771e0: nop             
    // 0x8771e4: r0 = LoadStaticField(0xb54)
    //     0x8771e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8771e8: ldr             x0, [x0, #0x16a8]
    // 0x8771ec: cmp             w0, NULL
    // 0x8771f0: b.ne            #0x877200
    // 0x8771f4: nop             
    // 0x8771f8: r0 = Null
    //     0x8771f8: mov             x0, NULL
    // 0x8771fc: b               #0x877228
    // 0x877200: r17 = 351
    //     0x877200: movz            x17, #0x15f
    // 0x877204: ldr             w1, [x0, x17]
    // 0x877208: DecompressPointer r1
    //     0x877208: add             x1, x1, HEAP, lsl #32
    // 0x87720c: r0 = LoadClassIdInstr(r1)
    //     0x87720c: ldur            x0, [x1, #-1]
    //     0x877210: ubfx            x0, x0, #0xc, #0x14
    // 0x877214: r2 = "shoumaMemoryTrialNpc5"
    //     0x877214: add             x2, PP, #0x11, lsl #12  ; [pp+0x11428] "shoumaMemoryTrialNpc5"
    //     0x877218: ldr             x2, [x2, #0x428]
    // 0x87721c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87721c: sub             lr, x0, #0xb4
    //     0x877220: ldr             lr, [x21, lr, lsl #3]
    //     0x877224: blr             lr
    // 0x877228: cmp             w0, NULL
    // 0x87722c: b.ne            #0x87723c
    // 0x877230: nop             
    // 0x877234: r3 = ""
    //     0x877234: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877238: b               #0x877240
    // 0x87723c: mov             x3, x0
    // 0x877240: mov             x0, x3
    // 0x877244: stur            x3, [fp, #-8]
    // 0x877248: r2 = Null
    //     0x877248: mov             x2, NULL
    // 0x87724c: r1 = Null
    //     0x87724c: mov             x1, NULL
    // 0x877250: r4 = 59
    //     0x877250: movz            x4, #0x3b
    // 0x877254: branchIfSmi(r0, 0x877264)
    //     0x877254: tbz             w0, #0, #0x877264
    //     0x877258: nop             
    // 0x87725c: r4 = LoadClassIdInstr(r0)
    //     0x87725c: ldur            x4, [x0, #-1]
    //     0x877260: ubfx            x4, x4, #0xc, #0x14
    // 0x877264: sub             x4, x4, #0x5d
    // 0x877268: cmp             x4, #1
    // 0x87726c: b.ls            #0x877284
    // 0x877270: nop             
    // 0x877274: r8 = String
    //     0x877274: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877278: r3 = Null
    //     0x877278: add             x3, PP, #0x11, lsl #12  ; [pp+0x11430] Null
    //     0x87727c: ldr             x3, [x3, #0x430]
    // 0x877280: r0 = String()
    //     0x877280: bl              #0x1523244  ; IsType_String_Stub
    // 0x877284: ldur            x0, [fp, #-8]
    // 0x877288: r1 = LoadClassIdInstr(r0)
    //     0x877288: ldur            x1, [x0, #-1]
    //     0x87728c: ubfx            x1, x1, #0xc, #0x14
    // 0x877290: r16 = ""
    //     0x877290: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877294: stp             x16, x0, [SP]
    // 0x877298: mov             x0, x1
    // 0x87729c: mov             lr, x0
    // 0x8772a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8772a4: blr             lr
    // 0x8772a8: tbnz            w0, #4, #0x8772bc
    // 0x8772ac: nop             
    // 0x8772b0: r0 = "fight"
    //     0x8772b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x8772b4: ldr             x0, [x0, #0x400]
    // 0x8772b8: b               #0x8838b4
    // 0x8772bc: r0 = "normalChat"
    //     0x8772bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x8772c0: ldr             x0, [x0, #0x408]
    // 0x8772c4: b               #0x8838b4
    // 0x8772c8: r16 = "shoumaMemoryTrialNpc6"
    //     0x8772c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11440] "shoumaMemoryTrialNpc6"
    //     0x8772cc: ldr             x16, [x16, #0x440]
    // 0x8772d0: ldur            lr, [fp, #-0x28]
    // 0x8772d4: stp             lr, x16, [SP]
    // 0x8772d8: r0 = ==()
    //     0x8772d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8772dc: tbnz            w0, #4, #0x8773c8
    // 0x8772e0: nop             
    // 0x8772e4: r0 = LoadStaticField(0xb54)
    //     0x8772e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8772e8: ldr             x0, [x0, #0x16a8]
    // 0x8772ec: cmp             w0, NULL
    // 0x8772f0: b.ne            #0x877300
    // 0x8772f4: nop             
    // 0x8772f8: r0 = Null
    //     0x8772f8: mov             x0, NULL
    // 0x8772fc: b               #0x877328
    // 0x877300: r17 = 351
    //     0x877300: movz            x17, #0x15f
    // 0x877304: ldr             w1, [x0, x17]
    // 0x877308: DecompressPointer r1
    //     0x877308: add             x1, x1, HEAP, lsl #32
    // 0x87730c: r0 = LoadClassIdInstr(r1)
    //     0x87730c: ldur            x0, [x1, #-1]
    //     0x877310: ubfx            x0, x0, #0xc, #0x14
    // 0x877314: r2 = "shoumaMemoryTrialNpc6"
    //     0x877314: add             x2, PP, #0x11, lsl #12  ; [pp+0x11440] "shoumaMemoryTrialNpc6"
    //     0x877318: ldr             x2, [x2, #0x440]
    // 0x87731c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87731c: sub             lr, x0, #0xb4
    //     0x877320: ldr             lr, [x21, lr, lsl #3]
    //     0x877324: blr             lr
    // 0x877328: cmp             w0, NULL
    // 0x87732c: b.ne            #0x87733c
    // 0x877330: nop             
    // 0x877334: r3 = ""
    //     0x877334: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877338: b               #0x877340
    // 0x87733c: mov             x3, x0
    // 0x877340: mov             x0, x3
    // 0x877344: stur            x3, [fp, #-8]
    // 0x877348: r2 = Null
    //     0x877348: mov             x2, NULL
    // 0x87734c: r1 = Null
    //     0x87734c: mov             x1, NULL
    // 0x877350: r4 = 59
    //     0x877350: movz            x4, #0x3b
    // 0x877354: branchIfSmi(r0, 0x877364)
    //     0x877354: tbz             w0, #0, #0x877364
    //     0x877358: nop             
    // 0x87735c: r4 = LoadClassIdInstr(r0)
    //     0x87735c: ldur            x4, [x0, #-1]
    //     0x877360: ubfx            x4, x4, #0xc, #0x14
    // 0x877364: sub             x4, x4, #0x5d
    // 0x877368: cmp             x4, #1
    // 0x87736c: b.ls            #0x877384
    // 0x877370: nop             
    // 0x877374: r8 = String
    //     0x877374: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877378: r3 = Null
    //     0x877378: add             x3, PP, #0x11, lsl #12  ; [pp+0x11448] Null
    //     0x87737c: ldr             x3, [x3, #0x448]
    // 0x877380: r0 = String()
    //     0x877380: bl              #0x1523244  ; IsType_String_Stub
    // 0x877384: ldur            x0, [fp, #-8]
    // 0x877388: r1 = LoadClassIdInstr(r0)
    //     0x877388: ldur            x1, [x0, #-1]
    //     0x87738c: ubfx            x1, x1, #0xc, #0x14
    // 0x877390: r16 = ""
    //     0x877390: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877394: stp             x16, x0, [SP]
    // 0x877398: mov             x0, x1
    // 0x87739c: mov             lr, x0
    // 0x8773a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8773a4: blr             lr
    // 0x8773a8: tbnz            w0, #4, #0x8773bc
    // 0x8773ac: nop             
    // 0x8773b0: r0 = "fight"
    //     0x8773b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x8773b4: ldr             x0, [x0, #0x400]
    // 0x8773b8: b               #0x8838b4
    // 0x8773bc: r0 = "normalChat"
    //     0x8773bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x8773c0: ldr             x0, [x0, #0x408]
    // 0x8773c4: b               #0x8838b4
    // 0x8773c8: r16 = "shoumaMemoryMainStory"
    //     0x8773c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11458] "shoumaMemoryMainStory"
    //     0x8773cc: ldr             x16, [x16, #0x458]
    // 0x8773d0: ldur            lr, [fp, #-0x28]
    // 0x8773d4: stp             lr, x16, [SP]
    // 0x8773d8: r0 = ==()
    //     0x8773d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8773dc: tbnz            w0, #4, #0x8774c4
    // 0x8773e0: nop             
    // 0x8773e4: r0 = LoadStaticField(0xb54)
    //     0x8773e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8773e8: ldr             x0, [x0, #0x16a8]
    // 0x8773ec: cmp             w0, NULL
    // 0x8773f0: b.ne            #0x877400
    // 0x8773f4: nop             
    // 0x8773f8: r0 = Null
    //     0x8773f8: mov             x0, NULL
    // 0x8773fc: b               #0x877428
    // 0x877400: r17 = 351
    //     0x877400: movz            x17, #0x15f
    // 0x877404: ldr             w1, [x0, x17]
    // 0x877408: DecompressPointer r1
    //     0x877408: add             x1, x1, HEAP, lsl #32
    // 0x87740c: r0 = LoadClassIdInstr(r1)
    //     0x87740c: ldur            x0, [x1, #-1]
    //     0x877410: ubfx            x0, x0, #0xc, #0x14
    // 0x877414: r2 = "shoumaMemoryMain"
    //     0x877414: add             x2, PP, #0x11, lsl #12  ; [pp+0x11460] "shoumaMemoryMain"
    //     0x877418: ldr             x2, [x2, #0x460]
    // 0x87741c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87741c: sub             lr, x0, #0xb4
    //     0x877420: ldr             lr, [x21, lr, lsl #3]
    //     0x877424: blr             lr
    // 0x877428: cmp             w0, NULL
    // 0x87742c: b.ne            #0x87743c
    // 0x877430: nop             
    // 0x877434: r3 = ""
    //     0x877434: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877438: b               #0x877440
    // 0x87743c: mov             x3, x0
    // 0x877440: mov             x0, x3
    // 0x877444: stur            x3, [fp, #-8]
    // 0x877448: r2 = Null
    //     0x877448: mov             x2, NULL
    // 0x87744c: r1 = Null
    //     0x87744c: mov             x1, NULL
    // 0x877450: r4 = 59
    //     0x877450: movz            x4, #0x3b
    // 0x877454: branchIfSmi(r0, 0x877464)
    //     0x877454: tbz             w0, #0, #0x877464
    //     0x877458: nop             
    // 0x87745c: r4 = LoadClassIdInstr(r0)
    //     0x87745c: ldur            x4, [x0, #-1]
    //     0x877460: ubfx            x4, x4, #0xc, #0x14
    // 0x877464: sub             x4, x4, #0x5d
    // 0x877468: cmp             x4, #1
    // 0x87746c: b.ls            #0x877484
    // 0x877470: nop             
    // 0x877474: r8 = String
    //     0x877474: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877478: r3 = Null
    //     0x877478: add             x3, PP, #0x11, lsl #12  ; [pp+0x11468] Null
    //     0x87747c: ldr             x3, [x3, #0x468]
    // 0x877480: r0 = String()
    //     0x877480: bl              #0x1523244  ; IsType_String_Stub
    // 0x877484: ldur            x0, [fp, #-8]
    // 0x877488: r1 = LoadClassIdInstr(r0)
    //     0x877488: ldur            x1, [x0, #-1]
    //     0x87748c: ubfx            x1, x1, #0xc, #0x14
    // 0x877490: r16 = ""
    //     0x877490: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877494: stp             x16, x0, [SP]
    // 0x877498: mov             x0, x1
    // 0x87749c: mov             lr, x0
    // 0x8774a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8774a4: blr             lr
    // 0x8774a8: tbnz            w0, #4, #0x8774bc
    // 0x8774ac: nop             
    // 0x8774b0: r0 = "shoumaMemoryMain1"
    //     0x8774b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11478] "shoumaMemoryMain1"
    //     0x8774b4: ldr             x0, [x0, #0x478]
    // 0x8774b8: b               #0x8838b4
    // 0x8774bc: r0 = ""
    //     0x8774bc: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8774c0: b               #0x8838b4
    // 0x8774c4: r16 = "shoumaMemoryMain8Win"
    //     0x8774c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11480] "shoumaMemoryMain8Win"
    //     0x8774c8: ldr             x16, [x16, #0x480]
    // 0x8774cc: ldur            lr, [fp, #-0x28]
    // 0x8774d0: stp             lr, x16, [SP]
    // 0x8774d4: r0 = ==()
    //     0x8774d4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8774d8: tbnz            w0, #4, #0x8775c8
    // 0x8774dc: nop             
    // 0x8774e0: r0 = LoadStaticField(0xb54)
    //     0x8774e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8774e4: ldr             x0, [x0, #0x16a8]
    // 0x8774e8: cmp             w0, NULL
    // 0x8774ec: b.ne            #0x8774fc
    // 0x8774f0: nop             
    // 0x8774f4: r0 = Null
    //     0x8774f4: mov             x0, NULL
    // 0x8774f8: b               #0x877524
    // 0x8774fc: r17 = 351
    //     0x8774fc: movz            x17, #0x15f
    // 0x877500: ldr             w1, [x0, x17]
    // 0x877504: DecompressPointer r1
    //     0x877504: add             x1, x1, HEAP, lsl #32
    // 0x877508: r0 = LoadClassIdInstr(r1)
    //     0x877508: ldur            x0, [x1, #-1]
    //     0x87750c: ubfx            x0, x0, #0xc, #0x14
    // 0x877510: r2 = "shoumaMemoryMain"
    //     0x877510: add             x2, PP, #0x11, lsl #12  ; [pp+0x11460] "shoumaMemoryMain"
    //     0x877514: ldr             x2, [x2, #0x460]
    // 0x877518: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877518: sub             lr, x0, #0xb4
    //     0x87751c: ldr             lr, [x21, lr, lsl #3]
    //     0x877520: blr             lr
    // 0x877524: cmp             w0, NULL
    // 0x877528: b.ne            #0x877538
    // 0x87752c: nop             
    // 0x877530: r3 = ""
    //     0x877530: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877534: b               #0x87753c
    // 0x877538: mov             x3, x0
    // 0x87753c: mov             x0, x3
    // 0x877540: stur            x3, [fp, #-8]
    // 0x877544: r2 = Null
    //     0x877544: mov             x2, NULL
    // 0x877548: r1 = Null
    //     0x877548: mov             x1, NULL
    // 0x87754c: r4 = 59
    //     0x87754c: movz            x4, #0x3b
    // 0x877550: branchIfSmi(r0, 0x877560)
    //     0x877550: tbz             w0, #0, #0x877560
    //     0x877554: nop             
    // 0x877558: r4 = LoadClassIdInstr(r0)
    //     0x877558: ldur            x4, [x0, #-1]
    //     0x87755c: ubfx            x4, x4, #0xc, #0x14
    // 0x877560: sub             x4, x4, #0x5d
    // 0x877564: cmp             x4, #1
    // 0x877568: b.ls            #0x877580
    // 0x87756c: nop             
    // 0x877570: r8 = String
    //     0x877570: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877574: r3 = Null
    //     0x877574: add             x3, PP, #0x11, lsl #12  ; [pp+0x11488] Null
    //     0x877578: ldr             x3, [x3, #0x488]
    // 0x87757c: r0 = String()
    //     0x87757c: bl              #0x1523244  ; IsType_String_Stub
    // 0x877580: ldur            x0, [fp, #-8]
    // 0x877584: r1 = LoadClassIdInstr(r0)
    //     0x877584: ldur            x1, [x0, #-1]
    //     0x877588: ubfx            x1, x1, #0xc, #0x14
    // 0x87758c: r16 = "8win"
    //     0x87758c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11498] "8win"
    //     0x877590: ldr             x16, [x16, #0x498]
    // 0x877594: stp             x16, x0, [SP]
    // 0x877598: mov             x0, x1
    // 0x87759c: mov             lr, x0
    // 0x8775a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8775a4: blr             lr
    // 0x8775a8: tbnz            w0, #4, #0x8775bc
    // 0x8775ac: nop             
    // 0x8775b0: r0 = "got4Win"
    //     0x8775b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x114a0] "got4Win"
    //     0x8775b4: ldr             x0, [x0, #0x4a0]
    // 0x8775b8: b               #0x8838b4
    // 0x8775bc: r0 = "got8WinFirstTime"
    //     0x8775bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x114a8] "got8WinFirstTime"
    //     0x8775c0: ldr             x0, [x0, #0x4a8]
    // 0x8775c4: b               #0x8838b4
    // 0x8775c8: r16 = "shoumaMemoryMain4Win"
    //     0x8775c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x114b0] "shoumaMemoryMain4Win"
    //     0x8775cc: ldr             x16, [x16, #0x4b0]
    // 0x8775d0: ldur            lr, [fp, #-0x28]
    // 0x8775d4: stp             lr, x16, [SP]
    // 0x8775d8: r0 = ==()
    //     0x8775d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8775dc: tbnz            w0, #4, #0x8776cc
    // 0x8775e0: nop             
    // 0x8775e4: r0 = LoadStaticField(0xb54)
    //     0x8775e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8775e8: ldr             x0, [x0, #0x16a8]
    // 0x8775ec: cmp             w0, NULL
    // 0x8775f0: b.ne            #0x877600
    // 0x8775f4: nop             
    // 0x8775f8: r0 = Null
    //     0x8775f8: mov             x0, NULL
    // 0x8775fc: b               #0x877628
    // 0x877600: r17 = 351
    //     0x877600: movz            x17, #0x15f
    // 0x877604: ldr             w1, [x0, x17]
    // 0x877608: DecompressPointer r1
    //     0x877608: add             x1, x1, HEAP, lsl #32
    // 0x87760c: r0 = LoadClassIdInstr(r1)
    //     0x87760c: ldur            x0, [x1, #-1]
    //     0x877610: ubfx            x0, x0, #0xc, #0x14
    // 0x877614: r2 = "shoumaMemoryMain"
    //     0x877614: add             x2, PP, #0x11, lsl #12  ; [pp+0x11460] "shoumaMemoryMain"
    //     0x877618: ldr             x2, [x2, #0x460]
    // 0x87761c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87761c: sub             lr, x0, #0xb4
    //     0x877620: ldr             lr, [x21, lr, lsl #3]
    //     0x877624: blr             lr
    // 0x877628: cmp             w0, NULL
    // 0x87762c: b.ne            #0x87763c
    // 0x877630: nop             
    // 0x877634: r3 = ""
    //     0x877634: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877638: b               #0x877640
    // 0x87763c: mov             x3, x0
    // 0x877640: mov             x0, x3
    // 0x877644: stur            x3, [fp, #-8]
    // 0x877648: r2 = Null
    //     0x877648: mov             x2, NULL
    // 0x87764c: r1 = Null
    //     0x87764c: mov             x1, NULL
    // 0x877650: r4 = 59
    //     0x877650: movz            x4, #0x3b
    // 0x877654: branchIfSmi(r0, 0x877664)
    //     0x877654: tbz             w0, #0, #0x877664
    //     0x877658: nop             
    // 0x87765c: r4 = LoadClassIdInstr(r0)
    //     0x87765c: ldur            x4, [x0, #-1]
    //     0x877660: ubfx            x4, x4, #0xc, #0x14
    // 0x877664: sub             x4, x4, #0x5d
    // 0x877668: cmp             x4, #1
    // 0x87766c: b.ls            #0x877684
    // 0x877670: nop             
    // 0x877674: r8 = String
    //     0x877674: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877678: r3 = Null
    //     0x877678: add             x3, PP, #0x11, lsl #12  ; [pp+0x114b8] Null
    //     0x87767c: ldr             x3, [x3, #0x4b8]
    // 0x877680: r0 = String()
    //     0x877680: bl              #0x1523244  ; IsType_String_Stub
    // 0x877684: ldur            x0, [fp, #-8]
    // 0x877688: r1 = LoadClassIdInstr(r0)
    //     0x877688: ldur            x1, [x0, #-1]
    //     0x87768c: ubfx            x1, x1, #0xc, #0x14
    // 0x877690: r16 = "4win"
    //     0x877690: add             x16, PP, #0x11, lsl #12  ; [pp+0x114c8] "4win"
    //     0x877694: ldr             x16, [x16, #0x4c8]
    // 0x877698: stp             x16, x0, [SP]
    // 0x87769c: mov             x0, x1
    // 0x8776a0: mov             lr, x0
    // 0x8776a4: ldr             lr, [x21, lr, lsl #3]
    // 0x8776a8: blr             lr
    // 0x8776ac: tbnz            w0, #4, #0x8776c0
    // 0x8776b0: nop             
    // 0x8776b4: r0 = "got4Win"
    //     0x8776b4: add             x0, PP, #0x11, lsl #12  ; [pp+0x114a0] "got4Win"
    //     0x8776b8: ldr             x0, [x0, #0x4a0]
    // 0x8776bc: b               #0x8838b4
    // 0x8776c0: r0 = "got4WinFirstTime"
    //     0x8776c0: add             x0, PP, #0x11, lsl #12  ; [pp+0x114d0] "got4WinFirstTime"
    //     0x8776c4: ldr             x0, [x0, #0x4d0]
    // 0x8776c8: b               #0x8838b4
    // 0x8776cc: r16 = "shoumaMemoryJerryBattle"
    //     0x8776cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x114d8] "shoumaMemoryJerryBattle"
    //     0x8776d0: ldr             x16, [x16, #0x4d8]
    // 0x8776d4: ldur            lr, [fp, #-0x28]
    // 0x8776d8: stp             lr, x16, [SP]
    // 0x8776dc: r0 = ==()
    //     0x8776dc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8776e0: tbnz            w0, #4, #0x877840
    // 0x8776e4: nop             
    // 0x8776e8: r0 = LoadStaticField(0xb54)
    //     0x8776e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8776ec: ldr             x0, [x0, #0x16a8]
    // 0x8776f0: cmp             w0, NULL
    // 0x8776f4: b.ne            #0x877704
    // 0x8776f8: nop             
    // 0x8776fc: r0 = Null
    //     0x8776fc: mov             x0, NULL
    // 0x877700: b               #0x877714
    // 0x877704: r17 = 311
    //     0x877704: movz            x17, #0x137
    // 0x877708: ldr             w1, [x0, x17]
    // 0x87770c: DecompressPointer r1
    //     0x87770c: add             x1, x1, HEAP, lsl #32
    // 0x877710: mov             x0, x1
    // 0x877714: cmp             w0, NULL
    // 0x877718: b.ne            #0x877734
    // 0x87771c: nop             
    // 0x877720: r1 = Null
    //     0x877720: mov             x1, NULL
    // 0x877724: r2 = 0
    //     0x877724: movz            x2, #0
    // 0x877728: r0 = _GrowableList()
    //     0x877728: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x87772c: mov             x1, x0
    // 0x877730: b               #0x877738
    // 0x877734: mov             x1, x0
    // 0x877738: r0 = LoadClassIdInstr(r1)
    //     0x877738: ldur            x0, [x1, #-1]
    //     0x87773c: ubfx            x0, x0, #0xc, #0x14
    // 0x877740: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x877740: movz            x17, #0xa37b
    //     0x877744: add             lr, x0, x17
    //     0x877748: ldr             lr, [x21, lr, lsl #3]
    //     0x87774c: blr             lr
    // 0x877750: stur            x0, [fp, #-8]
    // 0x877754: r2 = 0
    //     0x877754: movz            x2, #0
    // 0x877758: stur            x2, [fp, #-0x38]
    // 0x87775c: CheckStackOverflow
    //     0x87775c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x877760: cmp             SP, x16
    //     0x877764: b.ls            #0x883a1c
    //     0x877768: nop             
    // 0x87776c: mov             x1, x0
    // 0x877770: r0 = moveNext()
    //     0x877770: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x877774: tbnz            w0, #4, #0x877818
    // 0x877778: nop             
    // 0x87777c: ldur            x1, [fp, #-8]
    // 0x877780: r0 = current()
    //     0x877780: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x877784: mov             x3, x0
    // 0x877788: r2 = Null
    //     0x877788: mov             x2, NULL
    // 0x87778c: r1 = Null
    //     0x87778c: mov             x1, NULL
    // 0x877790: stur            x3, [fp, #-0x10]
    // 0x877794: r4 = 59
    //     0x877794: movz            x4, #0x3b
    // 0x877798: branchIfSmi(r0, 0x8777a8)
    //     0x877798: tbz             w0, #0, #0x8777a8
    //     0x87779c: nop             
    // 0x8777a0: r4 = LoadClassIdInstr(r0)
    //     0x8777a0: ldur            x4, [x0, #-1]
    //     0x8777a4: ubfx            x4, x4, #0xc, #0x14
    // 0x8777a8: sub             x4, x4, #0x5d
    // 0x8777ac: cmp             x4, #1
    // 0x8777b0: b.ls            #0x8777c8
    // 0x8777b4: nop             
    // 0x8777b8: r8 = String
    //     0x8777b8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8777bc: r3 = Null
    //     0x8777bc: add             x3, PP, #0x11, lsl #12  ; [pp+0x114e0] Null
    //     0x8777c0: ldr             x3, [x3, #0x4e0]
    // 0x8777c4: r0 = String()
    //     0x8777c4: bl              #0x1523244  ; IsType_String_Stub
    // 0x8777c8: ldur            x0, [fp, #-0x10]
    // 0x8777cc: r1 = LoadClassIdInstr(r0)
    //     0x8777cc: ldur            x1, [x0, #-1]
    //     0x8777d0: ubfx            x1, x1, #0xc, #0x14
    // 0x8777d4: r16 = "jumpsmash"
    //     0x8777d4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf478] "jumpsmash"
    //     0x8777d8: ldr             x16, [x16, #0x478]
    // 0x8777dc: stp             x16, x0, [SP]
    // 0x8777e0: mov             x0, x1
    // 0x8777e4: mov             lr, x0
    // 0x8777e8: ldr             lr, [x21, lr, lsl #3]
    // 0x8777ec: blr             lr
    // 0x8777f0: tbnz            w0, #4, #0x877808
    // 0x8777f4: nop             
    // 0x8777f8: ldur            x0, [fp, #-0x38]
    // 0x8777fc: add             x1, x0, #1
    // 0x877800: mov             x2, x1
    // 0x877804: b               #0x877810
    // 0x877808: ldur            x0, [fp, #-0x38]
    // 0x87780c: mov             x2, x0
    // 0x877810: ldur            x0, [fp, #-8]
    // 0x877814: b               #0x877758
    // 0x877818: ldur            x0, [fp, #-0x38]
    // 0x87781c: cmp             x0, #2
    // 0x877820: b.lt            #0x877834
    // 0x877824: nop             
    // 0x877828: r0 = "shoumaMemoryJerryBattle"
    //     0x877828: add             x0, PP, #0x11, lsl #12  ; [pp+0x114d8] "shoumaMemoryJerryBattle"
    //     0x87782c: ldr             x0, [x0, #0x4d8]
    // 0x877830: b               #0x8838b4
    // 0x877834: r0 = "rulesBlock"
    //     0x877834: add             x0, PP, #0x11, lsl #12  ; [pp+0x114f0] "rulesBlock"
    //     0x877838: ldr             x0, [x0, #0x4f0]
    // 0x87783c: b               #0x8838b4
    // 0x877840: r16 = "shoumaMemoryJerryWin"
    //     0x877840: add             x16, PP, #0x11, lsl #12  ; [pp+0x114f8] "shoumaMemoryJerryWin"
    //     0x877844: ldr             x16, [x16, #0x4f8]
    // 0x877848: ldur            lr, [fp, #-0x28]
    // 0x87784c: stp             lr, x16, [SP]
    // 0x877850: r0 = ==()
    //     0x877850: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877854: tbnz            w0, #4, #0x877944
    // 0x877858: nop             
    // 0x87785c: r0 = LoadStaticField(0xb54)
    //     0x87785c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877860: ldr             x0, [x0, #0x16a8]
    // 0x877864: cmp             w0, NULL
    // 0x877868: b.ne            #0x877878
    // 0x87786c: nop             
    // 0x877870: r0 = Null
    //     0x877870: mov             x0, NULL
    // 0x877874: b               #0x8778a0
    // 0x877878: r17 = 351
    //     0x877878: movz            x17, #0x15f
    // 0x87787c: ldr             w1, [x0, x17]
    // 0x877880: DecompressPointer r1
    //     0x877880: add             x1, x1, HEAP, lsl #32
    // 0x877884: r0 = LoadClassIdInstr(r1)
    //     0x877884: ldur            x0, [x1, #-1]
    //     0x877888: ubfx            x0, x0, #0xc, #0x14
    // 0x87788c: r2 = "shoumaMemoryNpc2"
    //     0x87788c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11500] "shoumaMemoryNpc2"
    //     0x877890: ldr             x2, [x2, #0x500]
    // 0x877894: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877894: sub             lr, x0, #0xb4
    //     0x877898: ldr             lr, [x21, lr, lsl #3]
    //     0x87789c: blr             lr
    // 0x8778a0: cmp             w0, NULL
    // 0x8778a4: b.ne            #0x8778b4
    // 0x8778a8: nop             
    // 0x8778ac: r3 = ""
    //     0x8778ac: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8778b0: b               #0x8778b8
    // 0x8778b4: mov             x3, x0
    // 0x8778b8: mov             x0, x3
    // 0x8778bc: stur            x3, [fp, #-8]
    // 0x8778c0: r2 = Null
    //     0x8778c0: mov             x2, NULL
    // 0x8778c4: r1 = Null
    //     0x8778c4: mov             x1, NULL
    // 0x8778c8: r4 = 59
    //     0x8778c8: movz            x4, #0x3b
    // 0x8778cc: branchIfSmi(r0, 0x8778dc)
    //     0x8778cc: tbz             w0, #0, #0x8778dc
    //     0x8778d0: nop             
    // 0x8778d4: r4 = LoadClassIdInstr(r0)
    //     0x8778d4: ldur            x4, [x0, #-1]
    //     0x8778d8: ubfx            x4, x4, #0xc, #0x14
    // 0x8778dc: sub             x4, x4, #0x5d
    // 0x8778e0: cmp             x4, #1
    // 0x8778e4: b.ls            #0x8778fc
    // 0x8778e8: nop             
    // 0x8778ec: r8 = String
    //     0x8778ec: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8778f0: r3 = Null
    //     0x8778f0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11508] Null
    //     0x8778f4: ldr             x3, [x3, #0x508]
    // 0x8778f8: r0 = String()
    //     0x8778f8: bl              #0x1523244  ; IsType_String_Stub
    // 0x8778fc: ldur            x0, [fp, #-8]
    // 0x877900: r1 = LoadClassIdInstr(r0)
    //     0x877900: ldur            x1, [x0, #-1]
    //     0x877904: ubfx            x1, x1, #0xc, #0x14
    // 0x877908: r16 = "win"
    //     0x877908: add             x16, PP, #0x11, lsl #12  ; [pp+0x11518] "win"
    //     0x87790c: ldr             x16, [x16, #0x518]
    // 0x877910: stp             x16, x0, [SP]
    // 0x877914: mov             x0, x1
    // 0x877918: mov             lr, x0
    // 0x87791c: ldr             lr, [x21, lr, lsl #3]
    // 0x877920: blr             lr
    // 0x877924: tbnz            w0, #4, #0x877938
    // 0x877928: nop             
    // 0x87792c: r0 = "normalWin"
    //     0x87792c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11520] "normalWin"
    //     0x877930: ldr             x0, [x0, #0x520]
    // 0x877934: b               #0x8838b4
    // 0x877938: r0 = "firstTimeWin"
    //     0x877938: add             x0, PP, #0x11, lsl #12  ; [pp+0x11528] "firstTimeWin"
    //     0x87793c: ldr             x0, [x0, #0x528]
    // 0x877940: b               #0x8838b4
    // 0x877944: r16 = "shoumaMemoryTrialNpc7Win"
    //     0x877944: add             x16, PP, #0x11, lsl #12  ; [pp+0x11530] "shoumaMemoryTrialNpc7Win"
    //     0x877948: ldr             x16, [x16, #0x530]
    // 0x87794c: ldur            lr, [fp, #-0x28]
    // 0x877950: stp             lr, x16, [SP]
    // 0x877954: r0 = ==()
    //     0x877954: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877958: tbnz            w0, #4, #0x877a48
    // 0x87795c: nop             
    // 0x877960: r0 = LoadStaticField(0xb54)
    //     0x877960: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877964: ldr             x0, [x0, #0x16a8]
    // 0x877968: cmp             w0, NULL
    // 0x87796c: b.ne            #0x87797c
    // 0x877970: nop             
    // 0x877974: r0 = Null
    //     0x877974: mov             x0, NULL
    // 0x877978: b               #0x8779a4
    // 0x87797c: r17 = 351
    //     0x87797c: movz            x17, #0x15f
    // 0x877980: ldr             w1, [x0, x17]
    // 0x877984: DecompressPointer r1
    //     0x877984: add             x1, x1, HEAP, lsl #32
    // 0x877988: r0 = LoadClassIdInstr(r1)
    //     0x877988: ldur            x0, [x1, #-1]
    //     0x87798c: ubfx            x0, x0, #0xc, #0x14
    // 0x877990: r2 = "shoumaMemoryTrialNpc7"
    //     0x877990: add             x2, PP, #0x11, lsl #12  ; [pp+0x11538] "shoumaMemoryTrialNpc7"
    //     0x877994: ldr             x2, [x2, #0x538]
    // 0x877998: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877998: sub             lr, x0, #0xb4
    //     0x87799c: ldr             lr, [x21, lr, lsl #3]
    //     0x8779a0: blr             lr
    // 0x8779a4: cmp             w0, NULL
    // 0x8779a8: b.ne            #0x8779b8
    // 0x8779ac: nop             
    // 0x8779b0: r3 = ""
    //     0x8779b0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8779b4: b               #0x8779bc
    // 0x8779b8: mov             x3, x0
    // 0x8779bc: mov             x0, x3
    // 0x8779c0: stur            x3, [fp, #-8]
    // 0x8779c4: r2 = Null
    //     0x8779c4: mov             x2, NULL
    // 0x8779c8: r1 = Null
    //     0x8779c8: mov             x1, NULL
    // 0x8779cc: r4 = 59
    //     0x8779cc: movz            x4, #0x3b
    // 0x8779d0: branchIfSmi(r0, 0x8779e0)
    //     0x8779d0: tbz             w0, #0, #0x8779e0
    //     0x8779d4: nop             
    // 0x8779d8: r4 = LoadClassIdInstr(r0)
    //     0x8779d8: ldur            x4, [x0, #-1]
    //     0x8779dc: ubfx            x4, x4, #0xc, #0x14
    // 0x8779e0: sub             x4, x4, #0x5d
    // 0x8779e4: cmp             x4, #1
    // 0x8779e8: b.ls            #0x877a00
    // 0x8779ec: nop             
    // 0x8779f0: r8 = String
    //     0x8779f0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8779f4: r3 = Null
    //     0x8779f4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11540] Null
    //     0x8779f8: ldr             x3, [x3, #0x540]
    // 0x8779fc: r0 = String()
    //     0x8779fc: bl              #0x1523244  ; IsType_String_Stub
    // 0x877a00: ldur            x0, [fp, #-8]
    // 0x877a04: r1 = LoadClassIdInstr(r0)
    //     0x877a04: ldur            x1, [x0, #-1]
    //     0x877a08: ubfx            x1, x1, #0xc, #0x14
    // 0x877a0c: r16 = "win"
    //     0x877a0c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11518] "win"
    //     0x877a10: ldr             x16, [x16, #0x518]
    // 0x877a14: stp             x16, x0, [SP]
    // 0x877a18: mov             x0, x1
    // 0x877a1c: mov             lr, x0
    // 0x877a20: ldr             lr, [x21, lr, lsl #3]
    // 0x877a24: blr             lr
    // 0x877a28: tbnz            w0, #4, #0x877a3c
    // 0x877a2c: nop             
    // 0x877a30: r0 = "normalWin"
    //     0x877a30: add             x0, PP, #0x11, lsl #12  ; [pp+0x11520] "normalWin"
    //     0x877a34: ldr             x0, [x0, #0x520]
    // 0x877a38: b               #0x8838b4
    // 0x877a3c: r0 = "firstTimeWin"
    //     0x877a3c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11528] "firstTimeWin"
    //     0x877a40: ldr             x0, [x0, #0x528]
    // 0x877a44: b               #0x8838b4
    // 0x877a48: r16 = "shoumaMemoryJacky"
    //     0x877a48: add             x16, PP, #0x11, lsl #12  ; [pp+0x11550] "shoumaMemoryJacky"
    //     0x877a4c: ldr             x16, [x16, #0x550]
    // 0x877a50: ldur            lr, [fp, #-0x28]
    // 0x877a54: stp             lr, x16, [SP]
    // 0x877a58: r0 = ==()
    //     0x877a58: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877a5c: tbnz            w0, #4, #0x877bf0
    // 0x877a60: nop             
    // 0x877a64: r0 = LoadStaticField(0xb54)
    //     0x877a64: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877a68: ldr             x0, [x0, #0x16a8]
    // 0x877a6c: cmp             w0, NULL
    // 0x877a70: b.ne            #0x877a80
    // 0x877a74: nop             
    // 0x877a78: r0 = Null
    //     0x877a78: mov             x0, NULL
    // 0x877a7c: b               #0x877aa8
    // 0x877a80: r17 = 351
    //     0x877a80: movz            x17, #0x15f
    // 0x877a84: ldr             w1, [x0, x17]
    // 0x877a88: DecompressPointer r1
    //     0x877a88: add             x1, x1, HEAP, lsl #32
    // 0x877a8c: r0 = LoadClassIdInstr(r1)
    //     0x877a8c: ldur            x0, [x1, #-1]
    //     0x877a90: ubfx            x0, x0, #0xc, #0x14
    // 0x877a94: r2 = "shoumaMemoryJacky"
    //     0x877a94: add             x2, PP, #0x11, lsl #12  ; [pp+0x11550] "shoumaMemoryJacky"
    //     0x877a98: ldr             x2, [x2, #0x550]
    // 0x877a9c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877a9c: sub             lr, x0, #0xb4
    //     0x877aa0: ldr             lr, [x21, lr, lsl #3]
    //     0x877aa4: blr             lr
    // 0x877aa8: cmp             w0, NULL
    // 0x877aac: b.ne            #0x877abc
    // 0x877ab0: nop             
    // 0x877ab4: r3 = ""
    //     0x877ab4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877ab8: b               #0x877ac0
    // 0x877abc: mov             x3, x0
    // 0x877ac0: mov             x0, x3
    // 0x877ac4: stur            x3, [fp, #-8]
    // 0x877ac8: r2 = Null
    //     0x877ac8: mov             x2, NULL
    // 0x877acc: r1 = Null
    //     0x877acc: mov             x1, NULL
    // 0x877ad0: r4 = 59
    //     0x877ad0: movz            x4, #0x3b
    // 0x877ad4: branchIfSmi(r0, 0x877ae4)
    //     0x877ad4: tbz             w0, #0, #0x877ae4
    //     0x877ad8: nop             
    // 0x877adc: r4 = LoadClassIdInstr(r0)
    //     0x877adc: ldur            x4, [x0, #-1]
    //     0x877ae0: ubfx            x4, x4, #0xc, #0x14
    // 0x877ae4: sub             x4, x4, #0x5d
    // 0x877ae8: cmp             x4, #1
    // 0x877aec: b.ls            #0x877b04
    // 0x877af0: nop             
    // 0x877af4: r8 = String
    //     0x877af4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877af8: r3 = Null
    //     0x877af8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11558] Null
    //     0x877afc: ldr             x3, [x3, #0x558]
    // 0x877b00: r0 = String()
    //     0x877b00: bl              #0x1523244  ; IsType_String_Stub
    // 0x877b04: ldur            x1, [fp, #-8]
    // 0x877b08: r0 = LoadClassIdInstr(r1)
    //     0x877b08: ldur            x0, [x1, #-1]
    //     0x877b0c: ubfx            x0, x0, #0xc, #0x14
    // 0x877b10: r16 = "quest1"
    //     0x877b10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11568] "quest1"
    //     0x877b14: ldr             x16, [x16, #0x568]
    // 0x877b18: stp             x16, x1, [SP]
    // 0x877b1c: mov             lr, x0
    // 0x877b20: ldr             lr, [x21, lr, lsl #3]
    // 0x877b24: blr             lr
    // 0x877b28: tbnz            w0, #4, #0x877b3c
    // 0x877b2c: nop             
    // 0x877b30: r0 = "jogQuestion"
    //     0x877b30: add             x0, PP, #0x11, lsl #12  ; [pp+0x11570] "jogQuestion"
    //     0x877b34: ldr             x0, [x0, #0x570]
    // 0x877b38: b               #0x8838b4
    // 0x877b3c: ldur            x1, [fp, #-8]
    // 0x877b40: r0 = LoadClassIdInstr(r1)
    //     0x877b40: ldur            x0, [x1, #-1]
    //     0x877b44: ubfx            x0, x0, #0xc, #0x14
    // 0x877b48: r16 = "quest2"
    //     0x877b48: add             x16, PP, #0x11, lsl #12  ; [pp+0x11578] "quest2"
    //     0x877b4c: ldr             x16, [x16, #0x578]
    // 0x877b50: stp             x16, x1, [SP]
    // 0x877b54: mov             lr, x0
    // 0x877b58: ldr             lr, [x21, lr, lsl #3]
    // 0x877b5c: blr             lr
    // 0x877b60: tbnz            w0, #4, #0x877b74
    // 0x877b64: nop             
    // 0x877b68: r0 = "jogQuestion"
    //     0x877b68: add             x0, PP, #0x11, lsl #12  ; [pp+0x11570] "jogQuestion"
    //     0x877b6c: ldr             x0, [x0, #0x570]
    // 0x877b70: b               #0x8838b4
    // 0x877b74: ldur            x1, [fp, #-8]
    // 0x877b78: r0 = LoadClassIdInstr(r1)
    //     0x877b78: ldur            x0, [x1, #-1]
    //     0x877b7c: ubfx            x0, x0, #0xc, #0x14
    // 0x877b80: r16 = "quest3"
    //     0x877b80: add             x16, PP, #0x11, lsl #12  ; [pp+0x11580] "quest3"
    //     0x877b84: ldr             x16, [x16, #0x580]
    // 0x877b88: stp             x16, x1, [SP]
    // 0x877b8c: mov             lr, x0
    // 0x877b90: ldr             lr, [x21, lr, lsl #3]
    // 0x877b94: blr             lr
    // 0x877b98: tbnz            w0, #4, #0x877bac
    // 0x877b9c: nop             
    // 0x877ba0: r0 = "battleReady"
    //     0x877ba0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11588] "battleReady"
    //     0x877ba4: ldr             x0, [x0, #0x588]
    // 0x877ba8: b               #0x8838b4
    // 0x877bac: ldur            x0, [fp, #-8]
    // 0x877bb0: r1 = LoadClassIdInstr(r0)
    //     0x877bb0: ldur            x1, [x0, #-1]
    //     0x877bb4: ubfx            x1, x1, #0xc, #0x14
    // 0x877bb8: r16 = "complete"
    //     0x877bb8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x877bbc: ldr             x16, [x16, #0x590]
    // 0x877bc0: stp             x16, x0, [SP]
    // 0x877bc4: mov             x0, x1
    // 0x877bc8: mov             lr, x0
    // 0x877bcc: ldr             lr, [x21, lr, lsl #3]
    // 0x877bd0: blr             lr
    // 0x877bd4: tbnz            w0, #4, #0x877be4
    // 0x877bd8: nop             
    // 0x877bdc: r0 = ""
    //     0x877bdc: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877be0: b               #0x8838b4
    // 0x877be4: r0 = "firstTime"
    //     0x877be4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x877be8: ldr             x0, [x0, #0x598]
    // 0x877bec: b               #0x8838b4
    // 0x877bf0: r16 = "shoumaMemoryJackyJog"
    //     0x877bf0: add             x16, PP, #0x11, lsl #12  ; [pp+0x115a0] "shoumaMemoryJackyJog"
    //     0x877bf4: ldr             x16, [x16, #0x5a0]
    // 0x877bf8: ldur            lr, [fp, #-0x28]
    // 0x877bfc: stp             lr, x16, [SP]
    // 0x877c00: r0 = ==()
    //     0x877c00: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877c04: tbnz            w0, #4, #0x877d2c
    // 0x877c08: nop             
    // 0x877c0c: r0 = LoadStaticField(0xb54)
    //     0x877c0c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877c10: ldr             x0, [x0, #0x16a8]
    // 0x877c14: cmp             w0, NULL
    // 0x877c18: b.ne            #0x877c28
    // 0x877c1c: nop             
    // 0x877c20: r0 = Null
    //     0x877c20: mov             x0, NULL
    // 0x877c24: b               #0x877c50
    // 0x877c28: r17 = 351
    //     0x877c28: movz            x17, #0x15f
    // 0x877c2c: ldr             w1, [x0, x17]
    // 0x877c30: DecompressPointer r1
    //     0x877c30: add             x1, x1, HEAP, lsl #32
    // 0x877c34: r0 = LoadClassIdInstr(r1)
    //     0x877c34: ldur            x0, [x1, #-1]
    //     0x877c38: ubfx            x0, x0, #0xc, #0x14
    // 0x877c3c: r2 = "shoumaMemoryJacky"
    //     0x877c3c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11550] "shoumaMemoryJacky"
    //     0x877c40: ldr             x2, [x2, #0x550]
    // 0x877c44: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877c44: sub             lr, x0, #0xb4
    //     0x877c48: ldr             lr, [x21, lr, lsl #3]
    //     0x877c4c: blr             lr
    // 0x877c50: cmp             w0, NULL
    // 0x877c54: b.ne            #0x877c64
    // 0x877c58: nop             
    // 0x877c5c: r3 = ""
    //     0x877c5c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877c60: b               #0x877c68
    // 0x877c64: mov             x3, x0
    // 0x877c68: mov             x0, x3
    // 0x877c6c: stur            x3, [fp, #-8]
    // 0x877c70: r2 = Null
    //     0x877c70: mov             x2, NULL
    // 0x877c74: r1 = Null
    //     0x877c74: mov             x1, NULL
    // 0x877c78: r4 = 59
    //     0x877c78: movz            x4, #0x3b
    // 0x877c7c: branchIfSmi(r0, 0x877c8c)
    //     0x877c7c: tbz             w0, #0, #0x877c8c
    //     0x877c80: nop             
    // 0x877c84: r4 = LoadClassIdInstr(r0)
    //     0x877c84: ldur            x4, [x0, #-1]
    //     0x877c88: ubfx            x4, x4, #0xc, #0x14
    // 0x877c8c: sub             x4, x4, #0x5d
    // 0x877c90: cmp             x4, #1
    // 0x877c94: b.ls            #0x877cac
    // 0x877c98: nop             
    // 0x877c9c: r8 = String
    //     0x877c9c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877ca0: r3 = Null
    //     0x877ca0: add             x3, PP, #0x11, lsl #12  ; [pp+0x115a8] Null
    //     0x877ca4: ldr             x3, [x3, #0x5a8]
    // 0x877ca8: r0 = String()
    //     0x877ca8: bl              #0x1523244  ; IsType_String_Stub
    // 0x877cac: ldur            x1, [fp, #-8]
    // 0x877cb0: r0 = LoadClassIdInstr(r1)
    //     0x877cb0: ldur            x0, [x1, #-1]
    //     0x877cb4: ubfx            x0, x0, #0xc, #0x14
    // 0x877cb8: r16 = "quest1"
    //     0x877cb8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11568] "quest1"
    //     0x877cbc: ldr             x16, [x16, #0x568]
    // 0x877cc0: stp             x16, x1, [SP]
    // 0x877cc4: mov             lr, x0
    // 0x877cc8: ldr             lr, [x21, lr, lsl #3]
    // 0x877ccc: blr             lr
    // 0x877cd0: tbnz            w0, #4, #0x877ce4
    // 0x877cd4: nop             
    // 0x877cd8: r0 = "inProgress"
    //     0x877cd8: add             x0, PP, #0x11, lsl #12  ; [pp+0x115b8] "inProgress"
    //     0x877cdc: ldr             x0, [x0, #0x5b8]
    // 0x877ce0: b               #0x8838b4
    // 0x877ce4: ldur            x0, [fp, #-8]
    // 0x877ce8: r1 = LoadClassIdInstr(r0)
    //     0x877ce8: ldur            x1, [x0, #-1]
    //     0x877cec: ubfx            x1, x1, #0xc, #0x14
    // 0x877cf0: r16 = "quest2"
    //     0x877cf0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11578] "quest2"
    //     0x877cf4: ldr             x16, [x16, #0x578]
    // 0x877cf8: stp             x16, x0, [SP]
    // 0x877cfc: mov             x0, x1
    // 0x877d00: mov             lr, x0
    // 0x877d04: ldr             lr, [x21, lr, lsl #3]
    // 0x877d08: blr             lr
    // 0x877d0c: tbnz            w0, #4, #0x877d20
    // 0x877d10: nop             
    // 0x877d14: r0 = "battleReady"
    //     0x877d14: add             x0, PP, #0x11, lsl #12  ; [pp+0x11588] "battleReady"
    //     0x877d18: ldr             x0, [x0, #0x588]
    // 0x877d1c: b               #0x8838b4
    // 0x877d20: r0 = "firstTimeFinish"
    //     0x877d20: add             x0, PP, #0x11, lsl #12  ; [pp+0x115c0] "firstTimeFinish"
    //     0x877d24: ldr             x0, [x0, #0x5c0]
    // 0x877d28: b               #0x8838b4
    // 0x877d2c: r16 = "shoumaMemoryJackyBattle"
    //     0x877d2c: add             x16, PP, #0x11, lsl #12  ; [pp+0x115c8] "shoumaMemoryJackyBattle"
    //     0x877d30: ldr             x16, [x16, #0x5c8]
    // 0x877d34: ldur            lr, [fp, #-0x28]
    // 0x877d38: stp             lr, x16, [SP]
    // 0x877d3c: r0 = ==()
    //     0x877d3c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877d40: tbnz            w0, #4, #0x877e9c
    // 0x877d44: nop             
    // 0x877d48: r0 = LoadStaticField(0xb54)
    //     0x877d48: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877d4c: ldr             x0, [x0, #0x16a8]
    // 0x877d50: cmp             w0, NULL
    // 0x877d54: b.ne            #0x877d64
    // 0x877d58: nop             
    // 0x877d5c: r0 = Null
    //     0x877d5c: mov             x0, NULL
    // 0x877d60: b               #0x877d74
    // 0x877d64: r17 = 311
    //     0x877d64: movz            x17, #0x137
    // 0x877d68: ldr             w1, [x0, x17]
    // 0x877d6c: DecompressPointer r1
    //     0x877d6c: add             x1, x1, HEAP, lsl #32
    // 0x877d70: mov             x0, x1
    // 0x877d74: cmp             w0, NULL
    // 0x877d78: b.ne            #0x877d94
    // 0x877d7c: nop             
    // 0x877d80: r1 = Null
    //     0x877d80: mov             x1, NULL
    // 0x877d84: r2 = 0
    //     0x877d84: movz            x2, #0
    // 0x877d88: r0 = _GrowableList()
    //     0x877d88: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x877d8c: mov             x1, x0
    // 0x877d90: b               #0x877d98
    // 0x877d94: mov             x1, x0
    // 0x877d98: r0 = LoadClassIdInstr(r1)
    //     0x877d98: ldur            x0, [x1, #-1]
    //     0x877d9c: ubfx            x0, x0, #0xc, #0x14
    // 0x877da0: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x877da0: movz            x17, #0xa37b
    //     0x877da4: add             lr, x0, x17
    //     0x877da8: ldr             lr, [x21, lr, lsl #3]
    //     0x877dac: blr             lr
    // 0x877db0: stur            x0, [fp, #-8]
    // 0x877db4: r2 = 0
    //     0x877db4: movz            x2, #0
    // 0x877db8: stur            x2, [fp, #-0x38]
    // 0x877dbc: CheckStackOverflow
    //     0x877dbc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x877dc0: cmp             SP, x16
    //     0x877dc4: b.ls            #0x883a24
    //     0x877dc8: nop             
    // 0x877dcc: mov             x1, x0
    // 0x877dd0: r0 = moveNext()
    //     0x877dd0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x877dd4: tbnz            w0, #4, #0x877e74
    // 0x877dd8: nop             
    // 0x877ddc: ldur            x1, [fp, #-8]
    // 0x877de0: r0 = current()
    //     0x877de0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x877de4: mov             x3, x0
    // 0x877de8: r2 = Null
    //     0x877de8: mov             x2, NULL
    // 0x877dec: r1 = Null
    //     0x877dec: mov             x1, NULL
    // 0x877df0: stur            x3, [fp, #-0x10]
    // 0x877df4: r4 = 59
    //     0x877df4: movz            x4, #0x3b
    // 0x877df8: branchIfSmi(r0, 0x877e08)
    //     0x877df8: tbz             w0, #0, #0x877e08
    //     0x877dfc: nop             
    // 0x877e00: r4 = LoadClassIdInstr(r0)
    //     0x877e00: ldur            x4, [x0, #-1]
    //     0x877e04: ubfx            x4, x4, #0xc, #0x14
    // 0x877e08: sub             x4, x4, #0x5d
    // 0x877e0c: cmp             x4, #1
    // 0x877e10: b.ls            #0x877e28
    // 0x877e14: nop             
    // 0x877e18: r8 = String
    //     0x877e18: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877e1c: r3 = Null
    //     0x877e1c: add             x3, PP, #0x11, lsl #12  ; [pp+0x115d0] Null
    //     0x877e20: ldr             x3, [x3, #0x5d0]
    // 0x877e24: r0 = String()
    //     0x877e24: bl              #0x1523244  ; IsType_String_Stub
    // 0x877e28: ldur            x1, [fp, #-0x10]
    // 0x877e2c: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x877e2c: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x877e30: r0 = getCard()
    //     0x877e30: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x877e34: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x877e34: ldur            w1, [x0, #0x17]
    // 0x877e38: DecompressPointer r1
    //     0x877e38: add             x1, x1, HEAP, lsl #32
    // 0x877e3c: r16 = Instance_CardType
    //     0x877e3c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ea0] Obj!CardType@ec8721
    //     0x877e40: ldr             x16, [x16, #0xea0]
    // 0x877e44: stp             x16, x1, [SP]
    // 0x877e48: r0 = ==()
    //     0x877e48: bl              #0x1482ae0  ; [dart:core] Object::==
    // 0x877e4c: tbnz            w0, #4, #0x877e64
    // 0x877e50: nop             
    // 0x877e54: ldur            x0, [fp, #-0x38]
    // 0x877e58: add             x1, x0, #1
    // 0x877e5c: mov             x2, x1
    // 0x877e60: b               #0x877e6c
    // 0x877e64: ldur            x0, [fp, #-0x38]
    // 0x877e68: mov             x2, x0
    // 0x877e6c: ldur            x0, [fp, #-8]
    // 0x877e70: b               #0x877db8
    // 0x877e74: ldur            x0, [fp, #-0x38]
    // 0x877e78: cmp             x0, #3
    // 0x877e7c: b.gt            #0x877e90
    // 0x877e80: nop             
    // 0x877e84: r0 = "shoumaMemoryJackyBattle"
    //     0x877e84: add             x0, PP, #0x11, lsl #12  ; [pp+0x115c8] "shoumaMemoryJackyBattle"
    //     0x877e88: ldr             x0, [x0, #0x5c8]
    // 0x877e8c: b               #0x8838b4
    // 0x877e90: r0 = "rulesBlock"
    //     0x877e90: add             x0, PP, #0x11, lsl #12  ; [pp+0x114f0] "rulesBlock"
    //     0x877e94: ldr             x0, [x0, #0x4f0]
    // 0x877e98: b               #0x8838b4
    // 0x877e9c: r16 = "shoumaMemoryTrialNpc8"
    //     0x877e9c: add             x16, PP, #0x11, lsl #12  ; [pp+0x115e0] "shoumaMemoryTrialNpc8"
    //     0x877ea0: ldr             x16, [x16, #0x5e0]
    // 0x877ea4: ldur            lr, [fp, #-0x28]
    // 0x877ea8: stp             lr, x16, [SP]
    // 0x877eac: r0 = ==()
    //     0x877eac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877eb0: tbnz            w0, #4, #0x877f9c
    // 0x877eb4: nop             
    // 0x877eb8: r0 = LoadStaticField(0xb54)
    //     0x877eb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877ebc: ldr             x0, [x0, #0x16a8]
    // 0x877ec0: cmp             w0, NULL
    // 0x877ec4: b.ne            #0x877ed4
    // 0x877ec8: nop             
    // 0x877ecc: r0 = Null
    //     0x877ecc: mov             x0, NULL
    // 0x877ed0: b               #0x877efc
    // 0x877ed4: r17 = 351
    //     0x877ed4: movz            x17, #0x15f
    // 0x877ed8: ldr             w1, [x0, x17]
    // 0x877edc: DecompressPointer r1
    //     0x877edc: add             x1, x1, HEAP, lsl #32
    // 0x877ee0: r0 = LoadClassIdInstr(r1)
    //     0x877ee0: ldur            x0, [x1, #-1]
    //     0x877ee4: ubfx            x0, x0, #0xc, #0x14
    // 0x877ee8: r2 = "shoumaMemoryTrialNpc8"
    //     0x877ee8: add             x2, PP, #0x11, lsl #12  ; [pp+0x115e0] "shoumaMemoryTrialNpc8"
    //     0x877eec: ldr             x2, [x2, #0x5e0]
    // 0x877ef0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x877ef0: sub             lr, x0, #0xb4
    //     0x877ef4: ldr             lr, [x21, lr, lsl #3]
    //     0x877ef8: blr             lr
    // 0x877efc: cmp             w0, NULL
    // 0x877f00: b.ne            #0x877f10
    // 0x877f04: nop             
    // 0x877f08: r3 = ""
    //     0x877f08: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877f0c: b               #0x877f14
    // 0x877f10: mov             x3, x0
    // 0x877f14: mov             x0, x3
    // 0x877f18: stur            x3, [fp, #-8]
    // 0x877f1c: r2 = Null
    //     0x877f1c: mov             x2, NULL
    // 0x877f20: r1 = Null
    //     0x877f20: mov             x1, NULL
    // 0x877f24: r4 = 59
    //     0x877f24: movz            x4, #0x3b
    // 0x877f28: branchIfSmi(r0, 0x877f38)
    //     0x877f28: tbz             w0, #0, #0x877f38
    //     0x877f2c: nop             
    // 0x877f30: r4 = LoadClassIdInstr(r0)
    //     0x877f30: ldur            x4, [x0, #-1]
    //     0x877f34: ubfx            x4, x4, #0xc, #0x14
    // 0x877f38: sub             x4, x4, #0x5d
    // 0x877f3c: cmp             x4, #1
    // 0x877f40: b.ls            #0x877f58
    // 0x877f44: nop             
    // 0x877f48: r8 = String
    //     0x877f48: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x877f4c: r3 = Null
    //     0x877f4c: add             x3, PP, #0x11, lsl #12  ; [pp+0x115e8] Null
    //     0x877f50: ldr             x3, [x3, #0x5e8]
    // 0x877f54: r0 = String()
    //     0x877f54: bl              #0x1523244  ; IsType_String_Stub
    // 0x877f58: ldur            x0, [fp, #-8]
    // 0x877f5c: r1 = LoadClassIdInstr(r0)
    //     0x877f5c: ldur            x1, [x0, #-1]
    //     0x877f60: ubfx            x1, x1, #0xc, #0x14
    // 0x877f64: r16 = ""
    //     0x877f64: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x877f68: stp             x16, x0, [SP]
    // 0x877f6c: mov             x0, x1
    // 0x877f70: mov             lr, x0
    // 0x877f74: ldr             lr, [x21, lr, lsl #3]
    // 0x877f78: blr             lr
    // 0x877f7c: tbnz            w0, #4, #0x877f90
    // 0x877f80: nop             
    // 0x877f84: r0 = "fight"
    //     0x877f84: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x877f88: ldr             x0, [x0, #0x400]
    // 0x877f8c: b               #0x8838b4
    // 0x877f90: r0 = "normalChat"
    //     0x877f90: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x877f94: ldr             x0, [x0, #0x408]
    // 0x877f98: b               #0x8838b4
    // 0x877f9c: r16 = "shoumaMemorySugiBattle"
    //     0x877f9c: add             x16, PP, #0x11, lsl #12  ; [pp+0x115f8] "shoumaMemorySugiBattle"
    //     0x877fa0: ldr             x16, [x16, #0x5f8]
    // 0x877fa4: ldur            lr, [fp, #-0x28]
    // 0x877fa8: stp             lr, x16, [SP]
    // 0x877fac: r0 = ==()
    //     0x877fac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x877fb0: tbnz            w0, #4, #0x878110
    // 0x877fb4: nop             
    // 0x877fb8: r0 = LoadStaticField(0xb54)
    //     0x877fb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x877fbc: ldr             x0, [x0, #0x16a8]
    // 0x877fc0: cmp             w0, NULL
    // 0x877fc4: b.ne            #0x877fd4
    // 0x877fc8: nop             
    // 0x877fcc: r0 = Null
    //     0x877fcc: mov             x0, NULL
    // 0x877fd0: b               #0x877fe4
    // 0x877fd4: r17 = 311
    //     0x877fd4: movz            x17, #0x137
    // 0x877fd8: ldr             w1, [x0, x17]
    // 0x877fdc: DecompressPointer r1
    //     0x877fdc: add             x1, x1, HEAP, lsl #32
    // 0x877fe0: mov             x0, x1
    // 0x877fe4: cmp             w0, NULL
    // 0x877fe8: b.ne            #0x878004
    // 0x877fec: nop             
    // 0x877ff0: r1 = Null
    //     0x877ff0: mov             x1, NULL
    // 0x877ff4: r2 = 0
    //     0x877ff4: movz            x2, #0
    // 0x877ff8: r0 = _GrowableList()
    //     0x877ff8: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x877ffc: mov             x1, x0
    // 0x878000: b               #0x878008
    // 0x878004: mov             x1, x0
    // 0x878008: r0 = LoadClassIdInstr(r1)
    //     0x878008: ldur            x0, [x1, #-1]
    //     0x87800c: ubfx            x0, x0, #0xc, #0x14
    // 0x878010: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x878010: movz            x17, #0xa37b
    //     0x878014: add             lr, x0, x17
    //     0x878018: ldr             lr, [x21, lr, lsl #3]
    //     0x87801c: blr             lr
    // 0x878020: stur            x0, [fp, #-8]
    // 0x878024: r2 = 0
    //     0x878024: movz            x2, #0
    // 0x878028: stur            x2, [fp, #-0x38]
    // 0x87802c: CheckStackOverflow
    //     0x87802c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x878030: cmp             SP, x16
    //     0x878034: b.ls            #0x883a2c
    //     0x878038: nop             
    // 0x87803c: mov             x1, x0
    // 0x878040: r0 = moveNext()
    //     0x878040: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x878044: tbnz            w0, #4, #0x8780e8
    // 0x878048: nop             
    // 0x87804c: ldur            x1, [fp, #-8]
    // 0x878050: r0 = current()
    //     0x878050: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x878054: mov             x3, x0
    // 0x878058: r2 = Null
    //     0x878058: mov             x2, NULL
    // 0x87805c: r1 = Null
    //     0x87805c: mov             x1, NULL
    // 0x878060: stur            x3, [fp, #-0x10]
    // 0x878064: r4 = 59
    //     0x878064: movz            x4, #0x3b
    // 0x878068: branchIfSmi(r0, 0x878078)
    //     0x878068: tbz             w0, #0, #0x878078
    //     0x87806c: nop             
    // 0x878070: r4 = LoadClassIdInstr(r0)
    //     0x878070: ldur            x4, [x0, #-1]
    //     0x878074: ubfx            x4, x4, #0xc, #0x14
    // 0x878078: sub             x4, x4, #0x5d
    // 0x87807c: cmp             x4, #1
    // 0x878080: b.ls            #0x878098
    // 0x878084: nop             
    // 0x878088: r8 = String
    //     0x878088: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87808c: r3 = Null
    //     0x87808c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11600] Null
    //     0x878090: ldr             x3, [x3, #0x600]
    // 0x878094: r0 = String()
    //     0x878094: bl              #0x1523244  ; IsType_String_Stub
    // 0x878098: ldur            x0, [fp, #-0x10]
    // 0x87809c: r1 = LoadClassIdInstr(r0)
    //     0x87809c: ldur            x1, [x0, #-1]
    //     0x8780a0: ubfx            x1, x1, #0xc, #0x14
    // 0x8780a4: r16 = "clear"
    //     0x8780a4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf2f0] "clear"
    //     0x8780a8: ldr             x16, [x16, #0x2f0]
    // 0x8780ac: stp             x16, x0, [SP]
    // 0x8780b0: mov             x0, x1
    // 0x8780b4: mov             lr, x0
    // 0x8780b8: ldr             lr, [x21, lr, lsl #3]
    // 0x8780bc: blr             lr
    // 0x8780c0: tbnz            w0, #4, #0x8780d8
    // 0x8780c4: nop             
    // 0x8780c8: ldur            x0, [fp, #-0x38]
    // 0x8780cc: add             x1, x0, #1
    // 0x8780d0: mov             x2, x1
    // 0x8780d4: b               #0x8780e0
    // 0x8780d8: ldur            x0, [fp, #-0x38]
    // 0x8780dc: mov             x2, x0
    // 0x8780e0: ldur            x0, [fp, #-8]
    // 0x8780e4: b               #0x878028
    // 0x8780e8: ldur            x0, [fp, #-0x38]
    // 0x8780ec: cmp             x0, #4
    // 0x8780f0: b.lt            #0x878104
    // 0x8780f4: nop             
    // 0x8780f8: r0 = "shoumaMemorySugiBattle"
    //     0x8780f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x115f8] "shoumaMemorySugiBattle"
    //     0x8780fc: ldr             x0, [x0, #0x5f8]
    // 0x878100: b               #0x8838b4
    // 0x878104: r0 = "rulesBlock"
    //     0x878104: add             x0, PP, #0x11, lsl #12  ; [pp+0x114f0] "rulesBlock"
    //     0x878108: ldr             x0, [x0, #0x4f0]
    // 0x87810c: b               #0x8838b4
    // 0x878110: r16 = "shoumaMemorySugiWin"
    //     0x878110: add             x16, PP, #0x11, lsl #12  ; [pp+0x11610] "shoumaMemorySugiWin"
    //     0x878114: ldr             x16, [x16, #0x610]
    // 0x878118: ldur            lr, [fp, #-0x28]
    // 0x87811c: stp             lr, x16, [SP]
    // 0x878120: r0 = ==()
    //     0x878120: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878124: tbnz            w0, #4, #0x878214
    // 0x878128: nop             
    // 0x87812c: r0 = LoadStaticField(0xb54)
    //     0x87812c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878130: ldr             x0, [x0, #0x16a8]
    // 0x878134: cmp             w0, NULL
    // 0x878138: b.ne            #0x878148
    // 0x87813c: nop             
    // 0x878140: r0 = Null
    //     0x878140: mov             x0, NULL
    // 0x878144: b               #0x878170
    // 0x878148: r17 = 351
    //     0x878148: movz            x17, #0x15f
    // 0x87814c: ldr             w1, [x0, x17]
    // 0x878150: DecompressPointer r1
    //     0x878150: add             x1, x1, HEAP, lsl #32
    // 0x878154: r0 = LoadClassIdInstr(r1)
    //     0x878154: ldur            x0, [x1, #-1]
    //     0x878158: ubfx            x0, x0, #0xc, #0x14
    // 0x87815c: r2 = "shoumaMemoryNpc1"
    //     0x87815c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11618] "shoumaMemoryNpc1"
    //     0x878160: ldr             x2, [x2, #0x618]
    // 0x878164: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878164: sub             lr, x0, #0xb4
    //     0x878168: ldr             lr, [x21, lr, lsl #3]
    //     0x87816c: blr             lr
    // 0x878170: cmp             w0, NULL
    // 0x878174: b.ne            #0x878184
    // 0x878178: nop             
    // 0x87817c: r3 = ""
    //     0x87817c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878180: b               #0x878188
    // 0x878184: mov             x3, x0
    // 0x878188: mov             x0, x3
    // 0x87818c: stur            x3, [fp, #-8]
    // 0x878190: r2 = Null
    //     0x878190: mov             x2, NULL
    // 0x878194: r1 = Null
    //     0x878194: mov             x1, NULL
    // 0x878198: r4 = 59
    //     0x878198: movz            x4, #0x3b
    // 0x87819c: branchIfSmi(r0, 0x8781ac)
    //     0x87819c: tbz             w0, #0, #0x8781ac
    //     0x8781a0: nop             
    // 0x8781a4: r4 = LoadClassIdInstr(r0)
    //     0x8781a4: ldur            x4, [x0, #-1]
    //     0x8781a8: ubfx            x4, x4, #0xc, #0x14
    // 0x8781ac: sub             x4, x4, #0x5d
    // 0x8781b0: cmp             x4, #1
    // 0x8781b4: b.ls            #0x8781cc
    // 0x8781b8: nop             
    // 0x8781bc: r8 = String
    //     0x8781bc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8781c0: r3 = Null
    //     0x8781c0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11620] Null
    //     0x8781c4: ldr             x3, [x3, #0x620]
    // 0x8781c8: r0 = String()
    //     0x8781c8: bl              #0x1523244  ; IsType_String_Stub
    // 0x8781cc: ldur            x0, [fp, #-8]
    // 0x8781d0: r1 = LoadClassIdInstr(r0)
    //     0x8781d0: ldur            x1, [x0, #-1]
    //     0x8781d4: ubfx            x1, x1, #0xc, #0x14
    // 0x8781d8: r16 = "win"
    //     0x8781d8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11518] "win"
    //     0x8781dc: ldr             x16, [x16, #0x518]
    // 0x8781e0: stp             x16, x0, [SP]
    // 0x8781e4: mov             x0, x1
    // 0x8781e8: mov             lr, x0
    // 0x8781ec: ldr             lr, [x21, lr, lsl #3]
    // 0x8781f0: blr             lr
    // 0x8781f4: tbnz            w0, #4, #0x878208
    // 0x8781f8: nop             
    // 0x8781fc: r0 = "normalWin"
    //     0x8781fc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11520] "normalWin"
    //     0x878200: ldr             x0, [x0, #0x520]
    // 0x878204: b               #0x8838b4
    // 0x878208: r0 = "firstTimeWin"
    //     0x878208: add             x0, PP, #0x11, lsl #12  ; [pp+0x11528] "firstTimeWin"
    //     0x87820c: ldr             x0, [x0, #0x528]
    // 0x878210: b               #0x8838b4
    // 0x878214: r16 = "shoumaMemoryTrialTiana"
    //     0x878214: add             x16, PP, #0x11, lsl #12  ; [pp+0x11630] "shoumaMemoryTrialTiana"
    //     0x878218: ldr             x16, [x16, #0x630]
    // 0x87821c: ldur            lr, [fp, #-0x28]
    // 0x878220: stp             lr, x16, [SP]
    // 0x878224: r0 = ==()
    //     0x878224: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878228: tbnz            w0, #4, #0x878318
    // 0x87822c: nop             
    // 0x878230: r0 = LoadStaticField(0xb54)
    //     0x878230: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878234: ldr             x0, [x0, #0x16a8]
    // 0x878238: cmp             w0, NULL
    // 0x87823c: b.ne            #0x87824c
    // 0x878240: nop             
    // 0x878244: r0 = Null
    //     0x878244: mov             x0, NULL
    // 0x878248: b               #0x878274
    // 0x87824c: r17 = 351
    //     0x87824c: movz            x17, #0x15f
    // 0x878250: ldr             w1, [x0, x17]
    // 0x878254: DecompressPointer r1
    //     0x878254: add             x1, x1, HEAP, lsl #32
    // 0x878258: r0 = LoadClassIdInstr(r1)
    //     0x878258: ldur            x0, [x1, #-1]
    //     0x87825c: ubfx            x0, x0, #0xc, #0x14
    // 0x878260: r2 = "shoumaMemoryTrialTiana"
    //     0x878260: add             x2, PP, #0x11, lsl #12  ; [pp+0x11630] "shoumaMemoryTrialTiana"
    //     0x878264: ldr             x2, [x2, #0x630]
    // 0x878268: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878268: sub             lr, x0, #0xb4
    //     0x87826c: ldr             lr, [x21, lr, lsl #3]
    //     0x878270: blr             lr
    // 0x878274: cmp             w0, NULL
    // 0x878278: b.ne            #0x878288
    // 0x87827c: nop             
    // 0x878280: r3 = ""
    //     0x878280: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878284: b               #0x87828c
    // 0x878288: mov             x3, x0
    // 0x87828c: mov             x0, x3
    // 0x878290: stur            x3, [fp, #-8]
    // 0x878294: r2 = Null
    //     0x878294: mov             x2, NULL
    // 0x878298: r1 = Null
    //     0x878298: mov             x1, NULL
    // 0x87829c: r4 = 59
    //     0x87829c: movz            x4, #0x3b
    // 0x8782a0: branchIfSmi(r0, 0x8782b0)
    //     0x8782a0: tbz             w0, #0, #0x8782b0
    //     0x8782a4: nop             
    // 0x8782a8: r4 = LoadClassIdInstr(r0)
    //     0x8782a8: ldur            x4, [x0, #-1]
    //     0x8782ac: ubfx            x4, x4, #0xc, #0x14
    // 0x8782b0: sub             x4, x4, #0x5d
    // 0x8782b4: cmp             x4, #1
    // 0x8782b8: b.ls            #0x8782d0
    // 0x8782bc: nop             
    // 0x8782c0: r8 = String
    //     0x8782c0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8782c4: r3 = Null
    //     0x8782c4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11638] Null
    //     0x8782c8: ldr             x3, [x3, #0x638]
    // 0x8782cc: r0 = String()
    //     0x8782cc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8782d0: ldur            x0, [fp, #-8]
    // 0x8782d4: r1 = LoadClassIdInstr(r0)
    //     0x8782d4: ldur            x1, [x0, #-1]
    //     0x8782d8: ubfx            x1, x1, #0xc, #0x14
    // 0x8782dc: r16 = "complete"
    //     0x8782dc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8782e0: ldr             x16, [x16, #0x590]
    // 0x8782e4: stp             x16, x0, [SP]
    // 0x8782e8: mov             x0, x1
    // 0x8782ec: mov             lr, x0
    // 0x8782f0: ldr             lr, [x21, lr, lsl #3]
    // 0x8782f4: blr             lr
    // 0x8782f8: tbnz            w0, #4, #0x87830c
    // 0x8782fc: nop             
    // 0x878300: r0 = "normalChat"
    //     0x878300: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x878304: ldr             x0, [x0, #0x408]
    // 0x878308: b               #0x8838b4
    // 0x87830c: r0 = "fight"
    //     0x87830c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x878310: ldr             x0, [x0, #0x400]
    // 0x878314: b               #0x8838b4
    // 0x878318: r16 = "shoumaMemoryLuckyDraw"
    //     0x878318: add             x16, PP, #0x11, lsl #12  ; [pp+0x11648] "shoumaMemoryLuckyDraw"
    //     0x87831c: ldr             x16, [x16, #0x648]
    // 0x878320: ldur            lr, [fp, #-0x28]
    // 0x878324: stp             lr, x16, [SP]
    // 0x878328: r0 = ==()
    //     0x878328: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87832c: tbnz            w0, #4, #0x87841c
    // 0x878330: nop             
    // 0x878334: r0 = LoadStaticField(0xb54)
    //     0x878334: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878338: ldr             x0, [x0, #0x16a8]
    // 0x87833c: cmp             w0, NULL
    // 0x878340: b.ne            #0x878350
    // 0x878344: nop             
    // 0x878348: r0 = Null
    //     0x878348: mov             x0, NULL
    // 0x87834c: b               #0x878378
    // 0x878350: r17 = 351
    //     0x878350: movz            x17, #0x15f
    // 0x878354: ldr             w1, [x0, x17]
    // 0x878358: DecompressPointer r1
    //     0x878358: add             x1, x1, HEAP, lsl #32
    // 0x87835c: r0 = LoadClassIdInstr(r1)
    //     0x87835c: ldur            x0, [x1, #-1]
    //     0x878360: ubfx            x0, x0, #0xc, #0x14
    // 0x878364: r2 = "shoumaMemoryLuckyDraw"
    //     0x878364: add             x2, PP, #0x11, lsl #12  ; [pp+0x11648] "shoumaMemoryLuckyDraw"
    //     0x878368: ldr             x2, [x2, #0x648]
    // 0x87836c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87836c: sub             lr, x0, #0xb4
    //     0x878370: ldr             lr, [x21, lr, lsl #3]
    //     0x878374: blr             lr
    // 0x878378: cmp             w0, NULL
    // 0x87837c: b.ne            #0x87838c
    // 0x878380: nop             
    // 0x878384: r3 = ""
    //     0x878384: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878388: b               #0x878390
    // 0x87838c: mov             x3, x0
    // 0x878390: mov             x0, x3
    // 0x878394: stur            x3, [fp, #-8]
    // 0x878398: r2 = Null
    //     0x878398: mov             x2, NULL
    // 0x87839c: r1 = Null
    //     0x87839c: mov             x1, NULL
    // 0x8783a0: r4 = 59
    //     0x8783a0: movz            x4, #0x3b
    // 0x8783a4: branchIfSmi(r0, 0x8783b4)
    //     0x8783a4: tbz             w0, #0, #0x8783b4
    //     0x8783a8: nop             
    // 0x8783ac: r4 = LoadClassIdInstr(r0)
    //     0x8783ac: ldur            x4, [x0, #-1]
    //     0x8783b0: ubfx            x4, x4, #0xc, #0x14
    // 0x8783b4: sub             x4, x4, #0x5d
    // 0x8783b8: cmp             x4, #1
    // 0x8783bc: b.ls            #0x8783d4
    // 0x8783c0: nop             
    // 0x8783c4: r8 = String
    //     0x8783c4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8783c8: r3 = Null
    //     0x8783c8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11650] Null
    //     0x8783cc: ldr             x3, [x3, #0x650]
    // 0x8783d0: r0 = String()
    //     0x8783d0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8783d4: ldur            x0, [fp, #-8]
    // 0x8783d8: r1 = LoadClassIdInstr(r0)
    //     0x8783d8: ldur            x1, [x0, #-1]
    //     0x8783dc: ubfx            x1, x1, #0xc, #0x14
    // 0x8783e0: r16 = "complete"
    //     0x8783e0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8783e4: ldr             x16, [x16, #0x590]
    // 0x8783e8: stp             x16, x0, [SP]
    // 0x8783ec: mov             x0, x1
    // 0x8783f0: mov             lr, x0
    // 0x8783f4: ldr             lr, [x21, lr, lsl #3]
    // 0x8783f8: blr             lr
    // 0x8783fc: tbnz            w0, #4, #0x878410
    // 0x878400: nop             
    // 0x878404: r0 = "normalChat"
    //     0x878404: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x878408: ldr             x0, [x0, #0x408]
    // 0x87840c: b               #0x8838b4
    // 0x878410: r0 = "luckyDraw"
    //     0x878410: add             x0, PP, #0x11, lsl #12  ; [pp+0x11660] "luckyDraw"
    //     0x878414: ldr             x0, [x0, #0x660]
    // 0x878418: b               #0x8838b4
    // 0x87841c: r16 = "shoumaMemoryShopAssistant"
    //     0x87841c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11668] "shoumaMemoryShopAssistant"
    //     0x878420: ldr             x16, [x16, #0x668]
    // 0x878424: ldur            lr, [fp, #-0x28]
    // 0x878428: stp             lr, x16, [SP]
    // 0x87842c: r0 = ==()
    //     0x87842c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878430: tbnz            w0, #4, #0x878760
    // 0x878434: nop             
    // 0x878438: r0 = LoadStaticField(0xb54)
    //     0x878438: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87843c: ldr             x0, [x0, #0x16a8]
    // 0x878440: cmp             w0, NULL
    // 0x878444: b.ne            #0x878454
    // 0x878448: nop             
    // 0x87844c: r0 = Null
    //     0x87844c: mov             x0, NULL
    // 0x878450: b               #0x87847c
    // 0x878454: r17 = 351
    //     0x878454: movz            x17, #0x15f
    // 0x878458: ldr             w1, [x0, x17]
    // 0x87845c: DecompressPointer r1
    //     0x87845c: add             x1, x1, HEAP, lsl #32
    // 0x878460: r0 = LoadClassIdInstr(r1)
    //     0x878460: ldur            x0, [x1, #-1]
    //     0x878464: ubfx            x0, x0, #0xc, #0x14
    // 0x878468: r2 = "shoumaMemoryLuckyDraw"
    //     0x878468: add             x2, PP, #0x11, lsl #12  ; [pp+0x11648] "shoumaMemoryLuckyDraw"
    //     0x87846c: ldr             x2, [x2, #0x648]
    // 0x878470: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878470: sub             lr, x0, #0xb4
    //     0x878474: ldr             lr, [x21, lr, lsl #3]
    //     0x878478: blr             lr
    // 0x87847c: cmp             w0, NULL
    // 0x878480: b.ne            #0x878490
    // 0x878484: nop             
    // 0x878488: r3 = ""
    //     0x878488: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87848c: b               #0x878494
    // 0x878490: mov             x3, x0
    // 0x878494: mov             x0, x3
    // 0x878498: stur            x3, [fp, #-8]
    // 0x87849c: r2 = Null
    //     0x87849c: mov             x2, NULL
    // 0x8784a0: r1 = Null
    //     0x8784a0: mov             x1, NULL
    // 0x8784a4: r4 = 59
    //     0x8784a4: movz            x4, #0x3b
    // 0x8784a8: branchIfSmi(r0, 0x8784b8)
    //     0x8784a8: tbz             w0, #0, #0x8784b8
    //     0x8784ac: nop             
    // 0x8784b0: r4 = LoadClassIdInstr(r0)
    //     0x8784b0: ldur            x4, [x0, #-1]
    //     0x8784b4: ubfx            x4, x4, #0xc, #0x14
    // 0x8784b8: sub             x4, x4, #0x5d
    // 0x8784bc: cmp             x4, #1
    // 0x8784c0: b.ls            #0x8784d8
    // 0x8784c4: nop             
    // 0x8784c8: r8 = String
    //     0x8784c8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8784cc: r3 = Null
    //     0x8784cc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11670] Null
    //     0x8784d0: ldr             x3, [x3, #0x670]
    // 0x8784d4: r0 = String()
    //     0x8784d4: bl              #0x1523244  ; IsType_String_Stub
    // 0x8784d8: r0 = LoadStaticField(0xb54)
    //     0x8784d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8784dc: ldr             x0, [x0, #0x16a8]
    // 0x8784e0: cmp             w0, NULL
    // 0x8784e4: b.ne            #0x8784f4
    // 0x8784e8: nop             
    // 0x8784ec: r0 = Null
    //     0x8784ec: mov             x0, NULL
    // 0x8784f0: b               #0x87851c
    // 0x8784f4: r17 = 351
    //     0x8784f4: movz            x17, #0x15f
    // 0x8784f8: ldr             w1, [x0, x17]
    // 0x8784fc: DecompressPointer r1
    //     0x8784fc: add             x1, x1, HEAP, lsl #32
    // 0x878500: r0 = LoadClassIdInstr(r1)
    //     0x878500: ldur            x0, [x1, #-1]
    //     0x878504: ubfx            x0, x0, #0xc, #0x14
    // 0x878508: r2 = "shoumaMemoryShopAssistant"
    //     0x878508: add             x2, PP, #0x11, lsl #12  ; [pp+0x11668] "shoumaMemoryShopAssistant"
    //     0x87850c: ldr             x2, [x2, #0x668]
    // 0x878510: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878510: sub             lr, x0, #0xb4
    //     0x878514: ldr             lr, [x21, lr, lsl #3]
    //     0x878518: blr             lr
    // 0x87851c: cmp             w0, NULL
    // 0x878520: b.ne            #0x878530
    // 0x878524: nop             
    // 0x878528: r4 = ""
    //     0x878528: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87852c: b               #0x878534
    // 0x878530: mov             x4, x0
    // 0x878534: ldur            x3, [fp, #-8]
    // 0x878538: mov             x0, x4
    // 0x87853c: stur            x4, [fp, #-0x10]
    // 0x878540: r2 = Null
    //     0x878540: mov             x2, NULL
    // 0x878544: r1 = Null
    //     0x878544: mov             x1, NULL
    // 0x878548: r4 = 59
    //     0x878548: movz            x4, #0x3b
    // 0x87854c: branchIfSmi(r0, 0x87855c)
    //     0x87854c: tbz             w0, #0, #0x87855c
    //     0x878550: nop             
    // 0x878554: r4 = LoadClassIdInstr(r0)
    //     0x878554: ldur            x4, [x0, #-1]
    //     0x878558: ubfx            x4, x4, #0xc, #0x14
    // 0x87855c: sub             x4, x4, #0x5d
    // 0x878560: cmp             x4, #1
    // 0x878564: b.ls            #0x87857c
    // 0x878568: nop             
    // 0x87856c: r8 = String
    //     0x87856c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878570: r3 = Null
    //     0x878570: add             x3, PP, #0x11, lsl #12  ; [pp+0x11680] Null
    //     0x878574: ldr             x3, [x3, #0x680]
    // 0x878578: r0 = String()
    //     0x878578: bl              #0x1523244  ; IsType_String_Stub
    // 0x87857c: ldur            x1, [fp, #-8]
    // 0x878580: r0 = LoadClassIdInstr(r1)
    //     0x878580: ldur            x0, [x1, #-1]
    //     0x878584: ubfx            x0, x0, #0xc, #0x14
    // 0x878588: r16 = "complete"
    //     0x878588: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87858c: ldr             x16, [x16, #0x590]
    // 0x878590: stp             x16, x1, [SP]
    // 0x878594: mov             lr, x0
    // 0x878598: ldr             lr, [x21, lr, lsl #3]
    // 0x87859c: blr             lr
    // 0x8785a0: tbnz            w0, #4, #0x8785e0
    // 0x8785a4: nop             
    // 0x8785a8: ldur            x1, [fp, #-0x10]
    // 0x8785ac: r0 = LoadClassIdInstr(r1)
    //     0x8785ac: ldur            x0, [x1, #-1]
    //     0x8785b0: ubfx            x0, x0, #0xc, #0x14
    // 0x8785b4: r16 = "complete"
    //     0x8785b4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8785b8: ldr             x16, [x16, #0x590]
    // 0x8785bc: stp             x16, x1, [SP]
    // 0x8785c0: mov             lr, x0
    // 0x8785c4: ldr             lr, [x21, lr, lsl #3]
    // 0x8785c8: blr             lr
    // 0x8785cc: tbnz            w0, #4, #0x8785e0
    // 0x8785d0: nop             
    // 0x8785d4: r0 = "5"
    //     0x8785d4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11690] "5"
    //     0x8785d8: ldr             x0, [x0, #0x690]
    // 0x8785dc: b               #0x8838b4
    // 0x8785e0: ldur            x0, [fp, #-8]
    // 0x8785e4: r1 = LoadClassIdInstr(r0)
    //     0x8785e4: ldur            x1, [x0, #-1]
    //     0x8785e8: ubfx            x1, x1, #0xc, #0x14
    // 0x8785ec: r16 = "complete"
    //     0x8785ec: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8785f0: ldr             x16, [x16, #0x590]
    // 0x8785f4: stp             x16, x0, [SP]
    // 0x8785f8: mov             x0, x1
    // 0x8785fc: mov             lr, x0
    // 0x878600: ldr             lr, [x21, lr, lsl #3]
    // 0x878604: blr             lr
    // 0x878608: tbnz            w0, #4, #0x878648
    // 0x87860c: nop             
    // 0x878610: ldur            x1, [fp, #-0x10]
    // 0x878614: r0 = LoadClassIdInstr(r1)
    //     0x878614: ldur            x0, [x1, #-1]
    //     0x878618: ubfx            x0, x0, #0xc, #0x14
    // 0x87861c: r16 = "complete"
    //     0x87861c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x878620: ldr             x16, [x16, #0x590]
    // 0x878624: stp             x16, x1, [SP]
    // 0x878628: mov             lr, x0
    // 0x87862c: ldr             lr, [x21, lr, lsl #3]
    // 0x878630: blr             lr
    // 0x878634: tbz             w0, #4, #0x878648
    // 0x878638: nop             
    // 0x87863c: r0 = "6"
    //     0x87863c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11698] "6"
    //     0x878640: ldr             x0, [x0, #0x698]
    // 0x878644: b               #0x8838b4
    // 0x878648: ldur            x1, [fp, #-0x10]
    // 0x87864c: r0 = LoadClassIdInstr(r1)
    //     0x87864c: ldur            x0, [x1, #-1]
    //     0x878650: ubfx            x0, x0, #0xc, #0x14
    // 0x878654: r16 = ""
    //     0x878654: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878658: stp             x16, x1, [SP]
    // 0x87865c: mov             lr, x0
    // 0x878660: ldr             lr, [x21, lr, lsl #3]
    // 0x878664: blr             lr
    // 0x878668: tbnz            w0, #4, #0x87867c
    // 0x87866c: nop             
    // 0x878670: r0 = "1"
    //     0x878670: add             x0, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x878674: ldr             x0, [x0, #0x6a0]
    // 0x878678: b               #0x8838b4
    // 0x87867c: ldur            x1, [fp, #-0x10]
    // 0x878680: r0 = LoadClassIdInstr(r1)
    //     0x878680: ldur            x0, [x1, #-1]
    //     0x878684: ubfx            x0, x0, #0xc, #0x14
    // 0x878688: r16 = "1"
    //     0x878688: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87868c: ldr             x16, [x16, #0x6a0]
    // 0x878690: stp             x16, x1, [SP]
    // 0x878694: mov             lr, x0
    // 0x878698: ldr             lr, [x21, lr, lsl #3]
    // 0x87869c: blr             lr
    // 0x8786a0: tbnz            w0, #4, #0x8786b4
    // 0x8786a4: nop             
    // 0x8786a8: r0 = "2"
    //     0x8786a8: add             x0, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8786ac: ldr             x0, [x0, #0x6a8]
    // 0x8786b0: b               #0x8838b4
    // 0x8786b4: ldur            x1, [fp, #-0x10]
    // 0x8786b8: r0 = LoadClassIdInstr(r1)
    //     0x8786b8: ldur            x0, [x1, #-1]
    //     0x8786bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8786c0: r16 = "2"
    //     0x8786c0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8786c4: ldr             x16, [x16, #0x6a8]
    // 0x8786c8: stp             x16, x1, [SP]
    // 0x8786cc: mov             lr, x0
    // 0x8786d0: ldr             lr, [x21, lr, lsl #3]
    // 0x8786d4: blr             lr
    // 0x8786d8: tbz             w0, #4, #0x87870c
    // 0x8786dc: nop             
    // 0x8786e0: ldur            x1, [fp, #-0x10]
    // 0x8786e4: r0 = LoadClassIdInstr(r1)
    //     0x8786e4: ldur            x0, [x1, #-1]
    //     0x8786e8: ubfx            x0, x0, #0xc, #0x14
    // 0x8786ec: r16 = "3"
    //     0x8786ec: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x8786f0: ldr             x16, [x16, #0x6b0]
    // 0x8786f4: stp             x16, x1, [SP]
    // 0x8786f8: mov             lr, x0
    // 0x8786fc: ldr             lr, [x21, lr, lsl #3]
    // 0x878700: blr             lr
    // 0x878704: tbnz            w0, #4, #0x878718
    // 0x878708: nop             
    // 0x87870c: r0 = "3"
    //     0x87870c: add             x0, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x878710: ldr             x0, [x0, #0x6b0]
    // 0x878714: b               #0x8838b4
    // 0x878718: ldur            x0, [fp, #-0x10]
    // 0x87871c: r1 = LoadClassIdInstr(r0)
    //     0x87871c: ldur            x1, [x0, #-1]
    //     0x878720: ubfx            x1, x1, #0xc, #0x14
    // 0x878724: r16 = "4"
    //     0x878724: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x878728: ldr             x16, [x16, #0x6b8]
    // 0x87872c: stp             x16, x0, [SP]
    // 0x878730: mov             x0, x1
    // 0x878734: mov             lr, x0
    // 0x878738: ldr             lr, [x21, lr, lsl #3]
    // 0x87873c: blr             lr
    // 0x878740: tbnz            w0, #4, #0x878754
    // 0x878744: nop             
    // 0x878748: r0 = "4"
    //     0x878748: add             x0, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87874c: ldr             x0, [x0, #0x6b8]
    // 0x878750: b               #0x8838b4
    // 0x878754: r0 = "6"
    //     0x878754: add             x0, PP, #0x11, lsl #12  ; [pp+0x11698] "6"
    //     0x878758: ldr             x0, [x0, #0x698]
    // 0x87875c: b               #0x8838b4
    // 0x878760: r16 = "shoumaMemoryMina"
    //     0x878760: add             x16, PP, #0x11, lsl #12  ; [pp+0x116c0] "shoumaMemoryMina"
    //     0x878764: ldr             x16, [x16, #0x6c0]
    // 0x878768: ldur            lr, [fp, #-0x28]
    // 0x87876c: stp             lr, x16, [SP]
    // 0x878770: r0 = ==()
    //     0x878770: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878774: tbnz            w0, #4, #0x87899c
    // 0x878778: nop             
    // 0x87877c: r0 = LoadStaticField(0xb54)
    //     0x87877c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878780: ldr             x0, [x0, #0x16a8]
    // 0x878784: cmp             w0, NULL
    // 0x878788: b.ne            #0x878798
    // 0x87878c: nop             
    // 0x878790: r0 = Null
    //     0x878790: mov             x0, NULL
    // 0x878794: b               #0x8787c0
    // 0x878798: r17 = 351
    //     0x878798: movz            x17, #0x15f
    // 0x87879c: ldr             w1, [x0, x17]
    // 0x8787a0: DecompressPointer r1
    //     0x8787a0: add             x1, x1, HEAP, lsl #32
    // 0x8787a4: r0 = LoadClassIdInstr(r1)
    //     0x8787a4: ldur            x0, [x1, #-1]
    //     0x8787a8: ubfx            x0, x0, #0xc, #0x14
    // 0x8787ac: r2 = "shoumaMemoryLuckyDraw"
    //     0x8787ac: add             x2, PP, #0x11, lsl #12  ; [pp+0x11648] "shoumaMemoryLuckyDraw"
    //     0x8787b0: ldr             x2, [x2, #0x648]
    // 0x8787b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8787b4: sub             lr, x0, #0xb4
    //     0x8787b8: ldr             lr, [x21, lr, lsl #3]
    //     0x8787bc: blr             lr
    // 0x8787c0: cmp             w0, NULL
    // 0x8787c4: b.ne            #0x8787d4
    // 0x8787c8: nop             
    // 0x8787cc: r3 = ""
    //     0x8787cc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8787d0: b               #0x8787d8
    // 0x8787d4: mov             x3, x0
    // 0x8787d8: mov             x0, x3
    // 0x8787dc: stur            x3, [fp, #-8]
    // 0x8787e0: r2 = Null
    //     0x8787e0: mov             x2, NULL
    // 0x8787e4: r1 = Null
    //     0x8787e4: mov             x1, NULL
    // 0x8787e8: r4 = 59
    //     0x8787e8: movz            x4, #0x3b
    // 0x8787ec: branchIfSmi(r0, 0x8787fc)
    //     0x8787ec: tbz             w0, #0, #0x8787fc
    //     0x8787f0: nop             
    // 0x8787f4: r4 = LoadClassIdInstr(r0)
    //     0x8787f4: ldur            x4, [x0, #-1]
    //     0x8787f8: ubfx            x4, x4, #0xc, #0x14
    // 0x8787fc: sub             x4, x4, #0x5d
    // 0x878800: cmp             x4, #1
    // 0x878804: b.ls            #0x87881c
    // 0x878808: nop             
    // 0x87880c: r8 = String
    //     0x87880c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878810: r3 = Null
    //     0x878810: add             x3, PP, #0x11, lsl #12  ; [pp+0x116c8] Null
    //     0x878814: ldr             x3, [x3, #0x6c8]
    // 0x878818: r0 = String()
    //     0x878818: bl              #0x1523244  ; IsType_String_Stub
    // 0x87881c: r0 = LoadStaticField(0xb54)
    //     0x87881c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878820: ldr             x0, [x0, #0x16a8]
    // 0x878824: cmp             w0, NULL
    // 0x878828: b.ne            #0x878838
    // 0x87882c: nop             
    // 0x878830: r0 = Null
    //     0x878830: mov             x0, NULL
    // 0x878834: b               #0x878860
    // 0x878838: r17 = 351
    //     0x878838: movz            x17, #0x15f
    // 0x87883c: ldr             w1, [x0, x17]
    // 0x878840: DecompressPointer r1
    //     0x878840: add             x1, x1, HEAP, lsl #32
    // 0x878844: r0 = LoadClassIdInstr(r1)
    //     0x878844: ldur            x0, [x1, #-1]
    //     0x878848: ubfx            x0, x0, #0xc, #0x14
    // 0x87884c: r2 = "shoumaMemoryShopAssistant"
    //     0x87884c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11668] "shoumaMemoryShopAssistant"
    //     0x878850: ldr             x2, [x2, #0x668]
    // 0x878854: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878854: sub             lr, x0, #0xb4
    //     0x878858: ldr             lr, [x21, lr, lsl #3]
    //     0x87885c: blr             lr
    // 0x878860: cmp             w0, NULL
    // 0x878864: b.ne            #0x878874
    // 0x878868: nop             
    // 0x87886c: r4 = ""
    //     0x87886c: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878870: b               #0x878878
    // 0x878874: mov             x4, x0
    // 0x878878: ldur            x3, [fp, #-8]
    // 0x87887c: mov             x0, x4
    // 0x878880: stur            x4, [fp, #-0x10]
    // 0x878884: r2 = Null
    //     0x878884: mov             x2, NULL
    // 0x878888: r1 = Null
    //     0x878888: mov             x1, NULL
    // 0x87888c: r4 = 59
    //     0x87888c: movz            x4, #0x3b
    // 0x878890: branchIfSmi(r0, 0x8788a0)
    //     0x878890: tbz             w0, #0, #0x8788a0
    //     0x878894: nop             
    // 0x878898: r4 = LoadClassIdInstr(r0)
    //     0x878898: ldur            x4, [x0, #-1]
    //     0x87889c: ubfx            x4, x4, #0xc, #0x14
    // 0x8788a0: sub             x4, x4, #0x5d
    // 0x8788a4: cmp             x4, #1
    // 0x8788a8: b.ls            #0x8788c0
    // 0x8788ac: nop             
    // 0x8788b0: r8 = String
    //     0x8788b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8788b4: r3 = Null
    //     0x8788b4: add             x3, PP, #0x11, lsl #12  ; [pp+0x116d8] Null
    //     0x8788b8: ldr             x3, [x3, #0x6d8]
    // 0x8788bc: r0 = String()
    //     0x8788bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8788c0: ldur            x1, [fp, #-8]
    // 0x8788c4: r0 = LoadClassIdInstr(r1)
    //     0x8788c4: ldur            x0, [x1, #-1]
    //     0x8788c8: ubfx            x0, x0, #0xc, #0x14
    // 0x8788cc: r16 = "complete"
    //     0x8788cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8788d0: ldr             x16, [x16, #0x590]
    // 0x8788d4: stp             x16, x1, [SP]
    // 0x8788d8: mov             lr, x0
    // 0x8788dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8788e0: blr             lr
    // 0x8788e4: tbz             w0, #4, #0x878924
    // 0x8788e8: nop             
    // 0x8788ec: ldur            x1, [fp, #-0x10]
    // 0x8788f0: r0 = LoadClassIdInstr(r1)
    //     0x8788f0: ldur            x0, [x1, #-1]
    //     0x8788f4: ubfx            x0, x0, #0xc, #0x14
    // 0x8788f8: r16 = "2"
    //     0x8788f8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8788fc: ldr             x16, [x16, #0x6a8]
    // 0x878900: stp             x16, x1, [SP]
    // 0x878904: mov             lr, x0
    // 0x878908: ldr             lr, [x21, lr, lsl #3]
    // 0x87890c: blr             lr
    // 0x878910: tbnz            w0, #4, #0x878924
    // 0x878914: nop             
    // 0x878918: r0 = "quest"
    //     0x878918: add             x0, PP, #0x11, lsl #12  ; [pp+0x116e8] "quest"
    //     0x87891c: ldr             x0, [x0, #0x6e8]
    // 0x878920: b               #0x8838b4
    // 0x878924: ldur            x0, [fp, #-8]
    // 0x878928: r1 = LoadClassIdInstr(r0)
    //     0x878928: ldur            x1, [x0, #-1]
    //     0x87892c: ubfx            x1, x1, #0xc, #0x14
    // 0x878930: r16 = "complete"
    //     0x878930: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x878934: ldr             x16, [x16, #0x590]
    // 0x878938: stp             x16, x0, [SP]
    // 0x87893c: mov             x0, x1
    // 0x878940: mov             lr, x0
    // 0x878944: ldr             lr, [x21, lr, lsl #3]
    // 0x878948: blr             lr
    // 0x87894c: tbz             w0, #4, #0x878990
    // 0x878950: nop             
    // 0x878954: ldur            x0, [fp, #-0x10]
    // 0x878958: r1 = LoadClassIdInstr(r0)
    //     0x878958: ldur            x1, [x0, #-1]
    //     0x87895c: ubfx            x1, x1, #0xc, #0x14
    // 0x878960: r16 = "3"
    //     0x878960: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x878964: ldr             x16, [x16, #0x6b0]
    // 0x878968: stp             x16, x0, [SP]
    // 0x87896c: mov             x0, x1
    // 0x878970: mov             lr, x0
    // 0x878974: ldr             lr, [x21, lr, lsl #3]
    // 0x878978: blr             lr
    // 0x87897c: tbnz            w0, #4, #0x878990
    // 0x878980: nop             
    // 0x878984: r0 = "inProgress"
    //     0x878984: add             x0, PP, #0x11, lsl #12  ; [pp+0x115b8] "inProgress"
    //     0x878988: ldr             x0, [x0, #0x5b8]
    // 0x87898c: b               #0x8838b4
    // 0x878990: r0 = "normalChat"
    //     0x878990: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x878994: ldr             x0, [x0, #0x408]
    // 0x878998: b               #0x8838b4
    // 0x87899c: r16 = "shoumaMemoryTrialNpc1"
    //     0x87899c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116f0] "shoumaMemoryTrialNpc1"
    //     0x8789a0: ldr             x16, [x16, #0x6f0]
    // 0x8789a4: ldur            lr, [fp, #-0x28]
    // 0x8789a8: stp             lr, x16, [SP]
    // 0x8789ac: r0 = ==()
    //     0x8789ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8789b0: tbnz            w0, #4, #0x878a9c
    // 0x8789b4: nop             
    // 0x8789b8: r0 = LoadStaticField(0xb54)
    //     0x8789b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8789bc: ldr             x0, [x0, #0x16a8]
    // 0x8789c0: cmp             w0, NULL
    // 0x8789c4: b.ne            #0x8789d4
    // 0x8789c8: nop             
    // 0x8789cc: r0 = Null
    //     0x8789cc: mov             x0, NULL
    // 0x8789d0: b               #0x8789fc
    // 0x8789d4: r17 = 351
    //     0x8789d4: movz            x17, #0x15f
    // 0x8789d8: ldr             w1, [x0, x17]
    // 0x8789dc: DecompressPointer r1
    //     0x8789dc: add             x1, x1, HEAP, lsl #32
    // 0x8789e0: r0 = LoadClassIdInstr(r1)
    //     0x8789e0: ldur            x0, [x1, #-1]
    //     0x8789e4: ubfx            x0, x0, #0xc, #0x14
    // 0x8789e8: r2 = "shoumaMemoryTrialNpc1"
    //     0x8789e8: add             x2, PP, #0x11, lsl #12  ; [pp+0x116f0] "shoumaMemoryTrialNpc1"
    //     0x8789ec: ldr             x2, [x2, #0x6f0]
    // 0x8789f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8789f0: sub             lr, x0, #0xb4
    //     0x8789f4: ldr             lr, [x21, lr, lsl #3]
    //     0x8789f8: blr             lr
    // 0x8789fc: cmp             w0, NULL
    // 0x878a00: b.ne            #0x878a10
    // 0x878a04: nop             
    // 0x878a08: r3 = ""
    //     0x878a08: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878a0c: b               #0x878a14
    // 0x878a10: mov             x3, x0
    // 0x878a14: mov             x0, x3
    // 0x878a18: stur            x3, [fp, #-8]
    // 0x878a1c: r2 = Null
    //     0x878a1c: mov             x2, NULL
    // 0x878a20: r1 = Null
    //     0x878a20: mov             x1, NULL
    // 0x878a24: r4 = 59
    //     0x878a24: movz            x4, #0x3b
    // 0x878a28: branchIfSmi(r0, 0x878a38)
    //     0x878a28: tbz             w0, #0, #0x878a38
    //     0x878a2c: nop             
    // 0x878a30: r4 = LoadClassIdInstr(r0)
    //     0x878a30: ldur            x4, [x0, #-1]
    //     0x878a34: ubfx            x4, x4, #0xc, #0x14
    // 0x878a38: sub             x4, x4, #0x5d
    // 0x878a3c: cmp             x4, #1
    // 0x878a40: b.ls            #0x878a58
    // 0x878a44: nop             
    // 0x878a48: r8 = String
    //     0x878a48: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878a4c: r3 = Null
    //     0x878a4c: add             x3, PP, #0x11, lsl #12  ; [pp+0x116f8] Null
    //     0x878a50: ldr             x3, [x3, #0x6f8]
    // 0x878a54: r0 = String()
    //     0x878a54: bl              #0x1523244  ; IsType_String_Stub
    // 0x878a58: ldur            x0, [fp, #-8]
    // 0x878a5c: r1 = LoadClassIdInstr(r0)
    //     0x878a5c: ldur            x1, [x0, #-1]
    //     0x878a60: ubfx            x1, x1, #0xc, #0x14
    // 0x878a64: r16 = ""
    //     0x878a64: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878a68: stp             x16, x0, [SP]
    // 0x878a6c: mov             x0, x1
    // 0x878a70: mov             lr, x0
    // 0x878a74: ldr             lr, [x21, lr, lsl #3]
    // 0x878a78: blr             lr
    // 0x878a7c: tbnz            w0, #4, #0x878a90
    // 0x878a80: nop             
    // 0x878a84: r0 = "fight"
    //     0x878a84: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x878a88: ldr             x0, [x0, #0x400]
    // 0x878a8c: b               #0x8838b4
    // 0x878a90: r0 = "normalChat"
    //     0x878a90: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x878a94: ldr             x0, [x0, #0x408]
    // 0x878a98: b               #0x8838b4
    // 0x878a9c: r16 = "shoumaMemoryTrialNpc2"
    //     0x878a9c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11708] "shoumaMemoryTrialNpc2"
    //     0x878aa0: ldr             x16, [x16, #0x708]
    // 0x878aa4: ldur            lr, [fp, #-0x28]
    // 0x878aa8: stp             lr, x16, [SP]
    // 0x878aac: r0 = ==()
    //     0x878aac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878ab0: tbnz            w0, #4, #0x878b9c
    // 0x878ab4: nop             
    // 0x878ab8: r0 = LoadStaticField(0xb54)
    //     0x878ab8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878abc: ldr             x0, [x0, #0x16a8]
    // 0x878ac0: cmp             w0, NULL
    // 0x878ac4: b.ne            #0x878ad4
    // 0x878ac8: nop             
    // 0x878acc: r0 = Null
    //     0x878acc: mov             x0, NULL
    // 0x878ad0: b               #0x878afc
    // 0x878ad4: r17 = 351
    //     0x878ad4: movz            x17, #0x15f
    // 0x878ad8: ldr             w1, [x0, x17]
    // 0x878adc: DecompressPointer r1
    //     0x878adc: add             x1, x1, HEAP, lsl #32
    // 0x878ae0: r0 = LoadClassIdInstr(r1)
    //     0x878ae0: ldur            x0, [x1, #-1]
    //     0x878ae4: ubfx            x0, x0, #0xc, #0x14
    // 0x878ae8: r2 = "shoumaMemoryTrialNpc2"
    //     0x878ae8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11708] "shoumaMemoryTrialNpc2"
    //     0x878aec: ldr             x2, [x2, #0x708]
    // 0x878af0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878af0: sub             lr, x0, #0xb4
    //     0x878af4: ldr             lr, [x21, lr, lsl #3]
    //     0x878af8: blr             lr
    // 0x878afc: cmp             w0, NULL
    // 0x878b00: b.ne            #0x878b10
    // 0x878b04: nop             
    // 0x878b08: r3 = ""
    //     0x878b08: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878b0c: b               #0x878b14
    // 0x878b10: mov             x3, x0
    // 0x878b14: mov             x0, x3
    // 0x878b18: stur            x3, [fp, #-8]
    // 0x878b1c: r2 = Null
    //     0x878b1c: mov             x2, NULL
    // 0x878b20: r1 = Null
    //     0x878b20: mov             x1, NULL
    // 0x878b24: r4 = 59
    //     0x878b24: movz            x4, #0x3b
    // 0x878b28: branchIfSmi(r0, 0x878b38)
    //     0x878b28: tbz             w0, #0, #0x878b38
    //     0x878b2c: nop             
    // 0x878b30: r4 = LoadClassIdInstr(r0)
    //     0x878b30: ldur            x4, [x0, #-1]
    //     0x878b34: ubfx            x4, x4, #0xc, #0x14
    // 0x878b38: sub             x4, x4, #0x5d
    // 0x878b3c: cmp             x4, #1
    // 0x878b40: b.ls            #0x878b58
    // 0x878b44: nop             
    // 0x878b48: r8 = String
    //     0x878b48: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878b4c: r3 = Null
    //     0x878b4c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11710] Null
    //     0x878b50: ldr             x3, [x3, #0x710]
    // 0x878b54: r0 = String()
    //     0x878b54: bl              #0x1523244  ; IsType_String_Stub
    // 0x878b58: ldur            x0, [fp, #-8]
    // 0x878b5c: r1 = LoadClassIdInstr(r0)
    //     0x878b5c: ldur            x1, [x0, #-1]
    //     0x878b60: ubfx            x1, x1, #0xc, #0x14
    // 0x878b64: r16 = ""
    //     0x878b64: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878b68: stp             x16, x0, [SP]
    // 0x878b6c: mov             x0, x1
    // 0x878b70: mov             lr, x0
    // 0x878b74: ldr             lr, [x21, lr, lsl #3]
    // 0x878b78: blr             lr
    // 0x878b7c: tbnz            w0, #4, #0x878b90
    // 0x878b80: nop             
    // 0x878b84: r0 = "fight"
    //     0x878b84: add             x0, PP, #0x11, lsl #12  ; [pp+0x11400] "fight"
    //     0x878b88: ldr             x0, [x0, #0x400]
    // 0x878b8c: b               #0x8838b4
    // 0x878b90: r0 = "normalChat"
    //     0x878b90: add             x0, PP, #0x11, lsl #12  ; [pp+0x11408] "normalChat"
    //     0x878b94: ldr             x0, [x0, #0x408]
    // 0x878b98: b               #0x8838b4
    // 0x878b9c: r16 = "shoumaMemoryTrialNpc2Battle"
    //     0x878b9c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11720] "shoumaMemoryTrialNpc2Battle"
    //     0x878ba0: ldr             x16, [x16, #0x720]
    // 0x878ba4: ldur            lr, [fp, #-0x28]
    // 0x878ba8: stp             lr, x16, [SP]
    // 0x878bac: r0 = ==()
    //     0x878bac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878bb0: tbnz            w0, #4, #0x878d10
    // 0x878bb4: nop             
    // 0x878bb8: r0 = LoadStaticField(0xb54)
    //     0x878bb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878bbc: ldr             x0, [x0, #0x16a8]
    // 0x878bc0: cmp             w0, NULL
    // 0x878bc4: b.ne            #0x878bd4
    // 0x878bc8: nop             
    // 0x878bcc: r0 = Null
    //     0x878bcc: mov             x0, NULL
    // 0x878bd0: b               #0x878be4
    // 0x878bd4: r17 = 311
    //     0x878bd4: movz            x17, #0x137
    // 0x878bd8: ldr             w1, [x0, x17]
    // 0x878bdc: DecompressPointer r1
    //     0x878bdc: add             x1, x1, HEAP, lsl #32
    // 0x878be0: mov             x0, x1
    // 0x878be4: cmp             w0, NULL
    // 0x878be8: b.ne            #0x878c04
    // 0x878bec: nop             
    // 0x878bf0: r1 = Null
    //     0x878bf0: mov             x1, NULL
    // 0x878bf4: r2 = 0
    //     0x878bf4: movz            x2, #0
    // 0x878bf8: r0 = _GrowableList()
    //     0x878bf8: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x878bfc: mov             x1, x0
    // 0x878c00: b               #0x878c08
    // 0x878c04: mov             x1, x0
    // 0x878c08: r0 = LoadClassIdInstr(r1)
    //     0x878c08: ldur            x0, [x1, #-1]
    //     0x878c0c: ubfx            x0, x0, #0xc, #0x14
    // 0x878c10: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x878c10: movz            x17, #0xa37b
    //     0x878c14: add             lr, x0, x17
    //     0x878c18: ldr             lr, [x21, lr, lsl #3]
    //     0x878c1c: blr             lr
    // 0x878c20: stur            x0, [fp, #-8]
    // 0x878c24: r2 = 0
    //     0x878c24: movz            x2, #0
    // 0x878c28: stur            x2, [fp, #-0x38]
    // 0x878c2c: CheckStackOverflow
    //     0x878c2c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x878c30: cmp             SP, x16
    //     0x878c34: b.ls            #0x883a34
    //     0x878c38: nop             
    // 0x878c3c: mov             x1, x0
    // 0x878c40: r0 = moveNext()
    //     0x878c40: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x878c44: tbnz            w0, #4, #0x878ce8
    // 0x878c48: nop             
    // 0x878c4c: ldur            x1, [fp, #-8]
    // 0x878c50: r0 = current()
    //     0x878c50: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x878c54: mov             x3, x0
    // 0x878c58: r2 = Null
    //     0x878c58: mov             x2, NULL
    // 0x878c5c: r1 = Null
    //     0x878c5c: mov             x1, NULL
    // 0x878c60: stur            x3, [fp, #-0x10]
    // 0x878c64: r4 = 59
    //     0x878c64: movz            x4, #0x3b
    // 0x878c68: branchIfSmi(r0, 0x878c78)
    //     0x878c68: tbz             w0, #0, #0x878c78
    //     0x878c6c: nop             
    // 0x878c70: r4 = LoadClassIdInstr(r0)
    //     0x878c70: ldur            x4, [x0, #-1]
    //     0x878c74: ubfx            x4, x4, #0xc, #0x14
    // 0x878c78: sub             x4, x4, #0x5d
    // 0x878c7c: cmp             x4, #1
    // 0x878c80: b.ls            #0x878c98
    // 0x878c84: nop             
    // 0x878c88: r8 = String
    //     0x878c88: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878c8c: r3 = Null
    //     0x878c8c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11728] Null
    //     0x878c90: ldr             x3, [x3, #0x728]
    // 0x878c94: r0 = String()
    //     0x878c94: bl              #0x1523244  ; IsType_String_Stub
    // 0x878c98: ldur            x0, [fp, #-0x10]
    // 0x878c9c: r1 = LoadClassIdInstr(r0)
    //     0x878c9c: ldur            x1, [x0, #-1]
    //     0x878ca0: ubfx            x1, x1, #0xc, #0x14
    // 0x878ca4: r16 = "splitstep"
    //     0x878ca4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4d0] "splitstep"
    //     0x878ca8: ldr             x16, [x16, #0x4d0]
    // 0x878cac: stp             x16, x0, [SP]
    // 0x878cb0: mov             x0, x1
    // 0x878cb4: mov             lr, x0
    // 0x878cb8: ldr             lr, [x21, lr, lsl #3]
    // 0x878cbc: blr             lr
    // 0x878cc0: tbnz            w0, #4, #0x878cd8
    // 0x878cc4: nop             
    // 0x878cc8: ldur            x0, [fp, #-0x38]
    // 0x878ccc: add             x1, x0, #1
    // 0x878cd0: mov             x2, x1
    // 0x878cd4: b               #0x878ce0
    // 0x878cd8: ldur            x0, [fp, #-0x38]
    // 0x878cdc: mov             x2, x0
    // 0x878ce0: ldur            x0, [fp, #-8]
    // 0x878ce4: b               #0x878c28
    // 0x878ce8: ldur            x0, [fp, #-0x38]
    // 0x878cec: cmp             x0, #3
    // 0x878cf0: b.lt            #0x878d04
    // 0x878cf4: nop             
    // 0x878cf8: r0 = "shoumaMemoryTrialNpc2Battle"
    //     0x878cf8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11720] "shoumaMemoryTrialNpc2Battle"
    //     0x878cfc: ldr             x0, [x0, #0x720]
    // 0x878d00: b               #0x8838b4
    // 0x878d04: r0 = "rulesBlock"
    //     0x878d04: add             x0, PP, #0x11, lsl #12  ; [pp+0x114f0] "rulesBlock"
    //     0x878d08: ldr             x0, [x0, #0x4f0]
    // 0x878d0c: b               #0x8838b4
    // 0x878d10: r16 = "makiMemoryWanderer"
    //     0x878d10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11738] "makiMemoryWanderer"
    //     0x878d14: ldr             x16, [x16, #0x738]
    // 0x878d18: ldur            lr, [fp, #-0x28]
    // 0x878d1c: stp             lr, x16, [SP]
    // 0x878d20: r0 = ==()
    //     0x878d20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878d24: tbnz            w0, #4, #0x878e14
    // 0x878d28: nop             
    // 0x878d2c: r0 = LoadStaticField(0xb54)
    //     0x878d2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878d30: ldr             x0, [x0, #0x16a8]
    // 0x878d34: cmp             w0, NULL
    // 0x878d38: b.ne            #0x878d48
    // 0x878d3c: nop             
    // 0x878d40: r0 = Null
    //     0x878d40: mov             x0, NULL
    // 0x878d44: b               #0x878d70
    // 0x878d48: r17 = 351
    //     0x878d48: movz            x17, #0x15f
    // 0x878d4c: ldr             w1, [x0, x17]
    // 0x878d50: DecompressPointer r1
    //     0x878d50: add             x1, x1, HEAP, lsl #32
    // 0x878d54: r0 = LoadClassIdInstr(r1)
    //     0x878d54: ldur            x0, [x1, #-1]
    //     0x878d58: ubfx            x0, x0, #0xc, #0x14
    // 0x878d5c: r2 = "makiMemoryWanderer"
    //     0x878d5c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11738] "makiMemoryWanderer"
    //     0x878d60: ldr             x2, [x2, #0x738]
    // 0x878d64: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878d64: sub             lr, x0, #0xb4
    //     0x878d68: ldr             lr, [x21, lr, lsl #3]
    //     0x878d6c: blr             lr
    // 0x878d70: cmp             w0, NULL
    // 0x878d74: b.ne            #0x878d84
    // 0x878d78: nop             
    // 0x878d7c: r3 = ""
    //     0x878d7c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878d80: b               #0x878d88
    // 0x878d84: mov             x3, x0
    // 0x878d88: mov             x0, x3
    // 0x878d8c: stur            x3, [fp, #-8]
    // 0x878d90: r2 = Null
    //     0x878d90: mov             x2, NULL
    // 0x878d94: r1 = Null
    //     0x878d94: mov             x1, NULL
    // 0x878d98: r4 = 59
    //     0x878d98: movz            x4, #0x3b
    // 0x878d9c: branchIfSmi(r0, 0x878dac)
    //     0x878d9c: tbz             w0, #0, #0x878dac
    //     0x878da0: nop             
    // 0x878da4: r4 = LoadClassIdInstr(r0)
    //     0x878da4: ldur            x4, [x0, #-1]
    //     0x878da8: ubfx            x4, x4, #0xc, #0x14
    // 0x878dac: sub             x4, x4, #0x5d
    // 0x878db0: cmp             x4, #1
    // 0x878db4: b.ls            #0x878dcc
    // 0x878db8: nop             
    // 0x878dbc: r8 = String
    //     0x878dbc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878dc0: r3 = Null
    //     0x878dc0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11740] Null
    //     0x878dc4: ldr             x3, [x3, #0x740]
    // 0x878dc8: r0 = String()
    //     0x878dc8: bl              #0x1523244  ; IsType_String_Stub
    // 0x878dcc: ldur            x0, [fp, #-8]
    // 0x878dd0: r1 = LoadClassIdInstr(r0)
    //     0x878dd0: ldur            x1, [x0, #-1]
    //     0x878dd4: ubfx            x1, x1, #0xc, #0x14
    // 0x878dd8: r16 = "2"
    //     0x878dd8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x878ddc: ldr             x16, [x16, #0x6a8]
    // 0x878de0: stp             x16, x0, [SP]
    // 0x878de4: mov             x0, x1
    // 0x878de8: mov             lr, x0
    // 0x878dec: ldr             lr, [x21, lr, lsl #3]
    // 0x878df0: blr             lr
    // 0x878df4: tbnz            w0, #4, #0x878e08
    // 0x878df8: nop             
    // 0x878dfc: r0 = "specialRoute"
    //     0x878dfc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11750] "specialRoute"
    //     0x878e00: ldr             x0, [x0, #0x750]
    // 0x878e04: b               #0x8838b4
    // 0x878e08: r0 = "normalRoute"
    //     0x878e08: add             x0, PP, #0x11, lsl #12  ; [pp+0x11758] "normalRoute"
    //     0x878e0c: ldr             x0, [x0, #0x758]
    // 0x878e10: b               #0x8838b4
    // 0x878e14: r16 = "makiMemoryBank"
    //     0x878e14: add             x16, PP, #0x11, lsl #12  ; [pp+0x11760] "makiMemoryBank"
    //     0x878e18: ldr             x16, [x16, #0x760]
    // 0x878e1c: ldur            lr, [fp, #-0x28]
    // 0x878e20: stp             lr, x16, [SP]
    // 0x878e24: r0 = ==()
    //     0x878e24: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878e28: tbnz            w0, #4, #0x878f10
    // 0x878e2c: nop             
    // 0x878e30: r0 = LoadStaticField(0xb54)
    //     0x878e30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878e34: ldr             x0, [x0, #0x16a8]
    // 0x878e38: cmp             w0, NULL
    // 0x878e3c: b.ne            #0x878e4c
    // 0x878e40: nop             
    // 0x878e44: r0 = Null
    //     0x878e44: mov             x0, NULL
    // 0x878e48: b               #0x878e74
    // 0x878e4c: r17 = 351
    //     0x878e4c: movz            x17, #0x15f
    // 0x878e50: ldr             w1, [x0, x17]
    // 0x878e54: DecompressPointer r1
    //     0x878e54: add             x1, x1, HEAP, lsl #32
    // 0x878e58: r0 = LoadClassIdInstr(r1)
    //     0x878e58: ldur            x0, [x1, #-1]
    //     0x878e5c: ubfx            x0, x0, #0xc, #0x14
    // 0x878e60: r2 = "makiMemoryBank"
    //     0x878e60: add             x2, PP, #0x11, lsl #12  ; [pp+0x11760] "makiMemoryBank"
    //     0x878e64: ldr             x2, [x2, #0x760]
    // 0x878e68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878e68: sub             lr, x0, #0xb4
    //     0x878e6c: ldr             lr, [x21, lr, lsl #3]
    //     0x878e70: blr             lr
    // 0x878e74: cmp             w0, NULL
    // 0x878e78: b.ne            #0x878e88
    // 0x878e7c: nop             
    // 0x878e80: r3 = ""
    //     0x878e80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878e84: b               #0x878e8c
    // 0x878e88: mov             x3, x0
    // 0x878e8c: mov             x0, x3
    // 0x878e90: stur            x3, [fp, #-8]
    // 0x878e94: r2 = Null
    //     0x878e94: mov             x2, NULL
    // 0x878e98: r1 = Null
    //     0x878e98: mov             x1, NULL
    // 0x878e9c: r4 = 59
    //     0x878e9c: movz            x4, #0x3b
    // 0x878ea0: branchIfSmi(r0, 0x878eb0)
    //     0x878ea0: tbz             w0, #0, #0x878eb0
    //     0x878ea4: nop             
    // 0x878ea8: r4 = LoadClassIdInstr(r0)
    //     0x878ea8: ldur            x4, [x0, #-1]
    //     0x878eac: ubfx            x4, x4, #0xc, #0x14
    // 0x878eb0: sub             x4, x4, #0x5d
    // 0x878eb4: cmp             x4, #1
    // 0x878eb8: b.ls            #0x878ed0
    // 0x878ebc: nop             
    // 0x878ec0: r8 = String
    //     0x878ec0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878ec4: r3 = Null
    //     0x878ec4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11768] Null
    //     0x878ec8: ldr             x3, [x3, #0x768]
    // 0x878ecc: r0 = String()
    //     0x878ecc: bl              #0x1523244  ; IsType_String_Stub
    // 0x878ed0: ldur            x0, [fp, #-8]
    // 0x878ed4: r1 = LoadClassIdInstr(r0)
    //     0x878ed4: ldur            x1, [x0, #-1]
    //     0x878ed8: ubfx            x1, x1, #0xc, #0x14
    // 0x878edc: r16 = ""
    //     0x878edc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878ee0: stp             x16, x0, [SP]
    // 0x878ee4: mov             x0, x1
    // 0x878ee8: mov             lr, x0
    // 0x878eec: ldr             lr, [x21, lr, lsl #3]
    // 0x878ef0: blr             lr
    // 0x878ef4: tbnz            w0, #4, #0x878f04
    // 0x878ef8: nop             
    // 0x878efc: r0 = "progress"
    //     0x878efc: ldr             x0, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x878f00: b               #0x8838b4
    // 0x878f04: r0 = "complete"
    //     0x878f04: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x878f08: ldr             x0, [x0, #0x590]
    // 0x878f0c: b               #0x8838b4
    // 0x878f10: r16 = "makiMemoryMainStory2"
    //     0x878f10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11778] "makiMemoryMainStory2"
    //     0x878f14: ldr             x16, [x16, #0x778]
    // 0x878f18: ldur            lr, [fp, #-0x28]
    // 0x878f1c: stp             lr, x16, [SP]
    // 0x878f20: r0 = ==()
    //     0x878f20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x878f24: tbnz            w0, #4, #0x879014
    // 0x878f28: nop             
    // 0x878f2c: r0 = LoadStaticField(0xb54)
    //     0x878f2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x878f30: ldr             x0, [x0, #0x16a8]
    // 0x878f34: cmp             w0, NULL
    // 0x878f38: b.ne            #0x878f48
    // 0x878f3c: nop             
    // 0x878f40: r0 = Null
    //     0x878f40: mov             x0, NULL
    // 0x878f44: b               #0x878f70
    // 0x878f48: r17 = 351
    //     0x878f48: movz            x17, #0x15f
    // 0x878f4c: ldr             w1, [x0, x17]
    // 0x878f50: DecompressPointer r1
    //     0x878f50: add             x1, x1, HEAP, lsl #32
    // 0x878f54: r0 = LoadClassIdInstr(r1)
    //     0x878f54: ldur            x0, [x1, #-1]
    //     0x878f58: ubfx            x0, x0, #0xc, #0x14
    // 0x878f5c: r2 = "makiMemoryMain"
    //     0x878f5c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x878f60: ldr             x2, [x2, #0x780]
    // 0x878f64: r0 = GDT[cid_x0 + -0xb4]()
    //     0x878f64: sub             lr, x0, #0xb4
    //     0x878f68: ldr             lr, [x21, lr, lsl #3]
    //     0x878f6c: blr             lr
    // 0x878f70: cmp             w0, NULL
    // 0x878f74: b.ne            #0x878f84
    // 0x878f78: nop             
    // 0x878f7c: r3 = ""
    //     0x878f7c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x878f80: b               #0x878f88
    // 0x878f84: mov             x3, x0
    // 0x878f88: mov             x0, x3
    // 0x878f8c: stur            x3, [fp, #-8]
    // 0x878f90: r2 = Null
    //     0x878f90: mov             x2, NULL
    // 0x878f94: r1 = Null
    //     0x878f94: mov             x1, NULL
    // 0x878f98: r4 = 59
    //     0x878f98: movz            x4, #0x3b
    // 0x878f9c: branchIfSmi(r0, 0x878fac)
    //     0x878f9c: tbz             w0, #0, #0x878fac
    //     0x878fa0: nop             
    // 0x878fa4: r4 = LoadClassIdInstr(r0)
    //     0x878fa4: ldur            x4, [x0, #-1]
    //     0x878fa8: ubfx            x4, x4, #0xc, #0x14
    // 0x878fac: sub             x4, x4, #0x5d
    // 0x878fb0: cmp             x4, #1
    // 0x878fb4: b.ls            #0x878fcc
    // 0x878fb8: nop             
    // 0x878fbc: r8 = String
    //     0x878fbc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x878fc0: r3 = Null
    //     0x878fc0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11788] Null
    //     0x878fc4: ldr             x3, [x3, #0x788]
    // 0x878fc8: r0 = String()
    //     0x878fc8: bl              #0x1523244  ; IsType_String_Stub
    // 0x878fcc: ldur            x0, [fp, #-8]
    // 0x878fd0: r1 = LoadClassIdInstr(r0)
    //     0x878fd0: ldur            x1, [x0, #-1]
    //     0x878fd4: ubfx            x1, x1, #0xc, #0x14
    // 0x878fd8: r16 = "progress2"
    //     0x878fd8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x878fdc: ldr             x16, [x16, #0x798]
    // 0x878fe0: stp             x16, x0, [SP]
    // 0x878fe4: mov             x0, x1
    // 0x878fe8: mov             lr, x0
    // 0x878fec: ldr             lr, [x21, lr, lsl #3]
    // 0x878ff0: blr             lr
    // 0x878ff4: tbnz            w0, #4, #0x879008
    // 0x878ff8: nop             
    // 0x878ffc: r0 = "makiMemoryMainStory2"
    //     0x878ffc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11778] "makiMemoryMainStory2"
    //     0x879000: ldr             x0, [x0, #0x778]
    // 0x879004: b               #0x8838b4
    // 0x879008: r0 = "block"
    //     0x879008: add             x0, PP, #0x10, lsl #12  ; [pp+0x10040] "block"
    //     0x87900c: ldr             x0, [x0, #0x40]
    // 0x879010: b               #0x8838b4
    // 0x879014: r16 = "randomLunaChallenge1"
    //     0x879014: add             x16, PP, #0x11, lsl #12  ; [pp+0x117a0] "randomLunaChallenge1"
    //     0x879018: ldr             x16, [x16, #0x7a0]
    // 0x87901c: ldur            lr, [fp, #-0x28]
    // 0x879020: stp             lr, x16, [SP]
    // 0x879024: r0 = ==()
    //     0x879024: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879028: tbnz            w0, #4, #0x8790ac
    // 0x87902c: nop             
    // 0x879030: r1 = Null
    //     0x879030: mov             x1, NULL
    // 0x879034: r2 = "aki"
    //     0x879034: add             x2, PP, #0x11, lsl #12  ; [pp+0x117a8] "aki"
    //     0x879038: ldr             x2, [x2, #0x7a8]
    // 0x87903c: r3 = "aaron"
    //     0x87903c: add             x3, PP, #0x11, lsl #12  ; [pp+0x117b0] "aaron"
    //     0x879040: ldr             x3, [x3, #0x7b0]
    // 0x879044: r5 = "richard"
    //     0x879044: add             x5, PP, #0x11, lsl #12  ; [pp+0x117b8] "richard"
    //     0x879048: ldr             x5, [x5, #0x7b8]
    // 0x87904c: r0 = _GrowableList._literal3()
    //     0x87904c: bl              #0x821d38  ; [dart:core] _GrowableList::_GrowableList._literal3
    // 0x879050: mov             x1, x0
    // 0x879054: r0 = shuffle()
    //     0x879054: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x879058: mov             x1, x0
    // 0x87905c: r0 = first()
    //     0x87905c: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x879060: mov             x3, x0
    // 0x879064: r2 = Null
    //     0x879064: mov             x2, NULL
    // 0x879068: r1 = Null
    //     0x879068: mov             x1, NULL
    // 0x87906c: stur            x3, [fp, #-8]
    // 0x879070: r4 = 59
    //     0x879070: movz            x4, #0x3b
    // 0x879074: branchIfSmi(r0, 0x879084)
    //     0x879074: tbz             w0, #0, #0x879084
    //     0x879078: nop             
    // 0x87907c: r4 = LoadClassIdInstr(r0)
    //     0x87907c: ldur            x4, [x0, #-1]
    //     0x879080: ubfx            x4, x4, #0xc, #0x14
    // 0x879084: sub             x4, x4, #0x5d
    // 0x879088: cmp             x4, #1
    // 0x87908c: b.ls            #0x8790a4
    // 0x879090: nop             
    // 0x879094: r8 = String
    //     0x879094: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879098: r3 = Null
    //     0x879098: add             x3, PP, #0x11, lsl #12  ; [pp+0x117c0] Null
    //     0x87909c: ldr             x3, [x3, #0x7c0]
    // 0x8790a0: r0 = String()
    //     0x8790a0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8790a4: ldur            x0, [fp, #-8]
    // 0x8790a8: b               #0x8838b4
    // 0x8790ac: r16 = "randomLunaChallenge2"
    //     0x8790ac: add             x16, PP, #0x11, lsl #12  ; [pp+0x117d0] "randomLunaChallenge2"
    //     0x8790b0: ldr             x16, [x16, #0x7d0]
    // 0x8790b4: ldur            lr, [fp, #-0x28]
    // 0x8790b8: stp             lr, x16, [SP]
    // 0x8790bc: r0 = ==()
    //     0x8790bc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8790c0: tbnz            w0, #4, #0x879144
    // 0x8790c4: nop             
    // 0x8790c8: r1 = Null
    //     0x8790c8: mov             x1, NULL
    // 0x8790cc: r2 = "chong"
    //     0x8790cc: add             x2, PP, #0x11, lsl #12  ; [pp+0x117d8] "chong"
    //     0x8790d0: ldr             x2, [x2, #0x7d8]
    // 0x8790d4: r3 = "lion2"
    //     0x8790d4: add             x3, PP, #0x11, lsl #12  ; [pp+0x117e0] "lion2"
    //     0x8790d8: ldr             x3, [x3, #0x7e0]
    // 0x8790dc: r5 = "rein"
    //     0x8790dc: add             x5, PP, #0x11, lsl #12  ; [pp+0x117e8] "rein"
    //     0x8790e0: ldr             x5, [x5, #0x7e8]
    // 0x8790e4: r0 = _GrowableList._literal3()
    //     0x8790e4: bl              #0x821d38  ; [dart:core] _GrowableList::_GrowableList._literal3
    // 0x8790e8: mov             x1, x0
    // 0x8790ec: r0 = shuffle()
    //     0x8790ec: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x8790f0: mov             x1, x0
    // 0x8790f4: r0 = first()
    //     0x8790f4: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x8790f8: mov             x3, x0
    // 0x8790fc: r2 = Null
    //     0x8790fc: mov             x2, NULL
    // 0x879100: r1 = Null
    //     0x879100: mov             x1, NULL
    // 0x879104: stur            x3, [fp, #-8]
    // 0x879108: r4 = 59
    //     0x879108: movz            x4, #0x3b
    // 0x87910c: branchIfSmi(r0, 0x87911c)
    //     0x87910c: tbz             w0, #0, #0x87911c
    //     0x879110: nop             
    // 0x879114: r4 = LoadClassIdInstr(r0)
    //     0x879114: ldur            x4, [x0, #-1]
    //     0x879118: ubfx            x4, x4, #0xc, #0x14
    // 0x87911c: sub             x4, x4, #0x5d
    // 0x879120: cmp             x4, #1
    // 0x879124: b.ls            #0x87913c
    // 0x879128: nop             
    // 0x87912c: r8 = String
    //     0x87912c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879130: r3 = Null
    //     0x879130: add             x3, PP, #0x11, lsl #12  ; [pp+0x117f0] Null
    //     0x879134: ldr             x3, [x3, #0x7f0]
    // 0x879138: r0 = String()
    //     0x879138: bl              #0x1523244  ; IsType_String_Stub
    // 0x87913c: ldur            x0, [fp, #-8]
    // 0x879140: b               #0x8838b4
    // 0x879144: r16 = "randomLunaChallenge3"
    //     0x879144: add             x16, PP, #0x11, lsl #12  ; [pp+0x11800] "randomLunaChallenge3"
    //     0x879148: ldr             x16, [x16, #0x800]
    // 0x87914c: ldur            lr, [fp, #-0x28]
    // 0x879150: stp             lr, x16, [SP]
    // 0x879154: r0 = ==()
    //     0x879154: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879158: tbnz            w0, #4, #0x8791d4
    // 0x87915c: nop             
    // 0x879160: r1 = Null
    //     0x879160: mov             x1, NULL
    // 0x879164: r2 = "elite2"
    //     0x879164: add             x2, PP, #0x11, lsl #12  ; [pp+0x11808] "elite2"
    //     0x879168: ldr             x2, [x2, #0x808]
    // 0x87916c: r3 = "elite3"
    //     0x87916c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11810] "elite3"
    //     0x879170: ldr             x3, [x3, #0x810]
    // 0x879174: r0 = _GrowableList._literal2()
    //     0x879174: bl              #0x808434  ; [dart:core] _GrowableList::_GrowableList._literal2
    // 0x879178: mov             x1, x0
    // 0x87917c: r0 = shuffle()
    //     0x87917c: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x879180: mov             x1, x0
    // 0x879184: r0 = first()
    //     0x879184: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x879188: mov             x3, x0
    // 0x87918c: r2 = Null
    //     0x87918c: mov             x2, NULL
    // 0x879190: r1 = Null
    //     0x879190: mov             x1, NULL
    // 0x879194: stur            x3, [fp, #-8]
    // 0x879198: r4 = 59
    //     0x879198: movz            x4, #0x3b
    // 0x87919c: branchIfSmi(r0, 0x8791ac)
    //     0x87919c: tbz             w0, #0, #0x8791ac
    //     0x8791a0: nop             
    // 0x8791a4: r4 = LoadClassIdInstr(r0)
    //     0x8791a4: ldur            x4, [x0, #-1]
    //     0x8791a8: ubfx            x4, x4, #0xc, #0x14
    // 0x8791ac: sub             x4, x4, #0x5d
    // 0x8791b0: cmp             x4, #1
    // 0x8791b4: b.ls            #0x8791cc
    // 0x8791b8: nop             
    // 0x8791bc: r8 = String
    //     0x8791bc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8791c0: r3 = Null
    //     0x8791c0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11818] Null
    //     0x8791c4: ldr             x3, [x3, #0x818]
    // 0x8791c8: r0 = String()
    //     0x8791c8: bl              #0x1523244  ; IsType_String_Stub
    // 0x8791cc: ldur            x0, [fp, #-8]
    // 0x8791d0: b               #0x8838b4
    // 0x8791d4: r16 = "makiMemoryLion"
    //     0x8791d4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11828] "makiMemoryLion"
    //     0x8791d8: ldr             x16, [x16, #0x828]
    // 0x8791dc: ldur            lr, [fp, #-0x28]
    // 0x8791e0: stp             lr, x16, [SP]
    // 0x8791e4: r0 = ==()
    //     0x8791e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8791e8: tbnz            w0, #4, #0x8792d4
    // 0x8791ec: nop             
    // 0x8791f0: r0 = LoadStaticField(0xb54)
    //     0x8791f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8791f4: ldr             x0, [x0, #0x16a8]
    // 0x8791f8: cmp             w0, NULL
    // 0x8791fc: b.ne            #0x87920c
    // 0x879200: nop             
    // 0x879204: r0 = Null
    //     0x879204: mov             x0, NULL
    // 0x879208: b               #0x879234
    // 0x87920c: r17 = 351
    //     0x87920c: movz            x17, #0x15f
    // 0x879210: ldr             w1, [x0, x17]
    // 0x879214: DecompressPointer r1
    //     0x879214: add             x1, x1, HEAP, lsl #32
    // 0x879218: r0 = LoadClassIdInstr(r1)
    //     0x879218: ldur            x0, [x1, #-1]
    //     0x87921c: ubfx            x0, x0, #0xc, #0x14
    // 0x879220: r2 = "makiMemoryLion"
    //     0x879220: add             x2, PP, #0x11, lsl #12  ; [pp+0x11828] "makiMemoryLion"
    //     0x879224: ldr             x2, [x2, #0x828]
    // 0x879228: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879228: sub             lr, x0, #0xb4
    //     0x87922c: ldr             lr, [x21, lr, lsl #3]
    //     0x879230: blr             lr
    // 0x879234: cmp             w0, NULL
    // 0x879238: b.ne            #0x879248
    // 0x87923c: nop             
    // 0x879240: r3 = ""
    //     0x879240: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879244: b               #0x87924c
    // 0x879248: mov             x3, x0
    // 0x87924c: mov             x0, x3
    // 0x879250: stur            x3, [fp, #-8]
    // 0x879254: r2 = Null
    //     0x879254: mov             x2, NULL
    // 0x879258: r1 = Null
    //     0x879258: mov             x1, NULL
    // 0x87925c: r4 = 59
    //     0x87925c: movz            x4, #0x3b
    // 0x879260: branchIfSmi(r0, 0x879270)
    //     0x879260: tbz             w0, #0, #0x879270
    //     0x879264: nop             
    // 0x879268: r4 = LoadClassIdInstr(r0)
    //     0x879268: ldur            x4, [x0, #-1]
    //     0x87926c: ubfx            x4, x4, #0xc, #0x14
    // 0x879270: sub             x4, x4, #0x5d
    // 0x879274: cmp             x4, #1
    // 0x879278: b.ls            #0x879290
    // 0x87927c: nop             
    // 0x879280: r8 = String
    //     0x879280: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879284: r3 = Null
    //     0x879284: add             x3, PP, #0x11, lsl #12  ; [pp+0x11830] Null
    //     0x879288: ldr             x3, [x3, #0x830]
    // 0x87928c: r0 = String()
    //     0x87928c: bl              #0x1523244  ; IsType_String_Stub
    // 0x879290: ldur            x0, [fp, #-8]
    // 0x879294: r1 = LoadClassIdInstr(r0)
    //     0x879294: ldur            x1, [x0, #-1]
    //     0x879298: ubfx            x1, x1, #0xc, #0x14
    // 0x87929c: r16 = ""
    //     0x87929c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8792a0: stp             x16, x0, [SP]
    // 0x8792a4: mov             x0, x1
    // 0x8792a8: mov             lr, x0
    // 0x8792ac: ldr             lr, [x21, lr, lsl #3]
    // 0x8792b0: blr             lr
    // 0x8792b4: tbnz            w0, #4, #0x8792c8
    // 0x8792b8: nop             
    // 0x8792bc: r0 = "makiMemoryLion"
    //     0x8792bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11828] "makiMemoryLion"
    //     0x8792c0: ldr             x0, [x0, #0x828]
    // 0x8792c4: b               #0x8838b4
    // 0x8792c8: r0 = "complete"
    //     0x8792c8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8792cc: ldr             x0, [x0, #0x590]
    // 0x8792d0: b               #0x8838b4
    // 0x8792d4: r16 = "makiMemoryChong"
    //     0x8792d4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11840] "makiMemoryChong"
    //     0x8792d8: ldr             x16, [x16, #0x840]
    // 0x8792dc: ldur            lr, [fp, #-0x28]
    // 0x8792e0: stp             lr, x16, [SP]
    // 0x8792e4: r0 = ==()
    //     0x8792e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8792e8: tbnz            w0, #4, #0x8793d4
    // 0x8792ec: nop             
    // 0x8792f0: r0 = LoadStaticField(0xb54)
    //     0x8792f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8792f4: ldr             x0, [x0, #0x16a8]
    // 0x8792f8: cmp             w0, NULL
    // 0x8792fc: b.ne            #0x87930c
    // 0x879300: nop             
    // 0x879304: r0 = Null
    //     0x879304: mov             x0, NULL
    // 0x879308: b               #0x879334
    // 0x87930c: r17 = 351
    //     0x87930c: movz            x17, #0x15f
    // 0x879310: ldr             w1, [x0, x17]
    // 0x879314: DecompressPointer r1
    //     0x879314: add             x1, x1, HEAP, lsl #32
    // 0x879318: r0 = LoadClassIdInstr(r1)
    //     0x879318: ldur            x0, [x1, #-1]
    //     0x87931c: ubfx            x0, x0, #0xc, #0x14
    // 0x879320: r2 = "makiMemoryChong"
    //     0x879320: add             x2, PP, #0x11, lsl #12  ; [pp+0x11840] "makiMemoryChong"
    //     0x879324: ldr             x2, [x2, #0x840]
    // 0x879328: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879328: sub             lr, x0, #0xb4
    //     0x87932c: ldr             lr, [x21, lr, lsl #3]
    //     0x879330: blr             lr
    // 0x879334: cmp             w0, NULL
    // 0x879338: b.ne            #0x879348
    // 0x87933c: nop             
    // 0x879340: r3 = ""
    //     0x879340: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879344: b               #0x87934c
    // 0x879348: mov             x3, x0
    // 0x87934c: mov             x0, x3
    // 0x879350: stur            x3, [fp, #-8]
    // 0x879354: r2 = Null
    //     0x879354: mov             x2, NULL
    // 0x879358: r1 = Null
    //     0x879358: mov             x1, NULL
    // 0x87935c: r4 = 59
    //     0x87935c: movz            x4, #0x3b
    // 0x879360: branchIfSmi(r0, 0x879370)
    //     0x879360: tbz             w0, #0, #0x879370
    //     0x879364: nop             
    // 0x879368: r4 = LoadClassIdInstr(r0)
    //     0x879368: ldur            x4, [x0, #-1]
    //     0x87936c: ubfx            x4, x4, #0xc, #0x14
    // 0x879370: sub             x4, x4, #0x5d
    // 0x879374: cmp             x4, #1
    // 0x879378: b.ls            #0x879390
    // 0x87937c: nop             
    // 0x879380: r8 = String
    //     0x879380: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879384: r3 = Null
    //     0x879384: add             x3, PP, #0x11, lsl #12  ; [pp+0x11848] Null
    //     0x879388: ldr             x3, [x3, #0x848]
    // 0x87938c: r0 = String()
    //     0x87938c: bl              #0x1523244  ; IsType_String_Stub
    // 0x879390: ldur            x0, [fp, #-8]
    // 0x879394: r1 = LoadClassIdInstr(r0)
    //     0x879394: ldur            x1, [x0, #-1]
    //     0x879398: ubfx            x1, x1, #0xc, #0x14
    // 0x87939c: r16 = ""
    //     0x87939c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8793a0: stp             x16, x0, [SP]
    // 0x8793a4: mov             x0, x1
    // 0x8793a8: mov             lr, x0
    // 0x8793ac: ldr             lr, [x21, lr, lsl #3]
    // 0x8793b0: blr             lr
    // 0x8793b4: tbnz            w0, #4, #0x8793c8
    // 0x8793b8: nop             
    // 0x8793bc: r0 = "firstTimeWin"
    //     0x8793bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11528] "firstTimeWin"
    //     0x8793c0: ldr             x0, [x0, #0x528]
    // 0x8793c4: b               #0x8838b4
    // 0x8793c8: r0 = "normalWin"
    //     0x8793c8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11520] "normalWin"
    //     0x8793cc: ldr             x0, [x0, #0x520]
    // 0x8793d0: b               #0x8838b4
    // 0x8793d4: r16 = "makiMemoryBcMember1"
    //     0x8793d4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11858] "makiMemoryBcMember1"
    //     0x8793d8: ldr             x16, [x16, #0x858]
    // 0x8793dc: ldur            lr, [fp, #-0x28]
    // 0x8793e0: stp             lr, x16, [SP]
    // 0x8793e4: r0 = ==()
    //     0x8793e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8793e8: tbnz            w0, #4, #0x87960c
    // 0x8793ec: nop             
    // 0x8793f0: r0 = LoadStaticField(0xb54)
    //     0x8793f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8793f4: ldr             x0, [x0, #0x16a8]
    // 0x8793f8: cmp             w0, NULL
    // 0x8793fc: b.ne            #0x87940c
    // 0x879400: nop             
    // 0x879404: r0 = Null
    //     0x879404: mov             x0, NULL
    // 0x879408: b               #0x879434
    // 0x87940c: r17 = 351
    //     0x87940c: movz            x17, #0x15f
    // 0x879410: ldr             w1, [x0, x17]
    // 0x879414: DecompressPointer r1
    //     0x879414: add             x1, x1, HEAP, lsl #32
    // 0x879418: r0 = LoadClassIdInstr(r1)
    //     0x879418: ldur            x0, [x1, #-1]
    //     0x87941c: ubfx            x0, x0, #0xc, #0x14
    // 0x879420: r2 = "makiMemoryBcMember1"
    //     0x879420: add             x2, PP, #0x11, lsl #12  ; [pp+0x11858] "makiMemoryBcMember1"
    //     0x879424: ldr             x2, [x2, #0x858]
    // 0x879428: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879428: sub             lr, x0, #0xb4
    //     0x87942c: ldr             lr, [x21, lr, lsl #3]
    //     0x879430: blr             lr
    // 0x879434: cmp             w0, NULL
    // 0x879438: b.ne            #0x879448
    // 0x87943c: nop             
    // 0x879440: r3 = ""
    //     0x879440: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879444: b               #0x87944c
    // 0x879448: mov             x3, x0
    // 0x87944c: mov             x0, x3
    // 0x879450: stur            x3, [fp, #-8]
    // 0x879454: r2 = Null
    //     0x879454: mov             x2, NULL
    // 0x879458: r1 = Null
    //     0x879458: mov             x1, NULL
    // 0x87945c: r4 = 59
    //     0x87945c: movz            x4, #0x3b
    // 0x879460: branchIfSmi(r0, 0x879470)
    //     0x879460: tbz             w0, #0, #0x879470
    //     0x879464: nop             
    // 0x879468: r4 = LoadClassIdInstr(r0)
    //     0x879468: ldur            x4, [x0, #-1]
    //     0x87946c: ubfx            x4, x4, #0xc, #0x14
    // 0x879470: sub             x4, x4, #0x5d
    // 0x879474: cmp             x4, #1
    // 0x879478: b.ls            #0x879490
    // 0x87947c: nop             
    // 0x879480: r8 = String
    //     0x879480: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879484: r3 = Null
    //     0x879484: add             x3, PP, #0x11, lsl #12  ; [pp+0x11860] Null
    //     0x879488: ldr             x3, [x3, #0x860]
    // 0x87948c: r0 = String()
    //     0x87948c: bl              #0x1523244  ; IsType_String_Stub
    // 0x879490: r0 = LoadStaticField(0xb54)
    //     0x879490: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879494: ldr             x0, [x0, #0x16a8]
    // 0x879498: cmp             w0, NULL
    // 0x87949c: b.ne            #0x8794ac
    // 0x8794a0: nop             
    // 0x8794a4: r0 = Null
    //     0x8794a4: mov             x0, NULL
    // 0x8794a8: b               #0x8794d4
    // 0x8794ac: r17 = 351
    //     0x8794ac: movz            x17, #0x15f
    // 0x8794b0: ldr             w1, [x0, x17]
    // 0x8794b4: DecompressPointer r1
    //     0x8794b4: add             x1, x1, HEAP, lsl #32
    // 0x8794b8: r0 = LoadClassIdInstr(r1)
    //     0x8794b8: ldur            x0, [x1, #-1]
    //     0x8794bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8794c0: r2 = "makiMemoryMain"
    //     0x8794c0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x8794c4: ldr             x2, [x2, #0x780]
    // 0x8794c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8794c8: sub             lr, x0, #0xb4
    //     0x8794cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8794d0: blr             lr
    // 0x8794d4: cmp             w0, NULL
    // 0x8794d8: b.ne            #0x8794e8
    // 0x8794dc: nop             
    // 0x8794e0: r4 = ""
    //     0x8794e0: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8794e4: b               #0x8794ec
    // 0x8794e8: mov             x4, x0
    // 0x8794ec: ldur            x3, [fp, #-8]
    // 0x8794f0: mov             x0, x4
    // 0x8794f4: stur            x4, [fp, #-0x10]
    // 0x8794f8: r2 = Null
    //     0x8794f8: mov             x2, NULL
    // 0x8794fc: r1 = Null
    //     0x8794fc: mov             x1, NULL
    // 0x879500: r4 = 59
    //     0x879500: movz            x4, #0x3b
    // 0x879504: branchIfSmi(r0, 0x879514)
    //     0x879504: tbz             w0, #0, #0x879514
    //     0x879508: nop             
    // 0x87950c: r4 = LoadClassIdInstr(r0)
    //     0x87950c: ldur            x4, [x0, #-1]
    //     0x879510: ubfx            x4, x4, #0xc, #0x14
    // 0x879514: sub             x4, x4, #0x5d
    // 0x879518: cmp             x4, #1
    // 0x87951c: b.ls            #0x879534
    // 0x879520: nop             
    // 0x879524: r8 = String
    //     0x879524: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879528: r3 = Null
    //     0x879528: add             x3, PP, #0x11, lsl #12  ; [pp+0x11870] Null
    //     0x87952c: ldr             x3, [x3, #0x870]
    // 0x879530: r0 = String()
    //     0x879530: bl              #0x1523244  ; IsType_String_Stub
    // 0x879534: ldur            x1, [fp, #-8]
    // 0x879538: r0 = LoadClassIdInstr(r1)
    //     0x879538: ldur            x0, [x1, #-1]
    //     0x87953c: ubfx            x0, x0, #0xc, #0x14
    // 0x879540: r16 = ""
    //     0x879540: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879544: stp             x16, x1, [SP]
    // 0x879548: mov             lr, x0
    // 0x87954c: ldr             lr, [x21, lr, lsl #3]
    // 0x879550: blr             lr
    // 0x879554: tbnz            w0, #4, #0x879594
    // 0x879558: nop             
    // 0x87955c: ldur            x1, [fp, #-0x10]
    // 0x879560: r0 = LoadClassIdInstr(r1)
    //     0x879560: ldur            x0, [x1, #-1]
    //     0x879564: ubfx            x0, x0, #0xc, #0x14
    // 0x879568: r16 = "progress2"
    //     0x879568: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87956c: ldr             x16, [x16, #0x798]
    // 0x879570: stp             x16, x1, [SP]
    // 0x879574: mov             lr, x0
    // 0x879578: ldr             lr, [x21, lr, lsl #3]
    // 0x87957c: blr             lr
    // 0x879580: tbnz            w0, #4, #0x879594
    // 0x879584: nop             
    // 0x879588: r0 = "makiMemoryBcMember1"
    //     0x879588: add             x0, PP, #0x11, lsl #12  ; [pp+0x11858] "makiMemoryBcMember1"
    //     0x87958c: ldr             x0, [x0, #0x858]
    // 0x879590: b               #0x8838b4
    // 0x879594: ldur            x0, [fp, #-8]
    // 0x879598: r1 = LoadClassIdInstr(r0)
    //     0x879598: ldur            x1, [x0, #-1]
    //     0x87959c: ubfx            x1, x1, #0xc, #0x14
    // 0x8795a0: r16 = "complete"
    //     0x8795a0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8795a4: ldr             x16, [x16, #0x590]
    // 0x8795a8: stp             x16, x0, [SP]
    // 0x8795ac: mov             x0, x1
    // 0x8795b0: mov             lr, x0
    // 0x8795b4: ldr             lr, [x21, lr, lsl #3]
    // 0x8795b8: blr             lr
    // 0x8795bc: tbnz            w0, #4, #0x879600
    // 0x8795c0: nop             
    // 0x8795c4: ldur            x0, [fp, #-0x10]
    // 0x8795c8: r1 = LoadClassIdInstr(r0)
    //     0x8795c8: ldur            x1, [x0, #-1]
    //     0x8795cc: ubfx            x1, x1, #0xc, #0x14
    // 0x8795d0: r16 = "progress2"
    //     0x8795d0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x8795d4: ldr             x16, [x16, #0x798]
    // 0x8795d8: stp             x16, x0, [SP]
    // 0x8795dc: mov             x0, x1
    // 0x8795e0: mov             lr, x0
    // 0x8795e4: ldr             lr, [x21, lr, lsl #3]
    // 0x8795e8: blr             lr
    // 0x8795ec: tbnz            w0, #4, #0x879600
    // 0x8795f0: nop             
    // 0x8795f4: r0 = "complete"
    //     0x8795f4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8795f8: ldr             x0, [x0, #0x590]
    // 0x8795fc: b               #0x8838b4
    // 0x879600: r0 = "noYet"
    //     0x879600: add             x0, PP, #0x11, lsl #12  ; [pp+0x11880] "noYet"
    //     0x879604: ldr             x0, [x0, #0x880]
    // 0x879608: b               #0x8838b4
    // 0x87960c: r16 = "makiMemoryBcMember2"
    //     0x87960c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11888] "makiMemoryBcMember2"
    //     0x879610: ldr             x16, [x16, #0x888]
    // 0x879614: ldur            lr, [fp, #-0x28]
    // 0x879618: stp             lr, x16, [SP]
    // 0x87961c: r0 = ==()
    //     0x87961c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879620: tbnz            w0, #4, #0x879844
    // 0x879624: nop             
    // 0x879628: r0 = LoadStaticField(0xb54)
    //     0x879628: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87962c: ldr             x0, [x0, #0x16a8]
    // 0x879630: cmp             w0, NULL
    // 0x879634: b.ne            #0x879644
    // 0x879638: nop             
    // 0x87963c: r0 = Null
    //     0x87963c: mov             x0, NULL
    // 0x879640: b               #0x87966c
    // 0x879644: r17 = 351
    //     0x879644: movz            x17, #0x15f
    // 0x879648: ldr             w1, [x0, x17]
    // 0x87964c: DecompressPointer r1
    //     0x87964c: add             x1, x1, HEAP, lsl #32
    // 0x879650: r0 = LoadClassIdInstr(r1)
    //     0x879650: ldur            x0, [x1, #-1]
    //     0x879654: ubfx            x0, x0, #0xc, #0x14
    // 0x879658: r2 = "makiMemoryBcMember2"
    //     0x879658: add             x2, PP, #0x11, lsl #12  ; [pp+0x11888] "makiMemoryBcMember2"
    //     0x87965c: ldr             x2, [x2, #0x888]
    // 0x879660: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879660: sub             lr, x0, #0xb4
    //     0x879664: ldr             lr, [x21, lr, lsl #3]
    //     0x879668: blr             lr
    // 0x87966c: cmp             w0, NULL
    // 0x879670: b.ne            #0x879680
    // 0x879674: nop             
    // 0x879678: r3 = ""
    //     0x879678: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87967c: b               #0x879684
    // 0x879680: mov             x3, x0
    // 0x879684: mov             x0, x3
    // 0x879688: stur            x3, [fp, #-8]
    // 0x87968c: r2 = Null
    //     0x87968c: mov             x2, NULL
    // 0x879690: r1 = Null
    //     0x879690: mov             x1, NULL
    // 0x879694: r4 = 59
    //     0x879694: movz            x4, #0x3b
    // 0x879698: branchIfSmi(r0, 0x8796a8)
    //     0x879698: tbz             w0, #0, #0x8796a8
    //     0x87969c: nop             
    // 0x8796a0: r4 = LoadClassIdInstr(r0)
    //     0x8796a0: ldur            x4, [x0, #-1]
    //     0x8796a4: ubfx            x4, x4, #0xc, #0x14
    // 0x8796a8: sub             x4, x4, #0x5d
    // 0x8796ac: cmp             x4, #1
    // 0x8796b0: b.ls            #0x8796c8
    // 0x8796b4: nop             
    // 0x8796b8: r8 = String
    //     0x8796b8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8796bc: r3 = Null
    //     0x8796bc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11890] Null
    //     0x8796c0: ldr             x3, [x3, #0x890]
    // 0x8796c4: r0 = String()
    //     0x8796c4: bl              #0x1523244  ; IsType_String_Stub
    // 0x8796c8: r0 = LoadStaticField(0xb54)
    //     0x8796c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8796cc: ldr             x0, [x0, #0x16a8]
    // 0x8796d0: cmp             w0, NULL
    // 0x8796d4: b.ne            #0x8796e4
    // 0x8796d8: nop             
    // 0x8796dc: r0 = Null
    //     0x8796dc: mov             x0, NULL
    // 0x8796e0: b               #0x87970c
    // 0x8796e4: r17 = 351
    //     0x8796e4: movz            x17, #0x15f
    // 0x8796e8: ldr             w1, [x0, x17]
    // 0x8796ec: DecompressPointer r1
    //     0x8796ec: add             x1, x1, HEAP, lsl #32
    // 0x8796f0: r0 = LoadClassIdInstr(r1)
    //     0x8796f0: ldur            x0, [x1, #-1]
    //     0x8796f4: ubfx            x0, x0, #0xc, #0x14
    // 0x8796f8: r2 = "makiMemoryMain"
    //     0x8796f8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x8796fc: ldr             x2, [x2, #0x780]
    // 0x879700: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879700: sub             lr, x0, #0xb4
    //     0x879704: ldr             lr, [x21, lr, lsl #3]
    //     0x879708: blr             lr
    // 0x87970c: cmp             w0, NULL
    // 0x879710: b.ne            #0x879720
    // 0x879714: nop             
    // 0x879718: r4 = ""
    //     0x879718: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87971c: b               #0x879724
    // 0x879720: mov             x4, x0
    // 0x879724: ldur            x3, [fp, #-8]
    // 0x879728: mov             x0, x4
    // 0x87972c: stur            x4, [fp, #-0x10]
    // 0x879730: r2 = Null
    //     0x879730: mov             x2, NULL
    // 0x879734: r1 = Null
    //     0x879734: mov             x1, NULL
    // 0x879738: r4 = 59
    //     0x879738: movz            x4, #0x3b
    // 0x87973c: branchIfSmi(r0, 0x87974c)
    //     0x87973c: tbz             w0, #0, #0x87974c
    //     0x879740: nop             
    // 0x879744: r4 = LoadClassIdInstr(r0)
    //     0x879744: ldur            x4, [x0, #-1]
    //     0x879748: ubfx            x4, x4, #0xc, #0x14
    // 0x87974c: sub             x4, x4, #0x5d
    // 0x879750: cmp             x4, #1
    // 0x879754: b.ls            #0x87976c
    // 0x879758: nop             
    // 0x87975c: r8 = String
    //     0x87975c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879760: r3 = Null
    //     0x879760: add             x3, PP, #0x11, lsl #12  ; [pp+0x118a0] Null
    //     0x879764: ldr             x3, [x3, #0x8a0]
    // 0x879768: r0 = String()
    //     0x879768: bl              #0x1523244  ; IsType_String_Stub
    // 0x87976c: ldur            x1, [fp, #-8]
    // 0x879770: r0 = LoadClassIdInstr(r1)
    //     0x879770: ldur            x0, [x1, #-1]
    //     0x879774: ubfx            x0, x0, #0xc, #0x14
    // 0x879778: r16 = ""
    //     0x879778: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87977c: stp             x16, x1, [SP]
    // 0x879780: mov             lr, x0
    // 0x879784: ldr             lr, [x21, lr, lsl #3]
    // 0x879788: blr             lr
    // 0x87978c: tbnz            w0, #4, #0x8797cc
    // 0x879790: nop             
    // 0x879794: ldur            x1, [fp, #-0x10]
    // 0x879798: r0 = LoadClassIdInstr(r1)
    //     0x879798: ldur            x0, [x1, #-1]
    //     0x87979c: ubfx            x0, x0, #0xc, #0x14
    // 0x8797a0: r16 = "progress2"
    //     0x8797a0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x8797a4: ldr             x16, [x16, #0x798]
    // 0x8797a8: stp             x16, x1, [SP]
    // 0x8797ac: mov             lr, x0
    // 0x8797b0: ldr             lr, [x21, lr, lsl #3]
    // 0x8797b4: blr             lr
    // 0x8797b8: tbnz            w0, #4, #0x8797cc
    // 0x8797bc: nop             
    // 0x8797c0: r0 = "makiMemoryBcMember2"
    //     0x8797c0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11888] "makiMemoryBcMember2"
    //     0x8797c4: ldr             x0, [x0, #0x888]
    // 0x8797c8: b               #0x8838b4
    // 0x8797cc: ldur            x0, [fp, #-8]
    // 0x8797d0: r1 = LoadClassIdInstr(r0)
    //     0x8797d0: ldur            x1, [x0, #-1]
    //     0x8797d4: ubfx            x1, x1, #0xc, #0x14
    // 0x8797d8: r16 = "complete"
    //     0x8797d8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8797dc: ldr             x16, [x16, #0x590]
    // 0x8797e0: stp             x16, x0, [SP]
    // 0x8797e4: mov             x0, x1
    // 0x8797e8: mov             lr, x0
    // 0x8797ec: ldr             lr, [x21, lr, lsl #3]
    // 0x8797f0: blr             lr
    // 0x8797f4: tbnz            w0, #4, #0x879838
    // 0x8797f8: nop             
    // 0x8797fc: ldur            x0, [fp, #-0x10]
    // 0x879800: r1 = LoadClassIdInstr(r0)
    //     0x879800: ldur            x1, [x0, #-1]
    //     0x879804: ubfx            x1, x1, #0xc, #0x14
    // 0x879808: r16 = "progress2"
    //     0x879808: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87980c: ldr             x16, [x16, #0x798]
    // 0x879810: stp             x16, x0, [SP]
    // 0x879814: mov             x0, x1
    // 0x879818: mov             lr, x0
    // 0x87981c: ldr             lr, [x21, lr, lsl #3]
    // 0x879820: blr             lr
    // 0x879824: tbnz            w0, #4, #0x879838
    // 0x879828: nop             
    // 0x87982c: r0 = "complete"
    //     0x87982c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x879830: ldr             x0, [x0, #0x590]
    // 0x879834: b               #0x8838b4
    // 0x879838: r0 = "noYet"
    //     0x879838: add             x0, PP, #0x11, lsl #12  ; [pp+0x11880] "noYet"
    //     0x87983c: ldr             x0, [x0, #0x880]
    // 0x879840: b               #0x8838b4
    // 0x879844: r16 = "makiMemoryBcMember3"
    //     0x879844: add             x16, PP, #0x11, lsl #12  ; [pp+0x118b0] "makiMemoryBcMember3"
    //     0x879848: ldr             x16, [x16, #0x8b0]
    // 0x87984c: ldur            lr, [fp, #-0x28]
    // 0x879850: stp             lr, x16, [SP]
    // 0x879854: r0 = ==()
    //     0x879854: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879858: tbnz            w0, #4, #0x879a00
    // 0x87985c: nop             
    // 0x879860: r0 = LoadStaticField(0xb54)
    //     0x879860: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879864: ldr             x0, [x0, #0x16a8]
    // 0x879868: cmp             w0, NULL
    // 0x87986c: b.ne            #0x87987c
    // 0x879870: nop             
    // 0x879874: r0 = Null
    //     0x879874: mov             x0, NULL
    // 0x879878: b               #0x8798a4
    // 0x87987c: r17 = 347
    //     0x87987c: movz            x17, #0x15b
    // 0x879880: ldr             w1, [x0, x17]
    // 0x879884: DecompressPointer r1
    //     0x879884: add             x1, x1, HEAP, lsl #32
    // 0x879888: r0 = LoadClassIdInstr(r1)
    //     0x879888: ldur            x0, [x1, #-1]
    //     0x87988c: ubfx            x0, x0, #0xc, #0x14
    // 0x879890: r2 = "makiMaxCompletion"
    //     0x879890: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x879894: ldr             x2, [x2, #0x8b8]
    // 0x879898: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879898: sub             lr, x0, #0xb4
    //     0x87989c: ldr             lr, [x21, lr, lsl #3]
    //     0x8798a0: blr             lr
    // 0x8798a4: cmp             w0, NULL
    // 0x8798a8: b.ne            #0x8798b8
    // 0x8798ac: nop             
    // 0x8798b0: r3 = 0
    //     0x8798b0: movz            x3, #0
    // 0x8798b4: b               #0x8798bc
    // 0x8798b8: mov             x3, x0
    // 0x8798bc: mov             x0, x3
    // 0x8798c0: stur            x3, [fp, #-8]
    // 0x8798c4: r2 = Null
    //     0x8798c4: mov             x2, NULL
    // 0x8798c8: r1 = Null
    //     0x8798c8: mov             x1, NULL
    // 0x8798cc: branchIfSmi(r0, 0x8798fc)
    //     0x8798cc: tbz             w0, #0, #0x8798fc
    //     0x8798d0: nop             
    // 0x8798d4: r4 = LoadClassIdInstr(r0)
    //     0x8798d4: ldur            x4, [x0, #-1]
    //     0x8798d8: ubfx            x4, x4, #0xc, #0x14
    // 0x8798dc: sub             x4, x4, #0x3b
    // 0x8798e0: cmp             x4, #1
    // 0x8798e4: b.ls            #0x8798fc
    // 0x8798e8: nop             
    // 0x8798ec: r8 = int
    //     0x8798ec: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8798f0: r3 = Null
    //     0x8798f0: add             x3, PP, #0x11, lsl #12  ; [pp+0x118c0] Null
    //     0x8798f4: ldr             x3, [x3, #0x8c0]
    // 0x8798f8: r0 = int()
    //     0x8798f8: bl              #0x1524294  ; IsType_int_Stub
    // 0x8798fc: r0 = LoadStaticField(0xb54)
    //     0x8798fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879900: ldr             x0, [x0, #0x16a8]
    // 0x879904: cmp             w0, NULL
    // 0x879908: b.ne            #0x879918
    // 0x87990c: nop             
    // 0x879910: r0 = Null
    //     0x879910: mov             x0, NULL
    // 0x879914: b               #0x879940
    // 0x879918: r17 = 351
    //     0x879918: movz            x17, #0x15f
    // 0x87991c: ldr             w1, [x0, x17]
    // 0x879920: DecompressPointer r1
    //     0x879920: add             x1, x1, HEAP, lsl #32
    // 0x879924: r0 = LoadClassIdInstr(r1)
    //     0x879924: ldur            x0, [x1, #-1]
    //     0x879928: ubfx            x0, x0, #0xc, #0x14
    // 0x87992c: r2 = "makiMemoryBcMember3"
    //     0x87992c: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b0] "makiMemoryBcMember3"
    //     0x879930: ldr             x2, [x2, #0x8b0]
    // 0x879934: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879934: sub             lr, x0, #0xb4
    //     0x879938: ldr             lr, [x21, lr, lsl #3]
    //     0x87993c: blr             lr
    // 0x879940: cmp             w0, NULL
    // 0x879944: b.ne            #0x879954
    // 0x879948: nop             
    // 0x87994c: r3 = ""
    //     0x87994c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879950: b               #0x879958
    // 0x879954: mov             x3, x0
    // 0x879958: mov             x0, x3
    // 0x87995c: stur            x3, [fp, #-0x10]
    // 0x879960: r2 = Null
    //     0x879960: mov             x2, NULL
    // 0x879964: r1 = Null
    //     0x879964: mov             x1, NULL
    // 0x879968: r4 = 59
    //     0x879968: movz            x4, #0x3b
    // 0x87996c: branchIfSmi(r0, 0x87997c)
    //     0x87996c: tbz             w0, #0, #0x87997c
    //     0x879970: nop             
    // 0x879974: r4 = LoadClassIdInstr(r0)
    //     0x879974: ldur            x4, [x0, #-1]
    //     0x879978: ubfx            x4, x4, #0xc, #0x14
    // 0x87997c: sub             x4, x4, #0x5d
    // 0x879980: cmp             x4, #1
    // 0x879984: b.ls            #0x87999c
    // 0x879988: nop             
    // 0x87998c: r8 = String
    //     0x87998c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879990: r3 = Null
    //     0x879990: add             x3, PP, #0x11, lsl #12  ; [pp+0x118d0] Null
    //     0x879994: ldr             x3, [x3, #0x8d0]
    // 0x879998: r0 = String()
    //     0x879998: bl              #0x1523244  ; IsType_String_Stub
    // 0x87999c: ldur            x0, [fp, #-0x10]
    // 0x8799a0: r1 = LoadClassIdInstr(r0)
    //     0x8799a0: ldur            x1, [x0, #-1]
    //     0x8799a4: ubfx            x1, x1, #0xc, #0x14
    // 0x8799a8: r16 = "complete"
    //     0x8799a8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8799ac: ldr             x16, [x16, #0x590]
    // 0x8799b0: stp             x16, x0, [SP]
    // 0x8799b4: mov             x0, x1
    // 0x8799b8: mov             lr, x0
    // 0x8799bc: ldr             lr, [x21, lr, lsl #3]
    // 0x8799c0: blr             lr
    // 0x8799c4: tbz             w0, #4, #0x8799ec
    // 0x8799c8: nop             
    // 0x8799cc: ldur            x0, [fp, #-8]
    // 0x8799d0: r1 = LoadInt32Instr(r0)
    //     0x8799d0: sbfx            x1, x0, #1, #0x1f
    //     0x8799d4: tbz             w0, #0, #0x8799e0
    //     0x8799d8: nop             
    //     0x8799dc: ldur            x1, [x0, #7]
    // 0x8799e0: cmp             x1, #0x50
    // 0x8799e4: b.ge            #0x8799f4
    // 0x8799e8: nop             
    // 0x8799ec: r0 = "end"
    //     0x8799ec: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x8799f0: b               #0x8838b4
    // 0x8799f4: r0 = "makiMemoryBcMember3"
    //     0x8799f4: add             x0, PP, #0x11, lsl #12  ; [pp+0x118b0] "makiMemoryBcMember3"
    //     0x8799f8: ldr             x0, [x0, #0x8b0]
    // 0x8799fc: b               #0x8838b4
    // 0x879a00: r16 = "makiMemoryBcMember3Tips"
    //     0x879a00: add             x16, PP, #0x11, lsl #12  ; [pp+0x118e0] "makiMemoryBcMember3Tips"
    //     0x879a04: ldr             x16, [x16, #0x8e0]
    // 0x879a08: ldur            lr, [fp, #-0x28]
    // 0x879a0c: stp             lr, x16, [SP]
    // 0x879a10: r0 = ==()
    //     0x879a10: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879a14: tbnz            w0, #4, #0x879b38
    // 0x879a18: nop             
    // 0x879a1c: r0 = LoadStaticField(0xb54)
    //     0x879a1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879a20: ldr             x0, [x0, #0x16a8]
    // 0x879a24: cmp             w0, NULL
    // 0x879a28: b.ne            #0x879a38
    // 0x879a2c: nop             
    // 0x879a30: r0 = Null
    //     0x879a30: mov             x0, NULL
    // 0x879a34: b               #0x879a60
    // 0x879a38: r17 = 351
    //     0x879a38: movz            x17, #0x15f
    // 0x879a3c: ldr             w1, [x0, x17]
    // 0x879a40: DecompressPointer r1
    //     0x879a40: add             x1, x1, HEAP, lsl #32
    // 0x879a44: r0 = LoadClassIdInstr(r1)
    //     0x879a44: ldur            x0, [x1, #-1]
    //     0x879a48: ubfx            x0, x0, #0xc, #0x14
    // 0x879a4c: r2 = "makiMemoryBcMember3"
    //     0x879a4c: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b0] "makiMemoryBcMember3"
    //     0x879a50: ldr             x2, [x2, #0x8b0]
    // 0x879a54: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879a54: sub             lr, x0, #0xb4
    //     0x879a58: ldr             lr, [x21, lr, lsl #3]
    //     0x879a5c: blr             lr
    // 0x879a60: cmp             w0, NULL
    // 0x879a64: b.ne            #0x879a74
    // 0x879a68: nop             
    // 0x879a6c: r3 = ""
    //     0x879a6c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879a70: b               #0x879a78
    // 0x879a74: mov             x3, x0
    // 0x879a78: mov             x0, x3
    // 0x879a7c: stur            x3, [fp, #-8]
    // 0x879a80: r2 = Null
    //     0x879a80: mov             x2, NULL
    // 0x879a84: r1 = Null
    //     0x879a84: mov             x1, NULL
    // 0x879a88: r4 = 59
    //     0x879a88: movz            x4, #0x3b
    // 0x879a8c: branchIfSmi(r0, 0x879a9c)
    //     0x879a8c: tbz             w0, #0, #0x879a9c
    //     0x879a90: nop             
    // 0x879a94: r4 = LoadClassIdInstr(r0)
    //     0x879a94: ldur            x4, [x0, #-1]
    //     0x879a98: ubfx            x4, x4, #0xc, #0x14
    // 0x879a9c: sub             x4, x4, #0x5d
    // 0x879aa0: cmp             x4, #1
    // 0x879aa4: b.ls            #0x879abc
    // 0x879aa8: nop             
    // 0x879aac: r8 = String
    //     0x879aac: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879ab0: r3 = Null
    //     0x879ab0: add             x3, PP, #0x11, lsl #12  ; [pp+0x118e8] Null
    //     0x879ab4: ldr             x3, [x3, #0x8e8]
    // 0x879ab8: r0 = String()
    //     0x879ab8: bl              #0x1523244  ; IsType_String_Stub
    // 0x879abc: ldur            x1, [fp, #-8]
    // 0x879ac0: r0 = LoadClassIdInstr(r1)
    //     0x879ac0: ldur            x0, [x1, #-1]
    //     0x879ac4: ubfx            x0, x0, #0xc, #0x14
    // 0x879ac8: r16 = ""
    //     0x879ac8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879acc: stp             x16, x1, [SP]
    // 0x879ad0: mov             lr, x0
    // 0x879ad4: ldr             lr, [x21, lr, lsl #3]
    // 0x879ad8: blr             lr
    // 0x879adc: tbnz            w0, #4, #0x879af0
    // 0x879ae0: nop             
    // 0x879ae4: r0 = "tips1"
    //     0x879ae4: add             x0, PP, #0x11, lsl #12  ; [pp+0x118f8] "tips1"
    //     0x879ae8: ldr             x0, [x0, #0x8f8]
    // 0x879aec: b               #0x8838b4
    // 0x879af0: ldur            x0, [fp, #-8]
    // 0x879af4: r1 = LoadClassIdInstr(r0)
    //     0x879af4: ldur            x1, [x0, #-1]
    //     0x879af8: ubfx            x1, x1, #0xc, #0x14
    // 0x879afc: r16 = "progress1"
    //     0x879afc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11900] "progress1"
    //     0x879b00: ldr             x16, [x16, #0x900]
    // 0x879b04: stp             x16, x0, [SP]
    // 0x879b08: mov             x0, x1
    // 0x879b0c: mov             lr, x0
    // 0x879b10: ldr             lr, [x21, lr, lsl #3]
    // 0x879b14: blr             lr
    // 0x879b18: tbnz            w0, #4, #0x879b2c
    // 0x879b1c: nop             
    // 0x879b20: r0 = "tips2"
    //     0x879b20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11908] "tips2"
    //     0x879b24: ldr             x0, [x0, #0x908]
    // 0x879b28: b               #0x8838b4
    // 0x879b2c: r0 = "tips3"
    //     0x879b2c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11910] "tips3"
    //     0x879b30: ldr             x0, [x0, #0x910]
    // 0x879b34: b               #0x8838b4
    // 0x879b38: r16 = "makiMemoryMainStory3"
    //     0x879b38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11918] "makiMemoryMainStory3"
    //     0x879b3c: ldr             x16, [x16, #0x918]
    // 0x879b40: ldur            lr, [fp, #-0x28]
    // 0x879b44: stp             lr, x16, [SP]
    // 0x879b48: r0 = ==()
    //     0x879b48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879b4c: tbnz            w0, #4, #0x879c3c
    // 0x879b50: nop             
    // 0x879b54: r0 = LoadStaticField(0xb54)
    //     0x879b54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879b58: ldr             x0, [x0, #0x16a8]
    // 0x879b5c: cmp             w0, NULL
    // 0x879b60: b.ne            #0x879b70
    // 0x879b64: nop             
    // 0x879b68: r0 = Null
    //     0x879b68: mov             x0, NULL
    // 0x879b6c: b               #0x879b98
    // 0x879b70: r17 = 351
    //     0x879b70: movz            x17, #0x15f
    // 0x879b74: ldr             w1, [x0, x17]
    // 0x879b78: DecompressPointer r1
    //     0x879b78: add             x1, x1, HEAP, lsl #32
    // 0x879b7c: r0 = LoadClassIdInstr(r1)
    //     0x879b7c: ldur            x0, [x1, #-1]
    //     0x879b80: ubfx            x0, x0, #0xc, #0x14
    // 0x879b84: r2 = "makiMemoryMain"
    //     0x879b84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x879b88: ldr             x2, [x2, #0x780]
    // 0x879b8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879b8c: sub             lr, x0, #0xb4
    //     0x879b90: ldr             lr, [x21, lr, lsl #3]
    //     0x879b94: blr             lr
    // 0x879b98: cmp             w0, NULL
    // 0x879b9c: b.ne            #0x879bac
    // 0x879ba0: nop             
    // 0x879ba4: r3 = ""
    //     0x879ba4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879ba8: b               #0x879bb0
    // 0x879bac: mov             x3, x0
    // 0x879bb0: mov             x0, x3
    // 0x879bb4: stur            x3, [fp, #-8]
    // 0x879bb8: r2 = Null
    //     0x879bb8: mov             x2, NULL
    // 0x879bbc: r1 = Null
    //     0x879bbc: mov             x1, NULL
    // 0x879bc0: r4 = 59
    //     0x879bc0: movz            x4, #0x3b
    // 0x879bc4: branchIfSmi(r0, 0x879bd4)
    //     0x879bc4: tbz             w0, #0, #0x879bd4
    //     0x879bc8: nop             
    // 0x879bcc: r4 = LoadClassIdInstr(r0)
    //     0x879bcc: ldur            x4, [x0, #-1]
    //     0x879bd0: ubfx            x4, x4, #0xc, #0x14
    // 0x879bd4: sub             x4, x4, #0x5d
    // 0x879bd8: cmp             x4, #1
    // 0x879bdc: b.ls            #0x879bf4
    // 0x879be0: nop             
    // 0x879be4: r8 = String
    //     0x879be4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879be8: r3 = Null
    //     0x879be8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11920] Null
    //     0x879bec: ldr             x3, [x3, #0x920]
    // 0x879bf0: r0 = String()
    //     0x879bf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x879bf4: ldur            x0, [fp, #-8]
    // 0x879bf8: r1 = LoadClassIdInstr(r0)
    //     0x879bf8: ldur            x1, [x0, #-1]
    //     0x879bfc: ubfx            x1, x1, #0xc, #0x14
    // 0x879c00: r16 = "progress2"
    //     0x879c00: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x879c04: ldr             x16, [x16, #0x798]
    // 0x879c08: stp             x16, x0, [SP]
    // 0x879c0c: mov             x0, x1
    // 0x879c10: mov             lr, x0
    // 0x879c14: ldr             lr, [x21, lr, lsl #3]
    // 0x879c18: blr             lr
    // 0x879c1c: tbnz            w0, #4, #0x879c30
    // 0x879c20: nop             
    // 0x879c24: r0 = "complete"
    //     0x879c24: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x879c28: ldr             x0, [x0, #0x590]
    // 0x879c2c: b               #0x8838b4
    // 0x879c30: r0 = "makiMemoryMainStory3"
    //     0x879c30: add             x0, PP, #0x11, lsl #12  ; [pp+0x11918] "makiMemoryMainStory3"
    //     0x879c34: ldr             x0, [x0, #0x918]
    // 0x879c38: b               #0x8838b4
    // 0x879c3c: r16 = "makiMemoryStevon"
    //     0x879c3c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11930] "makiMemoryStevon"
    //     0x879c40: ldr             x16, [x16, #0x930]
    // 0x879c44: ldur            lr, [fp, #-0x28]
    // 0x879c48: stp             lr, x16, [SP]
    // 0x879c4c: r0 = ==()
    //     0x879c4c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879c50: tbnz            w0, #4, #0x879ee8
    // 0x879c54: nop             
    // 0x879c58: r0 = LoadStaticField(0xb54)
    //     0x879c58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879c5c: ldr             x0, [x0, #0x16a8]
    // 0x879c60: cmp             w0, NULL
    // 0x879c64: b.ne            #0x879c74
    // 0x879c68: nop             
    // 0x879c6c: r0 = Null
    //     0x879c6c: mov             x0, NULL
    // 0x879c70: b               #0x879c9c
    // 0x879c74: r17 = 351
    //     0x879c74: movz            x17, #0x15f
    // 0x879c78: ldr             w1, [x0, x17]
    // 0x879c7c: DecompressPointer r1
    //     0x879c7c: add             x1, x1, HEAP, lsl #32
    // 0x879c80: r0 = LoadClassIdInstr(r1)
    //     0x879c80: ldur            x0, [x1, #-1]
    //     0x879c84: ubfx            x0, x0, #0xc, #0x14
    // 0x879c88: r2 = "makiMemoryStevon"
    //     0x879c88: add             x2, PP, #0x11, lsl #12  ; [pp+0x11930] "makiMemoryStevon"
    //     0x879c8c: ldr             x2, [x2, #0x930]
    // 0x879c90: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879c90: sub             lr, x0, #0xb4
    //     0x879c94: ldr             lr, [x21, lr, lsl #3]
    //     0x879c98: blr             lr
    // 0x879c9c: cmp             w0, NULL
    // 0x879ca0: b.ne            #0x879cb0
    // 0x879ca4: nop             
    // 0x879ca8: r3 = ""
    //     0x879ca8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879cac: b               #0x879cb4
    // 0x879cb0: mov             x3, x0
    // 0x879cb4: mov             x0, x3
    // 0x879cb8: stur            x3, [fp, #-8]
    // 0x879cbc: r2 = Null
    //     0x879cbc: mov             x2, NULL
    // 0x879cc0: r1 = Null
    //     0x879cc0: mov             x1, NULL
    // 0x879cc4: r4 = 59
    //     0x879cc4: movz            x4, #0x3b
    // 0x879cc8: branchIfSmi(r0, 0x879cd8)
    //     0x879cc8: tbz             w0, #0, #0x879cd8
    //     0x879ccc: nop             
    // 0x879cd0: r4 = LoadClassIdInstr(r0)
    //     0x879cd0: ldur            x4, [x0, #-1]
    //     0x879cd4: ubfx            x4, x4, #0xc, #0x14
    // 0x879cd8: sub             x4, x4, #0x5d
    // 0x879cdc: cmp             x4, #1
    // 0x879ce0: b.ls            #0x879cf8
    // 0x879ce4: nop             
    // 0x879ce8: r8 = String
    //     0x879ce8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879cec: r3 = Null
    //     0x879cec: add             x3, PP, #0x11, lsl #12  ; [pp+0x11938] Null
    //     0x879cf0: ldr             x3, [x3, #0x938]
    // 0x879cf4: r0 = String()
    //     0x879cf4: bl              #0x1523244  ; IsType_String_Stub
    // 0x879cf8: r0 = LoadStaticField(0xb54)
    //     0x879cf8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879cfc: ldr             x0, [x0, #0x16a8]
    // 0x879d00: cmp             w0, NULL
    // 0x879d04: b.ne            #0x879d14
    // 0x879d08: nop             
    // 0x879d0c: r0 = Null
    //     0x879d0c: mov             x0, NULL
    // 0x879d10: b               #0x879d3c
    // 0x879d14: r17 = 351
    //     0x879d14: movz            x17, #0x15f
    // 0x879d18: ldr             w1, [x0, x17]
    // 0x879d1c: DecompressPointer r1
    //     0x879d1c: add             x1, x1, HEAP, lsl #32
    // 0x879d20: r0 = LoadClassIdInstr(r1)
    //     0x879d20: ldur            x0, [x1, #-1]
    //     0x879d24: ubfx            x0, x0, #0xc, #0x14
    // 0x879d28: r2 = "makiMemoryMain"
    //     0x879d28: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x879d2c: ldr             x2, [x2, #0x780]
    // 0x879d30: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879d30: sub             lr, x0, #0xb4
    //     0x879d34: ldr             lr, [x21, lr, lsl #3]
    //     0x879d38: blr             lr
    // 0x879d3c: cmp             w0, NULL
    // 0x879d40: b.ne            #0x879d50
    // 0x879d44: nop             
    // 0x879d48: r3 = ""
    //     0x879d48: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879d4c: b               #0x879d54
    // 0x879d50: mov             x3, x0
    // 0x879d54: mov             x0, x3
    // 0x879d58: stur            x3, [fp, #-0x10]
    // 0x879d5c: r2 = Null
    //     0x879d5c: mov             x2, NULL
    // 0x879d60: r1 = Null
    //     0x879d60: mov             x1, NULL
    // 0x879d64: r4 = 59
    //     0x879d64: movz            x4, #0x3b
    // 0x879d68: branchIfSmi(r0, 0x879d78)
    //     0x879d68: tbz             w0, #0, #0x879d78
    //     0x879d6c: nop             
    // 0x879d70: r4 = LoadClassIdInstr(r0)
    //     0x879d70: ldur            x4, [x0, #-1]
    //     0x879d74: ubfx            x4, x4, #0xc, #0x14
    // 0x879d78: sub             x4, x4, #0x5d
    // 0x879d7c: cmp             x4, #1
    // 0x879d80: b.ls            #0x879d98
    // 0x879d84: nop             
    // 0x879d88: r8 = String
    //     0x879d88: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879d8c: r3 = Null
    //     0x879d8c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11948] Null
    //     0x879d90: ldr             x3, [x3, #0x948]
    // 0x879d94: r0 = String()
    //     0x879d94: bl              #0x1523244  ; IsType_String_Stub
    // 0x879d98: r0 = LoadStaticField(0xb54)
    //     0x879d98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879d9c: ldr             x0, [x0, #0x16a8]
    // 0x879da0: cmp             w0, NULL
    // 0x879da4: b.ne            #0x879db4
    // 0x879da8: nop             
    // 0x879dac: r0 = Null
    //     0x879dac: mov             x0, NULL
    // 0x879db0: b               #0x879ddc
    // 0x879db4: r17 = 347
    //     0x879db4: movz            x17, #0x15b
    // 0x879db8: ldr             w1, [x0, x17]
    // 0x879dbc: DecompressPointer r1
    //     0x879dbc: add             x1, x1, HEAP, lsl #32
    // 0x879dc0: r0 = LoadClassIdInstr(r1)
    //     0x879dc0: ldur            x0, [x1, #-1]
    //     0x879dc4: ubfx            x0, x0, #0xc, #0x14
    // 0x879dc8: r2 = "makiMaxCompletion"
    //     0x879dc8: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x879dcc: ldr             x2, [x2, #0x8b8]
    // 0x879dd0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879dd0: sub             lr, x0, #0xb4
    //     0x879dd4: ldr             lr, [x21, lr, lsl #3]
    //     0x879dd8: blr             lr
    // 0x879ddc: cmp             w0, NULL
    // 0x879de0: b.ne            #0x879df0
    // 0x879de4: nop             
    // 0x879de8: r4 = 0
    //     0x879de8: movz            x4, #0
    // 0x879dec: b               #0x879df4
    // 0x879df0: mov             x4, x0
    // 0x879df4: ldur            x3, [fp, #-8]
    // 0x879df8: mov             x0, x4
    // 0x879dfc: stur            x4, [fp, #-0x18]
    // 0x879e00: r2 = Null
    //     0x879e00: mov             x2, NULL
    // 0x879e04: r1 = Null
    //     0x879e04: mov             x1, NULL
    // 0x879e08: branchIfSmi(r0, 0x879e38)
    //     0x879e08: tbz             w0, #0, #0x879e38
    //     0x879e0c: nop             
    // 0x879e10: r4 = LoadClassIdInstr(r0)
    //     0x879e10: ldur            x4, [x0, #-1]
    //     0x879e14: ubfx            x4, x4, #0xc, #0x14
    // 0x879e18: sub             x4, x4, #0x3b
    // 0x879e1c: cmp             x4, #1
    // 0x879e20: b.ls            #0x879e38
    // 0x879e24: nop             
    // 0x879e28: r8 = int
    //     0x879e28: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x879e2c: r3 = Null
    //     0x879e2c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11958] Null
    //     0x879e30: ldr             x3, [x3, #0x958]
    // 0x879e34: r0 = int()
    //     0x879e34: bl              #0x1524294  ; IsType_int_Stub
    // 0x879e38: ldur            x0, [fp, #-8]
    // 0x879e3c: r1 = LoadClassIdInstr(r0)
    //     0x879e3c: ldur            x1, [x0, #-1]
    //     0x879e40: ubfx            x1, x1, #0xc, #0x14
    // 0x879e44: r16 = ""
    //     0x879e44: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879e48: stp             x16, x0, [SP]
    // 0x879e4c: mov             x0, x1
    // 0x879e50: mov             lr, x0
    // 0x879e54: ldr             lr, [x21, lr, lsl #3]
    // 0x879e58: blr             lr
    // 0x879e5c: tbnz            w0, #4, #0x879ee0
    // 0x879e60: nop             
    // 0x879e64: ldur            x0, [fp, #-0x10]
    // 0x879e68: r1 = LoadClassIdInstr(r0)
    //     0x879e68: ldur            x1, [x0, #-1]
    //     0x879e6c: ubfx            x1, x1, #0xc, #0x14
    // 0x879e70: r16 = "progress2"
    //     0x879e70: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x879e74: ldr             x16, [x16, #0x798]
    // 0x879e78: stp             x16, x0, [SP]
    // 0x879e7c: mov             x0, x1
    // 0x879e80: mov             lr, x0
    // 0x879e84: ldr             lr, [x21, lr, lsl #3]
    // 0x879e88: blr             lr
    // 0x879e8c: tbnz            w0, #4, #0x879ee0
    // 0x879e90: nop             
    // 0x879e94: ldur            x0, [fp, #-0x18]
    // 0x879e98: r1 = LoadInt32Instr(r0)
    //     0x879e98: sbfx            x1, x0, #1, #0x1f
    //     0x879e9c: tbz             w0, #0, #0x879ea8
    //     0x879ea0: nop             
    //     0x879ea4: ldur            x1, [x0, #7]
    // 0x879ea8: cmp             x1, #0x32
    // 0x879eac: b.lt            #0x879ee0
    // 0x879eb0: nop             
    // 0x879eb4: r1 = Null
    //     0x879eb4: mov             x1, NULL
    // 0x879eb8: r0 = Random()
    //     0x879eb8: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x879ebc: mov             x1, x0
    // 0x879ec0: r2 = 100
    //     0x879ec0: movz            x2, #0x64
    // 0x879ec4: r0 = nextInt()
    //     0x879ec4: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x879ec8: cmp             x0, #0x23
    // 0x879ecc: b.gt            #0x879ee0
    // 0x879ed0: nop             
    // 0x879ed4: r0 = "makiMemoryStevon"
    //     0x879ed4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11930] "makiMemoryStevon"
    //     0x879ed8: ldr             x0, [x0, #0x930]
    // 0x879edc: b               #0x8838b4
    // 0x879ee0: r0 = "end"
    //     0x879ee0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x879ee4: b               #0x8838b4
    // 0x879ee8: r16 = "makiMemoryKevin"
    //     0x879ee8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11968] "makiMemoryKevin"
    //     0x879eec: ldr             x16, [x16, #0x968]
    // 0x879ef0: ldur            lr, [fp, #-0x28]
    // 0x879ef4: stp             lr, x16, [SP]
    // 0x879ef8: r0 = ==()
    //     0x879ef8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x879efc: tbnz            w0, #4, #0x87a01c
    // 0x879f00: nop             
    // 0x879f04: r0 = LoadStaticField(0xb54)
    //     0x879f04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x879f08: ldr             x0, [x0, #0x16a8]
    // 0x879f0c: cmp             w0, NULL
    // 0x879f10: b.ne            #0x879f20
    // 0x879f14: nop             
    // 0x879f18: r0 = Null
    //     0x879f18: mov             x0, NULL
    // 0x879f1c: b               #0x879f48
    // 0x879f20: r17 = 351
    //     0x879f20: movz            x17, #0x15f
    // 0x879f24: ldr             w1, [x0, x17]
    // 0x879f28: DecompressPointer r1
    //     0x879f28: add             x1, x1, HEAP, lsl #32
    // 0x879f2c: r0 = LoadClassIdInstr(r1)
    //     0x879f2c: ldur            x0, [x1, #-1]
    //     0x879f30: ubfx            x0, x0, #0xc, #0x14
    // 0x879f34: r2 = "makiMemoryKevin"
    //     0x879f34: add             x2, PP, #0x11, lsl #12  ; [pp+0x11968] "makiMemoryKevin"
    //     0x879f38: ldr             x2, [x2, #0x968]
    // 0x879f3c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x879f3c: sub             lr, x0, #0xb4
    //     0x879f40: ldr             lr, [x21, lr, lsl #3]
    //     0x879f44: blr             lr
    // 0x879f48: cmp             w0, NULL
    // 0x879f4c: b.ne            #0x879f5c
    // 0x879f50: nop             
    // 0x879f54: r3 = ""
    //     0x879f54: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879f58: b               #0x879f60
    // 0x879f5c: mov             x3, x0
    // 0x879f60: mov             x0, x3
    // 0x879f64: stur            x3, [fp, #-8]
    // 0x879f68: r2 = Null
    //     0x879f68: mov             x2, NULL
    // 0x879f6c: r1 = Null
    //     0x879f6c: mov             x1, NULL
    // 0x879f70: r4 = 59
    //     0x879f70: movz            x4, #0x3b
    // 0x879f74: branchIfSmi(r0, 0x879f84)
    //     0x879f74: tbz             w0, #0, #0x879f84
    //     0x879f78: nop             
    // 0x879f7c: r4 = LoadClassIdInstr(r0)
    //     0x879f7c: ldur            x4, [x0, #-1]
    //     0x879f80: ubfx            x4, x4, #0xc, #0x14
    // 0x879f84: sub             x4, x4, #0x5d
    // 0x879f88: cmp             x4, #1
    // 0x879f8c: b.ls            #0x879fa4
    // 0x879f90: nop             
    // 0x879f94: r8 = String
    //     0x879f94: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x879f98: r3 = Null
    //     0x879f98: add             x3, PP, #0x11, lsl #12  ; [pp+0x11970] Null
    //     0x879f9c: ldr             x3, [x3, #0x970]
    // 0x879fa0: r0 = String()
    //     0x879fa0: bl              #0x1523244  ; IsType_String_Stub
    // 0x879fa4: ldur            x1, [fp, #-8]
    // 0x879fa8: r0 = LoadClassIdInstr(r1)
    //     0x879fa8: ldur            x0, [x1, #-1]
    //     0x879fac: ubfx            x0, x0, #0xc, #0x14
    // 0x879fb0: r16 = ""
    //     0x879fb0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x879fb4: stp             x16, x1, [SP]
    // 0x879fb8: mov             lr, x0
    // 0x879fbc: ldr             lr, [x21, lr, lsl #3]
    // 0x879fc0: blr             lr
    // 0x879fc4: tbnz            w0, #4, #0x879fd8
    // 0x879fc8: nop             
    // 0x879fcc: r0 = "makiMemoryKevin"
    //     0x879fcc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11968] "makiMemoryKevin"
    //     0x879fd0: ldr             x0, [x0, #0x968]
    // 0x879fd4: b               #0x8838b4
    // 0x879fd8: ldur            x0, [fp, #-8]
    // 0x879fdc: r1 = LoadClassIdInstr(r0)
    //     0x879fdc: ldur            x1, [x0, #-1]
    //     0x879fe0: ubfx            x1, x1, #0xc, #0x14
    // 0x879fe4: r16 = "progress"
    //     0x879fe4: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x879fe8: stp             x16, x0, [SP]
    // 0x879fec: mov             x0, x1
    // 0x879ff0: mov             lr, x0
    // 0x879ff4: ldr             lr, [x21, lr, lsl #3]
    // 0x879ff8: blr             lr
    // 0x879ffc: tbnz            w0, #4, #0x87a010
    // 0x87a000: nop             
    // 0x87a004: r0 = "makiMemoryKevin2"
    //     0x87a004: add             x0, PP, #0x11, lsl #12  ; [pp+0x11980] "makiMemoryKevin2"
    //     0x87a008: ldr             x0, [x0, #0x980]
    // 0x87a00c: b               #0x8838b4
    // 0x87a010: r0 = "makiMemoryKevin3"
    //     0x87a010: add             x0, PP, #0x11, lsl #12  ; [pp+0x11988] "makiMemoryKevin3"
    //     0x87a014: ldr             x0, [x0, #0x988]
    // 0x87a018: b               #0x8838b4
    // 0x87a01c: r16 = "makiMemoryMainStory"
    //     0x87a01c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11990] "makiMemoryMainStory"
    //     0x87a020: ldr             x16, [x16, #0x990]
    // 0x87a024: ldur            lr, [fp, #-0x28]
    // 0x87a028: stp             lr, x16, [SP]
    // 0x87a02c: r0 = ==()
    //     0x87a02c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a030: tbnz            w0, #4, #0x87a2b4
    // 0x87a034: nop             
    // 0x87a038: r0 = LoadStaticField(0xb54)
    //     0x87a038: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a03c: ldr             x0, [x0, #0x16a8]
    // 0x87a040: cmp             w0, NULL
    // 0x87a044: b.ne            #0x87a054
    // 0x87a048: nop             
    // 0x87a04c: r0 = Null
    //     0x87a04c: mov             x0, NULL
    // 0x87a050: b               #0x87a07c
    // 0x87a054: r17 = 351
    //     0x87a054: movz            x17, #0x15f
    // 0x87a058: ldr             w1, [x0, x17]
    // 0x87a05c: DecompressPointer r1
    //     0x87a05c: add             x1, x1, HEAP, lsl #32
    // 0x87a060: r0 = LoadClassIdInstr(r1)
    //     0x87a060: ldur            x0, [x1, #-1]
    //     0x87a064: ubfx            x0, x0, #0xc, #0x14
    // 0x87a068: r2 = "makiMemoryMain"
    //     0x87a068: add             x2, PP, #0x11, lsl #12  ; [pp+0x11780] "makiMemoryMain"
    //     0x87a06c: ldr             x2, [x2, #0x780]
    // 0x87a070: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a070: sub             lr, x0, #0xb4
    //     0x87a074: ldr             lr, [x21, lr, lsl #3]
    //     0x87a078: blr             lr
    // 0x87a07c: cmp             w0, NULL
    // 0x87a080: b.ne            #0x87a090
    // 0x87a084: nop             
    // 0x87a088: r3 = ""
    //     0x87a088: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a08c: b               #0x87a094
    // 0x87a090: mov             x3, x0
    // 0x87a094: mov             x0, x3
    // 0x87a098: stur            x3, [fp, #-8]
    // 0x87a09c: r2 = Null
    //     0x87a09c: mov             x2, NULL
    // 0x87a0a0: r1 = Null
    //     0x87a0a0: mov             x1, NULL
    // 0x87a0a4: r4 = 59
    //     0x87a0a4: movz            x4, #0x3b
    // 0x87a0a8: branchIfSmi(r0, 0x87a0b8)
    //     0x87a0a8: tbz             w0, #0, #0x87a0b8
    //     0x87a0ac: nop             
    // 0x87a0b0: r4 = LoadClassIdInstr(r0)
    //     0x87a0b0: ldur            x4, [x0, #-1]
    //     0x87a0b4: ubfx            x4, x4, #0xc, #0x14
    // 0x87a0b8: sub             x4, x4, #0x5d
    // 0x87a0bc: cmp             x4, #1
    // 0x87a0c0: b.ls            #0x87a0d8
    // 0x87a0c4: nop             
    // 0x87a0c8: r8 = String
    //     0x87a0c8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a0cc: r3 = Null
    //     0x87a0cc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11998] Null
    //     0x87a0d0: ldr             x3, [x3, #0x998]
    // 0x87a0d4: r0 = String()
    //     0x87a0d4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a0d8: r0 = LoadStaticField(0xb54)
    //     0x87a0d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a0dc: ldr             x0, [x0, #0x16a8]
    // 0x87a0e0: cmp             w0, NULL
    // 0x87a0e4: b.ne            #0x87a0f4
    // 0x87a0e8: nop             
    // 0x87a0ec: r0 = Null
    //     0x87a0ec: mov             x0, NULL
    // 0x87a0f0: b               #0x87a11c
    // 0x87a0f4: r17 = 351
    //     0x87a0f4: movz            x17, #0x15f
    // 0x87a0f8: ldr             w1, [x0, x17]
    // 0x87a0fc: DecompressPointer r1
    //     0x87a0fc: add             x1, x1, HEAP, lsl #32
    // 0x87a100: r0 = LoadClassIdInstr(r1)
    //     0x87a100: ldur            x0, [x1, #-1]
    //     0x87a104: ubfx            x0, x0, #0xc, #0x14
    // 0x87a108: r2 = "makiMemoryWanderer"
    //     0x87a108: add             x2, PP, #0x11, lsl #12  ; [pp+0x11738] "makiMemoryWanderer"
    //     0x87a10c: ldr             x2, [x2, #0x738]
    // 0x87a110: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a110: sub             lr, x0, #0xb4
    //     0x87a114: ldr             lr, [x21, lr, lsl #3]
    //     0x87a118: blr             lr
    // 0x87a11c: cmp             w0, NULL
    // 0x87a120: b.ne            #0x87a130
    // 0x87a124: nop             
    // 0x87a128: r3 = ""
    //     0x87a128: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a12c: b               #0x87a134
    // 0x87a130: mov             x3, x0
    // 0x87a134: mov             x0, x3
    // 0x87a138: stur            x3, [fp, #-0x10]
    // 0x87a13c: r2 = Null
    //     0x87a13c: mov             x2, NULL
    // 0x87a140: r1 = Null
    //     0x87a140: mov             x1, NULL
    // 0x87a144: r4 = 59
    //     0x87a144: movz            x4, #0x3b
    // 0x87a148: branchIfSmi(r0, 0x87a158)
    //     0x87a148: tbz             w0, #0, #0x87a158
    //     0x87a14c: nop             
    // 0x87a150: r4 = LoadClassIdInstr(r0)
    //     0x87a150: ldur            x4, [x0, #-1]
    //     0x87a154: ubfx            x4, x4, #0xc, #0x14
    // 0x87a158: sub             x4, x4, #0x5d
    // 0x87a15c: cmp             x4, #1
    // 0x87a160: b.ls            #0x87a178
    // 0x87a164: nop             
    // 0x87a168: r8 = String
    //     0x87a168: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a16c: r3 = Null
    //     0x87a16c: add             x3, PP, #0x11, lsl #12  ; [pp+0x119a8] Null
    //     0x87a170: ldr             x3, [x3, #0x9a8]
    // 0x87a174: r0 = String()
    //     0x87a174: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a178: r0 = LoadStaticField(0xb54)
    //     0x87a178: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a17c: ldr             x0, [x0, #0x16a8]
    // 0x87a180: cmp             w0, NULL
    // 0x87a184: b.ne            #0x87a194
    // 0x87a188: nop             
    // 0x87a18c: r0 = Null
    //     0x87a18c: mov             x0, NULL
    // 0x87a190: b               #0x87a1bc
    // 0x87a194: r17 = 347
    //     0x87a194: movz            x17, #0x15b
    // 0x87a198: ldr             w1, [x0, x17]
    // 0x87a19c: DecompressPointer r1
    //     0x87a19c: add             x1, x1, HEAP, lsl #32
    // 0x87a1a0: r0 = LoadClassIdInstr(r1)
    //     0x87a1a0: ldur            x0, [x1, #-1]
    //     0x87a1a4: ubfx            x0, x0, #0xc, #0x14
    // 0x87a1a8: r2 = "makiMemoryFund"
    //     0x87a1a8: add             x2, PP, #0x11, lsl #12  ; [pp+0x119b8] "makiMemoryFund"
    //     0x87a1ac: ldr             x2, [x2, #0x9b8]
    // 0x87a1b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a1b0: sub             lr, x0, #0xb4
    //     0x87a1b4: ldr             lr, [x21, lr, lsl #3]
    //     0x87a1b8: blr             lr
    // 0x87a1bc: cmp             w0, NULL
    // 0x87a1c0: b.ne            #0x87a1d0
    // 0x87a1c4: nop             
    // 0x87a1c8: r4 = 0
    //     0x87a1c8: movz            x4, #0
    // 0x87a1cc: b               #0x87a1d4
    // 0x87a1d0: mov             x4, x0
    // 0x87a1d4: ldur            x3, [fp, #-8]
    // 0x87a1d8: mov             x0, x4
    // 0x87a1dc: stur            x4, [fp, #-0x18]
    // 0x87a1e0: r2 = Null
    //     0x87a1e0: mov             x2, NULL
    // 0x87a1e4: r1 = Null
    //     0x87a1e4: mov             x1, NULL
    // 0x87a1e8: branchIfSmi(r0, 0x87a218)
    //     0x87a1e8: tbz             w0, #0, #0x87a218
    //     0x87a1ec: nop             
    // 0x87a1f0: r4 = LoadClassIdInstr(r0)
    //     0x87a1f0: ldur            x4, [x0, #-1]
    //     0x87a1f4: ubfx            x4, x4, #0xc, #0x14
    // 0x87a1f8: sub             x4, x4, #0x3b
    // 0x87a1fc: cmp             x4, #1
    // 0x87a200: b.ls            #0x87a218
    // 0x87a204: nop             
    // 0x87a208: r8 = int
    //     0x87a208: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87a20c: r3 = Null
    //     0x87a20c: add             x3, PP, #0x11, lsl #12  ; [pp+0x119c0] Null
    //     0x87a210: ldr             x3, [x3, #0x9c0]
    // 0x87a214: r0 = int()
    //     0x87a214: bl              #0x1524294  ; IsType_int_Stub
    // 0x87a218: ldur            x0, [fp, #-8]
    // 0x87a21c: r1 = LoadClassIdInstr(r0)
    //     0x87a21c: ldur            x1, [x0, #-1]
    //     0x87a220: ubfx            x1, x1, #0xc, #0x14
    // 0x87a224: r16 = ""
    //     0x87a224: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a228: stp             x16, x0, [SP]
    // 0x87a22c: mov             x0, x1
    // 0x87a230: mov             lr, x0
    // 0x87a234: ldr             lr, [x21, lr, lsl #3]
    // 0x87a238: blr             lr
    // 0x87a23c: tbnz            w0, #4, #0x87a250
    // 0x87a240: nop             
    // 0x87a244: r0 = "makiMemoryMain1"
    //     0x87a244: add             x0, PP, #0x11, lsl #12  ; [pp+0x119d0] "makiMemoryMain1"
    //     0x87a248: ldr             x0, [x0, #0x9d0]
    // 0x87a24c: b               #0x8838b4
    // 0x87a250: ldur            x0, [fp, #-0x18]
    // 0x87a254: r1 = LoadInt32Instr(r0)
    //     0x87a254: sbfx            x1, x0, #1, #0x1f
    //     0x87a258: tbz             w0, #0, #0x87a264
    //     0x87a25c: nop             
    //     0x87a260: ldur            x1, [x0, #7]
    // 0x87a264: r17 = 20000
    //     0x87a264: movz            x17, #0x4e20
    // 0x87a268: cmp             x1, x17
    // 0x87a26c: b.lt            #0x87a2ac
    // 0x87a270: nop             
    // 0x87a274: ldur            x0, [fp, #-0x10]
    // 0x87a278: r1 = LoadClassIdInstr(r0)
    //     0x87a278: ldur            x1, [x0, #-1]
    //     0x87a27c: ubfx            x1, x1, #0xc, #0x14
    // 0x87a280: r16 = ""
    //     0x87a280: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a284: stp             x16, x0, [SP]
    // 0x87a288: mov             x0, x1
    // 0x87a28c: mov             lr, x0
    // 0x87a290: ldr             lr, [x21, lr, lsl #3]
    // 0x87a294: blr             lr
    // 0x87a298: tbnz            w0, #4, #0x87a2ac
    // 0x87a29c: nop             
    // 0x87a2a0: r0 = "makiMemoryWanderer"
    //     0x87a2a0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11738] "makiMemoryWanderer"
    //     0x87a2a4: ldr             x0, [x0, #0x738]
    // 0x87a2a8: b               #0x8838b4
    // 0x87a2ac: r0 = "end"
    //     0x87a2ac: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87a2b0: b               #0x8838b4
    // 0x87a2b4: r16 = "makiMemoryBankQueue"
    //     0x87a2b4: add             x16, PP, #0x11, lsl #12  ; [pp+0x119d8] "makiMemoryBankQueue"
    //     0x87a2b8: ldr             x16, [x16, #0x9d8]
    // 0x87a2bc: ldur            lr, [fp, #-0x28]
    // 0x87a2c0: stp             lr, x16, [SP]
    // 0x87a2c4: r0 = ==()
    //     0x87a2c4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a2c8: tbnz            w0, #4, #0x87a35c
    // 0x87a2cc: nop             
    // 0x87a2d0: r0 = LoadStaticField(0xb54)
    //     0x87a2d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a2d4: ldr             x0, [x0, #0x16a8]
    // 0x87a2d8: cmp             w0, NULL
    // 0x87a2dc: b.ne            #0x87a2ec
    // 0x87a2e0: nop             
    // 0x87a2e4: r0 = Null
    //     0x87a2e4: mov             x0, NULL
    // 0x87a2e8: b               #0x87a314
    // 0x87a2ec: r17 = 351
    //     0x87a2ec: movz            x17, #0x15f
    // 0x87a2f0: ldr             w1, [x0, x17]
    // 0x87a2f4: DecompressPointer r1
    //     0x87a2f4: add             x1, x1, HEAP, lsl #32
    // 0x87a2f8: r0 = LoadClassIdInstr(r1)
    //     0x87a2f8: ldur            x0, [x1, #-1]
    //     0x87a2fc: ubfx            x0, x0, #0xc, #0x14
    // 0x87a300: r2 = "makiMemoryBankQueue"
    //     0x87a300: add             x2, PP, #0x11, lsl #12  ; [pp+0x119d8] "makiMemoryBankQueue"
    //     0x87a304: ldr             x2, [x2, #0x9d8]
    // 0x87a308: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a308: sub             lr, x0, #0xb4
    //     0x87a30c: ldr             lr, [x21, lr, lsl #3]
    //     0x87a310: blr             lr
    // 0x87a314: cmp             w0, NULL
    // 0x87a318: b.ne            #0x87a328
    // 0x87a31c: nop             
    // 0x87a320: r0 = "longQueue"
    //     0x87a320: add             x0, PP, #0x11, lsl #12  ; [pp+0x119e0] "longQueue"
    //     0x87a324: ldr             x0, [x0, #0x9e0]
    // 0x87a328: stur            x0, [fp, #-8]
    // 0x87a32c: r1 = Null
    //     0x87a32c: mov             x1, NULL
    // 0x87a330: r2 = 4
    //     0x87a330: movz            x2, #0x4
    // 0x87a334: r0 = AllocateArray()
    //     0x87a334: bl              #0x1502560  ; AllocateArrayStub
    // 0x87a338: mov             x1, x0
    // 0x87a33c: ldur            x0, [fp, #-8]
    // 0x87a340: StoreField: r1->field_f = r0
    //     0x87a340: stur            w0, [x1, #0xf]
    // 0x87a344: r17 = "1"
    //     0x87a344: add             x17, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87a348: ldr             x17, [x17, #0x6a0]
    // 0x87a34c: StoreField: r1->field_13 = r17
    //     0x87a34c: stur            w17, [x1, #0x13]
    // 0x87a350: str             x1, [SP]
    // 0x87a354: r0 = _interpolate()
    //     0x87a354: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x87a358: b               #0x8838b4
    // 0x87a35c: r16 = "nazreeMemoryRize"
    //     0x87a35c: add             x16, PP, #0x11, lsl #12  ; [pp+0x119e8] "nazreeMemoryRize"
    //     0x87a360: ldr             x16, [x16, #0x9e8]
    // 0x87a364: ldur            lr, [fp, #-0x28]
    // 0x87a368: stp             lr, x16, [SP]
    // 0x87a36c: r0 = ==()
    //     0x87a36c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a370: tbnz            w0, #4, #0x87a6f4
    // 0x87a374: nop             
    // 0x87a378: r0 = LoadStaticField(0xb54)
    //     0x87a378: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a37c: ldr             x0, [x0, #0x16a8]
    // 0x87a380: cmp             w0, NULL
    // 0x87a384: b.ne            #0x87a394
    // 0x87a388: nop             
    // 0x87a38c: r0 = Null
    //     0x87a38c: mov             x0, NULL
    // 0x87a390: b               #0x87a3bc
    // 0x87a394: r17 = 351
    //     0x87a394: movz            x17, #0x15f
    // 0x87a398: ldr             w1, [x0, x17]
    // 0x87a39c: DecompressPointer r1
    //     0x87a39c: add             x1, x1, HEAP, lsl #32
    // 0x87a3a0: r0 = LoadClassIdInstr(r1)
    //     0x87a3a0: ldur            x0, [x1, #-1]
    //     0x87a3a4: ubfx            x0, x0, #0xc, #0x14
    // 0x87a3a8: r2 = "nazreeMemoryRize"
    //     0x87a3a8: add             x2, PP, #0x11, lsl #12  ; [pp+0x119e8] "nazreeMemoryRize"
    //     0x87a3ac: ldr             x2, [x2, #0x9e8]
    // 0x87a3b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a3b0: sub             lr, x0, #0xb4
    //     0x87a3b4: ldr             lr, [x21, lr, lsl #3]
    //     0x87a3b8: blr             lr
    // 0x87a3bc: cmp             w0, NULL
    // 0x87a3c0: b.ne            #0x87a3d0
    // 0x87a3c4: nop             
    // 0x87a3c8: r3 = ""
    //     0x87a3c8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a3cc: b               #0x87a3d4
    // 0x87a3d0: mov             x3, x0
    // 0x87a3d4: mov             x0, x3
    // 0x87a3d8: stur            x3, [fp, #-8]
    // 0x87a3dc: r2 = Null
    //     0x87a3dc: mov             x2, NULL
    // 0x87a3e0: r1 = Null
    //     0x87a3e0: mov             x1, NULL
    // 0x87a3e4: r4 = 59
    //     0x87a3e4: movz            x4, #0x3b
    // 0x87a3e8: branchIfSmi(r0, 0x87a3f8)
    //     0x87a3e8: tbz             w0, #0, #0x87a3f8
    //     0x87a3ec: nop             
    // 0x87a3f0: r4 = LoadClassIdInstr(r0)
    //     0x87a3f0: ldur            x4, [x0, #-1]
    //     0x87a3f4: ubfx            x4, x4, #0xc, #0x14
    // 0x87a3f8: sub             x4, x4, #0x5d
    // 0x87a3fc: cmp             x4, #1
    // 0x87a400: b.ls            #0x87a418
    // 0x87a404: nop             
    // 0x87a408: r8 = String
    //     0x87a408: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a40c: r3 = Null
    //     0x87a40c: add             x3, PP, #0x11, lsl #12  ; [pp+0x119f0] Null
    //     0x87a410: ldr             x3, [x3, #0x9f0]
    // 0x87a414: r0 = String()
    //     0x87a414: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a418: r1 = Null
    //     0x87a418: mov             x1, NULL
    // 0x87a41c: r0 = Random()
    //     0x87a41c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x87a420: mov             x1, x0
    // 0x87a424: r2 = 100
    //     0x87a424: movz            x2, #0x64
    // 0x87a428: r0 = nextInt()
    //     0x87a428: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x87a42c: mov             x3, x0
    // 0x87a430: stur            x3, [fp, #-0x38]
    // 0x87a434: r0 = LoadStaticField(0xb54)
    //     0x87a434: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a438: ldr             x0, [x0, #0x16a8]
    // 0x87a43c: cmp             w0, NULL
    // 0x87a440: b.ne            #0x87a450
    // 0x87a444: nop             
    // 0x87a448: r0 = Null
    //     0x87a448: mov             x0, NULL
    // 0x87a44c: b               #0x87a478
    // 0x87a450: r17 = 347
    //     0x87a450: movz            x17, #0x15b
    // 0x87a454: ldr             w1, [x0, x17]
    // 0x87a458: DecompressPointer r1
    //     0x87a458: add             x1, x1, HEAP, lsl #32
    // 0x87a45c: r0 = LoadClassIdInstr(r1)
    //     0x87a45c: ldur            x0, [x1, #-1]
    //     0x87a460: ubfx            x0, x0, #0xc, #0x14
    // 0x87a464: r2 = "nazreeMaxCompletion"
    //     0x87a464: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a00] "nazreeMaxCompletion"
    //     0x87a468: ldr             x2, [x2, #0xa00]
    // 0x87a46c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a46c: sub             lr, x0, #0xb4
    //     0x87a470: ldr             lr, [x21, lr, lsl #3]
    //     0x87a474: blr             lr
    // 0x87a478: cmp             w0, NULL
    // 0x87a47c: b.ne            #0x87a48c
    // 0x87a480: nop             
    // 0x87a484: r3 = 0
    //     0x87a484: movz            x3, #0
    // 0x87a488: b               #0x87a490
    // 0x87a48c: mov             x3, x0
    // 0x87a490: mov             x0, x3
    // 0x87a494: stur            x3, [fp, #-0x10]
    // 0x87a498: r2 = Null
    //     0x87a498: mov             x2, NULL
    // 0x87a49c: r1 = Null
    //     0x87a49c: mov             x1, NULL
    // 0x87a4a0: branchIfSmi(r0, 0x87a4d0)
    //     0x87a4a0: tbz             w0, #0, #0x87a4d0
    //     0x87a4a4: nop             
    // 0x87a4a8: r4 = LoadClassIdInstr(r0)
    //     0x87a4a8: ldur            x4, [x0, #-1]
    //     0x87a4ac: ubfx            x4, x4, #0xc, #0x14
    // 0x87a4b0: sub             x4, x4, #0x3b
    // 0x87a4b4: cmp             x4, #1
    // 0x87a4b8: b.ls            #0x87a4d0
    // 0x87a4bc: nop             
    // 0x87a4c0: r8 = int
    //     0x87a4c0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87a4c4: r3 = Null
    //     0x87a4c4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a08] Null
    //     0x87a4c8: ldr             x3, [x3, #0xa08]
    // 0x87a4cc: r0 = int()
    //     0x87a4cc: bl              #0x1524294  ; IsType_int_Stub
    // 0x87a4d0: r0 = LoadStaticField(0xb54)
    //     0x87a4d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a4d4: ldr             x0, [x0, #0x16a8]
    // 0x87a4d8: cmp             w0, NULL
    // 0x87a4dc: b.ne            #0x87a4ec
    // 0x87a4e0: nop             
    // 0x87a4e4: r0 = Null
    //     0x87a4e4: mov             x0, NULL
    // 0x87a4e8: b               #0x87a514
    // 0x87a4ec: r17 = 331
    //     0x87a4ec: movz            x17, #0x14b
    // 0x87a4f0: ldr             w1, [x0, x17]
    // 0x87a4f4: DecompressPointer r1
    //     0x87a4f4: add             x1, x1, HEAP, lsl #32
    // 0x87a4f8: r0 = LoadClassIdInstr(r1)
    //     0x87a4f8: ldur            x0, [x1, #-1]
    //     0x87a4fc: ubfx            x0, x0, #0xc, #0x14
    // 0x87a500: r2 = "memory"
    //     0x87a500: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x87a504: ldr             x2, [x2, #0xa18]
    // 0x87a508: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a508: sub             lr, x0, #0xb4
    //     0x87a50c: ldr             lr, [x21, lr, lsl #3]
    //     0x87a510: blr             lr
    // 0x87a514: cmp             w0, NULL
    // 0x87a518: b.ne            #0x87a534
    // 0x87a51c: nop             
    // 0x87a520: r1 = Null
    //     0x87a520: mov             x1, NULL
    // 0x87a524: r2 = 0
    //     0x87a524: movz            x2, #0
    // 0x87a528: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x87a528: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x87a52c: mov             x3, x0
    // 0x87a530: b               #0x87a538
    // 0x87a534: mov             x3, x0
    // 0x87a538: mov             x0, x3
    // 0x87a53c: stur            x3, [fp, #-0x18]
    // 0x87a540: r2 = Null
    //     0x87a540: mov             x2, NULL
    // 0x87a544: r1 = Null
    //     0x87a544: mov             x1, NULL
    // 0x87a548: r4 = 59
    //     0x87a548: movz            x4, #0x3b
    // 0x87a54c: branchIfSmi(r0, 0x87a55c)
    //     0x87a54c: tbz             w0, #0, #0x87a55c
    //     0x87a550: nop             
    // 0x87a554: r4 = LoadClassIdInstr(r0)
    //     0x87a554: ldur            x4, [x0, #-1]
    //     0x87a558: ubfx            x4, x4, #0xc, #0x14
    // 0x87a55c: cmp             x4, #0xcdb
    // 0x87a560: b.eq            #0x87a57c
    // 0x87a564: nop             
    // 0x87a568: r8 = Timestamp
    //     0x87a568: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x87a56c: ldr             x8, [x8, #0xa30]
    // 0x87a570: r3 = Null
    //     0x87a570: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a20] Null
    //     0x87a574: ldr             x3, [x3, #0xa20]
    // 0x87a578: r0 = Timestamp()
    //     0x87a578: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x87a57c: r0 = LoadStaticField(0xb54)
    //     0x87a57c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a580: ldr             x0, [x0, #0x16a8]
    // 0x87a584: cmp             w0, NULL
    // 0x87a588: b.ne            #0x87a598
    // 0x87a58c: nop             
    // 0x87a590: r0 = Null
    //     0x87a590: mov             x0, NULL
    // 0x87a594: b               #0x87a5c0
    // 0x87a598: r17 = 347
    //     0x87a598: movz            x17, #0x15b
    // 0x87a59c: ldr             w1, [x0, x17]
    // 0x87a5a0: DecompressPointer r1
    //     0x87a5a0: add             x1, x1, HEAP, lsl #32
    // 0x87a5a4: r0 = LoadClassIdInstr(r1)
    //     0x87a5a4: ldur            x0, [x1, #-1]
    //     0x87a5a8: ubfx            x0, x0, #0xc, #0x14
    // 0x87a5ac: r2 = "memoryTimerReduce"
    //     0x87a5ac: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x87a5b0: ldr             x2, [x2, #0xa30]
    // 0x87a5b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a5b4: sub             lr, x0, #0xb4
    //     0x87a5b8: ldr             lr, [x21, lr, lsl #3]
    //     0x87a5bc: blr             lr
    // 0x87a5c0: cmp             w0, NULL
    // 0x87a5c4: b.ne            #0x87a5d4
    // 0x87a5c8: nop             
    // 0x87a5cc: r4 = 0
    //     0x87a5cc: movz            x4, #0
    // 0x87a5d0: b               #0x87a5d8
    // 0x87a5d4: mov             x4, x0
    // 0x87a5d8: ldur            x3, [fp, #-8]
    // 0x87a5dc: mov             x0, x4
    // 0x87a5e0: stur            x4, [fp, #-0x20]
    // 0x87a5e4: r2 = Null
    //     0x87a5e4: mov             x2, NULL
    // 0x87a5e8: r1 = Null
    //     0x87a5e8: mov             x1, NULL
    // 0x87a5ec: branchIfSmi(r0, 0x87a61c)
    //     0x87a5ec: tbz             w0, #0, #0x87a61c
    //     0x87a5f0: nop             
    // 0x87a5f4: r4 = LoadClassIdInstr(r0)
    //     0x87a5f4: ldur            x4, [x0, #-1]
    //     0x87a5f8: ubfx            x4, x4, #0xc, #0x14
    // 0x87a5fc: sub             x4, x4, #0x3b
    // 0x87a600: cmp             x4, #1
    // 0x87a604: b.ls            #0x87a61c
    // 0x87a608: nop             
    // 0x87a60c: r8 = int
    //     0x87a60c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87a610: r3 = Null
    //     0x87a610: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a38] Null
    //     0x87a614: ldr             x3, [x3, #0xa38]
    // 0x87a618: r0 = int()
    //     0x87a618: bl              #0x1524294  ; IsType_int_Stub
    // 0x87a61c: ldur            x0, [fp, #-0x20]
    // 0x87a620: r1 = LoadInt32Instr(r0)
    //     0x87a620: sbfx            x1, x0, #1, #0x1f
    //     0x87a624: tbz             w0, #0, #0x87a630
    //     0x87a628: nop             
    //     0x87a62c: ldur            x1, [x0, #7]
    // 0x87a630: lsl             x0, x1, #1
    // 0x87a634: r1 = 30
    //     0x87a634: movz            x1, #0x1e
    // 0x87a638: sub             x2, x1, x0
    // 0x87a63c: stur            x2, [fp, #-0x80]
    // 0x87a640: r0 = getTrueDateTime()
    //     0x87a640: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x87a644: ldur            x1, [fp, #-0x18]
    // 0x87a648: stur            x0, [fp, #-0x18]
    // 0x87a64c: r0 = toDate()
    //     0x87a64c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x87a650: ldur            x1, [fp, #-0x18]
    // 0x87a654: mov             x2, x0
    // 0x87a658: r0 = difference()
    //     0x87a658: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x87a65c: mov             x1, x0
    // 0x87a660: r0 = inMinutes()
    //     0x87a660: bl              #0x8a6d94  ; [dart:core] Duration::inMinutes
    // 0x87a664: mov             x1, x0
    // 0x87a668: ldur            x0, [fp, #-0x80]
    // 0x87a66c: sub             x2, x0, x1
    // 0x87a670: ldur            x0, [fp, #-8]
    // 0x87a674: stur            x2, [fp, #-0x88]
    // 0x87a678: r1 = LoadClassIdInstr(r0)
    //     0x87a678: ldur            x1, [x0, #-1]
    //     0x87a67c: ubfx            x1, x1, #0xc, #0x14
    // 0x87a680: r16 = ""
    //     0x87a680: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a684: stp             x16, x0, [SP]
    // 0x87a688: mov             x0, x1
    // 0x87a68c: mov             lr, x0
    // 0x87a690: ldr             lr, [x21, lr, lsl #3]
    // 0x87a694: blr             lr
    // 0x87a698: tbnz            w0, #4, #0x87a6ec
    // 0x87a69c: nop             
    // 0x87a6a0: ldur            x0, [fp, #-0x38]
    // 0x87a6a4: cmp             x0, #0x19
    // 0x87a6a8: b.gt            #0x87a6ec
    // 0x87a6ac: nop             
    // 0x87a6b0: ldur            x0, [fp, #-0x10]
    // 0x87a6b4: r1 = LoadInt32Instr(r0)
    //     0x87a6b4: sbfx            x1, x0, #1, #0x1f
    //     0x87a6b8: tbz             w0, #0, #0x87a6c4
    //     0x87a6bc: nop             
    //     0x87a6c0: ldur            x1, [x0, #7]
    // 0x87a6c4: cmp             x1, #0x3c
    // 0x87a6c8: b.lt            #0x87a6ec
    // 0x87a6cc: nop             
    // 0x87a6d0: ldur            x0, [fp, #-0x88]
    // 0x87a6d4: cmp             x0, #0x19
    // 0x87a6d8: b.lt            #0x87a6ec
    // 0x87a6dc: nop             
    // 0x87a6e0: r0 = "nazreeMemoryRize"
    //     0x87a6e0: add             x0, PP, #0x11, lsl #12  ; [pp+0x119e8] "nazreeMemoryRize"
    //     0x87a6e4: ldr             x0, [x0, #0x9e8]
    // 0x87a6e8: b               #0x8838b4
    // 0x87a6ec: r0 = "end"
    //     0x87a6ec: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87a6f0: b               #0x8838b4
    // 0x87a6f4: r16 = "nazreeMemoryEvidence1"
    //     0x87a6f4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11a48] "nazreeMemoryEvidence1"
    //     0x87a6f8: ldr             x16, [x16, #0xa48]
    // 0x87a6fc: ldur            lr, [fp, #-0x28]
    // 0x87a700: stp             lr, x16, [SP]
    // 0x87a704: r0 = ==()
    //     0x87a704: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a708: tbnz            w0, #4, #0x87a828
    // 0x87a70c: nop             
    // 0x87a710: r0 = LoadStaticField(0xb54)
    //     0x87a710: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a714: ldr             x0, [x0, #0x16a8]
    // 0x87a718: cmp             w0, NULL
    // 0x87a71c: b.ne            #0x87a72c
    // 0x87a720: nop             
    // 0x87a724: r0 = Null
    //     0x87a724: mov             x0, NULL
    // 0x87a728: b               #0x87a754
    // 0x87a72c: r17 = 351
    //     0x87a72c: movz            x17, #0x15f
    // 0x87a730: ldr             w1, [x0, x17]
    // 0x87a734: DecompressPointer r1
    //     0x87a734: add             x1, x1, HEAP, lsl #32
    // 0x87a738: r0 = LoadClassIdInstr(r1)
    //     0x87a738: ldur            x0, [x1, #-1]
    //     0x87a73c: ubfx            x0, x0, #0xc, #0x14
    // 0x87a740: r2 = "nazreeMemoryEvidence1"
    //     0x87a740: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a48] "nazreeMemoryEvidence1"
    //     0x87a744: ldr             x2, [x2, #0xa48]
    // 0x87a748: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a748: sub             lr, x0, #0xb4
    //     0x87a74c: ldr             lr, [x21, lr, lsl #3]
    //     0x87a750: blr             lr
    // 0x87a754: cmp             w0, NULL
    // 0x87a758: b.ne            #0x87a768
    // 0x87a75c: nop             
    // 0x87a760: r3 = ""
    //     0x87a760: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a764: b               #0x87a76c
    // 0x87a768: mov             x3, x0
    // 0x87a76c: mov             x0, x3
    // 0x87a770: stur            x3, [fp, #-8]
    // 0x87a774: r2 = Null
    //     0x87a774: mov             x2, NULL
    // 0x87a778: r1 = Null
    //     0x87a778: mov             x1, NULL
    // 0x87a77c: r4 = 59
    //     0x87a77c: movz            x4, #0x3b
    // 0x87a780: branchIfSmi(r0, 0x87a790)
    //     0x87a780: tbz             w0, #0, #0x87a790
    //     0x87a784: nop             
    // 0x87a788: r4 = LoadClassIdInstr(r0)
    //     0x87a788: ldur            x4, [x0, #-1]
    //     0x87a78c: ubfx            x4, x4, #0xc, #0x14
    // 0x87a790: sub             x4, x4, #0x5d
    // 0x87a794: cmp             x4, #1
    // 0x87a798: b.ls            #0x87a7b0
    // 0x87a79c: nop             
    // 0x87a7a0: r8 = String
    //     0x87a7a0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a7a4: r3 = Null
    //     0x87a7a4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a50] Null
    //     0x87a7a8: ldr             x3, [x3, #0xa50]
    // 0x87a7ac: r0 = String()
    //     0x87a7ac: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a7b0: ldur            x1, [fp, #-8]
    // 0x87a7b4: r0 = LoadClassIdInstr(r1)
    //     0x87a7b4: ldur            x0, [x1, #-1]
    //     0x87a7b8: ubfx            x0, x0, #0xc, #0x14
    // 0x87a7bc: r16 = ""
    //     0x87a7bc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a7c0: stp             x16, x1, [SP]
    // 0x87a7c4: mov             lr, x0
    // 0x87a7c8: ldr             lr, [x21, lr, lsl #3]
    // 0x87a7cc: blr             lr
    // 0x87a7d0: tbnz            w0, #4, #0x87a7e4
    // 0x87a7d4: nop             
    // 0x87a7d8: r0 = "nazreeMemoryEvidence1"
    //     0x87a7d8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11a48] "nazreeMemoryEvidence1"
    //     0x87a7dc: ldr             x0, [x0, #0xa48]
    // 0x87a7e0: b               #0x8838b4
    // 0x87a7e4: ldur            x0, [fp, #-8]
    // 0x87a7e8: r1 = LoadClassIdInstr(r0)
    //     0x87a7e8: ldur            x1, [x0, #-1]
    //     0x87a7ec: ubfx            x1, x1, #0xc, #0x14
    // 0x87a7f0: r16 = "progress"
    //     0x87a7f0: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87a7f4: stp             x16, x0, [SP]
    // 0x87a7f8: mov             x0, x1
    // 0x87a7fc: mov             lr, x0
    // 0x87a800: ldr             lr, [x21, lr, lsl #3]
    // 0x87a804: blr             lr
    // 0x87a808: tbnz            w0, #4, #0x87a81c
    // 0x87a80c: nop             
    // 0x87a810: r0 = "nazreeMemoryEvidence1continue"
    //     0x87a810: add             x0, PP, #0x11, lsl #12  ; [pp+0x11a60] "nazreeMemoryEvidence1continue"
    //     0x87a814: ldr             x0, [x0, #0xa60]
    // 0x87a818: b               #0x8838b4
    // 0x87a81c: r0 = "complete"
    //     0x87a81c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87a820: ldr             x0, [x0, #0x590]
    // 0x87a824: b               #0x8838b4
    // 0x87a828: r16 = "nazreeMemoryFloor2"
    //     0x87a828: add             x16, PP, #0x11, lsl #12  ; [pp+0x11a68] "nazreeMemoryFloor2"
    //     0x87a82c: ldr             x16, [x16, #0xa68]
    // 0x87a830: ldur            lr, [fp, #-0x28]
    // 0x87a834: stp             lr, x16, [SP]
    // 0x87a838: r0 = ==()
    //     0x87a838: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a83c: tbnz            w0, #4, #0x87a928
    // 0x87a840: nop             
    // 0x87a844: r0 = LoadStaticField(0xb54)
    //     0x87a844: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a848: ldr             x0, [x0, #0x16a8]
    // 0x87a84c: cmp             w0, NULL
    // 0x87a850: b.ne            #0x87a860
    // 0x87a854: nop             
    // 0x87a858: r0 = Null
    //     0x87a858: mov             x0, NULL
    // 0x87a85c: b               #0x87a888
    // 0x87a860: r17 = 351
    //     0x87a860: movz            x17, #0x15f
    // 0x87a864: ldr             w1, [x0, x17]
    // 0x87a868: DecompressPointer r1
    //     0x87a868: add             x1, x1, HEAP, lsl #32
    // 0x87a86c: r0 = LoadClassIdInstr(r1)
    //     0x87a86c: ldur            x0, [x1, #-1]
    //     0x87a870: ubfx            x0, x0, #0xc, #0x14
    // 0x87a874: r2 = "nazreeMemoryFloorMaster1"
    //     0x87a874: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a70] "nazreeMemoryFloorMaster1"
    //     0x87a878: ldr             x2, [x2, #0xa70]
    // 0x87a87c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a87c: sub             lr, x0, #0xb4
    //     0x87a880: ldr             lr, [x21, lr, lsl #3]
    //     0x87a884: blr             lr
    // 0x87a888: cmp             w0, NULL
    // 0x87a88c: b.ne            #0x87a89c
    // 0x87a890: nop             
    // 0x87a894: r3 = ""
    //     0x87a894: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a898: b               #0x87a8a0
    // 0x87a89c: mov             x3, x0
    // 0x87a8a0: mov             x0, x3
    // 0x87a8a4: stur            x3, [fp, #-8]
    // 0x87a8a8: r2 = Null
    //     0x87a8a8: mov             x2, NULL
    // 0x87a8ac: r1 = Null
    //     0x87a8ac: mov             x1, NULL
    // 0x87a8b0: r4 = 59
    //     0x87a8b0: movz            x4, #0x3b
    // 0x87a8b4: branchIfSmi(r0, 0x87a8c4)
    //     0x87a8b4: tbz             w0, #0, #0x87a8c4
    //     0x87a8b8: nop             
    // 0x87a8bc: r4 = LoadClassIdInstr(r0)
    //     0x87a8bc: ldur            x4, [x0, #-1]
    //     0x87a8c0: ubfx            x4, x4, #0xc, #0x14
    // 0x87a8c4: sub             x4, x4, #0x5d
    // 0x87a8c8: cmp             x4, #1
    // 0x87a8cc: b.ls            #0x87a8e4
    // 0x87a8d0: nop             
    // 0x87a8d4: r8 = String
    //     0x87a8d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a8d8: r3 = Null
    //     0x87a8d8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a78] Null
    //     0x87a8dc: ldr             x3, [x3, #0xa78]
    // 0x87a8e0: r0 = String()
    //     0x87a8e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a8e4: ldur            x0, [fp, #-8]
    // 0x87a8e8: r1 = LoadClassIdInstr(r0)
    //     0x87a8e8: ldur            x1, [x0, #-1]
    //     0x87a8ec: ubfx            x1, x1, #0xc, #0x14
    // 0x87a8f0: r16 = ""
    //     0x87a8f0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a8f4: stp             x16, x0, [SP]
    // 0x87a8f8: mov             x0, x1
    // 0x87a8fc: mov             lr, x0
    // 0x87a900: ldr             lr, [x21, lr, lsl #3]
    // 0x87a904: blr             lr
    // 0x87a908: tbnz            w0, #4, #0x87a91c
    // 0x87a90c: nop             
    // 0x87a910: r0 = "block"
    //     0x87a910: add             x0, PP, #0x10, lsl #12  ; [pp+0x10040] "block"
    //     0x87a914: ldr             x0, [x0, #0x40]
    // 0x87a918: b               #0x8838b4
    // 0x87a91c: r0 = "nazreeMemoryFloor2"
    //     0x87a91c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11a68] "nazreeMemoryFloor2"
    //     0x87a920: ldr             x0, [x0, #0xa68]
    // 0x87a924: b               #0x8838b4
    // 0x87a928: r16 = "nazreeMemoryMainStory"
    //     0x87a928: add             x16, PP, #0x11, lsl #12  ; [pp+0x11a88] "nazreeMemoryMainStory"
    //     0x87a92c: ldr             x16, [x16, #0xa88]
    // 0x87a930: ldur            lr, [fp, #-0x28]
    // 0x87a934: stp             lr, x16, [SP]
    // 0x87a938: r0 = ==()
    //     0x87a938: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87a93c: tbnz            w0, #4, #0x87aa24
    // 0x87a940: nop             
    // 0x87a944: r0 = LoadStaticField(0xb54)
    //     0x87a944: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87a948: ldr             x0, [x0, #0x16a8]
    // 0x87a94c: cmp             w0, NULL
    // 0x87a950: b.ne            #0x87a960
    // 0x87a954: nop             
    // 0x87a958: r0 = Null
    //     0x87a958: mov             x0, NULL
    // 0x87a95c: b               #0x87a988
    // 0x87a960: r17 = 351
    //     0x87a960: movz            x17, #0x15f
    // 0x87a964: ldr             w1, [x0, x17]
    // 0x87a968: DecompressPointer r1
    //     0x87a968: add             x1, x1, HEAP, lsl #32
    // 0x87a96c: r0 = LoadClassIdInstr(r1)
    //     0x87a96c: ldur            x0, [x1, #-1]
    //     0x87a970: ubfx            x0, x0, #0xc, #0x14
    // 0x87a974: r2 = "nazreeMemoryMain"
    //     0x87a974: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a90] "nazreeMemoryMain"
    //     0x87a978: ldr             x2, [x2, #0xa90]
    // 0x87a97c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87a97c: sub             lr, x0, #0xb4
    //     0x87a980: ldr             lr, [x21, lr, lsl #3]
    //     0x87a984: blr             lr
    // 0x87a988: cmp             w0, NULL
    // 0x87a98c: b.ne            #0x87a99c
    // 0x87a990: nop             
    // 0x87a994: r3 = ""
    //     0x87a994: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a998: b               #0x87a9a0
    // 0x87a99c: mov             x3, x0
    // 0x87a9a0: mov             x0, x3
    // 0x87a9a4: stur            x3, [fp, #-8]
    // 0x87a9a8: r2 = Null
    //     0x87a9a8: mov             x2, NULL
    // 0x87a9ac: r1 = Null
    //     0x87a9ac: mov             x1, NULL
    // 0x87a9b0: r4 = 59
    //     0x87a9b0: movz            x4, #0x3b
    // 0x87a9b4: branchIfSmi(r0, 0x87a9c4)
    //     0x87a9b4: tbz             w0, #0, #0x87a9c4
    //     0x87a9b8: nop             
    // 0x87a9bc: r4 = LoadClassIdInstr(r0)
    //     0x87a9bc: ldur            x4, [x0, #-1]
    //     0x87a9c0: ubfx            x4, x4, #0xc, #0x14
    // 0x87a9c4: sub             x4, x4, #0x5d
    // 0x87a9c8: cmp             x4, #1
    // 0x87a9cc: b.ls            #0x87a9e4
    // 0x87a9d0: nop             
    // 0x87a9d4: r8 = String
    //     0x87a9d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87a9d8: r3 = Null
    //     0x87a9d8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11a98] Null
    //     0x87a9dc: ldr             x3, [x3, #0xa98]
    // 0x87a9e0: r0 = String()
    //     0x87a9e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87a9e4: ldur            x0, [fp, #-8]
    // 0x87a9e8: r1 = LoadClassIdInstr(r0)
    //     0x87a9e8: ldur            x1, [x0, #-1]
    //     0x87a9ec: ubfx            x1, x1, #0xc, #0x14
    // 0x87a9f0: r16 = ""
    //     0x87a9f0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87a9f4: stp             x16, x0, [SP]
    // 0x87a9f8: mov             x0, x1
    // 0x87a9fc: mov             lr, x0
    // 0x87aa00: ldr             lr, [x21, lr, lsl #3]
    // 0x87aa04: blr             lr
    // 0x87aa08: tbnz            w0, #4, #0x87aa1c
    // 0x87aa0c: nop             
    // 0x87aa10: r0 = "nazreeMemoryMain1"
    //     0x87aa10: add             x0, PP, #0x11, lsl #12  ; [pp+0x11aa8] "nazreeMemoryMain1"
    //     0x87aa14: ldr             x0, [x0, #0xaa8]
    // 0x87aa18: b               #0x8838b4
    // 0x87aa1c: r0 = "end"
    //     0x87aa1c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87aa20: b               #0x8838b4
    // 0x87aa24: r16 = "nazreeMemoryFloorMaster1"
    //     0x87aa24: add             x16, PP, #0x11, lsl #12  ; [pp+0x11a70] "nazreeMemoryFloorMaster1"
    //     0x87aa28: ldr             x16, [x16, #0xa70]
    // 0x87aa2c: ldur            lr, [fp, #-0x28]
    // 0x87aa30: stp             lr, x16, [SP]
    // 0x87aa34: r0 = ==()
    //     0x87aa34: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87aa38: tbnz            w0, #4, #0x87ab24
    // 0x87aa3c: nop             
    // 0x87aa40: r0 = LoadStaticField(0xb54)
    //     0x87aa40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87aa44: ldr             x0, [x0, #0x16a8]
    // 0x87aa48: cmp             w0, NULL
    // 0x87aa4c: b.ne            #0x87aa5c
    // 0x87aa50: nop             
    // 0x87aa54: r0 = Null
    //     0x87aa54: mov             x0, NULL
    // 0x87aa58: b               #0x87aa84
    // 0x87aa5c: r17 = 351
    //     0x87aa5c: movz            x17, #0x15f
    // 0x87aa60: ldr             w1, [x0, x17]
    // 0x87aa64: DecompressPointer r1
    //     0x87aa64: add             x1, x1, HEAP, lsl #32
    // 0x87aa68: r0 = LoadClassIdInstr(r1)
    //     0x87aa68: ldur            x0, [x1, #-1]
    //     0x87aa6c: ubfx            x0, x0, #0xc, #0x14
    // 0x87aa70: r2 = "nazreeMemoryFloorMaster1"
    //     0x87aa70: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a70] "nazreeMemoryFloorMaster1"
    //     0x87aa74: ldr             x2, [x2, #0xa70]
    // 0x87aa78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87aa78: sub             lr, x0, #0xb4
    //     0x87aa7c: ldr             lr, [x21, lr, lsl #3]
    //     0x87aa80: blr             lr
    // 0x87aa84: cmp             w0, NULL
    // 0x87aa88: b.ne            #0x87aa98
    // 0x87aa8c: nop             
    // 0x87aa90: r3 = ""
    //     0x87aa90: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87aa94: b               #0x87aa9c
    // 0x87aa98: mov             x3, x0
    // 0x87aa9c: mov             x0, x3
    // 0x87aaa0: stur            x3, [fp, #-8]
    // 0x87aaa4: r2 = Null
    //     0x87aaa4: mov             x2, NULL
    // 0x87aaa8: r1 = Null
    //     0x87aaa8: mov             x1, NULL
    // 0x87aaac: r4 = 59
    //     0x87aaac: movz            x4, #0x3b
    // 0x87aab0: branchIfSmi(r0, 0x87aac0)
    //     0x87aab0: tbz             w0, #0, #0x87aac0
    //     0x87aab4: nop             
    // 0x87aab8: r4 = LoadClassIdInstr(r0)
    //     0x87aab8: ldur            x4, [x0, #-1]
    //     0x87aabc: ubfx            x4, x4, #0xc, #0x14
    // 0x87aac0: sub             x4, x4, #0x5d
    // 0x87aac4: cmp             x4, #1
    // 0x87aac8: b.ls            #0x87aae0
    // 0x87aacc: nop             
    // 0x87aad0: r8 = String
    //     0x87aad0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87aad4: r3 = Null
    //     0x87aad4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ab0] Null
    //     0x87aad8: ldr             x3, [x3, #0xab0]
    // 0x87aadc: r0 = String()
    //     0x87aadc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87aae0: ldur            x0, [fp, #-8]
    // 0x87aae4: r1 = LoadClassIdInstr(r0)
    //     0x87aae4: ldur            x1, [x0, #-1]
    //     0x87aae8: ubfx            x1, x1, #0xc, #0x14
    // 0x87aaec: r16 = ""
    //     0x87aaec: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87aaf0: stp             x16, x0, [SP]
    // 0x87aaf4: mov             x0, x1
    // 0x87aaf8: mov             lr, x0
    // 0x87aafc: ldr             lr, [x21, lr, lsl #3]
    // 0x87ab00: blr             lr
    // 0x87ab04: tbnz            w0, #4, #0x87ab18
    // 0x87ab08: nop             
    // 0x87ab0c: r0 = "nazreeMemoryFloorMaster1"
    //     0x87ab0c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11a70] "nazreeMemoryFloorMaster1"
    //     0x87ab10: ldr             x0, [x0, #0xa70]
    // 0x87ab14: b               #0x8838b4
    // 0x87ab18: r0 = "complete"
    //     0x87ab18: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87ab1c: ldr             x0, [x0, #0x590]
    // 0x87ab20: b               #0x8838b4
    // 0x87ab24: r16 = "bribeFMCheck"
    //     0x87ab24: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ac0] "bribeFMCheck"
    //     0x87ab28: ldr             x16, [x16, #0xac0]
    // 0x87ab2c: ldur            lr, [fp, #-0x28]
    // 0x87ab30: stp             lr, x16, [SP]
    // 0x87ab34: r0 = ==()
    //     0x87ab34: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ab38: tbnz            w0, #4, #0x87ac14
    // 0x87ab3c: nop             
    // 0x87ab40: r0 = LoadStaticField(0xb54)
    //     0x87ab40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ab44: ldr             x0, [x0, #0x16a8]
    // 0x87ab48: cmp             w0, NULL
    // 0x87ab4c: b.ne            #0x87ab5c
    // 0x87ab50: nop             
    // 0x87ab54: r0 = Null
    //     0x87ab54: mov             x0, NULL
    // 0x87ab58: b               #0x87ab84
    // 0x87ab5c: r17 = 347
    //     0x87ab5c: movz            x17, #0x15b
    // 0x87ab60: ldr             w1, [x0, x17]
    // 0x87ab64: DecompressPointer r1
    //     0x87ab64: add             x1, x1, HEAP, lsl #32
    // 0x87ab68: r0 = LoadClassIdInstr(r1)
    //     0x87ab68: ldur            x0, [x1, #-1]
    //     0x87ab6c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ab70: r2 = "token"
    //     0x87ab70: add             x2, PP, #0x10, lsl #12  ; [pp+0x105c0] "token"
    //     0x87ab74: ldr             x2, [x2, #0x5c0]
    // 0x87ab78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ab78: sub             lr, x0, #0xb4
    //     0x87ab7c: ldr             lr, [x21, lr, lsl #3]
    //     0x87ab80: blr             lr
    // 0x87ab84: cmp             w0, NULL
    // 0x87ab88: b.ne            #0x87ab98
    // 0x87ab8c: nop             
    // 0x87ab90: r3 = 0
    //     0x87ab90: movz            x3, #0
    // 0x87ab94: b               #0x87ab9c
    // 0x87ab98: mov             x3, x0
    // 0x87ab9c: mov             x0, x3
    // 0x87aba0: stur            x3, [fp, #-8]
    // 0x87aba4: r2 = Null
    //     0x87aba4: mov             x2, NULL
    // 0x87aba8: r1 = Null
    //     0x87aba8: mov             x1, NULL
    // 0x87abac: branchIfSmi(r0, 0x87abdc)
    //     0x87abac: tbz             w0, #0, #0x87abdc
    //     0x87abb0: nop             
    // 0x87abb4: r4 = LoadClassIdInstr(r0)
    //     0x87abb4: ldur            x4, [x0, #-1]
    //     0x87abb8: ubfx            x4, x4, #0xc, #0x14
    // 0x87abbc: sub             x4, x4, #0x3b
    // 0x87abc0: cmp             x4, #1
    // 0x87abc4: b.ls            #0x87abdc
    // 0x87abc8: nop             
    // 0x87abcc: r8 = int
    //     0x87abcc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87abd0: r3 = Null
    //     0x87abd0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ac8] Null
    //     0x87abd4: ldr             x3, [x3, #0xac8]
    // 0x87abd8: r0 = int()
    //     0x87abd8: bl              #0x1524294  ; IsType_int_Stub
    // 0x87abdc: ldur            x0, [fp, #-8]
    // 0x87abe0: r1 = LoadInt32Instr(r0)
    //     0x87abe0: sbfx            x1, x0, #1, #0x1f
    //     0x87abe4: tbz             w0, #0, #0x87abf0
    //     0x87abe8: nop             
    //     0x87abec: ldur            x1, [x0, #7]
    // 0x87abf0: cmp             x1, #0x64
    // 0x87abf4: b.lt            #0x87ac08
    // 0x87abf8: nop             
    // 0x87abfc: r0 = "bribeFMCheck"
    //     0x87abfc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ac0] "bribeFMCheck"
    //     0x87ac00: ldr             x0, [x0, #0xac0]
    // 0x87ac04: b               #0x8838b4
    // 0x87ac08: r0 = "noToken"
    //     0x87ac08: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ad8] "noToken"
    //     0x87ac0c: ldr             x0, [x0, #0xad8]
    // 0x87ac10: b               #0x8838b4
    // 0x87ac14: r16 = "nazreeMemoryFloor3"
    //     0x87ac14: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ae0] "nazreeMemoryFloor3"
    //     0x87ac18: ldr             x16, [x16, #0xae0]
    // 0x87ac1c: ldur            lr, [fp, #-0x28]
    // 0x87ac20: stp             lr, x16, [SP]
    // 0x87ac24: r0 = ==()
    //     0x87ac24: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ac28: tbnz            w0, #4, #0x87ad14
    // 0x87ac2c: nop             
    // 0x87ac30: r0 = LoadStaticField(0xb54)
    //     0x87ac30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ac34: ldr             x0, [x0, #0x16a8]
    // 0x87ac38: cmp             w0, NULL
    // 0x87ac3c: b.ne            #0x87ac4c
    // 0x87ac40: nop             
    // 0x87ac44: r0 = Null
    //     0x87ac44: mov             x0, NULL
    // 0x87ac48: b               #0x87ac74
    // 0x87ac4c: r17 = 351
    //     0x87ac4c: movz            x17, #0x15f
    // 0x87ac50: ldr             w1, [x0, x17]
    // 0x87ac54: DecompressPointer r1
    //     0x87ac54: add             x1, x1, HEAP, lsl #32
    // 0x87ac58: r0 = LoadClassIdInstr(r1)
    //     0x87ac58: ldur            x0, [x1, #-1]
    //     0x87ac5c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ac60: r2 = "nazreeMemoryFloorMaster2"
    //     0x87ac60: add             x2, PP, #0x11, lsl #12  ; [pp+0x11ae8] "nazreeMemoryFloorMaster2"
    //     0x87ac64: ldr             x2, [x2, #0xae8]
    // 0x87ac68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ac68: sub             lr, x0, #0xb4
    //     0x87ac6c: ldr             lr, [x21, lr, lsl #3]
    //     0x87ac70: blr             lr
    // 0x87ac74: cmp             w0, NULL
    // 0x87ac78: b.ne            #0x87ac88
    // 0x87ac7c: nop             
    // 0x87ac80: r3 = ""
    //     0x87ac80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ac84: b               #0x87ac8c
    // 0x87ac88: mov             x3, x0
    // 0x87ac8c: mov             x0, x3
    // 0x87ac90: stur            x3, [fp, #-8]
    // 0x87ac94: r2 = Null
    //     0x87ac94: mov             x2, NULL
    // 0x87ac98: r1 = Null
    //     0x87ac98: mov             x1, NULL
    // 0x87ac9c: r4 = 59
    //     0x87ac9c: movz            x4, #0x3b
    // 0x87aca0: branchIfSmi(r0, 0x87acb0)
    //     0x87aca0: tbz             w0, #0, #0x87acb0
    //     0x87aca4: nop             
    // 0x87aca8: r4 = LoadClassIdInstr(r0)
    //     0x87aca8: ldur            x4, [x0, #-1]
    //     0x87acac: ubfx            x4, x4, #0xc, #0x14
    // 0x87acb0: sub             x4, x4, #0x5d
    // 0x87acb4: cmp             x4, #1
    // 0x87acb8: b.ls            #0x87acd0
    // 0x87acbc: nop             
    // 0x87acc0: r8 = String
    //     0x87acc0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87acc4: r3 = Null
    //     0x87acc4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11af0] Null
    //     0x87acc8: ldr             x3, [x3, #0xaf0]
    // 0x87accc: r0 = String()
    //     0x87accc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87acd0: ldur            x0, [fp, #-8]
    // 0x87acd4: r1 = LoadClassIdInstr(r0)
    //     0x87acd4: ldur            x1, [x0, #-1]
    //     0x87acd8: ubfx            x1, x1, #0xc, #0x14
    // 0x87acdc: r16 = ""
    //     0x87acdc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ace0: stp             x16, x0, [SP]
    // 0x87ace4: mov             x0, x1
    // 0x87ace8: mov             lr, x0
    // 0x87acec: ldr             lr, [x21, lr, lsl #3]
    // 0x87acf0: blr             lr
    // 0x87acf4: tbnz            w0, #4, #0x87ad08
    // 0x87acf8: nop             
    // 0x87acfc: r0 = "block"
    //     0x87acfc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10040] "block"
    //     0x87ad00: ldr             x0, [x0, #0x40]
    // 0x87ad04: b               #0x8838b4
    // 0x87ad08: r0 = "nazreeMemoryFloor3"
    //     0x87ad08: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ae0] "nazreeMemoryFloor3"
    //     0x87ad0c: ldr             x0, [x0, #0xae0]
    // 0x87ad10: b               #0x8838b4
    // 0x87ad14: r16 = "nazreeMemoryFloorMaster2"
    //     0x87ad14: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ae8] "nazreeMemoryFloorMaster2"
    //     0x87ad18: ldr             x16, [x16, #0xae8]
    // 0x87ad1c: ldur            lr, [fp, #-0x28]
    // 0x87ad20: stp             lr, x16, [SP]
    // 0x87ad24: r0 = ==()
    //     0x87ad24: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ad28: tbnz            w0, #4, #0x87ae14
    // 0x87ad2c: nop             
    // 0x87ad30: r0 = LoadStaticField(0xb54)
    //     0x87ad30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ad34: ldr             x0, [x0, #0x16a8]
    // 0x87ad38: cmp             w0, NULL
    // 0x87ad3c: b.ne            #0x87ad4c
    // 0x87ad40: nop             
    // 0x87ad44: r0 = Null
    //     0x87ad44: mov             x0, NULL
    // 0x87ad48: b               #0x87ad74
    // 0x87ad4c: r17 = 351
    //     0x87ad4c: movz            x17, #0x15f
    // 0x87ad50: ldr             w1, [x0, x17]
    // 0x87ad54: DecompressPointer r1
    //     0x87ad54: add             x1, x1, HEAP, lsl #32
    // 0x87ad58: r0 = LoadClassIdInstr(r1)
    //     0x87ad58: ldur            x0, [x1, #-1]
    //     0x87ad5c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ad60: r2 = "nazreeMemoryFloorMaster2"
    //     0x87ad60: add             x2, PP, #0x11, lsl #12  ; [pp+0x11ae8] "nazreeMemoryFloorMaster2"
    //     0x87ad64: ldr             x2, [x2, #0xae8]
    // 0x87ad68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ad68: sub             lr, x0, #0xb4
    //     0x87ad6c: ldr             lr, [x21, lr, lsl #3]
    //     0x87ad70: blr             lr
    // 0x87ad74: cmp             w0, NULL
    // 0x87ad78: b.ne            #0x87ad88
    // 0x87ad7c: nop             
    // 0x87ad80: r3 = ""
    //     0x87ad80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ad84: b               #0x87ad8c
    // 0x87ad88: mov             x3, x0
    // 0x87ad8c: mov             x0, x3
    // 0x87ad90: stur            x3, [fp, #-8]
    // 0x87ad94: r2 = Null
    //     0x87ad94: mov             x2, NULL
    // 0x87ad98: r1 = Null
    //     0x87ad98: mov             x1, NULL
    // 0x87ad9c: r4 = 59
    //     0x87ad9c: movz            x4, #0x3b
    // 0x87ada0: branchIfSmi(r0, 0x87adb0)
    //     0x87ada0: tbz             w0, #0, #0x87adb0
    //     0x87ada4: nop             
    // 0x87ada8: r4 = LoadClassIdInstr(r0)
    //     0x87ada8: ldur            x4, [x0, #-1]
    //     0x87adac: ubfx            x4, x4, #0xc, #0x14
    // 0x87adb0: sub             x4, x4, #0x5d
    // 0x87adb4: cmp             x4, #1
    // 0x87adb8: b.ls            #0x87add0
    // 0x87adbc: nop             
    // 0x87adc0: r8 = String
    //     0x87adc0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87adc4: r3 = Null
    //     0x87adc4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b00] Null
    //     0x87adc8: ldr             x3, [x3, #0xb00]
    // 0x87adcc: r0 = String()
    //     0x87adcc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87add0: ldur            x0, [fp, #-8]
    // 0x87add4: r1 = LoadClassIdInstr(r0)
    //     0x87add4: ldur            x1, [x0, #-1]
    //     0x87add8: ubfx            x1, x1, #0xc, #0x14
    // 0x87addc: r16 = ""
    //     0x87addc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ade0: stp             x16, x0, [SP]
    // 0x87ade4: mov             x0, x1
    // 0x87ade8: mov             lr, x0
    // 0x87adec: ldr             lr, [x21, lr, lsl #3]
    // 0x87adf0: blr             lr
    // 0x87adf4: tbnz            w0, #4, #0x87ae08
    // 0x87adf8: nop             
    // 0x87adfc: r0 = "nazreeMemoryFloorMaster2"
    //     0x87adfc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ae8] "nazreeMemoryFloorMaster2"
    //     0x87ae00: ldr             x0, [x0, #0xae8]
    // 0x87ae04: b               #0x8838b4
    // 0x87ae08: r0 = "complete"
    //     0x87ae08: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87ae0c: ldr             x0, [x0, #0x590]
    // 0x87ae10: b               #0x8838b4
    // 0x87ae14: r16 = "nazreeMemorySubmitEvidence"
    //     0x87ae14: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b10] "nazreeMemorySubmitEvidence"
    //     0x87ae18: ldr             x16, [x16, #0xb10]
    // 0x87ae1c: ldur            lr, [fp, #-0x28]
    // 0x87ae20: stp             lr, x16, [SP]
    // 0x87ae24: r0 = ==()
    //     0x87ae24: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ae28: tbnz            w0, #4, #0x87b308
    // 0x87ae2c: nop             
    // 0x87ae30: r0 = LoadStaticField(0xb54)
    //     0x87ae30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ae34: ldr             x0, [x0, #0x16a8]
    // 0x87ae38: cmp             w0, NULL
    // 0x87ae3c: b.ne            #0x87ae4c
    // 0x87ae40: nop             
    // 0x87ae44: r0 = Null
    //     0x87ae44: mov             x0, NULL
    // 0x87ae48: b               #0x87ae74
    // 0x87ae4c: r17 = 351
    //     0x87ae4c: movz            x17, #0x15f
    // 0x87ae50: ldr             w1, [x0, x17]
    // 0x87ae54: DecompressPointer r1
    //     0x87ae54: add             x1, x1, HEAP, lsl #32
    // 0x87ae58: r0 = LoadClassIdInstr(r1)
    //     0x87ae58: ldur            x0, [x1, #-1]
    //     0x87ae5c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ae60: r2 = "nazreeMemoryEvidence1"
    //     0x87ae60: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a48] "nazreeMemoryEvidence1"
    //     0x87ae64: ldr             x2, [x2, #0xa48]
    // 0x87ae68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ae68: sub             lr, x0, #0xb4
    //     0x87ae6c: ldr             lr, [x21, lr, lsl #3]
    //     0x87ae70: blr             lr
    // 0x87ae74: cmp             w0, NULL
    // 0x87ae78: b.ne            #0x87ae88
    // 0x87ae7c: nop             
    // 0x87ae80: r3 = ""
    //     0x87ae80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ae84: b               #0x87ae8c
    // 0x87ae88: mov             x3, x0
    // 0x87ae8c: mov             x0, x3
    // 0x87ae90: stur            x3, [fp, #-8]
    // 0x87ae94: r2 = Null
    //     0x87ae94: mov             x2, NULL
    // 0x87ae98: r1 = Null
    //     0x87ae98: mov             x1, NULL
    // 0x87ae9c: r4 = 59
    //     0x87ae9c: movz            x4, #0x3b
    // 0x87aea0: branchIfSmi(r0, 0x87aeb0)
    //     0x87aea0: tbz             w0, #0, #0x87aeb0
    //     0x87aea4: nop             
    // 0x87aea8: r4 = LoadClassIdInstr(r0)
    //     0x87aea8: ldur            x4, [x0, #-1]
    //     0x87aeac: ubfx            x4, x4, #0xc, #0x14
    // 0x87aeb0: sub             x4, x4, #0x5d
    // 0x87aeb4: cmp             x4, #1
    // 0x87aeb8: b.ls            #0x87aed0
    // 0x87aebc: nop             
    // 0x87aec0: r8 = String
    //     0x87aec0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87aec4: r3 = Null
    //     0x87aec4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b18] Null
    //     0x87aec8: ldr             x3, [x3, #0xb18]
    // 0x87aecc: r0 = String()
    //     0x87aecc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87aed0: r0 = LoadStaticField(0xb54)
    //     0x87aed0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87aed4: ldr             x0, [x0, #0x16a8]
    // 0x87aed8: cmp             w0, NULL
    // 0x87aedc: b.ne            #0x87aeec
    // 0x87aee0: nop             
    // 0x87aee4: r0 = Null
    //     0x87aee4: mov             x0, NULL
    // 0x87aee8: b               #0x87af14
    // 0x87aeec: r17 = 351
    //     0x87aeec: movz            x17, #0x15f
    // 0x87aef0: ldr             w1, [x0, x17]
    // 0x87aef4: DecompressPointer r1
    //     0x87aef4: add             x1, x1, HEAP, lsl #32
    // 0x87aef8: r0 = LoadClassIdInstr(r1)
    //     0x87aef8: ldur            x0, [x1, #-1]
    //     0x87aefc: ubfx            x0, x0, #0xc, #0x14
    // 0x87af00: r2 = "nazreeMemoryEvidence2"
    //     0x87af00: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b28] "nazreeMemoryEvidence2"
    //     0x87af04: ldr             x2, [x2, #0xb28]
    // 0x87af08: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87af08: sub             lr, x0, #0xb4
    //     0x87af0c: ldr             lr, [x21, lr, lsl #3]
    //     0x87af10: blr             lr
    // 0x87af14: cmp             w0, NULL
    // 0x87af18: b.ne            #0x87af28
    // 0x87af1c: nop             
    // 0x87af20: r3 = ""
    //     0x87af20: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87af24: b               #0x87af2c
    // 0x87af28: mov             x3, x0
    // 0x87af2c: mov             x0, x3
    // 0x87af30: stur            x3, [fp, #-0x10]
    // 0x87af34: r2 = Null
    //     0x87af34: mov             x2, NULL
    // 0x87af38: r1 = Null
    //     0x87af38: mov             x1, NULL
    // 0x87af3c: r4 = 59
    //     0x87af3c: movz            x4, #0x3b
    // 0x87af40: branchIfSmi(r0, 0x87af50)
    //     0x87af40: tbz             w0, #0, #0x87af50
    //     0x87af44: nop             
    // 0x87af48: r4 = LoadClassIdInstr(r0)
    //     0x87af48: ldur            x4, [x0, #-1]
    //     0x87af4c: ubfx            x4, x4, #0xc, #0x14
    // 0x87af50: sub             x4, x4, #0x5d
    // 0x87af54: cmp             x4, #1
    // 0x87af58: b.ls            #0x87af70
    // 0x87af5c: nop             
    // 0x87af60: r8 = String
    //     0x87af60: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87af64: r3 = Null
    //     0x87af64: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b30] Null
    //     0x87af68: ldr             x3, [x3, #0xb30]
    // 0x87af6c: r0 = String()
    //     0x87af6c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87af70: r0 = LoadStaticField(0xb54)
    //     0x87af70: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87af74: ldr             x0, [x0, #0x16a8]
    // 0x87af78: cmp             w0, NULL
    // 0x87af7c: b.ne            #0x87af8c
    // 0x87af80: nop             
    // 0x87af84: r0 = Null
    //     0x87af84: mov             x0, NULL
    // 0x87af88: b               #0x87afb4
    // 0x87af8c: r17 = 351
    //     0x87af8c: movz            x17, #0x15f
    // 0x87af90: ldr             w1, [x0, x17]
    // 0x87af94: DecompressPointer r1
    //     0x87af94: add             x1, x1, HEAP, lsl #32
    // 0x87af98: r0 = LoadClassIdInstr(r1)
    //     0x87af98: ldur            x0, [x1, #-1]
    //     0x87af9c: ubfx            x0, x0, #0xc, #0x14
    // 0x87afa0: r2 = "nazreeMemoryEvidence3"
    //     0x87afa0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87afa4: ldr             x2, [x2, #0xb40]
    // 0x87afa8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87afa8: sub             lr, x0, #0xb4
    //     0x87afac: ldr             lr, [x21, lr, lsl #3]
    //     0x87afb0: blr             lr
    // 0x87afb4: cmp             w0, NULL
    // 0x87afb8: b.ne            #0x87afc8
    // 0x87afbc: nop             
    // 0x87afc0: r3 = ""
    //     0x87afc0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87afc4: b               #0x87afcc
    // 0x87afc8: mov             x3, x0
    // 0x87afcc: mov             x0, x3
    // 0x87afd0: stur            x3, [fp, #-0x18]
    // 0x87afd4: r2 = Null
    //     0x87afd4: mov             x2, NULL
    // 0x87afd8: r1 = Null
    //     0x87afd8: mov             x1, NULL
    // 0x87afdc: r4 = 59
    //     0x87afdc: movz            x4, #0x3b
    // 0x87afe0: branchIfSmi(r0, 0x87aff0)
    //     0x87afe0: tbz             w0, #0, #0x87aff0
    //     0x87afe4: nop             
    // 0x87afe8: r4 = LoadClassIdInstr(r0)
    //     0x87afe8: ldur            x4, [x0, #-1]
    //     0x87afec: ubfx            x4, x4, #0xc, #0x14
    // 0x87aff0: sub             x4, x4, #0x5d
    // 0x87aff4: cmp             x4, #1
    // 0x87aff8: b.ls            #0x87b010
    // 0x87affc: nop             
    // 0x87b000: r8 = String
    //     0x87b000: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b004: r3 = Null
    //     0x87b004: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b48] Null
    //     0x87b008: ldr             x3, [x3, #0xb48]
    // 0x87b00c: r0 = String()
    //     0x87b00c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b010: r0 = LoadStaticField(0xb54)
    //     0x87b010: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b014: ldr             x0, [x0, #0x16a8]
    // 0x87b018: cmp             w0, NULL
    // 0x87b01c: b.ne            #0x87b02c
    // 0x87b020: nop             
    // 0x87b024: r0 = Null
    //     0x87b024: mov             x0, NULL
    // 0x87b028: b               #0x87b054
    // 0x87b02c: r17 = 331
    //     0x87b02c: movz            x17, #0x14b
    // 0x87b030: ldr             w1, [x0, x17]
    // 0x87b034: DecompressPointer r1
    //     0x87b034: add             x1, x1, HEAP, lsl #32
    // 0x87b038: r0 = LoadClassIdInstr(r1)
    //     0x87b038: ldur            x0, [x1, #-1]
    //     0x87b03c: ubfx            x0, x0, #0xc, #0x14
    // 0x87b040: r2 = "memory"
    //     0x87b040: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x87b044: ldr             x2, [x2, #0xa18]
    // 0x87b048: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b048: sub             lr, x0, #0xb4
    //     0x87b04c: ldr             lr, [x21, lr, lsl #3]
    //     0x87b050: blr             lr
    // 0x87b054: cmp             w0, NULL
    // 0x87b058: b.ne            #0x87b074
    // 0x87b05c: nop             
    // 0x87b060: r1 = Null
    //     0x87b060: mov             x1, NULL
    // 0x87b064: r2 = 0
    //     0x87b064: movz            x2, #0
    // 0x87b068: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x87b068: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x87b06c: mov             x3, x0
    // 0x87b070: b               #0x87b078
    // 0x87b074: mov             x3, x0
    // 0x87b078: mov             x0, x3
    // 0x87b07c: stur            x3, [fp, #-0x20]
    // 0x87b080: r2 = Null
    //     0x87b080: mov             x2, NULL
    // 0x87b084: r1 = Null
    //     0x87b084: mov             x1, NULL
    // 0x87b088: r4 = 59
    //     0x87b088: movz            x4, #0x3b
    // 0x87b08c: branchIfSmi(r0, 0x87b09c)
    //     0x87b08c: tbz             w0, #0, #0x87b09c
    //     0x87b090: nop             
    // 0x87b094: r4 = LoadClassIdInstr(r0)
    //     0x87b094: ldur            x4, [x0, #-1]
    //     0x87b098: ubfx            x4, x4, #0xc, #0x14
    // 0x87b09c: cmp             x4, #0xcdb
    // 0x87b0a0: b.eq            #0x87b0bc
    // 0x87b0a4: nop             
    // 0x87b0a8: r8 = Timestamp
    //     0x87b0a8: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x87b0ac: ldr             x8, [x8, #0xa30]
    // 0x87b0b0: r3 = Null
    //     0x87b0b0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b58] Null
    //     0x87b0b4: ldr             x3, [x3, #0xb58]
    // 0x87b0b8: r0 = Timestamp()
    //     0x87b0b8: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x87b0bc: r1 = "memoryCountdownMinute"
    //     0x87b0bc: add             x1, PP, #0x11, lsl #12  ; [pp+0x11b68] "memoryCountdownMinute"
    //     0x87b0c0: ldr             x1, [x1, #0xb68]
    // 0x87b0c4: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x87b0c4: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x87b0c8: r0 = getCustomEventNumber()
    //     0x87b0c8: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x87b0cc: stur            x0, [fp, #-0x38]
    // 0x87b0d0: r0 = getTrueDateTime()
    //     0x87b0d0: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x87b0d4: ldur            x1, [fp, #-0x20]
    // 0x87b0d8: stur            x0, [fp, #-0x20]
    // 0x87b0dc: r0 = toDate()
    //     0x87b0dc: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x87b0e0: ldur            x1, [fp, #-0x20]
    // 0x87b0e4: mov             x2, x0
    // 0x87b0e8: r0 = difference()
    //     0x87b0e8: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x87b0ec: mov             x1, x0
    // 0x87b0f0: r0 = inMinutes()
    //     0x87b0f0: bl              #0x8a6d94  ; [dart:core] Duration::inMinutes
    // 0x87b0f4: mov             x1, x0
    // 0x87b0f8: ldur            x0, [fp, #-0x38]
    // 0x87b0fc: sub             x3, x0, x1
    // 0x87b100: stur            x3, [fp, #-0x80]
    // 0x87b104: r0 = LoadStaticField(0xb54)
    //     0x87b104: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b108: ldr             x0, [x0, #0x16a8]
    // 0x87b10c: cmp             w0, NULL
    // 0x87b110: b.ne            #0x87b124
    // 0x87b114: nop             
    // 0x87b118: mov             x1, x3
    // 0x87b11c: r0 = Null
    //     0x87b11c: mov             x0, NULL
    // 0x87b120: b               #0x87b150
    // 0x87b124: r17 = 351
    //     0x87b124: movz            x17, #0x15f
    // 0x87b128: ldr             w1, [x0, x17]
    // 0x87b12c: DecompressPointer r1
    //     0x87b12c: add             x1, x1, HEAP, lsl #32
    // 0x87b130: r0 = LoadClassIdInstr(r1)
    //     0x87b130: ldur            x0, [x1, #-1]
    //     0x87b134: ubfx            x0, x0, #0xc, #0x14
    // 0x87b138: r2 = "memoryKey"
    //     0x87b138: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b70] "memoryKey"
    //     0x87b13c: ldr             x2, [x2, #0xb70]
    // 0x87b140: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b140: sub             lr, x0, #0xb4
    //     0x87b144: ldr             lr, [x21, lr, lsl #3]
    //     0x87b148: blr             lr
    // 0x87b14c: ldur            x1, [fp, #-0x80]
    // 0x87b150: r2 = 59
    //     0x87b150: movz            x2, #0x3b
    // 0x87b154: branchIfSmi(r0, 0x87b164)
    //     0x87b154: tbz             w0, #0, #0x87b164
    //     0x87b158: nop             
    // 0x87b15c: r2 = LoadClassIdInstr(r0)
    //     0x87b15c: ldur            x2, [x0, #-1]
    //     0x87b160: ubfx            x2, x2, #0xc, #0x14
    // 0x87b164: r16 = "gold"
    //     0x87b164: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b78] "gold"
    //     0x87b168: ldr             x16, [x16, #0xb78]
    // 0x87b16c: stp             x16, x0, [SP]
    // 0x87b170: mov             x0, x2
    // 0x87b174: mov             lr, x0
    // 0x87b178: ldr             lr, [x21, lr, lsl #3]
    // 0x87b17c: blr             lr
    // 0x87b180: tst             x0, #0x10
    // 0x87b184: cset            x1, ne
    // 0x87b188: sub             x1, x1, #1
    // 0x87b18c: r16 = 10
    //     0x87b18c: movz            x16, #0xa
    // 0x87b190: and             x1, x1, x16
    // 0x87b194: add             x1, x1, #0x1e
    // 0x87b198: ldur            x0, [fp, #-0x80]
    // 0x87b19c: stur            x1, [fp, #-0x20]
    // 0x87b1a0: tbz             x0, #0x3f, #0x87b1b0
    // 0x87b1a4: nop             
    // 0x87b1a8: r3 = 0
    //     0x87b1a8: movz            x3, #0
    // 0x87b1ac: b               #0x87b1b4
    // 0x87b1b0: mov             x3, x0
    // 0x87b1b4: ldur            x2, [fp, #-8]
    // 0x87b1b8: stur            x3, [fp, #-0x38]
    // 0x87b1bc: r0 = LoadClassIdInstr(r2)
    //     0x87b1bc: ldur            x0, [x2, #-1]
    //     0x87b1c0: ubfx            x0, x0, #0xc, #0x14
    // 0x87b1c4: r16 = "complete"
    //     0x87b1c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b1c8: ldr             x16, [x16, #0x590]
    // 0x87b1cc: stp             x16, x2, [SP]
    // 0x87b1d0: mov             lr, x0
    // 0x87b1d4: ldr             lr, [x21, lr, lsl #3]
    // 0x87b1d8: blr             lr
    // 0x87b1dc: tbnz            w0, #4, #0x87b260
    // 0x87b1e0: nop             
    // 0x87b1e4: ldur            x1, [fp, #-0x10]
    // 0x87b1e8: r0 = LoadClassIdInstr(r1)
    //     0x87b1e8: ldur            x0, [x1, #-1]
    //     0x87b1ec: ubfx            x0, x0, #0xc, #0x14
    // 0x87b1f0: r16 = "complete"
    //     0x87b1f0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b1f4: ldr             x16, [x16, #0x590]
    // 0x87b1f8: stp             x16, x1, [SP]
    // 0x87b1fc: mov             lr, x0
    // 0x87b200: ldr             lr, [x21, lr, lsl #3]
    // 0x87b204: blr             lr
    // 0x87b208: tbnz            w0, #4, #0x87b260
    // 0x87b20c: nop             
    // 0x87b210: ldur            x1, [fp, #-0x18]
    // 0x87b214: r0 = LoadClassIdInstr(r1)
    //     0x87b214: ldur            x0, [x1, #-1]
    //     0x87b218: ubfx            x0, x0, #0xc, #0x14
    // 0x87b21c: r16 = "complete"
    //     0x87b21c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b220: ldr             x16, [x16, #0x590]
    // 0x87b224: stp             x16, x1, [SP]
    // 0x87b228: mov             lr, x0
    // 0x87b22c: ldr             lr, [x21, lr, lsl #3]
    // 0x87b230: blr             lr
    // 0x87b234: tbnz            w0, #4, #0x87b260
    // 0x87b238: nop             
    // 0x87b23c: ldur            x1, [fp, #-0x38]
    // 0x87b240: ldur            x0, [fp, #-0x20]
    // 0x87b244: r2 = LoadInt32Instr(r0)
    //     0x87b244: sbfx            x2, x0, #1, #0x1f
    // 0x87b248: cmp             x1, x2
    // 0x87b24c: b.lt            #0x87b260
    // 0x87b250: nop             
    // 0x87b254: r0 = "goodEnding"
    //     0x87b254: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b80] "goodEnding"
    //     0x87b258: ldr             x0, [x0, #0xb80]
    // 0x87b25c: b               #0x8838b4
    // 0x87b260: ldur            x0, [fp, #-8]
    // 0x87b264: r1 = LoadClassIdInstr(r0)
    //     0x87b264: ldur            x1, [x0, #-1]
    //     0x87b268: ubfx            x1, x1, #0xc, #0x14
    // 0x87b26c: r16 = "complete"
    //     0x87b26c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b270: ldr             x16, [x16, #0x590]
    // 0x87b274: stp             x16, x0, [SP]
    // 0x87b278: mov             x0, x1
    // 0x87b27c: mov             lr, x0
    // 0x87b280: ldr             lr, [x21, lr, lsl #3]
    // 0x87b284: blr             lr
    // 0x87b288: tbnz            w0, #4, #0x87b2fc
    // 0x87b28c: nop             
    // 0x87b290: ldur            x0, [fp, #-0x10]
    // 0x87b294: r1 = LoadClassIdInstr(r0)
    //     0x87b294: ldur            x1, [x0, #-1]
    //     0x87b298: ubfx            x1, x1, #0xc, #0x14
    // 0x87b29c: r16 = "complete"
    //     0x87b29c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b2a0: ldr             x16, [x16, #0x590]
    // 0x87b2a4: stp             x16, x0, [SP]
    // 0x87b2a8: mov             x0, x1
    // 0x87b2ac: mov             lr, x0
    // 0x87b2b0: ldr             lr, [x21, lr, lsl #3]
    // 0x87b2b4: blr             lr
    // 0x87b2b8: tbnz            w0, #4, #0x87b2fc
    // 0x87b2bc: nop             
    // 0x87b2c0: ldur            x0, [fp, #-0x18]
    // 0x87b2c4: r1 = LoadClassIdInstr(r0)
    //     0x87b2c4: ldur            x1, [x0, #-1]
    //     0x87b2c8: ubfx            x1, x1, #0xc, #0x14
    // 0x87b2cc: r16 = "complete"
    //     0x87b2cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b2d0: ldr             x16, [x16, #0x590]
    // 0x87b2d4: stp             x16, x0, [SP]
    // 0x87b2d8: mov             x0, x1
    // 0x87b2dc: mov             lr, x0
    // 0x87b2e0: ldr             lr, [x21, lr, lsl #3]
    // 0x87b2e4: blr             lr
    // 0x87b2e8: tbnz            w0, #4, #0x87b2fc
    // 0x87b2ec: nop             
    // 0x87b2f0: r0 = "normalEnding"
    //     0x87b2f0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b88] "normalEnding"
    //     0x87b2f4: ldr             x0, [x0, #0xb88]
    // 0x87b2f8: b               #0x8838b4
    // 0x87b2fc: r0 = "badEnding"
    //     0x87b2fc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b90] "badEnding"
    //     0x87b300: ldr             x0, [x0, #0xb90]
    // 0x87b304: b               #0x8838b4
    // 0x87b308: r16 = "nazreeMemoryEvidence3"
    //     0x87b308: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87b30c: ldr             x16, [x16, #0xb40]
    // 0x87b310: ldur            lr, [fp, #-0x28]
    // 0x87b314: stp             lr, x16, [SP]
    // 0x87b318: r0 = ==()
    //     0x87b318: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b31c: tbnz            w0, #4, #0x87b404
    // 0x87b320: nop             
    // 0x87b324: r0 = LoadStaticField(0xb54)
    //     0x87b324: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b328: ldr             x0, [x0, #0x16a8]
    // 0x87b32c: cmp             w0, NULL
    // 0x87b330: b.ne            #0x87b340
    // 0x87b334: nop             
    // 0x87b338: r0 = Null
    //     0x87b338: mov             x0, NULL
    // 0x87b33c: b               #0x87b368
    // 0x87b340: r17 = 351
    //     0x87b340: movz            x17, #0x15f
    // 0x87b344: ldr             w1, [x0, x17]
    // 0x87b348: DecompressPointer r1
    //     0x87b348: add             x1, x1, HEAP, lsl #32
    // 0x87b34c: r0 = LoadClassIdInstr(r1)
    //     0x87b34c: ldur            x0, [x1, #-1]
    //     0x87b350: ubfx            x0, x0, #0xc, #0x14
    // 0x87b354: r2 = "nazreeMemoryEvidence3"
    //     0x87b354: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87b358: ldr             x2, [x2, #0xb40]
    // 0x87b35c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b35c: sub             lr, x0, #0xb4
    //     0x87b360: ldr             lr, [x21, lr, lsl #3]
    //     0x87b364: blr             lr
    // 0x87b368: cmp             w0, NULL
    // 0x87b36c: b.ne            #0x87b37c
    // 0x87b370: nop             
    // 0x87b374: r3 = ""
    //     0x87b374: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b378: b               #0x87b380
    // 0x87b37c: mov             x3, x0
    // 0x87b380: mov             x0, x3
    // 0x87b384: stur            x3, [fp, #-8]
    // 0x87b388: r2 = Null
    //     0x87b388: mov             x2, NULL
    // 0x87b38c: r1 = Null
    //     0x87b38c: mov             x1, NULL
    // 0x87b390: r4 = 59
    //     0x87b390: movz            x4, #0x3b
    // 0x87b394: branchIfSmi(r0, 0x87b3a4)
    //     0x87b394: tbz             w0, #0, #0x87b3a4
    //     0x87b398: nop             
    // 0x87b39c: r4 = LoadClassIdInstr(r0)
    //     0x87b39c: ldur            x4, [x0, #-1]
    //     0x87b3a0: ubfx            x4, x4, #0xc, #0x14
    // 0x87b3a4: sub             x4, x4, #0x5d
    // 0x87b3a8: cmp             x4, #1
    // 0x87b3ac: b.ls            #0x87b3c4
    // 0x87b3b0: nop             
    // 0x87b3b4: r8 = String
    //     0x87b3b4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b3b8: r3 = Null
    //     0x87b3b8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11b98] Null
    //     0x87b3bc: ldr             x3, [x3, #0xb98]
    // 0x87b3c0: r0 = String()
    //     0x87b3c0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b3c4: ldur            x0, [fp, #-8]
    // 0x87b3c8: r1 = LoadClassIdInstr(r0)
    //     0x87b3c8: ldur            x1, [x0, #-1]
    //     0x87b3cc: ubfx            x1, x1, #0xc, #0x14
    // 0x87b3d0: r16 = ""
    //     0x87b3d0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b3d4: stp             x16, x0, [SP]
    // 0x87b3d8: mov             x0, x1
    // 0x87b3dc: mov             lr, x0
    // 0x87b3e0: ldr             lr, [x21, lr, lsl #3]
    // 0x87b3e4: blr             lr
    // 0x87b3e8: tbnz            w0, #4, #0x87b3fc
    // 0x87b3ec: nop             
    // 0x87b3f0: r0 = "nazreeMemoryEvidence3"
    //     0x87b3f0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87b3f4: ldr             x0, [x0, #0xb40]
    // 0x87b3f8: b               #0x8838b4
    // 0x87b3fc: r0 = "end"
    //     0x87b3fc: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87b400: b               #0x8838b4
    // 0x87b404: r16 = "nazreeMemoryGuard"
    //     0x87b404: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ba8] "nazreeMemoryGuard"
    //     0x87b408: ldr             x16, [x16, #0xba8]
    // 0x87b40c: ldur            lr, [fp, #-0x28]
    // 0x87b410: stp             lr, x16, [SP]
    // 0x87b414: r0 = ==()
    //     0x87b414: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b418: tbnz            w0, #4, #0x87b564
    // 0x87b41c: nop             
    // 0x87b420: r0 = LoadStaticField(0xb54)
    //     0x87b420: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b424: ldr             x0, [x0, #0x16a8]
    // 0x87b428: cmp             w0, NULL
    // 0x87b42c: b.ne            #0x87b43c
    // 0x87b430: nop             
    // 0x87b434: r0 = Null
    //     0x87b434: mov             x0, NULL
    // 0x87b438: b               #0x87b464
    // 0x87b43c: r17 = 351
    //     0x87b43c: movz            x17, #0x15f
    // 0x87b440: ldr             w1, [x0, x17]
    // 0x87b444: DecompressPointer r1
    //     0x87b444: add             x1, x1, HEAP, lsl #32
    // 0x87b448: r0 = LoadClassIdInstr(r1)
    //     0x87b448: ldur            x0, [x1, #-1]
    //     0x87b44c: ubfx            x0, x0, #0xc, #0x14
    // 0x87b450: r2 = "nazreeMemoryEvidence3"
    //     0x87b450: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87b454: ldr             x2, [x2, #0xb40]
    // 0x87b458: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b458: sub             lr, x0, #0xb4
    //     0x87b45c: ldr             lr, [x21, lr, lsl #3]
    //     0x87b460: blr             lr
    // 0x87b464: cmp             w0, NULL
    // 0x87b468: b.ne            #0x87b478
    // 0x87b46c: nop             
    // 0x87b470: r3 = ""
    //     0x87b470: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b474: b               #0x87b47c
    // 0x87b478: mov             x3, x0
    // 0x87b47c: mov             x0, x3
    // 0x87b480: stur            x3, [fp, #-8]
    // 0x87b484: r2 = Null
    //     0x87b484: mov             x2, NULL
    // 0x87b488: r1 = Null
    //     0x87b488: mov             x1, NULL
    // 0x87b48c: r4 = 59
    //     0x87b48c: movz            x4, #0x3b
    // 0x87b490: branchIfSmi(r0, 0x87b4a0)
    //     0x87b490: tbz             w0, #0, #0x87b4a0
    //     0x87b494: nop             
    // 0x87b498: r4 = LoadClassIdInstr(r0)
    //     0x87b498: ldur            x4, [x0, #-1]
    //     0x87b49c: ubfx            x4, x4, #0xc, #0x14
    // 0x87b4a0: sub             x4, x4, #0x5d
    // 0x87b4a4: cmp             x4, #1
    // 0x87b4a8: b.ls            #0x87b4c0
    // 0x87b4ac: nop             
    // 0x87b4b0: r8 = String
    //     0x87b4b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b4b4: r3 = Null
    //     0x87b4b4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11bb0] Null
    //     0x87b4b8: ldr             x3, [x3, #0xbb0]
    // 0x87b4bc: r0 = String()
    //     0x87b4bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b4c0: ldur            x1, [fp, #-8]
    // 0x87b4c4: r0 = LoadClassIdInstr(r1)
    //     0x87b4c4: ldur            x0, [x1, #-1]
    //     0x87b4c8: ubfx            x0, x0, #0xc, #0x14
    // 0x87b4cc: r16 = "progress"
    //     0x87b4cc: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87b4d0: stp             x16, x1, [SP]
    // 0x87b4d4: mov             lr, x0
    // 0x87b4d8: ldr             lr, [x21, lr, lsl #3]
    // 0x87b4dc: blr             lr
    // 0x87b4e0: tbz             w0, #4, #0x87b510
    // 0x87b4e4: nop             
    // 0x87b4e8: ldur            x1, [fp, #-8]
    // 0x87b4ec: r0 = LoadClassIdInstr(r1)
    //     0x87b4ec: ldur            x0, [x1, #-1]
    //     0x87b4f0: ubfx            x0, x0, #0xc, #0x14
    // 0x87b4f4: r16 = ""
    //     0x87b4f4: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b4f8: stp             x16, x1, [SP]
    // 0x87b4fc: mov             lr, x0
    // 0x87b500: ldr             lr, [x21, lr, lsl #3]
    // 0x87b504: blr             lr
    // 0x87b508: tbnz            w0, #4, #0x87b51c
    // 0x87b50c: nop             
    // 0x87b510: r0 = "nazreeMemoryGuard"
    //     0x87b510: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ba8] "nazreeMemoryGuard"
    //     0x87b514: ldr             x0, [x0, #0xba8]
    // 0x87b518: b               #0x8838b4
    // 0x87b51c: ldur            x0, [fp, #-8]
    // 0x87b520: r1 = LoadClassIdInstr(r0)
    //     0x87b520: ldur            x1, [x0, #-1]
    //     0x87b524: ubfx            x1, x1, #0xc, #0x14
    // 0x87b528: r16 = "progress2"
    //     0x87b528: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87b52c: ldr             x16, [x16, #0x798]
    // 0x87b530: stp             x16, x0, [SP]
    // 0x87b534: mov             x0, x1
    // 0x87b538: mov             lr, x0
    // 0x87b53c: ldr             lr, [x21, lr, lsl #3]
    // 0x87b540: blr             lr
    // 0x87b544: tbnz            w0, #4, #0x87b558
    // 0x87b548: nop             
    // 0x87b54c: r0 = "progress2"
    //     0x87b54c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87b550: ldr             x0, [x0, #0x798]
    // 0x87b554: b               #0x8838b4
    // 0x87b558: r0 = "complete"
    //     0x87b558: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87b55c: ldr             x0, [x0, #0x590]
    // 0x87b560: b               #0x8838b4
    // 0x87b564: r16 = "nazreeMemoryGuard2"
    //     0x87b564: add             x16, PP, #0x11, lsl #12  ; [pp+0x11bc0] "nazreeMemoryGuard2"
    //     0x87b568: ldr             x16, [x16, #0xbc0]
    // 0x87b56c: ldur            lr, [fp, #-0x28]
    // 0x87b570: stp             lr, x16, [SP]
    // 0x87b574: r0 = ==()
    //     0x87b574: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b578: tbnz            w0, #4, #0x87b698
    // 0x87b57c: nop             
    // 0x87b580: r0 = LoadStaticField(0xb54)
    //     0x87b580: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b584: ldr             x0, [x0, #0x16a8]
    // 0x87b588: cmp             w0, NULL
    // 0x87b58c: b.ne            #0x87b59c
    // 0x87b590: nop             
    // 0x87b594: r0 = Null
    //     0x87b594: mov             x0, NULL
    // 0x87b598: b               #0x87b5c4
    // 0x87b59c: r17 = 351
    //     0x87b59c: movz            x17, #0x15f
    // 0x87b5a0: ldr             w1, [x0, x17]
    // 0x87b5a4: DecompressPointer r1
    //     0x87b5a4: add             x1, x1, HEAP, lsl #32
    // 0x87b5a8: r0 = LoadClassIdInstr(r1)
    //     0x87b5a8: ldur            x0, [x1, #-1]
    //     0x87b5ac: ubfx            x0, x0, #0xc, #0x14
    // 0x87b5b0: r2 = "nazreeMemoryEvidence3"
    //     0x87b5b0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b40] "nazreeMemoryEvidence3"
    //     0x87b5b4: ldr             x2, [x2, #0xb40]
    // 0x87b5b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b5b8: sub             lr, x0, #0xb4
    //     0x87b5bc: ldr             lr, [x21, lr, lsl #3]
    //     0x87b5c0: blr             lr
    // 0x87b5c4: cmp             w0, NULL
    // 0x87b5c8: b.ne            #0x87b5d8
    // 0x87b5cc: nop             
    // 0x87b5d0: r3 = ""
    //     0x87b5d0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b5d4: b               #0x87b5dc
    // 0x87b5d8: mov             x3, x0
    // 0x87b5dc: mov             x0, x3
    // 0x87b5e0: stur            x3, [fp, #-8]
    // 0x87b5e4: r2 = Null
    //     0x87b5e4: mov             x2, NULL
    // 0x87b5e8: r1 = Null
    //     0x87b5e8: mov             x1, NULL
    // 0x87b5ec: r4 = 59
    //     0x87b5ec: movz            x4, #0x3b
    // 0x87b5f0: branchIfSmi(r0, 0x87b600)
    //     0x87b5f0: tbz             w0, #0, #0x87b600
    //     0x87b5f4: nop             
    // 0x87b5f8: r4 = LoadClassIdInstr(r0)
    //     0x87b5f8: ldur            x4, [x0, #-1]
    //     0x87b5fc: ubfx            x4, x4, #0xc, #0x14
    // 0x87b600: sub             x4, x4, #0x5d
    // 0x87b604: cmp             x4, #1
    // 0x87b608: b.ls            #0x87b620
    // 0x87b60c: nop             
    // 0x87b610: r8 = String
    //     0x87b610: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b614: r3 = Null
    //     0x87b614: add             x3, PP, #0x11, lsl #12  ; [pp+0x11bc8] Null
    //     0x87b618: ldr             x3, [x3, #0xbc8]
    // 0x87b61c: r0 = String()
    //     0x87b61c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b620: ldur            x1, [fp, #-8]
    // 0x87b624: r0 = LoadClassIdInstr(r1)
    //     0x87b624: ldur            x0, [x1, #-1]
    //     0x87b628: ubfx            x0, x0, #0xc, #0x14
    // 0x87b62c: r16 = "progress"
    //     0x87b62c: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87b630: stp             x16, x1, [SP]
    // 0x87b634: mov             lr, x0
    // 0x87b638: ldr             lr, [x21, lr, lsl #3]
    // 0x87b63c: blr             lr
    // 0x87b640: tbnz            w0, #4, #0x87b654
    // 0x87b644: nop             
    // 0x87b648: r0 = "nazreeMemoryGuard2"
    //     0x87b648: add             x0, PP, #0x11, lsl #12  ; [pp+0x11bc0] "nazreeMemoryGuard2"
    //     0x87b64c: ldr             x0, [x0, #0xbc0]
    // 0x87b650: b               #0x8838b4
    // 0x87b654: ldur            x0, [fp, #-8]
    // 0x87b658: r1 = LoadClassIdInstr(r0)
    //     0x87b658: ldur            x1, [x0, #-1]
    //     0x87b65c: ubfx            x1, x1, #0xc, #0x14
    // 0x87b660: r16 = "progress2"
    //     0x87b660: add             x16, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87b664: ldr             x16, [x16, #0x798]
    // 0x87b668: stp             x16, x0, [SP]
    // 0x87b66c: mov             x0, x1
    // 0x87b670: mov             lr, x0
    // 0x87b674: ldr             lr, [x21, lr, lsl #3]
    // 0x87b678: blr             lr
    // 0x87b67c: tbnz            w0, #4, #0x87b690
    // 0x87b680: nop             
    // 0x87b684: r0 = "progress2"
    //     0x87b684: add             x0, PP, #0x11, lsl #12  ; [pp+0x11798] "progress2"
    //     0x87b688: ldr             x0, [x0, #0x798]
    // 0x87b68c: b               #0x8838b4
    // 0x87b690: r0 = "end"
    //     0x87b690: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87b694: b               #0x8838b4
    // 0x87b698: r16 = "nazreeMemoryEvidence2"
    //     0x87b698: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b28] "nazreeMemoryEvidence2"
    //     0x87b69c: ldr             x16, [x16, #0xb28]
    // 0x87b6a0: ldur            lr, [fp, #-0x28]
    // 0x87b6a4: stp             lr, x16, [SP]
    // 0x87b6a8: r0 = ==()
    //     0x87b6a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b6ac: tbnz            w0, #4, #0x87b838
    // 0x87b6b0: nop             
    // 0x87b6b4: r0 = LoadStaticField(0xb54)
    //     0x87b6b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b6b8: ldr             x0, [x0, #0x16a8]
    // 0x87b6bc: cmp             w0, NULL
    // 0x87b6c0: b.ne            #0x87b6d0
    // 0x87b6c4: nop             
    // 0x87b6c8: r0 = Null
    //     0x87b6c8: mov             x0, NULL
    // 0x87b6cc: b               #0x87b6f8
    // 0x87b6d0: r17 = 351
    //     0x87b6d0: movz            x17, #0x15f
    // 0x87b6d4: ldr             w1, [x0, x17]
    // 0x87b6d8: DecompressPointer r1
    //     0x87b6d8: add             x1, x1, HEAP, lsl #32
    // 0x87b6dc: r0 = LoadClassIdInstr(r1)
    //     0x87b6dc: ldur            x0, [x1, #-1]
    //     0x87b6e0: ubfx            x0, x0, #0xc, #0x14
    // 0x87b6e4: r2 = "nazreeMemoryEvidence2"
    //     0x87b6e4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b28] "nazreeMemoryEvidence2"
    //     0x87b6e8: ldr             x2, [x2, #0xb28]
    // 0x87b6ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b6ec: sub             lr, x0, #0xb4
    //     0x87b6f0: ldr             lr, [x21, lr, lsl #3]
    //     0x87b6f4: blr             lr
    // 0x87b6f8: cmp             w0, NULL
    // 0x87b6fc: b.ne            #0x87b70c
    // 0x87b700: nop             
    // 0x87b704: r3 = ""
    //     0x87b704: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b708: b               #0x87b710
    // 0x87b70c: mov             x3, x0
    // 0x87b710: mov             x0, x3
    // 0x87b714: stur            x3, [fp, #-8]
    // 0x87b718: r2 = Null
    //     0x87b718: mov             x2, NULL
    // 0x87b71c: r1 = Null
    //     0x87b71c: mov             x1, NULL
    // 0x87b720: r4 = 59
    //     0x87b720: movz            x4, #0x3b
    // 0x87b724: branchIfSmi(r0, 0x87b734)
    //     0x87b724: tbz             w0, #0, #0x87b734
    //     0x87b728: nop             
    // 0x87b72c: r4 = LoadClassIdInstr(r0)
    //     0x87b72c: ldur            x4, [x0, #-1]
    //     0x87b730: ubfx            x4, x4, #0xc, #0x14
    // 0x87b734: sub             x4, x4, #0x5d
    // 0x87b738: cmp             x4, #1
    // 0x87b73c: b.ls            #0x87b754
    // 0x87b740: nop             
    // 0x87b744: r8 = String
    //     0x87b744: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b748: r3 = Null
    //     0x87b748: add             x3, PP, #0x11, lsl #12  ; [pp+0x11bd8] Null
    //     0x87b74c: ldr             x3, [x3, #0xbd8]
    // 0x87b750: r0 = String()
    //     0x87b750: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b754: ldur            x1, [fp, #-8]
    // 0x87b758: r0 = LoadClassIdInstr(r1)
    //     0x87b758: ldur            x0, [x1, #-1]
    //     0x87b75c: ubfx            x0, x0, #0xc, #0x14
    // 0x87b760: r16 = ""
    //     0x87b760: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b764: stp             x16, x1, [SP]
    // 0x87b768: mov             lr, x0
    // 0x87b76c: ldr             lr, [x21, lr, lsl #3]
    // 0x87b770: blr             lr
    // 0x87b774: tbnz            w0, #4, #0x87b788
    // 0x87b778: nop             
    // 0x87b77c: r0 = "nazreeMemoryEvidence2"
    //     0x87b77c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11b28] "nazreeMemoryEvidence2"
    //     0x87b780: ldr             x0, [x0, #0xb28]
    // 0x87b784: b               #0x8838b4
    // 0x87b788: ldur            x1, [fp, #-8]
    // 0x87b78c: r0 = LoadClassIdInstr(r1)
    //     0x87b78c: ldur            x0, [x1, #-1]
    //     0x87b790: ubfx            x0, x0, #0xc, #0x14
    // 0x87b794: r16 = "progress"
    //     0x87b794: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87b798: stp             x16, x1, [SP]
    // 0x87b79c: mov             lr, x0
    // 0x87b7a0: ldr             lr, [x21, lr, lsl #3]
    // 0x87b7a4: blr             lr
    // 0x87b7a8: tbnz            w0, #4, #0x87b7b8
    // 0x87b7ac: nop             
    // 0x87b7b0: r0 = "progress"
    //     0x87b7b0: ldr             x0, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87b7b4: b               #0x8838b4
    // 0x87b7b8: ldur            x1, [fp, #-8]
    // 0x87b7bc: r0 = LoadClassIdInstr(r1)
    //     0x87b7bc: ldur            x0, [x1, #-1]
    //     0x87b7c0: ubfx            x0, x0, #0xc, #0x14
    // 0x87b7c4: r16 = "fail"
    //     0x87b7c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11be8] "fail"
    //     0x87b7c8: ldr             x16, [x16, #0xbe8]
    // 0x87b7cc: stp             x16, x1, [SP]
    // 0x87b7d0: mov             lr, x0
    // 0x87b7d4: ldr             lr, [x21, lr, lsl #3]
    // 0x87b7d8: blr             lr
    // 0x87b7dc: tbnz            w0, #4, #0x87b7f0
    // 0x87b7e0: nop             
    // 0x87b7e4: r0 = "failTimerCheck"
    //     0x87b7e4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11bf0] "failTimerCheck"
    //     0x87b7e8: ldr             x0, [x0, #0xbf0]
    // 0x87b7ec: b               #0x8838b4
    // 0x87b7f0: ldur            x0, [fp, #-8]
    // 0x87b7f4: r1 = LoadClassIdInstr(r0)
    //     0x87b7f4: ldur            x1, [x0, #-1]
    //     0x87b7f8: ubfx            x1, x1, #0xc, #0x14
    // 0x87b7fc: r16 = "completeFail"
    //     0x87b7fc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11bf8] "completeFail"
    //     0x87b800: ldr             x16, [x16, #0xbf8]
    // 0x87b804: stp             x16, x0, [SP]
    // 0x87b808: mov             x0, x1
    // 0x87b80c: mov             lr, x0
    // 0x87b810: ldr             lr, [x21, lr, lsl #3]
    // 0x87b814: blr             lr
    // 0x87b818: tbnz            w0, #4, #0x87b82c
    // 0x87b81c: nop             
    // 0x87b820: r0 = "completeFail"
    //     0x87b820: add             x0, PP, #0x11, lsl #12  ; [pp+0x11bf8] "completeFail"
    //     0x87b824: ldr             x0, [x0, #0xbf8]
    // 0x87b828: b               #0x8838b4
    // 0x87b82c: r0 = "completeSuccess"
    //     0x87b82c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11c00] "completeSuccess"
    //     0x87b830: ldr             x0, [x0, #0xc00]
    // 0x87b834: b               #0x8838b4
    // 0x87b838: r16 = "nazreeMemoryMiniEvidence1"
    //     0x87b838: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c08] "nazreeMemoryMiniEvidence1"
    //     0x87b83c: ldr             x16, [x16, #0xc08]
    // 0x87b840: ldur            lr, [fp, #-0x28]
    // 0x87b844: stp             lr, x16, [SP]
    // 0x87b848: r0 = ==()
    //     0x87b848: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b84c: tbnz            w0, #4, #0x87b938
    // 0x87b850: nop             
    // 0x87b854: r0 = LoadStaticField(0xb54)
    //     0x87b854: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b858: ldr             x0, [x0, #0x16a8]
    // 0x87b85c: cmp             w0, NULL
    // 0x87b860: b.ne            #0x87b870
    // 0x87b864: nop             
    // 0x87b868: r0 = Null
    //     0x87b868: mov             x0, NULL
    // 0x87b86c: b               #0x87b898
    // 0x87b870: r17 = 351
    //     0x87b870: movz            x17, #0x15f
    // 0x87b874: ldr             w1, [x0, x17]
    // 0x87b878: DecompressPointer r1
    //     0x87b878: add             x1, x1, HEAP, lsl #32
    // 0x87b87c: r0 = LoadClassIdInstr(r1)
    //     0x87b87c: ldur            x0, [x1, #-1]
    //     0x87b880: ubfx            x0, x0, #0xc, #0x14
    // 0x87b884: r2 = "nazreeMemoryMiniEvidence1"
    //     0x87b884: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c08] "nazreeMemoryMiniEvidence1"
    //     0x87b888: ldr             x2, [x2, #0xc08]
    // 0x87b88c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b88c: sub             lr, x0, #0xb4
    //     0x87b890: ldr             lr, [x21, lr, lsl #3]
    //     0x87b894: blr             lr
    // 0x87b898: cmp             w0, NULL
    // 0x87b89c: b.ne            #0x87b8ac
    // 0x87b8a0: nop             
    // 0x87b8a4: r3 = ""
    //     0x87b8a4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b8a8: b               #0x87b8b0
    // 0x87b8ac: mov             x3, x0
    // 0x87b8b0: mov             x0, x3
    // 0x87b8b4: stur            x3, [fp, #-8]
    // 0x87b8b8: r2 = Null
    //     0x87b8b8: mov             x2, NULL
    // 0x87b8bc: r1 = Null
    //     0x87b8bc: mov             x1, NULL
    // 0x87b8c0: r4 = 59
    //     0x87b8c0: movz            x4, #0x3b
    // 0x87b8c4: branchIfSmi(r0, 0x87b8d4)
    //     0x87b8c4: tbz             w0, #0, #0x87b8d4
    //     0x87b8c8: nop             
    // 0x87b8cc: r4 = LoadClassIdInstr(r0)
    //     0x87b8cc: ldur            x4, [x0, #-1]
    //     0x87b8d0: ubfx            x4, x4, #0xc, #0x14
    // 0x87b8d4: sub             x4, x4, #0x5d
    // 0x87b8d8: cmp             x4, #1
    // 0x87b8dc: b.ls            #0x87b8f4
    // 0x87b8e0: nop             
    // 0x87b8e4: r8 = String
    //     0x87b8e4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b8e8: r3 = Null
    //     0x87b8e8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c10] Null
    //     0x87b8ec: ldr             x3, [x3, #0xc10]
    // 0x87b8f0: r0 = String()
    //     0x87b8f0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b8f4: ldur            x0, [fp, #-8]
    // 0x87b8f8: r1 = LoadClassIdInstr(r0)
    //     0x87b8f8: ldur            x1, [x0, #-1]
    //     0x87b8fc: ubfx            x1, x1, #0xc, #0x14
    // 0x87b900: r16 = ""
    //     0x87b900: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b904: stp             x16, x0, [SP]
    // 0x87b908: mov             x0, x1
    // 0x87b90c: mov             lr, x0
    // 0x87b910: ldr             lr, [x21, lr, lsl #3]
    // 0x87b914: blr             lr
    // 0x87b918: tbnz            w0, #4, #0x87b92c
    // 0x87b91c: nop             
    // 0x87b920: r0 = "firstTime"
    //     0x87b920: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87b924: ldr             x0, [x0, #0x598]
    // 0x87b928: b               #0x8838b4
    // 0x87b92c: r0 = "normal"
    //     0x87b92c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87b930: ldr             x0, [x0, #0xa78]
    // 0x87b934: b               #0x8838b4
    // 0x87b938: r16 = "nazreeMemoryMiniEvidence2"
    //     0x87b938: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c20] "nazreeMemoryMiniEvidence2"
    //     0x87b93c: ldr             x16, [x16, #0xc20]
    // 0x87b940: ldur            lr, [fp, #-0x28]
    // 0x87b944: stp             lr, x16, [SP]
    // 0x87b948: r0 = ==()
    //     0x87b948: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87b94c: tbnz            w0, #4, #0x87ba38
    // 0x87b950: nop             
    // 0x87b954: r0 = LoadStaticField(0xb54)
    //     0x87b954: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87b958: ldr             x0, [x0, #0x16a8]
    // 0x87b95c: cmp             w0, NULL
    // 0x87b960: b.ne            #0x87b970
    // 0x87b964: nop             
    // 0x87b968: r0 = Null
    //     0x87b968: mov             x0, NULL
    // 0x87b96c: b               #0x87b998
    // 0x87b970: r17 = 351
    //     0x87b970: movz            x17, #0x15f
    // 0x87b974: ldr             w1, [x0, x17]
    // 0x87b978: DecompressPointer r1
    //     0x87b978: add             x1, x1, HEAP, lsl #32
    // 0x87b97c: r0 = LoadClassIdInstr(r1)
    //     0x87b97c: ldur            x0, [x1, #-1]
    //     0x87b980: ubfx            x0, x0, #0xc, #0x14
    // 0x87b984: r2 = "nazreeMemoryMiniEvidence2"
    //     0x87b984: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c20] "nazreeMemoryMiniEvidence2"
    //     0x87b988: ldr             x2, [x2, #0xc20]
    // 0x87b98c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87b98c: sub             lr, x0, #0xb4
    //     0x87b990: ldr             lr, [x21, lr, lsl #3]
    //     0x87b994: blr             lr
    // 0x87b998: cmp             w0, NULL
    // 0x87b99c: b.ne            #0x87b9ac
    // 0x87b9a0: nop             
    // 0x87b9a4: r3 = ""
    //     0x87b9a4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87b9a8: b               #0x87b9b0
    // 0x87b9ac: mov             x3, x0
    // 0x87b9b0: mov             x0, x3
    // 0x87b9b4: stur            x3, [fp, #-8]
    // 0x87b9b8: r2 = Null
    //     0x87b9b8: mov             x2, NULL
    // 0x87b9bc: r1 = Null
    //     0x87b9bc: mov             x1, NULL
    // 0x87b9c0: r4 = 59
    //     0x87b9c0: movz            x4, #0x3b
    // 0x87b9c4: branchIfSmi(r0, 0x87b9d4)
    //     0x87b9c4: tbz             w0, #0, #0x87b9d4
    //     0x87b9c8: nop             
    // 0x87b9cc: r4 = LoadClassIdInstr(r0)
    //     0x87b9cc: ldur            x4, [x0, #-1]
    //     0x87b9d0: ubfx            x4, x4, #0xc, #0x14
    // 0x87b9d4: sub             x4, x4, #0x5d
    // 0x87b9d8: cmp             x4, #1
    // 0x87b9dc: b.ls            #0x87b9f4
    // 0x87b9e0: nop             
    // 0x87b9e4: r8 = String
    //     0x87b9e4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87b9e8: r3 = Null
    //     0x87b9e8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c28] Null
    //     0x87b9ec: ldr             x3, [x3, #0xc28]
    // 0x87b9f0: r0 = String()
    //     0x87b9f0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87b9f4: ldur            x0, [fp, #-8]
    // 0x87b9f8: r1 = LoadClassIdInstr(r0)
    //     0x87b9f8: ldur            x1, [x0, #-1]
    //     0x87b9fc: ubfx            x1, x1, #0xc, #0x14
    // 0x87ba00: r16 = ""
    //     0x87ba00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ba04: stp             x16, x0, [SP]
    // 0x87ba08: mov             x0, x1
    // 0x87ba0c: mov             lr, x0
    // 0x87ba10: ldr             lr, [x21, lr, lsl #3]
    // 0x87ba14: blr             lr
    // 0x87ba18: tbnz            w0, #4, #0x87ba2c
    // 0x87ba1c: nop             
    // 0x87ba20: r0 = "firstTime"
    //     0x87ba20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87ba24: ldr             x0, [x0, #0x598]
    // 0x87ba28: b               #0x8838b4
    // 0x87ba2c: r0 = "normal"
    //     0x87ba2c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87ba30: ldr             x0, [x0, #0xa78]
    // 0x87ba34: b               #0x8838b4
    // 0x87ba38: r16 = "nazreeMemoryMiniEvidence3"
    //     0x87ba38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c38] "nazreeMemoryMiniEvidence3"
    //     0x87ba3c: ldr             x16, [x16, #0xc38]
    // 0x87ba40: ldur            lr, [fp, #-0x28]
    // 0x87ba44: stp             lr, x16, [SP]
    // 0x87ba48: r0 = ==()
    //     0x87ba48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ba4c: tbnz            w0, #4, #0x87bb38
    // 0x87ba50: nop             
    // 0x87ba54: r0 = LoadStaticField(0xb54)
    //     0x87ba54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ba58: ldr             x0, [x0, #0x16a8]
    // 0x87ba5c: cmp             w0, NULL
    // 0x87ba60: b.ne            #0x87ba70
    // 0x87ba64: nop             
    // 0x87ba68: r0 = Null
    //     0x87ba68: mov             x0, NULL
    // 0x87ba6c: b               #0x87ba98
    // 0x87ba70: r17 = 351
    //     0x87ba70: movz            x17, #0x15f
    // 0x87ba74: ldr             w1, [x0, x17]
    // 0x87ba78: DecompressPointer r1
    //     0x87ba78: add             x1, x1, HEAP, lsl #32
    // 0x87ba7c: r0 = LoadClassIdInstr(r1)
    //     0x87ba7c: ldur            x0, [x1, #-1]
    //     0x87ba80: ubfx            x0, x0, #0xc, #0x14
    // 0x87ba84: r2 = "nazreeMemoryMiniEvidence3"
    //     0x87ba84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c38] "nazreeMemoryMiniEvidence3"
    //     0x87ba88: ldr             x2, [x2, #0xc38]
    // 0x87ba8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ba8c: sub             lr, x0, #0xb4
    //     0x87ba90: ldr             lr, [x21, lr, lsl #3]
    //     0x87ba94: blr             lr
    // 0x87ba98: cmp             w0, NULL
    // 0x87ba9c: b.ne            #0x87baac
    // 0x87baa0: nop             
    // 0x87baa4: r3 = ""
    //     0x87baa4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87baa8: b               #0x87bab0
    // 0x87baac: mov             x3, x0
    // 0x87bab0: mov             x0, x3
    // 0x87bab4: stur            x3, [fp, #-8]
    // 0x87bab8: r2 = Null
    //     0x87bab8: mov             x2, NULL
    // 0x87babc: r1 = Null
    //     0x87babc: mov             x1, NULL
    // 0x87bac0: r4 = 59
    //     0x87bac0: movz            x4, #0x3b
    // 0x87bac4: branchIfSmi(r0, 0x87bad4)
    //     0x87bac4: tbz             w0, #0, #0x87bad4
    //     0x87bac8: nop             
    // 0x87bacc: r4 = LoadClassIdInstr(r0)
    //     0x87bacc: ldur            x4, [x0, #-1]
    //     0x87bad0: ubfx            x4, x4, #0xc, #0x14
    // 0x87bad4: sub             x4, x4, #0x5d
    // 0x87bad8: cmp             x4, #1
    // 0x87badc: b.ls            #0x87baf4
    // 0x87bae0: nop             
    // 0x87bae4: r8 = String
    //     0x87bae4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bae8: r3 = Null
    //     0x87bae8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c40] Null
    //     0x87baec: ldr             x3, [x3, #0xc40]
    // 0x87baf0: r0 = String()
    //     0x87baf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87baf4: ldur            x0, [fp, #-8]
    // 0x87baf8: r1 = LoadClassIdInstr(r0)
    //     0x87baf8: ldur            x1, [x0, #-1]
    //     0x87bafc: ubfx            x1, x1, #0xc, #0x14
    // 0x87bb00: r16 = ""
    //     0x87bb00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bb04: stp             x16, x0, [SP]
    // 0x87bb08: mov             x0, x1
    // 0x87bb0c: mov             lr, x0
    // 0x87bb10: ldr             lr, [x21, lr, lsl #3]
    // 0x87bb14: blr             lr
    // 0x87bb18: tbnz            w0, #4, #0x87bb2c
    // 0x87bb1c: nop             
    // 0x87bb20: r0 = "firstTime"
    //     0x87bb20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87bb24: ldr             x0, [x0, #0x598]
    // 0x87bb28: b               #0x8838b4
    // 0x87bb2c: r0 = "normal"
    //     0x87bb2c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87bb30: ldr             x0, [x0, #0xa78]
    // 0x87bb34: b               #0x8838b4
    // 0x87bb38: r16 = "nazreeMemoryMiniEvidence4"
    //     0x87bb38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c50] "nazreeMemoryMiniEvidence4"
    //     0x87bb3c: ldr             x16, [x16, #0xc50]
    // 0x87bb40: ldur            lr, [fp, #-0x28]
    // 0x87bb44: stp             lr, x16, [SP]
    // 0x87bb48: r0 = ==()
    //     0x87bb48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87bb4c: tbnz            w0, #4, #0x87bc38
    // 0x87bb50: nop             
    // 0x87bb54: r0 = LoadStaticField(0xb54)
    //     0x87bb54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87bb58: ldr             x0, [x0, #0x16a8]
    // 0x87bb5c: cmp             w0, NULL
    // 0x87bb60: b.ne            #0x87bb70
    // 0x87bb64: nop             
    // 0x87bb68: r0 = Null
    //     0x87bb68: mov             x0, NULL
    // 0x87bb6c: b               #0x87bb98
    // 0x87bb70: r17 = 351
    //     0x87bb70: movz            x17, #0x15f
    // 0x87bb74: ldr             w1, [x0, x17]
    // 0x87bb78: DecompressPointer r1
    //     0x87bb78: add             x1, x1, HEAP, lsl #32
    // 0x87bb7c: r0 = LoadClassIdInstr(r1)
    //     0x87bb7c: ldur            x0, [x1, #-1]
    //     0x87bb80: ubfx            x0, x0, #0xc, #0x14
    // 0x87bb84: r2 = "nazreeMemoryMiniEvidence4"
    //     0x87bb84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c50] "nazreeMemoryMiniEvidence4"
    //     0x87bb88: ldr             x2, [x2, #0xc50]
    // 0x87bb8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87bb8c: sub             lr, x0, #0xb4
    //     0x87bb90: ldr             lr, [x21, lr, lsl #3]
    //     0x87bb94: blr             lr
    // 0x87bb98: cmp             w0, NULL
    // 0x87bb9c: b.ne            #0x87bbac
    // 0x87bba0: nop             
    // 0x87bba4: r3 = ""
    //     0x87bba4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bba8: b               #0x87bbb0
    // 0x87bbac: mov             x3, x0
    // 0x87bbb0: mov             x0, x3
    // 0x87bbb4: stur            x3, [fp, #-8]
    // 0x87bbb8: r2 = Null
    //     0x87bbb8: mov             x2, NULL
    // 0x87bbbc: r1 = Null
    //     0x87bbbc: mov             x1, NULL
    // 0x87bbc0: r4 = 59
    //     0x87bbc0: movz            x4, #0x3b
    // 0x87bbc4: branchIfSmi(r0, 0x87bbd4)
    //     0x87bbc4: tbz             w0, #0, #0x87bbd4
    //     0x87bbc8: nop             
    // 0x87bbcc: r4 = LoadClassIdInstr(r0)
    //     0x87bbcc: ldur            x4, [x0, #-1]
    //     0x87bbd0: ubfx            x4, x4, #0xc, #0x14
    // 0x87bbd4: sub             x4, x4, #0x5d
    // 0x87bbd8: cmp             x4, #1
    // 0x87bbdc: b.ls            #0x87bbf4
    // 0x87bbe0: nop             
    // 0x87bbe4: r8 = String
    //     0x87bbe4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bbe8: r3 = Null
    //     0x87bbe8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c58] Null
    //     0x87bbec: ldr             x3, [x3, #0xc58]
    // 0x87bbf0: r0 = String()
    //     0x87bbf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87bbf4: ldur            x0, [fp, #-8]
    // 0x87bbf8: r1 = LoadClassIdInstr(r0)
    //     0x87bbf8: ldur            x1, [x0, #-1]
    //     0x87bbfc: ubfx            x1, x1, #0xc, #0x14
    // 0x87bc00: r16 = ""
    //     0x87bc00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bc04: stp             x16, x0, [SP]
    // 0x87bc08: mov             x0, x1
    // 0x87bc0c: mov             lr, x0
    // 0x87bc10: ldr             lr, [x21, lr, lsl #3]
    // 0x87bc14: blr             lr
    // 0x87bc18: tbnz            w0, #4, #0x87bc2c
    // 0x87bc1c: nop             
    // 0x87bc20: r0 = "firstTime"
    //     0x87bc20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87bc24: ldr             x0, [x0, #0x598]
    // 0x87bc28: b               #0x8838b4
    // 0x87bc2c: r0 = "normal"
    //     0x87bc2c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87bc30: ldr             x0, [x0, #0xa78]
    // 0x87bc34: b               #0x8838b4
    // 0x87bc38: r16 = "nazreeMemoryMiniEvidence5"
    //     0x87bc38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c68] "nazreeMemoryMiniEvidence5"
    //     0x87bc3c: ldr             x16, [x16, #0xc68]
    // 0x87bc40: ldur            lr, [fp, #-0x28]
    // 0x87bc44: stp             lr, x16, [SP]
    // 0x87bc48: r0 = ==()
    //     0x87bc48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87bc4c: tbnz            w0, #4, #0x87bd38
    // 0x87bc50: nop             
    // 0x87bc54: r0 = LoadStaticField(0xb54)
    //     0x87bc54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87bc58: ldr             x0, [x0, #0x16a8]
    // 0x87bc5c: cmp             w0, NULL
    // 0x87bc60: b.ne            #0x87bc70
    // 0x87bc64: nop             
    // 0x87bc68: r0 = Null
    //     0x87bc68: mov             x0, NULL
    // 0x87bc6c: b               #0x87bc98
    // 0x87bc70: r17 = 351
    //     0x87bc70: movz            x17, #0x15f
    // 0x87bc74: ldr             w1, [x0, x17]
    // 0x87bc78: DecompressPointer r1
    //     0x87bc78: add             x1, x1, HEAP, lsl #32
    // 0x87bc7c: r0 = LoadClassIdInstr(r1)
    //     0x87bc7c: ldur            x0, [x1, #-1]
    //     0x87bc80: ubfx            x0, x0, #0xc, #0x14
    // 0x87bc84: r2 = "nazreeMemoryMiniEvidence5"
    //     0x87bc84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c68] "nazreeMemoryMiniEvidence5"
    //     0x87bc88: ldr             x2, [x2, #0xc68]
    // 0x87bc8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87bc8c: sub             lr, x0, #0xb4
    //     0x87bc90: ldr             lr, [x21, lr, lsl #3]
    //     0x87bc94: blr             lr
    // 0x87bc98: cmp             w0, NULL
    // 0x87bc9c: b.ne            #0x87bcac
    // 0x87bca0: nop             
    // 0x87bca4: r3 = ""
    //     0x87bca4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bca8: b               #0x87bcb0
    // 0x87bcac: mov             x3, x0
    // 0x87bcb0: mov             x0, x3
    // 0x87bcb4: stur            x3, [fp, #-8]
    // 0x87bcb8: r2 = Null
    //     0x87bcb8: mov             x2, NULL
    // 0x87bcbc: r1 = Null
    //     0x87bcbc: mov             x1, NULL
    // 0x87bcc0: r4 = 59
    //     0x87bcc0: movz            x4, #0x3b
    // 0x87bcc4: branchIfSmi(r0, 0x87bcd4)
    //     0x87bcc4: tbz             w0, #0, #0x87bcd4
    //     0x87bcc8: nop             
    // 0x87bccc: r4 = LoadClassIdInstr(r0)
    //     0x87bccc: ldur            x4, [x0, #-1]
    //     0x87bcd0: ubfx            x4, x4, #0xc, #0x14
    // 0x87bcd4: sub             x4, x4, #0x5d
    // 0x87bcd8: cmp             x4, #1
    // 0x87bcdc: b.ls            #0x87bcf4
    // 0x87bce0: nop             
    // 0x87bce4: r8 = String
    //     0x87bce4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bce8: r3 = Null
    //     0x87bce8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c70] Null
    //     0x87bcec: ldr             x3, [x3, #0xc70]
    // 0x87bcf0: r0 = String()
    //     0x87bcf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87bcf4: ldur            x0, [fp, #-8]
    // 0x87bcf8: r1 = LoadClassIdInstr(r0)
    //     0x87bcf8: ldur            x1, [x0, #-1]
    //     0x87bcfc: ubfx            x1, x1, #0xc, #0x14
    // 0x87bd00: r16 = ""
    //     0x87bd00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bd04: stp             x16, x0, [SP]
    // 0x87bd08: mov             x0, x1
    // 0x87bd0c: mov             lr, x0
    // 0x87bd10: ldr             lr, [x21, lr, lsl #3]
    // 0x87bd14: blr             lr
    // 0x87bd18: tbnz            w0, #4, #0x87bd2c
    // 0x87bd1c: nop             
    // 0x87bd20: r0 = "firstTime"
    //     0x87bd20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87bd24: ldr             x0, [x0, #0x598]
    // 0x87bd28: b               #0x8838b4
    // 0x87bd2c: r0 = "normal"
    //     0x87bd2c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87bd30: ldr             x0, [x0, #0xa78]
    // 0x87bd34: b               #0x8838b4
    // 0x87bd38: r16 = "nazreeMemoryMiniEvidence6"
    //     0x87bd38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c80] "nazreeMemoryMiniEvidence6"
    //     0x87bd3c: ldr             x16, [x16, #0xc80]
    // 0x87bd40: ldur            lr, [fp, #-0x28]
    // 0x87bd44: stp             lr, x16, [SP]
    // 0x87bd48: r0 = ==()
    //     0x87bd48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87bd4c: tbnz            w0, #4, #0x87be38
    // 0x87bd50: nop             
    // 0x87bd54: r0 = LoadStaticField(0xb54)
    //     0x87bd54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87bd58: ldr             x0, [x0, #0x16a8]
    // 0x87bd5c: cmp             w0, NULL
    // 0x87bd60: b.ne            #0x87bd70
    // 0x87bd64: nop             
    // 0x87bd68: r0 = Null
    //     0x87bd68: mov             x0, NULL
    // 0x87bd6c: b               #0x87bd98
    // 0x87bd70: r17 = 351
    //     0x87bd70: movz            x17, #0x15f
    // 0x87bd74: ldr             w1, [x0, x17]
    // 0x87bd78: DecompressPointer r1
    //     0x87bd78: add             x1, x1, HEAP, lsl #32
    // 0x87bd7c: r0 = LoadClassIdInstr(r1)
    //     0x87bd7c: ldur            x0, [x1, #-1]
    //     0x87bd80: ubfx            x0, x0, #0xc, #0x14
    // 0x87bd84: r2 = "nazreeMemoryMiniEvidence6"
    //     0x87bd84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11c80] "nazreeMemoryMiniEvidence6"
    //     0x87bd88: ldr             x2, [x2, #0xc80]
    // 0x87bd8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87bd8c: sub             lr, x0, #0xb4
    //     0x87bd90: ldr             lr, [x21, lr, lsl #3]
    //     0x87bd94: blr             lr
    // 0x87bd98: cmp             w0, NULL
    // 0x87bd9c: b.ne            #0x87bdac
    // 0x87bda0: nop             
    // 0x87bda4: r3 = ""
    //     0x87bda4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bda8: b               #0x87bdb0
    // 0x87bdac: mov             x3, x0
    // 0x87bdb0: mov             x0, x3
    // 0x87bdb4: stur            x3, [fp, #-8]
    // 0x87bdb8: r2 = Null
    //     0x87bdb8: mov             x2, NULL
    // 0x87bdbc: r1 = Null
    //     0x87bdbc: mov             x1, NULL
    // 0x87bdc0: r4 = 59
    //     0x87bdc0: movz            x4, #0x3b
    // 0x87bdc4: branchIfSmi(r0, 0x87bdd4)
    //     0x87bdc4: tbz             w0, #0, #0x87bdd4
    //     0x87bdc8: nop             
    // 0x87bdcc: r4 = LoadClassIdInstr(r0)
    //     0x87bdcc: ldur            x4, [x0, #-1]
    //     0x87bdd0: ubfx            x4, x4, #0xc, #0x14
    // 0x87bdd4: sub             x4, x4, #0x5d
    // 0x87bdd8: cmp             x4, #1
    // 0x87bddc: b.ls            #0x87bdf4
    // 0x87bde0: nop             
    // 0x87bde4: r8 = String
    //     0x87bde4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bde8: r3 = Null
    //     0x87bde8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11c88] Null
    //     0x87bdec: ldr             x3, [x3, #0xc88]
    // 0x87bdf0: r0 = String()
    //     0x87bdf0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87bdf4: ldur            x0, [fp, #-8]
    // 0x87bdf8: r1 = LoadClassIdInstr(r0)
    //     0x87bdf8: ldur            x1, [x0, #-1]
    //     0x87bdfc: ubfx            x1, x1, #0xc, #0x14
    // 0x87be00: r16 = ""
    //     0x87be00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87be04: stp             x16, x0, [SP]
    // 0x87be08: mov             x0, x1
    // 0x87be0c: mov             lr, x0
    // 0x87be10: ldr             lr, [x21, lr, lsl #3]
    // 0x87be14: blr             lr
    // 0x87be18: tbnz            w0, #4, #0x87be2c
    // 0x87be1c: nop             
    // 0x87be20: r0 = "firstTime"
    //     0x87be20: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x87be24: ldr             x0, [x0, #0x598]
    // 0x87be28: b               #0x8838b4
    // 0x87be2c: r0 = "normal"
    //     0x87be2c: add             x0, PP, #0xd, lsl #12  ; [pp+0xda78] "normal"
    //     0x87be30: ldr             x0, [x0, #0xa78]
    // 0x87be34: b               #0x8838b4
    // 0x87be38: r16 = "nazreeMemoryTan"
    //     0x87be38: add             x16, PP, #0x11, lsl #12  ; [pp+0x11c98] "nazreeMemoryTan"
    //     0x87be3c: ldr             x16, [x16, #0xc98]
    // 0x87be40: ldur            lr, [fp, #-0x28]
    // 0x87be44: stp             lr, x16, [SP]
    // 0x87be48: r0 = ==()
    //     0x87be48: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87be4c: tbnz            w0, #4, #0x87bf34
    // 0x87be50: nop             
    // 0x87be54: r0 = LoadStaticField(0xb54)
    //     0x87be54: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87be58: ldr             x0, [x0, #0x16a8]
    // 0x87be5c: cmp             w0, NULL
    // 0x87be60: b.ne            #0x87be70
    // 0x87be64: nop             
    // 0x87be68: r0 = Null
    //     0x87be68: mov             x0, NULL
    // 0x87be6c: b               #0x87be98
    // 0x87be70: r17 = 351
    //     0x87be70: movz            x17, #0x15f
    // 0x87be74: ldr             w1, [x0, x17]
    // 0x87be78: DecompressPointer r1
    //     0x87be78: add             x1, x1, HEAP, lsl #32
    // 0x87be7c: r0 = LoadClassIdInstr(r1)
    //     0x87be7c: ldur            x0, [x1, #-1]
    //     0x87be80: ubfx            x0, x0, #0xc, #0x14
    // 0x87be84: r2 = "nazreeMemoryEvidence2"
    //     0x87be84: add             x2, PP, #0x11, lsl #12  ; [pp+0x11b28] "nazreeMemoryEvidence2"
    //     0x87be88: ldr             x2, [x2, #0xb28]
    // 0x87be8c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87be8c: sub             lr, x0, #0xb4
    //     0x87be90: ldr             lr, [x21, lr, lsl #3]
    //     0x87be94: blr             lr
    // 0x87be98: cmp             w0, NULL
    // 0x87be9c: b.ne            #0x87beac
    // 0x87bea0: nop             
    // 0x87bea4: r3 = ""
    //     0x87bea4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bea8: b               #0x87beb0
    // 0x87beac: mov             x3, x0
    // 0x87beb0: mov             x0, x3
    // 0x87beb4: stur            x3, [fp, #-8]
    // 0x87beb8: r2 = Null
    //     0x87beb8: mov             x2, NULL
    // 0x87bebc: r1 = Null
    //     0x87bebc: mov             x1, NULL
    // 0x87bec0: r4 = 59
    //     0x87bec0: movz            x4, #0x3b
    // 0x87bec4: branchIfSmi(r0, 0x87bed4)
    //     0x87bec4: tbz             w0, #0, #0x87bed4
    //     0x87bec8: nop             
    // 0x87becc: r4 = LoadClassIdInstr(r0)
    //     0x87becc: ldur            x4, [x0, #-1]
    //     0x87bed0: ubfx            x4, x4, #0xc, #0x14
    // 0x87bed4: sub             x4, x4, #0x5d
    // 0x87bed8: cmp             x4, #1
    // 0x87bedc: b.ls            #0x87bef4
    // 0x87bee0: nop             
    // 0x87bee4: r8 = String
    //     0x87bee4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bee8: r3 = Null
    //     0x87bee8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ca0] Null
    //     0x87beec: ldr             x3, [x3, #0xca0]
    // 0x87bef0: r0 = String()
    //     0x87bef0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87bef4: ldur            x0, [fp, #-8]
    // 0x87bef8: r1 = LoadClassIdInstr(r0)
    //     0x87bef8: ldur            x1, [x0, #-1]
    //     0x87befc: ubfx            x1, x1, #0xc, #0x14
    // 0x87bf00: r16 = ""
    //     0x87bf00: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bf04: stp             x16, x0, [SP]
    // 0x87bf08: mov             x0, x1
    // 0x87bf0c: mov             lr, x0
    // 0x87bf10: ldr             lr, [x21, lr, lsl #3]
    // 0x87bf14: blr             lr
    // 0x87bf18: tbnz            w0, #4, #0x87bf28
    // 0x87bf1c: nop             
    // 0x87bf20: r0 = "end"
    //     0x87bf20: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87bf24: b               #0x8838b4
    // 0x87bf28: r0 = "nazreeMemoryTan"
    //     0x87bf28: add             x0, PP, #0x11, lsl #12  ; [pp+0x11c98] "nazreeMemoryTan"
    //     0x87bf2c: ldr             x0, [x0, #0xc98]
    // 0x87bf30: b               #0x8838b4
    // 0x87bf34: r16 = "nazreeMemory4Legend"
    //     0x87bf34: add             x16, PP, #0x11, lsl #12  ; [pp+0x11cb0] "nazreeMemory4Legend"
    //     0x87bf38: ldr             x16, [x16, #0xcb0]
    // 0x87bf3c: ldur            lr, [fp, #-0x28]
    // 0x87bf40: stp             lr, x16, [SP]
    // 0x87bf44: r0 = ==()
    //     0x87bf44: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87bf48: tbnz            w0, #4, #0x87c068
    // 0x87bf4c: nop             
    // 0x87bf50: r0 = LoadStaticField(0xb54)
    //     0x87bf50: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87bf54: ldr             x0, [x0, #0x16a8]
    // 0x87bf58: cmp             w0, NULL
    // 0x87bf5c: b.ne            #0x87bf6c
    // 0x87bf60: nop             
    // 0x87bf64: r0 = Null
    //     0x87bf64: mov             x0, NULL
    // 0x87bf68: b               #0x87bf94
    // 0x87bf6c: r17 = 351
    //     0x87bf6c: movz            x17, #0x15f
    // 0x87bf70: ldr             w1, [x0, x17]
    // 0x87bf74: DecompressPointer r1
    //     0x87bf74: add             x1, x1, HEAP, lsl #32
    // 0x87bf78: r0 = LoadClassIdInstr(r1)
    //     0x87bf78: ldur            x0, [x1, #-1]
    //     0x87bf7c: ubfx            x0, x0, #0xc, #0x14
    // 0x87bf80: r2 = "nazreeMemory4Legend"
    //     0x87bf80: add             x2, PP, #0x11, lsl #12  ; [pp+0x11cb0] "nazreeMemory4Legend"
    //     0x87bf84: ldr             x2, [x2, #0xcb0]
    // 0x87bf88: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87bf88: sub             lr, x0, #0xb4
    //     0x87bf8c: ldr             lr, [x21, lr, lsl #3]
    //     0x87bf90: blr             lr
    // 0x87bf94: cmp             w0, NULL
    // 0x87bf98: b.ne            #0x87bfa8
    // 0x87bf9c: nop             
    // 0x87bfa0: r3 = ""
    //     0x87bfa0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87bfa4: b               #0x87bfac
    // 0x87bfa8: mov             x3, x0
    // 0x87bfac: mov             x0, x3
    // 0x87bfb0: stur            x3, [fp, #-8]
    // 0x87bfb4: r2 = Null
    //     0x87bfb4: mov             x2, NULL
    // 0x87bfb8: r1 = Null
    //     0x87bfb8: mov             x1, NULL
    // 0x87bfbc: r4 = 59
    //     0x87bfbc: movz            x4, #0x3b
    // 0x87bfc0: branchIfSmi(r0, 0x87bfd0)
    //     0x87bfc0: tbz             w0, #0, #0x87bfd0
    //     0x87bfc4: nop             
    // 0x87bfc8: r4 = LoadClassIdInstr(r0)
    //     0x87bfc8: ldur            x4, [x0, #-1]
    //     0x87bfcc: ubfx            x4, x4, #0xc, #0x14
    // 0x87bfd0: sub             x4, x4, #0x5d
    // 0x87bfd4: cmp             x4, #1
    // 0x87bfd8: b.ls            #0x87bff0
    // 0x87bfdc: nop             
    // 0x87bfe0: r8 = String
    //     0x87bfe0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87bfe4: r3 = Null
    //     0x87bfe4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11cb8] Null
    //     0x87bfe8: ldr             x3, [x3, #0xcb8]
    // 0x87bfec: r0 = String()
    //     0x87bfec: bl              #0x1523244  ; IsType_String_Stub
    // 0x87bff0: ldur            x1, [fp, #-8]
    // 0x87bff4: r0 = LoadClassIdInstr(r1)
    //     0x87bff4: ldur            x0, [x1, #-1]
    //     0x87bff8: ubfx            x0, x0, #0xc, #0x14
    // 0x87bffc: r16 = ""
    //     0x87bffc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c000: stp             x16, x1, [SP]
    // 0x87c004: mov             lr, x0
    // 0x87c008: ldr             lr, [x21, lr, lsl #3]
    // 0x87c00c: blr             lr
    // 0x87c010: tbnz            w0, #4, #0x87c024
    // 0x87c014: nop             
    // 0x87c018: r0 = "nazreeMemory4Legend"
    //     0x87c018: add             x0, PP, #0x11, lsl #12  ; [pp+0x11cb0] "nazreeMemory4Legend"
    //     0x87c01c: ldr             x0, [x0, #0xcb0]
    // 0x87c020: b               #0x8838b4
    // 0x87c024: ldur            x0, [fp, #-8]
    // 0x87c028: r1 = LoadClassIdInstr(r0)
    //     0x87c028: ldur            x1, [x0, #-1]
    //     0x87c02c: ubfx            x1, x1, #0xc, #0x14
    // 0x87c030: r16 = "progress"
    //     0x87c030: ldr             x16, [PP, #0x1ac0]  ; [pp+0x1ac0] "progress"
    // 0x87c034: stp             x16, x0, [SP]
    // 0x87c038: mov             x0, x1
    // 0x87c03c: mov             lr, x0
    // 0x87c040: ldr             lr, [x21, lr, lsl #3]
    // 0x87c044: blr             lr
    // 0x87c048: tbnz            w0, #4, #0x87c05c
    // 0x87c04c: nop             
    // 0x87c050: r0 = "nazreeMemory4LegendContinue"
    //     0x87c050: add             x0, PP, #0x11, lsl #12  ; [pp+0x11cc8] "nazreeMemory4LegendContinue"
    //     0x87c054: ldr             x0, [x0, #0xcc8]
    // 0x87c058: b               #0x8838b4
    // 0x87c05c: r0 = "complete"
    //     0x87c05c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87c060: ldr             x0, [x0, #0x590]
    // 0x87c064: b               #0x8838b4
    // 0x87c068: r16 = "nazreeMemoryManager"
    //     0x87c068: add             x16, PP, #0x11, lsl #12  ; [pp+0x11cd0] "nazreeMemoryManager"
    //     0x87c06c: ldr             x16, [x16, #0xcd0]
    // 0x87c070: ldur            lr, [fp, #-0x28]
    // 0x87c074: stp             lr, x16, [SP]
    // 0x87c078: r0 = ==()
    //     0x87c078: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c07c: tbnz            w0, #4, #0x87c168
    // 0x87c080: nop             
    // 0x87c084: r0 = LoadStaticField(0xb54)
    //     0x87c084: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c088: ldr             x0, [x0, #0x16a8]
    // 0x87c08c: cmp             w0, NULL
    // 0x87c090: b.ne            #0x87c0a0
    // 0x87c094: nop             
    // 0x87c098: r0 = Null
    //     0x87c098: mov             x0, NULL
    // 0x87c09c: b               #0x87c0c8
    // 0x87c0a0: r17 = 351
    //     0x87c0a0: movz            x17, #0x15f
    // 0x87c0a4: ldr             w1, [x0, x17]
    // 0x87c0a8: DecompressPointer r1
    //     0x87c0a8: add             x1, x1, HEAP, lsl #32
    // 0x87c0ac: r0 = LoadClassIdInstr(r1)
    //     0x87c0ac: ldur            x0, [x1, #-1]
    //     0x87c0b0: ubfx            x0, x0, #0xc, #0x14
    // 0x87c0b4: r2 = "nazreeMemoryManager"
    //     0x87c0b4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11cd0] "nazreeMemoryManager"
    //     0x87c0b8: ldr             x2, [x2, #0xcd0]
    // 0x87c0bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c0bc: sub             lr, x0, #0xb4
    //     0x87c0c0: ldr             lr, [x21, lr, lsl #3]
    //     0x87c0c4: blr             lr
    // 0x87c0c8: cmp             w0, NULL
    // 0x87c0cc: b.ne            #0x87c0dc
    // 0x87c0d0: nop             
    // 0x87c0d4: r3 = ""
    //     0x87c0d4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c0d8: b               #0x87c0e0
    // 0x87c0dc: mov             x3, x0
    // 0x87c0e0: mov             x0, x3
    // 0x87c0e4: stur            x3, [fp, #-8]
    // 0x87c0e8: r2 = Null
    //     0x87c0e8: mov             x2, NULL
    // 0x87c0ec: r1 = Null
    //     0x87c0ec: mov             x1, NULL
    // 0x87c0f0: r4 = 59
    //     0x87c0f0: movz            x4, #0x3b
    // 0x87c0f4: branchIfSmi(r0, 0x87c104)
    //     0x87c0f4: tbz             w0, #0, #0x87c104
    //     0x87c0f8: nop             
    // 0x87c0fc: r4 = LoadClassIdInstr(r0)
    //     0x87c0fc: ldur            x4, [x0, #-1]
    //     0x87c100: ubfx            x4, x4, #0xc, #0x14
    // 0x87c104: sub             x4, x4, #0x5d
    // 0x87c108: cmp             x4, #1
    // 0x87c10c: b.ls            #0x87c124
    // 0x87c110: nop             
    // 0x87c114: r8 = String
    //     0x87c114: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c118: r3 = Null
    //     0x87c118: add             x3, PP, #0x11, lsl #12  ; [pp+0x11cd8] Null
    //     0x87c11c: ldr             x3, [x3, #0xcd8]
    // 0x87c120: r0 = String()
    //     0x87c120: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c124: ldur            x0, [fp, #-8]
    // 0x87c128: r1 = LoadClassIdInstr(r0)
    //     0x87c128: ldur            x1, [x0, #-1]
    //     0x87c12c: ubfx            x1, x1, #0xc, #0x14
    // 0x87c130: r16 = ""
    //     0x87c130: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c134: stp             x16, x0, [SP]
    // 0x87c138: mov             x0, x1
    // 0x87c13c: mov             lr, x0
    // 0x87c140: ldr             lr, [x21, lr, lsl #3]
    // 0x87c144: blr             lr
    // 0x87c148: tbnz            w0, #4, #0x87c15c
    // 0x87c14c: nop             
    // 0x87c150: r0 = "nazreeMemoryManager"
    //     0x87c150: add             x0, PP, #0x11, lsl #12  ; [pp+0x11cd0] "nazreeMemoryManager"
    //     0x87c154: ldr             x0, [x0, #0xcd0]
    // 0x87c158: b               #0x8838b4
    // 0x87c15c: r0 = "complete"
    //     0x87c15c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87c160: ldr             x0, [x0, #0x590]
    // 0x87c164: b               #0x8838b4
    // 0x87c168: r16 = "yukiMemoryTimeOut"
    //     0x87c168: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ce8] "yukiMemoryTimeOut"
    //     0x87c16c: ldr             x16, [x16, #0xce8]
    // 0x87c170: ldur            lr, [fp, #-0x28]
    // 0x87c174: stp             lr, x16, [SP]
    // 0x87c178: r0 = ==()
    //     0x87c178: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c17c: tbnz            w0, #4, #0x87c254
    // 0x87c180: nop             
    // 0x87c184: r0 = LoadStaticField(0xb54)
    //     0x87c184: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c188: ldr             x0, [x0, #0x16a8]
    // 0x87c18c: cmp             w0, NULL
    // 0x87c190: b.ne            #0x87c1a0
    // 0x87c194: nop             
    // 0x87c198: r0 = Null
    //     0x87c198: mov             x0, NULL
    // 0x87c19c: b               #0x87c1c8
    // 0x87c1a0: r17 = 347
    //     0x87c1a0: movz            x17, #0x15b
    // 0x87c1a4: ldr             w1, [x0, x17]
    // 0x87c1a8: DecompressPointer r1
    //     0x87c1a8: add             x1, x1, HEAP, lsl #32
    // 0x87c1ac: r0 = LoadClassIdInstr(r1)
    //     0x87c1ac: ldur            x0, [x1, #-1]
    //     0x87c1b0: ubfx            x0, x0, #0xc, #0x14
    // 0x87c1b4: r2 = "memoryTimerReduce"
    //     0x87c1b4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x87c1b8: ldr             x2, [x2, #0xa30]
    // 0x87c1bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c1bc: sub             lr, x0, #0xb4
    //     0x87c1c0: ldr             lr, [x21, lr, lsl #3]
    //     0x87c1c4: blr             lr
    // 0x87c1c8: cmp             w0, NULL
    // 0x87c1cc: b.ne            #0x87c1dc
    // 0x87c1d0: nop             
    // 0x87c1d4: r3 = 0
    //     0x87c1d4: movz            x3, #0
    // 0x87c1d8: b               #0x87c1e0
    // 0x87c1dc: mov             x3, x0
    // 0x87c1e0: mov             x0, x3
    // 0x87c1e4: stur            x3, [fp, #-8]
    // 0x87c1e8: r2 = Null
    //     0x87c1e8: mov             x2, NULL
    // 0x87c1ec: r1 = Null
    //     0x87c1ec: mov             x1, NULL
    // 0x87c1f0: branchIfSmi(r0, 0x87c220)
    //     0x87c1f0: tbz             w0, #0, #0x87c220
    //     0x87c1f4: nop             
    // 0x87c1f8: r4 = LoadClassIdInstr(r0)
    //     0x87c1f8: ldur            x4, [x0, #-1]
    //     0x87c1fc: ubfx            x4, x4, #0xc, #0x14
    // 0x87c200: sub             x4, x4, #0x3b
    // 0x87c204: cmp             x4, #1
    // 0x87c208: b.ls            #0x87c220
    // 0x87c20c: nop             
    // 0x87c210: r8 = int
    //     0x87c210: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x87c214: r3 = Null
    //     0x87c214: add             x3, PP, #0x11, lsl #12  ; [pp+0x11cf0] Null
    //     0x87c218: ldr             x3, [x3, #0xcf0]
    // 0x87c21c: r0 = int()
    //     0x87c21c: bl              #0x1524294  ; IsType_int_Stub
    // 0x87c220: ldur            x0, [fp, #-8]
    // 0x87c224: r1 = LoadInt32Instr(r0)
    //     0x87c224: sbfx            x1, x0, #1, #0x1f
    //     0x87c228: tbz             w0, #0, #0x87c234
    //     0x87c22c: nop             
    //     0x87c230: ldur            x1, [x0, #7]
    // 0x87c234: cmp             x1, #0xc
    // 0x87c238: b.ge            #0x87c248
    // 0x87c23c: nop             
    // 0x87c240: r0 = ""
    //     0x87c240: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c244: b               #0x8838b4
    // 0x87c248: r0 = "searchCounterFail"
    //     0x87c248: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d00] "searchCounterFail"
    //     0x87c24c: ldr             x0, [x0, #0xd00]
    // 0x87c250: b               #0x8838b4
    // 0x87c254: r16 = "yukiMemorySean"
    //     0x87c254: add             x16, PP, #0x11, lsl #12  ; [pp+0x11d08] "yukiMemorySean"
    //     0x87c258: ldr             x16, [x16, #0xd08]
    // 0x87c25c: ldur            lr, [fp, #-0x28]
    // 0x87c260: stp             lr, x16, [SP]
    // 0x87c264: r0 = ==()
    //     0x87c264: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c268: tbnz            w0, #4, #0x87c428
    // 0x87c26c: nop             
    // 0x87c270: r0 = LoadStaticField(0xb54)
    //     0x87c270: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c274: ldr             x0, [x0, #0x16a8]
    // 0x87c278: cmp             w0, NULL
    // 0x87c27c: b.ne            #0x87c28c
    // 0x87c280: nop             
    // 0x87c284: r0 = Null
    //     0x87c284: mov             x0, NULL
    // 0x87c288: b               #0x87c2b4
    // 0x87c28c: r17 = 351
    //     0x87c28c: movz            x17, #0x15f
    // 0x87c290: ldr             w1, [x0, x17]
    // 0x87c294: DecompressPointer r1
    //     0x87c294: add             x1, x1, HEAP, lsl #32
    // 0x87c298: r0 = LoadClassIdInstr(r1)
    //     0x87c298: ldur            x0, [x1, #-1]
    //     0x87c29c: ubfx            x0, x0, #0xc, #0x14
    // 0x87c2a0: r2 = "yukiMemoryBusinessDistrict"
    //     0x87c2a0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d10] "yukiMemoryBusinessDistrict"
    //     0x87c2a4: ldr             x2, [x2, #0xd10]
    // 0x87c2a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c2a8: sub             lr, x0, #0xb4
    //     0x87c2ac: ldr             lr, [x21, lr, lsl #3]
    //     0x87c2b0: blr             lr
    // 0x87c2b4: cmp             w0, NULL
    // 0x87c2b8: b.ne            #0x87c2c8
    // 0x87c2bc: nop             
    // 0x87c2c0: r3 = ""
    //     0x87c2c0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c2c4: b               #0x87c2cc
    // 0x87c2c8: mov             x3, x0
    // 0x87c2cc: mov             x0, x3
    // 0x87c2d0: stur            x3, [fp, #-8]
    // 0x87c2d4: r2 = Null
    //     0x87c2d4: mov             x2, NULL
    // 0x87c2d8: r1 = Null
    //     0x87c2d8: mov             x1, NULL
    // 0x87c2dc: r4 = 59
    //     0x87c2dc: movz            x4, #0x3b
    // 0x87c2e0: branchIfSmi(r0, 0x87c2f0)
    //     0x87c2e0: tbz             w0, #0, #0x87c2f0
    //     0x87c2e4: nop             
    // 0x87c2e8: r4 = LoadClassIdInstr(r0)
    //     0x87c2e8: ldur            x4, [x0, #-1]
    //     0x87c2ec: ubfx            x4, x4, #0xc, #0x14
    // 0x87c2f0: sub             x4, x4, #0x5d
    // 0x87c2f4: cmp             x4, #1
    // 0x87c2f8: b.ls            #0x87c310
    // 0x87c2fc: nop             
    // 0x87c300: r8 = String
    //     0x87c300: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c304: r3 = Null
    //     0x87c304: add             x3, PP, #0x11, lsl #12  ; [pp+0x11d18] Null
    //     0x87c308: ldr             x3, [x3, #0xd18]
    // 0x87c30c: r0 = String()
    //     0x87c30c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c310: ldur            x1, [fp, #-8]
    // 0x87c314: r0 = LoadClassIdInstr(r1)
    //     0x87c314: ldur            x0, [x1, #-1]
    //     0x87c318: ubfx            x0, x0, #0xc, #0x14
    // 0x87c31c: r16 = ""
    //     0x87c31c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c320: stp             x16, x1, [SP]
    // 0x87c324: mov             lr, x0
    // 0x87c328: ldr             lr, [x21, lr, lsl #3]
    // 0x87c32c: blr             lr
    // 0x87c330: tbnz            w0, #4, #0x87c344
    // 0x87c334: nop             
    // 0x87c338: r0 = "yukiMemorySean"
    //     0x87c338: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d08] "yukiMemorySean"
    //     0x87c33c: ldr             x0, [x0, #0xd08]
    // 0x87c340: b               #0x8838b4
    // 0x87c344: ldur            x1, [fp, #-8]
    // 0x87c348: r0 = LoadClassIdInstr(r1)
    //     0x87c348: ldur            x0, [x1, #-1]
    //     0x87c34c: ubfx            x0, x0, #0xc, #0x14
    // 0x87c350: r16 = "1"
    //     0x87c350: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87c354: ldr             x16, [x16, #0x6a0]
    // 0x87c358: stp             x16, x1, [SP]
    // 0x87c35c: mov             lr, x0
    // 0x87c360: ldr             lr, [x21, lr, lsl #3]
    // 0x87c364: blr             lr
    // 0x87c368: tbnz            w0, #4, #0x87c37c
    // 0x87c36c: nop             
    // 0x87c370: r0 = "yukiMemorySean2"
    //     0x87c370: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d28] "yukiMemorySean2"
    //     0x87c374: ldr             x0, [x0, #0xd28]
    // 0x87c378: b               #0x8838b4
    // 0x87c37c: ldur            x1, [fp, #-8]
    // 0x87c380: r0 = LoadClassIdInstr(r1)
    //     0x87c380: ldur            x0, [x1, #-1]
    //     0x87c384: ubfx            x0, x0, #0xc, #0x14
    // 0x87c388: r16 = "2"
    //     0x87c388: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87c38c: ldr             x16, [x16, #0x6a8]
    // 0x87c390: stp             x16, x1, [SP]
    // 0x87c394: mov             lr, x0
    // 0x87c398: ldr             lr, [x21, lr, lsl #3]
    // 0x87c39c: blr             lr
    // 0x87c3a0: tbz             w0, #4, #0x87c3d4
    // 0x87c3a4: nop             
    // 0x87c3a8: ldur            x1, [fp, #-8]
    // 0x87c3ac: r0 = LoadClassIdInstr(r1)
    //     0x87c3ac: ldur            x0, [x1, #-1]
    //     0x87c3b0: ubfx            x0, x0, #0xc, #0x14
    // 0x87c3b4: r16 = "3"
    //     0x87c3b4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87c3b8: ldr             x16, [x16, #0x6b0]
    // 0x87c3bc: stp             x16, x1, [SP]
    // 0x87c3c0: mov             lr, x0
    // 0x87c3c4: ldr             lr, [x21, lr, lsl #3]
    // 0x87c3c8: blr             lr
    // 0x87c3cc: tbnz            w0, #4, #0x87c3e0
    // 0x87c3d0: nop             
    // 0x87c3d4: r0 = "yukiMemorySean3"
    //     0x87c3d4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d30] "yukiMemorySean3"
    //     0x87c3d8: ldr             x0, [x0, #0xd30]
    // 0x87c3dc: b               #0x8838b4
    // 0x87c3e0: ldur            x0, [fp, #-8]
    // 0x87c3e4: r1 = LoadClassIdInstr(r0)
    //     0x87c3e4: ldur            x1, [x0, #-1]
    //     0x87c3e8: ubfx            x1, x1, #0xc, #0x14
    // 0x87c3ec: r16 = "4"
    //     0x87c3ec: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87c3f0: ldr             x16, [x16, #0x6b8]
    // 0x87c3f4: stp             x16, x0, [SP]
    // 0x87c3f8: mov             x0, x1
    // 0x87c3fc: mov             lr, x0
    // 0x87c400: ldr             lr, [x21, lr, lsl #3]
    // 0x87c404: blr             lr
    // 0x87c408: tbnz            w0, #4, #0x87c41c
    // 0x87c40c: nop             
    // 0x87c410: r0 = "yukiMemorySean4"
    //     0x87c410: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d38] "yukiMemorySean4"
    //     0x87c414: ldr             x0, [x0, #0xd38]
    // 0x87c418: b               #0x8838b4
    // 0x87c41c: r0 = "yukiMemorySean"
    //     0x87c41c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d08] "yukiMemorySean"
    //     0x87c420: ldr             x0, [x0, #0xd08]
    // 0x87c424: b               #0x8838b4
    // 0x87c428: r16 = "yukiMemoryBusinessDistrict"
    //     0x87c428: add             x16, PP, #0x11, lsl #12  ; [pp+0x11d10] "yukiMemoryBusinessDistrict"
    //     0x87c42c: ldr             x16, [x16, #0xd10]
    // 0x87c430: ldur            lr, [fp, #-0x28]
    // 0x87c434: stp             lr, x16, [SP]
    // 0x87c438: r0 = ==()
    //     0x87c438: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c43c: tbnz            w0, #4, #0x87c740
    // 0x87c440: nop             
    // 0x87c444: r0 = LoadStaticField(0xb54)
    //     0x87c444: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c448: ldr             x0, [x0, #0x16a8]
    // 0x87c44c: cmp             w0, NULL
    // 0x87c450: b.ne            #0x87c460
    // 0x87c454: nop             
    // 0x87c458: r0 = Null
    //     0x87c458: mov             x0, NULL
    // 0x87c45c: b               #0x87c488
    // 0x87c460: r17 = 351
    //     0x87c460: movz            x17, #0x15f
    // 0x87c464: ldr             w1, [x0, x17]
    // 0x87c468: DecompressPointer r1
    //     0x87c468: add             x1, x1, HEAP, lsl #32
    // 0x87c46c: r0 = LoadClassIdInstr(r1)
    //     0x87c46c: ldur            x0, [x1, #-1]
    //     0x87c470: ubfx            x0, x0, #0xc, #0x14
    // 0x87c474: r2 = "yukiMemoryBusinessDistrict"
    //     0x87c474: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d10] "yukiMemoryBusinessDistrict"
    //     0x87c478: ldr             x2, [x2, #0xd10]
    // 0x87c47c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c47c: sub             lr, x0, #0xb4
    //     0x87c480: ldr             lr, [x21, lr, lsl #3]
    //     0x87c484: blr             lr
    // 0x87c488: cmp             w0, NULL
    // 0x87c48c: b.ne            #0x87c49c
    // 0x87c490: nop             
    // 0x87c494: r3 = ""
    //     0x87c494: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c498: b               #0x87c4a0
    // 0x87c49c: mov             x3, x0
    // 0x87c4a0: mov             x0, x3
    // 0x87c4a4: stur            x3, [fp, #-8]
    // 0x87c4a8: r2 = Null
    //     0x87c4a8: mov             x2, NULL
    // 0x87c4ac: r1 = Null
    //     0x87c4ac: mov             x1, NULL
    // 0x87c4b0: r4 = 59
    //     0x87c4b0: movz            x4, #0x3b
    // 0x87c4b4: branchIfSmi(r0, 0x87c4c4)
    //     0x87c4b4: tbz             w0, #0, #0x87c4c4
    //     0x87c4b8: nop             
    // 0x87c4bc: r4 = LoadClassIdInstr(r0)
    //     0x87c4bc: ldur            x4, [x0, #-1]
    //     0x87c4c0: ubfx            x4, x4, #0xc, #0x14
    // 0x87c4c4: sub             x4, x4, #0x5d
    // 0x87c4c8: cmp             x4, #1
    // 0x87c4cc: b.ls            #0x87c4e4
    // 0x87c4d0: nop             
    // 0x87c4d4: r8 = String
    //     0x87c4d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c4d8: r3 = Null
    //     0x87c4d8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11d40] Null
    //     0x87c4dc: ldr             x3, [x3, #0xd40]
    // 0x87c4e0: r0 = String()
    //     0x87c4e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c4e4: r0 = LoadStaticField(0xb54)
    //     0x87c4e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c4e8: ldr             x0, [x0, #0x16a8]
    // 0x87c4ec: cmp             w0, NULL
    // 0x87c4f0: b.ne            #0x87c500
    // 0x87c4f4: nop             
    // 0x87c4f8: r0 = Null
    //     0x87c4f8: mov             x0, NULL
    // 0x87c4fc: b               #0x87c528
    // 0x87c500: r17 = 351
    //     0x87c500: movz            x17, #0x15f
    // 0x87c504: ldr             w1, [x0, x17]
    // 0x87c508: DecompressPointer r1
    //     0x87c508: add             x1, x1, HEAP, lsl #32
    // 0x87c50c: r0 = LoadClassIdInstr(r1)
    //     0x87c50c: ldur            x0, [x1, #-1]
    //     0x87c510: ubfx            x0, x0, #0xc, #0x14
    // 0x87c514: r2 = "yukiMemorySchoolEntrance"
    //     0x87c514: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d50] "yukiMemorySchoolEntrance"
    //     0x87c518: ldr             x2, [x2, #0xd50]
    // 0x87c51c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c51c: sub             lr, x0, #0xb4
    //     0x87c520: ldr             lr, [x21, lr, lsl #3]
    //     0x87c524: blr             lr
    // 0x87c528: cmp             w0, NULL
    // 0x87c52c: b.ne            #0x87c53c
    // 0x87c530: nop             
    // 0x87c534: r4 = ""
    //     0x87c534: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c538: b               #0x87c540
    // 0x87c53c: mov             x4, x0
    // 0x87c540: ldur            x3, [fp, #-8]
    // 0x87c544: mov             x0, x4
    // 0x87c548: stur            x4, [fp, #-0x10]
    // 0x87c54c: r2 = Null
    //     0x87c54c: mov             x2, NULL
    // 0x87c550: r1 = Null
    //     0x87c550: mov             x1, NULL
    // 0x87c554: r4 = 59
    //     0x87c554: movz            x4, #0x3b
    // 0x87c558: branchIfSmi(r0, 0x87c568)
    //     0x87c558: tbz             w0, #0, #0x87c568
    //     0x87c55c: nop             
    // 0x87c560: r4 = LoadClassIdInstr(r0)
    //     0x87c560: ldur            x4, [x0, #-1]
    //     0x87c564: ubfx            x4, x4, #0xc, #0x14
    // 0x87c568: sub             x4, x4, #0x5d
    // 0x87c56c: cmp             x4, #1
    // 0x87c570: b.ls            #0x87c588
    // 0x87c574: nop             
    // 0x87c578: r8 = String
    //     0x87c578: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c57c: r3 = Null
    //     0x87c57c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11d58] Null
    //     0x87c580: ldr             x3, [x3, #0xd58]
    // 0x87c584: r0 = String()
    //     0x87c584: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c588: ldur            x1, [fp, #-8]
    // 0x87c58c: r0 = LoadClassIdInstr(r1)
    //     0x87c58c: ldur            x0, [x1, #-1]
    //     0x87c590: ubfx            x0, x0, #0xc, #0x14
    // 0x87c594: r16 = ""
    //     0x87c594: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c598: stp             x16, x1, [SP]
    // 0x87c59c: mov             lr, x0
    // 0x87c5a0: ldr             lr, [x21, lr, lsl #3]
    // 0x87c5a4: blr             lr
    // 0x87c5a8: tbnz            w0, #4, #0x87c5bc
    // 0x87c5ac: nop             
    // 0x87c5b0: r0 = "search1"
    //     0x87c5b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87c5b4: ldr             x0, [x0, #0xd68]
    // 0x87c5b8: b               #0x8838b4
    // 0x87c5bc: ldur            x1, [fp, #-8]
    // 0x87c5c0: r0 = LoadClassIdInstr(r1)
    //     0x87c5c0: ldur            x0, [x1, #-1]
    //     0x87c5c4: ubfx            x0, x0, #0xc, #0x14
    // 0x87c5c8: r16 = "1"
    //     0x87c5c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87c5cc: ldr             x16, [x16, #0x6a0]
    // 0x87c5d0: stp             x16, x1, [SP]
    // 0x87c5d4: mov             lr, x0
    // 0x87c5d8: ldr             lr, [x21, lr, lsl #3]
    // 0x87c5dc: blr             lr
    // 0x87c5e0: tbnz            w0, #4, #0x87c5f4
    // 0x87c5e4: nop             
    // 0x87c5e8: r0 = "search1.5"
    //     0x87c5e8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d70] "search1.5"
    //     0x87c5ec: ldr             x0, [x0, #0xd70]
    // 0x87c5f0: b               #0x8838b4
    // 0x87c5f4: ldur            x1, [fp, #-8]
    // 0x87c5f8: r0 = LoadClassIdInstr(r1)
    //     0x87c5f8: ldur            x0, [x1, #-1]
    //     0x87c5fc: ubfx            x0, x0, #0xc, #0x14
    // 0x87c600: r16 = "2"
    //     0x87c600: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87c604: ldr             x16, [x16, #0x6a8]
    // 0x87c608: stp             x16, x1, [SP]
    // 0x87c60c: mov             lr, x0
    // 0x87c610: ldr             lr, [x21, lr, lsl #3]
    // 0x87c614: blr             lr
    // 0x87c618: tbnz            w0, #4, #0x87c62c
    // 0x87c61c: nop             
    // 0x87c620: r0 = "search2"
    //     0x87c620: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d78] "search2"
    //     0x87c624: ldr             x0, [x0, #0xd78]
    // 0x87c628: b               #0x8838b4
    // 0x87c62c: ldur            x1, [fp, #-8]
    // 0x87c630: r0 = LoadClassIdInstr(r1)
    //     0x87c630: ldur            x0, [x1, #-1]
    //     0x87c634: ubfx            x0, x0, #0xc, #0x14
    // 0x87c638: r16 = "3"
    //     0x87c638: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87c63c: ldr             x16, [x16, #0x6b0]
    // 0x87c640: stp             x16, x1, [SP]
    // 0x87c644: mov             lr, x0
    // 0x87c648: ldr             lr, [x21, lr, lsl #3]
    // 0x87c64c: blr             lr
    // 0x87c650: tbnz            w0, #4, #0x87c690
    // 0x87c654: nop             
    // 0x87c658: ldur            x1, [fp, #-0x10]
    // 0x87c65c: r0 = LoadClassIdInstr(r1)
    //     0x87c65c: ldur            x0, [x1, #-1]
    //     0x87c660: ubfx            x0, x0, #0xc, #0x14
    // 0x87c664: r16 = "1"
    //     0x87c664: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87c668: ldr             x16, [x16, #0x6a0]
    // 0x87c66c: stp             x16, x1, [SP]
    // 0x87c670: mov             lr, x0
    // 0x87c674: ldr             lr, [x21, lr, lsl #3]
    // 0x87c678: blr             lr
    // 0x87c67c: tbz             w0, #4, #0x87c690
    // 0x87c680: nop             
    // 0x87c684: r0 = "search2.5"
    //     0x87c684: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d80] "search2.5"
    //     0x87c688: ldr             x0, [x0, #0xd80]
    // 0x87c68c: b               #0x8838b4
    // 0x87c690: ldur            x1, [fp, #-8]
    // 0x87c694: r0 = LoadClassIdInstr(r1)
    //     0x87c694: ldur            x0, [x1, #-1]
    //     0x87c698: ubfx            x0, x0, #0xc, #0x14
    // 0x87c69c: r16 = "3"
    //     0x87c69c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87c6a0: ldr             x16, [x16, #0x6b0]
    // 0x87c6a4: stp             x16, x1, [SP]
    // 0x87c6a8: mov             lr, x0
    // 0x87c6ac: ldr             lr, [x21, lr, lsl #3]
    // 0x87c6b0: blr             lr
    // 0x87c6b4: tbnz            w0, #4, #0x87c6f8
    // 0x87c6b8: nop             
    // 0x87c6bc: ldur            x0, [fp, #-0x10]
    // 0x87c6c0: r1 = LoadClassIdInstr(r0)
    //     0x87c6c0: ldur            x1, [x0, #-1]
    //     0x87c6c4: ubfx            x1, x1, #0xc, #0x14
    // 0x87c6c8: r16 = "1"
    //     0x87c6c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87c6cc: ldr             x16, [x16, #0x6a0]
    // 0x87c6d0: stp             x16, x0, [SP]
    // 0x87c6d4: mov             x0, x1
    // 0x87c6d8: mov             lr, x0
    // 0x87c6dc: ldr             lr, [x21, lr, lsl #3]
    // 0x87c6e0: blr             lr
    // 0x87c6e4: tbnz            w0, #4, #0x87c6f8
    // 0x87c6e8: nop             
    // 0x87c6ec: r0 = "search3"
    //     0x87c6ec: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d88] "search3"
    //     0x87c6f0: ldr             x0, [x0, #0xd88]
    // 0x87c6f4: b               #0x8838b4
    // 0x87c6f8: ldur            x0, [fp, #-8]
    // 0x87c6fc: r1 = LoadClassIdInstr(r0)
    //     0x87c6fc: ldur            x1, [x0, #-1]
    //     0x87c700: ubfx            x1, x1, #0xc, #0x14
    // 0x87c704: r16 = "4"
    //     0x87c704: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87c708: ldr             x16, [x16, #0x6b8]
    // 0x87c70c: stp             x16, x0, [SP]
    // 0x87c710: mov             x0, x1
    // 0x87c714: mov             lr, x0
    // 0x87c718: ldr             lr, [x21, lr, lsl #3]
    // 0x87c71c: blr             lr
    // 0x87c720: tbnz            w0, #4, #0x87c734
    // 0x87c724: nop             
    // 0x87c728: r0 = "search3.5"
    //     0x87c728: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d90] "search3.5"
    //     0x87c72c: ldr             x0, [x0, #0xd90]
    // 0x87c730: b               #0x8838b4
    // 0x87c734: r0 = "search1"
    //     0x87c734: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87c738: ldr             x0, [x0, #0xd68]
    // 0x87c73c: b               #0x8838b4
    // 0x87c740: r16 = "yukiMemoryMainStory"
    //     0x87c740: add             x16, PP, #0x11, lsl #12  ; [pp+0x11d98] "yukiMemoryMainStory"
    //     0x87c744: ldr             x16, [x16, #0xd98]
    // 0x87c748: ldur            lr, [fp, #-0x28]
    // 0x87c74c: stp             lr, x16, [SP]
    // 0x87c750: r0 = ==()
    //     0x87c750: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c754: tbnz            w0, #4, #0x87c83c
    // 0x87c758: nop             
    // 0x87c75c: r0 = LoadStaticField(0xb54)
    //     0x87c75c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c760: ldr             x0, [x0, #0x16a8]
    // 0x87c764: cmp             w0, NULL
    // 0x87c768: b.ne            #0x87c778
    // 0x87c76c: nop             
    // 0x87c770: r0 = Null
    //     0x87c770: mov             x0, NULL
    // 0x87c774: b               #0x87c7a0
    // 0x87c778: r17 = 351
    //     0x87c778: movz            x17, #0x15f
    // 0x87c77c: ldr             w1, [x0, x17]
    // 0x87c780: DecompressPointer r1
    //     0x87c780: add             x1, x1, HEAP, lsl #32
    // 0x87c784: r0 = LoadClassIdInstr(r1)
    //     0x87c784: ldur            x0, [x1, #-1]
    //     0x87c788: ubfx            x0, x0, #0xc, #0x14
    // 0x87c78c: r2 = "yukiMemoryMain"
    //     0x87c78c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11da0] "yukiMemoryMain"
    //     0x87c790: ldr             x2, [x2, #0xda0]
    // 0x87c794: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c794: sub             lr, x0, #0xb4
    //     0x87c798: ldr             lr, [x21, lr, lsl #3]
    //     0x87c79c: blr             lr
    // 0x87c7a0: cmp             w0, NULL
    // 0x87c7a4: b.ne            #0x87c7b4
    // 0x87c7a8: nop             
    // 0x87c7ac: r3 = ""
    //     0x87c7ac: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c7b0: b               #0x87c7b8
    // 0x87c7b4: mov             x3, x0
    // 0x87c7b8: mov             x0, x3
    // 0x87c7bc: stur            x3, [fp, #-8]
    // 0x87c7c0: r2 = Null
    //     0x87c7c0: mov             x2, NULL
    // 0x87c7c4: r1 = Null
    //     0x87c7c4: mov             x1, NULL
    // 0x87c7c8: r4 = 59
    //     0x87c7c8: movz            x4, #0x3b
    // 0x87c7cc: branchIfSmi(r0, 0x87c7dc)
    //     0x87c7cc: tbz             w0, #0, #0x87c7dc
    //     0x87c7d0: nop             
    // 0x87c7d4: r4 = LoadClassIdInstr(r0)
    //     0x87c7d4: ldur            x4, [x0, #-1]
    //     0x87c7d8: ubfx            x4, x4, #0xc, #0x14
    // 0x87c7dc: sub             x4, x4, #0x5d
    // 0x87c7e0: cmp             x4, #1
    // 0x87c7e4: b.ls            #0x87c7fc
    // 0x87c7e8: nop             
    // 0x87c7ec: r8 = String
    //     0x87c7ec: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c7f0: r3 = Null
    //     0x87c7f0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11da8] Null
    //     0x87c7f4: ldr             x3, [x3, #0xda8]
    // 0x87c7f8: r0 = String()
    //     0x87c7f8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c7fc: ldur            x0, [fp, #-8]
    // 0x87c800: r1 = LoadClassIdInstr(r0)
    //     0x87c800: ldur            x1, [x0, #-1]
    //     0x87c804: ubfx            x1, x1, #0xc, #0x14
    // 0x87c808: r16 = ""
    //     0x87c808: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c80c: stp             x16, x0, [SP]
    // 0x87c810: mov             x0, x1
    // 0x87c814: mov             lr, x0
    // 0x87c818: ldr             lr, [x21, lr, lsl #3]
    // 0x87c81c: blr             lr
    // 0x87c820: tbnz            w0, #4, #0x87c834
    // 0x87c824: nop             
    // 0x87c828: r0 = "yukiMemoryMain1"
    //     0x87c828: add             x0, PP, #0x11, lsl #12  ; [pp+0x11db8] "yukiMemoryMain1"
    //     0x87c82c: ldr             x0, [x0, #0xdb8]
    // 0x87c830: b               #0x8838b4
    // 0x87c834: r0 = ""
    //     0x87c834: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c838: b               #0x8838b4
    // 0x87c83c: r16 = "yukiMemoryLakeside"
    //     0x87c83c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11dc0] "yukiMemoryLakeside"
    //     0x87c840: ldr             x16, [x16, #0xdc0]
    // 0x87c844: ldur            lr, [fp, #-0x28]
    // 0x87c848: stp             lr, x16, [SP]
    // 0x87c84c: r0 = ==()
    //     0x87c84c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87c850: tbnz            w0, #4, #0x87cae4
    // 0x87c854: nop             
    // 0x87c858: r0 = LoadStaticField(0xb54)
    //     0x87c858: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c85c: ldr             x0, [x0, #0x16a8]
    // 0x87c860: cmp             w0, NULL
    // 0x87c864: b.ne            #0x87c874
    // 0x87c868: nop             
    // 0x87c86c: r0 = Null
    //     0x87c86c: mov             x0, NULL
    // 0x87c870: b               #0x87c89c
    // 0x87c874: r17 = 351
    //     0x87c874: movz            x17, #0x15f
    // 0x87c878: ldr             w1, [x0, x17]
    // 0x87c87c: DecompressPointer r1
    //     0x87c87c: add             x1, x1, HEAP, lsl #32
    // 0x87c880: r0 = LoadClassIdInstr(r1)
    //     0x87c880: ldur            x0, [x1, #-1]
    //     0x87c884: ubfx            x0, x0, #0xc, #0x14
    // 0x87c888: r2 = "yukiMemoryLakeside"
    //     0x87c888: add             x2, PP, #0x11, lsl #12  ; [pp+0x11dc0] "yukiMemoryLakeside"
    //     0x87c88c: ldr             x2, [x2, #0xdc0]
    // 0x87c890: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c890: sub             lr, x0, #0xb4
    //     0x87c894: ldr             lr, [x21, lr, lsl #3]
    //     0x87c898: blr             lr
    // 0x87c89c: cmp             w0, NULL
    // 0x87c8a0: b.ne            #0x87c8b0
    // 0x87c8a4: nop             
    // 0x87c8a8: r3 = ""
    //     0x87c8a8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c8ac: b               #0x87c8b4
    // 0x87c8b0: mov             x3, x0
    // 0x87c8b4: mov             x0, x3
    // 0x87c8b8: stur            x3, [fp, #-8]
    // 0x87c8bc: r2 = Null
    //     0x87c8bc: mov             x2, NULL
    // 0x87c8c0: r1 = Null
    //     0x87c8c0: mov             x1, NULL
    // 0x87c8c4: r4 = 59
    //     0x87c8c4: movz            x4, #0x3b
    // 0x87c8c8: branchIfSmi(r0, 0x87c8d8)
    //     0x87c8c8: tbz             w0, #0, #0x87c8d8
    //     0x87c8cc: nop             
    // 0x87c8d0: r4 = LoadClassIdInstr(r0)
    //     0x87c8d0: ldur            x4, [x0, #-1]
    //     0x87c8d4: ubfx            x4, x4, #0xc, #0x14
    // 0x87c8d8: sub             x4, x4, #0x5d
    // 0x87c8dc: cmp             x4, #1
    // 0x87c8e0: b.ls            #0x87c8f8
    // 0x87c8e4: nop             
    // 0x87c8e8: r8 = String
    //     0x87c8e8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c8ec: r3 = Null
    //     0x87c8ec: add             x3, PP, #0x11, lsl #12  ; [pp+0x11dc8] Null
    //     0x87c8f0: ldr             x3, [x3, #0xdc8]
    // 0x87c8f4: r0 = String()
    //     0x87c8f4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c8f8: r0 = LoadStaticField(0xb54)
    //     0x87c8f8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87c8fc: ldr             x0, [x0, #0x16a8]
    // 0x87c900: cmp             w0, NULL
    // 0x87c904: b.ne            #0x87c914
    // 0x87c908: nop             
    // 0x87c90c: r0 = Null
    //     0x87c90c: mov             x0, NULL
    // 0x87c910: b               #0x87c93c
    // 0x87c914: r17 = 351
    //     0x87c914: movz            x17, #0x15f
    // 0x87c918: ldr             w1, [x0, x17]
    // 0x87c91c: DecompressPointer r1
    //     0x87c91c: add             x1, x1, HEAP, lsl #32
    // 0x87c920: r0 = LoadClassIdInstr(r1)
    //     0x87c920: ldur            x0, [x1, #-1]
    //     0x87c924: ubfx            x0, x0, #0xc, #0x14
    // 0x87c928: r2 = "yukiMemorySocialDistrict"
    //     0x87c928: add             x2, PP, #0x11, lsl #12  ; [pp+0x11dd8] "yukiMemorySocialDistrict"
    //     0x87c92c: ldr             x2, [x2, #0xdd8]
    // 0x87c930: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87c930: sub             lr, x0, #0xb4
    //     0x87c934: ldr             lr, [x21, lr, lsl #3]
    //     0x87c938: blr             lr
    // 0x87c93c: cmp             w0, NULL
    // 0x87c940: b.ne            #0x87c950
    // 0x87c944: nop             
    // 0x87c948: r4 = ""
    //     0x87c948: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c94c: b               #0x87c954
    // 0x87c950: mov             x4, x0
    // 0x87c954: ldur            x3, [fp, #-8]
    // 0x87c958: mov             x0, x4
    // 0x87c95c: stur            x4, [fp, #-0x10]
    // 0x87c960: r2 = Null
    //     0x87c960: mov             x2, NULL
    // 0x87c964: r1 = Null
    //     0x87c964: mov             x1, NULL
    // 0x87c968: r4 = 59
    //     0x87c968: movz            x4, #0x3b
    // 0x87c96c: branchIfSmi(r0, 0x87c97c)
    //     0x87c96c: tbz             w0, #0, #0x87c97c
    //     0x87c970: nop             
    // 0x87c974: r4 = LoadClassIdInstr(r0)
    //     0x87c974: ldur            x4, [x0, #-1]
    //     0x87c978: ubfx            x4, x4, #0xc, #0x14
    // 0x87c97c: sub             x4, x4, #0x5d
    // 0x87c980: cmp             x4, #1
    // 0x87c984: b.ls            #0x87c99c
    // 0x87c988: nop             
    // 0x87c98c: r8 = String
    //     0x87c98c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87c990: r3 = Null
    //     0x87c990: add             x3, PP, #0x11, lsl #12  ; [pp+0x11de0] Null
    //     0x87c994: ldr             x3, [x3, #0xde0]
    // 0x87c998: r0 = String()
    //     0x87c998: bl              #0x1523244  ; IsType_String_Stub
    // 0x87c99c: ldur            x1, [fp, #-8]
    // 0x87c9a0: r0 = LoadClassIdInstr(r1)
    //     0x87c9a0: ldur            x0, [x1, #-1]
    //     0x87c9a4: ubfx            x0, x0, #0xc, #0x14
    // 0x87c9a8: r16 = ""
    //     0x87c9a8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87c9ac: stp             x16, x1, [SP]
    // 0x87c9b0: mov             lr, x0
    // 0x87c9b4: ldr             lr, [x21, lr, lsl #3]
    // 0x87c9b8: blr             lr
    // 0x87c9bc: tbnz            w0, #4, #0x87c9d0
    // 0x87c9c0: nop             
    // 0x87c9c4: r0 = "search1"
    //     0x87c9c4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87c9c8: ldr             x0, [x0, #0xd68]
    // 0x87c9cc: b               #0x8838b4
    // 0x87c9d0: ldur            x1, [fp, #-8]
    // 0x87c9d4: r0 = LoadClassIdInstr(r1)
    //     0x87c9d4: ldur            x0, [x1, #-1]
    //     0x87c9d8: ubfx            x0, x0, #0xc, #0x14
    // 0x87c9dc: r16 = "1"
    //     0x87c9dc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87c9e0: ldr             x16, [x16, #0x6a0]
    // 0x87c9e4: stp             x16, x1, [SP]
    // 0x87c9e8: mov             lr, x0
    // 0x87c9ec: ldr             lr, [x21, lr, lsl #3]
    // 0x87c9f0: blr             lr
    // 0x87c9f4: tbnz            w0, #4, #0x87ca34
    // 0x87c9f8: nop             
    // 0x87c9fc: ldur            x1, [fp, #-0x10]
    // 0x87ca00: r0 = LoadClassIdInstr(r1)
    //     0x87ca00: ldur            x0, [x1, #-1]
    //     0x87ca04: ubfx            x0, x0, #0xc, #0x14
    // 0x87ca08: r16 = "3"
    //     0x87ca08: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87ca0c: ldr             x16, [x16, #0x6b0]
    // 0x87ca10: stp             x16, x1, [SP]
    // 0x87ca14: mov             lr, x0
    // 0x87ca18: ldr             lr, [x21, lr, lsl #3]
    // 0x87ca1c: blr             lr
    // 0x87ca20: tbz             w0, #4, #0x87ca34
    // 0x87ca24: nop             
    // 0x87ca28: r0 = "search1.5"
    //     0x87ca28: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d70] "search1.5"
    //     0x87ca2c: ldr             x0, [x0, #0xd70]
    // 0x87ca30: b               #0x8838b4
    // 0x87ca34: ldur            x1, [fp, #-8]
    // 0x87ca38: r0 = LoadClassIdInstr(r1)
    //     0x87ca38: ldur            x0, [x1, #-1]
    //     0x87ca3c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ca40: r16 = "1"
    //     0x87ca40: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87ca44: ldr             x16, [x16, #0x6a0]
    // 0x87ca48: stp             x16, x1, [SP]
    // 0x87ca4c: mov             lr, x0
    // 0x87ca50: ldr             lr, [x21, lr, lsl #3]
    // 0x87ca54: blr             lr
    // 0x87ca58: tbnz            w0, #4, #0x87ca9c
    // 0x87ca5c: nop             
    // 0x87ca60: ldur            x0, [fp, #-0x10]
    // 0x87ca64: r1 = LoadClassIdInstr(r0)
    //     0x87ca64: ldur            x1, [x0, #-1]
    //     0x87ca68: ubfx            x1, x1, #0xc, #0x14
    // 0x87ca6c: r16 = "3"
    //     0x87ca6c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87ca70: ldr             x16, [x16, #0x6b0]
    // 0x87ca74: stp             x16, x0, [SP]
    // 0x87ca78: mov             x0, x1
    // 0x87ca7c: mov             lr, x0
    // 0x87ca80: ldr             lr, [x21, lr, lsl #3]
    // 0x87ca84: blr             lr
    // 0x87ca88: tbnz            w0, #4, #0x87ca9c
    // 0x87ca8c: nop             
    // 0x87ca90: r0 = "search2"
    //     0x87ca90: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d78] "search2"
    //     0x87ca94: ldr             x0, [x0, #0xd78]
    // 0x87ca98: b               #0x8838b4
    // 0x87ca9c: ldur            x0, [fp, #-8]
    // 0x87caa0: r1 = LoadClassIdInstr(r0)
    //     0x87caa0: ldur            x1, [x0, #-1]
    //     0x87caa4: ubfx            x1, x1, #0xc, #0x14
    // 0x87caa8: r16 = "2"
    //     0x87caa8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87caac: ldr             x16, [x16, #0x6a8]
    // 0x87cab0: stp             x16, x0, [SP]
    // 0x87cab4: mov             x0, x1
    // 0x87cab8: mov             lr, x0
    // 0x87cabc: ldr             lr, [x21, lr, lsl #3]
    // 0x87cac0: blr             lr
    // 0x87cac4: tbnz            w0, #4, #0x87cad8
    // 0x87cac8: nop             
    // 0x87cacc: r0 = "search2.5"
    //     0x87cacc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d80] "search2.5"
    //     0x87cad0: ldr             x0, [x0, #0xd80]
    // 0x87cad4: b               #0x8838b4
    // 0x87cad8: r0 = "search1"
    //     0x87cad8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87cadc: ldr             x0, [x0, #0xd68]
    // 0x87cae0: b               #0x8838b4
    // 0x87cae4: r16 = "yukiMemoryGuan"
    //     0x87cae4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11df0] "yukiMemoryGuan"
    //     0x87cae8: ldr             x16, [x16, #0xdf0]
    // 0x87caec: ldur            lr, [fp, #-0x28]
    // 0x87caf0: stp             lr, x16, [SP]
    // 0x87caf4: r0 = ==()
    //     0x87caf4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87caf8: tbnz            w0, #4, #0x87cbe4
    // 0x87cafc: nop             
    // 0x87cb00: r0 = LoadStaticField(0xb54)
    //     0x87cb00: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87cb04: ldr             x0, [x0, #0x16a8]
    // 0x87cb08: cmp             w0, NULL
    // 0x87cb0c: b.ne            #0x87cb1c
    // 0x87cb10: nop             
    // 0x87cb14: r0 = Null
    //     0x87cb14: mov             x0, NULL
    // 0x87cb18: b               #0x87cb44
    // 0x87cb1c: r17 = 351
    //     0x87cb1c: movz            x17, #0x15f
    // 0x87cb20: ldr             w1, [x0, x17]
    // 0x87cb24: DecompressPointer r1
    //     0x87cb24: add             x1, x1, HEAP, lsl #32
    // 0x87cb28: r0 = LoadClassIdInstr(r1)
    //     0x87cb28: ldur            x0, [x1, #-1]
    //     0x87cb2c: ubfx            x0, x0, #0xc, #0x14
    // 0x87cb30: r2 = "yukiMemorySchoolEntrance"
    //     0x87cb30: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d50] "yukiMemorySchoolEntrance"
    //     0x87cb34: ldr             x2, [x2, #0xd50]
    // 0x87cb38: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87cb38: sub             lr, x0, #0xb4
    //     0x87cb3c: ldr             lr, [x21, lr, lsl #3]
    //     0x87cb40: blr             lr
    // 0x87cb44: cmp             w0, NULL
    // 0x87cb48: b.ne            #0x87cb58
    // 0x87cb4c: nop             
    // 0x87cb50: r3 = ""
    //     0x87cb50: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cb54: b               #0x87cb5c
    // 0x87cb58: mov             x3, x0
    // 0x87cb5c: mov             x0, x3
    // 0x87cb60: stur            x3, [fp, #-8]
    // 0x87cb64: r2 = Null
    //     0x87cb64: mov             x2, NULL
    // 0x87cb68: r1 = Null
    //     0x87cb68: mov             x1, NULL
    // 0x87cb6c: r4 = 59
    //     0x87cb6c: movz            x4, #0x3b
    // 0x87cb70: branchIfSmi(r0, 0x87cb80)
    //     0x87cb70: tbz             w0, #0, #0x87cb80
    //     0x87cb74: nop             
    // 0x87cb78: r4 = LoadClassIdInstr(r0)
    //     0x87cb78: ldur            x4, [x0, #-1]
    //     0x87cb7c: ubfx            x4, x4, #0xc, #0x14
    // 0x87cb80: sub             x4, x4, #0x5d
    // 0x87cb84: cmp             x4, #1
    // 0x87cb88: b.ls            #0x87cba0
    // 0x87cb8c: nop             
    // 0x87cb90: r8 = String
    //     0x87cb90: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87cb94: r3 = Null
    //     0x87cb94: add             x3, PP, #0x11, lsl #12  ; [pp+0x11df8] Null
    //     0x87cb98: ldr             x3, [x3, #0xdf8]
    // 0x87cb9c: r0 = String()
    //     0x87cb9c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cba0: ldur            x0, [fp, #-8]
    // 0x87cba4: r1 = LoadClassIdInstr(r0)
    //     0x87cba4: ldur            x1, [x0, #-1]
    //     0x87cba8: ubfx            x1, x1, #0xc, #0x14
    // 0x87cbac: r16 = ""
    //     0x87cbac: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cbb0: stp             x16, x0, [SP]
    // 0x87cbb4: mov             x0, x1
    // 0x87cbb8: mov             lr, x0
    // 0x87cbbc: ldr             lr, [x21, lr, lsl #3]
    // 0x87cbc0: blr             lr
    // 0x87cbc4: tbnz            w0, #4, #0x87cbd8
    // 0x87cbc8: nop             
    // 0x87cbcc: r0 = "before"
    //     0x87cbcc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11e08] "before"
    //     0x87cbd0: ldr             x0, [x0, #0xe08]
    // 0x87cbd4: b               #0x8838b4
    // 0x87cbd8: r0 = "after"
    //     0x87cbd8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11e10] "after"
    //     0x87cbdc: ldr             x0, [x0, #0xe10]
    // 0x87cbe0: b               #0x8838b4
    // 0x87cbe4: r16 = "yukiMemorySchoolEntrance"
    //     0x87cbe4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11d50] "yukiMemorySchoolEntrance"
    //     0x87cbe8: ldr             x16, [x16, #0xd50]
    // 0x87cbec: ldur            lr, [fp, #-0x28]
    // 0x87cbf0: stp             lr, x16, [SP]
    // 0x87cbf4: r0 = ==()
    //     0x87cbf4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87cbf8: tbnz            w0, #4, #0x87cce4
    // 0x87cbfc: nop             
    // 0x87cc00: r0 = LoadStaticField(0xb54)
    //     0x87cc00: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87cc04: ldr             x0, [x0, #0x16a8]
    // 0x87cc08: cmp             w0, NULL
    // 0x87cc0c: b.ne            #0x87cc1c
    // 0x87cc10: nop             
    // 0x87cc14: r0 = Null
    //     0x87cc14: mov             x0, NULL
    // 0x87cc18: b               #0x87cc44
    // 0x87cc1c: r17 = 351
    //     0x87cc1c: movz            x17, #0x15f
    // 0x87cc20: ldr             w1, [x0, x17]
    // 0x87cc24: DecompressPointer r1
    //     0x87cc24: add             x1, x1, HEAP, lsl #32
    // 0x87cc28: r0 = LoadClassIdInstr(r1)
    //     0x87cc28: ldur            x0, [x1, #-1]
    //     0x87cc2c: ubfx            x0, x0, #0xc, #0x14
    // 0x87cc30: r2 = "yukiMemorySchoolEntrance"
    //     0x87cc30: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d50] "yukiMemorySchoolEntrance"
    //     0x87cc34: ldr             x2, [x2, #0xd50]
    // 0x87cc38: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87cc38: sub             lr, x0, #0xb4
    //     0x87cc3c: ldr             lr, [x21, lr, lsl #3]
    //     0x87cc40: blr             lr
    // 0x87cc44: cmp             w0, NULL
    // 0x87cc48: b.ne            #0x87cc58
    // 0x87cc4c: nop             
    // 0x87cc50: r3 = ""
    //     0x87cc50: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cc54: b               #0x87cc5c
    // 0x87cc58: mov             x3, x0
    // 0x87cc5c: mov             x0, x3
    // 0x87cc60: stur            x3, [fp, #-8]
    // 0x87cc64: r2 = Null
    //     0x87cc64: mov             x2, NULL
    // 0x87cc68: r1 = Null
    //     0x87cc68: mov             x1, NULL
    // 0x87cc6c: r4 = 59
    //     0x87cc6c: movz            x4, #0x3b
    // 0x87cc70: branchIfSmi(r0, 0x87cc80)
    //     0x87cc70: tbz             w0, #0, #0x87cc80
    //     0x87cc74: nop             
    // 0x87cc78: r4 = LoadClassIdInstr(r0)
    //     0x87cc78: ldur            x4, [x0, #-1]
    //     0x87cc7c: ubfx            x4, x4, #0xc, #0x14
    // 0x87cc80: sub             x4, x4, #0x5d
    // 0x87cc84: cmp             x4, #1
    // 0x87cc88: b.ls            #0x87cca0
    // 0x87cc8c: nop             
    // 0x87cc90: r8 = String
    //     0x87cc90: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87cc94: r3 = Null
    //     0x87cc94: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e18] Null
    //     0x87cc98: ldr             x3, [x3, #0xe18]
    // 0x87cc9c: r0 = String()
    //     0x87cc9c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cca0: ldur            x0, [fp, #-8]
    // 0x87cca4: r1 = LoadClassIdInstr(r0)
    //     0x87cca4: ldur            x1, [x0, #-1]
    //     0x87cca8: ubfx            x1, x1, #0xc, #0x14
    // 0x87ccac: r16 = ""
    //     0x87ccac: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ccb0: stp             x16, x0, [SP]
    // 0x87ccb4: mov             x0, x1
    // 0x87ccb8: mov             lr, x0
    // 0x87ccbc: ldr             lr, [x21, lr, lsl #3]
    // 0x87ccc0: blr             lr
    // 0x87ccc4: tbnz            w0, #4, #0x87ccd8
    // 0x87ccc8: nop             
    // 0x87cccc: r0 = "search1"
    //     0x87cccc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87ccd0: ldr             x0, [x0, #0xd68]
    // 0x87ccd4: b               #0x8838b4
    // 0x87ccd8: r0 = "search1.5"
    //     0x87ccd8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d70] "search1.5"
    //     0x87ccdc: ldr             x0, [x0, #0xd70]
    // 0x87cce0: b               #0x8838b4
    // 0x87cce4: r16 = "yukiMemoryMainStory2"
    //     0x87cce4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11e28] "yukiMemoryMainStory2"
    //     0x87cce8: ldr             x16, [x16, #0xe28]
    // 0x87ccec: ldur            lr, [fp, #-0x28]
    // 0x87ccf0: stp             lr, x16, [SP]
    // 0x87ccf4: r0 = ==()
    //     0x87ccf4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ccf8: tbnz            w0, #4, #0x87cde4
    // 0x87ccfc: nop             
    // 0x87cd00: r0 = LoadStaticField(0xb54)
    //     0x87cd00: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87cd04: ldr             x0, [x0, #0x16a8]
    // 0x87cd08: cmp             w0, NULL
    // 0x87cd0c: b.ne            #0x87cd1c
    // 0x87cd10: nop             
    // 0x87cd14: r0 = Null
    //     0x87cd14: mov             x0, NULL
    // 0x87cd18: b               #0x87cd44
    // 0x87cd1c: r17 = 351
    //     0x87cd1c: movz            x17, #0x15f
    // 0x87cd20: ldr             w1, [x0, x17]
    // 0x87cd24: DecompressPointer r1
    //     0x87cd24: add             x1, x1, HEAP, lsl #32
    // 0x87cd28: r0 = LoadClassIdInstr(r1)
    //     0x87cd28: ldur            x0, [x1, #-1]
    //     0x87cd2c: ubfx            x0, x0, #0xc, #0x14
    // 0x87cd30: r2 = "yukiMemoryLakeside"
    //     0x87cd30: add             x2, PP, #0x11, lsl #12  ; [pp+0x11dc0] "yukiMemoryLakeside"
    //     0x87cd34: ldr             x2, [x2, #0xdc0]
    // 0x87cd38: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87cd38: sub             lr, x0, #0xb4
    //     0x87cd3c: ldr             lr, [x21, lr, lsl #3]
    //     0x87cd40: blr             lr
    // 0x87cd44: cmp             w0, NULL
    // 0x87cd48: b.ne            #0x87cd58
    // 0x87cd4c: nop             
    // 0x87cd50: r3 = ""
    //     0x87cd50: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cd54: b               #0x87cd5c
    // 0x87cd58: mov             x3, x0
    // 0x87cd5c: mov             x0, x3
    // 0x87cd60: stur            x3, [fp, #-8]
    // 0x87cd64: r2 = Null
    //     0x87cd64: mov             x2, NULL
    // 0x87cd68: r1 = Null
    //     0x87cd68: mov             x1, NULL
    // 0x87cd6c: r4 = 59
    //     0x87cd6c: movz            x4, #0x3b
    // 0x87cd70: branchIfSmi(r0, 0x87cd80)
    //     0x87cd70: tbz             w0, #0, #0x87cd80
    //     0x87cd74: nop             
    // 0x87cd78: r4 = LoadClassIdInstr(r0)
    //     0x87cd78: ldur            x4, [x0, #-1]
    //     0x87cd7c: ubfx            x4, x4, #0xc, #0x14
    // 0x87cd80: sub             x4, x4, #0x5d
    // 0x87cd84: cmp             x4, #1
    // 0x87cd88: b.ls            #0x87cda0
    // 0x87cd8c: nop             
    // 0x87cd90: r8 = String
    //     0x87cd90: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87cd94: r3 = Null
    //     0x87cd94: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e30] Null
    //     0x87cd98: ldr             x3, [x3, #0xe30]
    // 0x87cd9c: r0 = String()
    //     0x87cd9c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cda0: ldur            x0, [fp, #-8]
    // 0x87cda4: r1 = LoadClassIdInstr(r0)
    //     0x87cda4: ldur            x1, [x0, #-1]
    //     0x87cda8: ubfx            x1, x1, #0xc, #0x14
    // 0x87cdac: r16 = "2"
    //     0x87cdac: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87cdb0: ldr             x16, [x16, #0x6a8]
    // 0x87cdb4: stp             x16, x0, [SP]
    // 0x87cdb8: mov             x0, x1
    // 0x87cdbc: mov             lr, x0
    // 0x87cdc0: ldr             lr, [x21, lr, lsl #3]
    // 0x87cdc4: blr             lr
    // 0x87cdc8: tbnz            w0, #4, #0x87cddc
    // 0x87cdcc: nop             
    // 0x87cdd0: r0 = "endingEvent"
    //     0x87cdd0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11e40] "endingEvent"
    //     0x87cdd4: ldr             x0, [x0, #0xe40]
    // 0x87cdd8: b               #0x8838b4
    // 0x87cddc: r0 = ""
    //     0x87cddc: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cde0: b               #0x8838b4
    // 0x87cde4: r16 = "yukiMemorySocialDistrict"
    //     0x87cde4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11dd8] "yukiMemorySocialDistrict"
    //     0x87cde8: ldr             x16, [x16, #0xdd8]
    // 0x87cdec: ldur            lr, [fp, #-0x28]
    // 0x87cdf0: stp             lr, x16, [SP]
    // 0x87cdf4: r0 = ==()
    //     0x87cdf4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87cdf8: tbnz            w0, #4, #0x87d18c
    // 0x87cdfc: nop             
    // 0x87ce00: r0 = LoadStaticField(0xb54)
    //     0x87ce00: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ce04: ldr             x0, [x0, #0x16a8]
    // 0x87ce08: cmp             w0, NULL
    // 0x87ce0c: b.ne            #0x87ce1c
    // 0x87ce10: nop             
    // 0x87ce14: r0 = Null
    //     0x87ce14: mov             x0, NULL
    // 0x87ce18: b               #0x87ce44
    // 0x87ce1c: r17 = 351
    //     0x87ce1c: movz            x17, #0x15f
    // 0x87ce20: ldr             w1, [x0, x17]
    // 0x87ce24: DecompressPointer r1
    //     0x87ce24: add             x1, x1, HEAP, lsl #32
    // 0x87ce28: r0 = LoadClassIdInstr(r1)
    //     0x87ce28: ldur            x0, [x1, #-1]
    //     0x87ce2c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ce30: r2 = "yukiMemorySocialDistrict"
    //     0x87ce30: add             x2, PP, #0x11, lsl #12  ; [pp+0x11dd8] "yukiMemorySocialDistrict"
    //     0x87ce34: ldr             x2, [x2, #0xdd8]
    // 0x87ce38: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ce38: sub             lr, x0, #0xb4
    //     0x87ce3c: ldr             lr, [x21, lr, lsl #3]
    //     0x87ce40: blr             lr
    // 0x87ce44: cmp             w0, NULL
    // 0x87ce48: b.ne            #0x87ce58
    // 0x87ce4c: nop             
    // 0x87ce50: r3 = ""
    //     0x87ce50: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ce54: b               #0x87ce5c
    // 0x87ce58: mov             x3, x0
    // 0x87ce5c: mov             x0, x3
    // 0x87ce60: stur            x3, [fp, #-8]
    // 0x87ce64: r2 = Null
    //     0x87ce64: mov             x2, NULL
    // 0x87ce68: r1 = Null
    //     0x87ce68: mov             x1, NULL
    // 0x87ce6c: r4 = 59
    //     0x87ce6c: movz            x4, #0x3b
    // 0x87ce70: branchIfSmi(r0, 0x87ce80)
    //     0x87ce70: tbz             w0, #0, #0x87ce80
    //     0x87ce74: nop             
    // 0x87ce78: r4 = LoadClassIdInstr(r0)
    //     0x87ce78: ldur            x4, [x0, #-1]
    //     0x87ce7c: ubfx            x4, x4, #0xc, #0x14
    // 0x87ce80: sub             x4, x4, #0x5d
    // 0x87ce84: cmp             x4, #1
    // 0x87ce88: b.ls            #0x87cea0
    // 0x87ce8c: nop             
    // 0x87ce90: r8 = String
    //     0x87ce90: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ce94: r3 = Null
    //     0x87ce94: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e48] Null
    //     0x87ce98: ldr             x3, [x3, #0xe48]
    // 0x87ce9c: r0 = String()
    //     0x87ce9c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cea0: r0 = LoadStaticField(0xb54)
    //     0x87cea0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87cea4: ldr             x0, [x0, #0x16a8]
    // 0x87cea8: cmp             w0, NULL
    // 0x87ceac: b.ne            #0x87cebc
    // 0x87ceb0: nop             
    // 0x87ceb4: r0 = Null
    //     0x87ceb4: mov             x0, NULL
    // 0x87ceb8: b               #0x87cee4
    // 0x87cebc: r17 = 351
    //     0x87cebc: movz            x17, #0x15f
    // 0x87cec0: ldr             w1, [x0, x17]
    // 0x87cec4: DecompressPointer r1
    //     0x87cec4: add             x1, x1, HEAP, lsl #32
    // 0x87cec8: r0 = LoadClassIdInstr(r1)
    //     0x87cec8: ldur            x0, [x1, #-1]
    //     0x87cecc: ubfx            x0, x0, #0xc, #0x14
    // 0x87ced0: r2 = "yukiMemoryBusinessDistrict"
    //     0x87ced0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d10] "yukiMemoryBusinessDistrict"
    //     0x87ced4: ldr             x2, [x2, #0xd10]
    // 0x87ced8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ced8: sub             lr, x0, #0xb4
    //     0x87cedc: ldr             lr, [x21, lr, lsl #3]
    //     0x87cee0: blr             lr
    // 0x87cee4: cmp             w0, NULL
    // 0x87cee8: b.ne            #0x87cef8
    // 0x87ceec: nop             
    // 0x87cef0: r3 = ""
    //     0x87cef0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cef4: b               #0x87cefc
    // 0x87cef8: mov             x3, x0
    // 0x87cefc: mov             x0, x3
    // 0x87cf00: stur            x3, [fp, #-0x10]
    // 0x87cf04: r2 = Null
    //     0x87cf04: mov             x2, NULL
    // 0x87cf08: r1 = Null
    //     0x87cf08: mov             x1, NULL
    // 0x87cf0c: r4 = 59
    //     0x87cf0c: movz            x4, #0x3b
    // 0x87cf10: branchIfSmi(r0, 0x87cf20)
    //     0x87cf10: tbz             w0, #0, #0x87cf20
    //     0x87cf14: nop             
    // 0x87cf18: r4 = LoadClassIdInstr(r0)
    //     0x87cf18: ldur            x4, [x0, #-1]
    //     0x87cf1c: ubfx            x4, x4, #0xc, #0x14
    // 0x87cf20: sub             x4, x4, #0x5d
    // 0x87cf24: cmp             x4, #1
    // 0x87cf28: b.ls            #0x87cf40
    // 0x87cf2c: nop             
    // 0x87cf30: r8 = String
    //     0x87cf30: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87cf34: r3 = Null
    //     0x87cf34: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e58] Null
    //     0x87cf38: ldr             x3, [x3, #0xe58]
    // 0x87cf3c: r0 = String()
    //     0x87cf3c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cf40: r0 = LoadStaticField(0xb54)
    //     0x87cf40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87cf44: ldr             x0, [x0, #0x16a8]
    // 0x87cf48: cmp             w0, NULL
    // 0x87cf4c: b.ne            #0x87cf5c
    // 0x87cf50: nop             
    // 0x87cf54: r0 = Null
    //     0x87cf54: mov             x0, NULL
    // 0x87cf58: b               #0x87cf84
    // 0x87cf5c: r17 = 351
    //     0x87cf5c: movz            x17, #0x15f
    // 0x87cf60: ldr             w1, [x0, x17]
    // 0x87cf64: DecompressPointer r1
    //     0x87cf64: add             x1, x1, HEAP, lsl #32
    // 0x87cf68: r0 = LoadClassIdInstr(r1)
    //     0x87cf68: ldur            x0, [x1, #-1]
    //     0x87cf6c: ubfx            x0, x0, #0xc, #0x14
    // 0x87cf70: r2 = "yukiMemoryTownstreet"
    //     0x87cf70: add             x2, PP, #0x11, lsl #12  ; [pp+0x11e68] "yukiMemoryTownstreet"
    //     0x87cf74: ldr             x2, [x2, #0xe68]
    // 0x87cf78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87cf78: sub             lr, x0, #0xb4
    //     0x87cf7c: ldr             lr, [x21, lr, lsl #3]
    //     0x87cf80: blr             lr
    // 0x87cf84: cmp             w0, NULL
    // 0x87cf88: b.ne            #0x87cf98
    // 0x87cf8c: nop             
    // 0x87cf90: r4 = ""
    //     0x87cf90: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87cf94: b               #0x87cf9c
    // 0x87cf98: mov             x4, x0
    // 0x87cf9c: ldur            x3, [fp, #-8]
    // 0x87cfa0: mov             x0, x4
    // 0x87cfa4: stur            x4, [fp, #-0x18]
    // 0x87cfa8: r2 = Null
    //     0x87cfa8: mov             x2, NULL
    // 0x87cfac: r1 = Null
    //     0x87cfac: mov             x1, NULL
    // 0x87cfb0: r4 = 59
    //     0x87cfb0: movz            x4, #0x3b
    // 0x87cfb4: branchIfSmi(r0, 0x87cfc4)
    //     0x87cfb4: tbz             w0, #0, #0x87cfc4
    //     0x87cfb8: nop             
    // 0x87cfbc: r4 = LoadClassIdInstr(r0)
    //     0x87cfbc: ldur            x4, [x0, #-1]
    //     0x87cfc0: ubfx            x4, x4, #0xc, #0x14
    // 0x87cfc4: sub             x4, x4, #0x5d
    // 0x87cfc8: cmp             x4, #1
    // 0x87cfcc: b.ls            #0x87cfe4
    // 0x87cfd0: nop             
    // 0x87cfd4: r8 = String
    //     0x87cfd4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87cfd8: r3 = Null
    //     0x87cfd8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e70] Null
    //     0x87cfdc: ldr             x3, [x3, #0xe70]
    // 0x87cfe0: r0 = String()
    //     0x87cfe0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87cfe4: ldur            x1, [fp, #-8]
    // 0x87cfe8: r0 = LoadClassIdInstr(r1)
    //     0x87cfe8: ldur            x0, [x1, #-1]
    //     0x87cfec: ubfx            x0, x0, #0xc, #0x14
    // 0x87cff0: r16 = "Maki"
    //     0x87cff0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11e80] "Maki"
    //     0x87cff4: ldr             x16, [x16, #0xe80]
    // 0x87cff8: stp             x16, x1, [SP]
    // 0x87cffc: mov             lr, x0
    // 0x87d000: ldr             lr, [x21, lr, lsl #3]
    // 0x87d004: blr             lr
    // 0x87d008: tbnz            w0, #4, #0x87d01c
    // 0x87d00c: nop             
    // 0x87d010: r0 = "searchMaki"
    //     0x87d010: add             x0, PP, #0x11, lsl #12  ; [pp+0x11e88] "searchMaki"
    //     0x87d014: ldr             x0, [x0, #0xe88]
    // 0x87d018: b               #0x8838b4
    // 0x87d01c: ldur            x1, [fp, #-8]
    // 0x87d020: r0 = LoadClassIdInstr(r1)
    //     0x87d020: ldur            x0, [x1, #-1]
    //     0x87d024: ubfx            x0, x0, #0xc, #0x14
    // 0x87d028: r16 = "1"
    //     0x87d028: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d02c: ldr             x16, [x16, #0x6a0]
    // 0x87d030: stp             x16, x1, [SP]
    // 0x87d034: mov             lr, x0
    // 0x87d038: ldr             lr, [x21, lr, lsl #3]
    // 0x87d03c: blr             lr
    // 0x87d040: tbnz            w0, #4, #0x87d0ac
    // 0x87d044: nop             
    // 0x87d048: ldur            x1, [fp, #-0x10]
    // 0x87d04c: r0 = LoadClassIdInstr(r1)
    //     0x87d04c: ldur            x0, [x1, #-1]
    //     0x87d050: ubfx            x0, x0, #0xc, #0x14
    // 0x87d054: r16 = "4"
    //     0x87d054: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d058: ldr             x16, [x16, #0x6b8]
    // 0x87d05c: stp             x16, x1, [SP]
    // 0x87d060: mov             lr, x0
    // 0x87d064: ldr             lr, [x21, lr, lsl #3]
    // 0x87d068: blr             lr
    // 0x87d06c: tbnz            w0, #4, #0x87d0ac
    // 0x87d070: nop             
    // 0x87d074: ldur            x1, [fp, #-0x18]
    // 0x87d078: r0 = LoadClassIdInstr(r1)
    //     0x87d078: ldur            x0, [x1, #-1]
    //     0x87d07c: ubfx            x0, x0, #0xc, #0x14
    // 0x87d080: r16 = "4"
    //     0x87d080: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d084: ldr             x16, [x16, #0x6b8]
    // 0x87d088: stp             x16, x1, [SP]
    // 0x87d08c: mov             lr, x0
    // 0x87d090: ldr             lr, [x21, lr, lsl #3]
    // 0x87d094: blr             lr
    // 0x87d098: tbnz            w0, #4, #0x87d0ac
    // 0x87d09c: nop             
    // 0x87d0a0: r0 = "search2"
    //     0x87d0a0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d78] "search2"
    //     0x87d0a4: ldr             x0, [x0, #0xd78]
    // 0x87d0a8: b               #0x8838b4
    // 0x87d0ac: ldur            x1, [fp, #-8]
    // 0x87d0b0: r0 = LoadClassIdInstr(r1)
    //     0x87d0b0: ldur            x0, [x1, #-1]
    //     0x87d0b4: ubfx            x0, x0, #0xc, #0x14
    // 0x87d0b8: r16 = "2"
    //     0x87d0b8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87d0bc: ldr             x16, [x16, #0x6a8]
    // 0x87d0c0: stp             x16, x1, [SP]
    // 0x87d0c4: mov             lr, x0
    // 0x87d0c8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d0cc: blr             lr
    // 0x87d0d0: tbnz            w0, #4, #0x87d144
    // 0x87d0d4: nop             
    // 0x87d0d8: ldur            x0, [fp, #-0x10]
    // 0x87d0dc: r1 = LoadClassIdInstr(r0)
    //     0x87d0dc: ldur            x1, [x0, #-1]
    //     0x87d0e0: ubfx            x1, x1, #0xc, #0x14
    // 0x87d0e4: r16 = "4"
    //     0x87d0e4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d0e8: ldr             x16, [x16, #0x6b8]
    // 0x87d0ec: stp             x16, x0, [SP]
    // 0x87d0f0: mov             x0, x1
    // 0x87d0f4: mov             lr, x0
    // 0x87d0f8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d0fc: blr             lr
    // 0x87d100: tbnz            w0, #4, #0x87d144
    // 0x87d104: nop             
    // 0x87d108: ldur            x0, [fp, #-0x18]
    // 0x87d10c: r1 = LoadClassIdInstr(r0)
    //     0x87d10c: ldur            x1, [x0, #-1]
    //     0x87d110: ubfx            x1, x1, #0xc, #0x14
    // 0x87d114: r16 = "4"
    //     0x87d114: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d118: ldr             x16, [x16, #0x6b8]
    // 0x87d11c: stp             x16, x0, [SP]
    // 0x87d120: mov             x0, x1
    // 0x87d124: mov             lr, x0
    // 0x87d128: ldr             lr, [x21, lr, lsl #3]
    // 0x87d12c: blr             lr
    // 0x87d130: tbnz            w0, #4, #0x87d144
    // 0x87d134: nop             
    // 0x87d138: r0 = "search3"
    //     0x87d138: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d88] "search3"
    //     0x87d13c: ldr             x0, [x0, #0xd88]
    // 0x87d140: b               #0x8838b4
    // 0x87d144: ldur            x0, [fp, #-8]
    // 0x87d148: r1 = LoadClassIdInstr(r0)
    //     0x87d148: ldur            x1, [x0, #-1]
    //     0x87d14c: ubfx            x1, x1, #0xc, #0x14
    // 0x87d150: r16 = "3"
    //     0x87d150: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87d154: ldr             x16, [x16, #0x6b0]
    // 0x87d158: stp             x16, x0, [SP]
    // 0x87d15c: mov             x0, x1
    // 0x87d160: mov             lr, x0
    // 0x87d164: ldr             lr, [x21, lr, lsl #3]
    // 0x87d168: blr             lr
    // 0x87d16c: tbnz            w0, #4, #0x87d180
    // 0x87d170: nop             
    // 0x87d174: r0 = "search3.5"
    //     0x87d174: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d90] "search3.5"
    //     0x87d178: ldr             x0, [x0, #0xd90]
    // 0x87d17c: b               #0x8838b4
    // 0x87d180: r0 = "search1"
    //     0x87d180: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87d184: ldr             x0, [x0, #0xd68]
    // 0x87d188: b               #0x8838b4
    // 0x87d18c: r16 = "yukiMemoryMaki"
    //     0x87d18c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11e90] "yukiMemoryMaki"
    //     0x87d190: ldr             x16, [x16, #0xe90]
    // 0x87d194: ldur            lr, [fp, #-0x28]
    // 0x87d198: stp             lr, x16, [SP]
    // 0x87d19c: r0 = ==()
    //     0x87d19c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87d1a0: tbnz            w0, #4, #0x87d524
    // 0x87d1a4: nop             
    // 0x87d1a8: r0 = LoadStaticField(0xb54)
    //     0x87d1a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d1ac: ldr             x0, [x0, #0x16a8]
    // 0x87d1b0: cmp             w0, NULL
    // 0x87d1b4: b.ne            #0x87d1c4
    // 0x87d1b8: nop             
    // 0x87d1bc: r0 = Null
    //     0x87d1bc: mov             x0, NULL
    // 0x87d1c0: b               #0x87d1ec
    // 0x87d1c4: r17 = 351
    //     0x87d1c4: movz            x17, #0x15f
    // 0x87d1c8: ldr             w1, [x0, x17]
    // 0x87d1cc: DecompressPointer r1
    //     0x87d1cc: add             x1, x1, HEAP, lsl #32
    // 0x87d1d0: r0 = LoadClassIdInstr(r1)
    //     0x87d1d0: ldur            x0, [x1, #-1]
    //     0x87d1d4: ubfx            x0, x0, #0xc, #0x14
    // 0x87d1d8: r2 = "yukiMemoryMaki"
    //     0x87d1d8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11e90] "yukiMemoryMaki"
    //     0x87d1dc: ldr             x2, [x2, #0xe90]
    // 0x87d1e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d1e0: sub             lr, x0, #0xb4
    //     0x87d1e4: ldr             lr, [x21, lr, lsl #3]
    //     0x87d1e8: blr             lr
    // 0x87d1ec: cmp             w0, NULL
    // 0x87d1f0: b.ne            #0x87d200
    // 0x87d1f4: nop             
    // 0x87d1f8: r3 = ""
    //     0x87d1f8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d1fc: b               #0x87d204
    // 0x87d200: mov             x3, x0
    // 0x87d204: mov             x0, x3
    // 0x87d208: stur            x3, [fp, #-8]
    // 0x87d20c: r2 = Null
    //     0x87d20c: mov             x2, NULL
    // 0x87d210: r1 = Null
    //     0x87d210: mov             x1, NULL
    // 0x87d214: r4 = 59
    //     0x87d214: movz            x4, #0x3b
    // 0x87d218: branchIfSmi(r0, 0x87d228)
    //     0x87d218: tbz             w0, #0, #0x87d228
    //     0x87d21c: nop             
    // 0x87d220: r4 = LoadClassIdInstr(r0)
    //     0x87d220: ldur            x4, [x0, #-1]
    //     0x87d224: ubfx            x4, x4, #0xc, #0x14
    // 0x87d228: sub             x4, x4, #0x5d
    // 0x87d22c: cmp             x4, #1
    // 0x87d230: b.ls            #0x87d248
    // 0x87d234: nop             
    // 0x87d238: r8 = String
    //     0x87d238: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d23c: r3 = Null
    //     0x87d23c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11e98] Null
    //     0x87d240: ldr             x3, [x3, #0xe98]
    // 0x87d244: r0 = String()
    //     0x87d244: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d248: r0 = LoadStaticField(0xb54)
    //     0x87d248: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d24c: ldr             x0, [x0, #0x16a8]
    // 0x87d250: cmp             w0, NULL
    // 0x87d254: b.ne            #0x87d264
    // 0x87d258: nop             
    // 0x87d25c: r0 = Null
    //     0x87d25c: mov             x0, NULL
    // 0x87d260: b               #0x87d28c
    // 0x87d264: r17 = 351
    //     0x87d264: movz            x17, #0x15f
    // 0x87d268: ldr             w1, [x0, x17]
    // 0x87d26c: DecompressPointer r1
    //     0x87d26c: add             x1, x1, HEAP, lsl #32
    // 0x87d270: r0 = LoadClassIdInstr(r1)
    //     0x87d270: ldur            x0, [x1, #-1]
    //     0x87d274: ubfx            x0, x0, #0xc, #0x14
    // 0x87d278: r2 = "yukiMemoryBusinessDistrict"
    //     0x87d278: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d10] "yukiMemoryBusinessDistrict"
    //     0x87d27c: ldr             x2, [x2, #0xd10]
    // 0x87d280: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d280: sub             lr, x0, #0xb4
    //     0x87d284: ldr             lr, [x21, lr, lsl #3]
    //     0x87d288: blr             lr
    // 0x87d28c: cmp             w0, NULL
    // 0x87d290: b.ne            #0x87d2a0
    // 0x87d294: nop             
    // 0x87d298: r3 = ""
    //     0x87d298: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d29c: b               #0x87d2a4
    // 0x87d2a0: mov             x3, x0
    // 0x87d2a4: mov             x0, x3
    // 0x87d2a8: stur            x3, [fp, #-0x10]
    // 0x87d2ac: r2 = Null
    //     0x87d2ac: mov             x2, NULL
    // 0x87d2b0: r1 = Null
    //     0x87d2b0: mov             x1, NULL
    // 0x87d2b4: r4 = 59
    //     0x87d2b4: movz            x4, #0x3b
    // 0x87d2b8: branchIfSmi(r0, 0x87d2c8)
    //     0x87d2b8: tbz             w0, #0, #0x87d2c8
    //     0x87d2bc: nop             
    // 0x87d2c0: r4 = LoadClassIdInstr(r0)
    //     0x87d2c0: ldur            x4, [x0, #-1]
    //     0x87d2c4: ubfx            x4, x4, #0xc, #0x14
    // 0x87d2c8: sub             x4, x4, #0x5d
    // 0x87d2cc: cmp             x4, #1
    // 0x87d2d0: b.ls            #0x87d2e8
    // 0x87d2d4: nop             
    // 0x87d2d8: r8 = String
    //     0x87d2d8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d2dc: r3 = Null
    //     0x87d2dc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ea8] Null
    //     0x87d2e0: ldr             x3, [x3, #0xea8]
    // 0x87d2e4: r0 = String()
    //     0x87d2e4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d2e8: r0 = LoadStaticField(0xb54)
    //     0x87d2e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d2ec: ldr             x0, [x0, #0x16a8]
    // 0x87d2f0: cmp             w0, NULL
    // 0x87d2f4: b.ne            #0x87d304
    // 0x87d2f8: nop             
    // 0x87d2fc: r0 = Null
    //     0x87d2fc: mov             x0, NULL
    // 0x87d300: b               #0x87d32c
    // 0x87d304: r17 = 351
    //     0x87d304: movz            x17, #0x15f
    // 0x87d308: ldr             w1, [x0, x17]
    // 0x87d30c: DecompressPointer r1
    //     0x87d30c: add             x1, x1, HEAP, lsl #32
    // 0x87d310: r0 = LoadClassIdInstr(r1)
    //     0x87d310: ldur            x0, [x1, #-1]
    //     0x87d314: ubfx            x0, x0, #0xc, #0x14
    // 0x87d318: r2 = "yukiMemoryTownstreet"
    //     0x87d318: add             x2, PP, #0x11, lsl #12  ; [pp+0x11e68] "yukiMemoryTownstreet"
    //     0x87d31c: ldr             x2, [x2, #0xe68]
    // 0x87d320: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d320: sub             lr, x0, #0xb4
    //     0x87d324: ldr             lr, [x21, lr, lsl #3]
    //     0x87d328: blr             lr
    // 0x87d32c: cmp             w0, NULL
    // 0x87d330: b.ne            #0x87d340
    // 0x87d334: nop             
    // 0x87d338: r3 = ""
    //     0x87d338: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d33c: b               #0x87d344
    // 0x87d340: mov             x3, x0
    // 0x87d344: mov             x0, x3
    // 0x87d348: stur            x3, [fp, #-0x18]
    // 0x87d34c: r2 = Null
    //     0x87d34c: mov             x2, NULL
    // 0x87d350: r1 = Null
    //     0x87d350: mov             x1, NULL
    // 0x87d354: r4 = 59
    //     0x87d354: movz            x4, #0x3b
    // 0x87d358: branchIfSmi(r0, 0x87d368)
    //     0x87d358: tbz             w0, #0, #0x87d368
    //     0x87d35c: nop             
    // 0x87d360: r4 = LoadClassIdInstr(r0)
    //     0x87d360: ldur            x4, [x0, #-1]
    //     0x87d364: ubfx            x4, x4, #0xc, #0x14
    // 0x87d368: sub             x4, x4, #0x5d
    // 0x87d36c: cmp             x4, #1
    // 0x87d370: b.ls            #0x87d388
    // 0x87d374: nop             
    // 0x87d378: r8 = String
    //     0x87d378: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d37c: r3 = Null
    //     0x87d37c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11eb8] Null
    //     0x87d380: ldr             x3, [x3, #0xeb8]
    // 0x87d384: r0 = String()
    //     0x87d384: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d388: r0 = LoadStaticField(0xb54)
    //     0x87d388: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d38c: ldr             x0, [x0, #0x16a8]
    // 0x87d390: cmp             w0, NULL
    // 0x87d394: b.ne            #0x87d3a4
    // 0x87d398: nop             
    // 0x87d39c: r0 = Null
    //     0x87d39c: mov             x0, NULL
    // 0x87d3a0: b               #0x87d3cc
    // 0x87d3a4: r17 = 351
    //     0x87d3a4: movz            x17, #0x15f
    // 0x87d3a8: ldr             w1, [x0, x17]
    // 0x87d3ac: DecompressPointer r1
    //     0x87d3ac: add             x1, x1, HEAP, lsl #32
    // 0x87d3b0: r0 = LoadClassIdInstr(r1)
    //     0x87d3b0: ldur            x0, [x1, #-1]
    //     0x87d3b4: ubfx            x0, x0, #0xc, #0x14
    // 0x87d3b8: r2 = "yukiMemorySocialDistrict"
    //     0x87d3b8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11dd8] "yukiMemorySocialDistrict"
    //     0x87d3bc: ldr             x2, [x2, #0xdd8]
    // 0x87d3c0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d3c0: sub             lr, x0, #0xb4
    //     0x87d3c4: ldr             lr, [x21, lr, lsl #3]
    //     0x87d3c8: blr             lr
    // 0x87d3cc: cmp             w0, NULL
    // 0x87d3d0: b.ne            #0x87d3e0
    // 0x87d3d4: nop             
    // 0x87d3d8: r4 = ""
    //     0x87d3d8: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d3dc: b               #0x87d3e4
    // 0x87d3e0: mov             x4, x0
    // 0x87d3e4: ldur            x3, [fp, #-8]
    // 0x87d3e8: mov             x0, x4
    // 0x87d3ec: stur            x4, [fp, #-0x20]
    // 0x87d3f0: r2 = Null
    //     0x87d3f0: mov             x2, NULL
    // 0x87d3f4: r1 = Null
    //     0x87d3f4: mov             x1, NULL
    // 0x87d3f8: r4 = 59
    //     0x87d3f8: movz            x4, #0x3b
    // 0x87d3fc: branchIfSmi(r0, 0x87d40c)
    //     0x87d3fc: tbz             w0, #0, #0x87d40c
    //     0x87d400: nop             
    // 0x87d404: r4 = LoadClassIdInstr(r0)
    //     0x87d404: ldur            x4, [x0, #-1]
    //     0x87d408: ubfx            x4, x4, #0xc, #0x14
    // 0x87d40c: sub             x4, x4, #0x5d
    // 0x87d410: cmp             x4, #1
    // 0x87d414: b.ls            #0x87d42c
    // 0x87d418: nop             
    // 0x87d41c: r8 = String
    //     0x87d41c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d420: r3 = Null
    //     0x87d420: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ec8] Null
    //     0x87d424: ldr             x3, [x3, #0xec8]
    // 0x87d428: r0 = String()
    //     0x87d428: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d42c: ldur            x0, [fp, #-8]
    // 0x87d430: r1 = LoadClassIdInstr(r0)
    //     0x87d430: ldur            x1, [x0, #-1]
    //     0x87d434: ubfx            x1, x1, #0xc, #0x14
    // 0x87d438: r16 = ""
    //     0x87d438: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d43c: stp             x16, x0, [SP]
    // 0x87d440: mov             x0, x1
    // 0x87d444: mov             lr, x0
    // 0x87d448: ldr             lr, [x21, lr, lsl #3]
    // 0x87d44c: blr             lr
    // 0x87d450: tbnz            w0, #4, #0x87d51c
    // 0x87d454: nop             
    // 0x87d458: ldur            x0, [fp, #-0x10]
    // 0x87d45c: r1 = LoadClassIdInstr(r0)
    //     0x87d45c: ldur            x1, [x0, #-1]
    //     0x87d460: ubfx            x1, x1, #0xc, #0x14
    // 0x87d464: r16 = "4"
    //     0x87d464: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d468: ldr             x16, [x16, #0x6b8]
    // 0x87d46c: stp             x16, x0, [SP]
    // 0x87d470: mov             x0, x1
    // 0x87d474: mov             lr, x0
    // 0x87d478: ldr             lr, [x21, lr, lsl #3]
    // 0x87d47c: blr             lr
    // 0x87d480: tbnz            w0, #4, #0x87d51c
    // 0x87d484: nop             
    // 0x87d488: ldur            x0, [fp, #-0x18]
    // 0x87d48c: r1 = LoadClassIdInstr(r0)
    //     0x87d48c: ldur            x1, [x0, #-1]
    //     0x87d490: ubfx            x1, x1, #0xc, #0x14
    // 0x87d494: r16 = "4"
    //     0x87d494: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d498: ldr             x16, [x16, #0x6b8]
    // 0x87d49c: stp             x16, x0, [SP]
    // 0x87d4a0: mov             x0, x1
    // 0x87d4a4: mov             lr, x0
    // 0x87d4a8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d4ac: blr             lr
    // 0x87d4b0: tbnz            w0, #4, #0x87d51c
    // 0x87d4b4: nop             
    // 0x87d4b8: ldur            x1, [fp, #-0x20]
    // 0x87d4bc: r0 = LoadClassIdInstr(r1)
    //     0x87d4bc: ldur            x0, [x1, #-1]
    //     0x87d4c0: ubfx            x0, x0, #0xc, #0x14
    // 0x87d4c4: r16 = ""
    //     0x87d4c4: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d4c8: stp             x16, x1, [SP]
    // 0x87d4cc: mov             lr, x0
    // 0x87d4d0: ldr             lr, [x21, lr, lsl #3]
    // 0x87d4d4: blr             lr
    // 0x87d4d8: tbz             w0, #4, #0x87d510
    // 0x87d4dc: nop             
    // 0x87d4e0: ldur            x0, [fp, #-0x20]
    // 0x87d4e4: r1 = LoadClassIdInstr(r0)
    //     0x87d4e4: ldur            x1, [x0, #-1]
    //     0x87d4e8: ubfx            x1, x1, #0xc, #0x14
    // 0x87d4ec: r16 = "1"
    //     0x87d4ec: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d4f0: ldr             x16, [x16, #0x6a0]
    // 0x87d4f4: stp             x16, x0, [SP]
    // 0x87d4f8: mov             x0, x1
    // 0x87d4fc: mov             lr, x0
    // 0x87d500: ldr             lr, [x21, lr, lsl #3]
    // 0x87d504: blr             lr
    // 0x87d508: tbnz            w0, #4, #0x87d51c
    // 0x87d50c: nop             
    // 0x87d510: r0 = "yukiMemoryMaki"
    //     0x87d510: add             x0, PP, #0x11, lsl #12  ; [pp+0x11e90] "yukiMemoryMaki"
    //     0x87d514: ldr             x0, [x0, #0xe90]
    // 0x87d518: b               #0x8838b4
    // 0x87d51c: r0 = "end"
    //     0x87d51c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87d520: b               #0x8838b4
    // 0x87d524: r16 = "yukiMemoryAustin"
    //     0x87d524: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ed8] "yukiMemoryAustin"
    //     0x87d528: ldr             x16, [x16, #0xed8]
    // 0x87d52c: ldur            lr, [fp, #-0x28]
    // 0x87d530: stp             lr, x16, [SP]
    // 0x87d534: r0 = ==()
    //     0x87d534: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87d538: tbnz            w0, #4, #0x87d6f8
    // 0x87d53c: nop             
    // 0x87d540: r0 = LoadStaticField(0xb54)
    //     0x87d540: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d544: ldr             x0, [x0, #0x16a8]
    // 0x87d548: cmp             w0, NULL
    // 0x87d54c: b.ne            #0x87d55c
    // 0x87d550: nop             
    // 0x87d554: r0 = Null
    //     0x87d554: mov             x0, NULL
    // 0x87d558: b               #0x87d584
    // 0x87d55c: r17 = 351
    //     0x87d55c: movz            x17, #0x15f
    // 0x87d560: ldr             w1, [x0, x17]
    // 0x87d564: DecompressPointer r1
    //     0x87d564: add             x1, x1, HEAP, lsl #32
    // 0x87d568: r0 = LoadClassIdInstr(r1)
    //     0x87d568: ldur            x0, [x1, #-1]
    //     0x87d56c: ubfx            x0, x0, #0xc, #0x14
    // 0x87d570: r2 = "yukiMemoryTownstreet"
    //     0x87d570: add             x2, PP, #0x11, lsl #12  ; [pp+0x11e68] "yukiMemoryTownstreet"
    //     0x87d574: ldr             x2, [x2, #0xe68]
    // 0x87d578: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d578: sub             lr, x0, #0xb4
    //     0x87d57c: ldr             lr, [x21, lr, lsl #3]
    //     0x87d580: blr             lr
    // 0x87d584: cmp             w0, NULL
    // 0x87d588: b.ne            #0x87d598
    // 0x87d58c: nop             
    // 0x87d590: r3 = ""
    //     0x87d590: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d594: b               #0x87d59c
    // 0x87d598: mov             x3, x0
    // 0x87d59c: mov             x0, x3
    // 0x87d5a0: stur            x3, [fp, #-8]
    // 0x87d5a4: r2 = Null
    //     0x87d5a4: mov             x2, NULL
    // 0x87d5a8: r1 = Null
    //     0x87d5a8: mov             x1, NULL
    // 0x87d5ac: r4 = 59
    //     0x87d5ac: movz            x4, #0x3b
    // 0x87d5b0: branchIfSmi(r0, 0x87d5c0)
    //     0x87d5b0: tbz             w0, #0, #0x87d5c0
    //     0x87d5b4: nop             
    // 0x87d5b8: r4 = LoadClassIdInstr(r0)
    //     0x87d5b8: ldur            x4, [x0, #-1]
    //     0x87d5bc: ubfx            x4, x4, #0xc, #0x14
    // 0x87d5c0: sub             x4, x4, #0x5d
    // 0x87d5c4: cmp             x4, #1
    // 0x87d5c8: b.ls            #0x87d5e0
    // 0x87d5cc: nop             
    // 0x87d5d0: r8 = String
    //     0x87d5d0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d5d4: r3 = Null
    //     0x87d5d4: add             x3, PP, #0x11, lsl #12  ; [pp+0x11ee0] Null
    //     0x87d5d8: ldr             x3, [x3, #0xee0]
    // 0x87d5dc: r0 = String()
    //     0x87d5dc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d5e0: ldur            x1, [fp, #-8]
    // 0x87d5e4: r0 = LoadClassIdInstr(r1)
    //     0x87d5e4: ldur            x0, [x1, #-1]
    //     0x87d5e8: ubfx            x0, x0, #0xc, #0x14
    // 0x87d5ec: r16 = ""
    //     0x87d5ec: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d5f0: stp             x16, x1, [SP]
    // 0x87d5f4: mov             lr, x0
    // 0x87d5f8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d5fc: blr             lr
    // 0x87d600: tbnz            w0, #4, #0x87d614
    // 0x87d604: nop             
    // 0x87d608: r0 = "yukiMemoryAustin"
    //     0x87d608: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ed8] "yukiMemoryAustin"
    //     0x87d60c: ldr             x0, [x0, #0xed8]
    // 0x87d610: b               #0x8838b4
    // 0x87d614: ldur            x1, [fp, #-8]
    // 0x87d618: r0 = LoadClassIdInstr(r1)
    //     0x87d618: ldur            x0, [x1, #-1]
    //     0x87d61c: ubfx            x0, x0, #0xc, #0x14
    // 0x87d620: r16 = "1"
    //     0x87d620: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d624: ldr             x16, [x16, #0x6a0]
    // 0x87d628: stp             x16, x1, [SP]
    // 0x87d62c: mov             lr, x0
    // 0x87d630: ldr             lr, [x21, lr, lsl #3]
    // 0x87d634: blr             lr
    // 0x87d638: tbnz            w0, #4, #0x87d64c
    // 0x87d63c: nop             
    // 0x87d640: r0 = "yukiMemoryAustin2"
    //     0x87d640: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ef0] "yukiMemoryAustin2"
    //     0x87d644: ldr             x0, [x0, #0xef0]
    // 0x87d648: b               #0x8838b4
    // 0x87d64c: ldur            x1, [fp, #-8]
    // 0x87d650: r0 = LoadClassIdInstr(r1)
    //     0x87d650: ldur            x0, [x1, #-1]
    //     0x87d654: ubfx            x0, x0, #0xc, #0x14
    // 0x87d658: r16 = "2"
    //     0x87d658: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87d65c: ldr             x16, [x16, #0x6a8]
    // 0x87d660: stp             x16, x1, [SP]
    // 0x87d664: mov             lr, x0
    // 0x87d668: ldr             lr, [x21, lr, lsl #3]
    // 0x87d66c: blr             lr
    // 0x87d670: tbz             w0, #4, #0x87d6a4
    // 0x87d674: nop             
    // 0x87d678: ldur            x1, [fp, #-8]
    // 0x87d67c: r0 = LoadClassIdInstr(r1)
    //     0x87d67c: ldur            x0, [x1, #-1]
    //     0x87d680: ubfx            x0, x0, #0xc, #0x14
    // 0x87d684: r16 = "3"
    //     0x87d684: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87d688: ldr             x16, [x16, #0x6b0]
    // 0x87d68c: stp             x16, x1, [SP]
    // 0x87d690: mov             lr, x0
    // 0x87d694: ldr             lr, [x21, lr, lsl #3]
    // 0x87d698: blr             lr
    // 0x87d69c: tbnz            w0, #4, #0x87d6b0
    // 0x87d6a0: nop             
    // 0x87d6a4: r0 = "yukiMemoryAustin3"
    //     0x87d6a4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ef8] "yukiMemoryAustin3"
    //     0x87d6a8: ldr             x0, [x0, #0xef8]
    // 0x87d6ac: b               #0x8838b4
    // 0x87d6b0: ldur            x0, [fp, #-8]
    // 0x87d6b4: r1 = LoadClassIdInstr(r0)
    //     0x87d6b4: ldur            x1, [x0, #-1]
    //     0x87d6b8: ubfx            x1, x1, #0xc, #0x14
    // 0x87d6bc: r16 = "4"
    //     0x87d6bc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d6c0: ldr             x16, [x16, #0x6b8]
    // 0x87d6c4: stp             x16, x0, [SP]
    // 0x87d6c8: mov             x0, x1
    // 0x87d6cc: mov             lr, x0
    // 0x87d6d0: ldr             lr, [x21, lr, lsl #3]
    // 0x87d6d4: blr             lr
    // 0x87d6d8: tbnz            w0, #4, #0x87d6ec
    // 0x87d6dc: nop             
    // 0x87d6e0: r0 = "yukiMemoryAustin4"
    //     0x87d6e0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f00] "yukiMemoryAustin4"
    //     0x87d6e4: ldr             x0, [x0, #0xf00]
    // 0x87d6e8: b               #0x8838b4
    // 0x87d6ec: r0 = "yukiMemoryAustin"
    //     0x87d6ec: add             x0, PP, #0x11, lsl #12  ; [pp+0x11ed8] "yukiMemoryAustin"
    //     0x87d6f0: ldr             x0, [x0, #0xed8]
    // 0x87d6f4: b               #0x8838b4
    // 0x87d6f8: r16 = "yukiMemoryTownstreet"
    //     0x87d6f8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11e68] "yukiMemoryTownstreet"
    //     0x87d6fc: ldr             x16, [x16, #0xe68]
    // 0x87d700: ldur            lr, [fp, #-0x28]
    // 0x87d704: stp             lr, x16, [SP]
    // 0x87d708: r0 = ==()
    //     0x87d708: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87d70c: tbnz            w0, #4, #0x87da10
    // 0x87d710: nop             
    // 0x87d714: r0 = LoadStaticField(0xb54)
    //     0x87d714: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d718: ldr             x0, [x0, #0x16a8]
    // 0x87d71c: cmp             w0, NULL
    // 0x87d720: b.ne            #0x87d730
    // 0x87d724: nop             
    // 0x87d728: r0 = Null
    //     0x87d728: mov             x0, NULL
    // 0x87d72c: b               #0x87d758
    // 0x87d730: r17 = 351
    //     0x87d730: movz            x17, #0x15f
    // 0x87d734: ldr             w1, [x0, x17]
    // 0x87d738: DecompressPointer r1
    //     0x87d738: add             x1, x1, HEAP, lsl #32
    // 0x87d73c: r0 = LoadClassIdInstr(r1)
    //     0x87d73c: ldur            x0, [x1, #-1]
    //     0x87d740: ubfx            x0, x0, #0xc, #0x14
    // 0x87d744: r2 = "yukiMemoryTownstreet"
    //     0x87d744: add             x2, PP, #0x11, lsl #12  ; [pp+0x11e68] "yukiMemoryTownstreet"
    //     0x87d748: ldr             x2, [x2, #0xe68]
    // 0x87d74c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d74c: sub             lr, x0, #0xb4
    //     0x87d750: ldr             lr, [x21, lr, lsl #3]
    //     0x87d754: blr             lr
    // 0x87d758: cmp             w0, NULL
    // 0x87d75c: b.ne            #0x87d76c
    // 0x87d760: nop             
    // 0x87d764: r3 = ""
    //     0x87d764: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d768: b               #0x87d770
    // 0x87d76c: mov             x3, x0
    // 0x87d770: mov             x0, x3
    // 0x87d774: stur            x3, [fp, #-8]
    // 0x87d778: r2 = Null
    //     0x87d778: mov             x2, NULL
    // 0x87d77c: r1 = Null
    //     0x87d77c: mov             x1, NULL
    // 0x87d780: r4 = 59
    //     0x87d780: movz            x4, #0x3b
    // 0x87d784: branchIfSmi(r0, 0x87d794)
    //     0x87d784: tbz             w0, #0, #0x87d794
    //     0x87d788: nop             
    // 0x87d78c: r4 = LoadClassIdInstr(r0)
    //     0x87d78c: ldur            x4, [x0, #-1]
    //     0x87d790: ubfx            x4, x4, #0xc, #0x14
    // 0x87d794: sub             x4, x4, #0x5d
    // 0x87d798: cmp             x4, #1
    // 0x87d79c: b.ls            #0x87d7b4
    // 0x87d7a0: nop             
    // 0x87d7a4: r8 = String
    //     0x87d7a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d7a8: r3 = Null
    //     0x87d7a8: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f08] Null
    //     0x87d7ac: ldr             x3, [x3, #0xf08]
    // 0x87d7b0: r0 = String()
    //     0x87d7b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d7b4: r0 = LoadStaticField(0xb54)
    //     0x87d7b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87d7b8: ldr             x0, [x0, #0x16a8]
    // 0x87d7bc: cmp             w0, NULL
    // 0x87d7c0: b.ne            #0x87d7d0
    // 0x87d7c4: nop             
    // 0x87d7c8: r0 = Null
    //     0x87d7c8: mov             x0, NULL
    // 0x87d7cc: b               #0x87d7f8
    // 0x87d7d0: r17 = 351
    //     0x87d7d0: movz            x17, #0x15f
    // 0x87d7d4: ldr             w1, [x0, x17]
    // 0x87d7d8: DecompressPointer r1
    //     0x87d7d8: add             x1, x1, HEAP, lsl #32
    // 0x87d7dc: r0 = LoadClassIdInstr(r1)
    //     0x87d7dc: ldur            x0, [x1, #-1]
    //     0x87d7e0: ubfx            x0, x0, #0xc, #0x14
    // 0x87d7e4: r2 = "yukiMemorySchoolEntrance"
    //     0x87d7e4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11d50] "yukiMemorySchoolEntrance"
    //     0x87d7e8: ldr             x2, [x2, #0xd50]
    // 0x87d7ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87d7ec: sub             lr, x0, #0xb4
    //     0x87d7f0: ldr             lr, [x21, lr, lsl #3]
    //     0x87d7f4: blr             lr
    // 0x87d7f8: cmp             w0, NULL
    // 0x87d7fc: b.ne            #0x87d80c
    // 0x87d800: nop             
    // 0x87d804: r4 = ""
    //     0x87d804: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d808: b               #0x87d810
    // 0x87d80c: mov             x4, x0
    // 0x87d810: ldur            x3, [fp, #-8]
    // 0x87d814: mov             x0, x4
    // 0x87d818: stur            x4, [fp, #-0x10]
    // 0x87d81c: r2 = Null
    //     0x87d81c: mov             x2, NULL
    // 0x87d820: r1 = Null
    //     0x87d820: mov             x1, NULL
    // 0x87d824: r4 = 59
    //     0x87d824: movz            x4, #0x3b
    // 0x87d828: branchIfSmi(r0, 0x87d838)
    //     0x87d828: tbz             w0, #0, #0x87d838
    //     0x87d82c: nop             
    // 0x87d830: r4 = LoadClassIdInstr(r0)
    //     0x87d830: ldur            x4, [x0, #-1]
    //     0x87d834: ubfx            x4, x4, #0xc, #0x14
    // 0x87d838: sub             x4, x4, #0x5d
    // 0x87d83c: cmp             x4, #1
    // 0x87d840: b.ls            #0x87d858
    // 0x87d844: nop             
    // 0x87d848: r8 = String
    //     0x87d848: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87d84c: r3 = Null
    //     0x87d84c: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f18] Null
    //     0x87d850: ldr             x3, [x3, #0xf18]
    // 0x87d854: r0 = String()
    //     0x87d854: bl              #0x1523244  ; IsType_String_Stub
    // 0x87d858: ldur            x1, [fp, #-8]
    // 0x87d85c: r0 = LoadClassIdInstr(r1)
    //     0x87d85c: ldur            x0, [x1, #-1]
    //     0x87d860: ubfx            x0, x0, #0xc, #0x14
    // 0x87d864: r16 = ""
    //     0x87d864: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87d868: stp             x16, x1, [SP]
    // 0x87d86c: mov             lr, x0
    // 0x87d870: ldr             lr, [x21, lr, lsl #3]
    // 0x87d874: blr             lr
    // 0x87d878: tbnz            w0, #4, #0x87d88c
    // 0x87d87c: nop             
    // 0x87d880: r0 = "search1"
    //     0x87d880: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87d884: ldr             x0, [x0, #0xd68]
    // 0x87d888: b               #0x8838b4
    // 0x87d88c: ldur            x1, [fp, #-8]
    // 0x87d890: r0 = LoadClassIdInstr(r1)
    //     0x87d890: ldur            x0, [x1, #-1]
    //     0x87d894: ubfx            x0, x0, #0xc, #0x14
    // 0x87d898: r16 = "1"
    //     0x87d898: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d89c: ldr             x16, [x16, #0x6a0]
    // 0x87d8a0: stp             x16, x1, [SP]
    // 0x87d8a4: mov             lr, x0
    // 0x87d8a8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d8ac: blr             lr
    // 0x87d8b0: tbnz            w0, #4, #0x87d8c4
    // 0x87d8b4: nop             
    // 0x87d8b8: r0 = "search1.5"
    //     0x87d8b8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d70] "search1.5"
    //     0x87d8bc: ldr             x0, [x0, #0xd70]
    // 0x87d8c0: b               #0x8838b4
    // 0x87d8c4: ldur            x1, [fp, #-8]
    // 0x87d8c8: r0 = LoadClassIdInstr(r1)
    //     0x87d8c8: ldur            x0, [x1, #-1]
    //     0x87d8cc: ubfx            x0, x0, #0xc, #0x14
    // 0x87d8d0: r16 = "2"
    //     0x87d8d0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87d8d4: ldr             x16, [x16, #0x6a8]
    // 0x87d8d8: stp             x16, x1, [SP]
    // 0x87d8dc: mov             lr, x0
    // 0x87d8e0: ldr             lr, [x21, lr, lsl #3]
    // 0x87d8e4: blr             lr
    // 0x87d8e8: tbnz            w0, #4, #0x87d8fc
    // 0x87d8ec: nop             
    // 0x87d8f0: r0 = "search2"
    //     0x87d8f0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d78] "search2"
    //     0x87d8f4: ldr             x0, [x0, #0xd78]
    // 0x87d8f8: b               #0x8838b4
    // 0x87d8fc: ldur            x1, [fp, #-8]
    // 0x87d900: r0 = LoadClassIdInstr(r1)
    //     0x87d900: ldur            x0, [x1, #-1]
    //     0x87d904: ubfx            x0, x0, #0xc, #0x14
    // 0x87d908: r16 = "3"
    //     0x87d908: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87d90c: ldr             x16, [x16, #0x6b0]
    // 0x87d910: stp             x16, x1, [SP]
    // 0x87d914: mov             lr, x0
    // 0x87d918: ldr             lr, [x21, lr, lsl #3]
    // 0x87d91c: blr             lr
    // 0x87d920: tbnz            w0, #4, #0x87d960
    // 0x87d924: nop             
    // 0x87d928: ldur            x1, [fp, #-0x10]
    // 0x87d92c: r0 = LoadClassIdInstr(r1)
    //     0x87d92c: ldur            x0, [x1, #-1]
    //     0x87d930: ubfx            x0, x0, #0xc, #0x14
    // 0x87d934: r16 = "1"
    //     0x87d934: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d938: ldr             x16, [x16, #0x6a0]
    // 0x87d93c: stp             x16, x1, [SP]
    // 0x87d940: mov             lr, x0
    // 0x87d944: ldr             lr, [x21, lr, lsl #3]
    // 0x87d948: blr             lr
    // 0x87d94c: tbz             w0, #4, #0x87d960
    // 0x87d950: nop             
    // 0x87d954: r0 = "search2.5"
    //     0x87d954: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d80] "search2.5"
    //     0x87d958: ldr             x0, [x0, #0xd80]
    // 0x87d95c: b               #0x8838b4
    // 0x87d960: ldur            x1, [fp, #-8]
    // 0x87d964: r0 = LoadClassIdInstr(r1)
    //     0x87d964: ldur            x0, [x1, #-1]
    //     0x87d968: ubfx            x0, x0, #0xc, #0x14
    // 0x87d96c: r16 = "3"
    //     0x87d96c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x87d970: ldr             x16, [x16, #0x6b0]
    // 0x87d974: stp             x16, x1, [SP]
    // 0x87d978: mov             lr, x0
    // 0x87d97c: ldr             lr, [x21, lr, lsl #3]
    // 0x87d980: blr             lr
    // 0x87d984: tbnz            w0, #4, #0x87d9c8
    // 0x87d988: nop             
    // 0x87d98c: ldur            x0, [fp, #-0x10]
    // 0x87d990: r1 = LoadClassIdInstr(r0)
    //     0x87d990: ldur            x1, [x0, #-1]
    //     0x87d994: ubfx            x1, x1, #0xc, #0x14
    // 0x87d998: r16 = "1"
    //     0x87d998: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87d99c: ldr             x16, [x16, #0x6a0]
    // 0x87d9a0: stp             x16, x0, [SP]
    // 0x87d9a4: mov             x0, x1
    // 0x87d9a8: mov             lr, x0
    // 0x87d9ac: ldr             lr, [x21, lr, lsl #3]
    // 0x87d9b0: blr             lr
    // 0x87d9b4: tbnz            w0, #4, #0x87d9c8
    // 0x87d9b8: nop             
    // 0x87d9bc: r0 = "search3"
    //     0x87d9bc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d88] "search3"
    //     0x87d9c0: ldr             x0, [x0, #0xd88]
    // 0x87d9c4: b               #0x8838b4
    // 0x87d9c8: ldur            x0, [fp, #-8]
    // 0x87d9cc: r1 = LoadClassIdInstr(r0)
    //     0x87d9cc: ldur            x1, [x0, #-1]
    //     0x87d9d0: ubfx            x1, x1, #0xc, #0x14
    // 0x87d9d4: r16 = "4"
    //     0x87d9d4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b8] "4"
    //     0x87d9d8: ldr             x16, [x16, #0x6b8]
    // 0x87d9dc: stp             x16, x0, [SP]
    // 0x87d9e0: mov             x0, x1
    // 0x87d9e4: mov             lr, x0
    // 0x87d9e8: ldr             lr, [x21, lr, lsl #3]
    // 0x87d9ec: blr             lr
    // 0x87d9f0: tbnz            w0, #4, #0x87da04
    // 0x87d9f4: nop             
    // 0x87d9f8: r0 = "search3.5"
    //     0x87d9f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d90] "search3.5"
    //     0x87d9fc: ldr             x0, [x0, #0xd90]
    // 0x87da00: b               #0x8838b4
    // 0x87da04: r0 = "search1"
    //     0x87da04: add             x0, PP, #0x11, lsl #12  ; [pp+0x11d68] "search1"
    //     0x87da08: ldr             x0, [x0, #0xd68]
    // 0x87da0c: b               #0x8838b4
    // 0x87da10: r16 = "guanMemoryNaoki"
    //     0x87da10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11f28] "guanMemoryNaoki"
    //     0x87da14: ldr             x16, [x16, #0xf28]
    // 0x87da18: ldur            lr, [fp, #-0x28]
    // 0x87da1c: stp             lr, x16, [SP]
    // 0x87da20: r0 = ==()
    //     0x87da20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87da24: tbnz            w0, #4, #0x87db10
    // 0x87da28: nop             
    // 0x87da2c: r0 = LoadStaticField(0xb54)
    //     0x87da2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87da30: ldr             x0, [x0, #0x16a8]
    // 0x87da34: cmp             w0, NULL
    // 0x87da38: b.ne            #0x87da48
    // 0x87da3c: nop             
    // 0x87da40: r0 = Null
    //     0x87da40: mov             x0, NULL
    // 0x87da44: b               #0x87da70
    // 0x87da48: r17 = 351
    //     0x87da48: movz            x17, #0x15f
    // 0x87da4c: ldr             w1, [x0, x17]
    // 0x87da50: DecompressPointer r1
    //     0x87da50: add             x1, x1, HEAP, lsl #32
    // 0x87da54: r0 = LoadClassIdInstr(r1)
    //     0x87da54: ldur            x0, [x1, #-1]
    //     0x87da58: ubfx            x0, x0, #0xc, #0x14
    // 0x87da5c: r2 = "guanMemoryOptional2"
    //     0x87da5c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f30] "guanMemoryOptional2"
    //     0x87da60: ldr             x2, [x2, #0xf30]
    // 0x87da64: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87da64: sub             lr, x0, #0xb4
    //     0x87da68: ldr             lr, [x21, lr, lsl #3]
    //     0x87da6c: blr             lr
    // 0x87da70: cmp             w0, NULL
    // 0x87da74: b.ne            #0x87da84
    // 0x87da78: nop             
    // 0x87da7c: r3 = ""
    //     0x87da7c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87da80: b               #0x87da88
    // 0x87da84: mov             x3, x0
    // 0x87da88: mov             x0, x3
    // 0x87da8c: stur            x3, [fp, #-8]
    // 0x87da90: r2 = Null
    //     0x87da90: mov             x2, NULL
    // 0x87da94: r1 = Null
    //     0x87da94: mov             x1, NULL
    // 0x87da98: r4 = 59
    //     0x87da98: movz            x4, #0x3b
    // 0x87da9c: branchIfSmi(r0, 0x87daac)
    //     0x87da9c: tbz             w0, #0, #0x87daac
    //     0x87daa0: nop             
    // 0x87daa4: r4 = LoadClassIdInstr(r0)
    //     0x87daa4: ldur            x4, [x0, #-1]
    //     0x87daa8: ubfx            x4, x4, #0xc, #0x14
    // 0x87daac: sub             x4, x4, #0x5d
    // 0x87dab0: cmp             x4, #1
    // 0x87dab4: b.ls            #0x87dacc
    // 0x87dab8: nop             
    // 0x87dabc: r8 = String
    //     0x87dabc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87dac0: r3 = Null
    //     0x87dac0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f38] Null
    //     0x87dac4: ldr             x3, [x3, #0xf38]
    // 0x87dac8: r0 = String()
    //     0x87dac8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87dacc: ldur            x0, [fp, #-8]
    // 0x87dad0: r1 = LoadClassIdInstr(r0)
    //     0x87dad0: ldur            x1, [x0, #-1]
    //     0x87dad4: ubfx            x1, x1, #0xc, #0x14
    // 0x87dad8: r16 = ""
    //     0x87dad8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dadc: stp             x16, x0, [SP]
    // 0x87dae0: mov             x0, x1
    // 0x87dae4: mov             lr, x0
    // 0x87dae8: ldr             lr, [x21, lr, lsl #3]
    // 0x87daec: blr             lr
    // 0x87daf0: tbnz            w0, #4, #0x87db04
    // 0x87daf4: nop             
    // 0x87daf8: r0 = "naoki1"
    //     0x87daf8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f48] "naoki1"
    //     0x87dafc: ldr             x0, [x0, #0xf48]
    // 0x87db00: b               #0x8838b4
    // 0x87db04: r0 = "complete"
    //     0x87db04: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87db08: ldr             x0, [x0, #0x590]
    // 0x87db0c: b               #0x8838b4
    // 0x87db10: r16 = "guanMemoryMain"
    //     0x87db10: add             x16, PP, #0x11, lsl #12  ; [pp+0x11f50] "guanMemoryMain"
    //     0x87db14: ldr             x16, [x16, #0xf50]
    // 0x87db18: ldur            lr, [fp, #-0x28]
    // 0x87db1c: stp             lr, x16, [SP]
    // 0x87db20: r0 = ==()
    //     0x87db20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87db24: tbnz            w0, #4, #0x87dc0c
    // 0x87db28: nop             
    // 0x87db2c: r0 = LoadStaticField(0xb54)
    //     0x87db2c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87db30: ldr             x0, [x0, #0x16a8]
    // 0x87db34: cmp             w0, NULL
    // 0x87db38: b.ne            #0x87db48
    // 0x87db3c: nop             
    // 0x87db40: r0 = Null
    //     0x87db40: mov             x0, NULL
    // 0x87db44: b               #0x87db70
    // 0x87db48: r17 = 351
    //     0x87db48: movz            x17, #0x15f
    // 0x87db4c: ldr             w1, [x0, x17]
    // 0x87db50: DecompressPointer r1
    //     0x87db50: add             x1, x1, HEAP, lsl #32
    // 0x87db54: r0 = LoadClassIdInstr(r1)
    //     0x87db54: ldur            x0, [x1, #-1]
    //     0x87db58: ubfx            x0, x0, #0xc, #0x14
    // 0x87db5c: r2 = "guanMemoryMain"
    //     0x87db5c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f50] "guanMemoryMain"
    //     0x87db60: ldr             x2, [x2, #0xf50]
    // 0x87db64: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87db64: sub             lr, x0, #0xb4
    //     0x87db68: ldr             lr, [x21, lr, lsl #3]
    //     0x87db6c: blr             lr
    // 0x87db70: cmp             w0, NULL
    // 0x87db74: b.ne            #0x87db84
    // 0x87db78: nop             
    // 0x87db7c: r3 = ""
    //     0x87db7c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87db80: b               #0x87db88
    // 0x87db84: mov             x3, x0
    // 0x87db88: mov             x0, x3
    // 0x87db8c: stur            x3, [fp, #-8]
    // 0x87db90: r2 = Null
    //     0x87db90: mov             x2, NULL
    // 0x87db94: r1 = Null
    //     0x87db94: mov             x1, NULL
    // 0x87db98: r4 = 59
    //     0x87db98: movz            x4, #0x3b
    // 0x87db9c: branchIfSmi(r0, 0x87dbac)
    //     0x87db9c: tbz             w0, #0, #0x87dbac
    //     0x87dba0: nop             
    // 0x87dba4: r4 = LoadClassIdInstr(r0)
    //     0x87dba4: ldur            x4, [x0, #-1]
    //     0x87dba8: ubfx            x4, x4, #0xc, #0x14
    // 0x87dbac: sub             x4, x4, #0x5d
    // 0x87dbb0: cmp             x4, #1
    // 0x87dbb4: b.ls            #0x87dbcc
    // 0x87dbb8: nop             
    // 0x87dbbc: r8 = String
    //     0x87dbbc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87dbc0: r3 = Null
    //     0x87dbc0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f58] Null
    //     0x87dbc4: ldr             x3, [x3, #0xf58]
    // 0x87dbc8: r0 = String()
    //     0x87dbc8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87dbcc: ldur            x0, [fp, #-8]
    // 0x87dbd0: r1 = LoadClassIdInstr(r0)
    //     0x87dbd0: ldur            x1, [x0, #-1]
    //     0x87dbd4: ubfx            x1, x1, #0xc, #0x14
    // 0x87dbd8: r16 = ""
    //     0x87dbd8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dbdc: stp             x16, x0, [SP]
    // 0x87dbe0: mov             x0, x1
    // 0x87dbe4: mov             lr, x0
    // 0x87dbe8: ldr             lr, [x21, lr, lsl #3]
    // 0x87dbec: blr             lr
    // 0x87dbf0: tbnz            w0, #4, #0x87dc04
    // 0x87dbf4: nop             
    // 0x87dbf8: r0 = "guanMemoryMain"
    //     0x87dbf8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f50] "guanMemoryMain"
    //     0x87dbfc: ldr             x0, [x0, #0xf50]
    // 0x87dc00: b               #0x8838b4
    // 0x87dc04: r0 = "end"
    //     0x87dc04: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87dc08: b               #0x8838b4
    // 0x87dc0c: r16 = "guanMemoryBadge1"
    //     0x87dc0c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11f68] "guanMemoryBadge1"
    //     0x87dc10: ldr             x16, [x16, #0xf68]
    // 0x87dc14: ldur            lr, [fp, #-0x28]
    // 0x87dc18: stp             lr, x16, [SP]
    // 0x87dc1c: r0 = ==()
    //     0x87dc1c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87dc20: tbnz            w0, #4, #0x87de4c
    // 0x87dc24: nop             
    // 0x87dc28: r0 = LoadStaticField(0xb54)
    //     0x87dc28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87dc2c: ldr             x0, [x0, #0x16a8]
    // 0x87dc30: cmp             w0, NULL
    // 0x87dc34: b.ne            #0x87dc44
    // 0x87dc38: nop             
    // 0x87dc3c: r0 = Null
    //     0x87dc3c: mov             x0, NULL
    // 0x87dc40: b               #0x87dc6c
    // 0x87dc44: r17 = 351
    //     0x87dc44: movz            x17, #0x15f
    // 0x87dc48: ldr             w1, [x0, x17]
    // 0x87dc4c: DecompressPointer r1
    //     0x87dc4c: add             x1, x1, HEAP, lsl #32
    // 0x87dc50: r0 = LoadClassIdInstr(r1)
    //     0x87dc50: ldur            x0, [x1, #-1]
    //     0x87dc54: ubfx            x0, x0, #0xc, #0x14
    // 0x87dc58: r2 = "guanMemoryBadge1"
    //     0x87dc58: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f68] "guanMemoryBadge1"
    //     0x87dc5c: ldr             x2, [x2, #0xf68]
    // 0x87dc60: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87dc60: sub             lr, x0, #0xb4
    //     0x87dc64: ldr             lr, [x21, lr, lsl #3]
    //     0x87dc68: blr             lr
    // 0x87dc6c: cmp             w0, NULL
    // 0x87dc70: b.ne            #0x87dc80
    // 0x87dc74: nop             
    // 0x87dc78: r3 = ""
    //     0x87dc78: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dc7c: b               #0x87dc84
    // 0x87dc80: mov             x3, x0
    // 0x87dc84: mov             x0, x3
    // 0x87dc88: stur            x3, [fp, #-8]
    // 0x87dc8c: r2 = Null
    //     0x87dc8c: mov             x2, NULL
    // 0x87dc90: r1 = Null
    //     0x87dc90: mov             x1, NULL
    // 0x87dc94: r4 = 59
    //     0x87dc94: movz            x4, #0x3b
    // 0x87dc98: branchIfSmi(r0, 0x87dca8)
    //     0x87dc98: tbz             w0, #0, #0x87dca8
    //     0x87dc9c: nop             
    // 0x87dca0: r4 = LoadClassIdInstr(r0)
    //     0x87dca0: ldur            x4, [x0, #-1]
    //     0x87dca4: ubfx            x4, x4, #0xc, #0x14
    // 0x87dca8: sub             x4, x4, #0x5d
    // 0x87dcac: cmp             x4, #1
    // 0x87dcb0: b.ls            #0x87dcc8
    // 0x87dcb4: nop             
    // 0x87dcb8: r8 = String
    //     0x87dcb8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87dcbc: r3 = Null
    //     0x87dcbc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f70] Null
    //     0x87dcc0: ldr             x3, [x3, #0xf70]
    // 0x87dcc4: r0 = String()
    //     0x87dcc4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87dcc8: r0 = LoadStaticField(0xb54)
    //     0x87dcc8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87dccc: ldr             x0, [x0, #0x16a8]
    // 0x87dcd0: cmp             w0, NULL
    // 0x87dcd4: b.ne            #0x87dce4
    // 0x87dcd8: nop             
    // 0x87dcdc: r0 = Null
    //     0x87dcdc: mov             x0, NULL
    // 0x87dce0: b               #0x87dd0c
    // 0x87dce4: r17 = 351
    //     0x87dce4: movz            x17, #0x15f
    // 0x87dce8: ldr             w1, [x0, x17]
    // 0x87dcec: DecompressPointer r1
    //     0x87dcec: add             x1, x1, HEAP, lsl #32
    // 0x87dcf0: r0 = LoadClassIdInstr(r1)
    //     0x87dcf0: ldur            x0, [x1, #-1]
    //     0x87dcf4: ubfx            x0, x0, #0xc, #0x14
    // 0x87dcf8: r2 = "guanMemoryBadge1Pass"
    //     0x87dcf8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f80] "guanMemoryBadge1Pass"
    //     0x87dcfc: ldr             x2, [x2, #0xf80]
    // 0x87dd00: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87dd00: sub             lr, x0, #0xb4
    //     0x87dd04: ldr             lr, [x21, lr, lsl #3]
    //     0x87dd08: blr             lr
    // 0x87dd0c: cmp             w0, NULL
    // 0x87dd10: b.ne            #0x87dd20
    // 0x87dd14: nop             
    // 0x87dd18: r4 = ""
    //     0x87dd18: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dd1c: b               #0x87dd24
    // 0x87dd20: mov             x4, x0
    // 0x87dd24: ldur            x3, [fp, #-8]
    // 0x87dd28: mov             x0, x4
    // 0x87dd2c: stur            x4, [fp, #-0x10]
    // 0x87dd30: r2 = Null
    //     0x87dd30: mov             x2, NULL
    // 0x87dd34: r1 = Null
    //     0x87dd34: mov             x1, NULL
    // 0x87dd38: r4 = 59
    //     0x87dd38: movz            x4, #0x3b
    // 0x87dd3c: branchIfSmi(r0, 0x87dd4c)
    //     0x87dd3c: tbz             w0, #0, #0x87dd4c
    //     0x87dd40: nop             
    // 0x87dd44: r4 = LoadClassIdInstr(r0)
    //     0x87dd44: ldur            x4, [x0, #-1]
    //     0x87dd48: ubfx            x4, x4, #0xc, #0x14
    // 0x87dd4c: sub             x4, x4, #0x5d
    // 0x87dd50: cmp             x4, #1
    // 0x87dd54: b.ls            #0x87dd6c
    // 0x87dd58: nop             
    // 0x87dd5c: r8 = String
    //     0x87dd5c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87dd60: r3 = Null
    //     0x87dd60: add             x3, PP, #0x11, lsl #12  ; [pp+0x11f88] Null
    //     0x87dd64: ldr             x3, [x3, #0xf88]
    // 0x87dd68: r0 = String()
    //     0x87dd68: bl              #0x1523244  ; IsType_String_Stub
    // 0x87dd6c: ldur            x1, [fp, #-8]
    // 0x87dd70: r0 = LoadClassIdInstr(r1)
    //     0x87dd70: ldur            x0, [x1, #-1]
    //     0x87dd74: ubfx            x0, x0, #0xc, #0x14
    // 0x87dd78: r16 = ""
    //     0x87dd78: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dd7c: stp             x16, x1, [SP]
    // 0x87dd80: mov             lr, x0
    // 0x87dd84: ldr             lr, [x21, lr, lsl #3]
    // 0x87dd88: blr             lr
    // 0x87dd8c: tbnz            w0, #4, #0x87dda0
    // 0x87dd90: nop             
    // 0x87dd94: r0 = "badge1"
    //     0x87dd94: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f98] "badge1"
    //     0x87dd98: ldr             x0, [x0, #0xf98]
    // 0x87dd9c: b               #0x8838b4
    // 0x87dda0: ldur            x1, [fp, #-8]
    // 0x87dda4: r0 = LoadClassIdInstr(r1)
    //     0x87dda4: ldur            x0, [x1, #-1]
    //     0x87dda8: ubfx            x0, x0, #0xc, #0x14
    // 0x87ddac: r16 = "1"
    //     0x87ddac: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87ddb0: ldr             x16, [x16, #0x6a0]
    // 0x87ddb4: stp             x16, x1, [SP]
    // 0x87ddb8: mov             lr, x0
    // 0x87ddbc: ldr             lr, [x21, lr, lsl #3]
    // 0x87ddc0: blr             lr
    // 0x87ddc4: tbnz            w0, #4, #0x87de04
    // 0x87ddc8: nop             
    // 0x87ddcc: ldur            x0, [fp, #-0x10]
    // 0x87ddd0: r1 = LoadClassIdInstr(r0)
    //     0x87ddd0: ldur            x1, [x0, #-1]
    //     0x87ddd4: ubfx            x1, x1, #0xc, #0x14
    // 0x87ddd8: r16 = ""
    //     0x87ddd8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dddc: stp             x16, x0, [SP]
    // 0x87dde0: mov             x0, x1
    // 0x87dde4: mov             lr, x0
    // 0x87dde8: ldr             lr, [x21, lr, lsl #3]
    // 0x87ddec: blr             lr
    // 0x87ddf0: tbnz            w0, #4, #0x87de04
    // 0x87ddf4: nop             
    // 0x87ddf8: r0 = "badge2"
    //     0x87ddf8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa0] "badge2"
    //     0x87ddfc: ldr             x0, [x0, #0xfa0]
    // 0x87de00: b               #0x8838b4
    // 0x87de04: ldur            x0, [fp, #-8]
    // 0x87de08: r1 = LoadClassIdInstr(r0)
    //     0x87de08: ldur            x1, [x0, #-1]
    //     0x87de0c: ubfx            x1, x1, #0xc, #0x14
    // 0x87de10: r16 = "2"
    //     0x87de10: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87de14: ldr             x16, [x16, #0x6a8]
    // 0x87de18: stp             x16, x0, [SP]
    // 0x87de1c: mov             x0, x1
    // 0x87de20: mov             lr, x0
    // 0x87de24: ldr             lr, [x21, lr, lsl #3]
    // 0x87de28: blr             lr
    // 0x87de2c: tbnz            w0, #4, #0x87de40
    // 0x87de30: nop             
    // 0x87de34: r0 = "badge4"
    //     0x87de34: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa8] "badge4"
    //     0x87de38: ldr             x0, [x0, #0xfa8]
    // 0x87de3c: b               #0x8838b4
    // 0x87de40: r0 = "badge3"
    //     0x87de40: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fb0] "badge3"
    //     0x87de44: ldr             x0, [x0, #0xfb0]
    // 0x87de48: b               #0x8838b4
    // 0x87de4c: r16 = "guanMemoryBadge1Choice"
    //     0x87de4c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11fb8] "guanMemoryBadge1Choice"
    //     0x87de50: ldr             x16, [x16, #0xfb8]
    // 0x87de54: ldur            lr, [fp, #-0x28]
    // 0x87de58: stp             lr, x16, [SP]
    // 0x87de5c: r0 = ==()
    //     0x87de5c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87de60: tbnz            w0, #4, #0x87e020
    // 0x87de64: nop             
    // 0x87de68: r0 = LoadStaticField(0xb54)
    //     0x87de68: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87de6c: ldr             x0, [x0, #0x16a8]
    // 0x87de70: cmp             w0, NULL
    // 0x87de74: b.ne            #0x87de84
    // 0x87de78: nop             
    // 0x87de7c: r0 = Null
    //     0x87de7c: mov             x0, NULL
    // 0x87de80: b               #0x87deac
    // 0x87de84: r17 = 351
    //     0x87de84: movz            x17, #0x15f
    // 0x87de88: ldr             w1, [x0, x17]
    // 0x87de8c: DecompressPointer r1
    //     0x87de8c: add             x1, x1, HEAP, lsl #32
    // 0x87de90: r0 = LoadClassIdInstr(r1)
    //     0x87de90: ldur            x0, [x1, #-1]
    //     0x87de94: ubfx            x0, x0, #0xc, #0x14
    // 0x87de98: r2 = "guanMemoryBadge1"
    //     0x87de98: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f68] "guanMemoryBadge1"
    //     0x87de9c: ldr             x2, [x2, #0xf68]
    // 0x87dea0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87dea0: sub             lr, x0, #0xb4
    //     0x87dea4: ldr             lr, [x21, lr, lsl #3]
    //     0x87dea8: blr             lr
    // 0x87deac: cmp             w0, NULL
    // 0x87deb0: b.ne            #0x87dec0
    // 0x87deb4: nop             
    // 0x87deb8: r3 = ""
    //     0x87deb8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87debc: b               #0x87dec4
    // 0x87dec0: mov             x3, x0
    // 0x87dec4: mov             x0, x3
    // 0x87dec8: stur            x3, [fp, #-8]
    // 0x87decc: r2 = Null
    //     0x87decc: mov             x2, NULL
    // 0x87ded0: r1 = Null
    //     0x87ded0: mov             x1, NULL
    // 0x87ded4: r4 = 59
    //     0x87ded4: movz            x4, #0x3b
    // 0x87ded8: branchIfSmi(r0, 0x87dee8)
    //     0x87ded8: tbz             w0, #0, #0x87dee8
    //     0x87dedc: nop             
    // 0x87dee0: r4 = LoadClassIdInstr(r0)
    //     0x87dee0: ldur            x4, [x0, #-1]
    //     0x87dee4: ubfx            x4, x4, #0xc, #0x14
    // 0x87dee8: sub             x4, x4, #0x5d
    // 0x87deec: cmp             x4, #1
    // 0x87def0: b.ls            #0x87df08
    // 0x87def4: nop             
    // 0x87def8: r8 = String
    //     0x87def8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87defc: r3 = Null
    //     0x87defc: add             x3, PP, #0x11, lsl #12  ; [pp+0x11fc0] Null
    //     0x87df00: ldr             x3, [x3, #0xfc0]
    // 0x87df04: r0 = String()
    //     0x87df04: bl              #0x1523244  ; IsType_String_Stub
    // 0x87df08: r0 = LoadStaticField(0xb54)
    //     0x87df08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87df0c: ldr             x0, [x0, #0x16a8]
    // 0x87df10: cmp             w0, NULL
    // 0x87df14: b.ne            #0x87df24
    // 0x87df18: nop             
    // 0x87df1c: r0 = Null
    //     0x87df1c: mov             x0, NULL
    // 0x87df20: b               #0x87df4c
    // 0x87df24: r17 = 351
    //     0x87df24: movz            x17, #0x15f
    // 0x87df28: ldr             w1, [x0, x17]
    // 0x87df2c: DecompressPointer r1
    //     0x87df2c: add             x1, x1, HEAP, lsl #32
    // 0x87df30: r0 = LoadClassIdInstr(r1)
    //     0x87df30: ldur            x0, [x1, #-1]
    //     0x87df34: ubfx            x0, x0, #0xc, #0x14
    // 0x87df38: r2 = "guanMemoryBadge1Pass"
    //     0x87df38: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f80] "guanMemoryBadge1Pass"
    //     0x87df3c: ldr             x2, [x2, #0xf80]
    // 0x87df40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87df40: sub             lr, x0, #0xb4
    //     0x87df44: ldr             lr, [x21, lr, lsl #3]
    //     0x87df48: blr             lr
    // 0x87df4c: cmp             w0, NULL
    // 0x87df50: b.ne            #0x87df60
    // 0x87df54: nop             
    // 0x87df58: r4 = ""
    //     0x87df58: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87df5c: b               #0x87df64
    // 0x87df60: mov             x4, x0
    // 0x87df64: ldur            x3, [fp, #-8]
    // 0x87df68: mov             x0, x4
    // 0x87df6c: stur            x4, [fp, #-0x10]
    // 0x87df70: r2 = Null
    //     0x87df70: mov             x2, NULL
    // 0x87df74: r1 = Null
    //     0x87df74: mov             x1, NULL
    // 0x87df78: r4 = 59
    //     0x87df78: movz            x4, #0x3b
    // 0x87df7c: branchIfSmi(r0, 0x87df8c)
    //     0x87df7c: tbz             w0, #0, #0x87df8c
    //     0x87df80: nop             
    // 0x87df84: r4 = LoadClassIdInstr(r0)
    //     0x87df84: ldur            x4, [x0, #-1]
    //     0x87df88: ubfx            x4, x4, #0xc, #0x14
    // 0x87df8c: sub             x4, x4, #0x5d
    // 0x87df90: cmp             x4, #1
    // 0x87df94: b.ls            #0x87dfac
    // 0x87df98: nop             
    // 0x87df9c: r8 = String
    //     0x87df9c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87dfa0: r3 = Null
    //     0x87dfa0: add             x3, PP, #0x11, lsl #12  ; [pp+0x11fd0] Null
    //     0x87dfa4: ldr             x3, [x3, #0xfd0]
    // 0x87dfa8: r0 = String()
    //     0x87dfa8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87dfac: ldur            x0, [fp, #-8]
    // 0x87dfb0: r1 = LoadClassIdInstr(r0)
    //     0x87dfb0: ldur            x1, [x0, #-1]
    //     0x87dfb4: ubfx            x1, x1, #0xc, #0x14
    // 0x87dfb8: r16 = "1"
    //     0x87dfb8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87dfbc: ldr             x16, [x16, #0x6a0]
    // 0x87dfc0: stp             x16, x0, [SP]
    // 0x87dfc4: mov             x0, x1
    // 0x87dfc8: mov             lr, x0
    // 0x87dfcc: ldr             lr, [x21, lr, lsl #3]
    // 0x87dfd0: blr             lr
    // 0x87dfd4: tbnz            w0, #4, #0x87e014
    // 0x87dfd8: nop             
    // 0x87dfdc: ldur            x0, [fp, #-0x10]
    // 0x87dfe0: r1 = LoadClassIdInstr(r0)
    //     0x87dfe0: ldur            x1, [x0, #-1]
    //     0x87dfe4: ubfx            x1, x1, #0xc, #0x14
    // 0x87dfe8: r16 = ""
    //     0x87dfe8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87dfec: stp             x16, x0, [SP]
    // 0x87dff0: mov             x0, x1
    // 0x87dff4: mov             lr, x0
    // 0x87dff8: ldr             lr, [x21, lr, lsl #3]
    // 0x87dffc: blr             lr
    // 0x87e000: tbz             w0, #4, #0x87e014
    // 0x87e004: nop             
    // 0x87e008: r0 = "afterChoice"
    //     0x87e008: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe0] "afterChoice"
    //     0x87e00c: ldr             x0, [x0, #0xfe0]
    // 0x87e010: b               #0x8838b4
    // 0x87e014: r0 = "beforeChoice"
    //     0x87e014: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe8] "beforeChoice"
    //     0x87e018: ldr             x0, [x0, #0xfe8]
    // 0x87e01c: b               #0x8838b4
    // 0x87e020: r16 = "guanMemoryMiniGame1"
    //     0x87e020: add             x16, PP, #0x11, lsl #12  ; [pp+0x11ff0] "guanMemoryMiniGame1"
    //     0x87e024: ldr             x16, [x16, #0xff0]
    // 0x87e028: ldur            lr, [fp, #-0x28]
    // 0x87e02c: stp             lr, x16, [SP]
    // 0x87e030: r0 = ==()
    //     0x87e030: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e034: tbnz            w0, #4, #0x87e124
    // 0x87e038: nop             
    // 0x87e03c: r0 = LoadStaticField(0xb54)
    //     0x87e03c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e040: ldr             x0, [x0, #0x16a8]
    // 0x87e044: cmp             w0, NULL
    // 0x87e048: b.ne            #0x87e058
    // 0x87e04c: nop             
    // 0x87e050: r0 = Null
    //     0x87e050: mov             x0, NULL
    // 0x87e054: b               #0x87e080
    // 0x87e058: r17 = 351
    //     0x87e058: movz            x17, #0x15f
    // 0x87e05c: ldr             w1, [x0, x17]
    // 0x87e060: DecompressPointer r1
    //     0x87e060: add             x1, x1, HEAP, lsl #32
    // 0x87e064: r0 = LoadClassIdInstr(r1)
    //     0x87e064: ldur            x0, [x1, #-1]
    //     0x87e068: ubfx            x0, x0, #0xc, #0x14
    // 0x87e06c: r2 = "guanMemoryOptional1"
    //     0x87e06c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11ff8] "guanMemoryOptional1"
    //     0x87e070: ldr             x2, [x2, #0xff8]
    // 0x87e074: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e074: sub             lr, x0, #0xb4
    //     0x87e078: ldr             lr, [x21, lr, lsl #3]
    //     0x87e07c: blr             lr
    // 0x87e080: cmp             w0, NULL
    // 0x87e084: b.ne            #0x87e094
    // 0x87e088: nop             
    // 0x87e08c: r3 = ""
    //     0x87e08c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e090: b               #0x87e098
    // 0x87e094: mov             x3, x0
    // 0x87e098: mov             x0, x3
    // 0x87e09c: stur            x3, [fp, #-8]
    // 0x87e0a0: r2 = Null
    //     0x87e0a0: mov             x2, NULL
    // 0x87e0a4: r1 = Null
    //     0x87e0a4: mov             x1, NULL
    // 0x87e0a8: r4 = 59
    //     0x87e0a8: movz            x4, #0x3b
    // 0x87e0ac: branchIfSmi(r0, 0x87e0bc)
    //     0x87e0ac: tbz             w0, #0, #0x87e0bc
    //     0x87e0b0: nop             
    // 0x87e0b4: r4 = LoadClassIdInstr(r0)
    //     0x87e0b4: ldur            x4, [x0, #-1]
    //     0x87e0b8: ubfx            x4, x4, #0xc, #0x14
    // 0x87e0bc: sub             x4, x4, #0x5d
    // 0x87e0c0: cmp             x4, #1
    // 0x87e0c4: b.ls            #0x87e0dc
    // 0x87e0c8: nop             
    // 0x87e0cc: r8 = String
    //     0x87e0cc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e0d0: r3 = Null
    //     0x87e0d0: add             x3, PP, #0x12, lsl #12  ; [pp+0x12000] Null
    //     0x87e0d4: ldr             x3, [x3]
    // 0x87e0d8: r0 = String()
    //     0x87e0d8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e0dc: ldur            x0, [fp, #-8]
    // 0x87e0e0: r1 = LoadClassIdInstr(r0)
    //     0x87e0e0: ldur            x1, [x0, #-1]
    //     0x87e0e4: ubfx            x1, x1, #0xc, #0x14
    // 0x87e0e8: r16 = "complete"
    //     0x87e0e8: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87e0ec: ldr             x16, [x16, #0x590]
    // 0x87e0f0: stp             x16, x0, [SP]
    // 0x87e0f4: mov             x0, x1
    // 0x87e0f8: mov             lr, x0
    // 0x87e0fc: ldr             lr, [x21, lr, lsl #3]
    // 0x87e100: blr             lr
    // 0x87e104: tbnz            w0, #4, #0x87e118
    // 0x87e108: nop             
    // 0x87e10c: r0 = "cheatGame"
    //     0x87e10c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12010] "cheatGame"
    //     0x87e110: ldr             x0, [x0, #0x10]
    // 0x87e114: b               #0x8838b4
    // 0x87e118: r0 = "normalGame"
    //     0x87e118: add             x0, PP, #0x12, lsl #12  ; [pp+0x12018] "normalGame"
    //     0x87e11c: ldr             x0, [x0, #0x18]
    // 0x87e120: b               #0x8838b4
    // 0x87e124: r16 = "guanMemoryBadge1NormalPass"
    //     0x87e124: add             x16, PP, #0x12, lsl #12  ; [pp+0x12020] "guanMemoryBadge1NormalPass"
    //     0x87e128: ldr             x16, [x16, #0x20]
    // 0x87e12c: ldur            lr, [fp, #-0x28]
    // 0x87e130: stp             lr, x16, [SP]
    // 0x87e134: r0 = ==()
    //     0x87e134: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e138: tbnz            w0, #4, #0x87e220
    // 0x87e13c: nop             
    // 0x87e140: r0 = LoadStaticField(0xb54)
    //     0x87e140: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e144: ldr             x0, [x0, #0x16a8]
    // 0x87e148: cmp             w0, NULL
    // 0x87e14c: b.ne            #0x87e15c
    // 0x87e150: nop             
    // 0x87e154: r0 = Null
    //     0x87e154: mov             x0, NULL
    // 0x87e158: b               #0x87e184
    // 0x87e15c: r17 = 351
    //     0x87e15c: movz            x17, #0x15f
    // 0x87e160: ldr             w1, [x0, x17]
    // 0x87e164: DecompressPointer r1
    //     0x87e164: add             x1, x1, HEAP, lsl #32
    // 0x87e168: r0 = LoadClassIdInstr(r1)
    //     0x87e168: ldur            x0, [x1, #-1]
    //     0x87e16c: ubfx            x0, x0, #0xc, #0x14
    // 0x87e170: r2 = "guanMemoryBadge1Pass"
    //     0x87e170: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f80] "guanMemoryBadge1Pass"
    //     0x87e174: ldr             x2, [x2, #0xf80]
    // 0x87e178: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e178: sub             lr, x0, #0xb4
    //     0x87e17c: ldr             lr, [x21, lr, lsl #3]
    //     0x87e180: blr             lr
    // 0x87e184: cmp             w0, NULL
    // 0x87e188: b.ne            #0x87e198
    // 0x87e18c: nop             
    // 0x87e190: r3 = ""
    //     0x87e190: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e194: b               #0x87e19c
    // 0x87e198: mov             x3, x0
    // 0x87e19c: mov             x0, x3
    // 0x87e1a0: stur            x3, [fp, #-8]
    // 0x87e1a4: r2 = Null
    //     0x87e1a4: mov             x2, NULL
    // 0x87e1a8: r1 = Null
    //     0x87e1a8: mov             x1, NULL
    // 0x87e1ac: r4 = 59
    //     0x87e1ac: movz            x4, #0x3b
    // 0x87e1b0: branchIfSmi(r0, 0x87e1c0)
    //     0x87e1b0: tbz             w0, #0, #0x87e1c0
    //     0x87e1b4: nop             
    // 0x87e1b8: r4 = LoadClassIdInstr(r0)
    //     0x87e1b8: ldur            x4, [x0, #-1]
    //     0x87e1bc: ubfx            x4, x4, #0xc, #0x14
    // 0x87e1c0: sub             x4, x4, #0x5d
    // 0x87e1c4: cmp             x4, #1
    // 0x87e1c8: b.ls            #0x87e1e0
    // 0x87e1cc: nop             
    // 0x87e1d0: r8 = String
    //     0x87e1d0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e1d4: r3 = Null
    //     0x87e1d4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12028] Null
    //     0x87e1d8: ldr             x3, [x3, #0x28]
    // 0x87e1dc: r0 = String()
    //     0x87e1dc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e1e0: ldur            x0, [fp, #-8]
    // 0x87e1e4: r1 = LoadClassIdInstr(r0)
    //     0x87e1e4: ldur            x1, [x0, #-1]
    //     0x87e1e8: ubfx            x1, x1, #0xc, #0x14
    // 0x87e1ec: r16 = ""
    //     0x87e1ec: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e1f0: stp             x16, x0, [SP]
    // 0x87e1f4: mov             x0, x1
    // 0x87e1f8: mov             lr, x0
    // 0x87e1fc: ldr             lr, [x21, lr, lsl #3]
    // 0x87e200: blr             lr
    // 0x87e204: tbnz            w0, #4, #0x87e218
    // 0x87e208: nop             
    // 0x87e20c: r0 = "guanMemoryBadge1NormalPass"
    //     0x87e20c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12020] "guanMemoryBadge1NormalPass"
    //     0x87e210: ldr             x0, [x0, #0x20]
    // 0x87e214: b               #0x8838b4
    // 0x87e218: r0 = "end"
    //     0x87e218: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87e21c: b               #0x8838b4
    // 0x87e220: r16 = "guanMemoryBadge1PerfectPass"
    //     0x87e220: add             x16, PP, #0x12, lsl #12  ; [pp+0x12038] "guanMemoryBadge1PerfectPass"
    //     0x87e224: ldr             x16, [x16, #0x38]
    // 0x87e228: ldur            lr, [fp, #-0x28]
    // 0x87e22c: stp             lr, x16, [SP]
    // 0x87e230: r0 = ==()
    //     0x87e230: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e234: tbnz            w0, #4, #0x87e354
    // 0x87e238: nop             
    // 0x87e23c: r0 = LoadStaticField(0xb54)
    //     0x87e23c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e240: ldr             x0, [x0, #0x16a8]
    // 0x87e244: cmp             w0, NULL
    // 0x87e248: b.ne            #0x87e258
    // 0x87e24c: nop             
    // 0x87e250: r0 = Null
    //     0x87e250: mov             x0, NULL
    // 0x87e254: b               #0x87e280
    // 0x87e258: r17 = 351
    //     0x87e258: movz            x17, #0x15f
    // 0x87e25c: ldr             w1, [x0, x17]
    // 0x87e260: DecompressPointer r1
    //     0x87e260: add             x1, x1, HEAP, lsl #32
    // 0x87e264: r0 = LoadClassIdInstr(r1)
    //     0x87e264: ldur            x0, [x1, #-1]
    //     0x87e268: ubfx            x0, x0, #0xc, #0x14
    // 0x87e26c: r2 = "guanMemoryBadge1Pass"
    //     0x87e26c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f80] "guanMemoryBadge1Pass"
    //     0x87e270: ldr             x2, [x2, #0xf80]
    // 0x87e274: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e274: sub             lr, x0, #0xb4
    //     0x87e278: ldr             lr, [x21, lr, lsl #3]
    //     0x87e27c: blr             lr
    // 0x87e280: cmp             w0, NULL
    // 0x87e284: b.ne            #0x87e294
    // 0x87e288: nop             
    // 0x87e28c: r3 = ""
    //     0x87e28c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e290: b               #0x87e298
    // 0x87e294: mov             x3, x0
    // 0x87e298: mov             x0, x3
    // 0x87e29c: stur            x3, [fp, #-8]
    // 0x87e2a0: r2 = Null
    //     0x87e2a0: mov             x2, NULL
    // 0x87e2a4: r1 = Null
    //     0x87e2a4: mov             x1, NULL
    // 0x87e2a8: r4 = 59
    //     0x87e2a8: movz            x4, #0x3b
    // 0x87e2ac: branchIfSmi(r0, 0x87e2bc)
    //     0x87e2ac: tbz             w0, #0, #0x87e2bc
    //     0x87e2b0: nop             
    // 0x87e2b4: r4 = LoadClassIdInstr(r0)
    //     0x87e2b4: ldur            x4, [x0, #-1]
    //     0x87e2b8: ubfx            x4, x4, #0xc, #0x14
    // 0x87e2bc: sub             x4, x4, #0x5d
    // 0x87e2c0: cmp             x4, #1
    // 0x87e2c4: b.ls            #0x87e2dc
    // 0x87e2c8: nop             
    // 0x87e2cc: r8 = String
    //     0x87e2cc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e2d0: r3 = Null
    //     0x87e2d0: add             x3, PP, #0x12, lsl #12  ; [pp+0x12040] Null
    //     0x87e2d4: ldr             x3, [x3, #0x40]
    // 0x87e2d8: r0 = String()
    //     0x87e2d8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e2dc: ldur            x1, [fp, #-8]
    // 0x87e2e0: r0 = LoadClassIdInstr(r1)
    //     0x87e2e0: ldur            x0, [x1, #-1]
    //     0x87e2e4: ubfx            x0, x0, #0xc, #0x14
    // 0x87e2e8: r16 = ""
    //     0x87e2e8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e2ec: stp             x16, x1, [SP]
    // 0x87e2f0: mov             lr, x0
    // 0x87e2f4: ldr             lr, [x21, lr, lsl #3]
    // 0x87e2f8: blr             lr
    // 0x87e2fc: tbnz            w0, #4, #0x87e310
    // 0x87e300: nop             
    // 0x87e304: r0 = "guanMemoryBadge1PerfectPass2"
    //     0x87e304: add             x0, PP, #0x12, lsl #12  ; [pp+0x12050] "guanMemoryBadge1PerfectPass2"
    //     0x87e308: ldr             x0, [x0, #0x50]
    // 0x87e30c: b               #0x8838b4
    // 0x87e310: ldur            x0, [fp, #-8]
    // 0x87e314: r1 = LoadClassIdInstr(r0)
    //     0x87e314: ldur            x1, [x0, #-1]
    //     0x87e318: ubfx            x1, x1, #0xc, #0x14
    // 0x87e31c: r16 = "perfect"
    //     0x87e31c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x87e320: ldr             x16, [x16, #0x58]
    // 0x87e324: stp             x16, x0, [SP]
    // 0x87e328: mov             x0, x1
    // 0x87e32c: mov             lr, x0
    // 0x87e330: ldr             lr, [x21, lr, lsl #3]
    // 0x87e334: blr             lr
    // 0x87e338: tbz             w0, #4, #0x87e34c
    // 0x87e33c: nop             
    // 0x87e340: r0 = "guanMemoryBadge1PerfectPass"
    //     0x87e340: add             x0, PP, #0x12, lsl #12  ; [pp+0x12038] "guanMemoryBadge1PerfectPass"
    //     0x87e344: ldr             x0, [x0, #0x38]
    // 0x87e348: b               #0x8838b4
    // 0x87e34c: r0 = "end"
    //     0x87e34c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87e350: b               #0x8838b4
    // 0x87e354: r16 = "guanMemoryBadge2"
    //     0x87e354: add             x16, PP, #0x12, lsl #12  ; [pp+0x12060] "guanMemoryBadge2"
    //     0x87e358: ldr             x16, [x16, #0x60]
    // 0x87e35c: ldur            lr, [fp, #-0x28]
    // 0x87e360: stp             lr, x16, [SP]
    // 0x87e364: r0 = ==()
    //     0x87e364: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e368: tbnz            w0, #4, #0x87e594
    // 0x87e36c: nop             
    // 0x87e370: r0 = LoadStaticField(0xb54)
    //     0x87e370: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e374: ldr             x0, [x0, #0x16a8]
    // 0x87e378: cmp             w0, NULL
    // 0x87e37c: b.ne            #0x87e38c
    // 0x87e380: nop             
    // 0x87e384: r0 = Null
    //     0x87e384: mov             x0, NULL
    // 0x87e388: b               #0x87e3b4
    // 0x87e38c: r17 = 351
    //     0x87e38c: movz            x17, #0x15f
    // 0x87e390: ldr             w1, [x0, x17]
    // 0x87e394: DecompressPointer r1
    //     0x87e394: add             x1, x1, HEAP, lsl #32
    // 0x87e398: r0 = LoadClassIdInstr(r1)
    //     0x87e398: ldur            x0, [x1, #-1]
    //     0x87e39c: ubfx            x0, x0, #0xc, #0x14
    // 0x87e3a0: r2 = "guanMemoryBadge2"
    //     0x87e3a0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12060] "guanMemoryBadge2"
    //     0x87e3a4: ldr             x2, [x2, #0x60]
    // 0x87e3a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e3a8: sub             lr, x0, #0xb4
    //     0x87e3ac: ldr             lr, [x21, lr, lsl #3]
    //     0x87e3b0: blr             lr
    // 0x87e3b4: cmp             w0, NULL
    // 0x87e3b8: b.ne            #0x87e3c8
    // 0x87e3bc: nop             
    // 0x87e3c0: r3 = ""
    //     0x87e3c0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e3c4: b               #0x87e3cc
    // 0x87e3c8: mov             x3, x0
    // 0x87e3cc: mov             x0, x3
    // 0x87e3d0: stur            x3, [fp, #-8]
    // 0x87e3d4: r2 = Null
    //     0x87e3d4: mov             x2, NULL
    // 0x87e3d8: r1 = Null
    //     0x87e3d8: mov             x1, NULL
    // 0x87e3dc: r4 = 59
    //     0x87e3dc: movz            x4, #0x3b
    // 0x87e3e0: branchIfSmi(r0, 0x87e3f0)
    //     0x87e3e0: tbz             w0, #0, #0x87e3f0
    //     0x87e3e4: nop             
    // 0x87e3e8: r4 = LoadClassIdInstr(r0)
    //     0x87e3e8: ldur            x4, [x0, #-1]
    //     0x87e3ec: ubfx            x4, x4, #0xc, #0x14
    // 0x87e3f0: sub             x4, x4, #0x5d
    // 0x87e3f4: cmp             x4, #1
    // 0x87e3f8: b.ls            #0x87e410
    // 0x87e3fc: nop             
    // 0x87e400: r8 = String
    //     0x87e400: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e404: r3 = Null
    //     0x87e404: add             x3, PP, #0x12, lsl #12  ; [pp+0x12068] Null
    //     0x87e408: ldr             x3, [x3, #0x68]
    // 0x87e40c: r0 = String()
    //     0x87e40c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e410: r0 = LoadStaticField(0xb54)
    //     0x87e410: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e414: ldr             x0, [x0, #0x16a8]
    // 0x87e418: cmp             w0, NULL
    // 0x87e41c: b.ne            #0x87e42c
    // 0x87e420: nop             
    // 0x87e424: r0 = Null
    //     0x87e424: mov             x0, NULL
    // 0x87e428: b               #0x87e454
    // 0x87e42c: r17 = 351
    //     0x87e42c: movz            x17, #0x15f
    // 0x87e430: ldr             w1, [x0, x17]
    // 0x87e434: DecompressPointer r1
    //     0x87e434: add             x1, x1, HEAP, lsl #32
    // 0x87e438: r0 = LoadClassIdInstr(r1)
    //     0x87e438: ldur            x0, [x1, #-1]
    //     0x87e43c: ubfx            x0, x0, #0xc, #0x14
    // 0x87e440: r2 = "guanMemoryBadge2Pass"
    //     0x87e440: add             x2, PP, #0x12, lsl #12  ; [pp+0x12078] "guanMemoryBadge2Pass"
    //     0x87e444: ldr             x2, [x2, #0x78]
    // 0x87e448: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e448: sub             lr, x0, #0xb4
    //     0x87e44c: ldr             lr, [x21, lr, lsl #3]
    //     0x87e450: blr             lr
    // 0x87e454: cmp             w0, NULL
    // 0x87e458: b.ne            #0x87e468
    // 0x87e45c: nop             
    // 0x87e460: r4 = ""
    //     0x87e460: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e464: b               #0x87e46c
    // 0x87e468: mov             x4, x0
    // 0x87e46c: ldur            x3, [fp, #-8]
    // 0x87e470: mov             x0, x4
    // 0x87e474: stur            x4, [fp, #-0x10]
    // 0x87e478: r2 = Null
    //     0x87e478: mov             x2, NULL
    // 0x87e47c: r1 = Null
    //     0x87e47c: mov             x1, NULL
    // 0x87e480: r4 = 59
    //     0x87e480: movz            x4, #0x3b
    // 0x87e484: branchIfSmi(r0, 0x87e494)
    //     0x87e484: tbz             w0, #0, #0x87e494
    //     0x87e488: nop             
    // 0x87e48c: r4 = LoadClassIdInstr(r0)
    //     0x87e48c: ldur            x4, [x0, #-1]
    //     0x87e490: ubfx            x4, x4, #0xc, #0x14
    // 0x87e494: sub             x4, x4, #0x5d
    // 0x87e498: cmp             x4, #1
    // 0x87e49c: b.ls            #0x87e4b4
    // 0x87e4a0: nop             
    // 0x87e4a4: r8 = String
    //     0x87e4a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e4a8: r3 = Null
    //     0x87e4a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12080] Null
    //     0x87e4ac: ldr             x3, [x3, #0x80]
    // 0x87e4b0: r0 = String()
    //     0x87e4b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e4b4: ldur            x1, [fp, #-8]
    // 0x87e4b8: r0 = LoadClassIdInstr(r1)
    //     0x87e4b8: ldur            x0, [x1, #-1]
    //     0x87e4bc: ubfx            x0, x0, #0xc, #0x14
    // 0x87e4c0: r16 = ""
    //     0x87e4c0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e4c4: stp             x16, x1, [SP]
    // 0x87e4c8: mov             lr, x0
    // 0x87e4cc: ldr             lr, [x21, lr, lsl #3]
    // 0x87e4d0: blr             lr
    // 0x87e4d4: tbnz            w0, #4, #0x87e4e8
    // 0x87e4d8: nop             
    // 0x87e4dc: r0 = "badge1"
    //     0x87e4dc: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f98] "badge1"
    //     0x87e4e0: ldr             x0, [x0, #0xf98]
    // 0x87e4e4: b               #0x8838b4
    // 0x87e4e8: ldur            x1, [fp, #-8]
    // 0x87e4ec: r0 = LoadClassIdInstr(r1)
    //     0x87e4ec: ldur            x0, [x1, #-1]
    //     0x87e4f0: ubfx            x0, x0, #0xc, #0x14
    // 0x87e4f4: r16 = "1"
    //     0x87e4f4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87e4f8: ldr             x16, [x16, #0x6a0]
    // 0x87e4fc: stp             x16, x1, [SP]
    // 0x87e500: mov             lr, x0
    // 0x87e504: ldr             lr, [x21, lr, lsl #3]
    // 0x87e508: blr             lr
    // 0x87e50c: tbnz            w0, #4, #0x87e54c
    // 0x87e510: nop             
    // 0x87e514: ldur            x0, [fp, #-0x10]
    // 0x87e518: r1 = LoadClassIdInstr(r0)
    //     0x87e518: ldur            x1, [x0, #-1]
    //     0x87e51c: ubfx            x1, x1, #0xc, #0x14
    // 0x87e520: r16 = ""
    //     0x87e520: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e524: stp             x16, x0, [SP]
    // 0x87e528: mov             x0, x1
    // 0x87e52c: mov             lr, x0
    // 0x87e530: ldr             lr, [x21, lr, lsl #3]
    // 0x87e534: blr             lr
    // 0x87e538: tbnz            w0, #4, #0x87e54c
    // 0x87e53c: nop             
    // 0x87e540: r0 = "badge2"
    //     0x87e540: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa0] "badge2"
    //     0x87e544: ldr             x0, [x0, #0xfa0]
    // 0x87e548: b               #0x8838b4
    // 0x87e54c: ldur            x0, [fp, #-8]
    // 0x87e550: r1 = LoadClassIdInstr(r0)
    //     0x87e550: ldur            x1, [x0, #-1]
    //     0x87e554: ubfx            x1, x1, #0xc, #0x14
    // 0x87e558: r16 = "2"
    //     0x87e558: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87e55c: ldr             x16, [x16, #0x6a8]
    // 0x87e560: stp             x16, x0, [SP]
    // 0x87e564: mov             x0, x1
    // 0x87e568: mov             lr, x0
    // 0x87e56c: ldr             lr, [x21, lr, lsl #3]
    // 0x87e570: blr             lr
    // 0x87e574: tbnz            w0, #4, #0x87e588
    // 0x87e578: nop             
    // 0x87e57c: r0 = "badge4"
    //     0x87e57c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa8] "badge4"
    //     0x87e580: ldr             x0, [x0, #0xfa8]
    // 0x87e584: b               #0x8838b4
    // 0x87e588: r0 = "badge3"
    //     0x87e588: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fb0] "badge3"
    //     0x87e58c: ldr             x0, [x0, #0xfb0]
    // 0x87e590: b               #0x8838b4
    // 0x87e594: r16 = "guanMemoryBadge2Choice"
    //     0x87e594: add             x16, PP, #0x12, lsl #12  ; [pp+0x12090] "guanMemoryBadge2Choice"
    //     0x87e598: ldr             x16, [x16, #0x90]
    // 0x87e59c: ldur            lr, [fp, #-0x28]
    // 0x87e5a0: stp             lr, x16, [SP]
    // 0x87e5a4: r0 = ==()
    //     0x87e5a4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e5a8: tbnz            w0, #4, #0x87e768
    // 0x87e5ac: nop             
    // 0x87e5b0: r0 = LoadStaticField(0xb54)
    //     0x87e5b0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e5b4: ldr             x0, [x0, #0x16a8]
    // 0x87e5b8: cmp             w0, NULL
    // 0x87e5bc: b.ne            #0x87e5cc
    // 0x87e5c0: nop             
    // 0x87e5c4: r0 = Null
    //     0x87e5c4: mov             x0, NULL
    // 0x87e5c8: b               #0x87e5f4
    // 0x87e5cc: r17 = 351
    //     0x87e5cc: movz            x17, #0x15f
    // 0x87e5d0: ldr             w1, [x0, x17]
    // 0x87e5d4: DecompressPointer r1
    //     0x87e5d4: add             x1, x1, HEAP, lsl #32
    // 0x87e5d8: r0 = LoadClassIdInstr(r1)
    //     0x87e5d8: ldur            x0, [x1, #-1]
    //     0x87e5dc: ubfx            x0, x0, #0xc, #0x14
    // 0x87e5e0: r2 = "guanMemoryBadge2"
    //     0x87e5e0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12060] "guanMemoryBadge2"
    //     0x87e5e4: ldr             x2, [x2, #0x60]
    // 0x87e5e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e5e8: sub             lr, x0, #0xb4
    //     0x87e5ec: ldr             lr, [x21, lr, lsl #3]
    //     0x87e5f0: blr             lr
    // 0x87e5f4: cmp             w0, NULL
    // 0x87e5f8: b.ne            #0x87e608
    // 0x87e5fc: nop             
    // 0x87e600: r3 = ""
    //     0x87e600: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e604: b               #0x87e60c
    // 0x87e608: mov             x3, x0
    // 0x87e60c: mov             x0, x3
    // 0x87e610: stur            x3, [fp, #-8]
    // 0x87e614: r2 = Null
    //     0x87e614: mov             x2, NULL
    // 0x87e618: r1 = Null
    //     0x87e618: mov             x1, NULL
    // 0x87e61c: r4 = 59
    //     0x87e61c: movz            x4, #0x3b
    // 0x87e620: branchIfSmi(r0, 0x87e630)
    //     0x87e620: tbz             w0, #0, #0x87e630
    //     0x87e624: nop             
    // 0x87e628: r4 = LoadClassIdInstr(r0)
    //     0x87e628: ldur            x4, [x0, #-1]
    //     0x87e62c: ubfx            x4, x4, #0xc, #0x14
    // 0x87e630: sub             x4, x4, #0x5d
    // 0x87e634: cmp             x4, #1
    // 0x87e638: b.ls            #0x87e650
    // 0x87e63c: nop             
    // 0x87e640: r8 = String
    //     0x87e640: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e644: r3 = Null
    //     0x87e644: add             x3, PP, #0x12, lsl #12  ; [pp+0x12098] Null
    //     0x87e648: ldr             x3, [x3, #0x98]
    // 0x87e64c: r0 = String()
    //     0x87e64c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e650: r0 = LoadStaticField(0xb54)
    //     0x87e650: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e654: ldr             x0, [x0, #0x16a8]
    // 0x87e658: cmp             w0, NULL
    // 0x87e65c: b.ne            #0x87e66c
    // 0x87e660: nop             
    // 0x87e664: r0 = Null
    //     0x87e664: mov             x0, NULL
    // 0x87e668: b               #0x87e694
    // 0x87e66c: r17 = 351
    //     0x87e66c: movz            x17, #0x15f
    // 0x87e670: ldr             w1, [x0, x17]
    // 0x87e674: DecompressPointer r1
    //     0x87e674: add             x1, x1, HEAP, lsl #32
    // 0x87e678: r0 = LoadClassIdInstr(r1)
    //     0x87e678: ldur            x0, [x1, #-1]
    //     0x87e67c: ubfx            x0, x0, #0xc, #0x14
    // 0x87e680: r2 = "guanMemoryBadge2Pass"
    //     0x87e680: add             x2, PP, #0x12, lsl #12  ; [pp+0x12078] "guanMemoryBadge2Pass"
    //     0x87e684: ldr             x2, [x2, #0x78]
    // 0x87e688: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e688: sub             lr, x0, #0xb4
    //     0x87e68c: ldr             lr, [x21, lr, lsl #3]
    //     0x87e690: blr             lr
    // 0x87e694: cmp             w0, NULL
    // 0x87e698: b.ne            #0x87e6a8
    // 0x87e69c: nop             
    // 0x87e6a0: r4 = ""
    //     0x87e6a0: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e6a4: b               #0x87e6ac
    // 0x87e6a8: mov             x4, x0
    // 0x87e6ac: ldur            x3, [fp, #-8]
    // 0x87e6b0: mov             x0, x4
    // 0x87e6b4: stur            x4, [fp, #-0x10]
    // 0x87e6b8: r2 = Null
    //     0x87e6b8: mov             x2, NULL
    // 0x87e6bc: r1 = Null
    //     0x87e6bc: mov             x1, NULL
    // 0x87e6c0: r4 = 59
    //     0x87e6c0: movz            x4, #0x3b
    // 0x87e6c4: branchIfSmi(r0, 0x87e6d4)
    //     0x87e6c4: tbz             w0, #0, #0x87e6d4
    //     0x87e6c8: nop             
    // 0x87e6cc: r4 = LoadClassIdInstr(r0)
    //     0x87e6cc: ldur            x4, [x0, #-1]
    //     0x87e6d0: ubfx            x4, x4, #0xc, #0x14
    // 0x87e6d4: sub             x4, x4, #0x5d
    // 0x87e6d8: cmp             x4, #1
    // 0x87e6dc: b.ls            #0x87e6f4
    // 0x87e6e0: nop             
    // 0x87e6e4: r8 = String
    //     0x87e6e4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e6e8: r3 = Null
    //     0x87e6e8: add             x3, PP, #0x12, lsl #12  ; [pp+0x120a8] Null
    //     0x87e6ec: ldr             x3, [x3, #0xa8]
    // 0x87e6f0: r0 = String()
    //     0x87e6f0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e6f4: ldur            x0, [fp, #-8]
    // 0x87e6f8: r1 = LoadClassIdInstr(r0)
    //     0x87e6f8: ldur            x1, [x0, #-1]
    //     0x87e6fc: ubfx            x1, x1, #0xc, #0x14
    // 0x87e700: r16 = "1"
    //     0x87e700: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87e704: ldr             x16, [x16, #0x6a0]
    // 0x87e708: stp             x16, x0, [SP]
    // 0x87e70c: mov             x0, x1
    // 0x87e710: mov             lr, x0
    // 0x87e714: ldr             lr, [x21, lr, lsl #3]
    // 0x87e718: blr             lr
    // 0x87e71c: tbnz            w0, #4, #0x87e75c
    // 0x87e720: nop             
    // 0x87e724: ldur            x0, [fp, #-0x10]
    // 0x87e728: r1 = LoadClassIdInstr(r0)
    //     0x87e728: ldur            x1, [x0, #-1]
    //     0x87e72c: ubfx            x1, x1, #0xc, #0x14
    // 0x87e730: r16 = ""
    //     0x87e730: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e734: stp             x16, x0, [SP]
    // 0x87e738: mov             x0, x1
    // 0x87e73c: mov             lr, x0
    // 0x87e740: ldr             lr, [x21, lr, lsl #3]
    // 0x87e744: blr             lr
    // 0x87e748: tbz             w0, #4, #0x87e75c
    // 0x87e74c: nop             
    // 0x87e750: r0 = "afterChoice"
    //     0x87e750: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe0] "afterChoice"
    //     0x87e754: ldr             x0, [x0, #0xfe0]
    // 0x87e758: b               #0x8838b4
    // 0x87e75c: r0 = "beforeChoice"
    //     0x87e75c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe8] "beforeChoice"
    //     0x87e760: ldr             x0, [x0, #0xfe8]
    // 0x87e764: b               #0x8838b4
    // 0x87e768: r16 = "guanMemoryMiniGame2"
    //     0x87e768: add             x16, PP, #0x12, lsl #12  ; [pp+0x120b8] "guanMemoryMiniGame2"
    //     0x87e76c: ldr             x16, [x16, #0xb8]
    // 0x87e770: ldur            lr, [fp, #-0x28]
    // 0x87e774: stp             lr, x16, [SP]
    // 0x87e778: r0 = ==()
    //     0x87e778: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e77c: tbnz            w0, #4, #0x87e86c
    // 0x87e780: nop             
    // 0x87e784: r0 = LoadStaticField(0xb54)
    //     0x87e784: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e788: ldr             x0, [x0, #0x16a8]
    // 0x87e78c: cmp             w0, NULL
    // 0x87e790: b.ne            #0x87e7a0
    // 0x87e794: nop             
    // 0x87e798: r0 = Null
    //     0x87e798: mov             x0, NULL
    // 0x87e79c: b               #0x87e7c8
    // 0x87e7a0: r17 = 351
    //     0x87e7a0: movz            x17, #0x15f
    // 0x87e7a4: ldr             w1, [x0, x17]
    // 0x87e7a8: DecompressPointer r1
    //     0x87e7a8: add             x1, x1, HEAP, lsl #32
    // 0x87e7ac: r0 = LoadClassIdInstr(r1)
    //     0x87e7ac: ldur            x0, [x1, #-1]
    //     0x87e7b0: ubfx            x0, x0, #0xc, #0x14
    // 0x87e7b4: r2 = "guanMemoryOptional2"
    //     0x87e7b4: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f30] "guanMemoryOptional2"
    //     0x87e7b8: ldr             x2, [x2, #0xf30]
    // 0x87e7bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e7bc: sub             lr, x0, #0xb4
    //     0x87e7c0: ldr             lr, [x21, lr, lsl #3]
    //     0x87e7c4: blr             lr
    // 0x87e7c8: cmp             w0, NULL
    // 0x87e7cc: b.ne            #0x87e7dc
    // 0x87e7d0: nop             
    // 0x87e7d4: r3 = ""
    //     0x87e7d4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e7d8: b               #0x87e7e0
    // 0x87e7dc: mov             x3, x0
    // 0x87e7e0: mov             x0, x3
    // 0x87e7e4: stur            x3, [fp, #-8]
    // 0x87e7e8: r2 = Null
    //     0x87e7e8: mov             x2, NULL
    // 0x87e7ec: r1 = Null
    //     0x87e7ec: mov             x1, NULL
    // 0x87e7f0: r4 = 59
    //     0x87e7f0: movz            x4, #0x3b
    // 0x87e7f4: branchIfSmi(r0, 0x87e804)
    //     0x87e7f4: tbz             w0, #0, #0x87e804
    //     0x87e7f8: nop             
    // 0x87e7fc: r4 = LoadClassIdInstr(r0)
    //     0x87e7fc: ldur            x4, [x0, #-1]
    //     0x87e800: ubfx            x4, x4, #0xc, #0x14
    // 0x87e804: sub             x4, x4, #0x5d
    // 0x87e808: cmp             x4, #1
    // 0x87e80c: b.ls            #0x87e824
    // 0x87e810: nop             
    // 0x87e814: r8 = String
    //     0x87e814: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e818: r3 = Null
    //     0x87e818: add             x3, PP, #0x12, lsl #12  ; [pp+0x120c0] Null
    //     0x87e81c: ldr             x3, [x3, #0xc0]
    // 0x87e820: r0 = String()
    //     0x87e820: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e824: ldur            x0, [fp, #-8]
    // 0x87e828: r1 = LoadClassIdInstr(r0)
    //     0x87e828: ldur            x1, [x0, #-1]
    //     0x87e82c: ubfx            x1, x1, #0xc, #0x14
    // 0x87e830: r16 = "complete"
    //     0x87e830: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87e834: ldr             x16, [x16, #0x590]
    // 0x87e838: stp             x16, x0, [SP]
    // 0x87e83c: mov             x0, x1
    // 0x87e840: mov             lr, x0
    // 0x87e844: ldr             lr, [x21, lr, lsl #3]
    // 0x87e848: blr             lr
    // 0x87e84c: tbnz            w0, #4, #0x87e860
    // 0x87e850: nop             
    // 0x87e854: r0 = "cheatGame"
    //     0x87e854: add             x0, PP, #0x12, lsl #12  ; [pp+0x12010] "cheatGame"
    //     0x87e858: ldr             x0, [x0, #0x10]
    // 0x87e85c: b               #0x8838b4
    // 0x87e860: r0 = "normalGame"
    //     0x87e860: add             x0, PP, #0x12, lsl #12  ; [pp+0x12018] "normalGame"
    //     0x87e864: ldr             x0, [x0, #0x18]
    // 0x87e868: b               #0x8838b4
    // 0x87e86c: r16 = "guanMemoryBadge2NormalPass"
    //     0x87e86c: add             x16, PP, #0x12, lsl #12  ; [pp+0x120d0] "guanMemoryBadge2NormalPass"
    //     0x87e870: ldr             x16, [x16, #0xd0]
    // 0x87e874: ldur            lr, [fp, #-0x28]
    // 0x87e878: stp             lr, x16, [SP]
    // 0x87e87c: r0 = ==()
    //     0x87e87c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e880: tbnz            w0, #4, #0x87e968
    // 0x87e884: nop             
    // 0x87e888: r0 = LoadStaticField(0xb54)
    //     0x87e888: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e88c: ldr             x0, [x0, #0x16a8]
    // 0x87e890: cmp             w0, NULL
    // 0x87e894: b.ne            #0x87e8a4
    // 0x87e898: nop             
    // 0x87e89c: r0 = Null
    //     0x87e89c: mov             x0, NULL
    // 0x87e8a0: b               #0x87e8cc
    // 0x87e8a4: r17 = 351
    //     0x87e8a4: movz            x17, #0x15f
    // 0x87e8a8: ldr             w1, [x0, x17]
    // 0x87e8ac: DecompressPointer r1
    //     0x87e8ac: add             x1, x1, HEAP, lsl #32
    // 0x87e8b0: r0 = LoadClassIdInstr(r1)
    //     0x87e8b0: ldur            x0, [x1, #-1]
    //     0x87e8b4: ubfx            x0, x0, #0xc, #0x14
    // 0x87e8b8: r2 = "guanMemoryBadge2Pass"
    //     0x87e8b8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12078] "guanMemoryBadge2Pass"
    //     0x87e8bc: ldr             x2, [x2, #0x78]
    // 0x87e8c0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e8c0: sub             lr, x0, #0xb4
    //     0x87e8c4: ldr             lr, [x21, lr, lsl #3]
    //     0x87e8c8: blr             lr
    // 0x87e8cc: cmp             w0, NULL
    // 0x87e8d0: b.ne            #0x87e8e0
    // 0x87e8d4: nop             
    // 0x87e8d8: r3 = ""
    //     0x87e8d8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e8dc: b               #0x87e8e4
    // 0x87e8e0: mov             x3, x0
    // 0x87e8e4: mov             x0, x3
    // 0x87e8e8: stur            x3, [fp, #-8]
    // 0x87e8ec: r2 = Null
    //     0x87e8ec: mov             x2, NULL
    // 0x87e8f0: r1 = Null
    //     0x87e8f0: mov             x1, NULL
    // 0x87e8f4: r4 = 59
    //     0x87e8f4: movz            x4, #0x3b
    // 0x87e8f8: branchIfSmi(r0, 0x87e908)
    //     0x87e8f8: tbz             w0, #0, #0x87e908
    //     0x87e8fc: nop             
    // 0x87e900: r4 = LoadClassIdInstr(r0)
    //     0x87e900: ldur            x4, [x0, #-1]
    //     0x87e904: ubfx            x4, x4, #0xc, #0x14
    // 0x87e908: sub             x4, x4, #0x5d
    // 0x87e90c: cmp             x4, #1
    // 0x87e910: b.ls            #0x87e928
    // 0x87e914: nop             
    // 0x87e918: r8 = String
    //     0x87e918: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87e91c: r3 = Null
    //     0x87e91c: add             x3, PP, #0x12, lsl #12  ; [pp+0x120d8] Null
    //     0x87e920: ldr             x3, [x3, #0xd8]
    // 0x87e924: r0 = String()
    //     0x87e924: bl              #0x1523244  ; IsType_String_Stub
    // 0x87e928: ldur            x0, [fp, #-8]
    // 0x87e92c: r1 = LoadClassIdInstr(r0)
    //     0x87e92c: ldur            x1, [x0, #-1]
    //     0x87e930: ubfx            x1, x1, #0xc, #0x14
    // 0x87e934: r16 = ""
    //     0x87e934: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e938: stp             x16, x0, [SP]
    // 0x87e93c: mov             x0, x1
    // 0x87e940: mov             lr, x0
    // 0x87e944: ldr             lr, [x21, lr, lsl #3]
    // 0x87e948: blr             lr
    // 0x87e94c: tbnz            w0, #4, #0x87e960
    // 0x87e950: nop             
    // 0x87e954: r0 = "guanMemoryBadge2NormalPass"
    //     0x87e954: add             x0, PP, #0x12, lsl #12  ; [pp+0x120d0] "guanMemoryBadge2NormalPass"
    //     0x87e958: ldr             x0, [x0, #0xd0]
    // 0x87e95c: b               #0x8838b4
    // 0x87e960: r0 = "end"
    //     0x87e960: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87e964: b               #0x8838b4
    // 0x87e968: r16 = "guanMemoryBadge2PerfectPass"
    //     0x87e968: add             x16, PP, #0x12, lsl #12  ; [pp+0x120e8] "guanMemoryBadge2PerfectPass"
    //     0x87e96c: ldr             x16, [x16, #0xe8]
    // 0x87e970: ldur            lr, [fp, #-0x28]
    // 0x87e974: stp             lr, x16, [SP]
    // 0x87e978: r0 = ==()
    //     0x87e978: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87e97c: tbnz            w0, #4, #0x87ea9c
    // 0x87e980: nop             
    // 0x87e984: r0 = LoadStaticField(0xb54)
    //     0x87e984: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87e988: ldr             x0, [x0, #0x16a8]
    // 0x87e98c: cmp             w0, NULL
    // 0x87e990: b.ne            #0x87e9a0
    // 0x87e994: nop             
    // 0x87e998: r0 = Null
    //     0x87e998: mov             x0, NULL
    // 0x87e99c: b               #0x87e9c8
    // 0x87e9a0: r17 = 351
    //     0x87e9a0: movz            x17, #0x15f
    // 0x87e9a4: ldr             w1, [x0, x17]
    // 0x87e9a8: DecompressPointer r1
    //     0x87e9a8: add             x1, x1, HEAP, lsl #32
    // 0x87e9ac: r0 = LoadClassIdInstr(r1)
    //     0x87e9ac: ldur            x0, [x1, #-1]
    //     0x87e9b0: ubfx            x0, x0, #0xc, #0x14
    // 0x87e9b4: r2 = "guanMemoryBadge2Pass"
    //     0x87e9b4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12078] "guanMemoryBadge2Pass"
    //     0x87e9b8: ldr             x2, [x2, #0x78]
    // 0x87e9bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87e9bc: sub             lr, x0, #0xb4
    //     0x87e9c0: ldr             lr, [x21, lr, lsl #3]
    //     0x87e9c4: blr             lr
    // 0x87e9c8: cmp             w0, NULL
    // 0x87e9cc: b.ne            #0x87e9dc
    // 0x87e9d0: nop             
    // 0x87e9d4: r3 = ""
    //     0x87e9d4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87e9d8: b               #0x87e9e0
    // 0x87e9dc: mov             x3, x0
    // 0x87e9e0: mov             x0, x3
    // 0x87e9e4: stur            x3, [fp, #-8]
    // 0x87e9e8: r2 = Null
    //     0x87e9e8: mov             x2, NULL
    // 0x87e9ec: r1 = Null
    //     0x87e9ec: mov             x1, NULL
    // 0x87e9f0: r4 = 59
    //     0x87e9f0: movz            x4, #0x3b
    // 0x87e9f4: branchIfSmi(r0, 0x87ea04)
    //     0x87e9f4: tbz             w0, #0, #0x87ea04
    //     0x87e9f8: nop             
    // 0x87e9fc: r4 = LoadClassIdInstr(r0)
    //     0x87e9fc: ldur            x4, [x0, #-1]
    //     0x87ea00: ubfx            x4, x4, #0xc, #0x14
    // 0x87ea04: sub             x4, x4, #0x5d
    // 0x87ea08: cmp             x4, #1
    // 0x87ea0c: b.ls            #0x87ea24
    // 0x87ea10: nop             
    // 0x87ea14: r8 = String
    //     0x87ea14: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ea18: r3 = Null
    //     0x87ea18: add             x3, PP, #0x12, lsl #12  ; [pp+0x120f0] Null
    //     0x87ea1c: ldr             x3, [x3, #0xf0]
    // 0x87ea20: r0 = String()
    //     0x87ea20: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ea24: ldur            x1, [fp, #-8]
    // 0x87ea28: r0 = LoadClassIdInstr(r1)
    //     0x87ea28: ldur            x0, [x1, #-1]
    //     0x87ea2c: ubfx            x0, x0, #0xc, #0x14
    // 0x87ea30: r16 = ""
    //     0x87ea30: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ea34: stp             x16, x1, [SP]
    // 0x87ea38: mov             lr, x0
    // 0x87ea3c: ldr             lr, [x21, lr, lsl #3]
    // 0x87ea40: blr             lr
    // 0x87ea44: tbnz            w0, #4, #0x87ea58
    // 0x87ea48: nop             
    // 0x87ea4c: r0 = "guanMemoryBadge2PerfectPass2"
    //     0x87ea4c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12100] "guanMemoryBadge2PerfectPass2"
    //     0x87ea50: ldr             x0, [x0, #0x100]
    // 0x87ea54: b               #0x8838b4
    // 0x87ea58: ldur            x0, [fp, #-8]
    // 0x87ea5c: r1 = LoadClassIdInstr(r0)
    //     0x87ea5c: ldur            x1, [x0, #-1]
    //     0x87ea60: ubfx            x1, x1, #0xc, #0x14
    // 0x87ea64: r16 = "perfect"
    //     0x87ea64: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x87ea68: ldr             x16, [x16, #0x58]
    // 0x87ea6c: stp             x16, x0, [SP]
    // 0x87ea70: mov             x0, x1
    // 0x87ea74: mov             lr, x0
    // 0x87ea78: ldr             lr, [x21, lr, lsl #3]
    // 0x87ea7c: blr             lr
    // 0x87ea80: tbz             w0, #4, #0x87ea94
    // 0x87ea84: nop             
    // 0x87ea88: r0 = "guanMemoryBadge2PerfectPass"
    //     0x87ea88: add             x0, PP, #0x12, lsl #12  ; [pp+0x120e8] "guanMemoryBadge2PerfectPass"
    //     0x87ea8c: ldr             x0, [x0, #0xe8]
    // 0x87ea90: b               #0x8838b4
    // 0x87ea94: r0 = "end"
    //     0x87ea94: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87ea98: b               #0x8838b4
    // 0x87ea9c: r16 = "guanMemoryBadge3"
    //     0x87ea9c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12108] "guanMemoryBadge3"
    //     0x87eaa0: ldr             x16, [x16, #0x108]
    // 0x87eaa4: ldur            lr, [fp, #-0x28]
    // 0x87eaa8: stp             lr, x16, [SP]
    // 0x87eaac: r0 = ==()
    //     0x87eaac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87eab0: tbnz            w0, #4, #0x87ecdc
    // 0x87eab4: nop             
    // 0x87eab8: r0 = LoadStaticField(0xb54)
    //     0x87eab8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87eabc: ldr             x0, [x0, #0x16a8]
    // 0x87eac0: cmp             w0, NULL
    // 0x87eac4: b.ne            #0x87ead4
    // 0x87eac8: nop             
    // 0x87eacc: r0 = Null
    //     0x87eacc: mov             x0, NULL
    // 0x87ead0: b               #0x87eafc
    // 0x87ead4: r17 = 351
    //     0x87ead4: movz            x17, #0x15f
    // 0x87ead8: ldr             w1, [x0, x17]
    // 0x87eadc: DecompressPointer r1
    //     0x87eadc: add             x1, x1, HEAP, lsl #32
    // 0x87eae0: r0 = LoadClassIdInstr(r1)
    //     0x87eae0: ldur            x0, [x1, #-1]
    //     0x87eae4: ubfx            x0, x0, #0xc, #0x14
    // 0x87eae8: r2 = "guanMemoryBadge3"
    //     0x87eae8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12108] "guanMemoryBadge3"
    //     0x87eaec: ldr             x2, [x2, #0x108]
    // 0x87eaf0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87eaf0: sub             lr, x0, #0xb4
    //     0x87eaf4: ldr             lr, [x21, lr, lsl #3]
    //     0x87eaf8: blr             lr
    // 0x87eafc: cmp             w0, NULL
    // 0x87eb00: b.ne            #0x87eb10
    // 0x87eb04: nop             
    // 0x87eb08: r3 = ""
    //     0x87eb08: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87eb0c: b               #0x87eb14
    // 0x87eb10: mov             x3, x0
    // 0x87eb14: mov             x0, x3
    // 0x87eb18: stur            x3, [fp, #-8]
    // 0x87eb1c: r2 = Null
    //     0x87eb1c: mov             x2, NULL
    // 0x87eb20: r1 = Null
    //     0x87eb20: mov             x1, NULL
    // 0x87eb24: r4 = 59
    //     0x87eb24: movz            x4, #0x3b
    // 0x87eb28: branchIfSmi(r0, 0x87eb38)
    //     0x87eb28: tbz             w0, #0, #0x87eb38
    //     0x87eb2c: nop             
    // 0x87eb30: r4 = LoadClassIdInstr(r0)
    //     0x87eb30: ldur            x4, [x0, #-1]
    //     0x87eb34: ubfx            x4, x4, #0xc, #0x14
    // 0x87eb38: sub             x4, x4, #0x5d
    // 0x87eb3c: cmp             x4, #1
    // 0x87eb40: b.ls            #0x87eb58
    // 0x87eb44: nop             
    // 0x87eb48: r8 = String
    //     0x87eb48: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87eb4c: r3 = Null
    //     0x87eb4c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12110] Null
    //     0x87eb50: ldr             x3, [x3, #0x110]
    // 0x87eb54: r0 = String()
    //     0x87eb54: bl              #0x1523244  ; IsType_String_Stub
    // 0x87eb58: r0 = LoadStaticField(0xb54)
    //     0x87eb58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87eb5c: ldr             x0, [x0, #0x16a8]
    // 0x87eb60: cmp             w0, NULL
    // 0x87eb64: b.ne            #0x87eb74
    // 0x87eb68: nop             
    // 0x87eb6c: r0 = Null
    //     0x87eb6c: mov             x0, NULL
    // 0x87eb70: b               #0x87eb9c
    // 0x87eb74: r17 = 351
    //     0x87eb74: movz            x17, #0x15f
    // 0x87eb78: ldr             w1, [x0, x17]
    // 0x87eb7c: DecompressPointer r1
    //     0x87eb7c: add             x1, x1, HEAP, lsl #32
    // 0x87eb80: r0 = LoadClassIdInstr(r1)
    //     0x87eb80: ldur            x0, [x1, #-1]
    //     0x87eb84: ubfx            x0, x0, #0xc, #0x14
    // 0x87eb88: r2 = "guanMemoryBadge3Pass"
    //     0x87eb88: add             x2, PP, #0x12, lsl #12  ; [pp+0x12120] "guanMemoryBadge3Pass"
    //     0x87eb8c: ldr             x2, [x2, #0x120]
    // 0x87eb90: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87eb90: sub             lr, x0, #0xb4
    //     0x87eb94: ldr             lr, [x21, lr, lsl #3]
    //     0x87eb98: blr             lr
    // 0x87eb9c: cmp             w0, NULL
    // 0x87eba0: b.ne            #0x87ebb0
    // 0x87eba4: nop             
    // 0x87eba8: r4 = ""
    //     0x87eba8: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ebac: b               #0x87ebb4
    // 0x87ebb0: mov             x4, x0
    // 0x87ebb4: ldur            x3, [fp, #-8]
    // 0x87ebb8: mov             x0, x4
    // 0x87ebbc: stur            x4, [fp, #-0x10]
    // 0x87ebc0: r2 = Null
    //     0x87ebc0: mov             x2, NULL
    // 0x87ebc4: r1 = Null
    //     0x87ebc4: mov             x1, NULL
    // 0x87ebc8: r4 = 59
    //     0x87ebc8: movz            x4, #0x3b
    // 0x87ebcc: branchIfSmi(r0, 0x87ebdc)
    //     0x87ebcc: tbz             w0, #0, #0x87ebdc
    //     0x87ebd0: nop             
    // 0x87ebd4: r4 = LoadClassIdInstr(r0)
    //     0x87ebd4: ldur            x4, [x0, #-1]
    //     0x87ebd8: ubfx            x4, x4, #0xc, #0x14
    // 0x87ebdc: sub             x4, x4, #0x5d
    // 0x87ebe0: cmp             x4, #1
    // 0x87ebe4: b.ls            #0x87ebfc
    // 0x87ebe8: nop             
    // 0x87ebec: r8 = String
    //     0x87ebec: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ebf0: r3 = Null
    //     0x87ebf0: add             x3, PP, #0x12, lsl #12  ; [pp+0x12128] Null
    //     0x87ebf4: ldr             x3, [x3, #0x128]
    // 0x87ebf8: r0 = String()
    //     0x87ebf8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ebfc: ldur            x1, [fp, #-8]
    // 0x87ec00: r0 = LoadClassIdInstr(r1)
    //     0x87ec00: ldur            x0, [x1, #-1]
    //     0x87ec04: ubfx            x0, x0, #0xc, #0x14
    // 0x87ec08: r16 = ""
    //     0x87ec08: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ec0c: stp             x16, x1, [SP]
    // 0x87ec10: mov             lr, x0
    // 0x87ec14: ldr             lr, [x21, lr, lsl #3]
    // 0x87ec18: blr             lr
    // 0x87ec1c: tbnz            w0, #4, #0x87ec30
    // 0x87ec20: nop             
    // 0x87ec24: r0 = "badge1"
    //     0x87ec24: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f98] "badge1"
    //     0x87ec28: ldr             x0, [x0, #0xf98]
    // 0x87ec2c: b               #0x8838b4
    // 0x87ec30: ldur            x1, [fp, #-8]
    // 0x87ec34: r0 = LoadClassIdInstr(r1)
    //     0x87ec34: ldur            x0, [x1, #-1]
    //     0x87ec38: ubfx            x0, x0, #0xc, #0x14
    // 0x87ec3c: r16 = "1"
    //     0x87ec3c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87ec40: ldr             x16, [x16, #0x6a0]
    // 0x87ec44: stp             x16, x1, [SP]
    // 0x87ec48: mov             lr, x0
    // 0x87ec4c: ldr             lr, [x21, lr, lsl #3]
    // 0x87ec50: blr             lr
    // 0x87ec54: tbnz            w0, #4, #0x87ec94
    // 0x87ec58: nop             
    // 0x87ec5c: ldur            x0, [fp, #-0x10]
    // 0x87ec60: r1 = LoadClassIdInstr(r0)
    //     0x87ec60: ldur            x1, [x0, #-1]
    //     0x87ec64: ubfx            x1, x1, #0xc, #0x14
    // 0x87ec68: r16 = ""
    //     0x87ec68: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ec6c: stp             x16, x0, [SP]
    // 0x87ec70: mov             x0, x1
    // 0x87ec74: mov             lr, x0
    // 0x87ec78: ldr             lr, [x21, lr, lsl #3]
    // 0x87ec7c: blr             lr
    // 0x87ec80: tbnz            w0, #4, #0x87ec94
    // 0x87ec84: nop             
    // 0x87ec88: r0 = "badge2"
    //     0x87ec88: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa0] "badge2"
    //     0x87ec8c: ldr             x0, [x0, #0xfa0]
    // 0x87ec90: b               #0x8838b4
    // 0x87ec94: ldur            x0, [fp, #-8]
    // 0x87ec98: r1 = LoadClassIdInstr(r0)
    //     0x87ec98: ldur            x1, [x0, #-1]
    //     0x87ec9c: ubfx            x1, x1, #0xc, #0x14
    // 0x87eca0: r16 = "2"
    //     0x87eca0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87eca4: ldr             x16, [x16, #0x6a8]
    // 0x87eca8: stp             x16, x0, [SP]
    // 0x87ecac: mov             x0, x1
    // 0x87ecb0: mov             lr, x0
    // 0x87ecb4: ldr             lr, [x21, lr, lsl #3]
    // 0x87ecb8: blr             lr
    // 0x87ecbc: tbnz            w0, #4, #0x87ecd0
    // 0x87ecc0: nop             
    // 0x87ecc4: r0 = "badge4"
    //     0x87ecc4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa8] "badge4"
    //     0x87ecc8: ldr             x0, [x0, #0xfa8]
    // 0x87eccc: b               #0x8838b4
    // 0x87ecd0: r0 = "badge3"
    //     0x87ecd0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fb0] "badge3"
    //     0x87ecd4: ldr             x0, [x0, #0xfb0]
    // 0x87ecd8: b               #0x8838b4
    // 0x87ecdc: r16 = "guanMemoryBadge3Choice"
    //     0x87ecdc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12138] "guanMemoryBadge3Choice"
    //     0x87ece0: ldr             x16, [x16, #0x138]
    // 0x87ece4: ldur            lr, [fp, #-0x28]
    // 0x87ece8: stp             lr, x16, [SP]
    // 0x87ecec: r0 = ==()
    //     0x87ecec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ecf0: tbnz            w0, #4, #0x87eeb0
    // 0x87ecf4: nop             
    // 0x87ecf8: r0 = LoadStaticField(0xb54)
    //     0x87ecf8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ecfc: ldr             x0, [x0, #0x16a8]
    // 0x87ed00: cmp             w0, NULL
    // 0x87ed04: b.ne            #0x87ed14
    // 0x87ed08: nop             
    // 0x87ed0c: r0 = Null
    //     0x87ed0c: mov             x0, NULL
    // 0x87ed10: b               #0x87ed3c
    // 0x87ed14: r17 = 351
    //     0x87ed14: movz            x17, #0x15f
    // 0x87ed18: ldr             w1, [x0, x17]
    // 0x87ed1c: DecompressPointer r1
    //     0x87ed1c: add             x1, x1, HEAP, lsl #32
    // 0x87ed20: r0 = LoadClassIdInstr(r1)
    //     0x87ed20: ldur            x0, [x1, #-1]
    //     0x87ed24: ubfx            x0, x0, #0xc, #0x14
    // 0x87ed28: r2 = "guanMemoryBadge3"
    //     0x87ed28: add             x2, PP, #0x12, lsl #12  ; [pp+0x12108] "guanMemoryBadge3"
    //     0x87ed2c: ldr             x2, [x2, #0x108]
    // 0x87ed30: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ed30: sub             lr, x0, #0xb4
    //     0x87ed34: ldr             lr, [x21, lr, lsl #3]
    //     0x87ed38: blr             lr
    // 0x87ed3c: cmp             w0, NULL
    // 0x87ed40: b.ne            #0x87ed50
    // 0x87ed44: nop             
    // 0x87ed48: r3 = ""
    //     0x87ed48: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ed4c: b               #0x87ed54
    // 0x87ed50: mov             x3, x0
    // 0x87ed54: mov             x0, x3
    // 0x87ed58: stur            x3, [fp, #-8]
    // 0x87ed5c: r2 = Null
    //     0x87ed5c: mov             x2, NULL
    // 0x87ed60: r1 = Null
    //     0x87ed60: mov             x1, NULL
    // 0x87ed64: r4 = 59
    //     0x87ed64: movz            x4, #0x3b
    // 0x87ed68: branchIfSmi(r0, 0x87ed78)
    //     0x87ed68: tbz             w0, #0, #0x87ed78
    //     0x87ed6c: nop             
    // 0x87ed70: r4 = LoadClassIdInstr(r0)
    //     0x87ed70: ldur            x4, [x0, #-1]
    //     0x87ed74: ubfx            x4, x4, #0xc, #0x14
    // 0x87ed78: sub             x4, x4, #0x5d
    // 0x87ed7c: cmp             x4, #1
    // 0x87ed80: b.ls            #0x87ed98
    // 0x87ed84: nop             
    // 0x87ed88: r8 = String
    //     0x87ed88: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ed8c: r3 = Null
    //     0x87ed8c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12140] Null
    //     0x87ed90: ldr             x3, [x3, #0x140]
    // 0x87ed94: r0 = String()
    //     0x87ed94: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ed98: r0 = LoadStaticField(0xb54)
    //     0x87ed98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ed9c: ldr             x0, [x0, #0x16a8]
    // 0x87eda0: cmp             w0, NULL
    // 0x87eda4: b.ne            #0x87edb4
    // 0x87eda8: nop             
    // 0x87edac: r0 = Null
    //     0x87edac: mov             x0, NULL
    // 0x87edb0: b               #0x87eddc
    // 0x87edb4: r17 = 351
    //     0x87edb4: movz            x17, #0x15f
    // 0x87edb8: ldr             w1, [x0, x17]
    // 0x87edbc: DecompressPointer r1
    //     0x87edbc: add             x1, x1, HEAP, lsl #32
    // 0x87edc0: r0 = LoadClassIdInstr(r1)
    //     0x87edc0: ldur            x0, [x1, #-1]
    //     0x87edc4: ubfx            x0, x0, #0xc, #0x14
    // 0x87edc8: r2 = "guanMemoryBadge3Pass"
    //     0x87edc8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12120] "guanMemoryBadge3Pass"
    //     0x87edcc: ldr             x2, [x2, #0x120]
    // 0x87edd0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87edd0: sub             lr, x0, #0xb4
    //     0x87edd4: ldr             lr, [x21, lr, lsl #3]
    //     0x87edd8: blr             lr
    // 0x87eddc: cmp             w0, NULL
    // 0x87ede0: b.ne            #0x87edf0
    // 0x87ede4: nop             
    // 0x87ede8: r4 = ""
    //     0x87ede8: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87edec: b               #0x87edf4
    // 0x87edf0: mov             x4, x0
    // 0x87edf4: ldur            x3, [fp, #-8]
    // 0x87edf8: mov             x0, x4
    // 0x87edfc: stur            x4, [fp, #-0x10]
    // 0x87ee00: r2 = Null
    //     0x87ee00: mov             x2, NULL
    // 0x87ee04: r1 = Null
    //     0x87ee04: mov             x1, NULL
    // 0x87ee08: r4 = 59
    //     0x87ee08: movz            x4, #0x3b
    // 0x87ee0c: branchIfSmi(r0, 0x87ee1c)
    //     0x87ee0c: tbz             w0, #0, #0x87ee1c
    //     0x87ee10: nop             
    // 0x87ee14: r4 = LoadClassIdInstr(r0)
    //     0x87ee14: ldur            x4, [x0, #-1]
    //     0x87ee18: ubfx            x4, x4, #0xc, #0x14
    // 0x87ee1c: sub             x4, x4, #0x5d
    // 0x87ee20: cmp             x4, #1
    // 0x87ee24: b.ls            #0x87ee3c
    // 0x87ee28: nop             
    // 0x87ee2c: r8 = String
    //     0x87ee2c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ee30: r3 = Null
    //     0x87ee30: add             x3, PP, #0x12, lsl #12  ; [pp+0x12150] Null
    //     0x87ee34: ldr             x3, [x3, #0x150]
    // 0x87ee38: r0 = String()
    //     0x87ee38: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ee3c: ldur            x0, [fp, #-8]
    // 0x87ee40: r1 = LoadClassIdInstr(r0)
    //     0x87ee40: ldur            x1, [x0, #-1]
    //     0x87ee44: ubfx            x1, x1, #0xc, #0x14
    // 0x87ee48: r16 = "1"
    //     0x87ee48: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87ee4c: ldr             x16, [x16, #0x6a0]
    // 0x87ee50: stp             x16, x0, [SP]
    // 0x87ee54: mov             x0, x1
    // 0x87ee58: mov             lr, x0
    // 0x87ee5c: ldr             lr, [x21, lr, lsl #3]
    // 0x87ee60: blr             lr
    // 0x87ee64: tbnz            w0, #4, #0x87eea4
    // 0x87ee68: nop             
    // 0x87ee6c: ldur            x0, [fp, #-0x10]
    // 0x87ee70: r1 = LoadClassIdInstr(r0)
    //     0x87ee70: ldur            x1, [x0, #-1]
    //     0x87ee74: ubfx            x1, x1, #0xc, #0x14
    // 0x87ee78: r16 = ""
    //     0x87ee78: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ee7c: stp             x16, x0, [SP]
    // 0x87ee80: mov             x0, x1
    // 0x87ee84: mov             lr, x0
    // 0x87ee88: ldr             lr, [x21, lr, lsl #3]
    // 0x87ee8c: blr             lr
    // 0x87ee90: tbz             w0, #4, #0x87eea4
    // 0x87ee94: nop             
    // 0x87ee98: r0 = "afterChoice"
    //     0x87ee98: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe0] "afterChoice"
    //     0x87ee9c: ldr             x0, [x0, #0xfe0]
    // 0x87eea0: b               #0x8838b4
    // 0x87eea4: r0 = "beforeChoice"
    //     0x87eea4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe8] "beforeChoice"
    //     0x87eea8: ldr             x0, [x0, #0xfe8]
    // 0x87eeac: b               #0x8838b4
    // 0x87eeb0: r16 = "guanMemoryMiniGame3"
    //     0x87eeb0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12160] "guanMemoryMiniGame3"
    //     0x87eeb4: ldr             x16, [x16, #0x160]
    // 0x87eeb8: ldur            lr, [fp, #-0x28]
    // 0x87eebc: stp             lr, x16, [SP]
    // 0x87eec0: r0 = ==()
    //     0x87eec0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87eec4: tbnz            w0, #4, #0x87efb4
    // 0x87eec8: nop             
    // 0x87eecc: r0 = LoadStaticField(0xb54)
    //     0x87eecc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87eed0: ldr             x0, [x0, #0x16a8]
    // 0x87eed4: cmp             w0, NULL
    // 0x87eed8: b.ne            #0x87eee8
    // 0x87eedc: nop             
    // 0x87eee0: r0 = Null
    //     0x87eee0: mov             x0, NULL
    // 0x87eee4: b               #0x87ef10
    // 0x87eee8: r17 = 351
    //     0x87eee8: movz            x17, #0x15f
    // 0x87eeec: ldr             w1, [x0, x17]
    // 0x87eef0: DecompressPointer r1
    //     0x87eef0: add             x1, x1, HEAP, lsl #32
    // 0x87eef4: r0 = LoadClassIdInstr(r1)
    //     0x87eef4: ldur            x0, [x1, #-1]
    //     0x87eef8: ubfx            x0, x0, #0xc, #0x14
    // 0x87eefc: r2 = "guanMemoryOptional3"
    //     0x87eefc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12168] "guanMemoryOptional3"
    //     0x87ef00: ldr             x2, [x2, #0x168]
    // 0x87ef04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ef04: sub             lr, x0, #0xb4
    //     0x87ef08: ldr             lr, [x21, lr, lsl #3]
    //     0x87ef0c: blr             lr
    // 0x87ef10: cmp             w0, NULL
    // 0x87ef14: b.ne            #0x87ef24
    // 0x87ef18: nop             
    // 0x87ef1c: r3 = ""
    //     0x87ef1c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ef20: b               #0x87ef28
    // 0x87ef24: mov             x3, x0
    // 0x87ef28: mov             x0, x3
    // 0x87ef2c: stur            x3, [fp, #-8]
    // 0x87ef30: r2 = Null
    //     0x87ef30: mov             x2, NULL
    // 0x87ef34: r1 = Null
    //     0x87ef34: mov             x1, NULL
    // 0x87ef38: r4 = 59
    //     0x87ef38: movz            x4, #0x3b
    // 0x87ef3c: branchIfSmi(r0, 0x87ef4c)
    //     0x87ef3c: tbz             w0, #0, #0x87ef4c
    //     0x87ef40: nop             
    // 0x87ef44: r4 = LoadClassIdInstr(r0)
    //     0x87ef44: ldur            x4, [x0, #-1]
    //     0x87ef48: ubfx            x4, x4, #0xc, #0x14
    // 0x87ef4c: sub             x4, x4, #0x5d
    // 0x87ef50: cmp             x4, #1
    // 0x87ef54: b.ls            #0x87ef6c
    // 0x87ef58: nop             
    // 0x87ef5c: r8 = String
    //     0x87ef5c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87ef60: r3 = Null
    //     0x87ef60: add             x3, PP, #0x12, lsl #12  ; [pp+0x12170] Null
    //     0x87ef64: ldr             x3, [x3, #0x170]
    // 0x87ef68: r0 = String()
    //     0x87ef68: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ef6c: ldur            x0, [fp, #-8]
    // 0x87ef70: r1 = LoadClassIdInstr(r0)
    //     0x87ef70: ldur            x1, [x0, #-1]
    //     0x87ef74: ubfx            x1, x1, #0xc, #0x14
    // 0x87ef78: r16 = "complete"
    //     0x87ef78: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87ef7c: ldr             x16, [x16, #0x590]
    // 0x87ef80: stp             x16, x0, [SP]
    // 0x87ef84: mov             x0, x1
    // 0x87ef88: mov             lr, x0
    // 0x87ef8c: ldr             lr, [x21, lr, lsl #3]
    // 0x87ef90: blr             lr
    // 0x87ef94: tbnz            w0, #4, #0x87efa8
    // 0x87ef98: nop             
    // 0x87ef9c: r0 = "cheatGame"
    //     0x87ef9c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12010] "cheatGame"
    //     0x87efa0: ldr             x0, [x0, #0x10]
    // 0x87efa4: b               #0x8838b4
    // 0x87efa8: r0 = "normalGame"
    //     0x87efa8: add             x0, PP, #0x12, lsl #12  ; [pp+0x12018] "normalGame"
    //     0x87efac: ldr             x0, [x0, #0x18]
    // 0x87efb0: b               #0x8838b4
    // 0x87efb4: r16 = "guanMemoryBadge3NormalPass"
    //     0x87efb4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12180] "guanMemoryBadge3NormalPass"
    //     0x87efb8: ldr             x16, [x16, #0x180]
    // 0x87efbc: ldur            lr, [fp, #-0x28]
    // 0x87efc0: stp             lr, x16, [SP]
    // 0x87efc4: r0 = ==()
    //     0x87efc4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87efc8: tbnz            w0, #4, #0x87f0b0
    // 0x87efcc: nop             
    // 0x87efd0: r0 = LoadStaticField(0xb54)
    //     0x87efd0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87efd4: ldr             x0, [x0, #0x16a8]
    // 0x87efd8: cmp             w0, NULL
    // 0x87efdc: b.ne            #0x87efec
    // 0x87efe0: nop             
    // 0x87efe4: r0 = Null
    //     0x87efe4: mov             x0, NULL
    // 0x87efe8: b               #0x87f014
    // 0x87efec: r17 = 351
    //     0x87efec: movz            x17, #0x15f
    // 0x87eff0: ldr             w1, [x0, x17]
    // 0x87eff4: DecompressPointer r1
    //     0x87eff4: add             x1, x1, HEAP, lsl #32
    // 0x87eff8: r0 = LoadClassIdInstr(r1)
    //     0x87eff8: ldur            x0, [x1, #-1]
    //     0x87effc: ubfx            x0, x0, #0xc, #0x14
    // 0x87f000: r2 = "guanMemoryBadge3Pass"
    //     0x87f000: add             x2, PP, #0x12, lsl #12  ; [pp+0x12120] "guanMemoryBadge3Pass"
    //     0x87f004: ldr             x2, [x2, #0x120]
    // 0x87f008: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f008: sub             lr, x0, #0xb4
    //     0x87f00c: ldr             lr, [x21, lr, lsl #3]
    //     0x87f010: blr             lr
    // 0x87f014: cmp             w0, NULL
    // 0x87f018: b.ne            #0x87f028
    // 0x87f01c: nop             
    // 0x87f020: r3 = ""
    //     0x87f020: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f024: b               #0x87f02c
    // 0x87f028: mov             x3, x0
    // 0x87f02c: mov             x0, x3
    // 0x87f030: stur            x3, [fp, #-8]
    // 0x87f034: r2 = Null
    //     0x87f034: mov             x2, NULL
    // 0x87f038: r1 = Null
    //     0x87f038: mov             x1, NULL
    // 0x87f03c: r4 = 59
    //     0x87f03c: movz            x4, #0x3b
    // 0x87f040: branchIfSmi(r0, 0x87f050)
    //     0x87f040: tbz             w0, #0, #0x87f050
    //     0x87f044: nop             
    // 0x87f048: r4 = LoadClassIdInstr(r0)
    //     0x87f048: ldur            x4, [x0, #-1]
    //     0x87f04c: ubfx            x4, x4, #0xc, #0x14
    // 0x87f050: sub             x4, x4, #0x5d
    // 0x87f054: cmp             x4, #1
    // 0x87f058: b.ls            #0x87f070
    // 0x87f05c: nop             
    // 0x87f060: r8 = String
    //     0x87f060: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f064: r3 = Null
    //     0x87f064: add             x3, PP, #0x12, lsl #12  ; [pp+0x12188] Null
    //     0x87f068: ldr             x3, [x3, #0x188]
    // 0x87f06c: r0 = String()
    //     0x87f06c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f070: ldur            x0, [fp, #-8]
    // 0x87f074: r1 = LoadClassIdInstr(r0)
    //     0x87f074: ldur            x1, [x0, #-1]
    //     0x87f078: ubfx            x1, x1, #0xc, #0x14
    // 0x87f07c: r16 = ""
    //     0x87f07c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f080: stp             x16, x0, [SP]
    // 0x87f084: mov             x0, x1
    // 0x87f088: mov             lr, x0
    // 0x87f08c: ldr             lr, [x21, lr, lsl #3]
    // 0x87f090: blr             lr
    // 0x87f094: tbnz            w0, #4, #0x87f0a8
    // 0x87f098: nop             
    // 0x87f09c: r0 = "guanMemoryBadge3NormalPass"
    //     0x87f09c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12180] "guanMemoryBadge3NormalPass"
    //     0x87f0a0: ldr             x0, [x0, #0x180]
    // 0x87f0a4: b               #0x8838b4
    // 0x87f0a8: r0 = "end"
    //     0x87f0a8: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87f0ac: b               #0x8838b4
    // 0x87f0b0: r16 = "guanMemoryBadge3PerfectPass"
    //     0x87f0b0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12198] "guanMemoryBadge3PerfectPass"
    //     0x87f0b4: ldr             x16, [x16, #0x198]
    // 0x87f0b8: ldur            lr, [fp, #-0x28]
    // 0x87f0bc: stp             lr, x16, [SP]
    // 0x87f0c0: r0 = ==()
    //     0x87f0c0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f0c4: tbnz            w0, #4, #0x87f1e4
    // 0x87f0c8: nop             
    // 0x87f0cc: r0 = LoadStaticField(0xb54)
    //     0x87f0cc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f0d0: ldr             x0, [x0, #0x16a8]
    // 0x87f0d4: cmp             w0, NULL
    // 0x87f0d8: b.ne            #0x87f0e8
    // 0x87f0dc: nop             
    // 0x87f0e0: r0 = Null
    //     0x87f0e0: mov             x0, NULL
    // 0x87f0e4: b               #0x87f110
    // 0x87f0e8: r17 = 351
    //     0x87f0e8: movz            x17, #0x15f
    // 0x87f0ec: ldr             w1, [x0, x17]
    // 0x87f0f0: DecompressPointer r1
    //     0x87f0f0: add             x1, x1, HEAP, lsl #32
    // 0x87f0f4: r0 = LoadClassIdInstr(r1)
    //     0x87f0f4: ldur            x0, [x1, #-1]
    //     0x87f0f8: ubfx            x0, x0, #0xc, #0x14
    // 0x87f0fc: r2 = "guanMemoryBadge3Pass"
    //     0x87f0fc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12120] "guanMemoryBadge3Pass"
    //     0x87f100: ldr             x2, [x2, #0x120]
    // 0x87f104: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f104: sub             lr, x0, #0xb4
    //     0x87f108: ldr             lr, [x21, lr, lsl #3]
    //     0x87f10c: blr             lr
    // 0x87f110: cmp             w0, NULL
    // 0x87f114: b.ne            #0x87f124
    // 0x87f118: nop             
    // 0x87f11c: r3 = ""
    //     0x87f11c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f120: b               #0x87f128
    // 0x87f124: mov             x3, x0
    // 0x87f128: mov             x0, x3
    // 0x87f12c: stur            x3, [fp, #-8]
    // 0x87f130: r2 = Null
    //     0x87f130: mov             x2, NULL
    // 0x87f134: r1 = Null
    //     0x87f134: mov             x1, NULL
    // 0x87f138: r4 = 59
    //     0x87f138: movz            x4, #0x3b
    // 0x87f13c: branchIfSmi(r0, 0x87f14c)
    //     0x87f13c: tbz             w0, #0, #0x87f14c
    //     0x87f140: nop             
    // 0x87f144: r4 = LoadClassIdInstr(r0)
    //     0x87f144: ldur            x4, [x0, #-1]
    //     0x87f148: ubfx            x4, x4, #0xc, #0x14
    // 0x87f14c: sub             x4, x4, #0x5d
    // 0x87f150: cmp             x4, #1
    // 0x87f154: b.ls            #0x87f16c
    // 0x87f158: nop             
    // 0x87f15c: r8 = String
    //     0x87f15c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f160: r3 = Null
    //     0x87f160: add             x3, PP, #0x12, lsl #12  ; [pp+0x121a0] Null
    //     0x87f164: ldr             x3, [x3, #0x1a0]
    // 0x87f168: r0 = String()
    //     0x87f168: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f16c: ldur            x1, [fp, #-8]
    // 0x87f170: r0 = LoadClassIdInstr(r1)
    //     0x87f170: ldur            x0, [x1, #-1]
    //     0x87f174: ubfx            x0, x0, #0xc, #0x14
    // 0x87f178: r16 = ""
    //     0x87f178: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f17c: stp             x16, x1, [SP]
    // 0x87f180: mov             lr, x0
    // 0x87f184: ldr             lr, [x21, lr, lsl #3]
    // 0x87f188: blr             lr
    // 0x87f18c: tbnz            w0, #4, #0x87f1a0
    // 0x87f190: nop             
    // 0x87f194: r0 = "guanMemoryBadge3PerfectPass2"
    //     0x87f194: add             x0, PP, #0x12, lsl #12  ; [pp+0x121b0] "guanMemoryBadge3PerfectPass2"
    //     0x87f198: ldr             x0, [x0, #0x1b0]
    // 0x87f19c: b               #0x8838b4
    // 0x87f1a0: ldur            x0, [fp, #-8]
    // 0x87f1a4: r1 = LoadClassIdInstr(r0)
    //     0x87f1a4: ldur            x1, [x0, #-1]
    //     0x87f1a8: ubfx            x1, x1, #0xc, #0x14
    // 0x87f1ac: r16 = "perfect"
    //     0x87f1ac: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x87f1b0: ldr             x16, [x16, #0x58]
    // 0x87f1b4: stp             x16, x0, [SP]
    // 0x87f1b8: mov             x0, x1
    // 0x87f1bc: mov             lr, x0
    // 0x87f1c0: ldr             lr, [x21, lr, lsl #3]
    // 0x87f1c4: blr             lr
    // 0x87f1c8: tbz             w0, #4, #0x87f1dc
    // 0x87f1cc: nop             
    // 0x87f1d0: r0 = "guanMemoryBadge3PerfectPass"
    //     0x87f1d0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12198] "guanMemoryBadge3PerfectPass"
    //     0x87f1d4: ldr             x0, [x0, #0x198]
    // 0x87f1d8: b               #0x8838b4
    // 0x87f1dc: r0 = "end"
    //     0x87f1dc: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87f1e0: b               #0x8838b4
    // 0x87f1e4: r16 = "guanMemoryBadge4"
    //     0x87f1e4: add             x16, PP, #0x12, lsl #12  ; [pp+0x121b8] "guanMemoryBadge4"
    //     0x87f1e8: ldr             x16, [x16, #0x1b8]
    // 0x87f1ec: ldur            lr, [fp, #-0x28]
    // 0x87f1f0: stp             lr, x16, [SP]
    // 0x87f1f4: r0 = ==()
    //     0x87f1f4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f1f8: tbnz            w0, #4, #0x87f424
    // 0x87f1fc: nop             
    // 0x87f200: r0 = LoadStaticField(0xb54)
    //     0x87f200: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f204: ldr             x0, [x0, #0x16a8]
    // 0x87f208: cmp             w0, NULL
    // 0x87f20c: b.ne            #0x87f21c
    // 0x87f210: nop             
    // 0x87f214: r0 = Null
    //     0x87f214: mov             x0, NULL
    // 0x87f218: b               #0x87f244
    // 0x87f21c: r17 = 351
    //     0x87f21c: movz            x17, #0x15f
    // 0x87f220: ldr             w1, [x0, x17]
    // 0x87f224: DecompressPointer r1
    //     0x87f224: add             x1, x1, HEAP, lsl #32
    // 0x87f228: r0 = LoadClassIdInstr(r1)
    //     0x87f228: ldur            x0, [x1, #-1]
    //     0x87f22c: ubfx            x0, x0, #0xc, #0x14
    // 0x87f230: r2 = "guanMemoryBadge4"
    //     0x87f230: add             x2, PP, #0x12, lsl #12  ; [pp+0x121b8] "guanMemoryBadge4"
    //     0x87f234: ldr             x2, [x2, #0x1b8]
    // 0x87f238: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f238: sub             lr, x0, #0xb4
    //     0x87f23c: ldr             lr, [x21, lr, lsl #3]
    //     0x87f240: blr             lr
    // 0x87f244: cmp             w0, NULL
    // 0x87f248: b.ne            #0x87f258
    // 0x87f24c: nop             
    // 0x87f250: r3 = ""
    //     0x87f250: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f254: b               #0x87f25c
    // 0x87f258: mov             x3, x0
    // 0x87f25c: mov             x0, x3
    // 0x87f260: stur            x3, [fp, #-8]
    // 0x87f264: r2 = Null
    //     0x87f264: mov             x2, NULL
    // 0x87f268: r1 = Null
    //     0x87f268: mov             x1, NULL
    // 0x87f26c: r4 = 59
    //     0x87f26c: movz            x4, #0x3b
    // 0x87f270: branchIfSmi(r0, 0x87f280)
    //     0x87f270: tbz             w0, #0, #0x87f280
    //     0x87f274: nop             
    // 0x87f278: r4 = LoadClassIdInstr(r0)
    //     0x87f278: ldur            x4, [x0, #-1]
    //     0x87f27c: ubfx            x4, x4, #0xc, #0x14
    // 0x87f280: sub             x4, x4, #0x5d
    // 0x87f284: cmp             x4, #1
    // 0x87f288: b.ls            #0x87f2a0
    // 0x87f28c: nop             
    // 0x87f290: r8 = String
    //     0x87f290: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f294: r3 = Null
    //     0x87f294: add             x3, PP, #0x12, lsl #12  ; [pp+0x121c0] Null
    //     0x87f298: ldr             x3, [x3, #0x1c0]
    // 0x87f29c: r0 = String()
    //     0x87f29c: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f2a0: r0 = LoadStaticField(0xb54)
    //     0x87f2a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f2a4: ldr             x0, [x0, #0x16a8]
    // 0x87f2a8: cmp             w0, NULL
    // 0x87f2ac: b.ne            #0x87f2bc
    // 0x87f2b0: nop             
    // 0x87f2b4: r0 = Null
    //     0x87f2b4: mov             x0, NULL
    // 0x87f2b8: b               #0x87f2e4
    // 0x87f2bc: r17 = 351
    //     0x87f2bc: movz            x17, #0x15f
    // 0x87f2c0: ldr             w1, [x0, x17]
    // 0x87f2c4: DecompressPointer r1
    //     0x87f2c4: add             x1, x1, HEAP, lsl #32
    // 0x87f2c8: r0 = LoadClassIdInstr(r1)
    //     0x87f2c8: ldur            x0, [x1, #-1]
    //     0x87f2cc: ubfx            x0, x0, #0xc, #0x14
    // 0x87f2d0: r2 = "guanMemoryBadge4Pass"
    //     0x87f2d0: add             x2, PP, #0x12, lsl #12  ; [pp+0x121d0] "guanMemoryBadge4Pass"
    //     0x87f2d4: ldr             x2, [x2, #0x1d0]
    // 0x87f2d8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f2d8: sub             lr, x0, #0xb4
    //     0x87f2dc: ldr             lr, [x21, lr, lsl #3]
    //     0x87f2e0: blr             lr
    // 0x87f2e4: cmp             w0, NULL
    // 0x87f2e8: b.ne            #0x87f2f8
    // 0x87f2ec: nop             
    // 0x87f2f0: r4 = ""
    //     0x87f2f0: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f2f4: b               #0x87f2fc
    // 0x87f2f8: mov             x4, x0
    // 0x87f2fc: ldur            x3, [fp, #-8]
    // 0x87f300: mov             x0, x4
    // 0x87f304: stur            x4, [fp, #-0x10]
    // 0x87f308: r2 = Null
    //     0x87f308: mov             x2, NULL
    // 0x87f30c: r1 = Null
    //     0x87f30c: mov             x1, NULL
    // 0x87f310: r4 = 59
    //     0x87f310: movz            x4, #0x3b
    // 0x87f314: branchIfSmi(r0, 0x87f324)
    //     0x87f314: tbz             w0, #0, #0x87f324
    //     0x87f318: nop             
    // 0x87f31c: r4 = LoadClassIdInstr(r0)
    //     0x87f31c: ldur            x4, [x0, #-1]
    //     0x87f320: ubfx            x4, x4, #0xc, #0x14
    // 0x87f324: sub             x4, x4, #0x5d
    // 0x87f328: cmp             x4, #1
    // 0x87f32c: b.ls            #0x87f344
    // 0x87f330: nop             
    // 0x87f334: r8 = String
    //     0x87f334: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f338: r3 = Null
    //     0x87f338: add             x3, PP, #0x12, lsl #12  ; [pp+0x121d8] Null
    //     0x87f33c: ldr             x3, [x3, #0x1d8]
    // 0x87f340: r0 = String()
    //     0x87f340: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f344: ldur            x1, [fp, #-8]
    // 0x87f348: r0 = LoadClassIdInstr(r1)
    //     0x87f348: ldur            x0, [x1, #-1]
    //     0x87f34c: ubfx            x0, x0, #0xc, #0x14
    // 0x87f350: r16 = ""
    //     0x87f350: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f354: stp             x16, x1, [SP]
    // 0x87f358: mov             lr, x0
    // 0x87f35c: ldr             lr, [x21, lr, lsl #3]
    // 0x87f360: blr             lr
    // 0x87f364: tbnz            w0, #4, #0x87f378
    // 0x87f368: nop             
    // 0x87f36c: r0 = "badge1"
    //     0x87f36c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f98] "badge1"
    //     0x87f370: ldr             x0, [x0, #0xf98]
    // 0x87f374: b               #0x8838b4
    // 0x87f378: ldur            x1, [fp, #-8]
    // 0x87f37c: r0 = LoadClassIdInstr(r1)
    //     0x87f37c: ldur            x0, [x1, #-1]
    //     0x87f380: ubfx            x0, x0, #0xc, #0x14
    // 0x87f384: r16 = "1"
    //     0x87f384: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87f388: ldr             x16, [x16, #0x6a0]
    // 0x87f38c: stp             x16, x1, [SP]
    // 0x87f390: mov             lr, x0
    // 0x87f394: ldr             lr, [x21, lr, lsl #3]
    // 0x87f398: blr             lr
    // 0x87f39c: tbnz            w0, #4, #0x87f3dc
    // 0x87f3a0: nop             
    // 0x87f3a4: ldur            x0, [fp, #-0x10]
    // 0x87f3a8: r1 = LoadClassIdInstr(r0)
    //     0x87f3a8: ldur            x1, [x0, #-1]
    //     0x87f3ac: ubfx            x1, x1, #0xc, #0x14
    // 0x87f3b0: r16 = ""
    //     0x87f3b0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f3b4: stp             x16, x0, [SP]
    // 0x87f3b8: mov             x0, x1
    // 0x87f3bc: mov             lr, x0
    // 0x87f3c0: ldr             lr, [x21, lr, lsl #3]
    // 0x87f3c4: blr             lr
    // 0x87f3c8: tbnz            w0, #4, #0x87f3dc
    // 0x87f3cc: nop             
    // 0x87f3d0: r0 = "badge2"
    //     0x87f3d0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa0] "badge2"
    //     0x87f3d4: ldr             x0, [x0, #0xfa0]
    // 0x87f3d8: b               #0x8838b4
    // 0x87f3dc: ldur            x0, [fp, #-8]
    // 0x87f3e0: r1 = LoadClassIdInstr(r0)
    //     0x87f3e0: ldur            x1, [x0, #-1]
    //     0x87f3e4: ubfx            x1, x1, #0xc, #0x14
    // 0x87f3e8: r16 = "2"
    //     0x87f3e8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87f3ec: ldr             x16, [x16, #0x6a8]
    // 0x87f3f0: stp             x16, x0, [SP]
    // 0x87f3f4: mov             x0, x1
    // 0x87f3f8: mov             lr, x0
    // 0x87f3fc: ldr             lr, [x21, lr, lsl #3]
    // 0x87f400: blr             lr
    // 0x87f404: tbnz            w0, #4, #0x87f418
    // 0x87f408: nop             
    // 0x87f40c: r0 = "badge4"
    //     0x87f40c: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa8] "badge4"
    //     0x87f410: ldr             x0, [x0, #0xfa8]
    // 0x87f414: b               #0x8838b4
    // 0x87f418: r0 = "badge3"
    //     0x87f418: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fb0] "badge3"
    //     0x87f41c: ldr             x0, [x0, #0xfb0]
    // 0x87f420: b               #0x8838b4
    // 0x87f424: r16 = "guanMemoryBadge4Choice"
    //     0x87f424: add             x16, PP, #0x12, lsl #12  ; [pp+0x121e8] "guanMemoryBadge4Choice"
    //     0x87f428: ldr             x16, [x16, #0x1e8]
    // 0x87f42c: ldur            lr, [fp, #-0x28]
    // 0x87f430: stp             lr, x16, [SP]
    // 0x87f434: r0 = ==()
    //     0x87f434: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f438: tbnz            w0, #4, #0x87f5f8
    // 0x87f43c: nop             
    // 0x87f440: r0 = LoadStaticField(0xb54)
    //     0x87f440: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f444: ldr             x0, [x0, #0x16a8]
    // 0x87f448: cmp             w0, NULL
    // 0x87f44c: b.ne            #0x87f45c
    // 0x87f450: nop             
    // 0x87f454: r0 = Null
    //     0x87f454: mov             x0, NULL
    // 0x87f458: b               #0x87f484
    // 0x87f45c: r17 = 351
    //     0x87f45c: movz            x17, #0x15f
    // 0x87f460: ldr             w1, [x0, x17]
    // 0x87f464: DecompressPointer r1
    //     0x87f464: add             x1, x1, HEAP, lsl #32
    // 0x87f468: r0 = LoadClassIdInstr(r1)
    //     0x87f468: ldur            x0, [x1, #-1]
    //     0x87f46c: ubfx            x0, x0, #0xc, #0x14
    // 0x87f470: r2 = "guanMemoryBadge4"
    //     0x87f470: add             x2, PP, #0x12, lsl #12  ; [pp+0x121b8] "guanMemoryBadge4"
    //     0x87f474: ldr             x2, [x2, #0x1b8]
    // 0x87f478: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f478: sub             lr, x0, #0xb4
    //     0x87f47c: ldr             lr, [x21, lr, lsl #3]
    //     0x87f480: blr             lr
    // 0x87f484: cmp             w0, NULL
    // 0x87f488: b.ne            #0x87f498
    // 0x87f48c: nop             
    // 0x87f490: r3 = ""
    //     0x87f490: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f494: b               #0x87f49c
    // 0x87f498: mov             x3, x0
    // 0x87f49c: mov             x0, x3
    // 0x87f4a0: stur            x3, [fp, #-8]
    // 0x87f4a4: r2 = Null
    //     0x87f4a4: mov             x2, NULL
    // 0x87f4a8: r1 = Null
    //     0x87f4a8: mov             x1, NULL
    // 0x87f4ac: r4 = 59
    //     0x87f4ac: movz            x4, #0x3b
    // 0x87f4b0: branchIfSmi(r0, 0x87f4c0)
    //     0x87f4b0: tbz             w0, #0, #0x87f4c0
    //     0x87f4b4: nop             
    // 0x87f4b8: r4 = LoadClassIdInstr(r0)
    //     0x87f4b8: ldur            x4, [x0, #-1]
    //     0x87f4bc: ubfx            x4, x4, #0xc, #0x14
    // 0x87f4c0: sub             x4, x4, #0x5d
    // 0x87f4c4: cmp             x4, #1
    // 0x87f4c8: b.ls            #0x87f4e0
    // 0x87f4cc: nop             
    // 0x87f4d0: r8 = String
    //     0x87f4d0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f4d4: r3 = Null
    //     0x87f4d4: add             x3, PP, #0x12, lsl #12  ; [pp+0x121f0] Null
    //     0x87f4d8: ldr             x3, [x3, #0x1f0]
    // 0x87f4dc: r0 = String()
    //     0x87f4dc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f4e0: r0 = LoadStaticField(0xb54)
    //     0x87f4e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f4e4: ldr             x0, [x0, #0x16a8]
    // 0x87f4e8: cmp             w0, NULL
    // 0x87f4ec: b.ne            #0x87f4fc
    // 0x87f4f0: nop             
    // 0x87f4f4: r0 = Null
    //     0x87f4f4: mov             x0, NULL
    // 0x87f4f8: b               #0x87f524
    // 0x87f4fc: r17 = 351
    //     0x87f4fc: movz            x17, #0x15f
    // 0x87f500: ldr             w1, [x0, x17]
    // 0x87f504: DecompressPointer r1
    //     0x87f504: add             x1, x1, HEAP, lsl #32
    // 0x87f508: r0 = LoadClassIdInstr(r1)
    //     0x87f508: ldur            x0, [x1, #-1]
    //     0x87f50c: ubfx            x0, x0, #0xc, #0x14
    // 0x87f510: r2 = "guanMemoryBadge4Pass"
    //     0x87f510: add             x2, PP, #0x12, lsl #12  ; [pp+0x121d0] "guanMemoryBadge4Pass"
    //     0x87f514: ldr             x2, [x2, #0x1d0]
    // 0x87f518: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f518: sub             lr, x0, #0xb4
    //     0x87f51c: ldr             lr, [x21, lr, lsl #3]
    //     0x87f520: blr             lr
    // 0x87f524: cmp             w0, NULL
    // 0x87f528: b.ne            #0x87f538
    // 0x87f52c: nop             
    // 0x87f530: r4 = ""
    //     0x87f530: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f534: b               #0x87f53c
    // 0x87f538: mov             x4, x0
    // 0x87f53c: ldur            x3, [fp, #-8]
    // 0x87f540: mov             x0, x4
    // 0x87f544: stur            x4, [fp, #-0x10]
    // 0x87f548: r2 = Null
    //     0x87f548: mov             x2, NULL
    // 0x87f54c: r1 = Null
    //     0x87f54c: mov             x1, NULL
    // 0x87f550: r4 = 59
    //     0x87f550: movz            x4, #0x3b
    // 0x87f554: branchIfSmi(r0, 0x87f564)
    //     0x87f554: tbz             w0, #0, #0x87f564
    //     0x87f558: nop             
    // 0x87f55c: r4 = LoadClassIdInstr(r0)
    //     0x87f55c: ldur            x4, [x0, #-1]
    //     0x87f560: ubfx            x4, x4, #0xc, #0x14
    // 0x87f564: sub             x4, x4, #0x5d
    // 0x87f568: cmp             x4, #1
    // 0x87f56c: b.ls            #0x87f584
    // 0x87f570: nop             
    // 0x87f574: r8 = String
    //     0x87f574: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f578: r3 = Null
    //     0x87f578: add             x3, PP, #0x12, lsl #12  ; [pp+0x12200] Null
    //     0x87f57c: ldr             x3, [x3, #0x200]
    // 0x87f580: r0 = String()
    //     0x87f580: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f584: ldur            x0, [fp, #-8]
    // 0x87f588: r1 = LoadClassIdInstr(r0)
    //     0x87f588: ldur            x1, [x0, #-1]
    //     0x87f58c: ubfx            x1, x1, #0xc, #0x14
    // 0x87f590: r16 = "1"
    //     0x87f590: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87f594: ldr             x16, [x16, #0x6a0]
    // 0x87f598: stp             x16, x0, [SP]
    // 0x87f59c: mov             x0, x1
    // 0x87f5a0: mov             lr, x0
    // 0x87f5a4: ldr             lr, [x21, lr, lsl #3]
    // 0x87f5a8: blr             lr
    // 0x87f5ac: tbnz            w0, #4, #0x87f5ec
    // 0x87f5b0: nop             
    // 0x87f5b4: ldur            x0, [fp, #-0x10]
    // 0x87f5b8: r1 = LoadClassIdInstr(r0)
    //     0x87f5b8: ldur            x1, [x0, #-1]
    //     0x87f5bc: ubfx            x1, x1, #0xc, #0x14
    // 0x87f5c0: r16 = ""
    //     0x87f5c0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f5c4: stp             x16, x0, [SP]
    // 0x87f5c8: mov             x0, x1
    // 0x87f5cc: mov             lr, x0
    // 0x87f5d0: ldr             lr, [x21, lr, lsl #3]
    // 0x87f5d4: blr             lr
    // 0x87f5d8: tbz             w0, #4, #0x87f5ec
    // 0x87f5dc: nop             
    // 0x87f5e0: r0 = "afterChoice"
    //     0x87f5e0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe0] "afterChoice"
    //     0x87f5e4: ldr             x0, [x0, #0xfe0]
    // 0x87f5e8: b               #0x8838b4
    // 0x87f5ec: r0 = "beforeChoice"
    //     0x87f5ec: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe8] "beforeChoice"
    //     0x87f5f0: ldr             x0, [x0, #0xfe8]
    // 0x87f5f4: b               #0x8838b4
    // 0x87f5f8: r16 = "guanMemoryMiniGame4"
    //     0x87f5f8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12210] "guanMemoryMiniGame4"
    //     0x87f5fc: ldr             x16, [x16, #0x210]
    // 0x87f600: ldur            lr, [fp, #-0x28]
    // 0x87f604: stp             lr, x16, [SP]
    // 0x87f608: r0 = ==()
    //     0x87f608: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f60c: tbnz            w0, #4, #0x87f6fc
    // 0x87f610: nop             
    // 0x87f614: r0 = LoadStaticField(0xb54)
    //     0x87f614: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f618: ldr             x0, [x0, #0x16a8]
    // 0x87f61c: cmp             w0, NULL
    // 0x87f620: b.ne            #0x87f630
    // 0x87f624: nop             
    // 0x87f628: r0 = Null
    //     0x87f628: mov             x0, NULL
    // 0x87f62c: b               #0x87f658
    // 0x87f630: r17 = 351
    //     0x87f630: movz            x17, #0x15f
    // 0x87f634: ldr             w1, [x0, x17]
    // 0x87f638: DecompressPointer r1
    //     0x87f638: add             x1, x1, HEAP, lsl #32
    // 0x87f63c: r0 = LoadClassIdInstr(r1)
    //     0x87f63c: ldur            x0, [x1, #-1]
    //     0x87f640: ubfx            x0, x0, #0xc, #0x14
    // 0x87f644: r2 = "guanMemoryOptional4"
    //     0x87f644: add             x2, PP, #0x12, lsl #12  ; [pp+0x12218] "guanMemoryOptional4"
    //     0x87f648: ldr             x2, [x2, #0x218]
    // 0x87f64c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f64c: sub             lr, x0, #0xb4
    //     0x87f650: ldr             lr, [x21, lr, lsl #3]
    //     0x87f654: blr             lr
    // 0x87f658: cmp             w0, NULL
    // 0x87f65c: b.ne            #0x87f66c
    // 0x87f660: nop             
    // 0x87f664: r3 = ""
    //     0x87f664: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f668: b               #0x87f670
    // 0x87f66c: mov             x3, x0
    // 0x87f670: mov             x0, x3
    // 0x87f674: stur            x3, [fp, #-8]
    // 0x87f678: r2 = Null
    //     0x87f678: mov             x2, NULL
    // 0x87f67c: r1 = Null
    //     0x87f67c: mov             x1, NULL
    // 0x87f680: r4 = 59
    //     0x87f680: movz            x4, #0x3b
    // 0x87f684: branchIfSmi(r0, 0x87f694)
    //     0x87f684: tbz             w0, #0, #0x87f694
    //     0x87f688: nop             
    // 0x87f68c: r4 = LoadClassIdInstr(r0)
    //     0x87f68c: ldur            x4, [x0, #-1]
    //     0x87f690: ubfx            x4, x4, #0xc, #0x14
    // 0x87f694: sub             x4, x4, #0x5d
    // 0x87f698: cmp             x4, #1
    // 0x87f69c: b.ls            #0x87f6b4
    // 0x87f6a0: nop             
    // 0x87f6a4: r8 = String
    //     0x87f6a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f6a8: r3 = Null
    //     0x87f6a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12220] Null
    //     0x87f6ac: ldr             x3, [x3, #0x220]
    // 0x87f6b0: r0 = String()
    //     0x87f6b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f6b4: ldur            x0, [fp, #-8]
    // 0x87f6b8: r1 = LoadClassIdInstr(r0)
    //     0x87f6b8: ldur            x1, [x0, #-1]
    //     0x87f6bc: ubfx            x1, x1, #0xc, #0x14
    // 0x87f6c0: r16 = "complete"
    //     0x87f6c0: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87f6c4: ldr             x16, [x16, #0x590]
    // 0x87f6c8: stp             x16, x0, [SP]
    // 0x87f6cc: mov             x0, x1
    // 0x87f6d0: mov             lr, x0
    // 0x87f6d4: ldr             lr, [x21, lr, lsl #3]
    // 0x87f6d8: blr             lr
    // 0x87f6dc: tbnz            w0, #4, #0x87f6f0
    // 0x87f6e0: nop             
    // 0x87f6e4: r0 = "cheatGame"
    //     0x87f6e4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12010] "cheatGame"
    //     0x87f6e8: ldr             x0, [x0, #0x10]
    // 0x87f6ec: b               #0x8838b4
    // 0x87f6f0: r0 = "normalGame"
    //     0x87f6f0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12018] "normalGame"
    //     0x87f6f4: ldr             x0, [x0, #0x18]
    // 0x87f6f8: b               #0x8838b4
    // 0x87f6fc: r16 = "guanMemoryBadge4NormalPass"
    //     0x87f6fc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12230] "guanMemoryBadge4NormalPass"
    //     0x87f700: ldr             x16, [x16, #0x230]
    // 0x87f704: ldur            lr, [fp, #-0x28]
    // 0x87f708: stp             lr, x16, [SP]
    // 0x87f70c: r0 = ==()
    //     0x87f70c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f710: tbnz            w0, #4, #0x87f7f8
    // 0x87f714: nop             
    // 0x87f718: r0 = LoadStaticField(0xb54)
    //     0x87f718: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f71c: ldr             x0, [x0, #0x16a8]
    // 0x87f720: cmp             w0, NULL
    // 0x87f724: b.ne            #0x87f734
    // 0x87f728: nop             
    // 0x87f72c: r0 = Null
    //     0x87f72c: mov             x0, NULL
    // 0x87f730: b               #0x87f75c
    // 0x87f734: r17 = 351
    //     0x87f734: movz            x17, #0x15f
    // 0x87f738: ldr             w1, [x0, x17]
    // 0x87f73c: DecompressPointer r1
    //     0x87f73c: add             x1, x1, HEAP, lsl #32
    // 0x87f740: r0 = LoadClassIdInstr(r1)
    //     0x87f740: ldur            x0, [x1, #-1]
    //     0x87f744: ubfx            x0, x0, #0xc, #0x14
    // 0x87f748: r2 = "guanMemoryBadge4Pass"
    //     0x87f748: add             x2, PP, #0x12, lsl #12  ; [pp+0x121d0] "guanMemoryBadge4Pass"
    //     0x87f74c: ldr             x2, [x2, #0x1d0]
    // 0x87f750: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f750: sub             lr, x0, #0xb4
    //     0x87f754: ldr             lr, [x21, lr, lsl #3]
    //     0x87f758: blr             lr
    // 0x87f75c: cmp             w0, NULL
    // 0x87f760: b.ne            #0x87f770
    // 0x87f764: nop             
    // 0x87f768: r3 = ""
    //     0x87f768: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f76c: b               #0x87f774
    // 0x87f770: mov             x3, x0
    // 0x87f774: mov             x0, x3
    // 0x87f778: stur            x3, [fp, #-8]
    // 0x87f77c: r2 = Null
    //     0x87f77c: mov             x2, NULL
    // 0x87f780: r1 = Null
    //     0x87f780: mov             x1, NULL
    // 0x87f784: r4 = 59
    //     0x87f784: movz            x4, #0x3b
    // 0x87f788: branchIfSmi(r0, 0x87f798)
    //     0x87f788: tbz             w0, #0, #0x87f798
    //     0x87f78c: nop             
    // 0x87f790: r4 = LoadClassIdInstr(r0)
    //     0x87f790: ldur            x4, [x0, #-1]
    //     0x87f794: ubfx            x4, x4, #0xc, #0x14
    // 0x87f798: sub             x4, x4, #0x5d
    // 0x87f79c: cmp             x4, #1
    // 0x87f7a0: b.ls            #0x87f7b8
    // 0x87f7a4: nop             
    // 0x87f7a8: r8 = String
    //     0x87f7a8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f7ac: r3 = Null
    //     0x87f7ac: add             x3, PP, #0x12, lsl #12  ; [pp+0x12238] Null
    //     0x87f7b0: ldr             x3, [x3, #0x238]
    // 0x87f7b4: r0 = String()
    //     0x87f7b4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f7b8: ldur            x0, [fp, #-8]
    // 0x87f7bc: r1 = LoadClassIdInstr(r0)
    //     0x87f7bc: ldur            x1, [x0, #-1]
    //     0x87f7c0: ubfx            x1, x1, #0xc, #0x14
    // 0x87f7c4: r16 = ""
    //     0x87f7c4: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f7c8: stp             x16, x0, [SP]
    // 0x87f7cc: mov             x0, x1
    // 0x87f7d0: mov             lr, x0
    // 0x87f7d4: ldr             lr, [x21, lr, lsl #3]
    // 0x87f7d8: blr             lr
    // 0x87f7dc: tbnz            w0, #4, #0x87f7f0
    // 0x87f7e0: nop             
    // 0x87f7e4: r0 = "guanMemoryBadge4NormalPass"
    //     0x87f7e4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12230] "guanMemoryBadge4NormalPass"
    //     0x87f7e8: ldr             x0, [x0, #0x230]
    // 0x87f7ec: b               #0x8838b4
    // 0x87f7f0: r0 = "end"
    //     0x87f7f0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87f7f4: b               #0x8838b4
    // 0x87f7f8: r16 = "guanMemoryBadge4PerfectPass"
    //     0x87f7f8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12248] "guanMemoryBadge4PerfectPass"
    //     0x87f7fc: ldr             x16, [x16, #0x248]
    // 0x87f800: ldur            lr, [fp, #-0x28]
    // 0x87f804: stp             lr, x16, [SP]
    // 0x87f808: r0 = ==()
    //     0x87f808: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f80c: tbnz            w0, #4, #0x87f92c
    // 0x87f810: nop             
    // 0x87f814: r0 = LoadStaticField(0xb54)
    //     0x87f814: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f818: ldr             x0, [x0, #0x16a8]
    // 0x87f81c: cmp             w0, NULL
    // 0x87f820: b.ne            #0x87f830
    // 0x87f824: nop             
    // 0x87f828: r0 = Null
    //     0x87f828: mov             x0, NULL
    // 0x87f82c: b               #0x87f858
    // 0x87f830: r17 = 351
    //     0x87f830: movz            x17, #0x15f
    // 0x87f834: ldr             w1, [x0, x17]
    // 0x87f838: DecompressPointer r1
    //     0x87f838: add             x1, x1, HEAP, lsl #32
    // 0x87f83c: r0 = LoadClassIdInstr(r1)
    //     0x87f83c: ldur            x0, [x1, #-1]
    //     0x87f840: ubfx            x0, x0, #0xc, #0x14
    // 0x87f844: r2 = "guanMemoryBadge4Pass"
    //     0x87f844: add             x2, PP, #0x12, lsl #12  ; [pp+0x121d0] "guanMemoryBadge4Pass"
    //     0x87f848: ldr             x2, [x2, #0x1d0]
    // 0x87f84c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f84c: sub             lr, x0, #0xb4
    //     0x87f850: ldr             lr, [x21, lr, lsl #3]
    //     0x87f854: blr             lr
    // 0x87f858: cmp             w0, NULL
    // 0x87f85c: b.ne            #0x87f86c
    // 0x87f860: nop             
    // 0x87f864: r3 = ""
    //     0x87f864: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f868: b               #0x87f870
    // 0x87f86c: mov             x3, x0
    // 0x87f870: mov             x0, x3
    // 0x87f874: stur            x3, [fp, #-8]
    // 0x87f878: r2 = Null
    //     0x87f878: mov             x2, NULL
    // 0x87f87c: r1 = Null
    //     0x87f87c: mov             x1, NULL
    // 0x87f880: r4 = 59
    //     0x87f880: movz            x4, #0x3b
    // 0x87f884: branchIfSmi(r0, 0x87f894)
    //     0x87f884: tbz             w0, #0, #0x87f894
    //     0x87f888: nop             
    // 0x87f88c: r4 = LoadClassIdInstr(r0)
    //     0x87f88c: ldur            x4, [x0, #-1]
    //     0x87f890: ubfx            x4, x4, #0xc, #0x14
    // 0x87f894: sub             x4, x4, #0x5d
    // 0x87f898: cmp             x4, #1
    // 0x87f89c: b.ls            #0x87f8b4
    // 0x87f8a0: nop             
    // 0x87f8a4: r8 = String
    //     0x87f8a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f8a8: r3 = Null
    //     0x87f8a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12250] Null
    //     0x87f8ac: ldr             x3, [x3, #0x250]
    // 0x87f8b0: r0 = String()
    //     0x87f8b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f8b4: ldur            x1, [fp, #-8]
    // 0x87f8b8: r0 = LoadClassIdInstr(r1)
    //     0x87f8b8: ldur            x0, [x1, #-1]
    //     0x87f8bc: ubfx            x0, x0, #0xc, #0x14
    // 0x87f8c0: r16 = ""
    //     0x87f8c0: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f8c4: stp             x16, x1, [SP]
    // 0x87f8c8: mov             lr, x0
    // 0x87f8cc: ldr             lr, [x21, lr, lsl #3]
    // 0x87f8d0: blr             lr
    // 0x87f8d4: tbnz            w0, #4, #0x87f8e8
    // 0x87f8d8: nop             
    // 0x87f8dc: r0 = "guanMemoryBadge4PerfectPass2"
    //     0x87f8dc: add             x0, PP, #0x12, lsl #12  ; [pp+0x12260] "guanMemoryBadge4PerfectPass2"
    //     0x87f8e0: ldr             x0, [x0, #0x260]
    // 0x87f8e4: b               #0x8838b4
    // 0x87f8e8: ldur            x0, [fp, #-8]
    // 0x87f8ec: r1 = LoadClassIdInstr(r0)
    //     0x87f8ec: ldur            x1, [x0, #-1]
    //     0x87f8f0: ubfx            x1, x1, #0xc, #0x14
    // 0x87f8f4: r16 = "perfect"
    //     0x87f8f4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x87f8f8: ldr             x16, [x16, #0x58]
    // 0x87f8fc: stp             x16, x0, [SP]
    // 0x87f900: mov             x0, x1
    // 0x87f904: mov             lr, x0
    // 0x87f908: ldr             lr, [x21, lr, lsl #3]
    // 0x87f90c: blr             lr
    // 0x87f910: tbz             w0, #4, #0x87f924
    // 0x87f914: nop             
    // 0x87f918: r0 = "guanMemoryBadge4PerfectPass"
    //     0x87f918: add             x0, PP, #0x12, lsl #12  ; [pp+0x12248] "guanMemoryBadge4PerfectPass"
    //     0x87f91c: ldr             x0, [x0, #0x248]
    // 0x87f920: b               #0x8838b4
    // 0x87f924: r0 = "end"
    //     0x87f924: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87f928: b               #0x8838b4
    // 0x87f92c: r16 = "guanMemoryBadge5"
    //     0x87f92c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12268] "guanMemoryBadge5"
    //     0x87f930: ldr             x16, [x16, #0x268]
    // 0x87f934: ldur            lr, [fp, #-0x28]
    // 0x87f938: stp             lr, x16, [SP]
    // 0x87f93c: r0 = ==()
    //     0x87f93c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87f940: tbnz            w0, #4, #0x87fb6c
    // 0x87f944: nop             
    // 0x87f948: r0 = LoadStaticField(0xb54)
    //     0x87f948: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f94c: ldr             x0, [x0, #0x16a8]
    // 0x87f950: cmp             w0, NULL
    // 0x87f954: b.ne            #0x87f964
    // 0x87f958: nop             
    // 0x87f95c: r0 = Null
    //     0x87f95c: mov             x0, NULL
    // 0x87f960: b               #0x87f98c
    // 0x87f964: r17 = 351
    //     0x87f964: movz            x17, #0x15f
    // 0x87f968: ldr             w1, [x0, x17]
    // 0x87f96c: DecompressPointer r1
    //     0x87f96c: add             x1, x1, HEAP, lsl #32
    // 0x87f970: r0 = LoadClassIdInstr(r1)
    //     0x87f970: ldur            x0, [x1, #-1]
    //     0x87f974: ubfx            x0, x0, #0xc, #0x14
    // 0x87f978: r2 = "guanMemoryBadge5"
    //     0x87f978: add             x2, PP, #0x12, lsl #12  ; [pp+0x12268] "guanMemoryBadge5"
    //     0x87f97c: ldr             x2, [x2, #0x268]
    // 0x87f980: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87f980: sub             lr, x0, #0xb4
    //     0x87f984: ldr             lr, [x21, lr, lsl #3]
    //     0x87f988: blr             lr
    // 0x87f98c: cmp             w0, NULL
    // 0x87f990: b.ne            #0x87f9a0
    // 0x87f994: nop             
    // 0x87f998: r3 = ""
    //     0x87f998: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87f99c: b               #0x87f9a4
    // 0x87f9a0: mov             x3, x0
    // 0x87f9a4: mov             x0, x3
    // 0x87f9a8: stur            x3, [fp, #-8]
    // 0x87f9ac: r2 = Null
    //     0x87f9ac: mov             x2, NULL
    // 0x87f9b0: r1 = Null
    //     0x87f9b0: mov             x1, NULL
    // 0x87f9b4: r4 = 59
    //     0x87f9b4: movz            x4, #0x3b
    // 0x87f9b8: branchIfSmi(r0, 0x87f9c8)
    //     0x87f9b8: tbz             w0, #0, #0x87f9c8
    //     0x87f9bc: nop             
    // 0x87f9c0: r4 = LoadClassIdInstr(r0)
    //     0x87f9c0: ldur            x4, [x0, #-1]
    //     0x87f9c4: ubfx            x4, x4, #0xc, #0x14
    // 0x87f9c8: sub             x4, x4, #0x5d
    // 0x87f9cc: cmp             x4, #1
    // 0x87f9d0: b.ls            #0x87f9e8
    // 0x87f9d4: nop             
    // 0x87f9d8: r8 = String
    //     0x87f9d8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87f9dc: r3 = Null
    //     0x87f9dc: add             x3, PP, #0x12, lsl #12  ; [pp+0x12270] Null
    //     0x87f9e0: ldr             x3, [x3, #0x270]
    // 0x87f9e4: r0 = String()
    //     0x87f9e4: bl              #0x1523244  ; IsType_String_Stub
    // 0x87f9e8: r0 = LoadStaticField(0xb54)
    //     0x87f9e8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87f9ec: ldr             x0, [x0, #0x16a8]
    // 0x87f9f0: cmp             w0, NULL
    // 0x87f9f4: b.ne            #0x87fa04
    // 0x87f9f8: nop             
    // 0x87f9fc: r0 = Null
    //     0x87f9fc: mov             x0, NULL
    // 0x87fa00: b               #0x87fa2c
    // 0x87fa04: r17 = 351
    //     0x87fa04: movz            x17, #0x15f
    // 0x87fa08: ldr             w1, [x0, x17]
    // 0x87fa0c: DecompressPointer r1
    //     0x87fa0c: add             x1, x1, HEAP, lsl #32
    // 0x87fa10: r0 = LoadClassIdInstr(r1)
    //     0x87fa10: ldur            x0, [x1, #-1]
    //     0x87fa14: ubfx            x0, x0, #0xc, #0x14
    // 0x87fa18: r2 = "guanMemoryBadge5Pass"
    //     0x87fa18: add             x2, PP, #0x12, lsl #12  ; [pp+0x12280] "guanMemoryBadge5Pass"
    //     0x87fa1c: ldr             x2, [x2, #0x280]
    // 0x87fa20: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87fa20: sub             lr, x0, #0xb4
    //     0x87fa24: ldr             lr, [x21, lr, lsl #3]
    //     0x87fa28: blr             lr
    // 0x87fa2c: cmp             w0, NULL
    // 0x87fa30: b.ne            #0x87fa40
    // 0x87fa34: nop             
    // 0x87fa38: r4 = ""
    //     0x87fa38: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fa3c: b               #0x87fa44
    // 0x87fa40: mov             x4, x0
    // 0x87fa44: ldur            x3, [fp, #-8]
    // 0x87fa48: mov             x0, x4
    // 0x87fa4c: stur            x4, [fp, #-0x10]
    // 0x87fa50: r2 = Null
    //     0x87fa50: mov             x2, NULL
    // 0x87fa54: r1 = Null
    //     0x87fa54: mov             x1, NULL
    // 0x87fa58: r4 = 59
    //     0x87fa58: movz            x4, #0x3b
    // 0x87fa5c: branchIfSmi(r0, 0x87fa6c)
    //     0x87fa5c: tbz             w0, #0, #0x87fa6c
    //     0x87fa60: nop             
    // 0x87fa64: r4 = LoadClassIdInstr(r0)
    //     0x87fa64: ldur            x4, [x0, #-1]
    //     0x87fa68: ubfx            x4, x4, #0xc, #0x14
    // 0x87fa6c: sub             x4, x4, #0x5d
    // 0x87fa70: cmp             x4, #1
    // 0x87fa74: b.ls            #0x87fa8c
    // 0x87fa78: nop             
    // 0x87fa7c: r8 = String
    //     0x87fa7c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fa80: r3 = Null
    //     0x87fa80: add             x3, PP, #0x12, lsl #12  ; [pp+0x12288] Null
    //     0x87fa84: ldr             x3, [x3, #0x288]
    // 0x87fa88: r0 = String()
    //     0x87fa88: bl              #0x1523244  ; IsType_String_Stub
    // 0x87fa8c: ldur            x1, [fp, #-8]
    // 0x87fa90: r0 = LoadClassIdInstr(r1)
    //     0x87fa90: ldur            x0, [x1, #-1]
    //     0x87fa94: ubfx            x0, x0, #0xc, #0x14
    // 0x87fa98: r16 = ""
    //     0x87fa98: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fa9c: stp             x16, x1, [SP]
    // 0x87faa0: mov             lr, x0
    // 0x87faa4: ldr             lr, [x21, lr, lsl #3]
    // 0x87faa8: blr             lr
    // 0x87faac: tbnz            w0, #4, #0x87fac0
    // 0x87fab0: nop             
    // 0x87fab4: r0 = "badge1"
    //     0x87fab4: add             x0, PP, #0x11, lsl #12  ; [pp+0x11f98] "badge1"
    //     0x87fab8: ldr             x0, [x0, #0xf98]
    // 0x87fabc: b               #0x8838b4
    // 0x87fac0: ldur            x1, [fp, #-8]
    // 0x87fac4: r0 = LoadClassIdInstr(r1)
    //     0x87fac4: ldur            x0, [x1, #-1]
    //     0x87fac8: ubfx            x0, x0, #0xc, #0x14
    // 0x87facc: r16 = "1"
    //     0x87facc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87fad0: ldr             x16, [x16, #0x6a0]
    // 0x87fad4: stp             x16, x1, [SP]
    // 0x87fad8: mov             lr, x0
    // 0x87fadc: ldr             lr, [x21, lr, lsl #3]
    // 0x87fae0: blr             lr
    // 0x87fae4: tbnz            w0, #4, #0x87fb24
    // 0x87fae8: nop             
    // 0x87faec: ldur            x0, [fp, #-0x10]
    // 0x87faf0: r1 = LoadClassIdInstr(r0)
    //     0x87faf0: ldur            x1, [x0, #-1]
    //     0x87faf4: ubfx            x1, x1, #0xc, #0x14
    // 0x87faf8: r16 = ""
    //     0x87faf8: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fafc: stp             x16, x0, [SP]
    // 0x87fb00: mov             x0, x1
    // 0x87fb04: mov             lr, x0
    // 0x87fb08: ldr             lr, [x21, lr, lsl #3]
    // 0x87fb0c: blr             lr
    // 0x87fb10: tbnz            w0, #4, #0x87fb24
    // 0x87fb14: nop             
    // 0x87fb18: r0 = "badge2"
    //     0x87fb18: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa0] "badge2"
    //     0x87fb1c: ldr             x0, [x0, #0xfa0]
    // 0x87fb20: b               #0x8838b4
    // 0x87fb24: ldur            x0, [fp, #-8]
    // 0x87fb28: r1 = LoadClassIdInstr(r0)
    //     0x87fb28: ldur            x1, [x0, #-1]
    //     0x87fb2c: ubfx            x1, x1, #0xc, #0x14
    // 0x87fb30: r16 = "2"
    //     0x87fb30: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x87fb34: ldr             x16, [x16, #0x6a8]
    // 0x87fb38: stp             x16, x0, [SP]
    // 0x87fb3c: mov             x0, x1
    // 0x87fb40: mov             lr, x0
    // 0x87fb44: ldr             lr, [x21, lr, lsl #3]
    // 0x87fb48: blr             lr
    // 0x87fb4c: tbnz            w0, #4, #0x87fb60
    // 0x87fb50: nop             
    // 0x87fb54: r0 = "badge4"
    //     0x87fb54: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fa8] "badge4"
    //     0x87fb58: ldr             x0, [x0, #0xfa8]
    // 0x87fb5c: b               #0x8838b4
    // 0x87fb60: r0 = "badge3"
    //     0x87fb60: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fb0] "badge3"
    //     0x87fb64: ldr             x0, [x0, #0xfb0]
    // 0x87fb68: b               #0x8838b4
    // 0x87fb6c: r16 = "guanMemoryBadge5Choice"
    //     0x87fb6c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12298] "guanMemoryBadge5Choice"
    //     0x87fb70: ldr             x16, [x16, #0x298]
    // 0x87fb74: ldur            lr, [fp, #-0x28]
    // 0x87fb78: stp             lr, x16, [SP]
    // 0x87fb7c: r0 = ==()
    //     0x87fb7c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87fb80: tbnz            w0, #4, #0x87fd40
    // 0x87fb84: nop             
    // 0x87fb88: r0 = LoadStaticField(0xb54)
    //     0x87fb88: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87fb8c: ldr             x0, [x0, #0x16a8]
    // 0x87fb90: cmp             w0, NULL
    // 0x87fb94: b.ne            #0x87fba4
    // 0x87fb98: nop             
    // 0x87fb9c: r0 = Null
    //     0x87fb9c: mov             x0, NULL
    // 0x87fba0: b               #0x87fbcc
    // 0x87fba4: r17 = 351
    //     0x87fba4: movz            x17, #0x15f
    // 0x87fba8: ldr             w1, [x0, x17]
    // 0x87fbac: DecompressPointer r1
    //     0x87fbac: add             x1, x1, HEAP, lsl #32
    // 0x87fbb0: r0 = LoadClassIdInstr(r1)
    //     0x87fbb0: ldur            x0, [x1, #-1]
    //     0x87fbb4: ubfx            x0, x0, #0xc, #0x14
    // 0x87fbb8: r2 = "guanMemoryBadge5"
    //     0x87fbb8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12268] "guanMemoryBadge5"
    //     0x87fbbc: ldr             x2, [x2, #0x268]
    // 0x87fbc0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87fbc0: sub             lr, x0, #0xb4
    //     0x87fbc4: ldr             lr, [x21, lr, lsl #3]
    //     0x87fbc8: blr             lr
    // 0x87fbcc: cmp             w0, NULL
    // 0x87fbd0: b.ne            #0x87fbe0
    // 0x87fbd4: nop             
    // 0x87fbd8: r3 = ""
    //     0x87fbd8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fbdc: b               #0x87fbe4
    // 0x87fbe0: mov             x3, x0
    // 0x87fbe4: mov             x0, x3
    // 0x87fbe8: stur            x3, [fp, #-8]
    // 0x87fbec: r2 = Null
    //     0x87fbec: mov             x2, NULL
    // 0x87fbf0: r1 = Null
    //     0x87fbf0: mov             x1, NULL
    // 0x87fbf4: r4 = 59
    //     0x87fbf4: movz            x4, #0x3b
    // 0x87fbf8: branchIfSmi(r0, 0x87fc08)
    //     0x87fbf8: tbz             w0, #0, #0x87fc08
    //     0x87fbfc: nop             
    // 0x87fc00: r4 = LoadClassIdInstr(r0)
    //     0x87fc00: ldur            x4, [x0, #-1]
    //     0x87fc04: ubfx            x4, x4, #0xc, #0x14
    // 0x87fc08: sub             x4, x4, #0x5d
    // 0x87fc0c: cmp             x4, #1
    // 0x87fc10: b.ls            #0x87fc28
    // 0x87fc14: nop             
    // 0x87fc18: r8 = String
    //     0x87fc18: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fc1c: r3 = Null
    //     0x87fc1c: add             x3, PP, #0x12, lsl #12  ; [pp+0x122a0] Null
    //     0x87fc20: ldr             x3, [x3, #0x2a0]
    // 0x87fc24: r0 = String()
    //     0x87fc24: bl              #0x1523244  ; IsType_String_Stub
    // 0x87fc28: r0 = LoadStaticField(0xb54)
    //     0x87fc28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87fc2c: ldr             x0, [x0, #0x16a8]
    // 0x87fc30: cmp             w0, NULL
    // 0x87fc34: b.ne            #0x87fc44
    // 0x87fc38: nop             
    // 0x87fc3c: r0 = Null
    //     0x87fc3c: mov             x0, NULL
    // 0x87fc40: b               #0x87fc6c
    // 0x87fc44: r17 = 351
    //     0x87fc44: movz            x17, #0x15f
    // 0x87fc48: ldr             w1, [x0, x17]
    // 0x87fc4c: DecompressPointer r1
    //     0x87fc4c: add             x1, x1, HEAP, lsl #32
    // 0x87fc50: r0 = LoadClassIdInstr(r1)
    //     0x87fc50: ldur            x0, [x1, #-1]
    //     0x87fc54: ubfx            x0, x0, #0xc, #0x14
    // 0x87fc58: r2 = "guanMemoryBadge5Pass"
    //     0x87fc58: add             x2, PP, #0x12, lsl #12  ; [pp+0x12280] "guanMemoryBadge5Pass"
    //     0x87fc5c: ldr             x2, [x2, #0x280]
    // 0x87fc60: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87fc60: sub             lr, x0, #0xb4
    //     0x87fc64: ldr             lr, [x21, lr, lsl #3]
    //     0x87fc68: blr             lr
    // 0x87fc6c: cmp             w0, NULL
    // 0x87fc70: b.ne            #0x87fc80
    // 0x87fc74: nop             
    // 0x87fc78: r4 = ""
    //     0x87fc78: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fc7c: b               #0x87fc84
    // 0x87fc80: mov             x4, x0
    // 0x87fc84: ldur            x3, [fp, #-8]
    // 0x87fc88: mov             x0, x4
    // 0x87fc8c: stur            x4, [fp, #-0x10]
    // 0x87fc90: r2 = Null
    //     0x87fc90: mov             x2, NULL
    // 0x87fc94: r1 = Null
    //     0x87fc94: mov             x1, NULL
    // 0x87fc98: r4 = 59
    //     0x87fc98: movz            x4, #0x3b
    // 0x87fc9c: branchIfSmi(r0, 0x87fcac)
    //     0x87fc9c: tbz             w0, #0, #0x87fcac
    //     0x87fca0: nop             
    // 0x87fca4: r4 = LoadClassIdInstr(r0)
    //     0x87fca4: ldur            x4, [x0, #-1]
    //     0x87fca8: ubfx            x4, x4, #0xc, #0x14
    // 0x87fcac: sub             x4, x4, #0x5d
    // 0x87fcb0: cmp             x4, #1
    // 0x87fcb4: b.ls            #0x87fccc
    // 0x87fcb8: nop             
    // 0x87fcbc: r8 = String
    //     0x87fcbc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fcc0: r3 = Null
    //     0x87fcc0: add             x3, PP, #0x12, lsl #12  ; [pp+0x122b0] Null
    //     0x87fcc4: ldr             x3, [x3, #0x2b0]
    // 0x87fcc8: r0 = String()
    //     0x87fcc8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87fccc: ldur            x0, [fp, #-8]
    // 0x87fcd0: r1 = LoadClassIdInstr(r0)
    //     0x87fcd0: ldur            x1, [x0, #-1]
    //     0x87fcd4: ubfx            x1, x1, #0xc, #0x14
    // 0x87fcd8: r16 = "1"
    //     0x87fcd8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x87fcdc: ldr             x16, [x16, #0x6a0]
    // 0x87fce0: stp             x16, x0, [SP]
    // 0x87fce4: mov             x0, x1
    // 0x87fce8: mov             lr, x0
    // 0x87fcec: ldr             lr, [x21, lr, lsl #3]
    // 0x87fcf0: blr             lr
    // 0x87fcf4: tbnz            w0, #4, #0x87fd34
    // 0x87fcf8: nop             
    // 0x87fcfc: ldur            x0, [fp, #-0x10]
    // 0x87fd00: r1 = LoadClassIdInstr(r0)
    //     0x87fd00: ldur            x1, [x0, #-1]
    //     0x87fd04: ubfx            x1, x1, #0xc, #0x14
    // 0x87fd08: r16 = ""
    //     0x87fd08: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fd0c: stp             x16, x0, [SP]
    // 0x87fd10: mov             x0, x1
    // 0x87fd14: mov             lr, x0
    // 0x87fd18: ldr             lr, [x21, lr, lsl #3]
    // 0x87fd1c: blr             lr
    // 0x87fd20: tbz             w0, #4, #0x87fd34
    // 0x87fd24: nop             
    // 0x87fd28: r0 = "afterChoice"
    //     0x87fd28: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe0] "afterChoice"
    //     0x87fd2c: ldr             x0, [x0, #0xfe0]
    // 0x87fd30: b               #0x8838b4
    // 0x87fd34: r0 = "beforeChoice"
    //     0x87fd34: add             x0, PP, #0x11, lsl #12  ; [pp+0x11fe8] "beforeChoice"
    //     0x87fd38: ldr             x0, [x0, #0xfe8]
    // 0x87fd3c: b               #0x8838b4
    // 0x87fd40: r16 = "guanMemoryMiniGame5"
    //     0x87fd40: add             x16, PP, #0x12, lsl #12  ; [pp+0x122c0] "guanMemoryMiniGame5"
    //     0x87fd44: ldr             x16, [x16, #0x2c0]
    // 0x87fd48: ldur            lr, [fp, #-0x28]
    // 0x87fd4c: stp             lr, x16, [SP]
    // 0x87fd50: r0 = ==()
    //     0x87fd50: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87fd54: tbnz            w0, #4, #0x87fe44
    // 0x87fd58: nop             
    // 0x87fd5c: r0 = LoadStaticField(0xb54)
    //     0x87fd5c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87fd60: ldr             x0, [x0, #0x16a8]
    // 0x87fd64: cmp             w0, NULL
    // 0x87fd68: b.ne            #0x87fd78
    // 0x87fd6c: nop             
    // 0x87fd70: r0 = Null
    //     0x87fd70: mov             x0, NULL
    // 0x87fd74: b               #0x87fda0
    // 0x87fd78: r17 = 351
    //     0x87fd78: movz            x17, #0x15f
    // 0x87fd7c: ldr             w1, [x0, x17]
    // 0x87fd80: DecompressPointer r1
    //     0x87fd80: add             x1, x1, HEAP, lsl #32
    // 0x87fd84: r0 = LoadClassIdInstr(r1)
    //     0x87fd84: ldur            x0, [x1, #-1]
    //     0x87fd88: ubfx            x0, x0, #0xc, #0x14
    // 0x87fd8c: r2 = "guanMemoryOptional5"
    //     0x87fd8c: add             x2, PP, #0x12, lsl #12  ; [pp+0x122c8] "guanMemoryOptional5"
    //     0x87fd90: ldr             x2, [x2, #0x2c8]
    // 0x87fd94: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87fd94: sub             lr, x0, #0xb4
    //     0x87fd98: ldr             lr, [x21, lr, lsl #3]
    //     0x87fd9c: blr             lr
    // 0x87fda0: cmp             w0, NULL
    // 0x87fda4: b.ne            #0x87fdb4
    // 0x87fda8: nop             
    // 0x87fdac: r3 = ""
    //     0x87fdac: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87fdb0: b               #0x87fdb8
    // 0x87fdb4: mov             x3, x0
    // 0x87fdb8: mov             x0, x3
    // 0x87fdbc: stur            x3, [fp, #-8]
    // 0x87fdc0: r2 = Null
    //     0x87fdc0: mov             x2, NULL
    // 0x87fdc4: r1 = Null
    //     0x87fdc4: mov             x1, NULL
    // 0x87fdc8: r4 = 59
    //     0x87fdc8: movz            x4, #0x3b
    // 0x87fdcc: branchIfSmi(r0, 0x87fddc)
    //     0x87fdcc: tbz             w0, #0, #0x87fddc
    //     0x87fdd0: nop             
    // 0x87fdd4: r4 = LoadClassIdInstr(r0)
    //     0x87fdd4: ldur            x4, [x0, #-1]
    //     0x87fdd8: ubfx            x4, x4, #0xc, #0x14
    // 0x87fddc: sub             x4, x4, #0x5d
    // 0x87fde0: cmp             x4, #1
    // 0x87fde4: b.ls            #0x87fdfc
    // 0x87fde8: nop             
    // 0x87fdec: r8 = String
    //     0x87fdec: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fdf0: r3 = Null
    //     0x87fdf0: add             x3, PP, #0x12, lsl #12  ; [pp+0x122d0] Null
    //     0x87fdf4: ldr             x3, [x3, #0x2d0]
    // 0x87fdf8: r0 = String()
    //     0x87fdf8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87fdfc: ldur            x0, [fp, #-8]
    // 0x87fe00: r1 = LoadClassIdInstr(r0)
    //     0x87fe00: ldur            x1, [x0, #-1]
    //     0x87fe04: ubfx            x1, x1, #0xc, #0x14
    // 0x87fe08: r16 = "complete"
    //     0x87fe08: add             x16, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x87fe0c: ldr             x16, [x16, #0x590]
    // 0x87fe10: stp             x16, x0, [SP]
    // 0x87fe14: mov             x0, x1
    // 0x87fe18: mov             lr, x0
    // 0x87fe1c: ldr             lr, [x21, lr, lsl #3]
    // 0x87fe20: blr             lr
    // 0x87fe24: tbnz            w0, #4, #0x87fe38
    // 0x87fe28: nop             
    // 0x87fe2c: r0 = "cheatGame"
    //     0x87fe2c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12010] "cheatGame"
    //     0x87fe30: ldr             x0, [x0, #0x10]
    // 0x87fe34: b               #0x8838b4
    // 0x87fe38: r0 = "normalGame"
    //     0x87fe38: add             x0, PP, #0x12, lsl #12  ; [pp+0x12018] "normalGame"
    //     0x87fe3c: ldr             x0, [x0, #0x18]
    // 0x87fe40: b               #0x8838b4
    // 0x87fe44: r16 = "guanMemoryBadge5NormalPass"
    //     0x87fe44: add             x16, PP, #0x12, lsl #12  ; [pp+0x122e0] "guanMemoryBadge5NormalPass"
    //     0x87fe48: ldr             x16, [x16, #0x2e0]
    // 0x87fe4c: ldur            lr, [fp, #-0x28]
    // 0x87fe50: stp             lr, x16, [SP]
    // 0x87fe54: r0 = ==()
    //     0x87fe54: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87fe58: tbnz            w0, #4, #0x87ff40
    // 0x87fe5c: nop             
    // 0x87fe60: r0 = LoadStaticField(0xb54)
    //     0x87fe60: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87fe64: ldr             x0, [x0, #0x16a8]
    // 0x87fe68: cmp             w0, NULL
    // 0x87fe6c: b.ne            #0x87fe7c
    // 0x87fe70: nop             
    // 0x87fe74: r0 = Null
    //     0x87fe74: mov             x0, NULL
    // 0x87fe78: b               #0x87fea4
    // 0x87fe7c: r17 = 351
    //     0x87fe7c: movz            x17, #0x15f
    // 0x87fe80: ldr             w1, [x0, x17]
    // 0x87fe84: DecompressPointer r1
    //     0x87fe84: add             x1, x1, HEAP, lsl #32
    // 0x87fe88: r0 = LoadClassIdInstr(r1)
    //     0x87fe88: ldur            x0, [x1, #-1]
    //     0x87fe8c: ubfx            x0, x0, #0xc, #0x14
    // 0x87fe90: r2 = "guanMemoryBadge5Pass"
    //     0x87fe90: add             x2, PP, #0x12, lsl #12  ; [pp+0x12280] "guanMemoryBadge5Pass"
    //     0x87fe94: ldr             x2, [x2, #0x280]
    // 0x87fe98: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87fe98: sub             lr, x0, #0xb4
    //     0x87fe9c: ldr             lr, [x21, lr, lsl #3]
    //     0x87fea0: blr             lr
    // 0x87fea4: cmp             w0, NULL
    // 0x87fea8: b.ne            #0x87feb8
    // 0x87feac: nop             
    // 0x87feb0: r3 = ""
    //     0x87feb0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87feb4: b               #0x87febc
    // 0x87feb8: mov             x3, x0
    // 0x87febc: mov             x0, x3
    // 0x87fec0: stur            x3, [fp, #-8]
    // 0x87fec4: r2 = Null
    //     0x87fec4: mov             x2, NULL
    // 0x87fec8: r1 = Null
    //     0x87fec8: mov             x1, NULL
    // 0x87fecc: r4 = 59
    //     0x87fecc: movz            x4, #0x3b
    // 0x87fed0: branchIfSmi(r0, 0x87fee0)
    //     0x87fed0: tbz             w0, #0, #0x87fee0
    //     0x87fed4: nop             
    // 0x87fed8: r4 = LoadClassIdInstr(r0)
    //     0x87fed8: ldur            x4, [x0, #-1]
    //     0x87fedc: ubfx            x4, x4, #0xc, #0x14
    // 0x87fee0: sub             x4, x4, #0x5d
    // 0x87fee4: cmp             x4, #1
    // 0x87fee8: b.ls            #0x87ff00
    // 0x87feec: nop             
    // 0x87fef0: r8 = String
    //     0x87fef0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fef4: r3 = Null
    //     0x87fef4: add             x3, PP, #0x12, lsl #12  ; [pp+0x122e8] Null
    //     0x87fef8: ldr             x3, [x3, #0x2e8]
    // 0x87fefc: r0 = String()
    //     0x87fefc: bl              #0x1523244  ; IsType_String_Stub
    // 0x87ff00: ldur            x0, [fp, #-8]
    // 0x87ff04: r1 = LoadClassIdInstr(r0)
    //     0x87ff04: ldur            x1, [x0, #-1]
    //     0x87ff08: ubfx            x1, x1, #0xc, #0x14
    // 0x87ff0c: r16 = ""
    //     0x87ff0c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ff10: stp             x16, x0, [SP]
    // 0x87ff14: mov             x0, x1
    // 0x87ff18: mov             lr, x0
    // 0x87ff1c: ldr             lr, [x21, lr, lsl #3]
    // 0x87ff20: blr             lr
    // 0x87ff24: tbnz            w0, #4, #0x87ff38
    // 0x87ff28: nop             
    // 0x87ff2c: r0 = "guanMemoryBadge5NormalPass"
    //     0x87ff2c: add             x0, PP, #0x12, lsl #12  ; [pp+0x122e0] "guanMemoryBadge5NormalPass"
    //     0x87ff30: ldr             x0, [x0, #0x2e0]
    // 0x87ff34: b               #0x8838b4
    // 0x87ff38: r0 = "end"
    //     0x87ff38: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x87ff3c: b               #0x8838b4
    // 0x87ff40: r16 = "guanMemoryBadge5PerfectPass"
    //     0x87ff40: add             x16, PP, #0x12, lsl #12  ; [pp+0x122f8] "guanMemoryBadge5PerfectPass"
    //     0x87ff44: ldr             x16, [x16, #0x2f8]
    // 0x87ff48: ldur            lr, [fp, #-0x28]
    // 0x87ff4c: stp             lr, x16, [SP]
    // 0x87ff50: r0 = ==()
    //     0x87ff50: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x87ff54: tbnz            w0, #4, #0x880074
    // 0x87ff58: nop             
    // 0x87ff5c: r0 = LoadStaticField(0xb54)
    //     0x87ff5c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x87ff60: ldr             x0, [x0, #0x16a8]
    // 0x87ff64: cmp             w0, NULL
    // 0x87ff68: b.ne            #0x87ff78
    // 0x87ff6c: nop             
    // 0x87ff70: r0 = Null
    //     0x87ff70: mov             x0, NULL
    // 0x87ff74: b               #0x87ffa0
    // 0x87ff78: r17 = 351
    //     0x87ff78: movz            x17, #0x15f
    // 0x87ff7c: ldr             w1, [x0, x17]
    // 0x87ff80: DecompressPointer r1
    //     0x87ff80: add             x1, x1, HEAP, lsl #32
    // 0x87ff84: r0 = LoadClassIdInstr(r1)
    //     0x87ff84: ldur            x0, [x1, #-1]
    //     0x87ff88: ubfx            x0, x0, #0xc, #0x14
    // 0x87ff8c: r2 = "guanMemoryBadge5Pass"
    //     0x87ff8c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12280] "guanMemoryBadge5Pass"
    //     0x87ff90: ldr             x2, [x2, #0x280]
    // 0x87ff94: r0 = GDT[cid_x0 + -0xb4]()
    //     0x87ff94: sub             lr, x0, #0xb4
    //     0x87ff98: ldr             lr, [x21, lr, lsl #3]
    //     0x87ff9c: blr             lr
    // 0x87ffa0: cmp             w0, NULL
    // 0x87ffa4: b.ne            #0x87ffb4
    // 0x87ffa8: nop             
    // 0x87ffac: r3 = ""
    //     0x87ffac: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x87ffb0: b               #0x87ffb8
    // 0x87ffb4: mov             x3, x0
    // 0x87ffb8: mov             x0, x3
    // 0x87ffbc: stur            x3, [fp, #-8]
    // 0x87ffc0: r2 = Null
    //     0x87ffc0: mov             x2, NULL
    // 0x87ffc4: r1 = Null
    //     0x87ffc4: mov             x1, NULL
    // 0x87ffc8: r4 = 59
    //     0x87ffc8: movz            x4, #0x3b
    // 0x87ffcc: branchIfSmi(r0, 0x87ffdc)
    //     0x87ffcc: tbz             w0, #0, #0x87ffdc
    //     0x87ffd0: nop             
    // 0x87ffd4: r4 = LoadClassIdInstr(r0)
    //     0x87ffd4: ldur            x4, [x0, #-1]
    //     0x87ffd8: ubfx            x4, x4, #0xc, #0x14
    // 0x87ffdc: sub             x4, x4, #0x5d
    // 0x87ffe0: cmp             x4, #1
    // 0x87ffe4: b.ls            #0x87fffc
    // 0x87ffe8: nop             
    // 0x87ffec: r8 = String
    //     0x87ffec: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x87fff0: r3 = Null
    //     0x87fff0: add             x3, PP, #0x12, lsl #12  ; [pp+0x12300] Null
    //     0x87fff4: ldr             x3, [x3, #0x300]
    // 0x87fff8: r0 = String()
    //     0x87fff8: bl              #0x1523244  ; IsType_String_Stub
    // 0x87fffc: ldur            x1, [fp, #-8]
    // 0x880000: r0 = LoadClassIdInstr(r1)
    //     0x880000: ldur            x0, [x1, #-1]
    //     0x880004: ubfx            x0, x0, #0xc, #0x14
    // 0x880008: r16 = ""
    //     0x880008: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88000c: stp             x16, x1, [SP]
    // 0x880010: mov             lr, x0
    // 0x880014: ldr             lr, [x21, lr, lsl #3]
    // 0x880018: blr             lr
    // 0x88001c: tbnz            w0, #4, #0x880030
    // 0x880020: nop             
    // 0x880024: r0 = "guanMemoryBadge5PerfectPass2"
    //     0x880024: add             x0, PP, #0x12, lsl #12  ; [pp+0x12310] "guanMemoryBadge5PerfectPass2"
    //     0x880028: ldr             x0, [x0, #0x310]
    // 0x88002c: b               #0x8838b4
    // 0x880030: ldur            x0, [fp, #-8]
    // 0x880034: r1 = LoadClassIdInstr(r0)
    //     0x880034: ldur            x1, [x0, #-1]
    //     0x880038: ubfx            x1, x1, #0xc, #0x14
    // 0x88003c: r16 = "perfect"
    //     0x88003c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x880040: ldr             x16, [x16, #0x58]
    // 0x880044: stp             x16, x0, [SP]
    // 0x880048: mov             x0, x1
    // 0x88004c: mov             lr, x0
    // 0x880050: ldr             lr, [x21, lr, lsl #3]
    // 0x880054: blr             lr
    // 0x880058: tbz             w0, #4, #0x88006c
    // 0x88005c: nop             
    // 0x880060: r0 = "guanMemoryBadge5PerfectPass"
    //     0x880060: add             x0, PP, #0x12, lsl #12  ; [pp+0x122f8] "guanMemoryBadge5PerfectPass"
    //     0x880064: ldr             x0, [x0, #0x2f8]
    // 0x880068: b               #0x8838b4
    // 0x88006c: r0 = "end"
    //     0x88006c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x880070: b               #0x8838b4
    // 0x880074: r16 = "guanMemoryFinishCollect"
    //     0x880074: add             x16, PP, #0x12, lsl #12  ; [pp+0x12318] "guanMemoryFinishCollect"
    //     0x880078: ldr             x16, [x16, #0x318]
    // 0x88007c: ldur            lr, [fp, #-0x28]
    // 0x880080: stp             lr, x16, [SP]
    // 0x880084: r0 = ==()
    //     0x880084: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x880088: tbnz            w0, #4, #0x8804bc
    // 0x88008c: nop             
    // 0x880090: r0 = LoadStaticField(0xb54)
    //     0x880090: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880094: ldr             x0, [x0, #0x16a8]
    // 0x880098: cmp             w0, NULL
    // 0x88009c: b.ne            #0x8800ac
    // 0x8800a0: nop             
    // 0x8800a4: r0 = Null
    //     0x8800a4: mov             x0, NULL
    // 0x8800a8: b               #0x8800d4
    // 0x8800ac: r17 = 351
    //     0x8800ac: movz            x17, #0x15f
    // 0x8800b0: ldr             w1, [x0, x17]
    // 0x8800b4: DecompressPointer r1
    //     0x8800b4: add             x1, x1, HEAP, lsl #32
    // 0x8800b8: r0 = LoadClassIdInstr(r1)
    //     0x8800b8: ldur            x0, [x1, #-1]
    //     0x8800bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8800c0: r2 = "guanMemoryBadge1"
    //     0x8800c0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f68] "guanMemoryBadge1"
    //     0x8800c4: ldr             x2, [x2, #0xf68]
    // 0x8800c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8800c8: sub             lr, x0, #0xb4
    //     0x8800cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8800d0: blr             lr
    // 0x8800d4: cmp             w0, NULL
    // 0x8800d8: b.ne            #0x8800e8
    // 0x8800dc: nop             
    // 0x8800e0: r3 = ""
    //     0x8800e0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8800e4: b               #0x8800ec
    // 0x8800e8: mov             x3, x0
    // 0x8800ec: mov             x0, x3
    // 0x8800f0: stur            x3, [fp, #-8]
    // 0x8800f4: r2 = Null
    //     0x8800f4: mov             x2, NULL
    // 0x8800f8: r1 = Null
    //     0x8800f8: mov             x1, NULL
    // 0x8800fc: r4 = 59
    //     0x8800fc: movz            x4, #0x3b
    // 0x880100: branchIfSmi(r0, 0x880110)
    //     0x880100: tbz             w0, #0, #0x880110
    //     0x880104: nop             
    // 0x880108: r4 = LoadClassIdInstr(r0)
    //     0x880108: ldur            x4, [x0, #-1]
    //     0x88010c: ubfx            x4, x4, #0xc, #0x14
    // 0x880110: sub             x4, x4, #0x5d
    // 0x880114: cmp             x4, #1
    // 0x880118: b.ls            #0x880130
    // 0x88011c: nop             
    // 0x880120: r8 = String
    //     0x880120: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880124: r3 = Null
    //     0x880124: add             x3, PP, #0x12, lsl #12  ; [pp+0x12320] Null
    //     0x880128: ldr             x3, [x3, #0x320]
    // 0x88012c: r0 = String()
    //     0x88012c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880130: r0 = LoadStaticField(0xb54)
    //     0x880130: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880134: ldr             x0, [x0, #0x16a8]
    // 0x880138: cmp             w0, NULL
    // 0x88013c: b.ne            #0x88014c
    // 0x880140: nop             
    // 0x880144: r0 = Null
    //     0x880144: mov             x0, NULL
    // 0x880148: b               #0x880174
    // 0x88014c: r17 = 351
    //     0x88014c: movz            x17, #0x15f
    // 0x880150: ldr             w1, [x0, x17]
    // 0x880154: DecompressPointer r1
    //     0x880154: add             x1, x1, HEAP, lsl #32
    // 0x880158: r0 = LoadClassIdInstr(r1)
    //     0x880158: ldur            x0, [x1, #-1]
    //     0x88015c: ubfx            x0, x0, #0xc, #0x14
    // 0x880160: r2 = "guanMemoryBadge2"
    //     0x880160: add             x2, PP, #0x12, lsl #12  ; [pp+0x12060] "guanMemoryBadge2"
    //     0x880164: ldr             x2, [x2, #0x60]
    // 0x880168: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880168: sub             lr, x0, #0xb4
    //     0x88016c: ldr             lr, [x21, lr, lsl #3]
    //     0x880170: blr             lr
    // 0x880174: cmp             w0, NULL
    // 0x880178: b.ne            #0x880188
    // 0x88017c: nop             
    // 0x880180: r3 = ""
    //     0x880180: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880184: b               #0x88018c
    // 0x880188: mov             x3, x0
    // 0x88018c: mov             x0, x3
    // 0x880190: stur            x3, [fp, #-0x10]
    // 0x880194: r2 = Null
    //     0x880194: mov             x2, NULL
    // 0x880198: r1 = Null
    //     0x880198: mov             x1, NULL
    // 0x88019c: r4 = 59
    //     0x88019c: movz            x4, #0x3b
    // 0x8801a0: branchIfSmi(r0, 0x8801b0)
    //     0x8801a0: tbz             w0, #0, #0x8801b0
    //     0x8801a4: nop             
    // 0x8801a8: r4 = LoadClassIdInstr(r0)
    //     0x8801a8: ldur            x4, [x0, #-1]
    //     0x8801ac: ubfx            x4, x4, #0xc, #0x14
    // 0x8801b0: sub             x4, x4, #0x5d
    // 0x8801b4: cmp             x4, #1
    // 0x8801b8: b.ls            #0x8801d0
    // 0x8801bc: nop             
    // 0x8801c0: r8 = String
    //     0x8801c0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8801c4: r3 = Null
    //     0x8801c4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12330] Null
    //     0x8801c8: ldr             x3, [x3, #0x330]
    // 0x8801cc: r0 = String()
    //     0x8801cc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8801d0: r0 = LoadStaticField(0xb54)
    //     0x8801d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8801d4: ldr             x0, [x0, #0x16a8]
    // 0x8801d8: cmp             w0, NULL
    // 0x8801dc: b.ne            #0x8801ec
    // 0x8801e0: nop             
    // 0x8801e4: r0 = Null
    //     0x8801e4: mov             x0, NULL
    // 0x8801e8: b               #0x880214
    // 0x8801ec: r17 = 351
    //     0x8801ec: movz            x17, #0x15f
    // 0x8801f0: ldr             w1, [x0, x17]
    // 0x8801f4: DecompressPointer r1
    //     0x8801f4: add             x1, x1, HEAP, lsl #32
    // 0x8801f8: r0 = LoadClassIdInstr(r1)
    //     0x8801f8: ldur            x0, [x1, #-1]
    //     0x8801fc: ubfx            x0, x0, #0xc, #0x14
    // 0x880200: r2 = "guanMemoryBadge3"
    //     0x880200: add             x2, PP, #0x12, lsl #12  ; [pp+0x12108] "guanMemoryBadge3"
    //     0x880204: ldr             x2, [x2, #0x108]
    // 0x880208: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880208: sub             lr, x0, #0xb4
    //     0x88020c: ldr             lr, [x21, lr, lsl #3]
    //     0x880210: blr             lr
    // 0x880214: cmp             w0, NULL
    // 0x880218: b.ne            #0x880228
    // 0x88021c: nop             
    // 0x880220: r3 = ""
    //     0x880220: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880224: b               #0x88022c
    // 0x880228: mov             x3, x0
    // 0x88022c: mov             x0, x3
    // 0x880230: stur            x3, [fp, #-0x18]
    // 0x880234: r2 = Null
    //     0x880234: mov             x2, NULL
    // 0x880238: r1 = Null
    //     0x880238: mov             x1, NULL
    // 0x88023c: r4 = 59
    //     0x88023c: movz            x4, #0x3b
    // 0x880240: branchIfSmi(r0, 0x880250)
    //     0x880240: tbz             w0, #0, #0x880250
    //     0x880244: nop             
    // 0x880248: r4 = LoadClassIdInstr(r0)
    //     0x880248: ldur            x4, [x0, #-1]
    //     0x88024c: ubfx            x4, x4, #0xc, #0x14
    // 0x880250: sub             x4, x4, #0x5d
    // 0x880254: cmp             x4, #1
    // 0x880258: b.ls            #0x880270
    // 0x88025c: nop             
    // 0x880260: r8 = String
    //     0x880260: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880264: r3 = Null
    //     0x880264: add             x3, PP, #0x12, lsl #12  ; [pp+0x12340] Null
    //     0x880268: ldr             x3, [x3, #0x340]
    // 0x88026c: r0 = String()
    //     0x88026c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880270: r0 = LoadStaticField(0xb54)
    //     0x880270: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880274: ldr             x0, [x0, #0x16a8]
    // 0x880278: cmp             w0, NULL
    // 0x88027c: b.ne            #0x88028c
    // 0x880280: nop             
    // 0x880284: r0 = Null
    //     0x880284: mov             x0, NULL
    // 0x880288: b               #0x8802b4
    // 0x88028c: r17 = 351
    //     0x88028c: movz            x17, #0x15f
    // 0x880290: ldr             w1, [x0, x17]
    // 0x880294: DecompressPointer r1
    //     0x880294: add             x1, x1, HEAP, lsl #32
    // 0x880298: r0 = LoadClassIdInstr(r1)
    //     0x880298: ldur            x0, [x1, #-1]
    //     0x88029c: ubfx            x0, x0, #0xc, #0x14
    // 0x8802a0: r2 = "guanMemoryBadge4"
    //     0x8802a0: add             x2, PP, #0x12, lsl #12  ; [pp+0x121b8] "guanMemoryBadge4"
    //     0x8802a4: ldr             x2, [x2, #0x1b8]
    // 0x8802a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8802a8: sub             lr, x0, #0xb4
    //     0x8802ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8802b0: blr             lr
    // 0x8802b4: cmp             w0, NULL
    // 0x8802b8: b.ne            #0x8802c8
    // 0x8802bc: nop             
    // 0x8802c0: r3 = ""
    //     0x8802c0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8802c4: b               #0x8802cc
    // 0x8802c8: mov             x3, x0
    // 0x8802cc: mov             x0, x3
    // 0x8802d0: stur            x3, [fp, #-0x20]
    // 0x8802d4: r2 = Null
    //     0x8802d4: mov             x2, NULL
    // 0x8802d8: r1 = Null
    //     0x8802d8: mov             x1, NULL
    // 0x8802dc: r4 = 59
    //     0x8802dc: movz            x4, #0x3b
    // 0x8802e0: branchIfSmi(r0, 0x8802f0)
    //     0x8802e0: tbz             w0, #0, #0x8802f0
    //     0x8802e4: nop             
    // 0x8802e8: r4 = LoadClassIdInstr(r0)
    //     0x8802e8: ldur            x4, [x0, #-1]
    //     0x8802ec: ubfx            x4, x4, #0xc, #0x14
    // 0x8802f0: sub             x4, x4, #0x5d
    // 0x8802f4: cmp             x4, #1
    // 0x8802f8: b.ls            #0x880310
    // 0x8802fc: nop             
    // 0x880300: r8 = String
    //     0x880300: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880304: r3 = Null
    //     0x880304: add             x3, PP, #0x12, lsl #12  ; [pp+0x12350] Null
    //     0x880308: ldr             x3, [x3, #0x350]
    // 0x88030c: r0 = String()
    //     0x88030c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880310: r0 = LoadStaticField(0xb54)
    //     0x880310: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880314: ldr             x0, [x0, #0x16a8]
    // 0x880318: cmp             w0, NULL
    // 0x88031c: b.ne            #0x88032c
    // 0x880320: nop             
    // 0x880324: r0 = Null
    //     0x880324: mov             x0, NULL
    // 0x880328: b               #0x880354
    // 0x88032c: r17 = 351
    //     0x88032c: movz            x17, #0x15f
    // 0x880330: ldr             w1, [x0, x17]
    // 0x880334: DecompressPointer r1
    //     0x880334: add             x1, x1, HEAP, lsl #32
    // 0x880338: r0 = LoadClassIdInstr(r1)
    //     0x880338: ldur            x0, [x1, #-1]
    //     0x88033c: ubfx            x0, x0, #0xc, #0x14
    // 0x880340: r2 = "guanMemoryBadge5"
    //     0x880340: add             x2, PP, #0x12, lsl #12  ; [pp+0x12268] "guanMemoryBadge5"
    //     0x880344: ldr             x2, [x2, #0x268]
    // 0x880348: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880348: sub             lr, x0, #0xb4
    //     0x88034c: ldr             lr, [x21, lr, lsl #3]
    //     0x880350: blr             lr
    // 0x880354: cmp             w0, NULL
    // 0x880358: b.ne            #0x880368
    // 0x88035c: nop             
    // 0x880360: r4 = ""
    //     0x880360: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880364: b               #0x88036c
    // 0x880368: mov             x4, x0
    // 0x88036c: ldur            x3, [fp, #-8]
    // 0x880370: mov             x0, x4
    // 0x880374: stur            x4, [fp, #-0x30]
    // 0x880378: r2 = Null
    //     0x880378: mov             x2, NULL
    // 0x88037c: r1 = Null
    //     0x88037c: mov             x1, NULL
    // 0x880380: r4 = 59
    //     0x880380: movz            x4, #0x3b
    // 0x880384: branchIfSmi(r0, 0x880394)
    //     0x880384: tbz             w0, #0, #0x880394
    //     0x880388: nop             
    // 0x88038c: r4 = LoadClassIdInstr(r0)
    //     0x88038c: ldur            x4, [x0, #-1]
    //     0x880390: ubfx            x4, x4, #0xc, #0x14
    // 0x880394: sub             x4, x4, #0x5d
    // 0x880398: cmp             x4, #1
    // 0x88039c: b.ls            #0x8803b4
    // 0x8803a0: nop             
    // 0x8803a4: r8 = String
    //     0x8803a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8803a8: r3 = Null
    //     0x8803a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12360] Null
    //     0x8803ac: ldr             x3, [x3, #0x360]
    // 0x8803b0: r0 = String()
    //     0x8803b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8803b4: ldur            x0, [fp, #-8]
    // 0x8803b8: r1 = LoadClassIdInstr(r0)
    //     0x8803b8: ldur            x1, [x0, #-1]
    //     0x8803bc: ubfx            x1, x1, #0xc, #0x14
    // 0x8803c0: r16 = "2"
    //     0x8803c0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8803c4: ldr             x16, [x16, #0x6a8]
    // 0x8803c8: stp             x16, x0, [SP]
    // 0x8803cc: mov             x0, x1
    // 0x8803d0: mov             lr, x0
    // 0x8803d4: ldr             lr, [x21, lr, lsl #3]
    // 0x8803d8: blr             lr
    // 0x8803dc: tbnz            w0, #4, #0x8804b0
    // 0x8803e0: nop             
    // 0x8803e4: ldur            x0, [fp, #-0x10]
    // 0x8803e8: r1 = LoadClassIdInstr(r0)
    //     0x8803e8: ldur            x1, [x0, #-1]
    //     0x8803ec: ubfx            x1, x1, #0xc, #0x14
    // 0x8803f0: r16 = "2"
    //     0x8803f0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8803f4: ldr             x16, [x16, #0x6a8]
    // 0x8803f8: stp             x16, x0, [SP]
    // 0x8803fc: mov             x0, x1
    // 0x880400: mov             lr, x0
    // 0x880404: ldr             lr, [x21, lr, lsl #3]
    // 0x880408: blr             lr
    // 0x88040c: tbnz            w0, #4, #0x8804b0
    // 0x880410: nop             
    // 0x880414: ldur            x0, [fp, #-0x18]
    // 0x880418: r1 = LoadClassIdInstr(r0)
    //     0x880418: ldur            x1, [x0, #-1]
    //     0x88041c: ubfx            x1, x1, #0xc, #0x14
    // 0x880420: r16 = "2"
    //     0x880420: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880424: ldr             x16, [x16, #0x6a8]
    // 0x880428: stp             x16, x0, [SP]
    // 0x88042c: mov             x0, x1
    // 0x880430: mov             lr, x0
    // 0x880434: ldr             lr, [x21, lr, lsl #3]
    // 0x880438: blr             lr
    // 0x88043c: tbnz            w0, #4, #0x8804b0
    // 0x880440: nop             
    // 0x880444: ldur            x0, [fp, #-0x20]
    // 0x880448: r1 = LoadClassIdInstr(r0)
    //     0x880448: ldur            x1, [x0, #-1]
    //     0x88044c: ubfx            x1, x1, #0xc, #0x14
    // 0x880450: r16 = "2"
    //     0x880450: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880454: ldr             x16, [x16, #0x6a8]
    // 0x880458: stp             x16, x0, [SP]
    // 0x88045c: mov             x0, x1
    // 0x880460: mov             lr, x0
    // 0x880464: ldr             lr, [x21, lr, lsl #3]
    // 0x880468: blr             lr
    // 0x88046c: tbnz            w0, #4, #0x8804b0
    // 0x880470: nop             
    // 0x880474: ldur            x0, [fp, #-0x30]
    // 0x880478: r1 = LoadClassIdInstr(r0)
    //     0x880478: ldur            x1, [x0, #-1]
    //     0x88047c: ubfx            x1, x1, #0xc, #0x14
    // 0x880480: r16 = "2"
    //     0x880480: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880484: ldr             x16, [x16, #0x6a8]
    // 0x880488: stp             x16, x0, [SP]
    // 0x88048c: mov             x0, x1
    // 0x880490: mov             lr, x0
    // 0x880494: ldr             lr, [x21, lr, lsl #3]
    // 0x880498: blr             lr
    // 0x88049c: tbnz            w0, #4, #0x8804b0
    // 0x8804a0: nop             
    // 0x8804a4: r0 = "finishCollectAll"
    //     0x8804a4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12370] "finishCollectAll"
    //     0x8804a8: ldr             x0, [x0, #0x370]
    // 0x8804ac: b               #0x8838b4
    // 0x8804b0: r0 = "noYetFinishCollect"
    //     0x8804b0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12378] "noYetFinishCollect"
    //     0x8804b4: ldr             x0, [x0, #0x378]
    // 0x8804b8: b               #0x8838b4
    // 0x8804bc: r16 = "guanMemoryTera"
    //     0x8804bc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12380] "guanMemoryTera"
    //     0x8804c0: ldr             x16, [x16, #0x380]
    // 0x8804c4: ldur            lr, [fp, #-0x28]
    // 0x8804c8: stp             lr, x16, [SP]
    // 0x8804cc: r0 = ==()
    //     0x8804cc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8804d0: tbnz            w0, #4, #0x8805bc
    // 0x8804d4: nop             
    // 0x8804d8: r0 = LoadStaticField(0xb54)
    //     0x8804d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8804dc: ldr             x0, [x0, #0x16a8]
    // 0x8804e0: cmp             w0, NULL
    // 0x8804e4: b.ne            #0x8804f4
    // 0x8804e8: nop             
    // 0x8804ec: r0 = Null
    //     0x8804ec: mov             x0, NULL
    // 0x8804f0: b               #0x88051c
    // 0x8804f4: r17 = 351
    //     0x8804f4: movz            x17, #0x15f
    // 0x8804f8: ldr             w1, [x0, x17]
    // 0x8804fc: DecompressPointer r1
    //     0x8804fc: add             x1, x1, HEAP, lsl #32
    // 0x880500: r0 = LoadClassIdInstr(r1)
    //     0x880500: ldur            x0, [x1, #-1]
    //     0x880504: ubfx            x0, x0, #0xc, #0x14
    // 0x880508: r2 = "guanMemoryOptional5"
    //     0x880508: add             x2, PP, #0x12, lsl #12  ; [pp+0x122c8] "guanMemoryOptional5"
    //     0x88050c: ldr             x2, [x2, #0x2c8]
    // 0x880510: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880510: sub             lr, x0, #0xb4
    //     0x880514: ldr             lr, [x21, lr, lsl #3]
    //     0x880518: blr             lr
    // 0x88051c: cmp             w0, NULL
    // 0x880520: b.ne            #0x880530
    // 0x880524: nop             
    // 0x880528: r3 = ""
    //     0x880528: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88052c: b               #0x880534
    // 0x880530: mov             x3, x0
    // 0x880534: mov             x0, x3
    // 0x880538: stur            x3, [fp, #-8]
    // 0x88053c: r2 = Null
    //     0x88053c: mov             x2, NULL
    // 0x880540: r1 = Null
    //     0x880540: mov             x1, NULL
    // 0x880544: r4 = 59
    //     0x880544: movz            x4, #0x3b
    // 0x880548: branchIfSmi(r0, 0x880558)
    //     0x880548: tbz             w0, #0, #0x880558
    //     0x88054c: nop             
    // 0x880550: r4 = LoadClassIdInstr(r0)
    //     0x880550: ldur            x4, [x0, #-1]
    //     0x880554: ubfx            x4, x4, #0xc, #0x14
    // 0x880558: sub             x4, x4, #0x5d
    // 0x88055c: cmp             x4, #1
    // 0x880560: b.ls            #0x880578
    // 0x880564: nop             
    // 0x880568: r8 = String
    //     0x880568: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88056c: r3 = Null
    //     0x88056c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12388] Null
    //     0x880570: ldr             x3, [x3, #0x388]
    // 0x880574: r0 = String()
    //     0x880574: bl              #0x1523244  ; IsType_String_Stub
    // 0x880578: ldur            x0, [fp, #-8]
    // 0x88057c: r1 = LoadClassIdInstr(r0)
    //     0x88057c: ldur            x1, [x0, #-1]
    //     0x880580: ubfx            x1, x1, #0xc, #0x14
    // 0x880584: r16 = ""
    //     0x880584: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880588: stp             x16, x0, [SP]
    // 0x88058c: mov             x0, x1
    // 0x880590: mov             lr, x0
    // 0x880594: ldr             lr, [x21, lr, lsl #3]
    // 0x880598: blr             lr
    // 0x88059c: tbnz            w0, #4, #0x8805b0
    // 0x8805a0: nop             
    // 0x8805a4: r0 = "specialEnd"
    //     0x8805a4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12398] "specialEnd"
    //     0x8805a8: ldr             x0, [x0, #0x398]
    // 0x8805ac: b               #0x8838b4
    // 0x8805b0: r0 = "normalEnd"
    //     0x8805b0: add             x0, PP, #0x12, lsl #12  ; [pp+0x123a0] "normalEnd"
    //     0x8805b4: ldr             x0, [x0, #0x3a0]
    // 0x8805b8: b               #0x8838b4
    // 0x8805bc: r16 = "guanMemoryMako"
    //     0x8805bc: add             x16, PP, #0x12, lsl #12  ; [pp+0x123a8] "guanMemoryMako"
    //     0x8805c0: ldr             x16, [x16, #0x3a8]
    // 0x8805c4: ldur            lr, [fp, #-0x28]
    // 0x8805c8: stp             lr, x16, [SP]
    // 0x8805cc: r0 = ==()
    //     0x8805cc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8805d0: tbnz            w0, #4, #0x880764
    // 0x8805d4: nop             
    // 0x8805d8: r0 = LoadStaticField(0xb54)
    //     0x8805d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8805dc: ldr             x0, [x0, #0x16a8]
    // 0x8805e0: cmp             w0, NULL
    // 0x8805e4: b.ne            #0x8805f4
    // 0x8805e8: nop             
    // 0x8805ec: r0 = Null
    //     0x8805ec: mov             x0, NULL
    // 0x8805f0: b               #0x88061c
    // 0x8805f4: r17 = 351
    //     0x8805f4: movz            x17, #0x15f
    // 0x8805f8: ldr             w1, [x0, x17]
    // 0x8805fc: DecompressPointer r1
    //     0x8805fc: add             x1, x1, HEAP, lsl #32
    // 0x880600: r0 = LoadClassIdInstr(r1)
    //     0x880600: ldur            x0, [x1, #-1]
    //     0x880604: ubfx            x0, x0, #0xc, #0x14
    // 0x880608: r2 = "guanMemoryOptional4"
    //     0x880608: add             x2, PP, #0x12, lsl #12  ; [pp+0x12218] "guanMemoryOptional4"
    //     0x88060c: ldr             x2, [x2, #0x218]
    // 0x880610: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880610: sub             lr, x0, #0xb4
    //     0x880614: ldr             lr, [x21, lr, lsl #3]
    //     0x880618: blr             lr
    // 0x88061c: cmp             w0, NULL
    // 0x880620: b.ne            #0x880630
    // 0x880624: nop             
    // 0x880628: r3 = ""
    //     0x880628: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88062c: b               #0x880634
    // 0x880630: mov             x3, x0
    // 0x880634: mov             x0, x3
    // 0x880638: stur            x3, [fp, #-8]
    // 0x88063c: r2 = Null
    //     0x88063c: mov             x2, NULL
    // 0x880640: r1 = Null
    //     0x880640: mov             x1, NULL
    // 0x880644: r4 = 59
    //     0x880644: movz            x4, #0x3b
    // 0x880648: branchIfSmi(r0, 0x880658)
    //     0x880648: tbz             w0, #0, #0x880658
    //     0x88064c: nop             
    // 0x880650: r4 = LoadClassIdInstr(r0)
    //     0x880650: ldur            x4, [x0, #-1]
    //     0x880654: ubfx            x4, x4, #0xc, #0x14
    // 0x880658: sub             x4, x4, #0x5d
    // 0x88065c: cmp             x4, #1
    // 0x880660: b.ls            #0x880678
    // 0x880664: nop             
    // 0x880668: r8 = String
    //     0x880668: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88066c: r3 = Null
    //     0x88066c: add             x3, PP, #0x12, lsl #12  ; [pp+0x123b0] Null
    //     0x880670: ldr             x3, [x3, #0x3b0]
    // 0x880674: r0 = String()
    //     0x880674: bl              #0x1523244  ; IsType_String_Stub
    // 0x880678: ldur            x1, [fp, #-8]
    // 0x88067c: r0 = LoadClassIdInstr(r1)
    //     0x88067c: ldur            x0, [x1, #-1]
    //     0x880680: ubfx            x0, x0, #0xc, #0x14
    // 0x880684: r16 = ""
    //     0x880684: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880688: stp             x16, x1, [SP]
    // 0x88068c: mov             lr, x0
    // 0x880690: ldr             lr, [x21, lr, lsl #3]
    // 0x880694: blr             lr
    // 0x880698: tbnz            w0, #4, #0x8806ac
    // 0x88069c: nop             
    // 0x8806a0: r0 = "mako1"
    //     0x8806a0: add             x0, PP, #0x12, lsl #12  ; [pp+0x123c0] "mako1"
    //     0x8806a4: ldr             x0, [x0, #0x3c0]
    // 0x8806a8: b               #0x8838b4
    // 0x8806ac: ldur            x1, [fp, #-8]
    // 0x8806b0: r0 = LoadClassIdInstr(r1)
    //     0x8806b0: ldur            x0, [x1, #-1]
    //     0x8806b4: ubfx            x0, x0, #0xc, #0x14
    // 0x8806b8: r16 = "1"
    //     0x8806b8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8806bc: ldr             x16, [x16, #0x6a0]
    // 0x8806c0: stp             x16, x1, [SP]
    // 0x8806c4: mov             lr, x0
    // 0x8806c8: ldr             lr, [x21, lr, lsl #3]
    // 0x8806cc: blr             lr
    // 0x8806d0: tbnz            w0, #4, #0x8806e4
    // 0x8806d4: nop             
    // 0x8806d8: r0 = "mako2"
    //     0x8806d8: add             x0, PP, #0x12, lsl #12  ; [pp+0x123c8] "mako2"
    //     0x8806dc: ldr             x0, [x0, #0x3c8]
    // 0x8806e0: b               #0x8838b4
    // 0x8806e4: ldur            x1, [fp, #-8]
    // 0x8806e8: r0 = LoadClassIdInstr(r1)
    //     0x8806e8: ldur            x0, [x1, #-1]
    //     0x8806ec: ubfx            x0, x0, #0xc, #0x14
    // 0x8806f0: r16 = "2"
    //     0x8806f0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8806f4: ldr             x16, [x16, #0x6a8]
    // 0x8806f8: stp             x16, x1, [SP]
    // 0x8806fc: mov             lr, x0
    // 0x880700: ldr             lr, [x21, lr, lsl #3]
    // 0x880704: blr             lr
    // 0x880708: tbnz            w0, #4, #0x88071c
    // 0x88070c: nop             
    // 0x880710: r0 = "mako3"
    //     0x880710: add             x0, PP, #0x12, lsl #12  ; [pp+0x123d0] "mako3"
    //     0x880714: ldr             x0, [x0, #0x3d0]
    // 0x880718: b               #0x8838b4
    // 0x88071c: ldur            x0, [fp, #-8]
    // 0x880720: r1 = LoadClassIdInstr(r0)
    //     0x880720: ldur            x1, [x0, #-1]
    //     0x880724: ubfx            x1, x1, #0xc, #0x14
    // 0x880728: r16 = "fail"
    //     0x880728: add             x16, PP, #0x11, lsl #12  ; [pp+0x11be8] "fail"
    //     0x88072c: ldr             x16, [x16, #0xbe8]
    // 0x880730: stp             x16, x0, [SP]
    // 0x880734: mov             x0, x1
    // 0x880738: mov             lr, x0
    // 0x88073c: ldr             lr, [x21, lr, lsl #3]
    // 0x880740: blr             lr
    // 0x880744: tbnz            w0, #4, #0x880758
    // 0x880748: nop             
    // 0x88074c: r0 = "no"
    //     0x88074c: add             x0, PP, #0x12, lsl #12  ; [pp+0x123d8] "no"
    //     0x880750: ldr             x0, [x0, #0x3d8]
    // 0x880754: b               #0x8838b4
    // 0x880758: r0 = "complete"
    //     0x880758: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x88075c: ldr             x0, [x0, #0x590]
    // 0x880760: b               #0x8838b4
    // 0x880764: r16 = "guanMemoryRyan"
    //     0x880764: add             x16, PP, #0x12, lsl #12  ; [pp+0x123e0] "guanMemoryRyan"
    //     0x880768: ldr             x16, [x16, #0x3e0]
    // 0x88076c: ldur            lr, [fp, #-0x28]
    // 0x880770: stp             lr, x16, [SP]
    // 0x880774: r0 = ==()
    //     0x880774: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x880778: tbnz            w0, #4, #0x88089c
    // 0x88077c: nop             
    // 0x880780: r0 = LoadStaticField(0xb54)
    //     0x880780: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880784: ldr             x0, [x0, #0x16a8]
    // 0x880788: cmp             w0, NULL
    // 0x88078c: b.ne            #0x88079c
    // 0x880790: nop             
    // 0x880794: r0 = Null
    //     0x880794: mov             x0, NULL
    // 0x880798: b               #0x8807c4
    // 0x88079c: r17 = 351
    //     0x88079c: movz            x17, #0x15f
    // 0x8807a0: ldr             w1, [x0, x17]
    // 0x8807a4: DecompressPointer r1
    //     0x8807a4: add             x1, x1, HEAP, lsl #32
    // 0x8807a8: r0 = LoadClassIdInstr(r1)
    //     0x8807a8: ldur            x0, [x1, #-1]
    //     0x8807ac: ubfx            x0, x0, #0xc, #0x14
    // 0x8807b0: r2 = "guanMemoryOptional1"
    //     0x8807b0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11ff8] "guanMemoryOptional1"
    //     0x8807b4: ldr             x2, [x2, #0xff8]
    // 0x8807b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8807b8: sub             lr, x0, #0xb4
    //     0x8807bc: ldr             lr, [x21, lr, lsl #3]
    //     0x8807c0: blr             lr
    // 0x8807c4: cmp             w0, NULL
    // 0x8807c8: b.ne            #0x8807d8
    // 0x8807cc: nop             
    // 0x8807d0: r3 = ""
    //     0x8807d0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8807d4: b               #0x8807dc
    // 0x8807d8: mov             x3, x0
    // 0x8807dc: mov             x0, x3
    // 0x8807e0: stur            x3, [fp, #-8]
    // 0x8807e4: r2 = Null
    //     0x8807e4: mov             x2, NULL
    // 0x8807e8: r1 = Null
    //     0x8807e8: mov             x1, NULL
    // 0x8807ec: r4 = 59
    //     0x8807ec: movz            x4, #0x3b
    // 0x8807f0: branchIfSmi(r0, 0x880800)
    //     0x8807f0: tbz             w0, #0, #0x880800
    //     0x8807f4: nop             
    // 0x8807f8: r4 = LoadClassIdInstr(r0)
    //     0x8807f8: ldur            x4, [x0, #-1]
    //     0x8807fc: ubfx            x4, x4, #0xc, #0x14
    // 0x880800: sub             x4, x4, #0x5d
    // 0x880804: cmp             x4, #1
    // 0x880808: b.ls            #0x880820
    // 0x88080c: nop             
    // 0x880810: r8 = String
    //     0x880810: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880814: r3 = Null
    //     0x880814: add             x3, PP, #0x12, lsl #12  ; [pp+0x123e8] Null
    //     0x880818: ldr             x3, [x3, #0x3e8]
    // 0x88081c: r0 = String()
    //     0x88081c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880820: ldur            x1, [fp, #-8]
    // 0x880824: r0 = LoadClassIdInstr(r1)
    //     0x880824: ldur            x0, [x1, #-1]
    //     0x880828: ubfx            x0, x0, #0xc, #0x14
    // 0x88082c: r16 = ""
    //     0x88082c: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880830: stp             x16, x1, [SP]
    // 0x880834: mov             lr, x0
    // 0x880838: ldr             lr, [x21, lr, lsl #3]
    // 0x88083c: blr             lr
    // 0x880840: tbnz            w0, #4, #0x880854
    // 0x880844: nop             
    // 0x880848: r0 = "ryan1"
    //     0x880848: add             x0, PP, #0x12, lsl #12  ; [pp+0x123f8] "ryan1"
    //     0x88084c: ldr             x0, [x0, #0x3f8]
    // 0x880850: b               #0x8838b4
    // 0x880854: ldur            x0, [fp, #-8]
    // 0x880858: r1 = LoadClassIdInstr(r0)
    //     0x880858: ldur            x1, [x0, #-1]
    //     0x88085c: ubfx            x1, x1, #0xc, #0x14
    // 0x880860: r16 = "1"
    //     0x880860: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x880864: ldr             x16, [x16, #0x6a0]
    // 0x880868: stp             x16, x0, [SP]
    // 0x88086c: mov             x0, x1
    // 0x880870: mov             lr, x0
    // 0x880874: ldr             lr, [x21, lr, lsl #3]
    // 0x880878: blr             lr
    // 0x88087c: tbnz            w0, #4, #0x880890
    // 0x880880: nop             
    // 0x880884: r0 = "ryan2"
    //     0x880884: add             x0, PP, #0x12, lsl #12  ; [pp+0x12400] "ryan2"
    //     0x880888: ldr             x0, [x0, #0x400]
    // 0x88088c: b               #0x8838b4
    // 0x880890: r0 = "complete"
    //     0x880890: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x880894: ldr             x0, [x0, #0x590]
    // 0x880898: b               #0x8838b4
    // 0x88089c: r16 = "guanMemorySwimmingFinale"
    //     0x88089c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12408] "guanMemorySwimmingFinale"
    //     0x8808a0: ldr             x16, [x16, #0x408]
    // 0x8808a4: ldur            lr, [fp, #-0x28]
    // 0x8808a8: stp             lr, x16, [SP]
    // 0x8808ac: r0 = ==()
    //     0x8808ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8808b0: tbnz            w0, #4, #0x880998
    // 0x8808b4: nop             
    // 0x8808b8: r0 = LoadStaticField(0xb54)
    //     0x8808b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8808bc: ldr             x0, [x0, #0x16a8]
    // 0x8808c0: cmp             w0, NULL
    // 0x8808c4: b.ne            #0x8808d4
    // 0x8808c8: nop             
    // 0x8808cc: r0 = Null
    //     0x8808cc: mov             x0, NULL
    // 0x8808d0: b               #0x8808fc
    // 0x8808d4: r17 = 351
    //     0x8808d4: movz            x17, #0x15f
    // 0x8808d8: ldr             w1, [x0, x17]
    // 0x8808dc: DecompressPointer r1
    //     0x8808dc: add             x1, x1, HEAP, lsl #32
    // 0x8808e0: r0 = LoadClassIdInstr(r1)
    //     0x8808e0: ldur            x0, [x1, #-1]
    //     0x8808e4: ubfx            x0, x0, #0xc, #0x14
    // 0x8808e8: r2 = "guanMemoryOptional3"
    //     0x8808e8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12168] "guanMemoryOptional3"
    //     0x8808ec: ldr             x2, [x2, #0x168]
    // 0x8808f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8808f0: sub             lr, x0, #0xb4
    //     0x8808f4: ldr             lr, [x21, lr, lsl #3]
    //     0x8808f8: blr             lr
    // 0x8808fc: cmp             w0, NULL
    // 0x880900: b.ne            #0x880910
    // 0x880904: nop             
    // 0x880908: r3 = ""
    //     0x880908: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88090c: b               #0x880914
    // 0x880910: mov             x3, x0
    // 0x880914: mov             x0, x3
    // 0x880918: stur            x3, [fp, #-8]
    // 0x88091c: r2 = Null
    //     0x88091c: mov             x2, NULL
    // 0x880920: r1 = Null
    //     0x880920: mov             x1, NULL
    // 0x880924: r4 = 59
    //     0x880924: movz            x4, #0x3b
    // 0x880928: branchIfSmi(r0, 0x880938)
    //     0x880928: tbz             w0, #0, #0x880938
    //     0x88092c: nop             
    // 0x880930: r4 = LoadClassIdInstr(r0)
    //     0x880930: ldur            x4, [x0, #-1]
    //     0x880934: ubfx            x4, x4, #0xc, #0x14
    // 0x880938: sub             x4, x4, #0x5d
    // 0x88093c: cmp             x4, #1
    // 0x880940: b.ls            #0x880958
    // 0x880944: nop             
    // 0x880948: r8 = String
    //     0x880948: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88094c: r3 = Null
    //     0x88094c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12410] Null
    //     0x880950: ldr             x3, [x3, #0x410]
    // 0x880954: r0 = String()
    //     0x880954: bl              #0x1523244  ; IsType_String_Stub
    // 0x880958: ldur            x0, [fp, #-8]
    // 0x88095c: r1 = LoadClassIdInstr(r0)
    //     0x88095c: ldur            x1, [x0, #-1]
    //     0x880960: ubfx            x1, x1, #0xc, #0x14
    // 0x880964: r16 = ""
    //     0x880964: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880968: stp             x16, x0, [SP]
    // 0x88096c: mov             x0, x1
    // 0x880970: mov             lr, x0
    // 0x880974: ldr             lr, [x21, lr, lsl #3]
    // 0x880978: blr             lr
    // 0x88097c: tbnz            w0, #4, #0x880990
    // 0x880980: nop             
    // 0x880984: r0 = "finale"
    //     0x880984: add             x0, PP, #0x12, lsl #12  ; [pp+0x12420] "finale"
    //     0x880988: ldr             x0, [x0, #0x420]
    // 0x88098c: b               #0x8838b4
    // 0x880990: r0 = "end"
    //     0x880990: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x880994: b               #0x8838b4
    // 0x880998: r16 = "oldjimamemoryPrawn"
    //     0x880998: add             x16, PP, #0x12, lsl #12  ; [pp+0x12428] "oldjimamemoryPrawn"
    //     0x88099c: ldr             x16, [x16, #0x428]
    // 0x8809a0: ldur            lr, [fp, #-0x28]
    // 0x8809a4: stp             lr, x16, [SP]
    // 0x8809a8: r0 = ==()
    //     0x8809a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8809ac: tbnz            w0, #4, #0x880a94
    // 0x8809b0: nop             
    // 0x8809b4: r0 = LoadStaticField(0xb54)
    //     0x8809b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8809b8: ldr             x0, [x0, #0x16a8]
    // 0x8809bc: cmp             w0, NULL
    // 0x8809c0: b.ne            #0x8809d0
    // 0x8809c4: nop             
    // 0x8809c8: r0 = Null
    //     0x8809c8: mov             x0, NULL
    // 0x8809cc: b               #0x8809f8
    // 0x8809d0: r17 = 351
    //     0x8809d0: movz            x17, #0x15f
    // 0x8809d4: ldr             w1, [x0, x17]
    // 0x8809d8: DecompressPointer r1
    //     0x8809d8: add             x1, x1, HEAP, lsl #32
    // 0x8809dc: r0 = LoadClassIdInstr(r1)
    //     0x8809dc: ldur            x0, [x1, #-1]
    //     0x8809e0: ubfx            x0, x0, #0xc, #0x14
    // 0x8809e4: r2 = "oldjimamemoryPrawn"
    //     0x8809e4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12428] "oldjimamemoryPrawn"
    //     0x8809e8: ldr             x2, [x2, #0x428]
    // 0x8809ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8809ec: sub             lr, x0, #0xb4
    //     0x8809f0: ldr             lr, [x21, lr, lsl #3]
    //     0x8809f4: blr             lr
    // 0x8809f8: cmp             w0, NULL
    // 0x8809fc: b.ne            #0x880a0c
    // 0x880a00: nop             
    // 0x880a04: r3 = ""
    //     0x880a04: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880a08: b               #0x880a10
    // 0x880a0c: mov             x3, x0
    // 0x880a10: mov             x0, x3
    // 0x880a14: stur            x3, [fp, #-8]
    // 0x880a18: r2 = Null
    //     0x880a18: mov             x2, NULL
    // 0x880a1c: r1 = Null
    //     0x880a1c: mov             x1, NULL
    // 0x880a20: r4 = 59
    //     0x880a20: movz            x4, #0x3b
    // 0x880a24: branchIfSmi(r0, 0x880a34)
    //     0x880a24: tbz             w0, #0, #0x880a34
    //     0x880a28: nop             
    // 0x880a2c: r4 = LoadClassIdInstr(r0)
    //     0x880a2c: ldur            x4, [x0, #-1]
    //     0x880a30: ubfx            x4, x4, #0xc, #0x14
    // 0x880a34: sub             x4, x4, #0x5d
    // 0x880a38: cmp             x4, #1
    // 0x880a3c: b.ls            #0x880a54
    // 0x880a40: nop             
    // 0x880a44: r8 = String
    //     0x880a44: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880a48: r3 = Null
    //     0x880a48: add             x3, PP, #0x12, lsl #12  ; [pp+0x12430] Null
    //     0x880a4c: ldr             x3, [x3, #0x430]
    // 0x880a50: r0 = String()
    //     0x880a50: bl              #0x1523244  ; IsType_String_Stub
    // 0x880a54: ldur            x0, [fp, #-8]
    // 0x880a58: r1 = LoadClassIdInstr(r0)
    //     0x880a58: ldur            x1, [x0, #-1]
    //     0x880a5c: ubfx            x1, x1, #0xc, #0x14
    // 0x880a60: r16 = ""
    //     0x880a60: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880a64: stp             x16, x0, [SP]
    // 0x880a68: mov             x0, x1
    // 0x880a6c: mov             lr, x0
    // 0x880a70: ldr             lr, [x21, lr, lsl #3]
    // 0x880a74: blr             lr
    // 0x880a78: tbnz            w0, #4, #0x880a8c
    // 0x880a7c: nop             
    // 0x880a80: r0 = "story"
    //     0x880a80: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x880a84: ldr             x0, [x0, #0x440]
    // 0x880a88: b               #0x8838b4
    // 0x880a8c: r0 = "end"
    //     0x880a8c: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x880a90: b               #0x8838b4
    // 0x880a94: r16 = "oldjimaMemoryElderWife"
    //     0x880a94: add             x16, PP, #0x12, lsl #12  ; [pp+0x12448] "oldjimaMemoryElderWife"
    //     0x880a98: ldr             x16, [x16, #0x448]
    // 0x880a9c: ldur            lr, [fp, #-0x28]
    // 0x880aa0: stp             lr, x16, [SP]
    // 0x880aa4: r0 = ==()
    //     0x880aa4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x880aa8: tbnz            w0, #4, #0x881128
    // 0x880aac: nop             
    // 0x880ab0: r0 = LoadStaticField(0xb54)
    //     0x880ab0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880ab4: ldr             x0, [x0, #0x16a8]
    // 0x880ab8: cmp             w0, NULL
    // 0x880abc: b.ne            #0x880acc
    // 0x880ac0: nop             
    // 0x880ac4: r0 = Null
    //     0x880ac4: mov             x0, NULL
    // 0x880ac8: b               #0x880af4
    // 0x880acc: r17 = 351
    //     0x880acc: movz            x17, #0x15f
    // 0x880ad0: ldr             w1, [x0, x17]
    // 0x880ad4: DecompressPointer r1
    //     0x880ad4: add             x1, x1, HEAP, lsl #32
    // 0x880ad8: r0 = LoadClassIdInstr(r1)
    //     0x880ad8: ldur            x0, [x1, #-1]
    //     0x880adc: ubfx            x0, x0, #0xc, #0x14
    // 0x880ae0: r2 = "oldjimamemorySalmon"
    //     0x880ae0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12450] "oldjimamemorySalmon"
    //     0x880ae4: ldr             x2, [x2, #0x450]
    // 0x880ae8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880ae8: sub             lr, x0, #0xb4
    //     0x880aec: ldr             lr, [x21, lr, lsl #3]
    //     0x880af0: blr             lr
    // 0x880af4: cmp             w0, NULL
    // 0x880af8: b.ne            #0x880b08
    // 0x880afc: nop             
    // 0x880b00: r3 = ""
    //     0x880b00: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880b04: b               #0x880b0c
    // 0x880b08: mov             x3, x0
    // 0x880b0c: mov             x0, x3
    // 0x880b10: stur            x3, [fp, #-8]
    // 0x880b14: r2 = Null
    //     0x880b14: mov             x2, NULL
    // 0x880b18: r1 = Null
    //     0x880b18: mov             x1, NULL
    // 0x880b1c: r4 = 59
    //     0x880b1c: movz            x4, #0x3b
    // 0x880b20: branchIfSmi(r0, 0x880b30)
    //     0x880b20: tbz             w0, #0, #0x880b30
    //     0x880b24: nop             
    // 0x880b28: r4 = LoadClassIdInstr(r0)
    //     0x880b28: ldur            x4, [x0, #-1]
    //     0x880b2c: ubfx            x4, x4, #0xc, #0x14
    // 0x880b30: sub             x4, x4, #0x5d
    // 0x880b34: cmp             x4, #1
    // 0x880b38: b.ls            #0x880b50
    // 0x880b3c: nop             
    // 0x880b40: r8 = String
    //     0x880b40: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880b44: r3 = Null
    //     0x880b44: add             x3, PP, #0x12, lsl #12  ; [pp+0x12458] Null
    //     0x880b48: ldr             x3, [x3, #0x458]
    // 0x880b4c: r0 = String()
    //     0x880b4c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880b50: r0 = LoadStaticField(0xb54)
    //     0x880b50: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880b54: ldr             x0, [x0, #0x16a8]
    // 0x880b58: cmp             w0, NULL
    // 0x880b5c: b.ne            #0x880b6c
    // 0x880b60: nop             
    // 0x880b64: r0 = Null
    //     0x880b64: mov             x0, NULL
    // 0x880b68: b               #0x880b94
    // 0x880b6c: r17 = 351
    //     0x880b6c: movz            x17, #0x15f
    // 0x880b70: ldr             w1, [x0, x17]
    // 0x880b74: DecompressPointer r1
    //     0x880b74: add             x1, x1, HEAP, lsl #32
    // 0x880b78: r0 = LoadClassIdInstr(r1)
    //     0x880b78: ldur            x0, [x1, #-1]
    //     0x880b7c: ubfx            x0, x0, #0xc, #0x14
    // 0x880b80: r2 = "oldjimamemoryChicken"
    //     0x880b80: add             x2, PP, #0x12, lsl #12  ; [pp+0x12468] "oldjimamemoryChicken"
    //     0x880b84: ldr             x2, [x2, #0x468]
    // 0x880b88: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880b88: sub             lr, x0, #0xb4
    //     0x880b8c: ldr             lr, [x21, lr, lsl #3]
    //     0x880b90: blr             lr
    // 0x880b94: cmp             w0, NULL
    // 0x880b98: b.ne            #0x880ba8
    // 0x880b9c: nop             
    // 0x880ba0: r3 = ""
    //     0x880ba0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880ba4: b               #0x880bac
    // 0x880ba8: mov             x3, x0
    // 0x880bac: mov             x0, x3
    // 0x880bb0: stur            x3, [fp, #-0x10]
    // 0x880bb4: r2 = Null
    //     0x880bb4: mov             x2, NULL
    // 0x880bb8: r1 = Null
    //     0x880bb8: mov             x1, NULL
    // 0x880bbc: r4 = 59
    //     0x880bbc: movz            x4, #0x3b
    // 0x880bc0: branchIfSmi(r0, 0x880bd0)
    //     0x880bc0: tbz             w0, #0, #0x880bd0
    //     0x880bc4: nop             
    // 0x880bc8: r4 = LoadClassIdInstr(r0)
    //     0x880bc8: ldur            x4, [x0, #-1]
    //     0x880bcc: ubfx            x4, x4, #0xc, #0x14
    // 0x880bd0: sub             x4, x4, #0x5d
    // 0x880bd4: cmp             x4, #1
    // 0x880bd8: b.ls            #0x880bf0
    // 0x880bdc: nop             
    // 0x880be0: r8 = String
    //     0x880be0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880be4: r3 = Null
    //     0x880be4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12470] Null
    //     0x880be8: ldr             x3, [x3, #0x470]
    // 0x880bec: r0 = String()
    //     0x880bec: bl              #0x1523244  ; IsType_String_Stub
    // 0x880bf0: r0 = LoadStaticField(0xb54)
    //     0x880bf0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880bf4: ldr             x0, [x0, #0x16a8]
    // 0x880bf8: cmp             w0, NULL
    // 0x880bfc: b.ne            #0x880c0c
    // 0x880c00: nop             
    // 0x880c04: r0 = Null
    //     0x880c04: mov             x0, NULL
    // 0x880c08: b               #0x880c34
    // 0x880c0c: r17 = 351
    //     0x880c0c: movz            x17, #0x15f
    // 0x880c10: ldr             w1, [x0, x17]
    // 0x880c14: DecompressPointer r1
    //     0x880c14: add             x1, x1, HEAP, lsl #32
    // 0x880c18: r0 = LoadClassIdInstr(r1)
    //     0x880c18: ldur            x0, [x1, #-1]
    //     0x880c1c: ubfx            x0, x0, #0xc, #0x14
    // 0x880c20: r2 = "oldjimamemoryCabbage"
    //     0x880c20: add             x2, PP, #0x12, lsl #12  ; [pp+0x12480] "oldjimamemoryCabbage"
    //     0x880c24: ldr             x2, [x2, #0x480]
    // 0x880c28: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880c28: sub             lr, x0, #0xb4
    //     0x880c2c: ldr             lr, [x21, lr, lsl #3]
    //     0x880c30: blr             lr
    // 0x880c34: cmp             w0, NULL
    // 0x880c38: b.ne            #0x880c48
    // 0x880c3c: nop             
    // 0x880c40: r3 = ""
    //     0x880c40: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880c44: b               #0x880c4c
    // 0x880c48: mov             x3, x0
    // 0x880c4c: mov             x0, x3
    // 0x880c50: stur            x3, [fp, #-0x18]
    // 0x880c54: r2 = Null
    //     0x880c54: mov             x2, NULL
    // 0x880c58: r1 = Null
    //     0x880c58: mov             x1, NULL
    // 0x880c5c: r4 = 59
    //     0x880c5c: movz            x4, #0x3b
    // 0x880c60: branchIfSmi(r0, 0x880c70)
    //     0x880c60: tbz             w0, #0, #0x880c70
    //     0x880c64: nop             
    // 0x880c68: r4 = LoadClassIdInstr(r0)
    //     0x880c68: ldur            x4, [x0, #-1]
    //     0x880c6c: ubfx            x4, x4, #0xc, #0x14
    // 0x880c70: sub             x4, x4, #0x5d
    // 0x880c74: cmp             x4, #1
    // 0x880c78: b.ls            #0x880c90
    // 0x880c7c: nop             
    // 0x880c80: r8 = String
    //     0x880c80: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880c84: r3 = Null
    //     0x880c84: add             x3, PP, #0x12, lsl #12  ; [pp+0x12488] Null
    //     0x880c88: ldr             x3, [x3, #0x488]
    // 0x880c8c: r0 = String()
    //     0x880c8c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880c90: r0 = LoadStaticField(0xb54)
    //     0x880c90: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880c94: ldr             x0, [x0, #0x16a8]
    // 0x880c98: cmp             w0, NULL
    // 0x880c9c: b.ne            #0x880cac
    // 0x880ca0: nop             
    // 0x880ca4: r0 = Null
    //     0x880ca4: mov             x0, NULL
    // 0x880ca8: b               #0x880cd4
    // 0x880cac: r17 = 351
    //     0x880cac: movz            x17, #0x15f
    // 0x880cb0: ldr             w1, [x0, x17]
    // 0x880cb4: DecompressPointer r1
    //     0x880cb4: add             x1, x1, HEAP, lsl #32
    // 0x880cb8: r0 = LoadClassIdInstr(r1)
    //     0x880cb8: ldur            x0, [x1, #-1]
    //     0x880cbc: ubfx            x0, x0, #0xc, #0x14
    // 0x880cc0: r2 = "oldjimamemoryCarrot"
    //     0x880cc0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12498] "oldjimamemoryCarrot"
    //     0x880cc4: ldr             x2, [x2, #0x498]
    // 0x880cc8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880cc8: sub             lr, x0, #0xb4
    //     0x880ccc: ldr             lr, [x21, lr, lsl #3]
    //     0x880cd0: blr             lr
    // 0x880cd4: cmp             w0, NULL
    // 0x880cd8: b.ne            #0x880ce8
    // 0x880cdc: nop             
    // 0x880ce0: r3 = ""
    //     0x880ce0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880ce4: b               #0x880cec
    // 0x880ce8: mov             x3, x0
    // 0x880cec: mov             x0, x3
    // 0x880cf0: stur            x3, [fp, #-0x20]
    // 0x880cf4: r2 = Null
    //     0x880cf4: mov             x2, NULL
    // 0x880cf8: r1 = Null
    //     0x880cf8: mov             x1, NULL
    // 0x880cfc: r4 = 59
    //     0x880cfc: movz            x4, #0x3b
    // 0x880d00: branchIfSmi(r0, 0x880d10)
    //     0x880d00: tbz             w0, #0, #0x880d10
    //     0x880d04: nop             
    // 0x880d08: r4 = LoadClassIdInstr(r0)
    //     0x880d08: ldur            x4, [x0, #-1]
    //     0x880d0c: ubfx            x4, x4, #0xc, #0x14
    // 0x880d10: sub             x4, x4, #0x5d
    // 0x880d14: cmp             x4, #1
    // 0x880d18: b.ls            #0x880d30
    // 0x880d1c: nop             
    // 0x880d20: r8 = String
    //     0x880d20: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880d24: r3 = Null
    //     0x880d24: add             x3, PP, #0x12, lsl #12  ; [pp+0x124a0] Null
    //     0x880d28: ldr             x3, [x3, #0x4a0]
    // 0x880d2c: r0 = String()
    //     0x880d2c: bl              #0x1523244  ; IsType_String_Stub
    // 0x880d30: r0 = LoadStaticField(0xb54)
    //     0x880d30: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880d34: ldr             x0, [x0, #0x16a8]
    // 0x880d38: cmp             w0, NULL
    // 0x880d3c: b.ne            #0x880d4c
    // 0x880d40: nop             
    // 0x880d44: r0 = Null
    //     0x880d44: mov             x0, NULL
    // 0x880d48: b               #0x880d74
    // 0x880d4c: r17 = 351
    //     0x880d4c: movz            x17, #0x15f
    // 0x880d50: ldr             w1, [x0, x17]
    // 0x880d54: DecompressPointer r1
    //     0x880d54: add             x1, x1, HEAP, lsl #32
    // 0x880d58: r0 = LoadClassIdInstr(r1)
    //     0x880d58: ldur            x0, [x1, #-1]
    //     0x880d5c: ubfx            x0, x0, #0xc, #0x14
    // 0x880d60: r2 = "oldjimamemoryPotato"
    //     0x880d60: add             x2, PP, #0x12, lsl #12  ; [pp+0x124b0] "oldjimamemoryPotato"
    //     0x880d64: ldr             x2, [x2, #0x4b0]
    // 0x880d68: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880d68: sub             lr, x0, #0xb4
    //     0x880d6c: ldr             lr, [x21, lr, lsl #3]
    //     0x880d70: blr             lr
    // 0x880d74: cmp             w0, NULL
    // 0x880d78: b.ne            #0x880d88
    // 0x880d7c: nop             
    // 0x880d80: r3 = ""
    //     0x880d80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880d84: b               #0x880d8c
    // 0x880d88: mov             x3, x0
    // 0x880d8c: mov             x0, x3
    // 0x880d90: stur            x3, [fp, #-0x30]
    // 0x880d94: r2 = Null
    //     0x880d94: mov             x2, NULL
    // 0x880d98: r1 = Null
    //     0x880d98: mov             x1, NULL
    // 0x880d9c: r4 = 59
    //     0x880d9c: movz            x4, #0x3b
    // 0x880da0: branchIfSmi(r0, 0x880db0)
    //     0x880da0: tbz             w0, #0, #0x880db0
    //     0x880da4: nop             
    // 0x880da8: r4 = LoadClassIdInstr(r0)
    //     0x880da8: ldur            x4, [x0, #-1]
    //     0x880dac: ubfx            x4, x4, #0xc, #0x14
    // 0x880db0: sub             x4, x4, #0x5d
    // 0x880db4: cmp             x4, #1
    // 0x880db8: b.ls            #0x880dd0
    // 0x880dbc: nop             
    // 0x880dc0: r8 = String
    //     0x880dc0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880dc4: r3 = Null
    //     0x880dc4: add             x3, PP, #0x12, lsl #12  ; [pp+0x124b8] Null
    //     0x880dc8: ldr             x3, [x3, #0x4b8]
    // 0x880dcc: r0 = String()
    //     0x880dcc: bl              #0x1523244  ; IsType_String_Stub
    // 0x880dd0: r0 = LoadStaticField(0xb54)
    //     0x880dd0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x880dd4: ldr             x0, [x0, #0x16a8]
    // 0x880dd8: cmp             w0, NULL
    // 0x880ddc: b.ne            #0x880dec
    // 0x880de0: nop             
    // 0x880de4: r0 = Null
    //     0x880de4: mov             x0, NULL
    // 0x880de8: b               #0x880e14
    // 0x880dec: r17 = 351
    //     0x880dec: movz            x17, #0x15f
    // 0x880df0: ldr             w1, [x0, x17]
    // 0x880df4: DecompressPointer r1
    //     0x880df4: add             x1, x1, HEAP, lsl #32
    // 0x880df8: r0 = LoadClassIdInstr(r1)
    //     0x880df8: ldur            x0, [x1, #-1]
    //     0x880dfc: ubfx            x0, x0, #0xc, #0x14
    // 0x880e00: r2 = "oldjimamemoryPrawn"
    //     0x880e00: add             x2, PP, #0x12, lsl #12  ; [pp+0x12428] "oldjimamemoryPrawn"
    //     0x880e04: ldr             x2, [x2, #0x428]
    // 0x880e08: r0 = GDT[cid_x0 + -0xb4]()
    //     0x880e08: sub             lr, x0, #0xb4
    //     0x880e0c: ldr             lr, [x21, lr, lsl #3]
    //     0x880e10: blr             lr
    // 0x880e14: cmp             w0, NULL
    // 0x880e18: b.ne            #0x880e28
    // 0x880e1c: nop             
    // 0x880e20: r4 = ""
    //     0x880e20: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x880e24: b               #0x880e2c
    // 0x880e28: mov             x4, x0
    // 0x880e2c: ldur            x3, [fp, #-8]
    // 0x880e30: mov             x0, x4
    // 0x880e34: stur            x4, [fp, #-0x40]
    // 0x880e38: r2 = Null
    //     0x880e38: mov             x2, NULL
    // 0x880e3c: r1 = Null
    //     0x880e3c: mov             x1, NULL
    // 0x880e40: r4 = 59
    //     0x880e40: movz            x4, #0x3b
    // 0x880e44: branchIfSmi(r0, 0x880e54)
    //     0x880e44: tbz             w0, #0, #0x880e54
    //     0x880e48: nop             
    // 0x880e4c: r4 = LoadClassIdInstr(r0)
    //     0x880e4c: ldur            x4, [x0, #-1]
    //     0x880e50: ubfx            x4, x4, #0xc, #0x14
    // 0x880e54: sub             x4, x4, #0x5d
    // 0x880e58: cmp             x4, #1
    // 0x880e5c: b.ls            #0x880e74
    // 0x880e60: nop             
    // 0x880e64: r8 = String
    //     0x880e64: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x880e68: r3 = Null
    //     0x880e68: add             x3, PP, #0x12, lsl #12  ; [pp+0x124c8] Null
    //     0x880e6c: ldr             x3, [x3, #0x4c8]
    // 0x880e70: r0 = String()
    //     0x880e70: bl              #0x1523244  ; IsType_String_Stub
    // 0x880e74: ldur            x0, [fp, #-0x40]
    // 0x880e78: r1 = LoadClassIdInstr(r0)
    //     0x880e78: ldur            x1, [x0, #-1]
    //     0x880e7c: ubfx            x1, x1, #0xc, #0x14
    // 0x880e80: r16 = "2"
    //     0x880e80: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880e84: ldr             x16, [x16, #0x6a8]
    // 0x880e88: stp             x16, x0, [SP]
    // 0x880e8c: mov             x0, x1
    // 0x880e90: mov             lr, x0
    // 0x880e94: ldr             lr, [x21, lr, lsl #3]
    // 0x880e98: blr             lr
    // 0x880e9c: mov             x2, x0
    // 0x880ea0: ldur            x1, [fp, #-8]
    // 0x880ea4: stur            x2, [fp, #-0x40]
    // 0x880ea8: r0 = LoadClassIdInstr(r1)
    //     0x880ea8: ldur            x0, [x1, #-1]
    //     0x880eac: ubfx            x0, x0, #0xc, #0x14
    // 0x880eb0: r16 = "2"
    //     0x880eb0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880eb4: ldr             x16, [x16, #0x6a8]
    // 0x880eb8: stp             x16, x1, [SP]
    // 0x880ebc: mov             lr, x0
    // 0x880ec0: ldr             lr, [x21, lr, lsl #3]
    // 0x880ec4: blr             lr
    // 0x880ec8: tbnz            w0, #4, #0x880fe4
    // 0x880ecc: nop             
    // 0x880ed0: ldur            x1, [fp, #-0x10]
    // 0x880ed4: r0 = LoadClassIdInstr(r1)
    //     0x880ed4: ldur            x0, [x1, #-1]
    //     0x880ed8: ubfx            x0, x0, #0xc, #0x14
    // 0x880edc: r16 = "1"
    //     0x880edc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x880ee0: ldr             x16, [x16, #0x6a0]
    // 0x880ee4: stp             x16, x1, [SP]
    // 0x880ee8: mov             lr, x0
    // 0x880eec: ldr             lr, [x21, lr, lsl #3]
    // 0x880ef0: blr             lr
    // 0x880ef4: tbz             w0, #4, #0x880f28
    // 0x880ef8: nop             
    // 0x880efc: ldur            x1, [fp, #-0x10]
    // 0x880f00: r0 = LoadClassIdInstr(r1)
    //     0x880f00: ldur            x0, [x1, #-1]
    //     0x880f04: ubfx            x0, x0, #0xc, #0x14
    // 0x880f08: r16 = "2"
    //     0x880f08: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880f0c: ldr             x16, [x16, #0x6a8]
    // 0x880f10: stp             x16, x1, [SP]
    // 0x880f14: mov             lr, x0
    // 0x880f18: ldr             lr, [x21, lr, lsl #3]
    // 0x880f1c: blr             lr
    // 0x880f20: tbnz            w0, #4, #0x880fdc
    // 0x880f24: nop             
    // 0x880f28: ldur            x1, [fp, #-0x18]
    // 0x880f2c: r0 = LoadClassIdInstr(r1)
    //     0x880f2c: ldur            x0, [x1, #-1]
    //     0x880f30: ubfx            x0, x0, #0xc, #0x14
    // 0x880f34: r16 = "1"
    //     0x880f34: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x880f38: ldr             x16, [x16, #0x6a0]
    // 0x880f3c: stp             x16, x1, [SP]
    // 0x880f40: mov             lr, x0
    // 0x880f44: ldr             lr, [x21, lr, lsl #3]
    // 0x880f48: blr             lr
    // 0x880f4c: tbnz            w0, #4, #0x880fd4
    // 0x880f50: nop             
    // 0x880f54: ldur            x1, [fp, #-0x20]
    // 0x880f58: r0 = LoadClassIdInstr(r1)
    //     0x880f58: ldur            x0, [x1, #-1]
    //     0x880f5c: ubfx            x0, x0, #0xc, #0x14
    // 0x880f60: r16 = "1"
    //     0x880f60: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x880f64: ldr             x16, [x16, #0x6a0]
    // 0x880f68: stp             x16, x1, [SP]
    // 0x880f6c: mov             lr, x0
    // 0x880f70: ldr             lr, [x21, lr, lsl #3]
    // 0x880f74: blr             lr
    // 0x880f78: tbnz            w0, #4, #0x880fcc
    // 0x880f7c: nop             
    // 0x880f80: ldur            x1, [fp, #-0x30]
    // 0x880f84: r0 = LoadClassIdInstr(r1)
    //     0x880f84: ldur            x0, [x1, #-1]
    //     0x880f88: ubfx            x0, x0, #0xc, #0x14
    // 0x880f8c: r16 = "1"
    //     0x880f8c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x880f90: ldr             x16, [x16, #0x6a0]
    // 0x880f94: stp             x16, x1, [SP]
    // 0x880f98: mov             lr, x0
    // 0x880f9c: ldr             lr, [x21, lr, lsl #3]
    // 0x880fa0: blr             lr
    // 0x880fa4: tbnz            w0, #4, #0x880fc4
    // 0x880fa8: nop             
    // 0x880fac: ldur            x1, [fp, #-0x40]
    // 0x880fb0: tbnz            w1, #4, #0x880fe8
    // 0x880fb4: nop             
    // 0x880fb8: r0 = "completeSpecial"
    //     0x880fb8: add             x0, PP, #0x12, lsl #12  ; [pp+0x124d8] "completeSpecial"
    //     0x880fbc: ldr             x0, [x0, #0x4d8]
    // 0x880fc0: b               #0x8838b4
    // 0x880fc4: ldur            x1, [fp, #-0x40]
    // 0x880fc8: b               #0x880fe8
    // 0x880fcc: ldur            x1, [fp, #-0x40]
    // 0x880fd0: b               #0x880fe8
    // 0x880fd4: ldur            x1, [fp, #-0x40]
    // 0x880fd8: b               #0x880fe8
    // 0x880fdc: ldur            x1, [fp, #-0x40]
    // 0x880fe0: b               #0x880fe8
    // 0x880fe4: ldur            x1, [fp, #-0x40]
    // 0x880fe8: ldur            x0, [fp, #-8]
    // 0x880fec: r2 = LoadClassIdInstr(r0)
    //     0x880fec: ldur            x2, [x0, #-1]
    //     0x880ff0: ubfx            x2, x2, #0xc, #0x14
    // 0x880ff4: r16 = "2"
    //     0x880ff4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x880ff8: ldr             x16, [x16, #0x6a8]
    // 0x880ffc: stp             x16, x0, [SP]
    // 0x881000: mov             x0, x2
    // 0x881004: mov             lr, x0
    // 0x881008: ldr             lr, [x21, lr, lsl #3]
    // 0x88100c: blr             lr
    // 0x881010: tbnz            w0, #4, #0x88111c
    // 0x881014: nop             
    // 0x881018: ldur            x1, [fp, #-0x10]
    // 0x88101c: r0 = LoadClassIdInstr(r1)
    //     0x88101c: ldur            x0, [x1, #-1]
    //     0x881020: ubfx            x0, x0, #0xc, #0x14
    // 0x881024: r16 = "1"
    //     0x881024: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x881028: ldr             x16, [x16, #0x6a0]
    // 0x88102c: stp             x16, x1, [SP]
    // 0x881030: mov             lr, x0
    // 0x881034: ldr             lr, [x21, lr, lsl #3]
    // 0x881038: blr             lr
    // 0x88103c: tbz             w0, #4, #0x881074
    // 0x881040: nop             
    // 0x881044: ldur            x0, [fp, #-0x10]
    // 0x881048: r1 = LoadClassIdInstr(r0)
    //     0x881048: ldur            x1, [x0, #-1]
    //     0x88104c: ubfx            x1, x1, #0xc, #0x14
    // 0x881050: r16 = "2"
    //     0x881050: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x881054: ldr             x16, [x16, #0x6a8]
    // 0x881058: stp             x16, x0, [SP]
    // 0x88105c: mov             x0, x1
    // 0x881060: mov             lr, x0
    // 0x881064: ldr             lr, [x21, lr, lsl #3]
    // 0x881068: blr             lr
    // 0x88106c: tbnz            w0, #4, #0x88111c
    // 0x881070: nop             
    // 0x881074: ldur            x0, [fp, #-0x18]
    // 0x881078: r1 = LoadClassIdInstr(r0)
    //     0x881078: ldur            x1, [x0, #-1]
    //     0x88107c: ubfx            x1, x1, #0xc, #0x14
    // 0x881080: r16 = "1"
    //     0x881080: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x881084: ldr             x16, [x16, #0x6a0]
    // 0x881088: stp             x16, x0, [SP]
    // 0x88108c: mov             x0, x1
    // 0x881090: mov             lr, x0
    // 0x881094: ldr             lr, [x21, lr, lsl #3]
    // 0x881098: blr             lr
    // 0x88109c: tbnz            w0, #4, #0x88111c
    // 0x8810a0: nop             
    // 0x8810a4: ldur            x0, [fp, #-0x20]
    // 0x8810a8: r1 = LoadClassIdInstr(r0)
    //     0x8810a8: ldur            x1, [x0, #-1]
    //     0x8810ac: ubfx            x1, x1, #0xc, #0x14
    // 0x8810b0: r16 = "1"
    //     0x8810b0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8810b4: ldr             x16, [x16, #0x6a0]
    // 0x8810b8: stp             x16, x0, [SP]
    // 0x8810bc: mov             x0, x1
    // 0x8810c0: mov             lr, x0
    // 0x8810c4: ldr             lr, [x21, lr, lsl #3]
    // 0x8810c8: blr             lr
    // 0x8810cc: tbnz            w0, #4, #0x88111c
    // 0x8810d0: nop             
    // 0x8810d4: ldur            x0, [fp, #-0x30]
    // 0x8810d8: r1 = LoadClassIdInstr(r0)
    //     0x8810d8: ldur            x1, [x0, #-1]
    //     0x8810dc: ubfx            x1, x1, #0xc, #0x14
    // 0x8810e0: r16 = "1"
    //     0x8810e0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8810e4: ldr             x16, [x16, #0x6a0]
    // 0x8810e8: stp             x16, x0, [SP]
    // 0x8810ec: mov             x0, x1
    // 0x8810f0: mov             lr, x0
    // 0x8810f4: ldr             lr, [x21, lr, lsl #3]
    // 0x8810f8: blr             lr
    // 0x8810fc: tbnz            w0, #4, #0x88111c
    // 0x881100: nop             
    // 0x881104: ldur            x0, [fp, #-0x40]
    // 0x881108: tbz             w0, #4, #0x88111c
    // 0x88110c: nop             
    // 0x881110: r0 = "complete"
    //     0x881110: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x881114: ldr             x0, [x0, #0x590]
    // 0x881118: b               #0x8838b4
    // 0x88111c: r0 = "inProgress"
    //     0x88111c: add             x0, PP, #0x11, lsl #12  ; [pp+0x115b8] "inProgress"
    //     0x881120: ldr             x0, [x0, #0x5b8]
    // 0x881124: b               #0x8838b4
    // 0x881128: r16 = "oldjimaMemoryAngSnatch"
    //     0x881128: add             x16, PP, #0x12, lsl #12  ; [pp+0x124e0] "oldjimaMemoryAngSnatch"
    //     0x88112c: ldr             x16, [x16, #0x4e0]
    // 0x881130: ldur            lr, [fp, #-0x28]
    // 0x881134: stp             lr, x16, [SP]
    // 0x881138: r0 = ==()
    //     0x881138: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88113c: tbnz            w0, #4, #0x8812f8
    // 0x881140: nop             
    // 0x881144: r0 = LoadStaticField(0xb54)
    //     0x881144: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881148: ldr             x0, [x0, #0x16a8]
    // 0x88114c: cmp             w0, NULL
    // 0x881150: b.ne            #0x881160
    // 0x881154: nop             
    // 0x881158: r0 = Null
    //     0x881158: mov             x0, NULL
    // 0x88115c: b               #0x881188
    // 0x881160: r17 = 351
    //     0x881160: movz            x17, #0x15f
    // 0x881164: ldr             w1, [x0, x17]
    // 0x881168: DecompressPointer r1
    //     0x881168: add             x1, x1, HEAP, lsl #32
    // 0x88116c: r0 = LoadClassIdInstr(r1)
    //     0x88116c: ldur            x0, [x1, #-1]
    //     0x881170: ubfx            x0, x0, #0xc, #0x14
    // 0x881174: r2 = "oldjimamemoryAng"
    //     0x881174: add             x2, PP, #0x12, lsl #12  ; [pp+0x124e8] "oldjimamemoryAng"
    //     0x881178: ldr             x2, [x2, #0x4e8]
    // 0x88117c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88117c: sub             lr, x0, #0xb4
    //     0x881180: ldr             lr, [x21, lr, lsl #3]
    //     0x881184: blr             lr
    // 0x881188: cmp             w0, NULL
    // 0x88118c: b.ne            #0x88119c
    // 0x881190: nop             
    // 0x881194: r3 = ""
    //     0x881194: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881198: b               #0x8811a0
    // 0x88119c: mov             x3, x0
    // 0x8811a0: mov             x0, x3
    // 0x8811a4: stur            x3, [fp, #-8]
    // 0x8811a8: r2 = Null
    //     0x8811a8: mov             x2, NULL
    // 0x8811ac: r1 = Null
    //     0x8811ac: mov             x1, NULL
    // 0x8811b0: r4 = 59
    //     0x8811b0: movz            x4, #0x3b
    // 0x8811b4: branchIfSmi(r0, 0x8811c4)
    //     0x8811b4: tbz             w0, #0, #0x8811c4
    //     0x8811b8: nop             
    // 0x8811bc: r4 = LoadClassIdInstr(r0)
    //     0x8811bc: ldur            x4, [x0, #-1]
    //     0x8811c0: ubfx            x4, x4, #0xc, #0x14
    // 0x8811c4: sub             x4, x4, #0x5d
    // 0x8811c8: cmp             x4, #1
    // 0x8811cc: b.ls            #0x8811e4
    // 0x8811d0: nop             
    // 0x8811d4: r8 = String
    //     0x8811d4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8811d8: r3 = Null
    //     0x8811d8: add             x3, PP, #0x12, lsl #12  ; [pp+0x124f0] Null
    //     0x8811dc: ldr             x3, [x3, #0x4f0]
    // 0x8811e0: r0 = String()
    //     0x8811e0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8811e4: r0 = LoadStaticField(0xb54)
    //     0x8811e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8811e8: ldr             x0, [x0, #0x16a8]
    // 0x8811ec: cmp             w0, NULL
    // 0x8811f0: b.ne            #0x881200
    // 0x8811f4: nop             
    // 0x8811f8: r0 = Null
    //     0x8811f8: mov             x0, NULL
    // 0x8811fc: b               #0x881228
    // 0x881200: r17 = 351
    //     0x881200: movz            x17, #0x15f
    // 0x881204: ldr             w1, [x0, x17]
    // 0x881208: DecompressPointer r1
    //     0x881208: add             x1, x1, HEAP, lsl #32
    // 0x88120c: r0 = LoadClassIdInstr(r1)
    //     0x88120c: ldur            x0, [x1, #-1]
    //     0x881210: ubfx            x0, x0, #0xc, #0x14
    // 0x881214: r2 = "oldjimamemoryPrawn"
    //     0x881214: add             x2, PP, #0x12, lsl #12  ; [pp+0x12428] "oldjimamemoryPrawn"
    //     0x881218: ldr             x2, [x2, #0x428]
    // 0x88121c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88121c: sub             lr, x0, #0xb4
    //     0x881220: ldr             lr, [x21, lr, lsl #3]
    //     0x881224: blr             lr
    // 0x881228: cmp             w0, NULL
    // 0x88122c: b.ne            #0x88123c
    // 0x881230: nop             
    // 0x881234: r4 = ""
    //     0x881234: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881238: b               #0x881240
    // 0x88123c: mov             x4, x0
    // 0x881240: ldur            x3, [fp, #-8]
    // 0x881244: mov             x0, x4
    // 0x881248: stur            x4, [fp, #-0x10]
    // 0x88124c: r2 = Null
    //     0x88124c: mov             x2, NULL
    // 0x881250: r1 = Null
    //     0x881250: mov             x1, NULL
    // 0x881254: r4 = 59
    //     0x881254: movz            x4, #0x3b
    // 0x881258: branchIfSmi(r0, 0x881268)
    //     0x881258: tbz             w0, #0, #0x881268
    //     0x88125c: nop             
    // 0x881260: r4 = LoadClassIdInstr(r0)
    //     0x881260: ldur            x4, [x0, #-1]
    //     0x881264: ubfx            x4, x4, #0xc, #0x14
    // 0x881268: sub             x4, x4, #0x5d
    // 0x88126c: cmp             x4, #1
    // 0x881270: b.ls            #0x881288
    // 0x881274: nop             
    // 0x881278: r8 = String
    //     0x881278: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88127c: r3 = Null
    //     0x88127c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12500] Null
    //     0x881280: ldr             x3, [x3, #0x500]
    // 0x881284: r0 = String()
    //     0x881284: bl              #0x1523244  ; IsType_String_Stub
    // 0x881288: ldur            x0, [fp, #-8]
    // 0x88128c: r1 = LoadClassIdInstr(r0)
    //     0x88128c: ldur            x1, [x0, #-1]
    //     0x881290: ubfx            x1, x1, #0xc, #0x14
    // 0x881294: r16 = ""
    //     0x881294: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881298: stp             x16, x0, [SP]
    // 0x88129c: mov             x0, x1
    // 0x8812a0: mov             lr, x0
    // 0x8812a4: ldr             lr, [x21, lr, lsl #3]
    // 0x8812a8: blr             lr
    // 0x8812ac: tbnz            w0, #4, #0x8812f0
    // 0x8812b0: nop             
    // 0x8812b4: ldur            x0, [fp, #-0x10]
    // 0x8812b8: r1 = LoadClassIdInstr(r0)
    //     0x8812b8: ldur            x1, [x0, #-1]
    //     0x8812bc: ubfx            x1, x1, #0xc, #0x14
    // 0x8812c0: r16 = "2"
    //     0x8812c0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8812c4: ldr             x16, [x16, #0x6a8]
    // 0x8812c8: stp             x16, x0, [SP]
    // 0x8812cc: mov             x0, x1
    // 0x8812d0: mov             lr, x0
    // 0x8812d4: ldr             lr, [x21, lr, lsl #3]
    // 0x8812d8: blr             lr
    // 0x8812dc: tbnz            w0, #4, #0x8812f0
    // 0x8812e0: nop             
    // 0x8812e4: r0 = "angQuest"
    //     0x8812e4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12510] "angQuest"
    //     0x8812e8: ldr             x0, [x0, #0x510]
    // 0x8812ec: b               #0x8838b4
    // 0x8812f0: r0 = "end"
    //     0x8812f0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x8812f4: b               #0x8838b4
    // 0x8812f8: r16 = "oldjimaMemoryRowan"
    //     0x8812f8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12518] "oldjimaMemoryRowan"
    //     0x8812fc: ldr             x16, [x16, #0x518]
    // 0x881300: ldur            lr, [fp, #-0x28]
    // 0x881304: stp             lr, x16, [SP]
    // 0x881308: r0 = ==()
    //     0x881308: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88130c: tbnz            w0, #4, #0x881434
    // 0x881310: nop             
    // 0x881314: r0 = LoadStaticField(0xb54)
    //     0x881314: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881318: ldr             x0, [x0, #0x16a8]
    // 0x88131c: cmp             w0, NULL
    // 0x881320: b.ne            #0x881330
    // 0x881324: nop             
    // 0x881328: r0 = Null
    //     0x881328: mov             x0, NULL
    // 0x88132c: b               #0x881358
    // 0x881330: r17 = 351
    //     0x881330: movz            x17, #0x15f
    // 0x881334: ldr             w1, [x0, x17]
    // 0x881338: DecompressPointer r1
    //     0x881338: add             x1, x1, HEAP, lsl #32
    // 0x88133c: r0 = LoadClassIdInstr(r1)
    //     0x88133c: ldur            x0, [x1, #-1]
    //     0x881340: ubfx            x0, x0, #0xc, #0x14
    // 0x881344: r2 = "oldjimamemorySalmon"
    //     0x881344: add             x2, PP, #0x12, lsl #12  ; [pp+0x12450] "oldjimamemorySalmon"
    //     0x881348: ldr             x2, [x2, #0x450]
    // 0x88134c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88134c: sub             lr, x0, #0xb4
    //     0x881350: ldr             lr, [x21, lr, lsl #3]
    //     0x881354: blr             lr
    // 0x881358: cmp             w0, NULL
    // 0x88135c: b.ne            #0x88136c
    // 0x881360: nop             
    // 0x881364: r3 = ""
    //     0x881364: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881368: b               #0x881370
    // 0x88136c: mov             x3, x0
    // 0x881370: mov             x0, x3
    // 0x881374: stur            x3, [fp, #-8]
    // 0x881378: r2 = Null
    //     0x881378: mov             x2, NULL
    // 0x88137c: r1 = Null
    //     0x88137c: mov             x1, NULL
    // 0x881380: r4 = 59
    //     0x881380: movz            x4, #0x3b
    // 0x881384: branchIfSmi(r0, 0x881394)
    //     0x881384: tbz             w0, #0, #0x881394
    //     0x881388: nop             
    // 0x88138c: r4 = LoadClassIdInstr(r0)
    //     0x88138c: ldur            x4, [x0, #-1]
    //     0x881390: ubfx            x4, x4, #0xc, #0x14
    // 0x881394: sub             x4, x4, #0x5d
    // 0x881398: cmp             x4, #1
    // 0x88139c: b.ls            #0x8813b4
    // 0x8813a0: nop             
    // 0x8813a4: r8 = String
    //     0x8813a4: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8813a8: r3 = Null
    //     0x8813a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12520] Null
    //     0x8813ac: ldr             x3, [x3, #0x520]
    // 0x8813b0: r0 = String()
    //     0x8813b0: bl              #0x1523244  ; IsType_String_Stub
    // 0x8813b4: ldur            x1, [fp, #-8]
    // 0x8813b8: r0 = LoadClassIdInstr(r1)
    //     0x8813b8: ldur            x0, [x1, #-1]
    //     0x8813bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8813c0: r16 = "2"
    //     0x8813c0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8813c4: ldr             x16, [x16, #0x6a8]
    // 0x8813c8: stp             x16, x1, [SP]
    // 0x8813cc: mov             lr, x0
    // 0x8813d0: ldr             lr, [x21, lr, lsl #3]
    // 0x8813d4: blr             lr
    // 0x8813d8: tbnz            w0, #4, #0x8813ec
    // 0x8813dc: nop             
    // 0x8813e0: r0 = "finish"
    //     0x8813e0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12530] "finish"
    //     0x8813e4: ldr             x0, [x0, #0x530]
    // 0x8813e8: b               #0x8838b4
    // 0x8813ec: ldur            x0, [fp, #-8]
    // 0x8813f0: r1 = LoadClassIdInstr(r0)
    //     0x8813f0: ldur            x1, [x0, #-1]
    //     0x8813f4: ubfx            x1, x1, #0xc, #0x14
    // 0x8813f8: r16 = "1"
    //     0x8813f8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8813fc: ldr             x16, [x16, #0x6a0]
    // 0x881400: stp             x16, x0, [SP]
    // 0x881404: mov             x0, x1
    // 0x881408: mov             lr, x0
    // 0x88140c: ldr             lr, [x21, lr, lsl #3]
    // 0x881410: blr             lr
    // 0x881414: tbnz            w0, #4, #0x881428
    // 0x881418: nop             
    // 0x88141c: r0 = "quest"
    //     0x88141c: add             x0, PP, #0x11, lsl #12  ; [pp+0x116e8] "quest"
    //     0x881420: ldr             x0, [x0, #0x6e8]
    // 0x881424: b               #0x8838b4
    // 0x881428: r0 = "firstTime"
    //     0x881428: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x88142c: ldr             x0, [x0, #0x598]
    // 0x881430: b               #0x8838b4
    // 0x881434: r16 = "oldjimaMemoryChicken"
    //     0x881434: add             x16, PP, #0x12, lsl #12  ; [pp+0x12538] "oldjimaMemoryChicken"
    //     0x881438: ldr             x16, [x16, #0x538]
    // 0x88143c: ldur            lr, [fp, #-0x28]
    // 0x881440: stp             lr, x16, [SP]
    // 0x881444: r0 = ==()
    //     0x881444: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881448: tbnz            w0, #4, #0x881534
    // 0x88144c: nop             
    // 0x881450: r0 = LoadStaticField(0xb54)
    //     0x881450: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881454: ldr             x0, [x0, #0x16a8]
    // 0x881458: cmp             w0, NULL
    // 0x88145c: b.ne            #0x88146c
    // 0x881460: nop             
    // 0x881464: r0 = Null
    //     0x881464: mov             x0, NULL
    // 0x881468: b               #0x881494
    // 0x88146c: r17 = 351
    //     0x88146c: movz            x17, #0x15f
    // 0x881470: ldr             w1, [x0, x17]
    // 0x881474: DecompressPointer r1
    //     0x881474: add             x1, x1, HEAP, lsl #32
    // 0x881478: r0 = LoadClassIdInstr(r1)
    //     0x881478: ldur            x0, [x1, #-1]
    //     0x88147c: ubfx            x0, x0, #0xc, #0x14
    // 0x881480: r2 = "oldjimamemoryChicken"
    //     0x881480: add             x2, PP, #0x12, lsl #12  ; [pp+0x12468] "oldjimamemoryChicken"
    //     0x881484: ldr             x2, [x2, #0x468]
    // 0x881488: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881488: sub             lr, x0, #0xb4
    //     0x88148c: ldr             lr, [x21, lr, lsl #3]
    //     0x881490: blr             lr
    // 0x881494: cmp             w0, NULL
    // 0x881498: b.ne            #0x8814a8
    // 0x88149c: nop             
    // 0x8814a0: r3 = ""
    //     0x8814a0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8814a4: b               #0x8814ac
    // 0x8814a8: mov             x3, x0
    // 0x8814ac: mov             x0, x3
    // 0x8814b0: stur            x3, [fp, #-8]
    // 0x8814b4: r2 = Null
    //     0x8814b4: mov             x2, NULL
    // 0x8814b8: r1 = Null
    //     0x8814b8: mov             x1, NULL
    // 0x8814bc: r4 = 59
    //     0x8814bc: movz            x4, #0x3b
    // 0x8814c0: branchIfSmi(r0, 0x8814d0)
    //     0x8814c0: tbz             w0, #0, #0x8814d0
    //     0x8814c4: nop             
    // 0x8814c8: r4 = LoadClassIdInstr(r0)
    //     0x8814c8: ldur            x4, [x0, #-1]
    //     0x8814cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8814d0: sub             x4, x4, #0x5d
    // 0x8814d4: cmp             x4, #1
    // 0x8814d8: b.ls            #0x8814f0
    // 0x8814dc: nop             
    // 0x8814e0: r8 = String
    //     0x8814e0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8814e4: r3 = Null
    //     0x8814e4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12540] Null
    //     0x8814e8: ldr             x3, [x3, #0x540]
    // 0x8814ec: r0 = String()
    //     0x8814ec: bl              #0x1523244  ; IsType_String_Stub
    // 0x8814f0: ldur            x0, [fp, #-8]
    // 0x8814f4: r1 = LoadClassIdInstr(r0)
    //     0x8814f4: ldur            x1, [x0, #-1]
    //     0x8814f8: ubfx            x1, x1, #0xc, #0x14
    // 0x8814fc: r16 = ""
    //     0x8814fc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881500: stp             x16, x0, [SP]
    // 0x881504: mov             x0, x1
    // 0x881508: mov             lr, x0
    // 0x88150c: ldr             lr, [x21, lr, lsl #3]
    // 0x881510: blr             lr
    // 0x881514: tbnz            w0, #4, #0x881528
    // 0x881518: nop             
    // 0x88151c: r0 = "story"
    //     0x88151c: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x881520: ldr             x0, [x0, #0x440]
    // 0x881524: b               #0x8838b4
    // 0x881528: r0 = "postStory"
    //     0x881528: add             x0, PP, #0x12, lsl #12  ; [pp+0x12550] "postStory"
    //     0x88152c: ldr             x0, [x0, #0x550]
    // 0x881530: b               #0x8838b4
    // 0x881534: r16 = "oldjimaMemoryPotato"
    //     0x881534: add             x16, PP, #0x12, lsl #12  ; [pp+0x12558] "oldjimaMemoryPotato"
    //     0x881538: ldr             x16, [x16, #0x558]
    // 0x88153c: ldur            lr, [fp, #-0x28]
    // 0x881540: stp             lr, x16, [SP]
    // 0x881544: r0 = ==()
    //     0x881544: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881548: tbnz            w0, #4, #0x881890
    // 0x88154c: nop             
    // 0x881550: r0 = LoadStaticField(0xb54)
    //     0x881550: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881554: ldr             x0, [x0, #0x16a8]
    // 0x881558: cmp             w0, NULL
    // 0x88155c: b.ne            #0x88156c
    // 0x881560: nop             
    // 0x881564: r0 = Null
    //     0x881564: mov             x0, NULL
    // 0x881568: b               #0x881594
    // 0x88156c: r17 = 351
    //     0x88156c: movz            x17, #0x15f
    // 0x881570: ldr             w1, [x0, x17]
    // 0x881574: DecompressPointer r1
    //     0x881574: add             x1, x1, HEAP, lsl #32
    // 0x881578: r0 = LoadClassIdInstr(r1)
    //     0x881578: ldur            x0, [x1, #-1]
    //     0x88157c: ubfx            x0, x0, #0xc, #0x14
    // 0x881580: r2 = "oldjimamemoryPotato"
    //     0x881580: add             x2, PP, #0x12, lsl #12  ; [pp+0x124b0] "oldjimamemoryPotato"
    //     0x881584: ldr             x2, [x2, #0x4b0]
    // 0x881588: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881588: sub             lr, x0, #0xb4
    //     0x88158c: ldr             lr, [x21, lr, lsl #3]
    //     0x881590: blr             lr
    // 0x881594: cmp             w0, NULL
    // 0x881598: b.ne            #0x8815a8
    // 0x88159c: nop             
    // 0x8815a0: r3 = ""
    //     0x8815a0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8815a4: b               #0x8815ac
    // 0x8815a8: mov             x3, x0
    // 0x8815ac: mov             x0, x3
    // 0x8815b0: stur            x3, [fp, #-8]
    // 0x8815b4: r2 = Null
    //     0x8815b4: mov             x2, NULL
    // 0x8815b8: r1 = Null
    //     0x8815b8: mov             x1, NULL
    // 0x8815bc: r4 = 59
    //     0x8815bc: movz            x4, #0x3b
    // 0x8815c0: branchIfSmi(r0, 0x8815d0)
    //     0x8815c0: tbz             w0, #0, #0x8815d0
    //     0x8815c4: nop             
    // 0x8815c8: r4 = LoadClassIdInstr(r0)
    //     0x8815c8: ldur            x4, [x0, #-1]
    //     0x8815cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8815d0: sub             x4, x4, #0x5d
    // 0x8815d4: cmp             x4, #1
    // 0x8815d8: b.ls            #0x8815f0
    // 0x8815dc: nop             
    // 0x8815e0: r8 = String
    //     0x8815e0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8815e4: r3 = Null
    //     0x8815e4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12560] Null
    //     0x8815e8: ldr             x3, [x3, #0x560]
    // 0x8815ec: r0 = String()
    //     0x8815ec: bl              #0x1523244  ; IsType_String_Stub
    // 0x8815f0: r0 = LoadStaticField(0xb54)
    //     0x8815f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8815f4: ldr             x0, [x0, #0x16a8]
    // 0x8815f8: cmp             w0, NULL
    // 0x8815fc: b.ne            #0x88160c
    // 0x881600: nop             
    // 0x881604: r0 = Null
    //     0x881604: mov             x0, NULL
    // 0x881608: b               #0x881634
    // 0x88160c: r17 = 351
    //     0x88160c: movz            x17, #0x15f
    // 0x881610: ldr             w1, [x0, x17]
    // 0x881614: DecompressPointer r1
    //     0x881614: add             x1, x1, HEAP, lsl #32
    // 0x881618: r0 = LoadClassIdInstr(r1)
    //     0x881618: ldur            x0, [x1, #-1]
    //     0x88161c: ubfx            x0, x0, #0xc, #0x14
    // 0x881620: r2 = "oldjimamemoryChicken"
    //     0x881620: add             x2, PP, #0x12, lsl #12  ; [pp+0x12468] "oldjimamemoryChicken"
    //     0x881624: ldr             x2, [x2, #0x468]
    // 0x881628: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881628: sub             lr, x0, #0xb4
    //     0x88162c: ldr             lr, [x21, lr, lsl #3]
    //     0x881630: blr             lr
    // 0x881634: cmp             w0, NULL
    // 0x881638: b.ne            #0x881648
    // 0x88163c: nop             
    // 0x881640: r3 = ""
    //     0x881640: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881644: b               #0x88164c
    // 0x881648: mov             x3, x0
    // 0x88164c: mov             x0, x3
    // 0x881650: stur            x3, [fp, #-0x10]
    // 0x881654: r2 = Null
    //     0x881654: mov             x2, NULL
    // 0x881658: r1 = Null
    //     0x881658: mov             x1, NULL
    // 0x88165c: r4 = 59
    //     0x88165c: movz            x4, #0x3b
    // 0x881660: branchIfSmi(r0, 0x881670)
    //     0x881660: tbz             w0, #0, #0x881670
    //     0x881664: nop             
    // 0x881668: r4 = LoadClassIdInstr(r0)
    //     0x881668: ldur            x4, [x0, #-1]
    //     0x88166c: ubfx            x4, x4, #0xc, #0x14
    // 0x881670: sub             x4, x4, #0x5d
    // 0x881674: cmp             x4, #1
    // 0x881678: b.ls            #0x881690
    // 0x88167c: nop             
    // 0x881680: r8 = String
    //     0x881680: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881684: r3 = Null
    //     0x881684: add             x3, PP, #0x12, lsl #12  ; [pp+0x12570] Null
    //     0x881688: ldr             x3, [x3, #0x570]
    // 0x88168c: r0 = String()
    //     0x88168c: bl              #0x1523244  ; IsType_String_Stub
    // 0x881690: r0 = LoadStaticField(0xb54)
    //     0x881690: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881694: ldr             x0, [x0, #0x16a8]
    // 0x881698: cmp             w0, NULL
    // 0x88169c: b.ne            #0x8816ac
    // 0x8816a0: nop             
    // 0x8816a4: r0 = Null
    //     0x8816a4: mov             x0, NULL
    // 0x8816a8: b               #0x8816d4
    // 0x8816ac: r17 = 331
    //     0x8816ac: movz            x17, #0x14b
    // 0x8816b0: ldr             w1, [x0, x17]
    // 0x8816b4: DecompressPointer r1
    //     0x8816b4: add             x1, x1, HEAP, lsl #32
    // 0x8816b8: r0 = LoadClassIdInstr(r1)
    //     0x8816b8: ldur            x0, [x1, #-1]
    //     0x8816bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8816c0: r2 = "memory"
    //     0x8816c0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x8816c4: ldr             x2, [x2, #0xa18]
    // 0x8816c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8816c8: sub             lr, x0, #0xb4
    //     0x8816cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8816d0: blr             lr
    // 0x8816d4: cmp             w0, NULL
    // 0x8816d8: b.ne            #0x8816f4
    // 0x8816dc: nop             
    // 0x8816e0: r1 = Null
    //     0x8816e0: mov             x1, NULL
    // 0x8816e4: r2 = 0
    //     0x8816e4: movz            x2, #0
    // 0x8816e8: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x8816e8: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x8816ec: mov             x3, x0
    // 0x8816f0: b               #0x8816f8
    // 0x8816f4: mov             x3, x0
    // 0x8816f8: mov             x0, x3
    // 0x8816fc: stur            x3, [fp, #-0x18]
    // 0x881700: r2 = Null
    //     0x881700: mov             x2, NULL
    // 0x881704: r1 = Null
    //     0x881704: mov             x1, NULL
    // 0x881708: r4 = 59
    //     0x881708: movz            x4, #0x3b
    // 0x88170c: branchIfSmi(r0, 0x88171c)
    //     0x88170c: tbz             w0, #0, #0x88171c
    //     0x881710: nop             
    // 0x881714: r4 = LoadClassIdInstr(r0)
    //     0x881714: ldur            x4, [x0, #-1]
    //     0x881718: ubfx            x4, x4, #0xc, #0x14
    // 0x88171c: cmp             x4, #0xcdb
    // 0x881720: b.eq            #0x88173c
    // 0x881724: nop             
    // 0x881728: r8 = Timestamp
    //     0x881728: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x88172c: ldr             x8, [x8, #0xa30]
    // 0x881730: r3 = Null
    //     0x881730: add             x3, PP, #0x12, lsl #12  ; [pp+0x12580] Null
    //     0x881734: ldr             x3, [x3, #0x580]
    // 0x881738: r0 = Timestamp()
    //     0x881738: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x88173c: r1 = "memoryCountdownMinute"
    //     0x88173c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11b68] "memoryCountdownMinute"
    //     0x881740: ldr             x1, [x1, #0xb68]
    // 0x881744: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x881744: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x881748: r0 = getCustomEventNumber()
    //     0x881748: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x88174c: stur            x0, [fp, #-0x38]
    // 0x881750: r0 = getTrueDateTime()
    //     0x881750: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x881754: ldur            x1, [fp, #-0x18]
    // 0x881758: stur            x0, [fp, #-0x18]
    // 0x88175c: r0 = toDate()
    //     0x88175c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x881760: ldur            x1, [fp, #-0x18]
    // 0x881764: mov             x2, x0
    // 0x881768: r0 = difference()
    //     0x881768: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x88176c: mov             x1, x0
    // 0x881770: r0 = inMinutes()
    //     0x881770: bl              #0x8a6d94  ; [dart:core] Duration::inMinutes
    // 0x881774: mov             x1, x0
    // 0x881778: ldur            x0, [fp, #-0x38]
    // 0x88177c: sub             x2, x0, x1
    // 0x881780: tbz             x2, #0x3f, #0x881790
    // 0x881784: nop             
    // 0x881788: r1 = 0
    //     0x881788: movz            x1, #0
    // 0x88178c: b               #0x881794
    // 0x881790: mov             x1, x2
    // 0x881794: ldur            x0, [fp, #-8]
    // 0x881798: stur            x1, [fp, #-0x38]
    // 0x88179c: r2 = LoadClassIdInstr(r0)
    //     0x88179c: ldur            x2, [x0, #-1]
    //     0x8817a0: ubfx            x2, x2, #0xc, #0x14
    // 0x8817a4: r16 = "1"
    //     0x8817a4: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8817a8: ldr             x16, [x16, #0x6a0]
    // 0x8817ac: stp             x16, x0, [SP]
    // 0x8817b0: mov             x0, x2
    // 0x8817b4: mov             lr, x0
    // 0x8817b8: ldr             lr, [x21, lr, lsl #3]
    // 0x8817bc: blr             lr
    // 0x8817c0: r1 = "memoryTotalMinute"
    //     0x8817c0: add             x1, PP, #0x12, lsl #12  ; [pp+0x12590] "memoryTotalMinute"
    //     0x8817c4: ldr             x1, [x1, #0x590]
    // 0x8817c8: stur            x0, [fp, #-8]
    // 0x8817cc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8817cc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8817d0: r0 = getCustomEventNumber()
    //     0x8817d0: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x8817d4: mov             x1, x0
    // 0x8817d8: ldur            x0, [fp, #-0x38]
    // 0x8817dc: sub             x2, x1, x0
    // 0x8817e0: ldur            x0, [fp, #-8]
    // 0x8817e4: tbnz            w0, #4, #0x8817f8
    // 0x8817e8: nop             
    // 0x8817ec: r0 = "completeQuest"
    //     0x8817ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12598] "completeQuest"
    //     0x8817f0: ldr             x0, [x0, #0x598]
    // 0x8817f4: b               #0x8838b4
    // 0x8817f8: cmp             x2, #0x14
    // 0x8817fc: b.le            #0x881810
    // 0x881800: nop             
    // 0x881804: r0 = "failQuest"
    //     0x881804: add             x0, PP, #0x12, lsl #12  ; [pp+0x125a0] "failQuest"
    //     0x881808: ldr             x0, [x0, #0x5a0]
    // 0x88180c: b               #0x8838b4
    // 0x881810: ldur            x1, [fp, #-0x10]
    // 0x881814: r0 = LoadClassIdInstr(r1)
    //     0x881814: ldur            x0, [x1, #-1]
    //     0x881818: ubfx            x0, x0, #0xc, #0x14
    // 0x88181c: r16 = "1"
    //     0x88181c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x881820: ldr             x16, [x16, #0x6a0]
    // 0x881824: stp             x16, x1, [SP]
    // 0x881828: mov             lr, x0
    // 0x88182c: ldr             lr, [x21, lr, lsl #3]
    // 0x881830: blr             lr
    // 0x881834: tbnz            w0, #4, #0x881848
    // 0x881838: nop             
    // 0x88183c: r0 = "noEnoughChicken"
    //     0x88183c: add             x0, PP, #0x12, lsl #12  ; [pp+0x125a8] "noEnoughChicken"
    //     0x881840: ldr             x0, [x0, #0x5a8]
    // 0x881844: b               #0x8838b4
    // 0x881848: ldur            x0, [fp, #-0x10]
    // 0x88184c: r1 = LoadClassIdInstr(r0)
    //     0x88184c: ldur            x1, [x0, #-1]
    //     0x881850: ubfx            x1, x1, #0xc, #0x14
    // 0x881854: r16 = "2"
    //     0x881854: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x881858: ldr             x16, [x16, #0x6a8]
    // 0x88185c: stp             x16, x0, [SP]
    // 0x881860: mov             x0, x1
    // 0x881864: mov             lr, x0
    // 0x881868: ldr             lr, [x21, lr, lsl #3]
    // 0x88186c: blr             lr
    // 0x881870: tbnz            w0, #4, #0x881884
    // 0x881874: nop             
    // 0x881878: r0 = "gotChicken"
    //     0x881878: add             x0, PP, #0x12, lsl #12  ; [pp+0x125b0] "gotChicken"
    //     0x88187c: ldr             x0, [x0, #0x5b0]
    // 0x881880: b               #0x8838b4
    // 0x881884: r0 = "noChicken"
    //     0x881884: add             x0, PP, #0x12, lsl #12  ; [pp+0x125b8] "noChicken"
    //     0x881888: ldr             x0, [x0, #0x5b8]
    // 0x88188c: b               #0x8838b4
    // 0x881890: r16 = "oldjimaMemoryCabbage"
    //     0x881890: add             x16, PP, #0x12, lsl #12  ; [pp+0x125c0] "oldjimaMemoryCabbage"
    //     0x881894: ldr             x16, [x16, #0x5c0]
    // 0x881898: ldur            lr, [fp, #-0x28]
    // 0x88189c: stp             lr, x16, [SP]
    // 0x8818a0: r0 = ==()
    //     0x8818a0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8818a4: tbnz            w0, #4, #0x881990
    // 0x8818a8: nop             
    // 0x8818ac: r0 = LoadStaticField(0xb54)
    //     0x8818ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8818b0: ldr             x0, [x0, #0x16a8]
    // 0x8818b4: cmp             w0, NULL
    // 0x8818b8: b.ne            #0x8818c8
    // 0x8818bc: nop             
    // 0x8818c0: r0 = Null
    //     0x8818c0: mov             x0, NULL
    // 0x8818c4: b               #0x8818f0
    // 0x8818c8: r17 = 351
    //     0x8818c8: movz            x17, #0x15f
    // 0x8818cc: ldr             w1, [x0, x17]
    // 0x8818d0: DecompressPointer r1
    //     0x8818d0: add             x1, x1, HEAP, lsl #32
    // 0x8818d4: r0 = LoadClassIdInstr(r1)
    //     0x8818d4: ldur            x0, [x1, #-1]
    //     0x8818d8: ubfx            x0, x0, #0xc, #0x14
    // 0x8818dc: r2 = "oldjimamemoryCabbage"
    //     0x8818dc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12480] "oldjimamemoryCabbage"
    //     0x8818e0: ldr             x2, [x2, #0x480]
    // 0x8818e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8818e4: sub             lr, x0, #0xb4
    //     0x8818e8: ldr             lr, [x21, lr, lsl #3]
    //     0x8818ec: blr             lr
    // 0x8818f0: cmp             w0, NULL
    // 0x8818f4: b.ne            #0x881904
    // 0x8818f8: nop             
    // 0x8818fc: r3 = ""
    //     0x8818fc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881900: b               #0x881908
    // 0x881904: mov             x3, x0
    // 0x881908: mov             x0, x3
    // 0x88190c: stur            x3, [fp, #-8]
    // 0x881910: r2 = Null
    //     0x881910: mov             x2, NULL
    // 0x881914: r1 = Null
    //     0x881914: mov             x1, NULL
    // 0x881918: r4 = 59
    //     0x881918: movz            x4, #0x3b
    // 0x88191c: branchIfSmi(r0, 0x88192c)
    //     0x88191c: tbz             w0, #0, #0x88192c
    //     0x881920: nop             
    // 0x881924: r4 = LoadClassIdInstr(r0)
    //     0x881924: ldur            x4, [x0, #-1]
    //     0x881928: ubfx            x4, x4, #0xc, #0x14
    // 0x88192c: sub             x4, x4, #0x5d
    // 0x881930: cmp             x4, #1
    // 0x881934: b.ls            #0x88194c
    // 0x881938: nop             
    // 0x88193c: r8 = String
    //     0x88193c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881940: r3 = Null
    //     0x881940: add             x3, PP, #0x12, lsl #12  ; [pp+0x125c8] Null
    //     0x881944: ldr             x3, [x3, #0x5c8]
    // 0x881948: r0 = String()
    //     0x881948: bl              #0x1523244  ; IsType_String_Stub
    // 0x88194c: ldur            x0, [fp, #-8]
    // 0x881950: r1 = LoadClassIdInstr(r0)
    //     0x881950: ldur            x1, [x0, #-1]
    //     0x881954: ubfx            x1, x1, #0xc, #0x14
    // 0x881958: r16 = ""
    //     0x881958: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88195c: stp             x16, x0, [SP]
    // 0x881960: mov             x0, x1
    // 0x881964: mov             lr, x0
    // 0x881968: ldr             lr, [x21, lr, lsl #3]
    // 0x88196c: blr             lr
    // 0x881970: tbnz            w0, #4, #0x881984
    // 0x881974: nop             
    // 0x881978: r0 = "startQuest"
    //     0x881978: add             x0, PP, #0x12, lsl #12  ; [pp+0x125d8] "startQuest"
    //     0x88197c: ldr             x0, [x0, #0x5d8]
    // 0x881980: b               #0x8838b4
    // 0x881984: r0 = "endQuest"
    //     0x881984: add             x0, PP, #0x12, lsl #12  ; [pp+0x125e0] "endQuest"
    //     0x881988: ldr             x0, [x0, #0x5e0]
    // 0x88198c: b               #0x8838b4
    // 0x881990: r16 = "oldjimaMemoryCarrot"
    //     0x881990: add             x16, PP, #0x12, lsl #12  ; [pp+0x125e8] "oldjimaMemoryCarrot"
    //     0x881994: ldr             x16, [x16, #0x5e8]
    // 0x881998: ldur            lr, [fp, #-0x28]
    // 0x88199c: stp             lr, x16, [SP]
    // 0x8819a0: r0 = ==()
    //     0x8819a0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8819a4: tbnz            w0, #4, #0x881bd4
    // 0x8819a8: nop             
    // 0x8819ac: r0 = LoadStaticField(0xb54)
    //     0x8819ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8819b0: ldr             x0, [x0, #0x16a8]
    // 0x8819b4: cmp             w0, NULL
    // 0x8819b8: b.ne            #0x8819c8
    // 0x8819bc: nop             
    // 0x8819c0: r0 = Null
    //     0x8819c0: mov             x0, NULL
    // 0x8819c4: b               #0x8819f0
    // 0x8819c8: r17 = 351
    //     0x8819c8: movz            x17, #0x15f
    // 0x8819cc: ldr             w1, [x0, x17]
    // 0x8819d0: DecompressPointer r1
    //     0x8819d0: add             x1, x1, HEAP, lsl #32
    // 0x8819d4: r0 = LoadClassIdInstr(r1)
    //     0x8819d4: ldur            x0, [x1, #-1]
    //     0x8819d8: ubfx            x0, x0, #0xc, #0x14
    // 0x8819dc: r2 = "oldjimamemoryCarrot"
    //     0x8819dc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12498] "oldjimamemoryCarrot"
    //     0x8819e0: ldr             x2, [x2, #0x498]
    // 0x8819e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8819e4: sub             lr, x0, #0xb4
    //     0x8819e8: ldr             lr, [x21, lr, lsl #3]
    //     0x8819ec: blr             lr
    // 0x8819f0: cmp             w0, NULL
    // 0x8819f4: b.ne            #0x881a04
    // 0x8819f8: nop             
    // 0x8819fc: r3 = ""
    //     0x8819fc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881a00: b               #0x881a08
    // 0x881a04: mov             x3, x0
    // 0x881a08: mov             x0, x3
    // 0x881a0c: stur            x3, [fp, #-8]
    // 0x881a10: r2 = Null
    //     0x881a10: mov             x2, NULL
    // 0x881a14: r1 = Null
    //     0x881a14: mov             x1, NULL
    // 0x881a18: r4 = 59
    //     0x881a18: movz            x4, #0x3b
    // 0x881a1c: branchIfSmi(r0, 0x881a2c)
    //     0x881a1c: tbz             w0, #0, #0x881a2c
    //     0x881a20: nop             
    // 0x881a24: r4 = LoadClassIdInstr(r0)
    //     0x881a24: ldur            x4, [x0, #-1]
    //     0x881a28: ubfx            x4, x4, #0xc, #0x14
    // 0x881a2c: sub             x4, x4, #0x5d
    // 0x881a30: cmp             x4, #1
    // 0x881a34: b.ls            #0x881a4c
    // 0x881a38: nop             
    // 0x881a3c: r8 = String
    //     0x881a3c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881a40: r3 = Null
    //     0x881a40: add             x3, PP, #0x12, lsl #12  ; [pp+0x125f0] Null
    //     0x881a44: ldr             x3, [x3, #0x5f0]
    // 0x881a48: r0 = String()
    //     0x881a48: bl              #0x1523244  ; IsType_String_Stub
    // 0x881a4c: r0 = LoadStaticField(0xb54)
    //     0x881a4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881a50: ldr             x0, [x0, #0x16a8]
    // 0x881a54: cmp             w0, NULL
    // 0x881a58: b.ne            #0x881a68
    // 0x881a5c: nop             
    // 0x881a60: r0 = Null
    //     0x881a60: mov             x0, NULL
    // 0x881a64: b               #0x881a90
    // 0x881a68: r17 = 331
    //     0x881a68: movz            x17, #0x14b
    // 0x881a6c: ldr             w1, [x0, x17]
    // 0x881a70: DecompressPointer r1
    //     0x881a70: add             x1, x1, HEAP, lsl #32
    // 0x881a74: r0 = LoadClassIdInstr(r1)
    //     0x881a74: ldur            x0, [x1, #-1]
    //     0x881a78: ubfx            x0, x0, #0xc, #0x14
    // 0x881a7c: r2 = "memory"
    //     0x881a7c: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x881a80: ldr             x2, [x2, #0xa18]
    // 0x881a84: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881a84: sub             lr, x0, #0xb4
    //     0x881a88: ldr             lr, [x21, lr, lsl #3]
    //     0x881a8c: blr             lr
    // 0x881a90: cmp             w0, NULL
    // 0x881a94: b.ne            #0x881ab0
    // 0x881a98: nop             
    // 0x881a9c: r1 = Null
    //     0x881a9c: mov             x1, NULL
    // 0x881aa0: r2 = 0
    //     0x881aa0: movz            x2, #0
    // 0x881aa4: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x881aa4: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x881aa8: mov             x3, x0
    // 0x881aac: b               #0x881ab4
    // 0x881ab0: mov             x3, x0
    // 0x881ab4: mov             x0, x3
    // 0x881ab8: stur            x3, [fp, #-0x10]
    // 0x881abc: r2 = Null
    //     0x881abc: mov             x2, NULL
    // 0x881ac0: r1 = Null
    //     0x881ac0: mov             x1, NULL
    // 0x881ac4: r4 = 59
    //     0x881ac4: movz            x4, #0x3b
    // 0x881ac8: branchIfSmi(r0, 0x881ad8)
    //     0x881ac8: tbz             w0, #0, #0x881ad8
    //     0x881acc: nop             
    // 0x881ad0: r4 = LoadClassIdInstr(r0)
    //     0x881ad0: ldur            x4, [x0, #-1]
    //     0x881ad4: ubfx            x4, x4, #0xc, #0x14
    // 0x881ad8: cmp             x4, #0xcdb
    // 0x881adc: b.eq            #0x881af8
    // 0x881ae0: nop             
    // 0x881ae4: r8 = Timestamp
    //     0x881ae4: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x881ae8: ldr             x8, [x8, #0xa30]
    // 0x881aec: r3 = Null
    //     0x881aec: add             x3, PP, #0x12, lsl #12  ; [pp+0x12600] Null
    //     0x881af0: ldr             x3, [x3, #0x600]
    // 0x881af4: r0 = Timestamp()
    //     0x881af4: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x881af8: r1 = "memoryCountdownMinute"
    //     0x881af8: add             x1, PP, #0x11, lsl #12  ; [pp+0x11b68] "memoryCountdownMinute"
    //     0x881afc: ldr             x1, [x1, #0xb68]
    // 0x881b00: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x881b00: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x881b04: r0 = getCustomEventNumber()
    //     0x881b04: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x881b08: stur            x0, [fp, #-0x38]
    // 0x881b0c: r0 = getTrueDateTime()
    //     0x881b0c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x881b10: ldur            x1, [fp, #-0x10]
    // 0x881b14: stur            x0, [fp, #-0x10]
    // 0x881b18: r0 = toDate()
    //     0x881b18: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x881b1c: ldur            x1, [fp, #-0x10]
    // 0x881b20: mov             x2, x0
    // 0x881b24: r0 = difference()
    //     0x881b24: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x881b28: mov             x1, x0
    // 0x881b2c: r0 = inMinutes()
    //     0x881b2c: bl              #0x8a6d94  ; [dart:core] Duration::inMinutes
    // 0x881b30: mov             x1, x0
    // 0x881b34: ldur            x0, [fp, #-0x38]
    // 0x881b38: sub             x2, x0, x1
    // 0x881b3c: tbz             x2, #0x3f, #0x881b48
    // 0x881b40: nop             
    // 0x881b44: r2 = 0
    //     0x881b44: movz            x2, #0
    // 0x881b48: ldur            x0, [fp, #-8]
    // 0x881b4c: stur            x2, [fp, #-0x38]
    // 0x881b50: r1 = "memoryTotalMinute"
    //     0x881b50: add             x1, PP, #0x12, lsl #12  ; [pp+0x12590] "memoryTotalMinute"
    //     0x881b54: ldr             x1, [x1, #0x590]
    // 0x881b58: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x881b58: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x881b5c: r0 = getCustomEventNumber()
    //     0x881b5c: bl              #0x883a6c  ; [package:battlecross/eventWidget/eventMethod.dart] ::getCustomEventNumber
    // 0x881b60: mov             x1, x0
    // 0x881b64: ldur            x0, [fp, #-0x38]
    // 0x881b68: sub             x2, x1, x0
    // 0x881b6c: ldur            x0, [fp, #-8]
    // 0x881b70: stur            x2, [fp, #-0x80]
    // 0x881b74: r1 = LoadClassIdInstr(r0)
    //     0x881b74: ldur            x1, [x0, #-1]
    //     0x881b78: ubfx            x1, x1, #0xc, #0x14
    // 0x881b7c: r16 = "1"
    //     0x881b7c: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x881b80: ldr             x16, [x16, #0x6a0]
    // 0x881b84: stp             x16, x0, [SP]
    // 0x881b88: mov             x0, x1
    // 0x881b8c: mov             lr, x0
    // 0x881b90: ldr             lr, [x21, lr, lsl #3]
    // 0x881b94: blr             lr
    // 0x881b98: tbnz            w0, #4, #0x881bac
    // 0x881b9c: nop             
    // 0x881ba0: r0 = "alreadyBuy"
    //     0x881ba0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12610] "alreadyBuy"
    //     0x881ba4: ldr             x0, [x0, #0x610]
    // 0x881ba8: b               #0x8838b4
    // 0x881bac: ldur            x0, [fp, #-0x80]
    // 0x881bb0: cmp             x0, #0xf
    // 0x881bb4: b.le            #0x881bc8
    // 0x881bb8: nop             
    // 0x881bbc: r0 = "gotStock"
    //     0x881bbc: add             x0, PP, #0x12, lsl #12  ; [pp+0x12618] "gotStock"
    //     0x881bc0: ldr             x0, [x0, #0x618]
    // 0x881bc4: b               #0x8838b4
    // 0x881bc8: r0 = "noStock"
    //     0x881bc8: add             x0, PP, #0x12, lsl #12  ; [pp+0x12620] "noStock"
    //     0x881bcc: ldr             x0, [x0, #0x620]
    // 0x881bd0: b               #0x8838b4
    // 0x881bd4: r16 = "minamemoryRacket"
    //     0x881bd4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12628] "minamemoryRacket"
    //     0x881bd8: ldr             x16, [x16, #0x628]
    // 0x881bdc: ldur            lr, [fp, #-0x28]
    // 0x881be0: stp             lr, x16, [SP]
    // 0x881be4: r0 = ==()
    //     0x881be4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881be8: tbnz            w0, #4, #0x881cec
    // 0x881bec: nop             
    // 0x881bf0: r0 = LoadStaticField(0xb54)
    //     0x881bf0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881bf4: ldr             x0, [x0, #0x16a8]
    // 0x881bf8: cmp             w0, NULL
    // 0x881bfc: b.ne            #0x881c0c
    // 0x881c00: nop             
    // 0x881c04: r0 = Null
    //     0x881c04: mov             x0, NULL
    // 0x881c08: b               #0x881c34
    // 0x881c0c: r17 = 351
    //     0x881c0c: movz            x17, #0x15f
    // 0x881c10: ldr             w1, [x0, x17]
    // 0x881c14: DecompressPointer r1
    //     0x881c14: add             x1, x1, HEAP, lsl #32
    // 0x881c18: r0 = LoadClassIdInstr(r1)
    //     0x881c18: ldur            x0, [x1, #-1]
    //     0x881c1c: ubfx            x0, x0, #0xc, #0x14
    // 0x881c20: r2 = "memoryRacket"
    //     0x881c20: add             x2, PP, #0x12, lsl #12  ; [pp+0x12630] "memoryRacket"
    //     0x881c24: ldr             x2, [x2, #0x630]
    // 0x881c28: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881c28: sub             lr, x0, #0xb4
    //     0x881c2c: ldr             lr, [x21, lr, lsl #3]
    //     0x881c30: blr             lr
    // 0x881c34: cmp             w0, NULL
    // 0x881c38: b.ne            #0x881c48
    // 0x881c3c: nop             
    // 0x881c40: r3 = ""
    //     0x881c40: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881c44: b               #0x881c4c
    // 0x881c48: mov             x3, x0
    // 0x881c4c: mov             x0, x3
    // 0x881c50: stur            x3, [fp, #-8]
    // 0x881c54: r2 = Null
    //     0x881c54: mov             x2, NULL
    // 0x881c58: r1 = Null
    //     0x881c58: mov             x1, NULL
    // 0x881c5c: r4 = 59
    //     0x881c5c: movz            x4, #0x3b
    // 0x881c60: branchIfSmi(r0, 0x881c70)
    //     0x881c60: tbz             w0, #0, #0x881c70
    //     0x881c64: nop             
    // 0x881c68: r4 = LoadClassIdInstr(r0)
    //     0x881c68: ldur            x4, [x0, #-1]
    //     0x881c6c: ubfx            x4, x4, #0xc, #0x14
    // 0x881c70: sub             x4, x4, #0x5d
    // 0x881c74: cmp             x4, #1
    // 0x881c78: b.ls            #0x881c90
    // 0x881c7c: nop             
    // 0x881c80: r8 = String
    //     0x881c80: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881c84: r3 = Null
    //     0x881c84: add             x3, PP, #0x12, lsl #12  ; [pp+0x12638] Null
    //     0x881c88: ldr             x3, [x3, #0x638]
    // 0x881c8c: r0 = String()
    //     0x881c8c: bl              #0x1523244  ; IsType_String_Stub
    // 0x881c90: r16 = "steelracket"
    //     0x881c90: add             x16, PP, #0x12, lsl #12  ; [pp+0x12648] "steelracket"
    //     0x881c94: ldr             x16, [x16, #0x648]
    // 0x881c98: ldur            lr, [fp, #-8]
    // 0x881c9c: stp             lr, x16, [SP]
    // 0x881ca0: r0 = ==()
    //     0x881ca0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881ca4: tbnz            w0, #4, #0x881cb8
    // 0x881ca8: nop             
    // 0x881cac: r0 = "plasticracket"
    //     0x881cac: add             x0, PP, #0x12, lsl #12  ; [pp+0x12650] "plasticracket"
    //     0x881cb0: ldr             x0, [x0, #0x650]
    // 0x881cb4: b               #0x8838b4
    // 0x881cb8: r16 = "plasticracket"
    //     0x881cb8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12650] "plasticracket"
    //     0x881cbc: ldr             x16, [x16, #0x650]
    // 0x881cc0: ldur            lr, [fp, #-8]
    // 0x881cc4: stp             lr, x16, [SP]
    // 0x881cc8: r0 = ==()
    //     0x881cc8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881ccc: tbnz            w0, #4, #0x881ce0
    // 0x881cd0: nop             
    // 0x881cd4: r0 = "woodenracket"
    //     0x881cd4: add             x0, PP, #0xf, lsl #12  ; [pp+0xffd8] "woodenracket"
    //     0x881cd8: ldr             x0, [x0, #0xfd8]
    // 0x881cdc: b               #0x8838b4
    // 0x881ce0: r0 = "steelracket"
    //     0x881ce0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12648] "steelracket"
    //     0x881ce4: ldr             x0, [x0, #0x648]
    // 0x881ce8: b               #0x8838b4
    // 0x881cec: r16 = "minamemoryShoe"
    //     0x881cec: add             x16, PP, #0x12, lsl #12  ; [pp+0x12658] "minamemoryShoe"
    //     0x881cf0: ldr             x16, [x16, #0x658]
    // 0x881cf4: ldur            lr, [fp, #-0x28]
    // 0x881cf8: stp             lr, x16, [SP]
    // 0x881cfc: r0 = ==()
    //     0x881cfc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881d00: tbnz            w0, #4, #0x881e04
    // 0x881d04: nop             
    // 0x881d08: r0 = LoadStaticField(0xb54)
    //     0x881d08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881d0c: ldr             x0, [x0, #0x16a8]
    // 0x881d10: cmp             w0, NULL
    // 0x881d14: b.ne            #0x881d24
    // 0x881d18: nop             
    // 0x881d1c: r0 = Null
    //     0x881d1c: mov             x0, NULL
    // 0x881d20: b               #0x881d4c
    // 0x881d24: r17 = 351
    //     0x881d24: movz            x17, #0x15f
    // 0x881d28: ldr             w1, [x0, x17]
    // 0x881d2c: DecompressPointer r1
    //     0x881d2c: add             x1, x1, HEAP, lsl #32
    // 0x881d30: r0 = LoadClassIdInstr(r1)
    //     0x881d30: ldur            x0, [x1, #-1]
    //     0x881d34: ubfx            x0, x0, #0xc, #0x14
    // 0x881d38: r2 = "memoryShoe"
    //     0x881d38: add             x2, PP, #0x12, lsl #12  ; [pp+0x12660] "memoryShoe"
    //     0x881d3c: ldr             x2, [x2, #0x660]
    // 0x881d40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881d40: sub             lr, x0, #0xb4
    //     0x881d44: ldr             lr, [x21, lr, lsl #3]
    //     0x881d48: blr             lr
    // 0x881d4c: cmp             w0, NULL
    // 0x881d50: b.ne            #0x881d60
    // 0x881d54: nop             
    // 0x881d58: r3 = ""
    //     0x881d58: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881d5c: b               #0x881d64
    // 0x881d60: mov             x3, x0
    // 0x881d64: mov             x0, x3
    // 0x881d68: stur            x3, [fp, #-8]
    // 0x881d6c: r2 = Null
    //     0x881d6c: mov             x2, NULL
    // 0x881d70: r1 = Null
    //     0x881d70: mov             x1, NULL
    // 0x881d74: r4 = 59
    //     0x881d74: movz            x4, #0x3b
    // 0x881d78: branchIfSmi(r0, 0x881d88)
    //     0x881d78: tbz             w0, #0, #0x881d88
    //     0x881d7c: nop             
    // 0x881d80: r4 = LoadClassIdInstr(r0)
    //     0x881d80: ldur            x4, [x0, #-1]
    //     0x881d84: ubfx            x4, x4, #0xc, #0x14
    // 0x881d88: sub             x4, x4, #0x5d
    // 0x881d8c: cmp             x4, #1
    // 0x881d90: b.ls            #0x881da8
    // 0x881d94: nop             
    // 0x881d98: r8 = String
    //     0x881d98: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881d9c: r3 = Null
    //     0x881d9c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12668] Null
    //     0x881da0: ldr             x3, [x3, #0x668]
    // 0x881da4: r0 = String()
    //     0x881da4: bl              #0x1523244  ; IsType_String_Stub
    // 0x881da8: r16 = "steelshoe"
    //     0x881da8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12678] "steelshoe"
    //     0x881dac: ldr             x16, [x16, #0x678]
    // 0x881db0: ldur            lr, [fp, #-8]
    // 0x881db4: stp             lr, x16, [SP]
    // 0x881db8: r0 = ==()
    //     0x881db8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881dbc: tbnz            w0, #4, #0x881dd0
    // 0x881dc0: nop             
    // 0x881dc4: r0 = "plasticshoe"
    //     0x881dc4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12680] "plasticshoe"
    //     0x881dc8: ldr             x0, [x0, #0x680]
    // 0x881dcc: b               #0x8838b4
    // 0x881dd0: r16 = "plasticshoe"
    //     0x881dd0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12680] "plasticshoe"
    //     0x881dd4: ldr             x16, [x16, #0x680]
    // 0x881dd8: ldur            lr, [fp, #-8]
    // 0x881ddc: stp             lr, x16, [SP]
    // 0x881de0: r0 = ==()
    //     0x881de0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881de4: tbnz            w0, #4, #0x881df8
    // 0x881de8: nop             
    // 0x881dec: r0 = "oldshoe"
    //     0x881dec: add             x0, PP, #0xf, lsl #12  ; [pp+0xfff8] "oldshoe"
    //     0x881df0: ldr             x0, [x0, #0xff8]
    // 0x881df4: b               #0x8838b4
    // 0x881df8: r0 = "steelshoe"
    //     0x881df8: add             x0, PP, #0x12, lsl #12  ; [pp+0x12678] "steelshoe"
    //     0x881dfc: ldr             x0, [x0, #0x678]
    // 0x881e00: b               #0x8838b4
    // 0x881e04: r16 = "minamemoryExaminer1"
    //     0x881e04: add             x16, PP, #0x12, lsl #12  ; [pp+0x12688] "minamemoryExaminer1"
    //     0x881e08: ldr             x16, [x16, #0x688]
    // 0x881e0c: ldur            lr, [fp, #-0x28]
    // 0x881e10: stp             lr, x16, [SP]
    // 0x881e14: r0 = ==()
    //     0x881e14: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881e18: tbnz            w0, #4, #0x881f04
    // 0x881e1c: nop             
    // 0x881e20: r0 = LoadStaticField(0xb54)
    //     0x881e20: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881e24: ldr             x0, [x0, #0x16a8]
    // 0x881e28: cmp             w0, NULL
    // 0x881e2c: b.ne            #0x881e3c
    // 0x881e30: nop             
    // 0x881e34: r0 = Null
    //     0x881e34: mov             x0, NULL
    // 0x881e38: b               #0x881e64
    // 0x881e3c: r17 = 351
    //     0x881e3c: movz            x17, #0x15f
    // 0x881e40: ldr             w1, [x0, x17]
    // 0x881e44: DecompressPointer r1
    //     0x881e44: add             x1, x1, HEAP, lsl #32
    // 0x881e48: r0 = LoadClassIdInstr(r1)
    //     0x881e48: ldur            x0, [x1, #-1]
    //     0x881e4c: ubfx            x0, x0, #0xc, #0x14
    // 0x881e50: r2 = "minamemoryGuy1"
    //     0x881e50: add             x2, PP, #0x12, lsl #12  ; [pp+0x12690] "minamemoryGuy1"
    //     0x881e54: ldr             x2, [x2, #0x690]
    // 0x881e58: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881e58: sub             lr, x0, #0xb4
    //     0x881e5c: ldr             lr, [x21, lr, lsl #3]
    //     0x881e60: blr             lr
    // 0x881e64: cmp             w0, NULL
    // 0x881e68: b.ne            #0x881e78
    // 0x881e6c: nop             
    // 0x881e70: r3 = ""
    //     0x881e70: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881e74: b               #0x881e7c
    // 0x881e78: mov             x3, x0
    // 0x881e7c: mov             x0, x3
    // 0x881e80: stur            x3, [fp, #-8]
    // 0x881e84: r2 = Null
    //     0x881e84: mov             x2, NULL
    // 0x881e88: r1 = Null
    //     0x881e88: mov             x1, NULL
    // 0x881e8c: r4 = 59
    //     0x881e8c: movz            x4, #0x3b
    // 0x881e90: branchIfSmi(r0, 0x881ea0)
    //     0x881e90: tbz             w0, #0, #0x881ea0
    //     0x881e94: nop             
    // 0x881e98: r4 = LoadClassIdInstr(r0)
    //     0x881e98: ldur            x4, [x0, #-1]
    //     0x881e9c: ubfx            x4, x4, #0xc, #0x14
    // 0x881ea0: sub             x4, x4, #0x5d
    // 0x881ea4: cmp             x4, #1
    // 0x881ea8: b.ls            #0x881ec0
    // 0x881eac: nop             
    // 0x881eb0: r8 = String
    //     0x881eb0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881eb4: r3 = Null
    //     0x881eb4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12698] Null
    //     0x881eb8: ldr             x3, [x3, #0x698]
    // 0x881ebc: r0 = String()
    //     0x881ebc: bl              #0x1523244  ; IsType_String_Stub
    // 0x881ec0: ldur            x0, [fp, #-8]
    // 0x881ec4: r1 = LoadClassIdInstr(r0)
    //     0x881ec4: ldur            x1, [x0, #-1]
    //     0x881ec8: ubfx            x1, x1, #0xc, #0x14
    // 0x881ecc: r16 = ""
    //     0x881ecc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881ed0: stp             x16, x0, [SP]
    // 0x881ed4: mov             x0, x1
    // 0x881ed8: mov             lr, x0
    // 0x881edc: ldr             lr, [x21, lr, lsl #3]
    // 0x881ee0: blr             lr
    // 0x881ee4: tbnz            w0, #4, #0x881ef8
    // 0x881ee8: nop             
    // 0x881eec: r0 = "story"
    //     0x881eec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x881ef0: ldr             x0, [x0, #0x440]
    // 0x881ef4: b               #0x8838b4
    // 0x881ef8: r0 = "complete"
    //     0x881ef8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x881efc: ldr             x0, [x0, #0x590]
    // 0x881f00: b               #0x8838b4
    // 0x881f04: r16 = "minamemoryExaminer2"
    //     0x881f04: add             x16, PP, #0x12, lsl #12  ; [pp+0x126a8] "minamemoryExaminer2"
    //     0x881f08: ldr             x16, [x16, #0x6a8]
    // 0x881f0c: ldur            lr, [fp, #-0x28]
    // 0x881f10: stp             lr, x16, [SP]
    // 0x881f14: r0 = ==()
    //     0x881f14: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x881f18: tbnz            w0, #4, #0x882004
    // 0x881f1c: nop             
    // 0x881f20: r0 = LoadStaticField(0xb54)
    //     0x881f20: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x881f24: ldr             x0, [x0, #0x16a8]
    // 0x881f28: cmp             w0, NULL
    // 0x881f2c: b.ne            #0x881f3c
    // 0x881f30: nop             
    // 0x881f34: r0 = Null
    //     0x881f34: mov             x0, NULL
    // 0x881f38: b               #0x881f64
    // 0x881f3c: r17 = 351
    //     0x881f3c: movz            x17, #0x15f
    // 0x881f40: ldr             w1, [x0, x17]
    // 0x881f44: DecompressPointer r1
    //     0x881f44: add             x1, x1, HEAP, lsl #32
    // 0x881f48: r0 = LoadClassIdInstr(r1)
    //     0x881f48: ldur            x0, [x1, #-1]
    //     0x881f4c: ubfx            x0, x0, #0xc, #0x14
    // 0x881f50: r2 = "minamemoryGuy2"
    //     0x881f50: add             x2, PP, #0x12, lsl #12  ; [pp+0x126b0] "minamemoryGuy2"
    //     0x881f54: ldr             x2, [x2, #0x6b0]
    // 0x881f58: r0 = GDT[cid_x0 + -0xb4]()
    //     0x881f58: sub             lr, x0, #0xb4
    //     0x881f5c: ldr             lr, [x21, lr, lsl #3]
    //     0x881f60: blr             lr
    // 0x881f64: cmp             w0, NULL
    // 0x881f68: b.ne            #0x881f78
    // 0x881f6c: nop             
    // 0x881f70: r3 = ""
    //     0x881f70: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881f74: b               #0x881f7c
    // 0x881f78: mov             x3, x0
    // 0x881f7c: mov             x0, x3
    // 0x881f80: stur            x3, [fp, #-8]
    // 0x881f84: r2 = Null
    //     0x881f84: mov             x2, NULL
    // 0x881f88: r1 = Null
    //     0x881f88: mov             x1, NULL
    // 0x881f8c: r4 = 59
    //     0x881f8c: movz            x4, #0x3b
    // 0x881f90: branchIfSmi(r0, 0x881fa0)
    //     0x881f90: tbz             w0, #0, #0x881fa0
    //     0x881f94: nop             
    // 0x881f98: r4 = LoadClassIdInstr(r0)
    //     0x881f98: ldur            x4, [x0, #-1]
    //     0x881f9c: ubfx            x4, x4, #0xc, #0x14
    // 0x881fa0: sub             x4, x4, #0x5d
    // 0x881fa4: cmp             x4, #1
    // 0x881fa8: b.ls            #0x881fc0
    // 0x881fac: nop             
    // 0x881fb0: r8 = String
    //     0x881fb0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x881fb4: r3 = Null
    //     0x881fb4: add             x3, PP, #0x12, lsl #12  ; [pp+0x126b8] Null
    //     0x881fb8: ldr             x3, [x3, #0x6b8]
    // 0x881fbc: r0 = String()
    //     0x881fbc: bl              #0x1523244  ; IsType_String_Stub
    // 0x881fc0: ldur            x0, [fp, #-8]
    // 0x881fc4: r1 = LoadClassIdInstr(r0)
    //     0x881fc4: ldur            x1, [x0, #-1]
    //     0x881fc8: ubfx            x1, x1, #0xc, #0x14
    // 0x881fcc: r16 = ""
    //     0x881fcc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x881fd0: stp             x16, x0, [SP]
    // 0x881fd4: mov             x0, x1
    // 0x881fd8: mov             lr, x0
    // 0x881fdc: ldr             lr, [x21, lr, lsl #3]
    // 0x881fe0: blr             lr
    // 0x881fe4: tbnz            w0, #4, #0x881ff8
    // 0x881fe8: nop             
    // 0x881fec: r0 = "story"
    //     0x881fec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x881ff0: ldr             x0, [x0, #0x440]
    // 0x881ff4: b               #0x8838b4
    // 0x881ff8: r0 = "complete"
    //     0x881ff8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x881ffc: ldr             x0, [x0, #0x590]
    // 0x882000: b               #0x8838b4
    // 0x882004: r16 = "minamemoryExaminer3"
    //     0x882004: add             x16, PP, #0x12, lsl #12  ; [pp+0x126c8] "minamemoryExaminer3"
    //     0x882008: ldr             x16, [x16, #0x6c8]
    // 0x88200c: ldur            lr, [fp, #-0x28]
    // 0x882010: stp             lr, x16, [SP]
    // 0x882014: r0 = ==()
    //     0x882014: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882018: tbnz            w0, #4, #0x882104
    // 0x88201c: nop             
    // 0x882020: r0 = LoadStaticField(0xb54)
    //     0x882020: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882024: ldr             x0, [x0, #0x16a8]
    // 0x882028: cmp             w0, NULL
    // 0x88202c: b.ne            #0x88203c
    // 0x882030: nop             
    // 0x882034: r0 = Null
    //     0x882034: mov             x0, NULL
    // 0x882038: b               #0x882064
    // 0x88203c: r17 = 351
    //     0x88203c: movz            x17, #0x15f
    // 0x882040: ldr             w1, [x0, x17]
    // 0x882044: DecompressPointer r1
    //     0x882044: add             x1, x1, HEAP, lsl #32
    // 0x882048: r0 = LoadClassIdInstr(r1)
    //     0x882048: ldur            x0, [x1, #-1]
    //     0x88204c: ubfx            x0, x0, #0xc, #0x14
    // 0x882050: r2 = "minamemoryGuy3"
    //     0x882050: add             x2, PP, #0x12, lsl #12  ; [pp+0x126d0] "minamemoryGuy3"
    //     0x882054: ldr             x2, [x2, #0x6d0]
    // 0x882058: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882058: sub             lr, x0, #0xb4
    //     0x88205c: ldr             lr, [x21, lr, lsl #3]
    //     0x882060: blr             lr
    // 0x882064: cmp             w0, NULL
    // 0x882068: b.ne            #0x882078
    // 0x88206c: nop             
    // 0x882070: r3 = ""
    //     0x882070: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882074: b               #0x88207c
    // 0x882078: mov             x3, x0
    // 0x88207c: mov             x0, x3
    // 0x882080: stur            x3, [fp, #-8]
    // 0x882084: r2 = Null
    //     0x882084: mov             x2, NULL
    // 0x882088: r1 = Null
    //     0x882088: mov             x1, NULL
    // 0x88208c: r4 = 59
    //     0x88208c: movz            x4, #0x3b
    // 0x882090: branchIfSmi(r0, 0x8820a0)
    //     0x882090: tbz             w0, #0, #0x8820a0
    //     0x882094: nop             
    // 0x882098: r4 = LoadClassIdInstr(r0)
    //     0x882098: ldur            x4, [x0, #-1]
    //     0x88209c: ubfx            x4, x4, #0xc, #0x14
    // 0x8820a0: sub             x4, x4, #0x5d
    // 0x8820a4: cmp             x4, #1
    // 0x8820a8: b.ls            #0x8820c0
    // 0x8820ac: nop             
    // 0x8820b0: r8 = String
    //     0x8820b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8820b4: r3 = Null
    //     0x8820b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x126d8] Null
    //     0x8820b8: ldr             x3, [x3, #0x6d8]
    // 0x8820bc: r0 = String()
    //     0x8820bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8820c0: ldur            x0, [fp, #-8]
    // 0x8820c4: r1 = LoadClassIdInstr(r0)
    //     0x8820c4: ldur            x1, [x0, #-1]
    //     0x8820c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8820cc: r16 = ""
    //     0x8820cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8820d0: stp             x16, x0, [SP]
    // 0x8820d4: mov             x0, x1
    // 0x8820d8: mov             lr, x0
    // 0x8820dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8820e0: blr             lr
    // 0x8820e4: tbnz            w0, #4, #0x8820f8
    // 0x8820e8: nop             
    // 0x8820ec: r0 = "story"
    //     0x8820ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8820f0: ldr             x0, [x0, #0x440]
    // 0x8820f4: b               #0x8838b4
    // 0x8820f8: r0 = "complete"
    //     0x8820f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8820fc: ldr             x0, [x0, #0x590]
    // 0x882100: b               #0x8838b4
    // 0x882104: r16 = "minamemoryExaminer4"
    //     0x882104: add             x16, PP, #0x12, lsl #12  ; [pp+0x126e8] "minamemoryExaminer4"
    //     0x882108: ldr             x16, [x16, #0x6e8]
    // 0x88210c: ldur            lr, [fp, #-0x28]
    // 0x882110: stp             lr, x16, [SP]
    // 0x882114: r0 = ==()
    //     0x882114: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882118: tbnz            w0, #4, #0x882204
    // 0x88211c: nop             
    // 0x882120: r0 = LoadStaticField(0xb54)
    //     0x882120: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882124: ldr             x0, [x0, #0x16a8]
    // 0x882128: cmp             w0, NULL
    // 0x88212c: b.ne            #0x88213c
    // 0x882130: nop             
    // 0x882134: r0 = Null
    //     0x882134: mov             x0, NULL
    // 0x882138: b               #0x882164
    // 0x88213c: r17 = 351
    //     0x88213c: movz            x17, #0x15f
    // 0x882140: ldr             w1, [x0, x17]
    // 0x882144: DecompressPointer r1
    //     0x882144: add             x1, x1, HEAP, lsl #32
    // 0x882148: r0 = LoadClassIdInstr(r1)
    //     0x882148: ldur            x0, [x1, #-1]
    //     0x88214c: ubfx            x0, x0, #0xc, #0x14
    // 0x882150: r2 = "minamemoryGuy4"
    //     0x882150: add             x2, PP, #0x12, lsl #12  ; [pp+0x126f0] "minamemoryGuy4"
    //     0x882154: ldr             x2, [x2, #0x6f0]
    // 0x882158: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882158: sub             lr, x0, #0xb4
    //     0x88215c: ldr             lr, [x21, lr, lsl #3]
    //     0x882160: blr             lr
    // 0x882164: cmp             w0, NULL
    // 0x882168: b.ne            #0x882178
    // 0x88216c: nop             
    // 0x882170: r3 = ""
    //     0x882170: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882174: b               #0x88217c
    // 0x882178: mov             x3, x0
    // 0x88217c: mov             x0, x3
    // 0x882180: stur            x3, [fp, #-8]
    // 0x882184: r2 = Null
    //     0x882184: mov             x2, NULL
    // 0x882188: r1 = Null
    //     0x882188: mov             x1, NULL
    // 0x88218c: r4 = 59
    //     0x88218c: movz            x4, #0x3b
    // 0x882190: branchIfSmi(r0, 0x8821a0)
    //     0x882190: tbz             w0, #0, #0x8821a0
    //     0x882194: nop             
    // 0x882198: r4 = LoadClassIdInstr(r0)
    //     0x882198: ldur            x4, [x0, #-1]
    //     0x88219c: ubfx            x4, x4, #0xc, #0x14
    // 0x8821a0: sub             x4, x4, #0x5d
    // 0x8821a4: cmp             x4, #1
    // 0x8821a8: b.ls            #0x8821c0
    // 0x8821ac: nop             
    // 0x8821b0: r8 = String
    //     0x8821b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8821b4: r3 = Null
    //     0x8821b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x126f8] Null
    //     0x8821b8: ldr             x3, [x3, #0x6f8]
    // 0x8821bc: r0 = String()
    //     0x8821bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8821c0: ldur            x0, [fp, #-8]
    // 0x8821c4: r1 = LoadClassIdInstr(r0)
    //     0x8821c4: ldur            x1, [x0, #-1]
    //     0x8821c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8821cc: r16 = ""
    //     0x8821cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8821d0: stp             x16, x0, [SP]
    // 0x8821d4: mov             x0, x1
    // 0x8821d8: mov             lr, x0
    // 0x8821dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8821e0: blr             lr
    // 0x8821e4: tbnz            w0, #4, #0x8821f8
    // 0x8821e8: nop             
    // 0x8821ec: r0 = "story"
    //     0x8821ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8821f0: ldr             x0, [x0, #0x440]
    // 0x8821f4: b               #0x8838b4
    // 0x8821f8: r0 = "complete"
    //     0x8821f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8821fc: ldr             x0, [x0, #0x590]
    // 0x882200: b               #0x8838b4
    // 0x882204: r16 = "minamemoryExaminer5"
    //     0x882204: add             x16, PP, #0x12, lsl #12  ; [pp+0x12708] "minamemoryExaminer5"
    //     0x882208: ldr             x16, [x16, #0x708]
    // 0x88220c: ldur            lr, [fp, #-0x28]
    // 0x882210: stp             lr, x16, [SP]
    // 0x882214: r0 = ==()
    //     0x882214: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882218: tbnz            w0, #4, #0x882304
    // 0x88221c: nop             
    // 0x882220: r0 = LoadStaticField(0xb54)
    //     0x882220: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882224: ldr             x0, [x0, #0x16a8]
    // 0x882228: cmp             w0, NULL
    // 0x88222c: b.ne            #0x88223c
    // 0x882230: nop             
    // 0x882234: r0 = Null
    //     0x882234: mov             x0, NULL
    // 0x882238: b               #0x882264
    // 0x88223c: r17 = 351
    //     0x88223c: movz            x17, #0x15f
    // 0x882240: ldr             w1, [x0, x17]
    // 0x882244: DecompressPointer r1
    //     0x882244: add             x1, x1, HEAP, lsl #32
    // 0x882248: r0 = LoadClassIdInstr(r1)
    //     0x882248: ldur            x0, [x1, #-1]
    //     0x88224c: ubfx            x0, x0, #0xc, #0x14
    // 0x882250: r2 = "minamemoryGuy5"
    //     0x882250: add             x2, PP, #0x12, lsl #12  ; [pp+0x12710] "minamemoryGuy5"
    //     0x882254: ldr             x2, [x2, #0x710]
    // 0x882258: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882258: sub             lr, x0, #0xb4
    //     0x88225c: ldr             lr, [x21, lr, lsl #3]
    //     0x882260: blr             lr
    // 0x882264: cmp             w0, NULL
    // 0x882268: b.ne            #0x882278
    // 0x88226c: nop             
    // 0x882270: r3 = ""
    //     0x882270: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882274: b               #0x88227c
    // 0x882278: mov             x3, x0
    // 0x88227c: mov             x0, x3
    // 0x882280: stur            x3, [fp, #-8]
    // 0x882284: r2 = Null
    //     0x882284: mov             x2, NULL
    // 0x882288: r1 = Null
    //     0x882288: mov             x1, NULL
    // 0x88228c: r4 = 59
    //     0x88228c: movz            x4, #0x3b
    // 0x882290: branchIfSmi(r0, 0x8822a0)
    //     0x882290: tbz             w0, #0, #0x8822a0
    //     0x882294: nop             
    // 0x882298: r4 = LoadClassIdInstr(r0)
    //     0x882298: ldur            x4, [x0, #-1]
    //     0x88229c: ubfx            x4, x4, #0xc, #0x14
    // 0x8822a0: sub             x4, x4, #0x5d
    // 0x8822a4: cmp             x4, #1
    // 0x8822a8: b.ls            #0x8822c0
    // 0x8822ac: nop             
    // 0x8822b0: r8 = String
    //     0x8822b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8822b4: r3 = Null
    //     0x8822b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12718] Null
    //     0x8822b8: ldr             x3, [x3, #0x718]
    // 0x8822bc: r0 = String()
    //     0x8822bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8822c0: ldur            x0, [fp, #-8]
    // 0x8822c4: r1 = LoadClassIdInstr(r0)
    //     0x8822c4: ldur            x1, [x0, #-1]
    //     0x8822c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8822cc: r16 = ""
    //     0x8822cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8822d0: stp             x16, x0, [SP]
    // 0x8822d4: mov             x0, x1
    // 0x8822d8: mov             lr, x0
    // 0x8822dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8822e0: blr             lr
    // 0x8822e4: tbnz            w0, #4, #0x8822f8
    // 0x8822e8: nop             
    // 0x8822ec: r0 = "story"
    //     0x8822ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8822f0: ldr             x0, [x0, #0x440]
    // 0x8822f4: b               #0x8838b4
    // 0x8822f8: r0 = "complete"
    //     0x8822f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8822fc: ldr             x0, [x0, #0x590]
    // 0x882300: b               #0x8838b4
    // 0x882304: r16 = "minamemoryExaminer6"
    //     0x882304: add             x16, PP, #0x12, lsl #12  ; [pp+0x12728] "minamemoryExaminer6"
    //     0x882308: ldr             x16, [x16, #0x728]
    // 0x88230c: ldur            lr, [fp, #-0x28]
    // 0x882310: stp             lr, x16, [SP]
    // 0x882314: r0 = ==()
    //     0x882314: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882318: tbnz            w0, #4, #0x882404
    // 0x88231c: nop             
    // 0x882320: r0 = LoadStaticField(0xb54)
    //     0x882320: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882324: ldr             x0, [x0, #0x16a8]
    // 0x882328: cmp             w0, NULL
    // 0x88232c: b.ne            #0x88233c
    // 0x882330: nop             
    // 0x882334: r0 = Null
    //     0x882334: mov             x0, NULL
    // 0x882338: b               #0x882364
    // 0x88233c: r17 = 351
    //     0x88233c: movz            x17, #0x15f
    // 0x882340: ldr             w1, [x0, x17]
    // 0x882344: DecompressPointer r1
    //     0x882344: add             x1, x1, HEAP, lsl #32
    // 0x882348: r0 = LoadClassIdInstr(r1)
    //     0x882348: ldur            x0, [x1, #-1]
    //     0x88234c: ubfx            x0, x0, #0xc, #0x14
    // 0x882350: r2 = "minamemoryGuy6"
    //     0x882350: add             x2, PP, #0x12, lsl #12  ; [pp+0x12730] "minamemoryGuy6"
    //     0x882354: ldr             x2, [x2, #0x730]
    // 0x882358: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882358: sub             lr, x0, #0xb4
    //     0x88235c: ldr             lr, [x21, lr, lsl #3]
    //     0x882360: blr             lr
    // 0x882364: cmp             w0, NULL
    // 0x882368: b.ne            #0x882378
    // 0x88236c: nop             
    // 0x882370: r3 = ""
    //     0x882370: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882374: b               #0x88237c
    // 0x882378: mov             x3, x0
    // 0x88237c: mov             x0, x3
    // 0x882380: stur            x3, [fp, #-8]
    // 0x882384: r2 = Null
    //     0x882384: mov             x2, NULL
    // 0x882388: r1 = Null
    //     0x882388: mov             x1, NULL
    // 0x88238c: r4 = 59
    //     0x88238c: movz            x4, #0x3b
    // 0x882390: branchIfSmi(r0, 0x8823a0)
    //     0x882390: tbz             w0, #0, #0x8823a0
    //     0x882394: nop             
    // 0x882398: r4 = LoadClassIdInstr(r0)
    //     0x882398: ldur            x4, [x0, #-1]
    //     0x88239c: ubfx            x4, x4, #0xc, #0x14
    // 0x8823a0: sub             x4, x4, #0x5d
    // 0x8823a4: cmp             x4, #1
    // 0x8823a8: b.ls            #0x8823c0
    // 0x8823ac: nop             
    // 0x8823b0: r8 = String
    //     0x8823b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8823b4: r3 = Null
    //     0x8823b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12738] Null
    //     0x8823b8: ldr             x3, [x3, #0x738]
    // 0x8823bc: r0 = String()
    //     0x8823bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8823c0: ldur            x0, [fp, #-8]
    // 0x8823c4: r1 = LoadClassIdInstr(r0)
    //     0x8823c4: ldur            x1, [x0, #-1]
    //     0x8823c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8823cc: r16 = ""
    //     0x8823cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8823d0: stp             x16, x0, [SP]
    // 0x8823d4: mov             x0, x1
    // 0x8823d8: mov             lr, x0
    // 0x8823dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8823e0: blr             lr
    // 0x8823e4: tbnz            w0, #4, #0x8823f8
    // 0x8823e8: nop             
    // 0x8823ec: r0 = "story"
    //     0x8823ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8823f0: ldr             x0, [x0, #0x440]
    // 0x8823f4: b               #0x8838b4
    // 0x8823f8: r0 = "complete"
    //     0x8823f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8823fc: ldr             x0, [x0, #0x590]
    // 0x882400: b               #0x8838b4
    // 0x882404: r16 = "minamemoryExaminer7"
    //     0x882404: add             x16, PP, #0x12, lsl #12  ; [pp+0x12748] "minamemoryExaminer7"
    //     0x882408: ldr             x16, [x16, #0x748]
    // 0x88240c: ldur            lr, [fp, #-0x28]
    // 0x882410: stp             lr, x16, [SP]
    // 0x882414: r0 = ==()
    //     0x882414: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882418: tbnz            w0, #4, #0x882504
    // 0x88241c: nop             
    // 0x882420: r0 = LoadStaticField(0xb54)
    //     0x882420: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882424: ldr             x0, [x0, #0x16a8]
    // 0x882428: cmp             w0, NULL
    // 0x88242c: b.ne            #0x88243c
    // 0x882430: nop             
    // 0x882434: r0 = Null
    //     0x882434: mov             x0, NULL
    // 0x882438: b               #0x882464
    // 0x88243c: r17 = 351
    //     0x88243c: movz            x17, #0x15f
    // 0x882440: ldr             w1, [x0, x17]
    // 0x882444: DecompressPointer r1
    //     0x882444: add             x1, x1, HEAP, lsl #32
    // 0x882448: r0 = LoadClassIdInstr(r1)
    //     0x882448: ldur            x0, [x1, #-1]
    //     0x88244c: ubfx            x0, x0, #0xc, #0x14
    // 0x882450: r2 = "minamemoryGuy7"
    //     0x882450: add             x2, PP, #0x12, lsl #12  ; [pp+0x12750] "minamemoryGuy7"
    //     0x882454: ldr             x2, [x2, #0x750]
    // 0x882458: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882458: sub             lr, x0, #0xb4
    //     0x88245c: ldr             lr, [x21, lr, lsl #3]
    //     0x882460: blr             lr
    // 0x882464: cmp             w0, NULL
    // 0x882468: b.ne            #0x882478
    // 0x88246c: nop             
    // 0x882470: r3 = ""
    //     0x882470: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882474: b               #0x88247c
    // 0x882478: mov             x3, x0
    // 0x88247c: mov             x0, x3
    // 0x882480: stur            x3, [fp, #-8]
    // 0x882484: r2 = Null
    //     0x882484: mov             x2, NULL
    // 0x882488: r1 = Null
    //     0x882488: mov             x1, NULL
    // 0x88248c: r4 = 59
    //     0x88248c: movz            x4, #0x3b
    // 0x882490: branchIfSmi(r0, 0x8824a0)
    //     0x882490: tbz             w0, #0, #0x8824a0
    //     0x882494: nop             
    // 0x882498: r4 = LoadClassIdInstr(r0)
    //     0x882498: ldur            x4, [x0, #-1]
    //     0x88249c: ubfx            x4, x4, #0xc, #0x14
    // 0x8824a0: sub             x4, x4, #0x5d
    // 0x8824a4: cmp             x4, #1
    // 0x8824a8: b.ls            #0x8824c0
    // 0x8824ac: nop             
    // 0x8824b0: r8 = String
    //     0x8824b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8824b4: r3 = Null
    //     0x8824b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12758] Null
    //     0x8824b8: ldr             x3, [x3, #0x758]
    // 0x8824bc: r0 = String()
    //     0x8824bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8824c0: ldur            x0, [fp, #-8]
    // 0x8824c4: r1 = LoadClassIdInstr(r0)
    //     0x8824c4: ldur            x1, [x0, #-1]
    //     0x8824c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8824cc: r16 = ""
    //     0x8824cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8824d0: stp             x16, x0, [SP]
    // 0x8824d4: mov             x0, x1
    // 0x8824d8: mov             lr, x0
    // 0x8824dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8824e0: blr             lr
    // 0x8824e4: tbnz            w0, #4, #0x8824f8
    // 0x8824e8: nop             
    // 0x8824ec: r0 = "story"
    //     0x8824ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8824f0: ldr             x0, [x0, #0x440]
    // 0x8824f4: b               #0x8838b4
    // 0x8824f8: r0 = "complete"
    //     0x8824f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8824fc: ldr             x0, [x0, #0x590]
    // 0x882500: b               #0x8838b4
    // 0x882504: r16 = "minamemoryExaminer8"
    //     0x882504: add             x16, PP, #0x12, lsl #12  ; [pp+0x12768] "minamemoryExaminer8"
    //     0x882508: ldr             x16, [x16, #0x768]
    // 0x88250c: ldur            lr, [fp, #-0x28]
    // 0x882510: stp             lr, x16, [SP]
    // 0x882514: r0 = ==()
    //     0x882514: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882518: tbnz            w0, #4, #0x882604
    // 0x88251c: nop             
    // 0x882520: r0 = LoadStaticField(0xb54)
    //     0x882520: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882524: ldr             x0, [x0, #0x16a8]
    // 0x882528: cmp             w0, NULL
    // 0x88252c: b.ne            #0x88253c
    // 0x882530: nop             
    // 0x882534: r0 = Null
    //     0x882534: mov             x0, NULL
    // 0x882538: b               #0x882564
    // 0x88253c: r17 = 351
    //     0x88253c: movz            x17, #0x15f
    // 0x882540: ldr             w1, [x0, x17]
    // 0x882544: DecompressPointer r1
    //     0x882544: add             x1, x1, HEAP, lsl #32
    // 0x882548: r0 = LoadClassIdInstr(r1)
    //     0x882548: ldur            x0, [x1, #-1]
    //     0x88254c: ubfx            x0, x0, #0xc, #0x14
    // 0x882550: r2 = "minamemoryGuy8"
    //     0x882550: add             x2, PP, #0x12, lsl #12  ; [pp+0x12770] "minamemoryGuy8"
    //     0x882554: ldr             x2, [x2, #0x770]
    // 0x882558: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882558: sub             lr, x0, #0xb4
    //     0x88255c: ldr             lr, [x21, lr, lsl #3]
    //     0x882560: blr             lr
    // 0x882564: cmp             w0, NULL
    // 0x882568: b.ne            #0x882578
    // 0x88256c: nop             
    // 0x882570: r3 = ""
    //     0x882570: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882574: b               #0x88257c
    // 0x882578: mov             x3, x0
    // 0x88257c: mov             x0, x3
    // 0x882580: stur            x3, [fp, #-8]
    // 0x882584: r2 = Null
    //     0x882584: mov             x2, NULL
    // 0x882588: r1 = Null
    //     0x882588: mov             x1, NULL
    // 0x88258c: r4 = 59
    //     0x88258c: movz            x4, #0x3b
    // 0x882590: branchIfSmi(r0, 0x8825a0)
    //     0x882590: tbz             w0, #0, #0x8825a0
    //     0x882594: nop             
    // 0x882598: r4 = LoadClassIdInstr(r0)
    //     0x882598: ldur            x4, [x0, #-1]
    //     0x88259c: ubfx            x4, x4, #0xc, #0x14
    // 0x8825a0: sub             x4, x4, #0x5d
    // 0x8825a4: cmp             x4, #1
    // 0x8825a8: b.ls            #0x8825c0
    // 0x8825ac: nop             
    // 0x8825b0: r8 = String
    //     0x8825b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8825b4: r3 = Null
    //     0x8825b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12778] Null
    //     0x8825b8: ldr             x3, [x3, #0x778]
    // 0x8825bc: r0 = String()
    //     0x8825bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8825c0: ldur            x0, [fp, #-8]
    // 0x8825c4: r1 = LoadClassIdInstr(r0)
    //     0x8825c4: ldur            x1, [x0, #-1]
    //     0x8825c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8825cc: r16 = ""
    //     0x8825cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8825d0: stp             x16, x0, [SP]
    // 0x8825d4: mov             x0, x1
    // 0x8825d8: mov             lr, x0
    // 0x8825dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8825e0: blr             lr
    // 0x8825e4: tbnz            w0, #4, #0x8825f8
    // 0x8825e8: nop             
    // 0x8825ec: r0 = "story"
    //     0x8825ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8825f0: ldr             x0, [x0, #0x440]
    // 0x8825f4: b               #0x8838b4
    // 0x8825f8: r0 = "complete"
    //     0x8825f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8825fc: ldr             x0, [x0, #0x590]
    // 0x882600: b               #0x8838b4
    // 0x882604: r16 = "minamemoryExaminer9"
    //     0x882604: add             x16, PP, #0x12, lsl #12  ; [pp+0x12788] "minamemoryExaminer9"
    //     0x882608: ldr             x16, [x16, #0x788]
    // 0x88260c: ldur            lr, [fp, #-0x28]
    // 0x882610: stp             lr, x16, [SP]
    // 0x882614: r0 = ==()
    //     0x882614: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882618: tbnz            w0, #4, #0x882704
    // 0x88261c: nop             
    // 0x882620: r0 = LoadStaticField(0xb54)
    //     0x882620: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882624: ldr             x0, [x0, #0x16a8]
    // 0x882628: cmp             w0, NULL
    // 0x88262c: b.ne            #0x88263c
    // 0x882630: nop             
    // 0x882634: r0 = Null
    //     0x882634: mov             x0, NULL
    // 0x882638: b               #0x882664
    // 0x88263c: r17 = 351
    //     0x88263c: movz            x17, #0x15f
    // 0x882640: ldr             w1, [x0, x17]
    // 0x882644: DecompressPointer r1
    //     0x882644: add             x1, x1, HEAP, lsl #32
    // 0x882648: r0 = LoadClassIdInstr(r1)
    //     0x882648: ldur            x0, [x1, #-1]
    //     0x88264c: ubfx            x0, x0, #0xc, #0x14
    // 0x882650: r2 = "minamemoryGuy9"
    //     0x882650: add             x2, PP, #0x12, lsl #12  ; [pp+0x12790] "minamemoryGuy9"
    //     0x882654: ldr             x2, [x2, #0x790]
    // 0x882658: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882658: sub             lr, x0, #0xb4
    //     0x88265c: ldr             lr, [x21, lr, lsl #3]
    //     0x882660: blr             lr
    // 0x882664: cmp             w0, NULL
    // 0x882668: b.ne            #0x882678
    // 0x88266c: nop             
    // 0x882670: r3 = ""
    //     0x882670: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882674: b               #0x88267c
    // 0x882678: mov             x3, x0
    // 0x88267c: mov             x0, x3
    // 0x882680: stur            x3, [fp, #-8]
    // 0x882684: r2 = Null
    //     0x882684: mov             x2, NULL
    // 0x882688: r1 = Null
    //     0x882688: mov             x1, NULL
    // 0x88268c: r4 = 59
    //     0x88268c: movz            x4, #0x3b
    // 0x882690: branchIfSmi(r0, 0x8826a0)
    //     0x882690: tbz             w0, #0, #0x8826a0
    //     0x882694: nop             
    // 0x882698: r4 = LoadClassIdInstr(r0)
    //     0x882698: ldur            x4, [x0, #-1]
    //     0x88269c: ubfx            x4, x4, #0xc, #0x14
    // 0x8826a0: sub             x4, x4, #0x5d
    // 0x8826a4: cmp             x4, #1
    // 0x8826a8: b.ls            #0x8826c0
    // 0x8826ac: nop             
    // 0x8826b0: r8 = String
    //     0x8826b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8826b4: r3 = Null
    //     0x8826b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12798] Null
    //     0x8826b8: ldr             x3, [x3, #0x798]
    // 0x8826bc: r0 = String()
    //     0x8826bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8826c0: ldur            x0, [fp, #-8]
    // 0x8826c4: r1 = LoadClassIdInstr(r0)
    //     0x8826c4: ldur            x1, [x0, #-1]
    //     0x8826c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8826cc: r16 = ""
    //     0x8826cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8826d0: stp             x16, x0, [SP]
    // 0x8826d4: mov             x0, x1
    // 0x8826d8: mov             lr, x0
    // 0x8826dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8826e0: blr             lr
    // 0x8826e4: tbnz            w0, #4, #0x8826f8
    // 0x8826e8: nop             
    // 0x8826ec: r0 = "story"
    //     0x8826ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8826f0: ldr             x0, [x0, #0x440]
    // 0x8826f4: b               #0x8838b4
    // 0x8826f8: r0 = "complete"
    //     0x8826f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8826fc: ldr             x0, [x0, #0x590]
    // 0x882700: b               #0x8838b4
    // 0x882704: r16 = "minamemoryExaminer10"
    //     0x882704: add             x16, PP, #0x12, lsl #12  ; [pp+0x127a8] "minamemoryExaminer10"
    //     0x882708: ldr             x16, [x16, #0x7a8]
    // 0x88270c: ldur            lr, [fp, #-0x28]
    // 0x882710: stp             lr, x16, [SP]
    // 0x882714: r0 = ==()
    //     0x882714: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882718: tbnz            w0, #4, #0x882804
    // 0x88271c: nop             
    // 0x882720: r0 = LoadStaticField(0xb54)
    //     0x882720: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882724: ldr             x0, [x0, #0x16a8]
    // 0x882728: cmp             w0, NULL
    // 0x88272c: b.ne            #0x88273c
    // 0x882730: nop             
    // 0x882734: r0 = Null
    //     0x882734: mov             x0, NULL
    // 0x882738: b               #0x882764
    // 0x88273c: r17 = 351
    //     0x88273c: movz            x17, #0x15f
    // 0x882740: ldr             w1, [x0, x17]
    // 0x882744: DecompressPointer r1
    //     0x882744: add             x1, x1, HEAP, lsl #32
    // 0x882748: r0 = LoadClassIdInstr(r1)
    //     0x882748: ldur            x0, [x1, #-1]
    //     0x88274c: ubfx            x0, x0, #0xc, #0x14
    // 0x882750: r2 = "minamemoryGuy10"
    //     0x882750: add             x2, PP, #0x12, lsl #12  ; [pp+0x127b0] "minamemoryGuy10"
    //     0x882754: ldr             x2, [x2, #0x7b0]
    // 0x882758: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882758: sub             lr, x0, #0xb4
    //     0x88275c: ldr             lr, [x21, lr, lsl #3]
    //     0x882760: blr             lr
    // 0x882764: cmp             w0, NULL
    // 0x882768: b.ne            #0x882778
    // 0x88276c: nop             
    // 0x882770: r3 = ""
    //     0x882770: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882774: b               #0x88277c
    // 0x882778: mov             x3, x0
    // 0x88277c: mov             x0, x3
    // 0x882780: stur            x3, [fp, #-8]
    // 0x882784: r2 = Null
    //     0x882784: mov             x2, NULL
    // 0x882788: r1 = Null
    //     0x882788: mov             x1, NULL
    // 0x88278c: r4 = 59
    //     0x88278c: movz            x4, #0x3b
    // 0x882790: branchIfSmi(r0, 0x8827a0)
    //     0x882790: tbz             w0, #0, #0x8827a0
    //     0x882794: nop             
    // 0x882798: r4 = LoadClassIdInstr(r0)
    //     0x882798: ldur            x4, [x0, #-1]
    //     0x88279c: ubfx            x4, x4, #0xc, #0x14
    // 0x8827a0: sub             x4, x4, #0x5d
    // 0x8827a4: cmp             x4, #1
    // 0x8827a8: b.ls            #0x8827c0
    // 0x8827ac: nop             
    // 0x8827b0: r8 = String
    //     0x8827b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8827b4: r3 = Null
    //     0x8827b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x127b8] Null
    //     0x8827b8: ldr             x3, [x3, #0x7b8]
    // 0x8827bc: r0 = String()
    //     0x8827bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8827c0: ldur            x0, [fp, #-8]
    // 0x8827c4: r1 = LoadClassIdInstr(r0)
    //     0x8827c4: ldur            x1, [x0, #-1]
    //     0x8827c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8827cc: r16 = ""
    //     0x8827cc: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8827d0: stp             x16, x0, [SP]
    // 0x8827d4: mov             x0, x1
    // 0x8827d8: mov             lr, x0
    // 0x8827dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8827e0: blr             lr
    // 0x8827e4: tbnz            w0, #4, #0x8827f8
    // 0x8827e8: nop             
    // 0x8827ec: r0 = "story"
    //     0x8827ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12440] "story"
    //     0x8827f0: ldr             x0, [x0, #0x440]
    // 0x8827f4: b               #0x8838b4
    // 0x8827f8: r0 = "complete"
    //     0x8827f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8827fc: ldr             x0, [x0, #0x590]
    // 0x882800: b               #0x8838b4
    // 0x882804: r16 = "youngjimamemoryDay4Event"
    //     0x882804: add             x16, PP, #0x12, lsl #12  ; [pp+0x127c8] "youngjimamemoryDay4Event"
    //     0x882808: ldr             x16, [x16, #0x7c8]
    // 0x88280c: ldur            lr, [fp, #-0x28]
    // 0x882810: stp             lr, x16, [SP]
    // 0x882814: r0 = ==()
    //     0x882814: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882818: tbnz            w0, #4, #0x882904
    // 0x88281c: nop             
    // 0x882820: r0 = LoadStaticField(0xb54)
    //     0x882820: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882824: ldr             x0, [x0, #0x16a8]
    // 0x882828: cmp             w0, NULL
    // 0x88282c: b.ne            #0x88283c
    // 0x882830: nop             
    // 0x882834: r0 = Null
    //     0x882834: mov             x0, NULL
    // 0x882838: b               #0x882864
    // 0x88283c: r17 = 351
    //     0x88283c: movz            x17, #0x15f
    // 0x882840: ldr             w1, [x0, x17]
    // 0x882844: DecompressPointer r1
    //     0x882844: add             x1, x1, HEAP, lsl #32
    // 0x882848: r0 = LoadClassIdInstr(r1)
    //     0x882848: ldur            x0, [x1, #-1]
    //     0x88284c: ubfx            x0, x0, #0xc, #0x14
    // 0x882850: r2 = "youngjimamemoryMain"
    //     0x882850: add             x2, PP, #0x12, lsl #12  ; [pp+0x127d0] "youngjimamemoryMain"
    //     0x882854: ldr             x2, [x2, #0x7d0]
    // 0x882858: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882858: sub             lr, x0, #0xb4
    //     0x88285c: ldr             lr, [x21, lr, lsl #3]
    //     0x882860: blr             lr
    // 0x882864: cmp             w0, NULL
    // 0x882868: b.ne            #0x882878
    // 0x88286c: nop             
    // 0x882870: r3 = ""
    //     0x882870: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882874: b               #0x88287c
    // 0x882878: mov             x3, x0
    // 0x88287c: mov             x0, x3
    // 0x882880: stur            x3, [fp, #-8]
    // 0x882884: r2 = Null
    //     0x882884: mov             x2, NULL
    // 0x882888: r1 = Null
    //     0x882888: mov             x1, NULL
    // 0x88288c: r4 = 59
    //     0x88288c: movz            x4, #0x3b
    // 0x882890: branchIfSmi(r0, 0x8828a0)
    //     0x882890: tbz             w0, #0, #0x8828a0
    //     0x882894: nop             
    // 0x882898: r4 = LoadClassIdInstr(r0)
    //     0x882898: ldur            x4, [x0, #-1]
    //     0x88289c: ubfx            x4, x4, #0xc, #0x14
    // 0x8828a0: sub             x4, x4, #0x5d
    // 0x8828a4: cmp             x4, #1
    // 0x8828a8: b.ls            #0x8828c0
    // 0x8828ac: nop             
    // 0x8828b0: r8 = String
    //     0x8828b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8828b4: r3 = Null
    //     0x8828b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x127d8] Null
    //     0x8828b8: ldr             x3, [x3, #0x7d8]
    // 0x8828bc: r0 = String()
    //     0x8828bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8828c0: ldur            x0, [fp, #-8]
    // 0x8828c4: r1 = LoadClassIdInstr(r0)
    //     0x8828c4: ldur            x1, [x0, #-1]
    //     0x8828c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8828cc: r16 = "3"
    //     0x8828cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116b0] "3"
    //     0x8828d0: ldr             x16, [x16, #0x6b0]
    // 0x8828d4: stp             x16, x0, [SP]
    // 0x8828d8: mov             x0, x1
    // 0x8828dc: mov             lr, x0
    // 0x8828e0: ldr             lr, [x21, lr, lsl #3]
    // 0x8828e4: blr             lr
    // 0x8828e8: tbnz            w0, #4, #0x8828f8
    // 0x8828ec: nop             
    // 0x8828f0: r0 = "end"
    //     0x8828f0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x8828f4: b               #0x8838b4
    // 0x8828f8: r0 = "day4"
    //     0x8828f8: add             x0, PP, #0x12, lsl #12  ; [pp+0x127e8] "day4"
    //     0x8828fc: ldr             x0, [x0, #0x7e8]
    // 0x882900: b               #0x8838b4
    // 0x882904: r16 = "youngjimamemoryDay3Event"
    //     0x882904: add             x16, PP, #0x12, lsl #12  ; [pp+0x127f0] "youngjimamemoryDay3Event"
    //     0x882908: ldr             x16, [x16, #0x7f0]
    // 0x88290c: ldur            lr, [fp, #-0x28]
    // 0x882910: stp             lr, x16, [SP]
    // 0x882914: r0 = ==()
    //     0x882914: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882918: tbnz            w0, #4, #0x882a04
    // 0x88291c: nop             
    // 0x882920: r0 = LoadStaticField(0xb54)
    //     0x882920: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882924: ldr             x0, [x0, #0x16a8]
    // 0x882928: cmp             w0, NULL
    // 0x88292c: b.ne            #0x88293c
    // 0x882930: nop             
    // 0x882934: r0 = Null
    //     0x882934: mov             x0, NULL
    // 0x882938: b               #0x882964
    // 0x88293c: r17 = 351
    //     0x88293c: movz            x17, #0x15f
    // 0x882940: ldr             w1, [x0, x17]
    // 0x882944: DecompressPointer r1
    //     0x882944: add             x1, x1, HEAP, lsl #32
    // 0x882948: r0 = LoadClassIdInstr(r1)
    //     0x882948: ldur            x0, [x1, #-1]
    //     0x88294c: ubfx            x0, x0, #0xc, #0x14
    // 0x882950: r2 = "youngjimamemoryMain"
    //     0x882950: add             x2, PP, #0x12, lsl #12  ; [pp+0x127d0] "youngjimamemoryMain"
    //     0x882954: ldr             x2, [x2, #0x7d0]
    // 0x882958: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882958: sub             lr, x0, #0xb4
    //     0x88295c: ldr             lr, [x21, lr, lsl #3]
    //     0x882960: blr             lr
    // 0x882964: cmp             w0, NULL
    // 0x882968: b.ne            #0x882978
    // 0x88296c: nop             
    // 0x882970: r3 = ""
    //     0x882970: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882974: b               #0x88297c
    // 0x882978: mov             x3, x0
    // 0x88297c: mov             x0, x3
    // 0x882980: stur            x3, [fp, #-8]
    // 0x882984: r2 = Null
    //     0x882984: mov             x2, NULL
    // 0x882988: r1 = Null
    //     0x882988: mov             x1, NULL
    // 0x88298c: r4 = 59
    //     0x88298c: movz            x4, #0x3b
    // 0x882990: branchIfSmi(r0, 0x8829a0)
    //     0x882990: tbz             w0, #0, #0x8829a0
    //     0x882994: nop             
    // 0x882998: r4 = LoadClassIdInstr(r0)
    //     0x882998: ldur            x4, [x0, #-1]
    //     0x88299c: ubfx            x4, x4, #0xc, #0x14
    // 0x8829a0: sub             x4, x4, #0x5d
    // 0x8829a4: cmp             x4, #1
    // 0x8829a8: b.ls            #0x8829c0
    // 0x8829ac: nop             
    // 0x8829b0: r8 = String
    //     0x8829b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8829b4: r3 = Null
    //     0x8829b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x127f8] Null
    //     0x8829b8: ldr             x3, [x3, #0x7f8]
    // 0x8829bc: r0 = String()
    //     0x8829bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8829c0: ldur            x0, [fp, #-8]
    // 0x8829c4: r1 = LoadClassIdInstr(r0)
    //     0x8829c4: ldur            x1, [x0, #-1]
    //     0x8829c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8829cc: r16 = "2"
    //     0x8829cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8829d0: ldr             x16, [x16, #0x6a8]
    // 0x8829d4: stp             x16, x0, [SP]
    // 0x8829d8: mov             x0, x1
    // 0x8829dc: mov             lr, x0
    // 0x8829e0: ldr             lr, [x21, lr, lsl #3]
    // 0x8829e4: blr             lr
    // 0x8829e8: tbnz            w0, #4, #0x8829f8
    // 0x8829ec: nop             
    // 0x8829f0: r0 = "end"
    //     0x8829f0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x8829f4: b               #0x8838b4
    // 0x8829f8: r0 = "day3"
    //     0x8829f8: add             x0, PP, #0x12, lsl #12  ; [pp+0x12808] "day3"
    //     0x8829fc: ldr             x0, [x0, #0x808]
    // 0x882a00: b               #0x8838b4
    // 0x882a04: r16 = "youngjimamemoryDay2Event"
    //     0x882a04: add             x16, PP, #0x12, lsl #12  ; [pp+0x12810] "youngjimamemoryDay2Event"
    //     0x882a08: ldr             x16, [x16, #0x810]
    // 0x882a0c: ldur            lr, [fp, #-0x28]
    // 0x882a10: stp             lr, x16, [SP]
    // 0x882a14: r0 = ==()
    //     0x882a14: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882a18: tbnz            w0, #4, #0x882b04
    // 0x882a1c: nop             
    // 0x882a20: r0 = LoadStaticField(0xb54)
    //     0x882a20: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882a24: ldr             x0, [x0, #0x16a8]
    // 0x882a28: cmp             w0, NULL
    // 0x882a2c: b.ne            #0x882a3c
    // 0x882a30: nop             
    // 0x882a34: r0 = Null
    //     0x882a34: mov             x0, NULL
    // 0x882a38: b               #0x882a64
    // 0x882a3c: r17 = 351
    //     0x882a3c: movz            x17, #0x15f
    // 0x882a40: ldr             w1, [x0, x17]
    // 0x882a44: DecompressPointer r1
    //     0x882a44: add             x1, x1, HEAP, lsl #32
    // 0x882a48: r0 = LoadClassIdInstr(r1)
    //     0x882a48: ldur            x0, [x1, #-1]
    //     0x882a4c: ubfx            x0, x0, #0xc, #0x14
    // 0x882a50: r2 = "youngjimamemoryMain"
    //     0x882a50: add             x2, PP, #0x12, lsl #12  ; [pp+0x127d0] "youngjimamemoryMain"
    //     0x882a54: ldr             x2, [x2, #0x7d0]
    // 0x882a58: r0 = GDT[cid_x0 + -0xb4]()
    //     0x882a58: sub             lr, x0, #0xb4
    //     0x882a5c: ldr             lr, [x21, lr, lsl #3]
    //     0x882a60: blr             lr
    // 0x882a64: cmp             w0, NULL
    // 0x882a68: b.ne            #0x882a78
    // 0x882a6c: nop             
    // 0x882a70: r3 = ""
    //     0x882a70: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x882a74: b               #0x882a7c
    // 0x882a78: mov             x3, x0
    // 0x882a7c: mov             x0, x3
    // 0x882a80: stur            x3, [fp, #-8]
    // 0x882a84: r2 = Null
    //     0x882a84: mov             x2, NULL
    // 0x882a88: r1 = Null
    //     0x882a88: mov             x1, NULL
    // 0x882a8c: r4 = 59
    //     0x882a8c: movz            x4, #0x3b
    // 0x882a90: branchIfSmi(r0, 0x882aa0)
    //     0x882a90: tbz             w0, #0, #0x882aa0
    //     0x882a94: nop             
    // 0x882a98: r4 = LoadClassIdInstr(r0)
    //     0x882a98: ldur            x4, [x0, #-1]
    //     0x882a9c: ubfx            x4, x4, #0xc, #0x14
    // 0x882aa0: sub             x4, x4, #0x5d
    // 0x882aa4: cmp             x4, #1
    // 0x882aa8: b.ls            #0x882ac0
    // 0x882aac: nop             
    // 0x882ab0: r8 = String
    //     0x882ab0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x882ab4: r3 = Null
    //     0x882ab4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12818] Null
    //     0x882ab8: ldr             x3, [x3, #0x818]
    // 0x882abc: r0 = String()
    //     0x882abc: bl              #0x1523244  ; IsType_String_Stub
    // 0x882ac0: ldur            x0, [fp, #-8]
    // 0x882ac4: r1 = LoadClassIdInstr(r0)
    //     0x882ac4: ldur            x1, [x0, #-1]
    //     0x882ac8: ubfx            x1, x1, #0xc, #0x14
    // 0x882acc: r16 = "1"
    //     0x882acc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x882ad0: ldr             x16, [x16, #0x6a0]
    // 0x882ad4: stp             x16, x0, [SP]
    // 0x882ad8: mov             x0, x1
    // 0x882adc: mov             lr, x0
    // 0x882ae0: ldr             lr, [x21, lr, lsl #3]
    // 0x882ae4: blr             lr
    // 0x882ae8: tbnz            w0, #4, #0x882af8
    // 0x882aec: nop             
    // 0x882af0: r0 = "end"
    //     0x882af0: ldr             x0, [PP, #0x908]  ; [pp+0x908] "end"
    // 0x882af4: b               #0x8838b4
    // 0x882af8: r0 = "day2"
    //     0x882af8: add             x0, PP, #0x12, lsl #12  ; [pp+0x12828] "day2"
    //     0x882afc: ldr             x0, [x0, #0x828]
    // 0x882b00: b               #0x8838b4
    // 0x882b04: r16 = "youngjimamemoryD3Junior2Deck"
    //     0x882b04: add             x16, PP, #0x12, lsl #12  ; [pp+0x12830] "youngjimamemoryD3Junior2Deck"
    //     0x882b08: ldr             x16, [x16, #0x830]
    // 0x882b0c: ldur            lr, [fp, #-0x28]
    // 0x882b10: stp             lr, x16, [SP]
    // 0x882b14: r0 = ==()
    //     0x882b14: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882b18: tbnz            w0, #4, #0x882c50
    // 0x882b1c: nop             
    // 0x882b20: r0 = LoadStaticField(0xb54)
    //     0x882b20: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882b24: ldr             x0, [x0, #0x16a8]
    // 0x882b28: cmp             w0, NULL
    // 0x882b2c: b.ne            #0x882b3c
    // 0x882b30: nop             
    // 0x882b34: r0 = Null
    //     0x882b34: mov             x0, NULL
    // 0x882b38: b               #0x882b4c
    // 0x882b3c: r17 = 311
    //     0x882b3c: movz            x17, #0x137
    // 0x882b40: ldr             w1, [x0, x17]
    // 0x882b44: DecompressPointer r1
    //     0x882b44: add             x1, x1, HEAP, lsl #32
    // 0x882b48: mov             x0, x1
    // 0x882b4c: cmp             w0, NULL
    // 0x882b50: b.ne            #0x882b6c
    // 0x882b54: nop             
    // 0x882b58: r1 = Null
    //     0x882b58: mov             x1, NULL
    // 0x882b5c: r2 = 0
    //     0x882b5c: movz            x2, #0
    // 0x882b60: r0 = _GrowableList()
    //     0x882b60: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x882b64: mov             x1, x0
    // 0x882b68: b               #0x882b70
    // 0x882b6c: mov             x1, x0
    // 0x882b70: r0 = LoadClassIdInstr(r1)
    //     0x882b70: ldur            x0, [x1, #-1]
    //     0x882b74: ubfx            x0, x0, #0xc, #0x14
    // 0x882b78: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x882b78: movz            x17, #0xa37b
    //     0x882b7c: add             lr, x0, x17
    //     0x882b80: ldr             lr, [x21, lr, lsl #3]
    //     0x882b84: blr             lr
    // 0x882b88: stur            x0, [fp, #-8]
    // 0x882b8c: CheckStackOverflow
    //     0x882b8c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x882b90: cmp             SP, x16
    //     0x882b94: b.ls            #0x883a3c
    //     0x882b98: nop             
    // 0x882b9c: mov             x1, x0
    // 0x882ba0: r0 = moveNext()
    //     0x882ba0: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x882ba4: tbnz            w0, #4, #0x882c44
    // 0x882ba8: nop             
    // 0x882bac: ldur            x1, [fp, #-8]
    // 0x882bb0: r0 = current()
    //     0x882bb0: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x882bb4: mov             x3, x0
    // 0x882bb8: r2 = Null
    //     0x882bb8: mov             x2, NULL
    // 0x882bbc: r1 = Null
    //     0x882bbc: mov             x1, NULL
    // 0x882bc0: stur            x3, [fp, #-0x10]
    // 0x882bc4: r4 = 59
    //     0x882bc4: movz            x4, #0x3b
    // 0x882bc8: branchIfSmi(r0, 0x882bd8)
    //     0x882bc8: tbz             w0, #0, #0x882bd8
    //     0x882bcc: nop             
    // 0x882bd0: r4 = LoadClassIdInstr(r0)
    //     0x882bd0: ldur            x4, [x0, #-1]
    //     0x882bd4: ubfx            x4, x4, #0xc, #0x14
    // 0x882bd8: sub             x4, x4, #0x5d
    // 0x882bdc: cmp             x4, #1
    // 0x882be0: b.ls            #0x882bf8
    // 0x882be4: nop             
    // 0x882be8: r8 = String
    //     0x882be8: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x882bec: r3 = Null
    //     0x882bec: add             x3, PP, #0x12, lsl #12  ; [pp+0x12838] Null
    //     0x882bf0: ldr             x3, [x3, #0x838]
    // 0x882bf4: r0 = String()
    //     0x882bf4: bl              #0x1523244  ; IsType_String_Stub
    // 0x882bf8: ldur            x1, [fp, #-0x10]
    // 0x882bfc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x882bfc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x882c00: r0 = getCard()
    //     0x882c00: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x882c04: LoadField: r1 = r0->field_2b
    //     0x882c04: ldur            w1, [x0, #0x2b]
    // 0x882c08: DecompressPointer r1
    //     0x882c08: add             x1, x1, HEAP, lsl #32
    // 0x882c0c: cmp             w1, NULL
    // 0x882c10: b.ne            #0x882c20
    // 0x882c14: nop             
    // 0x882c18: r0 = 0
    //     0x882c18: movz            x0, #0
    // 0x882c1c: b               #0x882c24
    // 0x882c20: r0 = LoadInt32Instr(r1)
    //     0x882c20: sbfx            x0, x1, #1, #0x1f
    // 0x882c24: cmp             x0, #3
    // 0x882c28: b.ge            #0x882c38
    // 0x882c2c: nop             
    // 0x882c30: ldur            x0, [fp, #-8]
    // 0x882c34: b               #0x882b8c
    // 0x882c38: r0 = "junior2D3WrongDeck"
    //     0x882c38: add             x0, PP, #0x12, lsl #12  ; [pp+0x12848] "junior2D3WrongDeck"
    //     0x882c3c: ldr             x0, [x0, #0x848]
    // 0x882c40: b               #0x8838b4
    // 0x882c44: r0 = "junior2D3CorrectDeck"
    //     0x882c44: add             x0, PP, #0x12, lsl #12  ; [pp+0x12850] "junior2D3CorrectDeck"
    //     0x882c48: ldr             x0, [x0, #0x850]
    // 0x882c4c: b               #0x8838b4
    // 0x882c50: r16 = "youngjimamemoryD3Junior1Deck"
    //     0x882c50: add             x16, PP, #0x12, lsl #12  ; [pp+0x12858] "youngjimamemoryD3Junior1Deck"
    //     0x882c54: ldr             x16, [x16, #0x858]
    // 0x882c58: ldur            lr, [fp, #-0x28]
    // 0x882c5c: stp             lr, x16, [SP]
    // 0x882c60: r0 = ==()
    //     0x882c60: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882c64: tbnz            w0, #4, #0x882d9c
    // 0x882c68: nop             
    // 0x882c6c: r0 = LoadStaticField(0xb54)
    //     0x882c6c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882c70: ldr             x0, [x0, #0x16a8]
    // 0x882c74: cmp             w0, NULL
    // 0x882c78: b.ne            #0x882c88
    // 0x882c7c: nop             
    // 0x882c80: r0 = Null
    //     0x882c80: mov             x0, NULL
    // 0x882c84: b               #0x882c98
    // 0x882c88: r17 = 311
    //     0x882c88: movz            x17, #0x137
    // 0x882c8c: ldr             w1, [x0, x17]
    // 0x882c90: DecompressPointer r1
    //     0x882c90: add             x1, x1, HEAP, lsl #32
    // 0x882c94: mov             x0, x1
    // 0x882c98: cmp             w0, NULL
    // 0x882c9c: b.ne            #0x882cb8
    // 0x882ca0: nop             
    // 0x882ca4: r1 = Null
    //     0x882ca4: mov             x1, NULL
    // 0x882ca8: r2 = 0
    //     0x882ca8: movz            x2, #0
    // 0x882cac: r0 = _GrowableList()
    //     0x882cac: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x882cb0: mov             x1, x0
    // 0x882cb4: b               #0x882cbc
    // 0x882cb8: mov             x1, x0
    // 0x882cbc: r0 = LoadClassIdInstr(r1)
    //     0x882cbc: ldur            x0, [x1, #-1]
    //     0x882cc0: ubfx            x0, x0, #0xc, #0x14
    // 0x882cc4: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x882cc4: movz            x17, #0xa37b
    //     0x882cc8: add             lr, x0, x17
    //     0x882ccc: ldr             lr, [x21, lr, lsl #3]
    //     0x882cd0: blr             lr
    // 0x882cd4: stur            x0, [fp, #-8]
    // 0x882cd8: CheckStackOverflow
    //     0x882cd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x882cdc: cmp             SP, x16
    //     0x882ce0: b.ls            #0x883a44
    //     0x882ce4: nop             
    // 0x882ce8: mov             x1, x0
    // 0x882cec: r0 = moveNext()
    //     0x882cec: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x882cf0: tbnz            w0, #4, #0x882d90
    // 0x882cf4: nop             
    // 0x882cf8: ldur            x1, [fp, #-8]
    // 0x882cfc: r0 = current()
    //     0x882cfc: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x882d00: mov             x3, x0
    // 0x882d04: r2 = Null
    //     0x882d04: mov             x2, NULL
    // 0x882d08: r1 = Null
    //     0x882d08: mov             x1, NULL
    // 0x882d0c: stur            x3, [fp, #-0x10]
    // 0x882d10: r4 = 59
    //     0x882d10: movz            x4, #0x3b
    // 0x882d14: branchIfSmi(r0, 0x882d24)
    //     0x882d14: tbz             w0, #0, #0x882d24
    //     0x882d18: nop             
    // 0x882d1c: r4 = LoadClassIdInstr(r0)
    //     0x882d1c: ldur            x4, [x0, #-1]
    //     0x882d20: ubfx            x4, x4, #0xc, #0x14
    // 0x882d24: sub             x4, x4, #0x5d
    // 0x882d28: cmp             x4, #1
    // 0x882d2c: b.ls            #0x882d44
    // 0x882d30: nop             
    // 0x882d34: r8 = String
    //     0x882d34: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x882d38: r3 = Null
    //     0x882d38: add             x3, PP, #0x12, lsl #12  ; [pp+0x12860] Null
    //     0x882d3c: ldr             x3, [x3, #0x860]
    // 0x882d40: r0 = String()
    //     0x882d40: bl              #0x1523244  ; IsType_String_Stub
    // 0x882d44: ldur            x1, [fp, #-0x10]
    // 0x882d48: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x882d48: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x882d4c: r0 = getCard()
    //     0x882d4c: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x882d50: LoadField: r1 = r0->field_27
    //     0x882d50: ldur            w1, [x0, #0x27]
    // 0x882d54: DecompressPointer r1
    //     0x882d54: add             x1, x1, HEAP, lsl #32
    // 0x882d58: cmp             w1, NULL
    // 0x882d5c: b.ne            #0x882d6c
    // 0x882d60: nop             
    // 0x882d64: r0 = 0
    //     0x882d64: movz            x0, #0
    // 0x882d68: b               #0x882d70
    // 0x882d6c: r0 = LoadInt32Instr(r1)
    //     0x882d6c: sbfx            x0, x1, #1, #0x1f
    // 0x882d70: cmp             x0, #3
    // 0x882d74: b.ge            #0x882d84
    // 0x882d78: nop             
    // 0x882d7c: ldur            x0, [fp, #-8]
    // 0x882d80: b               #0x882cd8
    // 0x882d84: r0 = "junior1D3WrongDeck"
    //     0x882d84: add             x0, PP, #0x12, lsl #12  ; [pp+0x12870] "junior1D3WrongDeck"
    //     0x882d88: ldr             x0, [x0, #0x870]
    // 0x882d8c: b               #0x8838b4
    // 0x882d90: r0 = "junior1D3CorrectDeck"
    //     0x882d90: add             x0, PP, #0x12, lsl #12  ; [pp+0x12878] "junior1D3CorrectDeck"
    //     0x882d94: ldr             x0, [x0, #0x878]
    // 0x882d98: b               #0x8838b4
    // 0x882d9c: r16 = "youngjimamemoryD2Junior2Deck"
    //     0x882d9c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12880] "youngjimamemoryD2Junior2Deck"
    //     0x882da0: ldr             x16, [x16, #0x880]
    // 0x882da4: ldur            lr, [fp, #-0x28]
    // 0x882da8: stp             lr, x16, [SP]
    // 0x882dac: r0 = ==()
    //     0x882dac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882db0: tbnz            w0, #4, #0x882ee8
    // 0x882db4: nop             
    // 0x882db8: r0 = LoadStaticField(0xb54)
    //     0x882db8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882dbc: ldr             x0, [x0, #0x16a8]
    // 0x882dc0: cmp             w0, NULL
    // 0x882dc4: b.ne            #0x882dd4
    // 0x882dc8: nop             
    // 0x882dcc: r0 = Null
    //     0x882dcc: mov             x0, NULL
    // 0x882dd0: b               #0x882de4
    // 0x882dd4: r17 = 311
    //     0x882dd4: movz            x17, #0x137
    // 0x882dd8: ldr             w1, [x0, x17]
    // 0x882ddc: DecompressPointer r1
    //     0x882ddc: add             x1, x1, HEAP, lsl #32
    // 0x882de0: mov             x0, x1
    // 0x882de4: cmp             w0, NULL
    // 0x882de8: b.ne            #0x882e04
    // 0x882dec: nop             
    // 0x882df0: r1 = Null
    //     0x882df0: mov             x1, NULL
    // 0x882df4: r2 = 0
    //     0x882df4: movz            x2, #0
    // 0x882df8: r0 = _GrowableList()
    //     0x882df8: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x882dfc: mov             x1, x0
    // 0x882e00: b               #0x882e08
    // 0x882e04: mov             x1, x0
    // 0x882e08: r0 = LoadClassIdInstr(r1)
    //     0x882e08: ldur            x0, [x1, #-1]
    //     0x882e0c: ubfx            x0, x0, #0xc, #0x14
    // 0x882e10: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x882e10: movz            x17, #0xa37b
    //     0x882e14: add             lr, x0, x17
    //     0x882e18: ldr             lr, [x21, lr, lsl #3]
    //     0x882e1c: blr             lr
    // 0x882e20: stur            x0, [fp, #-8]
    // 0x882e24: CheckStackOverflow
    //     0x882e24: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x882e28: cmp             SP, x16
    //     0x882e2c: b.ls            #0x883a4c
    //     0x882e30: nop             
    // 0x882e34: mov             x1, x0
    // 0x882e38: r0 = moveNext()
    //     0x882e38: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x882e3c: tbnz            w0, #4, #0x882edc
    // 0x882e40: nop             
    // 0x882e44: ldur            x1, [fp, #-8]
    // 0x882e48: r0 = current()
    //     0x882e48: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x882e4c: mov             x3, x0
    // 0x882e50: r2 = Null
    //     0x882e50: mov             x2, NULL
    // 0x882e54: r1 = Null
    //     0x882e54: mov             x1, NULL
    // 0x882e58: stur            x3, [fp, #-0x10]
    // 0x882e5c: r4 = 59
    //     0x882e5c: movz            x4, #0x3b
    // 0x882e60: branchIfSmi(r0, 0x882e70)
    //     0x882e60: tbz             w0, #0, #0x882e70
    //     0x882e64: nop             
    // 0x882e68: r4 = LoadClassIdInstr(r0)
    //     0x882e68: ldur            x4, [x0, #-1]
    //     0x882e6c: ubfx            x4, x4, #0xc, #0x14
    // 0x882e70: sub             x4, x4, #0x5d
    // 0x882e74: cmp             x4, #1
    // 0x882e78: b.ls            #0x882e90
    // 0x882e7c: nop             
    // 0x882e80: r8 = String
    //     0x882e80: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x882e84: r3 = Null
    //     0x882e84: add             x3, PP, #0x12, lsl #12  ; [pp+0x12888] Null
    //     0x882e88: ldr             x3, [x3, #0x888]
    // 0x882e8c: r0 = String()
    //     0x882e8c: bl              #0x1523244  ; IsType_String_Stub
    // 0x882e90: ldur            x1, [fp, #-0x10]
    // 0x882e94: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x882e94: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x882e98: r0 = getCard()
    //     0x882e98: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x882e9c: LoadField: r1 = r0->field_2b
    //     0x882e9c: ldur            w1, [x0, #0x2b]
    // 0x882ea0: DecompressPointer r1
    //     0x882ea0: add             x1, x1, HEAP, lsl #32
    // 0x882ea4: cmp             w1, NULL
    // 0x882ea8: b.ne            #0x882eb8
    // 0x882eac: nop             
    // 0x882eb0: r0 = 0
    //     0x882eb0: movz            x0, #0
    // 0x882eb4: b               #0x882ebc
    // 0x882eb8: r0 = LoadInt32Instr(r1)
    //     0x882eb8: sbfx            x0, x1, #1, #0x1f
    // 0x882ebc: cmp             x0, #3
    // 0x882ec0: b.ge            #0x882ed0
    // 0x882ec4: nop             
    // 0x882ec8: ldur            x0, [fp, #-8]
    // 0x882ecc: b               #0x882e24
    // 0x882ed0: r0 = "junior2D2WrongDeck"
    //     0x882ed0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12898] "junior2D2WrongDeck"
    //     0x882ed4: ldr             x0, [x0, #0x898]
    // 0x882ed8: b               #0x8838b4
    // 0x882edc: r0 = "junior2D2CorrectDeck"
    //     0x882edc: add             x0, PP, #0x12, lsl #12  ; [pp+0x128a0] "junior2D2CorrectDeck"
    //     0x882ee0: ldr             x0, [x0, #0x8a0]
    // 0x882ee4: b               #0x8838b4
    // 0x882ee8: r16 = "youngjimamemoryD2Junior1Deck"
    //     0x882ee8: add             x16, PP, #0x12, lsl #12  ; [pp+0x128a8] "youngjimamemoryD2Junior1Deck"
    //     0x882eec: ldr             x16, [x16, #0x8a8]
    // 0x882ef0: ldur            lr, [fp, #-0x28]
    // 0x882ef4: stp             lr, x16, [SP]
    // 0x882ef8: r0 = ==()
    //     0x882ef8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x882efc: tbnz            w0, #4, #0x883034
    // 0x882f00: nop             
    // 0x882f04: r0 = LoadStaticField(0xb54)
    //     0x882f04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x882f08: ldr             x0, [x0, #0x16a8]
    // 0x882f0c: cmp             w0, NULL
    // 0x882f10: b.ne            #0x882f20
    // 0x882f14: nop             
    // 0x882f18: r0 = Null
    //     0x882f18: mov             x0, NULL
    // 0x882f1c: b               #0x882f30
    // 0x882f20: r17 = 311
    //     0x882f20: movz            x17, #0x137
    // 0x882f24: ldr             w1, [x0, x17]
    // 0x882f28: DecompressPointer r1
    //     0x882f28: add             x1, x1, HEAP, lsl #32
    // 0x882f2c: mov             x0, x1
    // 0x882f30: cmp             w0, NULL
    // 0x882f34: b.ne            #0x882f50
    // 0x882f38: nop             
    // 0x882f3c: r1 = Null
    //     0x882f3c: mov             x1, NULL
    // 0x882f40: r2 = 0
    //     0x882f40: movz            x2, #0
    // 0x882f44: r0 = _GrowableList()
    //     0x882f44: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x882f48: mov             x1, x0
    // 0x882f4c: b               #0x882f54
    // 0x882f50: mov             x1, x0
    // 0x882f54: r0 = LoadClassIdInstr(r1)
    //     0x882f54: ldur            x0, [x1, #-1]
    //     0x882f58: ubfx            x0, x0, #0xc, #0x14
    // 0x882f5c: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x882f5c: movz            x17, #0xa37b
    //     0x882f60: add             lr, x0, x17
    //     0x882f64: ldr             lr, [x21, lr, lsl #3]
    //     0x882f68: blr             lr
    // 0x882f6c: stur            x0, [fp, #-8]
    // 0x882f70: CheckStackOverflow
    //     0x882f70: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x882f74: cmp             SP, x16
    //     0x882f78: b.ls            #0x883a54
    //     0x882f7c: nop             
    // 0x882f80: mov             x1, x0
    // 0x882f84: r0 = moveNext()
    //     0x882f84: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x882f88: tbnz            w0, #4, #0x883028
    // 0x882f8c: nop             
    // 0x882f90: ldur            x1, [fp, #-8]
    // 0x882f94: r0 = current()
    //     0x882f94: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x882f98: mov             x3, x0
    // 0x882f9c: r2 = Null
    //     0x882f9c: mov             x2, NULL
    // 0x882fa0: r1 = Null
    //     0x882fa0: mov             x1, NULL
    // 0x882fa4: stur            x3, [fp, #-0x10]
    // 0x882fa8: r4 = 59
    //     0x882fa8: movz            x4, #0x3b
    // 0x882fac: branchIfSmi(r0, 0x882fbc)
    //     0x882fac: tbz             w0, #0, #0x882fbc
    //     0x882fb0: nop             
    // 0x882fb4: r4 = LoadClassIdInstr(r0)
    //     0x882fb4: ldur            x4, [x0, #-1]
    //     0x882fb8: ubfx            x4, x4, #0xc, #0x14
    // 0x882fbc: sub             x4, x4, #0x5d
    // 0x882fc0: cmp             x4, #1
    // 0x882fc4: b.ls            #0x882fdc
    // 0x882fc8: nop             
    // 0x882fcc: r8 = String
    //     0x882fcc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x882fd0: r3 = Null
    //     0x882fd0: add             x3, PP, #0x12, lsl #12  ; [pp+0x128b0] Null
    //     0x882fd4: ldr             x3, [x3, #0x8b0]
    // 0x882fd8: r0 = String()
    //     0x882fd8: bl              #0x1523244  ; IsType_String_Stub
    // 0x882fdc: ldur            x1, [fp, #-0x10]
    // 0x882fe0: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x882fe0: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x882fe4: r0 = getCard()
    //     0x882fe4: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x882fe8: LoadField: r1 = r0->field_27
    //     0x882fe8: ldur            w1, [x0, #0x27]
    // 0x882fec: DecompressPointer r1
    //     0x882fec: add             x1, x1, HEAP, lsl #32
    // 0x882ff0: cmp             w1, NULL
    // 0x882ff4: b.ne            #0x883004
    // 0x882ff8: nop             
    // 0x882ffc: r0 = 0
    //     0x882ffc: movz            x0, #0
    // 0x883000: b               #0x883008
    // 0x883004: r0 = LoadInt32Instr(r1)
    //     0x883004: sbfx            x0, x1, #1, #0x1f
    // 0x883008: cmp             x0, #3
    // 0x88300c: b.ge            #0x88301c
    // 0x883010: nop             
    // 0x883014: ldur            x0, [fp, #-8]
    // 0x883018: b               #0x882f70
    // 0x88301c: r0 = "junior1D2WrongDeck"
    //     0x88301c: add             x0, PP, #0x12, lsl #12  ; [pp+0x128c0] "junior1D2WrongDeck"
    //     0x883020: ldr             x0, [x0, #0x8c0]
    // 0x883024: b               #0x8838b4
    // 0x883028: r0 = "junior1D2CorrectDeck"
    //     0x883028: add             x0, PP, #0x12, lsl #12  ; [pp+0x128c8] "junior1D2CorrectDeck"
    //     0x88302c: ldr             x0, [x0, #0x8c8]
    // 0x883030: b               #0x8838b4
    // 0x883034: r16 = "youngjimamemoryDay2Win"
    //     0x883034: add             x16, PP, #0x12, lsl #12  ; [pp+0x128d0] "youngjimamemoryDay2Win"
    //     0x883038: ldr             x16, [x16, #0x8d0]
    // 0x88303c: ldur            lr, [fp, #-0x28]
    // 0x883040: stp             lr, x16, [SP]
    // 0x883044: r0 = ==()
    //     0x883044: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883048: tbnz            w0, #4, #0x8830d8
    // 0x88304c: nop             
    // 0x883050: r0 = LoadStaticField(0xb54)
    //     0x883050: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883054: ldr             x0, [x0, #0x16a8]
    // 0x883058: cmp             w0, NULL
    // 0x88305c: b.ne            #0x88306c
    // 0x883060: nop             
    // 0x883064: r0 = Null
    //     0x883064: mov             x0, NULL
    // 0x883068: b               #0x883094
    // 0x88306c: r17 = 347
    //     0x88306c: movz            x17, #0x15b
    // 0x883070: ldr             w1, [x0, x17]
    // 0x883074: DecompressPointer r1
    //     0x883074: add             x1, x1, HEAP, lsl #32
    // 0x883078: r0 = LoadClassIdInstr(r1)
    //     0x883078: ldur            x0, [x1, #-1]
    //     0x88307c: ubfx            x0, x0, #0xc, #0x14
    // 0x883080: r2 = "youngjimamemoryDay2Win"
    //     0x883080: add             x2, PP, #0x12, lsl #12  ; [pp+0x128d0] "youngjimamemoryDay2Win"
    //     0x883084: ldr             x2, [x2, #0x8d0]
    // 0x883088: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883088: sub             lr, x0, #0xb4
    //     0x88308c: ldr             lr, [x21, lr, lsl #3]
    //     0x883090: blr             lr
    // 0x883094: cmp             w0, NULL
    // 0x883098: b.ne            #0x8830a4
    // 0x88309c: nop             
    // 0x8830a0: r0 = 0
    //     0x8830a0: movz            x0, #0
    // 0x8830a4: r1 = 59
    //     0x8830a4: movz            x1, #0x3b
    // 0x8830a8: branchIfSmi(r0, 0x8830b8)
    //     0x8830a8: tbz             w0, #0, #0x8830b8
    //     0x8830ac: nop             
    // 0x8830b0: r1 = LoadClassIdInstr(r0)
    //     0x8830b0: ldur            x1, [x0, #-1]
    //     0x8830b4: ubfx            x1, x1, #0xc, #0x14
    // 0x8830b8: str             x0, [SP]
    // 0x8830bc: mov             x0, x1
    // 0x8830c0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8830c0: ldr             x4, [PP, #0x2a8]  ; [pp+0x2a8] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8830c4: r0 = GDT[cid_x0 + 0x4756]()
    //     0x8830c4: movz            x17, #0x4756
    //     0x8830c8: add             lr, x0, x17
    //     0x8830cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8830d0: blr             lr
    // 0x8830d4: b               #0x8838b4
    // 0x8830d8: r16 = "youngjimaMemoryCoach"
    //     0x8830d8: add             x16, PP, #0x12, lsl #12  ; [pp+0x128d8] "youngjimaMemoryCoach"
    //     0x8830dc: ldr             x16, [x16, #0x8d8]
    // 0x8830e0: ldur            lr, [fp, #-0x28]
    // 0x8830e4: stp             lr, x16, [SP]
    // 0x8830e8: r0 = ==()
    //     0x8830e8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8830ec: tbnz            w0, #4, #0x8831c8
    // 0x8830f0: nop             
    // 0x8830f4: r0 = LoadStaticField(0xb54)
    //     0x8830f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8830f8: ldr             x0, [x0, #0x16a8]
    // 0x8830fc: cmp             w0, NULL
    // 0x883100: b.ne            #0x883110
    // 0x883104: nop             
    // 0x883108: r0 = Null
    //     0x883108: mov             x0, NULL
    // 0x88310c: b               #0x883138
    // 0x883110: r17 = 347
    //     0x883110: movz            x17, #0x15b
    // 0x883114: ldr             w1, [x0, x17]
    // 0x883118: DecompressPointer r1
    //     0x883118: add             x1, x1, HEAP, lsl #32
    // 0x88311c: r0 = LoadClassIdInstr(r1)
    //     0x88311c: ldur            x0, [x1, #-1]
    //     0x883120: ubfx            x0, x0, #0xc, #0x14
    // 0x883124: r2 = "youngjimaCompletion"
    //     0x883124: add             x2, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x883128: ldr             x2, [x2, #0x8e0]
    // 0x88312c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88312c: sub             lr, x0, #0xb4
    //     0x883130: ldr             lr, [x21, lr, lsl #3]
    //     0x883134: blr             lr
    // 0x883138: cmp             w0, NULL
    // 0x88313c: b.ne            #0x88314c
    // 0x883140: nop             
    // 0x883144: r3 = 0
    //     0x883144: movz            x3, #0
    // 0x883148: b               #0x883150
    // 0x88314c: mov             x3, x0
    // 0x883150: mov             x0, x3
    // 0x883154: stur            x3, [fp, #-8]
    // 0x883158: r2 = Null
    //     0x883158: mov             x2, NULL
    // 0x88315c: r1 = Null
    //     0x88315c: mov             x1, NULL
    // 0x883160: branchIfSmi(r0, 0x883190)
    //     0x883160: tbz             w0, #0, #0x883190
    //     0x883164: nop             
    // 0x883168: r4 = LoadClassIdInstr(r0)
    //     0x883168: ldur            x4, [x0, #-1]
    //     0x88316c: ubfx            x4, x4, #0xc, #0x14
    // 0x883170: sub             x4, x4, #0x3b
    // 0x883174: cmp             x4, #1
    // 0x883178: b.ls            #0x883190
    // 0x88317c: nop             
    // 0x883180: r8 = int
    //     0x883180: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x883184: r3 = Null
    //     0x883184: add             x3, PP, #0x12, lsl #12  ; [pp+0x128e8] Null
    //     0x883188: ldr             x3, [x3, #0x8e8]
    // 0x88318c: r0 = int()
    //     0x88318c: bl              #0x1524294  ; IsType_int_Stub
    // 0x883190: ldur            x0, [fp, #-8]
    // 0x883194: r1 = LoadInt32Instr(r0)
    //     0x883194: sbfx            x1, x0, #1, #0x1f
    //     0x883198: tbz             w0, #0, #0x8831a4
    //     0x88319c: nop             
    //     0x8831a0: ldur            x1, [x0, #7]
    // 0x8831a4: cmp             x1, #0x44
    // 0x8831a8: b.lt            #0x8831bc
    // 0x8831ac: nop             
    // 0x8831b0: r0 = "highScore"
    //     0x8831b0: add             x0, PP, #0x12, lsl #12  ; [pp+0x128f8] "highScore"
    //     0x8831b4: ldr             x0, [x0, #0x8f8]
    // 0x8831b8: b               #0x8838b4
    // 0x8831bc: r0 = "lowScore"
    //     0x8831bc: add             x0, PP, #0x12, lsl #12  ; [pp+0x12900] "lowScore"
    //     0x8831c0: ldr             x0, [x0, #0x900]
    // 0x8831c4: b               #0x8838b4
    // 0x8831c8: r16 = "youngjimaMemoryElite1"
    //     0x8831c8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12908] "youngjimaMemoryElite1"
    //     0x8831cc: ldr             x16, [x16, #0x908]
    // 0x8831d0: ldur            lr, [fp, #-0x28]
    // 0x8831d4: stp             lr, x16, [SP]
    // 0x8831d8: r0 = ==()
    //     0x8831d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8831dc: tbnz            w0, #4, #0x883304
    // 0x8831e0: nop             
    // 0x8831e4: r0 = LoadStaticField(0xb54)
    //     0x8831e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8831e8: ldr             x0, [x0, #0x16a8]
    // 0x8831ec: cmp             w0, NULL
    // 0x8831f0: b.ne            #0x883200
    // 0x8831f4: nop             
    // 0x8831f8: r0 = Null
    //     0x8831f8: mov             x0, NULL
    // 0x8831fc: b               #0x883228
    // 0x883200: r17 = 351
    //     0x883200: movz            x17, #0x15f
    // 0x883204: ldr             w1, [x0, x17]
    // 0x883208: DecompressPointer r1
    //     0x883208: add             x1, x1, HEAP, lsl #32
    // 0x88320c: r0 = LoadClassIdInstr(r1)
    //     0x88320c: ldur            x0, [x1, #-1]
    //     0x883210: ubfx            x0, x0, #0xc, #0x14
    // 0x883214: r2 = "youngjimamemoryElite1"
    //     0x883214: add             x2, PP, #0x12, lsl #12  ; [pp+0x12910] "youngjimamemoryElite1"
    //     0x883218: ldr             x2, [x2, #0x910]
    // 0x88321c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88321c: sub             lr, x0, #0xb4
    //     0x883220: ldr             lr, [x21, lr, lsl #3]
    //     0x883224: blr             lr
    // 0x883228: cmp             w0, NULL
    // 0x88322c: b.ne            #0x88323c
    // 0x883230: nop             
    // 0x883234: r3 = ""
    //     0x883234: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x883238: b               #0x883240
    // 0x88323c: mov             x3, x0
    // 0x883240: mov             x0, x3
    // 0x883244: stur            x3, [fp, #-8]
    // 0x883248: r2 = Null
    //     0x883248: mov             x2, NULL
    // 0x88324c: r1 = Null
    //     0x88324c: mov             x1, NULL
    // 0x883250: r4 = 59
    //     0x883250: movz            x4, #0x3b
    // 0x883254: branchIfSmi(r0, 0x883264)
    //     0x883254: tbz             w0, #0, #0x883264
    //     0x883258: nop             
    // 0x88325c: r4 = LoadClassIdInstr(r0)
    //     0x88325c: ldur            x4, [x0, #-1]
    //     0x883260: ubfx            x4, x4, #0xc, #0x14
    // 0x883264: sub             x4, x4, #0x5d
    // 0x883268: cmp             x4, #1
    // 0x88326c: b.ls            #0x883284
    // 0x883270: nop             
    // 0x883274: r8 = String
    //     0x883274: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x883278: r3 = Null
    //     0x883278: add             x3, PP, #0x12, lsl #12  ; [pp+0x12918] Null
    //     0x88327c: ldr             x3, [x3, #0x918]
    // 0x883280: r0 = String()
    //     0x883280: bl              #0x1523244  ; IsType_String_Stub
    // 0x883284: ldur            x1, [fp, #-8]
    // 0x883288: r0 = LoadClassIdInstr(r1)
    //     0x883288: ldur            x0, [x1, #-1]
    //     0x88328c: ubfx            x0, x0, #0xc, #0x14
    // 0x883290: r16 = "2"
    //     0x883290: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x883294: ldr             x16, [x16, #0x6a8]
    // 0x883298: stp             x16, x1, [SP]
    // 0x88329c: mov             lr, x0
    // 0x8832a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8832a4: blr             lr
    // 0x8832a8: tbnz            w0, #4, #0x8832bc
    // 0x8832ac: nop             
    // 0x8832b0: r0 = "complete"
    //     0x8832b0: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8832b4: ldr             x0, [x0, #0x590]
    // 0x8832b8: b               #0x8838b4
    // 0x8832bc: ldur            x0, [fp, #-8]
    // 0x8832c0: r1 = LoadClassIdInstr(r0)
    //     0x8832c0: ldur            x1, [x0, #-1]
    //     0x8832c4: ubfx            x1, x1, #0xc, #0x14
    // 0x8832c8: r16 = "1"
    //     0x8832c8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x8832cc: ldr             x16, [x16, #0x6a0]
    // 0x8832d0: stp             x16, x0, [SP]
    // 0x8832d4: mov             x0, x1
    // 0x8832d8: mov             lr, x0
    // 0x8832dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8832e0: blr             lr
    // 0x8832e4: tbnz            w0, #4, #0x8832f8
    // 0x8832e8: nop             
    // 0x8832ec: r0 = "repeat"
    //     0x8832ec: add             x0, PP, #0x12, lsl #12  ; [pp+0x12928] "repeat"
    //     0x8832f0: ldr             x0, [x0, #0x928]
    // 0x8832f4: b               #0x8838b4
    // 0x8832f8: r0 = "firstTime"
    //     0x8832f8: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x8832fc: ldr             x0, [x0, #0x598]
    // 0x883300: b               #0x8838b4
    // 0x883304: r16 = "youngjimaMemoryElite2"
    //     0x883304: add             x16, PP, #0x12, lsl #12  ; [pp+0x12930] "youngjimaMemoryElite2"
    //     0x883308: ldr             x16, [x16, #0x930]
    // 0x88330c: ldur            lr, [fp, #-0x28]
    // 0x883310: stp             lr, x16, [SP]
    // 0x883314: r0 = ==()
    //     0x883314: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883318: tbnz            w0, #4, #0x883440
    // 0x88331c: nop             
    // 0x883320: r0 = LoadStaticField(0xb54)
    //     0x883320: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883324: ldr             x0, [x0, #0x16a8]
    // 0x883328: cmp             w0, NULL
    // 0x88332c: b.ne            #0x88333c
    // 0x883330: nop             
    // 0x883334: r0 = Null
    //     0x883334: mov             x0, NULL
    // 0x883338: b               #0x883364
    // 0x88333c: r17 = 351
    //     0x88333c: movz            x17, #0x15f
    // 0x883340: ldr             w1, [x0, x17]
    // 0x883344: DecompressPointer r1
    //     0x883344: add             x1, x1, HEAP, lsl #32
    // 0x883348: r0 = LoadClassIdInstr(r1)
    //     0x883348: ldur            x0, [x1, #-1]
    //     0x88334c: ubfx            x0, x0, #0xc, #0x14
    // 0x883350: r2 = "youngjimamemoryElite2"
    //     0x883350: add             x2, PP, #0x12, lsl #12  ; [pp+0x12938] "youngjimamemoryElite2"
    //     0x883354: ldr             x2, [x2, #0x938]
    // 0x883358: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883358: sub             lr, x0, #0xb4
    //     0x88335c: ldr             lr, [x21, lr, lsl #3]
    //     0x883360: blr             lr
    // 0x883364: cmp             w0, NULL
    // 0x883368: b.ne            #0x883378
    // 0x88336c: nop             
    // 0x883370: r3 = ""
    //     0x883370: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x883374: b               #0x88337c
    // 0x883378: mov             x3, x0
    // 0x88337c: mov             x0, x3
    // 0x883380: stur            x3, [fp, #-8]
    // 0x883384: r2 = Null
    //     0x883384: mov             x2, NULL
    // 0x883388: r1 = Null
    //     0x883388: mov             x1, NULL
    // 0x88338c: r4 = 59
    //     0x88338c: movz            x4, #0x3b
    // 0x883390: branchIfSmi(r0, 0x8833a0)
    //     0x883390: tbz             w0, #0, #0x8833a0
    //     0x883394: nop             
    // 0x883398: r4 = LoadClassIdInstr(r0)
    //     0x883398: ldur            x4, [x0, #-1]
    //     0x88339c: ubfx            x4, x4, #0xc, #0x14
    // 0x8833a0: sub             x4, x4, #0x5d
    // 0x8833a4: cmp             x4, #1
    // 0x8833a8: b.ls            #0x8833c0
    // 0x8833ac: nop             
    // 0x8833b0: r8 = String
    //     0x8833b0: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x8833b4: r3 = Null
    //     0x8833b4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12940] Null
    //     0x8833b8: ldr             x3, [x3, #0x940]
    // 0x8833bc: r0 = String()
    //     0x8833bc: bl              #0x1523244  ; IsType_String_Stub
    // 0x8833c0: ldur            x1, [fp, #-8]
    // 0x8833c4: r0 = LoadClassIdInstr(r1)
    //     0x8833c4: ldur            x0, [x1, #-1]
    //     0x8833c8: ubfx            x0, x0, #0xc, #0x14
    // 0x8833cc: r16 = "2"
    //     0x8833cc: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x8833d0: ldr             x16, [x16, #0x6a8]
    // 0x8833d4: stp             x16, x1, [SP]
    // 0x8833d8: mov             lr, x0
    // 0x8833dc: ldr             lr, [x21, lr, lsl #3]
    // 0x8833e0: blr             lr
    // 0x8833e4: tbnz            w0, #4, #0x8833f8
    // 0x8833e8: nop             
    // 0x8833ec: r0 = "complete"
    //     0x8833ec: add             x0, PP, #0x11, lsl #12  ; [pp+0x11590] "complete"
    //     0x8833f0: ldr             x0, [x0, #0x590]
    // 0x8833f4: b               #0x8838b4
    // 0x8833f8: ldur            x0, [fp, #-8]
    // 0x8833fc: r1 = LoadClassIdInstr(r0)
    //     0x8833fc: ldur            x1, [x0, #-1]
    //     0x883400: ubfx            x1, x1, #0xc, #0x14
    // 0x883404: r16 = "1"
    //     0x883404: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0x883408: ldr             x16, [x16, #0x6a0]
    // 0x88340c: stp             x16, x0, [SP]
    // 0x883410: mov             x0, x1
    // 0x883414: mov             lr, x0
    // 0x883418: ldr             lr, [x21, lr, lsl #3]
    // 0x88341c: blr             lr
    // 0x883420: tbnz            w0, #4, #0x883434
    // 0x883424: nop             
    // 0x883428: r0 = "repeat"
    //     0x883428: add             x0, PP, #0x12, lsl #12  ; [pp+0x12928] "repeat"
    //     0x88342c: ldr             x0, [x0, #0x928]
    // 0x883430: b               #0x8838b4
    // 0x883434: r0 = "firstTime"
    //     0x883434: add             x0, PP, #0x11, lsl #12  ; [pp+0x11598] "firstTime"
    //     0x883438: ldr             x0, [x0, #0x598]
    // 0x88343c: b               #0x8838b4
    // 0x883440: r16 = "youngjimamemoryJunior1Deck"
    //     0x883440: add             x16, PP, #0x12, lsl #12  ; [pp+0x12950] "youngjimamemoryJunior1Deck"
    //     0x883444: ldr             x16, [x16, #0x950]
    // 0x883448: ldur            lr, [fp, #-0x28]
    // 0x88344c: stp             lr, x16, [SP]
    // 0x883450: r0 = ==()
    //     0x883450: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883454: tbnz            w0, #4, #0x88358c
    // 0x883458: nop             
    // 0x88345c: r0 = LoadStaticField(0xb54)
    //     0x88345c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883460: ldr             x0, [x0, #0x16a8]
    // 0x883464: cmp             w0, NULL
    // 0x883468: b.ne            #0x883478
    // 0x88346c: nop             
    // 0x883470: r0 = Null
    //     0x883470: mov             x0, NULL
    // 0x883474: b               #0x883488
    // 0x883478: r17 = 311
    //     0x883478: movz            x17, #0x137
    // 0x88347c: ldr             w1, [x0, x17]
    // 0x883480: DecompressPointer r1
    //     0x883480: add             x1, x1, HEAP, lsl #32
    // 0x883484: mov             x0, x1
    // 0x883488: cmp             w0, NULL
    // 0x88348c: b.ne            #0x8834a8
    // 0x883490: nop             
    // 0x883494: r1 = Null
    //     0x883494: mov             x1, NULL
    // 0x883498: r2 = 0
    //     0x883498: movz            x2, #0
    // 0x88349c: r0 = _GrowableList()
    //     0x88349c: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x8834a0: mov             x1, x0
    // 0x8834a4: b               #0x8834ac
    // 0x8834a8: mov             x1, x0
    // 0x8834ac: r0 = LoadClassIdInstr(r1)
    //     0x8834ac: ldur            x0, [x1, #-1]
    //     0x8834b0: ubfx            x0, x0, #0xc, #0x14
    // 0x8834b4: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x8834b4: movz            x17, #0xa37b
    //     0x8834b8: add             lr, x0, x17
    //     0x8834bc: ldr             lr, [x21, lr, lsl #3]
    //     0x8834c0: blr             lr
    // 0x8834c4: stur            x0, [fp, #-8]
    // 0x8834c8: CheckStackOverflow
    //     0x8834c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8834cc: cmp             SP, x16
    //     0x8834d0: b.ls            #0x883a5c
    //     0x8834d4: nop             
    // 0x8834d8: mov             x1, x0
    // 0x8834dc: r0 = moveNext()
    //     0x8834dc: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x8834e0: tbnz            w0, #4, #0x883580
    // 0x8834e4: nop             
    // 0x8834e8: ldur            x1, [fp, #-8]
    // 0x8834ec: r0 = current()
    //     0x8834ec: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x8834f0: mov             x3, x0
    // 0x8834f4: r2 = Null
    //     0x8834f4: mov             x2, NULL
    // 0x8834f8: r1 = Null
    //     0x8834f8: mov             x1, NULL
    // 0x8834fc: stur            x3, [fp, #-0x10]
    // 0x883500: r4 = 59
    //     0x883500: movz            x4, #0x3b
    // 0x883504: branchIfSmi(r0, 0x883514)
    //     0x883504: tbz             w0, #0, #0x883514
    //     0x883508: nop             
    // 0x88350c: r4 = LoadClassIdInstr(r0)
    //     0x88350c: ldur            x4, [x0, #-1]
    //     0x883510: ubfx            x4, x4, #0xc, #0x14
    // 0x883514: sub             x4, x4, #0x5d
    // 0x883518: cmp             x4, #1
    // 0x88351c: b.ls            #0x883534
    // 0x883520: nop             
    // 0x883524: r8 = String
    //     0x883524: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x883528: r3 = Null
    //     0x883528: add             x3, PP, #0x12, lsl #12  ; [pp+0x12958] Null
    //     0x88352c: ldr             x3, [x3, #0x958]
    // 0x883530: r0 = String()
    //     0x883530: bl              #0x1523244  ; IsType_String_Stub
    // 0x883534: ldur            x1, [fp, #-0x10]
    // 0x883538: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x883538: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x88353c: r0 = getCard()
    //     0x88353c: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x883540: LoadField: r1 = r0->field_27
    //     0x883540: ldur            w1, [x0, #0x27]
    // 0x883544: DecompressPointer r1
    //     0x883544: add             x1, x1, HEAP, lsl #32
    // 0x883548: cmp             w1, NULL
    // 0x88354c: b.ne            #0x88355c
    // 0x883550: nop             
    // 0x883554: r0 = 0
    //     0x883554: movz            x0, #0
    // 0x883558: b               #0x883560
    // 0x88355c: r0 = LoadInt32Instr(r1)
    //     0x88355c: sbfx            x0, x1, #1, #0x1f
    // 0x883560: cmp             x0, #3
    // 0x883564: b.ge            #0x883574
    // 0x883568: nop             
    // 0x88356c: ldur            x0, [fp, #-8]
    // 0x883570: b               #0x8834c8
    // 0x883574: r0 = "junior1WrongDeck"
    //     0x883574: add             x0, PP, #0x12, lsl #12  ; [pp+0x12968] "junior1WrongDeck"
    //     0x883578: ldr             x0, [x0, #0x968]
    // 0x88357c: b               #0x8838b4
    // 0x883580: r0 = "junior1CorrectDeck"
    //     0x883580: add             x0, PP, #0x12, lsl #12  ; [pp+0x12970] "junior1CorrectDeck"
    //     0x883584: ldr             x0, [x0, #0x970]
    // 0x883588: b               #0x8838b4
    // 0x88358c: r16 = "youngjimamemoryJunior2Deck"
    //     0x88358c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12978] "youngjimamemoryJunior2Deck"
    //     0x883590: ldr             x16, [x16, #0x978]
    // 0x883594: ldur            lr, [fp, #-0x28]
    // 0x883598: stp             lr, x16, [SP]
    // 0x88359c: r0 = ==()
    //     0x88359c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8835a0: tbnz            w0, #4, #0x8836d8
    // 0x8835a4: nop             
    // 0x8835a8: r0 = LoadStaticField(0xb54)
    //     0x8835a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8835ac: ldr             x0, [x0, #0x16a8]
    // 0x8835b0: cmp             w0, NULL
    // 0x8835b4: b.ne            #0x8835c4
    // 0x8835b8: nop             
    // 0x8835bc: r0 = Null
    //     0x8835bc: mov             x0, NULL
    // 0x8835c0: b               #0x8835d4
    // 0x8835c4: r17 = 311
    //     0x8835c4: movz            x17, #0x137
    // 0x8835c8: ldr             w1, [x0, x17]
    // 0x8835cc: DecompressPointer r1
    //     0x8835cc: add             x1, x1, HEAP, lsl #32
    // 0x8835d0: mov             x0, x1
    // 0x8835d4: cmp             w0, NULL
    // 0x8835d8: b.ne            #0x8835f4
    // 0x8835dc: nop             
    // 0x8835e0: r1 = Null
    //     0x8835e0: mov             x1, NULL
    // 0x8835e4: r2 = 0
    //     0x8835e4: movz            x2, #0
    // 0x8835e8: r0 = _GrowableList()
    //     0x8835e8: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x8835ec: mov             x1, x0
    // 0x8835f0: b               #0x8835f8
    // 0x8835f4: mov             x1, x0
    // 0x8835f8: r0 = LoadClassIdInstr(r1)
    //     0x8835f8: ldur            x0, [x1, #-1]
    //     0x8835fc: ubfx            x0, x0, #0xc, #0x14
    // 0x883600: r0 = GDT[cid_x0 + 0xa37b]()
    //     0x883600: movz            x17, #0xa37b
    //     0x883604: add             lr, x0, x17
    //     0x883608: ldr             lr, [x21, lr, lsl #3]
    //     0x88360c: blr             lr
    // 0x883610: stur            x0, [fp, #-8]
    // 0x883614: CheckStackOverflow
    //     0x883614: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x883618: cmp             SP, x16
    //     0x88361c: b.ls            #0x883a64
    //     0x883620: nop             
    // 0x883624: mov             x1, x0
    // 0x883628: r0 = moveNext()
    //     0x883628: bl              #0x14486f4  ; [dart:_internal] ListIterator::moveNext
    // 0x88362c: tbnz            w0, #4, #0x8836cc
    // 0x883630: nop             
    // 0x883634: ldur            x1, [fp, #-8]
    // 0x883638: r0 = current()
    //     0x883638: bl              #0x1445d74  ; [dart:_internal] ListIterator::current
    // 0x88363c: mov             x3, x0
    // 0x883640: r2 = Null
    //     0x883640: mov             x2, NULL
    // 0x883644: r1 = Null
    //     0x883644: mov             x1, NULL
    // 0x883648: stur            x3, [fp, #-0x10]
    // 0x88364c: r4 = 59
    //     0x88364c: movz            x4, #0x3b
    // 0x883650: branchIfSmi(r0, 0x883660)
    //     0x883650: tbz             w0, #0, #0x883660
    //     0x883654: nop             
    // 0x883658: r4 = LoadClassIdInstr(r0)
    //     0x883658: ldur            x4, [x0, #-1]
    //     0x88365c: ubfx            x4, x4, #0xc, #0x14
    // 0x883660: sub             x4, x4, #0x5d
    // 0x883664: cmp             x4, #1
    // 0x883668: b.ls            #0x883680
    // 0x88366c: nop             
    // 0x883670: r8 = String
    //     0x883670: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x883674: r3 = Null
    //     0x883674: add             x3, PP, #0x12, lsl #12  ; [pp+0x12980] Null
    //     0x883678: ldr             x3, [x3, #0x980]
    // 0x88367c: r0 = String()
    //     0x88367c: bl              #0x1523244  ; IsType_String_Stub
    // 0x883680: ldur            x1, [fp, #-0x10]
    // 0x883684: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x883684: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x883688: r0 = getCard()
    //     0x883688: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x88368c: LoadField: r1 = r0->field_2b
    //     0x88368c: ldur            w1, [x0, #0x2b]
    // 0x883690: DecompressPointer r1
    //     0x883690: add             x1, x1, HEAP, lsl #32
    // 0x883694: cmp             w1, NULL
    // 0x883698: b.ne            #0x8836a8
    // 0x88369c: nop             
    // 0x8836a0: r0 = 0
    //     0x8836a0: movz            x0, #0
    // 0x8836a4: b               #0x8836ac
    // 0x8836a8: r0 = LoadInt32Instr(r1)
    //     0x8836a8: sbfx            x0, x1, #1, #0x1f
    // 0x8836ac: cmp             x0, #3
    // 0x8836b0: b.ge            #0x8836c0
    // 0x8836b4: nop             
    // 0x8836b8: ldur            x0, [fp, #-8]
    // 0x8836bc: b               #0x883614
    // 0x8836c0: r0 = "junior2WrongDeck"
    //     0x8836c0: add             x0, PP, #0x12, lsl #12  ; [pp+0x12990] "junior2WrongDeck"
    //     0x8836c4: ldr             x0, [x0, #0x990]
    // 0x8836c8: b               #0x8838b4
    // 0x8836cc: r0 = "junior2CorrectDeck"
    //     0x8836cc: add             x0, PP, #0x12, lsl #12  ; [pp+0x12998] "junior2CorrectDeck"
    //     0x8836d0: ldr             x0, [x0, #0x998]
    // 0x8836d4: b               #0x8838b4
    // 0x8836d8: r16 = "youngjimamemoryCheckDay1End"
    //     0x8836d8: add             x16, PP, #0x12, lsl #12  ; [pp+0x129a0] "youngjimamemoryCheckDay1End"
    //     0x8836dc: ldr             x16, [x16, #0x9a0]
    // 0x8836e0: ldur            lr, [fp, #-0x28]
    // 0x8836e4: stp             lr, x16, [SP]
    // 0x8836e8: r0 = ==()
    //     0x8836e8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8836ec: tbnz            w0, #4, #0x8838b0
    // 0x8836f0: nop             
    // 0x8836f4: r0 = LoadStaticField(0xb54)
    //     0x8836f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8836f8: ldr             x0, [x0, #0x16a8]
    // 0x8836fc: cmp             w0, NULL
    // 0x883700: b.ne            #0x883710
    // 0x883704: nop             
    // 0x883708: r0 = Null
    //     0x883708: mov             x0, NULL
    // 0x88370c: b               #0x883738
    // 0x883710: r17 = 351
    //     0x883710: movz            x17, #0x15f
    // 0x883714: ldr             w1, [x0, x17]
    // 0x883718: DecompressPointer r1
    //     0x883718: add             x1, x1, HEAP, lsl #32
    // 0x88371c: r0 = LoadClassIdInstr(r1)
    //     0x88371c: ldur            x0, [x1, #-1]
    //     0x883720: ubfx            x0, x0, #0xc, #0x14
    // 0x883724: r2 = "youngjimamemoryElite1"
    //     0x883724: add             x2, PP, #0x12, lsl #12  ; [pp+0x12910] "youngjimamemoryElite1"
    //     0x883728: ldr             x2, [x2, #0x910]
    // 0x88372c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88372c: sub             lr, x0, #0xb4
    //     0x883730: ldr             lr, [x21, lr, lsl #3]
    //     0x883734: blr             lr
    // 0x883738: cmp             w0, NULL
    // 0x88373c: b.ne            #0x88374c
    // 0x883740: nop             
    // 0x883744: r3 = ""
    //     0x883744: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x883748: b               #0x883750
    // 0x88374c: mov             x3, x0
    // 0x883750: mov             x0, x3
    // 0x883754: stur            x3, [fp, #-8]
    // 0x883758: r2 = Null
    //     0x883758: mov             x2, NULL
    // 0x88375c: r1 = Null
    //     0x88375c: mov             x1, NULL
    // 0x883760: r4 = 59
    //     0x883760: movz            x4, #0x3b
    // 0x883764: branchIfSmi(r0, 0x883774)
    //     0x883764: tbz             w0, #0, #0x883774
    //     0x883768: nop             
    // 0x88376c: r4 = LoadClassIdInstr(r0)
    //     0x88376c: ldur            x4, [x0, #-1]
    //     0x883770: ubfx            x4, x4, #0xc, #0x14
    // 0x883774: sub             x4, x4, #0x5d
    // 0x883778: cmp             x4, #1
    // 0x88377c: b.ls            #0x883794
    // 0x883780: nop             
    // 0x883784: r8 = String
    //     0x883784: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x883788: r3 = Null
    //     0x883788: add             x3, PP, #0x12, lsl #12  ; [pp+0x129a8] Null
    //     0x88378c: ldr             x3, [x3, #0x9a8]
    // 0x883790: r0 = String()
    //     0x883790: bl              #0x1523244  ; IsType_String_Stub
    // 0x883794: r0 = LoadStaticField(0xb54)
    //     0x883794: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883798: ldr             x0, [x0, #0x16a8]
    // 0x88379c: cmp             w0, NULL
    // 0x8837a0: b.ne            #0x8837b0
    // 0x8837a4: nop             
    // 0x8837a8: r0 = Null
    //     0x8837a8: mov             x0, NULL
    // 0x8837ac: b               #0x8837d8
    // 0x8837b0: r17 = 351
    //     0x8837b0: movz            x17, #0x15f
    // 0x8837b4: ldr             w1, [x0, x17]
    // 0x8837b8: DecompressPointer r1
    //     0x8837b8: add             x1, x1, HEAP, lsl #32
    // 0x8837bc: r0 = LoadClassIdInstr(r1)
    //     0x8837bc: ldur            x0, [x1, #-1]
    //     0x8837c0: ubfx            x0, x0, #0xc, #0x14
    // 0x8837c4: r2 = "youngjimamemoryElite2"
    //     0x8837c4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12938] "youngjimamemoryElite2"
    //     0x8837c8: ldr             x2, [x2, #0x938]
    // 0x8837cc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8837cc: sub             lr, x0, #0xb4
    //     0x8837d0: ldr             lr, [x21, lr, lsl #3]
    //     0x8837d4: blr             lr
    // 0x8837d8: cmp             w0, NULL
    // 0x8837dc: b.ne            #0x8837ec
    // 0x8837e0: nop             
    // 0x8837e4: r4 = ""
    //     0x8837e4: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8837e8: b               #0x8837f0
    // 0x8837ec: mov             x4, x0
    // 0x8837f0: ldur            x3, [fp, #-8]
    // 0x8837f4: mov             x0, x4
    // 0x8837f8: stur            x4, [fp, #-0x10]
    // 0x8837fc: r2 = Null
    //     0x8837fc: mov             x2, NULL
    // 0x883800: r1 = Null
    //     0x883800: mov             x1, NULL
    // 0x883804: r4 = 59
    //     0x883804: movz            x4, #0x3b
    // 0x883808: branchIfSmi(r0, 0x883818)
    //     0x883808: tbz             w0, #0, #0x883818
    //     0x88380c: nop             
    // 0x883810: r4 = LoadClassIdInstr(r0)
    //     0x883810: ldur            x4, [x0, #-1]
    //     0x883814: ubfx            x4, x4, #0xc, #0x14
    // 0x883818: sub             x4, x4, #0x5d
    // 0x88381c: cmp             x4, #1
    // 0x883820: b.ls            #0x883838
    // 0x883824: nop             
    // 0x883828: r8 = String
    //     0x883828: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88382c: r3 = Null
    //     0x88382c: add             x3, PP, #0x12, lsl #12  ; [pp+0x129b8] Null
    //     0x883830: ldr             x3, [x3, #0x9b8]
    // 0x883834: r0 = String()
    //     0x883834: bl              #0x1523244  ; IsType_String_Stub
    // 0x883838: ldur            x0, [fp, #-8]
    // 0x88383c: r1 = LoadClassIdInstr(r0)
    //     0x88383c: ldur            x1, [x0, #-1]
    //     0x883840: ubfx            x1, x1, #0xc, #0x14
    // 0x883844: r16 = "2"
    //     0x883844: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x883848: ldr             x16, [x16, #0x6a8]
    // 0x88384c: stp             x16, x0, [SP]
    // 0x883850: mov             x0, x1
    // 0x883854: mov             lr, x0
    // 0x883858: ldr             lr, [x21, lr, lsl #3]
    // 0x88385c: blr             lr
    // 0x883860: tbnz            w0, #4, #0x8838a4
    // 0x883864: nop             
    // 0x883868: ldur            x0, [fp, #-0x10]
    // 0x88386c: r1 = LoadClassIdInstr(r0)
    //     0x88386c: ldur            x1, [x0, #-1]
    //     0x883870: ubfx            x1, x1, #0xc, #0x14
    // 0x883874: r16 = "2"
    //     0x883874: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0x883878: ldr             x16, [x16, #0x6a8]
    // 0x88387c: stp             x16, x0, [SP]
    // 0x883880: mov             x0, x1
    // 0x883884: mov             lr, x0
    // 0x883888: ldr             lr, [x21, lr, lsl #3]
    // 0x88388c: blr             lr
    // 0x883890: tbnz            w0, #4, #0x8838a4
    // 0x883894: nop             
    // 0x883898: r0 = "day1End"
    //     0x883898: add             x0, PP, #0x12, lsl #12  ; [pp+0x129c8] "day1End"
    //     0x88389c: ldr             x0, [x0, #0x9c8]
    // 0x8838a0: b               #0x8838b4
    // 0x8838a4: r0 = "day1NotEnd"
    //     0x8838a4: add             x0, PP, #0x12, lsl #12  ; [pp+0x129d0] "day1NotEnd"
    //     0x8838a8: ldr             x0, [x0, #0x9d0]
    // 0x8838ac: b               #0x8838b4
    // 0x8838b0: r0 = ""
    //     0x8838b0: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8838b4: stur            x0, [fp, #-8]
    // 0x8838b8: str             x0, [SP]
    // 0x8838bc: r0 = isEmpty()
    //     0x8838bc: bl              #0x7c13ec  ; [dart:core] _StringBase::isEmpty
    // 0x8838c0: tbnz            w0, #4, #0x8838d0
    // 0x8838c4: nop             
    // 0x8838c8: r0 = "."
    //     0x8838c8: ldr             x0, [PP, #0x1128]  ; [pp+0x1128] "."
    // 0x8838cc: b               #0x8838d4
    // 0x8838d0: ldur            x0, [fp, #-8]
    // 0x8838d4: LeaveFrame
    //     0x8838d4: mov             SP, fp
    //     0x8838d8: ldp             fp, lr, [SP], #0x10
    // 0x8838dc: ret
    //     0x8838dc: ret             
    // 0x8838e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8838e0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8838e4: b               #0x86a560
    // 0x8838e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8838e8: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8838ec: b               #0x86e200
    // 0x8838f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8838f0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8838f4: b               #0x86e45c
    // 0x8838f8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8838f8: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8838fc: b               #0x86ec2c
    // 0x883900: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x883900: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x883904: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x883904: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x883908: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x883908: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88390c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88390c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883910: b               #0x872964
    // 0x883914: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883914: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883918: b               #0x872abc
    // 0x88391c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88391c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883920: b               #0x872c6c
    // 0x883924: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883924: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883928: b               #0x873158
    // 0x88392c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88392c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883930: b               #0x8737f8
    // 0x883934: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883934: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883938: b               #0x873994
    // 0x88393c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88393c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883940: b               #0x873b30
    // 0x883944: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883944: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883948: b               #0x873ccc
    // 0x88394c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88394c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883950: b               #0x874004
    // 0x883954: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883954: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883958: b               #0x8741e4
    // 0x88395c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88395c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883960: b               #0x8744f0
    // 0x883964: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883964: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883968: b               #0x8746d0
    // 0x88396c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88396c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883970: b               #0x8749dc
    // 0x883974: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883974: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883978: b               #0x874bbc
    // 0x88397c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88397c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883980: b               #0x874d2c
    // 0x883984: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883984: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883988: b               #0x874e7c
    // 0x88398c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88398c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883990: b               #0x8759d0
    // 0x883994: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883994: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883998: b               #0x875b50
    // 0x88399c: stp             q1, q2, [SP, #-0x20]!
    // 0x8839a0: SaveReg r0
    //     0x8839a0: str             x0, [SP, #-8]!
    // 0x8839a4: r0 = AllocateDouble()
    //     0x8839a4: bl              #0x15024b8  ; AllocateDoubleStub
    // 0x8839a8: mov             x1, x0
    // 0x8839ac: RestoreReg r0
    //     0x8839ac: ldr             x0, [SP], #8
    // 0x8839b0: ldp             q1, q2, [SP], #0x20
    // 0x8839b4: b               #0x8760e0
    // 0x8839b8: SaveReg d2
    //     0x8839b8: str             q2, [SP, #-0x10]!
    // 0x8839bc: SaveReg r0
    //     0x8839bc: str             x0, [SP, #-8]!
    // 0x8839c0: r0 = AllocateDouble()
    //     0x8839c0: bl              #0x15024b8  ; AllocateDoubleStub
    // 0x8839c4: mov             x1, x0
    // 0x8839c8: RestoreReg r0
    //     0x8839c8: ldr             x0, [SP], #8
    // 0x8839cc: RestoreReg d2
    //     0x8839cc: ldr             q2, [SP], #0x10
    // 0x8839d0: b               #0x876178
    // 0x8839d4: add             x3, x3, x1
    // 0x8839d8: b               #0x876208
    // 0x8839dc: stp             q1, q2, [SP, #-0x20]!
    // 0x8839e0: SaveReg r0
    //     0x8839e0: str             x0, [SP, #-8]!
    // 0x8839e4: r0 = AllocateDouble()
    //     0x8839e4: bl              #0x15024b8  ; AllocateDoubleStub
    // 0x8839e8: mov             x1, x0
    // 0x8839ec: RestoreReg r0
    //     0x8839ec: ldr             x0, [SP], #8
    // 0x8839f0: ldp             q1, q2, [SP], #0x20
    // 0x8839f4: b               #0x876638
    // 0x8839f8: SaveReg d2
    //     0x8839f8: str             q2, [SP, #-0x10]!
    // 0x8839fc: SaveReg r0
    //     0x8839fc: str             x0, [SP, #-8]!
    // 0x883a00: r0 = AllocateDouble()
    //     0x883a00: bl              #0x15024b8  ; AllocateDoubleStub
    // 0x883a04: mov             x1, x0
    // 0x883a08: RestoreReg r0
    //     0x883a08: ldr             x0, [SP], #8
    // 0x883a0c: RestoreReg d2
    //     0x883a0c: ldr             q2, [SP], #0x10
    // 0x883a10: b               #0x8766d0
    // 0x883a14: add             x3, x3, x1
    // 0x883a18: b               #0x876760
    // 0x883a1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a1c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a20: b               #0x87776c
    // 0x883a24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a24: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a28: b               #0x877dcc
    // 0x883a2c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a2c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a30: b               #0x87803c
    // 0x883a34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a34: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a38: b               #0x878c3c
    // 0x883a3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a3c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a40: b               #0x882b9c
    // 0x883a44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a44: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a48: b               #0x882ce8
    // 0x883a4c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a4c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a50: b               #0x882e34
    // 0x883a54: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a54: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a58: b               #0x882f80
    // 0x883a5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a5c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a60: b               #0x8834d8
    // 0x883a64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x883a64: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x883a68: b               #0x883624
  }
  static _ getCustomEventNumber(/* No info */) {
    // ** addr: 0x883a6c, size: 0xaa38
    // 0x883a6c: EnterFrame
    //     0x883a6c: stp             fp, lr, [SP, #-0x10]!
    //     0x883a70: mov             fp, SP
    // 0x883a74: AllocStack(0x70)
    //     0x883a74: sub             SP, SP, #0x70
    // 0x883a78: SetupParameters(dynamic _ /* r1 => r1, fp-0x20 */, {dynamic code2 = "" /* r3, fp-0x18 */, int value = 0 /* r5, fp-0x10 */, dynamic weather = "sunny" /* r0, fp-0x8 */})
    //     0x883a78: stur            x1, [fp, #-0x20]
    //     0x883a7c: ldur            w0, [x4, #0x13]
    //     0x883a80: add             x0, x0, HEAP, lsl #32
    //     0x883a84: ldur            w2, [x4, #0x1f]
    //     0x883a88: add             x2, x2, HEAP, lsl #32
    //     0x883a8c: add             x16, PP, #0xf, lsl #12  ; [pp+0xfcf8] "code2"
    //     0x883a90: ldr             x16, [x16, #0xcf8]
    //     0x883a94: cmp             w2, w16
    //     0x883a98: b.ne            #0x883abc
    //     0x883a9c: ldur            w2, [x4, #0x23]
    //     0x883aa0: add             x2, x2, HEAP, lsl #32
    //     0x883aa4: sub             w3, w0, w2
    //     0x883aa8: add             x2, fp, w3, sxtw #2
    //     0x883aac: ldr             x2, [x2, #8]
    //     0x883ab0: mov             x3, x2
    //     0x883ab4: movz            x2, #0x1
    //     0x883ab8: b               #0x883ac4
    //     0x883abc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    //     0x883ac0: movz            x2, #0
    //     0x883ac4: stur            x3, [fp, #-0x18]
    //     0x883ac8: lsl             x5, x2, #1
    //     0x883acc: lsl             w6, w5, #1
    //     0x883ad0: add             w7, w6, #8
    //     0x883ad4: add             x16, x4, w7, sxtw #1
    //     0x883ad8: ldur            w8, [x16, #0xf]
    //     0x883adc: add             x8, x8, HEAP, lsl #32
    //     0x883ae0: ldr             x16, [PP, #0x4708]  ; [pp+0x4708] "value"
    //     0x883ae4: cmp             w8, w16
    //     0x883ae8: b.ne            #0x883b24
    //     0x883aec: add             w2, w6, #0xa
    //     0x883af0: add             x16, x4, w2, sxtw #1
    //     0x883af4: ldur            w6, [x16, #0xf]
    //     0x883af8: add             x6, x6, HEAP, lsl #32
    //     0x883afc: sub             w2, w0, w6
    //     0x883b00: add             x6, fp, w2, sxtw #2
    //     0x883b04: ldr             x6, [x6, #8]
    //     0x883b08: add             w2, w5, #2
    //     0x883b0c: sbfx            x5, x6, #1, #0x1f
    //     0x883b10: tbz             w6, #0, #0x883b18
    //     0x883b14: ldur            x5, [x6, #7]
    //     0x883b18: sbfx            x6, x2, #1, #0x1f
    //     0x883b1c: mov             x2, x6
    //     0x883b20: b               #0x883b28
    //     0x883b24: movz            x5, #0
    //     0x883b28: stur            x5, [fp, #-0x10]
    //     0x883b2c: lsl             x6, x2, #1
    //     0x883b30: lsl             w2, w6, #1
    //     0x883b34: add             w6, w2, #8
    //     0x883b38: add             x16, x4, w6, sxtw #1
    //     0x883b3c: ldur            w7, [x16, #0xf]
    //     0x883b40: add             x7, x7, HEAP, lsl #32
    //     0x883b44: add             x16, PP, #0xf, lsl #12  ; [pp+0xfd08] "weather"
    //     0x883b48: ldr             x16, [x16, #0xd08]
    //     0x883b4c: cmp             w7, w16
    //     0x883b50: b.ne            #0x883b74
    //     0x883b54: add             w6, w2, #0xa
    //     0x883b58: add             x16, x4, w6, sxtw #1
    //     0x883b5c: ldur            w2, [x16, #0xf]
    //     0x883b60: add             x2, x2, HEAP, lsl #32
    //     0x883b64: sub             w4, w0, w2
    //     0x883b68: add             x0, fp, w4, sxtw #2
    //     0x883b6c: ldr             x0, [x0, #8]
    //     0x883b70: b               #0x883b7c
    //     0x883b74: add             x0, PP, #0xf, lsl #12  ; [pp+0xfd10] "sunny"
    //     0x883b78: ldr             x0, [x0, #0xd10]
    //     0x883b7c: stur            x0, [fp, #-8]
    // 0x883b80: CheckStackOverflow
    //     0x883b80: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x883b84: cmp             SP, x16
    //     0x883b88: b.ls            #0x88db38
    // 0x883b8c: r16 = "weatherBuff30"
    //     0x883b8c: add             x16, PP, #0x12, lsl #12  ; [pp+0x129f0] "weatherBuff30"
    //     0x883b90: ldr             x16, [x16, #0x9f0]
    // 0x883b94: stp             x1, x16, [SP]
    // 0x883b98: r0 = ==()
    //     0x883b98: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883b9c: tbnz            w0, #4, #0x883c68
    // 0x883ba0: r0 = InitLateStaticField(0xb90) // [package:battlecross/globals.dart] ::currentWeather
    //     0x883ba0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883ba4: ldr             x0, [x0, #0x1720]
    //     0x883ba8: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x883bac: cmp             w0, w16
    //     0x883bb0: b.ne            #0x883bc0
    //     0x883bb4: add             x2, PP, #0x12, lsl #12  ; [pp+0x129f8] Field <::.currentWeather>: static late (offset: 0xb90)
    //     0x883bb8: ldr             x2, [x2, #0x9f8]
    //     0x883bbc: bl              #0x1500750  ; InitLateStaticFieldStub
    // 0x883bc0: r1 = LoadClassIdInstr(r0)
    //     0x883bc0: ldur            x1, [x0, #-1]
    //     0x883bc4: ubfx            x1, x1, #0xc, #0x14
    // 0x883bc8: ldur            x16, [fp, #-8]
    // 0x883bcc: stp             x16, x0, [SP]
    // 0x883bd0: mov             x0, x1
    // 0x883bd4: mov             lr, x0
    // 0x883bd8: ldr             lr, [x21, lr, lsl #3]
    // 0x883bdc: blr             lr
    // 0x883be0: tbnz            w0, #4, #0x883c60
    // 0x883be4: ldur            x0, [fp, #-0x10]
    // 0x883be8: d0 = 1.300000
    //     0x883be8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a00] IMM: double(1.3) from 0x3ff4cccccccccccd
    //     0x883bec: ldr             d0, [x17, #0xa00]
    // 0x883bf0: scvtf           d1, x0
    // 0x883bf4: fmul            d2, d1, d0
    // 0x883bf8: mov             v0.16b, v2.16b
    // 0x883bfc: stp             fp, lr, [SP, #-0x10]!
    // 0x883c00: mov             fp, SP
    // 0x883c04: CallRuntime_LibcRound(double) -> double
    //     0x883c04: and             SP, SP, #0xfffffffffffffff0
    //     0x883c08: mov             sp, SP
    //     0x883c0c: ldr             x16, [THR, #0x530]  ; THR::LibcRound
    //     0x883c10: str             x16, [THR, #0x730]  ; THR::vm_tag
    //     0x883c14: blr             x16
    //     0x883c18: movz            x16, #0x8
    //     0x883c1c: str             x16, [THR, #0x730]  ; THR::vm_tag
    //     0x883c20: ldr             x16, [THR, #0x700]  ; THR::saved_stack_limit
    //     0x883c24: sub             sp, x16, #1, lsl #12
    //     0x883c28: mov             SP, fp
    //     0x883c2c: ldp             fp, lr, [SP], #0x10
    // 0x883c30: fcmp            d0, d0
    // 0x883c34: b.vs            #0x88db40
    // 0x883c38: fcvtzs          x0, d0
    // 0x883c3c: asr             x16, x0, #0x1e
    // 0x883c40: cmp             x16, x0, asr #63
    // 0x883c44: b.ne            #0x88db40
    // 0x883c48: lsl             x0, x0, #1
    // 0x883c4c: r1 = LoadInt32Instr(r0)
    //     0x883c4c: sbfx            x1, x0, #1, #0x1f
    //     0x883c50: tbz             w0, #0, #0x883c58
    //     0x883c54: ldur            x1, [x0, #7]
    // 0x883c58: mov             x0, x1
    // 0x883c5c: b               #0x88db2c
    // 0x883c60: ldur            x0, [fp, #-0x10]
    // 0x883c64: b               #0x88db2c
    // 0x883c68: ldur            x0, [fp, #-0x10]
    // 0x883c6c: r16 = "trophy"
    //     0x883c6c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf950] "trophy"
    //     0x883c70: ldr             x16, [x16, #0x950]
    // 0x883c74: ldur            lr, [fp, #-0x20]
    // 0x883c78: stp             lr, x16, [SP]
    // 0x883c7c: r0 = ==()
    //     0x883c7c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883c80: tbnz            w0, #4, #0x883ce4
    // 0x883c84: r0 = LoadStaticField(0xb54)
    //     0x883c84: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883c88: ldr             x0, [x0, #0x16a8]
    // 0x883c8c: cmp             w0, NULL
    // 0x883c90: b.ne            #0x883c9c
    // 0x883c94: r0 = Null
    //     0x883c94: mov             x0, NULL
    // 0x883c98: b               #0x883cb4
    // 0x883c9c: LoadField: r2 = r0->field_53
    //     0x883c9c: ldur            x2, [x0, #0x53]
    // 0x883ca0: r0 = BoxInt64Instr(r2)
    //     0x883ca0: sbfiz           x0, x2, #1, #0x1f
    //     0x883ca4: cmp             x2, x0, asr #1
    //     0x883ca8: b.eq            #0x883cb4
    //     0x883cac: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x883cb0: stur            x2, [x0, #7]
    // 0x883cb4: cmp             w0, NULL
    // 0x883cb8: b.ne            #0x883cc4
    // 0x883cbc: r0 = 0
    //     0x883cbc: movz            x0, #0
    // 0x883cc0: b               #0x883cd4
    // 0x883cc4: r1 = LoadInt32Instr(r0)
    //     0x883cc4: sbfx            x1, x0, #1, #0x1f
    //     0x883cc8: tbz             w0, #0, #0x883cd0
    //     0x883ccc: ldur            x1, [x0, #7]
    // 0x883cd0: mov             x0, x1
    // 0x883cd4: cmp             x0, #0x1f4
    // 0x883cd8: b.le            #0x88db2c
    // 0x883cdc: r0 = 500
    //     0x883cdc: movz            x0, #0x1f4
    // 0x883ce0: b               #0x88db2c
    // 0x883ce4: r16 = "dailyFitnessReward"
    //     0x883ce4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12a08] "dailyFitnessReward"
    //     0x883ce8: ldr             x16, [x16, #0xa08]
    // 0x883cec: ldur            lr, [fp, #-0x20]
    // 0x883cf0: stp             lr, x16, [SP]
    // 0x883cf4: r0 = ==()
    //     0x883cf4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883cf8: tbnz            w0, #4, #0x883dec
    // 0x883cfc: r0 = LoadStaticField(0xb54)
    //     0x883cfc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883d00: ldr             x0, [x0, #0x16a8]
    // 0x883d04: cmp             w0, NULL
    // 0x883d08: b.ne            #0x883d14
    // 0x883d0c: r0 = Null
    //     0x883d0c: mov             x0, NULL
    // 0x883d10: b               #0x883d3c
    // 0x883d14: r17 = 347
    //     0x883d14: movz            x17, #0x15b
    // 0x883d18: ldr             w1, [x0, x17]
    // 0x883d1c: DecompressPointer r1
    //     0x883d1c: add             x1, x1, HEAP, lsl #32
    // 0x883d20: r0 = LoadClassIdInstr(r1)
    //     0x883d20: ldur            x0, [x1, #-1]
    //     0x883d24: ubfx            x0, x0, #0xc, #0x14
    // 0x883d28: r2 = "fitpoint"
    //     0x883d28: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a10] "fitpoint"
    //     0x883d2c: ldr             x2, [x2, #0xa10]
    // 0x883d30: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883d30: sub             lr, x0, #0xb4
    //     0x883d34: ldr             lr, [x21, lr, lsl #3]
    //     0x883d38: blr             lr
    // 0x883d3c: cmp             w0, NULL
    // 0x883d40: b.ne            #0x883d4c
    // 0x883d44: r3 = 0
    //     0x883d44: movz            x3, #0
    // 0x883d48: b               #0x883d50
    // 0x883d4c: mov             x3, x0
    // 0x883d50: mov             x0, x3
    // 0x883d54: stur            x3, [fp, #-8]
    // 0x883d58: r2 = Null
    //     0x883d58: mov             x2, NULL
    // 0x883d5c: r1 = Null
    //     0x883d5c: mov             x1, NULL
    // 0x883d60: branchIfSmi(r0, 0x883d88)
    //     0x883d60: tbz             w0, #0, #0x883d88
    // 0x883d64: r4 = LoadClassIdInstr(r0)
    //     0x883d64: ldur            x4, [x0, #-1]
    //     0x883d68: ubfx            x4, x4, #0xc, #0x14
    // 0x883d6c: sub             x4, x4, #0x3b
    // 0x883d70: cmp             x4, #1
    // 0x883d74: b.ls            #0x883d88
    // 0x883d78: r8 = int
    //     0x883d78: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x883d7c: r3 = Null
    //     0x883d7c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12a18] Null
    //     0x883d80: ldr             x3, [x3, #0xa18]
    // 0x883d84: r0 = int()
    //     0x883d84: bl              #0x1524294  ; IsType_int_Stub
    // 0x883d88: ldur            x0, [fp, #-8]
    // 0x883d8c: r1 = LoadInt32Instr(r0)
    //     0x883d8c: sbfx            x1, x0, #1, #0x1f
    //     0x883d90: tbz             w0, #0, #0x883d98
    //     0x883d94: ldur            x1, [x0, #7]
    // 0x883d98: cmp             x1, #0x12c
    // 0x883d9c: b.lt            #0x883da8
    // 0x883da0: r0 = 300
    //     0x883da0: movz            x0, #0x12c
    // 0x883da4: b               #0x88db2c
    // 0x883da8: d0 = 100.000000
    //     0x883da8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x883dac: ldr             d0, [x17, #0xa28]
    // 0x883db0: scvtf           d1, x1
    // 0x883db4: fdiv            d2, d1, d0
    // 0x883db8: fcmp            d2, d2
    // 0x883dbc: b.vs            #0x88db5c
    // 0x883dc0: fcvtms          x0, d2
    // 0x883dc4: asr             x16, x0, #0x1e
    // 0x883dc8: cmp             x16, x0, asr #63
    // 0x883dcc: b.ne            #0x88db5c
    // 0x883dd0: lsl             x0, x0, #1
    // 0x883dd4: r1 = LoadInt32Instr(r0)
    //     0x883dd4: sbfx            x1, x0, #1, #0x1f
    //     0x883dd8: tbz             w0, #0, #0x883de0
    //     0x883ddc: ldur            x1, [x0, #7]
    // 0x883de0: r16 = 100
    //     0x883de0: movz            x16, #0x64
    // 0x883de4: mul             x0, x1, x16
    // 0x883de8: b               #0x88db2c
    // 0x883dec: d0 = 100.000000
    //     0x883dec: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x883df0: ldr             d0, [x17, #0xa28]
    // 0x883df4: r16 = "trueFinaleMoney"
    //     0x883df4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12a30] "trueFinaleMoney"
    //     0x883df8: ldr             x16, [x16, #0xa30]
    // 0x883dfc: ldur            lr, [fp, #-0x20]
    // 0x883e00: stp             lr, x16, [SP]
    // 0x883e04: r0 = ==()
    //     0x883e04: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883e08: tbnz            w0, #4, #0x883ebc
    // 0x883e0c: r0 = LoadStaticField(0xb54)
    //     0x883e0c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883e10: ldr             x0, [x0, #0x16a8]
    // 0x883e14: cmp             w0, NULL
    // 0x883e18: b.ne            #0x883e24
    // 0x883e1c: r0 = Null
    //     0x883e1c: mov             x0, NULL
    // 0x883e20: b               #0x883e4c
    // 0x883e24: r17 = 347
    //     0x883e24: movz            x17, #0x15b
    // 0x883e28: ldr             w1, [x0, x17]
    // 0x883e2c: DecompressPointer r1
    //     0x883e2c: add             x1, x1, HEAP, lsl #32
    // 0x883e30: r0 = LoadClassIdInstr(r1)
    //     0x883e30: ldur            x0, [x1, #-1]
    //     0x883e34: ubfx            x0, x0, #0xc, #0x14
    // 0x883e38: r2 = "trueFinaleWin"
    //     0x883e38: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a38] "trueFinaleWin"
    //     0x883e3c: ldr             x2, [x2, #0xa38]
    // 0x883e40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883e40: sub             lr, x0, #0xb4
    //     0x883e44: ldr             lr, [x21, lr, lsl #3]
    //     0x883e48: blr             lr
    // 0x883e4c: cmp             w0, NULL
    // 0x883e50: b.ne            #0x883e5c
    // 0x883e54: r3 = 0
    //     0x883e54: movz            x3, #0
    // 0x883e58: b               #0x883e60
    // 0x883e5c: mov             x3, x0
    // 0x883e60: mov             x0, x3
    // 0x883e64: stur            x3, [fp, #-8]
    // 0x883e68: r2 = Null
    //     0x883e68: mov             x2, NULL
    // 0x883e6c: r1 = Null
    //     0x883e6c: mov             x1, NULL
    // 0x883e70: branchIfSmi(r0, 0x883e98)
    //     0x883e70: tbz             w0, #0, #0x883e98
    // 0x883e74: r4 = LoadClassIdInstr(r0)
    //     0x883e74: ldur            x4, [x0, #-1]
    //     0x883e78: ubfx            x4, x4, #0xc, #0x14
    // 0x883e7c: sub             x4, x4, #0x3b
    // 0x883e80: cmp             x4, #1
    // 0x883e84: b.ls            #0x883e98
    // 0x883e88: r8 = int
    //     0x883e88: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x883e8c: r3 = Null
    //     0x883e8c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12a40] Null
    //     0x883e90: ldr             x3, [x3, #0xa40]
    // 0x883e94: r0 = int()
    //     0x883e94: bl              #0x1524294  ; IsType_int_Stub
    // 0x883e98: ldur            x0, [fp, #-8]
    // 0x883e9c: r1 = LoadInt32Instr(r0)
    //     0x883e9c: sbfx            x1, x0, #1, #0x1f
    //     0x883ea0: tbz             w0, #0, #0x883ea8
    //     0x883ea4: ldur            x1, [x0, #7]
    // 0x883ea8: r16 = 2000
    //     0x883ea8: movz            x16, #0x7d0
    // 0x883eac: mul             x0, x1, x16
    // 0x883eb0: add             x1, x0, #0x3e8
    // 0x883eb4: mov             x0, x1
    // 0x883eb8: b               #0x88db2c
    // 0x883ebc: r16 = "dailyAdsMoney"
    //     0x883ebc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12a50] "dailyAdsMoney"
    //     0x883ec0: ldr             x16, [x16, #0xa50]
    // 0x883ec4: ldur            lr, [fp, #-0x20]
    // 0x883ec8: stp             lr, x16, [SP]
    // 0x883ecc: r0 = ==()
    //     0x883ecc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883ed0: tbnz            w0, #4, #0x883fb0
    // 0x883ed4: r0 = LoadStaticField(0xb54)
    //     0x883ed4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883ed8: ldr             x0, [x0, #0x16a8]
    // 0x883edc: cmp             w0, NULL
    // 0x883ee0: b.ne            #0x883eec
    // 0x883ee4: r0 = Null
    //     0x883ee4: mov             x0, NULL
    // 0x883ee8: b               #0x883f14
    // 0x883eec: r17 = 347
    //     0x883eec: movz            x17, #0x15b
    // 0x883ef0: ldr             w1, [x0, x17]
    // 0x883ef4: DecompressPointer r1
    //     0x883ef4: add             x1, x1, HEAP, lsl #32
    // 0x883ef8: r0 = LoadClassIdInstr(r1)
    //     0x883ef8: ldur            x0, [x1, #-1]
    //     0x883efc: ubfx            x0, x0, #0xc, #0x14
    // 0x883f00: r2 = "dailyAds"
    //     0x883f00: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a58] "dailyAds"
    //     0x883f04: ldr             x2, [x2, #0xa58]
    // 0x883f08: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883f08: sub             lr, x0, #0xb4
    //     0x883f0c: ldr             lr, [x21, lr, lsl #3]
    //     0x883f10: blr             lr
    // 0x883f14: cmp             w0, NULL
    // 0x883f18: b.ne            #0x883f24
    // 0x883f1c: r3 = 0
    //     0x883f1c: movz            x3, #0
    // 0x883f20: b               #0x883f28
    // 0x883f24: mov             x3, x0
    // 0x883f28: mov             x0, x3
    // 0x883f2c: stur            x3, [fp, #-8]
    // 0x883f30: r2 = Null
    //     0x883f30: mov             x2, NULL
    // 0x883f34: r1 = Null
    //     0x883f34: mov             x1, NULL
    // 0x883f38: branchIfSmi(r0, 0x883f60)
    //     0x883f38: tbz             w0, #0, #0x883f60
    // 0x883f3c: r4 = LoadClassIdInstr(r0)
    //     0x883f3c: ldur            x4, [x0, #-1]
    //     0x883f40: ubfx            x4, x4, #0xc, #0x14
    // 0x883f44: sub             x4, x4, #0x3b
    // 0x883f48: cmp             x4, #1
    // 0x883f4c: b.ls            #0x883f60
    // 0x883f50: r8 = int
    //     0x883f50: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x883f54: r3 = Null
    //     0x883f54: add             x3, PP, #0x12, lsl #12  ; [pp+0x12a60] Null
    //     0x883f58: ldr             x3, [x3, #0xa60]
    // 0x883f5c: r0 = int()
    //     0x883f5c: bl              #0x1524294  ; IsType_int_Stub
    // 0x883f60: r1 = Null
    //     0x883f60: mov             x1, NULL
    // 0x883f64: r0 = Random()
    //     0x883f64: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x883f68: mov             x1, x0
    // 0x883f6c: r2 = 30
    //     0x883f6c: movz            x2, #0x1e
    // 0x883f70: r0 = nextInt()
    //     0x883f70: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x883f74: mov             x1, x0
    // 0x883f78: ldur            x0, [fp, #-8]
    // 0x883f7c: r2 = LoadInt32Instr(r0)
    //     0x883f7c: sbfx            x2, x0, #1, #0x1f
    //     0x883f80: tbz             w0, #0, #0x883f88
    //     0x883f84: ldur            x2, [x0, #7]
    // 0x883f88: cmp             x2, #0x1e
    // 0x883f8c: b.ge            #0x883f98
    // 0x883f90: add             x0, x1, #0x46
    // 0x883f94: b               #0x88db2c
    // 0x883f98: cmp             x2, #0x64
    // 0x883f9c: b.ge            #0x883fa8
    // 0x883fa0: add             x0, x1, #0x32
    // 0x883fa4: b               #0x88db2c
    // 0x883fa8: add             x0, x1, #0x1e
    // 0x883fac: b               #0x88db2c
    // 0x883fb0: r16 = "dailyChores"
    //     0x883fb0: add             x16, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x883fb4: ldr             x16, [x16, #0xe48]
    // 0x883fb8: ldur            lr, [fp, #-0x20]
    // 0x883fbc: stp             lr, x16, [SP]
    // 0x883fc0: r0 = ==()
    //     0x883fc0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x883fc4: tbnz            w0, #4, #0x8840f8
    // 0x883fc8: r0 = LoadStaticField(0xb54)
    //     0x883fc8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x883fcc: ldr             x0, [x0, #0x16a8]
    // 0x883fd0: cmp             w0, NULL
    // 0x883fd4: b.ne            #0x883fe0
    // 0x883fd8: r0 = Null
    //     0x883fd8: mov             x0, NULL
    // 0x883fdc: b               #0x884008
    // 0x883fe0: r17 = 347
    //     0x883fe0: movz            x17, #0x15b
    // 0x883fe4: ldr             w1, [x0, x17]
    // 0x883fe8: DecompressPointer r1
    //     0x883fe8: add             x1, x1, HEAP, lsl #32
    // 0x883fec: r0 = LoadClassIdInstr(r1)
    //     0x883fec: ldur            x0, [x1, #-1]
    //     0x883ff0: ubfx            x0, x0, #0xc, #0x14
    // 0x883ff4: r2 = "dailyChores"
    //     0x883ff4: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x883ff8: ldr             x2, [x2, #0xe48]
    // 0x883ffc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x883ffc: sub             lr, x0, #0xb4
    //     0x884000: ldr             lr, [x21, lr, lsl #3]
    //     0x884004: blr             lr
    // 0x884008: cmp             w0, NULL
    // 0x88400c: b.ne            #0x884018
    // 0x884010: r3 = 0
    //     0x884010: movz            x3, #0
    // 0x884014: b               #0x88401c
    // 0x884018: mov             x3, x0
    // 0x88401c: mov             x0, x3
    // 0x884020: stur            x3, [fp, #-8]
    // 0x884024: r2 = Null
    //     0x884024: mov             x2, NULL
    // 0x884028: r1 = Null
    //     0x884028: mov             x1, NULL
    // 0x88402c: branchIfSmi(r0, 0x884054)
    //     0x88402c: tbz             w0, #0, #0x884054
    // 0x884030: r4 = LoadClassIdInstr(r0)
    //     0x884030: ldur            x4, [x0, #-1]
    //     0x884034: ubfx            x4, x4, #0xc, #0x14
    // 0x884038: sub             x4, x4, #0x3b
    // 0x88403c: cmp             x4, #1
    // 0x884040: b.ls            #0x884054
    // 0x884044: r8 = int
    //     0x884044: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884048: r3 = Null
    //     0x884048: add             x3, PP, #0x12, lsl #12  ; [pp+0x12a70] Null
    //     0x88404c: ldr             x3, [x3, #0xa70]
    // 0x884050: r0 = int()
    //     0x884050: bl              #0x1524294  ; IsType_int_Stub
    // 0x884054: ldur            x0, [fp, #-8]
    // 0x884058: r1 = LoadInt32Instr(r0)
    //     0x884058: sbfx            x1, x0, #1, #0x1f
    //     0x88405c: tbz             w0, #0, #0x884064
    //     0x884060: ldur            x1, [x0, #7]
    // 0x884064: r16 = 15
    //     0x884064: movz            x16, #0xf
    // 0x884068: mul             x0, x1, x16
    // 0x88406c: add             x3, x0, #0x32
    // 0x884070: stur            x3, [fp, #-0x28]
    // 0x884074: r0 = LoadStaticField(0xb54)
    //     0x884074: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884078: ldr             x0, [x0, #0x16a8]
    // 0x88407c: cmp             w0, NULL
    // 0x884080: b.ne            #0x88408c
    // 0x884084: r0 = Null
    //     0x884084: mov             x0, NULL
    // 0x884088: b               #0x8840b4
    // 0x88408c: r17 = 327
    //     0x88408c: movz            x17, #0x147
    // 0x884090: ldr             w1, [x0, x17]
    // 0x884094: DecompressPointer r1
    //     0x884094: add             x1, x1, HEAP, lsl #32
    // 0x884098: r0 = LoadClassIdInstr(r1)
    //     0x884098: ldur            x0, [x1, #-1]
    //     0x88409c: ubfx            x0, x0, #0xc, #0x14
    // 0x8840a0: r2 = "adsRemoval"
    //     0x8840a0: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe88] "adsRemoval"
    //     0x8840a4: ldr             x2, [x2, #0xe88]
    // 0x8840a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8840a8: sub             lr, x0, #0xb4
    //     0x8840ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8840b0: blr             lr
    // 0x8840b4: r1 = 59
    //     0x8840b4: movz            x1, #0x3b
    // 0x8840b8: branchIfSmi(r0, 0x8840c4)
    //     0x8840b8: tbz             w0, #0, #0x8840c4
    // 0x8840bc: r1 = LoadClassIdInstr(r0)
    //     0x8840bc: ldur            x1, [x0, #-1]
    //     0x8840c0: ubfx            x1, x1, #0xc, #0x14
    // 0x8840c4: r16 = true
    //     0x8840c4: add             x16, NULL, #0x20  ; true
    // 0x8840c8: stp             x16, x0, [SP]
    // 0x8840cc: mov             x0, x1
    // 0x8840d0: mov             lr, x0
    // 0x8840d4: ldr             lr, [x21, lr, lsl #3]
    // 0x8840d8: blr             lr
    // 0x8840dc: tbnz            w0, #4, #0x8840f0
    // 0x8840e0: ldur            x0, [fp, #-0x28]
    // 0x8840e4: lsl             x1, x0, #1
    // 0x8840e8: mov             x0, x1
    // 0x8840ec: b               #0x88db2c
    // 0x8840f0: ldur            x0, [fp, #-0x28]
    // 0x8840f4: b               #0x88db2c
    // 0x8840f8: r16 = "wandererScore"
    //     0x8840f8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12a80] "wandererScore"
    //     0x8840fc: ldr             x16, [x16, #0xa80]
    // 0x884100: ldur            lr, [fp, #-0x20]
    // 0x884104: stp             lr, x16, [SP]
    // 0x884108: r0 = ==()
    //     0x884108: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88410c: tbnz            w0, #4, #0x884214
    // 0x884110: r0 = LoadStaticField(0xb54)
    //     0x884110: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884114: ldr             x0, [x0, #0x16a8]
    // 0x884118: cmp             w0, NULL
    // 0x88411c: b.eq            #0x884150
    // 0x884120: r17 = 347
    //     0x884120: movz            x17, #0x15b
    // 0x884124: ldr             w1, [x0, x17]
    // 0x884128: DecompressPointer r1
    //     0x884128: add             x1, x1, HEAP, lsl #32
    // 0x88412c: r0 = LoadClassIdInstr(r1)
    //     0x88412c: ldur            x0, [x1, #-1]
    //     0x884130: ubfx            x0, x0, #0xc, #0x14
    // 0x884134: r2 = "wandererWin"
    //     0x884134: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a88] "wandererWin"
    //     0x884138: ldr             x2, [x2, #0xa88]
    // 0x88413c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88413c: sub             lr, x0, #0xb4
    //     0x884140: ldr             lr, [x21, lr, lsl #3]
    //     0x884144: blr             lr
    // 0x884148: cmp             w0, NULL
    // 0x88414c: b.ne            #0x884158
    // 0x884150: r0 = 1
    //     0x884150: movz            x0, #0x1
    // 0x884154: b               #0x884204
    // 0x884158: r0 = LoadStaticField(0xb54)
    //     0x884158: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88415c: ldr             x0, [x0, #0x16a8]
    // 0x884160: cmp             w0, NULL
    // 0x884164: b.ne            #0x884170
    // 0x884168: r0 = Null
    //     0x884168: mov             x0, NULL
    // 0x88416c: b               #0x884198
    // 0x884170: r17 = 347
    //     0x884170: movz            x17, #0x15b
    // 0x884174: ldr             w1, [x0, x17]
    // 0x884178: DecompressPointer r1
    //     0x884178: add             x1, x1, HEAP, lsl #32
    // 0x88417c: r0 = LoadClassIdInstr(r1)
    //     0x88417c: ldur            x0, [x1, #-1]
    //     0x884180: ubfx            x0, x0, #0xc, #0x14
    // 0x884184: r2 = "wandererWin"
    //     0x884184: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a88] "wandererWin"
    //     0x884188: ldr             x2, [x2, #0xa88]
    // 0x88418c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88418c: sub             lr, x0, #0xb4
    //     0x884190: ldr             lr, [x21, lr, lsl #3]
    //     0x884194: blr             lr
    // 0x884198: r16 = 2
    //     0x884198: movz            x16, #0x2
    // 0x88419c: stp             x16, x0, [SP]
    // 0x8841a0: r4 = 0
    //     0x8841a0: movz            x4, #0
    // 0x8841a4: ldr             x0, [SP, #8]
    // 0x8841a8: r16 = UnlinkedCall_0x7b3c80
    //     0x8841a8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12a90] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8841ac: add             x16, x16, #0xa90
    // 0x8841b0: ldp             x5, lr, [x16]
    // 0x8841b4: blr             lr
    // 0x8841b8: mov             x3, x0
    // 0x8841bc: r2 = Null
    //     0x8841bc: mov             x2, NULL
    // 0x8841c0: r1 = Null
    //     0x8841c0: mov             x1, NULL
    // 0x8841c4: stur            x3, [fp, #-8]
    // 0x8841c8: branchIfSmi(r0, 0x8841f0)
    //     0x8841c8: tbz             w0, #0, #0x8841f0
    // 0x8841cc: r4 = LoadClassIdInstr(r0)
    //     0x8841cc: ldur            x4, [x0, #-1]
    //     0x8841d0: ubfx            x4, x4, #0xc, #0x14
    // 0x8841d4: sub             x4, x4, #0x3b
    // 0x8841d8: cmp             x4, #1
    // 0x8841dc: b.ls            #0x8841f0
    // 0x8841e0: r8 = int
    //     0x8841e0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8841e4: r3 = Null
    //     0x8841e4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12aa0] Null
    //     0x8841e8: ldr             x3, [x3, #0xaa0]
    // 0x8841ec: r0 = int()
    //     0x8841ec: bl              #0x1524294  ; IsType_int_Stub
    // 0x8841f0: ldur            x0, [fp, #-8]
    // 0x8841f4: r1 = LoadInt32Instr(r0)
    //     0x8841f4: sbfx            x1, x0, #1, #0x1f
    //     0x8841f8: tbz             w0, #0, #0x884200
    //     0x8841fc: ldur            x1, [x0, #7]
    // 0x884200: mov             x0, x1
    // 0x884204: cmp             x0, #7
    // 0x884208: b.le            #0x88db2c
    // 0x88420c: r0 = 7
    //     0x88420c: movz            x0, #0x7
    // 0x884210: b               #0x88db2c
    // 0x884214: r16 = "wandererCounter"
    //     0x884214: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ab0] "wandererCounter"
    //     0x884218: ldr             x16, [x16, #0xab0]
    // 0x88421c: ldur            lr, [fp, #-0x20]
    // 0x884220: stp             lr, x16, [SP]
    // 0x884224: r0 = ==()
    //     0x884224: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884228: tbnz            w0, #4, #0x884428
    // 0x88422c: r0 = LoadStaticField(0xb54)
    //     0x88422c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884230: ldr             x0, [x0, #0x16a8]
    // 0x884234: cmp             w0, NULL
    // 0x884238: b.eq            #0x88426c
    // 0x88423c: r17 = 347
    //     0x88423c: movz            x17, #0x15b
    // 0x884240: ldr             w1, [x0, x17]
    // 0x884244: DecompressPointer r1
    //     0x884244: add             x1, x1, HEAP, lsl #32
    // 0x884248: r0 = LoadClassIdInstr(r1)
    //     0x884248: ldur            x0, [x1, #-1]
    //     0x88424c: ubfx            x0, x0, #0xc, #0x14
    // 0x884250: r2 = "wandererWin"
    //     0x884250: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a88] "wandererWin"
    //     0x884254: ldr             x2, [x2, #0xa88]
    // 0x884258: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884258: sub             lr, x0, #0xb4
    //     0x88425c: ldr             lr, [x21, lr, lsl #3]
    //     0x884260: blr             lr
    // 0x884264: cmp             w0, NULL
    // 0x884268: b.ne            #0x884274
    // 0x88426c: r3 = 14
    //     0x88426c: movz            x3, #0xe
    // 0x884270: b               #0x8843a8
    // 0x884274: r0 = LoadStaticField(0xb54)
    //     0x884274: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884278: ldr             x0, [x0, #0x16a8]
    // 0x88427c: cmp             w0, NULL
    // 0x884280: b.ne            #0x88428c
    // 0x884284: r3 = Null
    //     0x884284: mov             x3, NULL
    // 0x884288: b               #0x8842b8
    // 0x88428c: r17 = 347
    //     0x88428c: movz            x17, #0x15b
    // 0x884290: ldr             w1, [x0, x17]
    // 0x884294: DecompressPointer r1
    //     0x884294: add             x1, x1, HEAP, lsl #32
    // 0x884298: r0 = LoadClassIdInstr(r1)
    //     0x884298: ldur            x0, [x1, #-1]
    //     0x88429c: ubfx            x0, x0, #0xc, #0x14
    // 0x8842a0: r2 = "wandererWin"
    //     0x8842a0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a88] "wandererWin"
    //     0x8842a4: ldr             x2, [x2, #0xa88]
    // 0x8842a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8842a8: sub             lr, x0, #0xb4
    //     0x8842ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8842b0: blr             lr
    // 0x8842b4: mov             x3, x0
    // 0x8842b8: stur            x3, [fp, #-8]
    // 0x8842bc: r0 = LoadStaticField(0xb54)
    //     0x8842bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8842c0: ldr             x0, [x0, #0x16a8]
    // 0x8842c4: cmp             w0, NULL
    // 0x8842c8: b.ne            #0x8842d4
    // 0x8842cc: r0 = Null
    //     0x8842cc: mov             x0, NULL
    // 0x8842d0: b               #0x8842fc
    // 0x8842d4: r17 = 347
    //     0x8842d4: movz            x17, #0x15b
    // 0x8842d8: ldr             w1, [x0, x17]
    // 0x8842dc: DecompressPointer r1
    //     0x8842dc: add             x1, x1, HEAP, lsl #32
    // 0x8842e0: r0 = LoadClassIdInstr(r1)
    //     0x8842e0: ldur            x0, [x1, #-1]
    //     0x8842e4: ubfx            x0, x0, #0xc, #0x14
    // 0x8842e8: r2 = "wandererWin"
    //     0x8842e8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12a88] "wandererWin"
    //     0x8842ec: ldr             x2, [x2, #0xa88]
    // 0x8842f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8842f0: sub             lr, x0, #0xb4
    //     0x8842f4: ldr             lr, [x21, lr, lsl #3]
    //     0x8842f8: blr             lr
    // 0x8842fc: r16 = 2
    //     0x8842fc: movz            x16, #0x2
    // 0x884300: stp             x16, x0, [SP]
    // 0x884304: r4 = 0
    //     0x884304: movz            x4, #0
    // 0x884308: ldr             x0, [SP, #8]
    // 0x88430c: r16 = UnlinkedCall_0x7b3c80
    //     0x88430c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ab8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x884310: add             x16, x16, #0xab8
    // 0x884314: ldp             x5, lr, [x16]
    // 0x884318: blr             lr
    // 0x88431c: ldur            x16, [fp, #-8]
    // 0x884320: stp             x0, x16, [SP]
    // 0x884324: r4 = 0
    //     0x884324: movz            x4, #0
    // 0x884328: ldr             x0, [SP, #8]
    // 0x88432c: r16 = UnlinkedCall_0x7b3c80
    //     0x88432c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ac8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x884330: add             x16, x16, #0xac8
    // 0x884334: ldp             x5, lr, [x16]
    // 0x884338: blr             lr
    // 0x88433c: r16 = 28
    //     0x88433c: movz            x16, #0x1c
    // 0x884340: stp             x16, x0, [SP]
    // 0x884344: r4 = 0
    //     0x884344: movz            x4, #0
    // 0x884348: ldr             x0, [SP, #8]
    // 0x88434c: r16 = UnlinkedCall_0x7b3c80
    //     0x88434c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ad8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x884350: add             x16, x16, #0xad8
    // 0x884354: ldp             x5, lr, [x16]
    // 0x884358: blr             lr
    // 0x88435c: mov             x3, x0
    // 0x884360: r2 = Null
    //     0x884360: mov             x2, NULL
    // 0x884364: r1 = Null
    //     0x884364: mov             x1, NULL
    // 0x884368: stur            x3, [fp, #-8]
    // 0x88436c: branchIfSmi(r0, 0x884394)
    //     0x88436c: tbz             w0, #0, #0x884394
    // 0x884370: r4 = LoadClassIdInstr(r0)
    //     0x884370: ldur            x4, [x0, #-1]
    //     0x884374: ubfx            x4, x4, #0xc, #0x14
    // 0x884378: sub             x4, x4, #0x3b
    // 0x88437c: cmp             x4, #1
    // 0x884380: b.ls            #0x884394
    // 0x884384: r8 = int
    //     0x884384: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884388: r3 = Null
    //     0x884388: add             x3, PP, #0x12, lsl #12  ; [pp+0x12ae8] Null
    //     0x88438c: ldr             x3, [x3, #0xae8]
    // 0x884390: r0 = int()
    //     0x884390: bl              #0x1524294  ; IsType_int_Stub
    // 0x884394: ldur            x0, [fp, #-8]
    // 0x884398: r1 = LoadInt32Instr(r0)
    //     0x884398: sbfx            x1, x0, #1, #0x1f
    //     0x88439c: tbz             w0, #0, #0x8843a4
    //     0x8843a0: ldur            x1, [x0, #7]
    // 0x8843a4: mov             x3, x1
    // 0x8843a8: stur            x3, [fp, #-0x28]
    // 0x8843ac: r0 = LoadStaticField(0xb54)
    //     0x8843ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8843b0: ldr             x0, [x0, #0x16a8]
    // 0x8843b4: cmp             w0, NULL
    // 0x8843b8: b.ne            #0x8843c4
    // 0x8843bc: r0 = Null
    //     0x8843bc: mov             x0, NULL
    // 0x8843c0: b               #0x8843ec
    // 0x8843c4: r17 = 327
    //     0x8843c4: movz            x17, #0x147
    // 0x8843c8: ldr             w1, [x0, x17]
    // 0x8843cc: DecompressPointer r1
    //     0x8843cc: add             x1, x1, HEAP, lsl #32
    // 0x8843d0: r0 = LoadClassIdInstr(r1)
    //     0x8843d0: ldur            x0, [x1, #-1]
    //     0x8843d4: ubfx            x0, x0, #0xc, #0x14
    // 0x8843d8: r2 = "storyTrueRoute.End"
    //     0x8843d8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12af8] "storyTrueRoute.End"
    //     0x8843dc: ldr             x2, [x2, #0xaf8]
    // 0x8843e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8843e0: sub             lr, x0, #0xb4
    //     0x8843e4: ldr             lr, [x21, lr, lsl #3]
    //     0x8843e8: blr             lr
    // 0x8843ec: r1 = 59
    //     0x8843ec: movz            x1, #0x3b
    // 0x8843f0: branchIfSmi(r0, 0x8843fc)
    //     0x8843f0: tbz             w0, #0, #0x8843fc
    // 0x8843f4: r1 = LoadClassIdInstr(r0)
    //     0x8843f4: ldur            x1, [x0, #-1]
    //     0x8843f8: ubfx            x1, x1, #0xc, #0x14
    // 0x8843fc: r16 = true
    //     0x8843fc: add             x16, NULL, #0x20  ; true
    // 0x884400: stp             x16, x0, [SP]
    // 0x884404: mov             x0, x1
    // 0x884408: mov             lr, x0
    // 0x88440c: ldr             lr, [x21, lr, lsl #3]
    // 0x884410: blr             lr
    // 0x884414: tbnz            w0, #4, #0x884420
    // 0x884418: r0 = 1
    //     0x884418: movz            x0, #0x1
    // 0x88441c: b               #0x88db2c
    // 0x884420: ldur            x0, [fp, #-0x28]
    // 0x884424: b               #0x88db2c
    // 0x884428: r16 = "dojoMoney"
    //     0x884428: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b00] "dojoMoney"
    //     0x88442c: ldr             x16, [x16, #0xb00]
    // 0x884430: ldur            lr, [fp, #-0x20]
    // 0x884434: stp             lr, x16, [SP]
    // 0x884438: r0 = ==()
    //     0x884438: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88443c: tbnz            w0, #4, #0x8845b0
    // 0x884440: r0 = LoadStaticField(0xb54)
    //     0x884440: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884444: ldr             x0, [x0, #0x16a8]
    // 0x884448: cmp             w0, NULL
    // 0x88444c: b.ne            #0x884458
    // 0x884450: r0 = Null
    //     0x884450: mov             x0, NULL
    // 0x884454: b               #0x884480
    // 0x884458: r17 = 347
    //     0x884458: movz            x17, #0x15b
    // 0x88445c: ldr             w1, [x0, x17]
    // 0x884460: DecompressPointer r1
    //     0x884460: add             x1, x1, HEAP, lsl #32
    // 0x884464: r0 = LoadClassIdInstr(r1)
    //     0x884464: ldur            x0, [x1, #-1]
    //     0x884468: ubfx            x0, x0, #0xc, #0x14
    // 0x88446c: r2 = "dojoPupil"
    //     0x88446c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x884470: ldr             x2, [x2, #0xb08]
    // 0x884474: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884474: sub             lr, x0, #0xb4
    //     0x884478: ldr             lr, [x21, lr, lsl #3]
    //     0x88447c: blr             lr
    // 0x884480: r1 = 59
    //     0x884480: movz            x1, #0x3b
    // 0x884484: branchIfSmi(r0, 0x884490)
    //     0x884484: tbz             w0, #0, #0x884490
    // 0x884488: r1 = LoadClassIdInstr(r0)
    //     0x884488: ldur            x1, [x0, #-1]
    //     0x88448c: ubfx            x1, x1, #0xc, #0x14
    // 0x884490: r16 = 8
    //     0x884490: movz            x16, #0x8
    // 0x884494: stp             x16, x0, [SP]
    // 0x884498: mov             x0, x1
    // 0x88449c: mov             lr, x0
    // 0x8844a0: ldr             lr, [x21, lr, lsl #3]
    // 0x8844a4: blr             lr
    // 0x8844a8: r0 = LoadStaticField(0xb54)
    //     0x8844a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8844ac: ldr             x0, [x0, #0x16a8]
    // 0x8844b0: cmp             w0, NULL
    // 0x8844b4: b.ne            #0x8844c0
    // 0x8844b8: r0 = Null
    //     0x8844b8: mov             x0, NULL
    // 0x8844bc: b               #0x8844e8
    // 0x8844c0: r17 = 347
    //     0x8844c0: movz            x17, #0x15b
    // 0x8844c4: ldr             w1, [x0, x17]
    // 0x8844c8: DecompressPointer r1
    //     0x8844c8: add             x1, x1, HEAP, lsl #32
    // 0x8844cc: r0 = LoadClassIdInstr(r1)
    //     0x8844cc: ldur            x0, [x1, #-1]
    //     0x8844d0: ubfx            x0, x0, #0xc, #0x14
    // 0x8844d4: r2 = "dojoPupil"
    //     0x8844d4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x8844d8: ldr             x2, [x2, #0xb08]
    // 0x8844dc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8844dc: sub             lr, x0, #0xb4
    //     0x8844e0: ldr             lr, [x21, lr, lsl #3]
    //     0x8844e4: blr             lr
    // 0x8844e8: r1 = 59
    //     0x8844e8: movz            x1, #0x3b
    // 0x8844ec: branchIfSmi(r0, 0x8844f8)
    //     0x8844ec: tbz             w0, #0, #0x8844f8
    // 0x8844f0: r1 = LoadClassIdInstr(r0)
    //     0x8844f0: ldur            x1, [x0, #-1]
    //     0x8844f4: ubfx            x1, x1, #0xc, #0x14
    // 0x8844f8: r16 = 10
    //     0x8844f8: movz            x16, #0xa
    // 0x8844fc: stp             x16, x0, [SP]
    // 0x884500: mov             x0, x1
    // 0x884504: mov             lr, x0
    // 0x884508: ldr             lr, [x21, lr, lsl #3]
    // 0x88450c: blr             lr
    // 0x884510: tst             x0, #0x10
    // 0x884514: cset            x3, ne
    // 0x884518: sub             x3, x3, #1
    // 0x88451c: r16 = 200
    //     0x88451c: movz            x16, #0xc8
    // 0x884520: and             x3, x3, x16
    // 0x884524: add             x3, x3, #0x190
    // 0x884528: stur            x3, [fp, #-8]
    // 0x88452c: r0 = LoadStaticField(0xb54)
    //     0x88452c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884530: ldr             x0, [x0, #0x16a8]
    // 0x884534: cmp             w0, NULL
    // 0x884538: b.ne            #0x884544
    // 0x88453c: r0 = Null
    //     0x88453c: mov             x0, NULL
    // 0x884540: b               #0x88456c
    // 0x884544: r17 = 347
    //     0x884544: movz            x17, #0x15b
    // 0x884548: ldr             w1, [x0, x17]
    // 0x88454c: DecompressPointer r1
    //     0x88454c: add             x1, x1, HEAP, lsl #32
    // 0x884550: r0 = LoadClassIdInstr(r1)
    //     0x884550: ldur            x0, [x1, #-1]
    //     0x884554: ubfx            x0, x0, #0xc, #0x14
    // 0x884558: r2 = "dojoPupil"
    //     0x884558: add             x2, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x88455c: ldr             x2, [x2, #0xb08]
    // 0x884560: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884560: sub             lr, x0, #0xb4
    //     0x884564: ldr             lr, [x21, lr, lsl #3]
    //     0x884568: blr             lr
    // 0x88456c: r1 = 59
    //     0x88456c: movz            x1, #0x3b
    // 0x884570: branchIfSmi(r0, 0x88457c)
    //     0x884570: tbz             w0, #0, #0x88457c
    // 0x884574: r1 = LoadClassIdInstr(r0)
    //     0x884574: ldur            x1, [x0, #-1]
    //     0x884578: ubfx            x1, x1, #0xc, #0x14
    // 0x88457c: r16 = 12
    //     0x88457c: movz            x16, #0xc
    // 0x884580: stp             x16, x0, [SP]
    // 0x884584: mov             x0, x1
    // 0x884588: mov             lr, x0
    // 0x88458c: ldr             lr, [x21, lr, lsl #3]
    // 0x884590: blr             lr
    // 0x884594: tbnz            w0, #4, #0x8845a0
    // 0x884598: r0 = 500
    //     0x884598: movz            x0, #0x1f4
    // 0x88459c: b               #0x88db2c
    // 0x8845a0: ldur            x0, [fp, #-8]
    // 0x8845a4: r1 = LoadInt32Instr(r0)
    //     0x8845a4: sbfx            x1, x0, #1, #0x1f
    // 0x8845a8: mov             x0, x1
    // 0x8845ac: b               #0x88db2c
    // 0x8845b0: r16 = "skillCardExp"
    //     0x8845b0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b10] "skillCardExp"
    //     0x8845b4: ldr             x16, [x16, #0xb10]
    // 0x8845b8: ldur            lr, [fp, #-0x20]
    // 0x8845bc: stp             lr, x16, [SP]
    // 0x8845c0: r0 = ==()
    //     0x8845c0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8845c4: tbnz            w0, #4, #0x884648
    // 0x8845c8: ldur            x1, [fp, #-0x18]
    // 0x8845cc: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8845cc: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8845d0: r0 = getCard()
    //     0x8845d0: bl              #0x891178  ; [package:battlecross/library/cardLibrary.dart] ::getCard
    // 0x8845d4: LoadField: r1 = r0->field_1b
    //     0x8845d4: ldur            w1, [x0, #0x1b]
    // 0x8845d8: DecompressPointer r1
    //     0x8845d8: add             x1, x1, HEAP, lsl #32
    // 0x8845dc: r16 = Instance_CardRarity
    //     0x8845dc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f08] Obj!CardRarity@ec8461
    //     0x8845e0: ldr             x16, [x16, #0xf08]
    // 0x8845e4: cmp             w1, w16
    // 0x8845e8: cset            x0, ne
    // 0x8845ec: sub             x0, x0, #1
    // 0x8845f0: r16 = 400
    //     0x8845f0: movz            x16, #0x190
    // 0x8845f4: and             x0, x0, x16
    // 0x8845f8: add             x0, x0, #0x190
    // 0x8845fc: r16 = Instance_CardRarity
    //     0x8845fc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10f10] Obj!CardRarity@ec8441
    //     0x884600: ldr             x16, [x16, #0xf10]
    // 0x884604: cmp             w1, w16
    // 0x884608: b.ne            #0x884614
    // 0x88460c: r0 = 800
    //     0x88460c: movz            x0, #0x320
    // 0x884610: b               #0x88461c
    // 0x884614: r2 = LoadInt32Instr(r0)
    //     0x884614: sbfx            x2, x0, #1, #0x1f
    // 0x884618: mov             x0, x2
    // 0x88461c: r16 = Instance_CardRarity
    //     0x88461c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10558] Obj!CardRarity@ec84c1
    //     0x884620: ldr             x16, [x16, #0x558]
    // 0x884624: cmp             w1, w16
    // 0x884628: b.ne            #0x884630
    // 0x88462c: r0 = 1600
    //     0x88462c: movz            x0, #0x640
    // 0x884630: r16 = Instance_CardRarity
    //     0x884630: add             x16, PP, #0x10, lsl #12  ; [pp+0x10520] Obj!CardRarity@ec84e1
    //     0x884634: ldr             x16, [x16, #0x520]
    // 0x884638: cmp             w1, w16
    // 0x88463c: b.ne            #0x88db2c
    // 0x884640: r0 = 3200
    //     0x884640: movz            x0, #0xc80
    // 0x884644: b               #0x88db2c
    // 0x884648: r16 = "random2"
    //     0x884648: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b18] "random2"
    //     0x88464c: ldr             x16, [x16, #0xb18]
    // 0x884650: ldur            lr, [fp, #-0x20]
    // 0x884654: stp             lr, x16, [SP]
    // 0x884658: r0 = ==()
    //     0x884658: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88465c: tbnz            w0, #4, #0x884680
    // 0x884660: r1 = Null
    //     0x884660: mov             x1, NULL
    // 0x884664: r0 = Random()
    //     0x884664: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884668: mov             x1, x0
    // 0x88466c: r2 = 2
    //     0x88466c: movz            x2, #0x2
    // 0x884670: r0 = nextInt()
    //     0x884670: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884674: add             x1, x0, #1
    // 0x884678: mov             x0, x1
    // 0x88467c: b               #0x88db2c
    // 0x884680: r16 = "random3"
    //     0x884680: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b20] "random3"
    //     0x884684: ldr             x16, [x16, #0xb20]
    // 0x884688: ldur            lr, [fp, #-0x20]
    // 0x88468c: stp             lr, x16, [SP]
    // 0x884690: r0 = ==()
    //     0x884690: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884694: tbnz            w0, #4, #0x8846b8
    // 0x884698: r1 = Null
    //     0x884698: mov             x1, NULL
    // 0x88469c: r0 = Random()
    //     0x88469c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8846a0: mov             x1, x0
    // 0x8846a4: r2 = 3
    //     0x8846a4: movz            x2, #0x3
    // 0x8846a8: r0 = nextInt()
    //     0x8846a8: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8846ac: add             x1, x0, #1
    // 0x8846b0: mov             x0, x1
    // 0x8846b4: b               #0x88db2c
    // 0x8846b8: r16 = "random4"
    //     0x8846b8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b28] "random4"
    //     0x8846bc: ldr             x16, [x16, #0xb28]
    // 0x8846c0: ldur            lr, [fp, #-0x20]
    // 0x8846c4: stp             lr, x16, [SP]
    // 0x8846c8: r0 = ==()
    //     0x8846c8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8846cc: tbnz            w0, #4, #0x8846f0
    // 0x8846d0: r1 = Null
    //     0x8846d0: mov             x1, NULL
    // 0x8846d4: r0 = Random()
    //     0x8846d4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8846d8: mov             x1, x0
    // 0x8846dc: r2 = 4
    //     0x8846dc: movz            x2, #0x4
    // 0x8846e0: r0 = nextInt()
    //     0x8846e0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8846e4: add             x1, x0, #1
    // 0x8846e8: mov             x0, x1
    // 0x8846ec: b               #0x88db2c
    // 0x8846f0: r16 = "random2-4"
    //     0x8846f0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b30] "random2-4"
    //     0x8846f4: ldr             x16, [x16, #0xb30]
    // 0x8846f8: ldur            lr, [fp, #-0x20]
    // 0x8846fc: stp             lr, x16, [SP]
    // 0x884700: r0 = ==()
    //     0x884700: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884704: tbnz            w0, #4, #0x884728
    // 0x884708: r1 = Null
    //     0x884708: mov             x1, NULL
    // 0x88470c: r0 = Random()
    //     0x88470c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884710: mov             x1, x0
    // 0x884714: r2 = 3
    //     0x884714: movz            x2, #0x3
    // 0x884718: r0 = nextInt()
    //     0x884718: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x88471c: add             x1, x0, #2
    // 0x884720: mov             x0, x1
    // 0x884724: b               #0x88db2c
    // 0x884728: r16 = "random5"
    //     0x884728: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b38] "random5"
    //     0x88472c: ldr             x16, [x16, #0xb38]
    // 0x884730: ldur            lr, [fp, #-0x20]
    // 0x884734: stp             lr, x16, [SP]
    // 0x884738: r0 = ==()
    //     0x884738: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88473c: tbnz            w0, #4, #0x884760
    // 0x884740: r1 = Null
    //     0x884740: mov             x1, NULL
    // 0x884744: r0 = Random()
    //     0x884744: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884748: mov             x1, x0
    // 0x88474c: r2 = 5
    //     0x88474c: movz            x2, #0x5
    // 0x884750: r0 = nextInt()
    //     0x884750: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884754: add             x1, x0, #1
    // 0x884758: mov             x0, x1
    // 0x88475c: b               #0x88db2c
    // 0x884760: r16 = "random8"
    //     0x884760: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b40] "random8"
    //     0x884764: ldr             x16, [x16, #0xb40]
    // 0x884768: ldur            lr, [fp, #-0x20]
    // 0x88476c: stp             lr, x16, [SP]
    // 0x884770: r0 = ==()
    //     0x884770: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884774: tbnz            w0, #4, #0x884798
    // 0x884778: r1 = Null
    //     0x884778: mov             x1, NULL
    // 0x88477c: r0 = Random()
    //     0x88477c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884780: mov             x1, x0
    // 0x884784: r2 = 8
    //     0x884784: movz            x2, #0x8
    // 0x884788: r0 = nextInt()
    //     0x884788: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x88478c: add             x1, x0, #1
    // 0x884790: mov             x0, x1
    // 0x884794: b               #0x88db2c
    // 0x884798: r16 = "random80"
    //     0x884798: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b48] "random80"
    //     0x88479c: ldr             x16, [x16, #0xb48]
    // 0x8847a0: ldur            lr, [fp, #-0x20]
    // 0x8847a4: stp             lr, x16, [SP]
    // 0x8847a8: r0 = ==()
    //     0x8847a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8847ac: tbnz            w0, #4, #0x8847e0
    // 0x8847b0: r1 = Null
    //     0x8847b0: mov             x1, NULL
    // 0x8847b4: r0 = Random()
    //     0x8847b4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8847b8: mov             x1, x0
    // 0x8847bc: r2 = 80
    //     0x8847bc: movz            x2, #0x50
    // 0x8847c0: r0 = nextInt()
    //     0x8847c0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8847c4: add             x1, x0, #1
    // 0x8847c8: cmp             x1, #0x14
    // 0x8847cc: b.ge            #0x8847d8
    // 0x8847d0: r0 = 20
    //     0x8847d0: movz            x0, #0x14
    // 0x8847d4: b               #0x88db2c
    // 0x8847d8: mov             x0, x1
    // 0x8847dc: b               #0x88db2c
    // 0x8847e0: r16 = "random80-150"
    //     0x8847e0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b50] "random80-150"
    //     0x8847e4: ldr             x16, [x16, #0xb50]
    // 0x8847e8: ldur            lr, [fp, #-0x20]
    // 0x8847ec: stp             lr, x16, [SP]
    // 0x8847f0: r0 = ==()
    //     0x8847f0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8847f4: tbnz            w0, #4, #0x884818
    // 0x8847f8: r1 = Null
    //     0x8847f8: mov             x1, NULL
    // 0x8847fc: r0 = Random()
    //     0x8847fc: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884800: mov             x1, x0
    // 0x884804: r2 = 70
    //     0x884804: movz            x2, #0x46
    // 0x884808: r0 = nextInt()
    //     0x884808: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x88480c: add             x1, x0, #0x50
    // 0x884810: mov             x0, x1
    // 0x884814: b               #0x88db2c
    // 0x884818: r16 = "random70-100"
    //     0x884818: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b58] "random70-100"
    //     0x88481c: ldr             x16, [x16, #0xb58]
    // 0x884820: ldur            lr, [fp, #-0x20]
    // 0x884824: stp             lr, x16, [SP]
    // 0x884828: r0 = ==()
    //     0x884828: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88482c: tbnz            w0, #4, #0x884850
    // 0x884830: r1 = Null
    //     0x884830: mov             x1, NULL
    // 0x884834: r0 = Random()
    //     0x884834: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884838: mov             x1, x0
    // 0x88483c: r2 = 30
    //     0x88483c: movz            x2, #0x1e
    // 0x884840: r0 = nextInt()
    //     0x884840: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884844: add             x1, x0, #0x46
    // 0x884848: mov             x0, x1
    // 0x88484c: b               #0x88db2c
    // 0x884850: r16 = "random100"
    //     0x884850: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b60] "random100"
    //     0x884854: ldr             x16, [x16, #0xb60]
    // 0x884858: ldur            lr, [fp, #-0x20]
    // 0x88485c: stp             lr, x16, [SP]
    // 0x884860: r0 = ==()
    //     0x884860: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884864: tbnz            w0, #4, #0x884898
    // 0x884868: r1 = Null
    //     0x884868: mov             x1, NULL
    // 0x88486c: r0 = Random()
    //     0x88486c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884870: mov             x1, x0
    // 0x884874: r2 = 100
    //     0x884874: movz            x2, #0x64
    // 0x884878: r0 = nextInt()
    //     0x884878: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x88487c: add             x1, x0, #1
    // 0x884880: cmp             x1, #0x32
    // 0x884884: b.ge            #0x884890
    // 0x884888: r0 = 50
    //     0x884888: movz            x0, #0x32
    // 0x88488c: b               #0x88db2c
    // 0x884890: mov             x0, x1
    // 0x884894: b               #0x88db2c
    // 0x884898: r16 = "random15-30"
    //     0x884898: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b68] "random15-30"
    //     0x88489c: ldr             x16, [x16, #0xb68]
    // 0x8848a0: ldur            lr, [fp, #-0x20]
    // 0x8848a4: stp             lr, x16, [SP]
    // 0x8848a8: r0 = ==()
    //     0x8848a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8848ac: tbnz            w0, #4, #0x8848d0
    // 0x8848b0: r1 = Null
    //     0x8848b0: mov             x1, NULL
    // 0x8848b4: r0 = Random()
    //     0x8848b4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8848b8: mov             x1, x0
    // 0x8848bc: r2 = 15
    //     0x8848bc: movz            x2, #0xf
    // 0x8848c0: r0 = nextInt()
    //     0x8848c0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8848c4: add             x1, x0, #0xf
    // 0x8848c8: mov             x0, x1
    // 0x8848cc: b               #0x88db2c
    // 0x8848d0: r16 = "random30-45"
    //     0x8848d0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b70] "random30-45"
    //     0x8848d4: ldr             x16, [x16, #0xb70]
    // 0x8848d8: ldur            lr, [fp, #-0x20]
    // 0x8848dc: stp             lr, x16, [SP]
    // 0x8848e0: r0 = ==()
    //     0x8848e0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8848e4: tbnz            w0, #4, #0x884908
    // 0x8848e8: r1 = Null
    //     0x8848e8: mov             x1, NULL
    // 0x8848ec: r0 = Random()
    //     0x8848ec: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8848f0: mov             x1, x0
    // 0x8848f4: r2 = 15
    //     0x8848f4: movz            x2, #0xf
    // 0x8848f8: r0 = nextInt()
    //     0x8848f8: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8848fc: add             x1, x0, #0x1e
    // 0x884900: mov             x0, x1
    // 0x884904: b               #0x88db2c
    // 0x884908: r16 = "random45-60"
    //     0x884908: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b78] "random45-60"
    //     0x88490c: ldr             x16, [x16, #0xb78]
    // 0x884910: ldur            lr, [fp, #-0x20]
    // 0x884914: stp             lr, x16, [SP]
    // 0x884918: r0 = ==()
    //     0x884918: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88491c: tbnz            w0, #4, #0x884940
    // 0x884920: r1 = Null
    //     0x884920: mov             x1, NULL
    // 0x884924: r0 = Random()
    //     0x884924: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884928: mov             x1, x0
    // 0x88492c: r2 = 15
    //     0x88492c: movz            x2, #0xf
    // 0x884930: r0 = nextInt()
    //     0x884930: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884934: add             x1, x0, #0x2d
    // 0x884938: mov             x0, x1
    // 0x88493c: b               #0x88db2c
    // 0x884940: r16 = "random30-60"
    //     0x884940: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b80] "random30-60"
    //     0x884944: ldr             x16, [x16, #0xb80]
    // 0x884948: ldur            lr, [fp, #-0x20]
    // 0x88494c: stp             lr, x16, [SP]
    // 0x884950: r0 = ==()
    //     0x884950: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884954: tbnz            w0, #4, #0x884978
    // 0x884958: r1 = Null
    //     0x884958: mov             x1, NULL
    // 0x88495c: r0 = Random()
    //     0x88495c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884960: mov             x1, x0
    // 0x884964: r2 = 30
    //     0x884964: movz            x2, #0x1e
    // 0x884968: r0 = nextInt()
    //     0x884968: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x88496c: add             x1, x0, #0x1e
    // 0x884970: mov             x0, x1
    // 0x884974: b               #0x88db2c
    // 0x884978: r16 = "random80-120"
    //     0x884978: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b88] "random80-120"
    //     0x88497c: ldr             x16, [x16, #0xb88]
    // 0x884980: ldur            lr, [fp, #-0x20]
    // 0x884984: stp             lr, x16, [SP]
    // 0x884988: r0 = ==()
    //     0x884988: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88498c: tbnz            w0, #4, #0x8849b0
    // 0x884990: r1 = Null
    //     0x884990: mov             x1, NULL
    // 0x884994: r0 = Random()
    //     0x884994: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884998: mov             x1, x0
    // 0x88499c: r2 = 80
    //     0x88499c: movz            x2, #0x50
    // 0x8849a0: r0 = nextInt()
    //     0x8849a0: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8849a4: add             x1, x0, #0x28
    // 0x8849a8: mov             x0, x1
    // 0x8849ac: b               #0x88db2c
    // 0x8849b0: r16 = "random100-150"
    //     0x8849b0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b90] "random100-150"
    //     0x8849b4: ldr             x16, [x16, #0xb90]
    // 0x8849b8: ldur            lr, [fp, #-0x20]
    // 0x8849bc: stp             lr, x16, [SP]
    // 0x8849c0: r0 = ==()
    //     0x8849c0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8849c4: tbnz            w0, #4, #0x8849e8
    // 0x8849c8: r1 = Null
    //     0x8849c8: mov             x1, NULL
    // 0x8849cc: r0 = Random()
    //     0x8849cc: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8849d0: mov             x1, x0
    // 0x8849d4: r2 = 50
    //     0x8849d4: movz            x2, #0x32
    // 0x8849d8: r0 = nextInt()
    //     0x8849d8: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x8849dc: add             x1, x0, #0x64
    // 0x8849e0: mov             x0, x1
    // 0x8849e4: b               #0x88db2c
    // 0x8849e8: r16 = "random100-200"
    //     0x8849e8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b98] "random100-200"
    //     0x8849ec: ldr             x16, [x16, #0xb98]
    // 0x8849f0: ldur            lr, [fp, #-0x20]
    // 0x8849f4: stp             lr, x16, [SP]
    // 0x8849f8: r0 = ==()
    //     0x8849f8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8849fc: tbnz            w0, #4, #0x884a20
    // 0x884a00: r1 = Null
    //     0x884a00: mov             x1, NULL
    // 0x884a04: r0 = Random()
    //     0x884a04: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884a08: mov             x1, x0
    // 0x884a0c: r2 = 100
    //     0x884a0c: movz            x2, #0x64
    // 0x884a10: r0 = nextInt()
    //     0x884a10: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884a14: add             x1, x0, #0x64
    // 0x884a18: mov             x0, x1
    // 0x884a1c: b               #0x88db2c
    // 0x884a20: r16 = "random150-200"
    //     0x884a20: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ba0] "random150-200"
    //     0x884a24: ldr             x16, [x16, #0xba0]
    // 0x884a28: ldur            lr, [fp, #-0x20]
    // 0x884a2c: stp             lr, x16, [SP]
    // 0x884a30: r0 = ==()
    //     0x884a30: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884a34: tbnz            w0, #4, #0x884a58
    // 0x884a38: r1 = Null
    //     0x884a38: mov             x1, NULL
    // 0x884a3c: r0 = Random()
    //     0x884a3c: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884a40: mov             x1, x0
    // 0x884a44: r2 = 50
    //     0x884a44: movz            x2, #0x32
    // 0x884a48: r0 = nextInt()
    //     0x884a48: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884a4c: add             x1, x0, #0x96
    // 0x884a50: mov             x0, x1
    // 0x884a54: b               #0x88db2c
    // 0x884a58: r16 = "random200-300"
    //     0x884a58: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ba8] "random200-300"
    //     0x884a5c: ldr             x16, [x16, #0xba8]
    // 0x884a60: ldur            lr, [fp, #-0x20]
    // 0x884a64: stp             lr, x16, [SP]
    // 0x884a68: r0 = ==()
    //     0x884a68: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884a6c: tbnz            w0, #4, #0x884a90
    // 0x884a70: r1 = Null
    //     0x884a70: mov             x1, NULL
    // 0x884a74: r0 = Random()
    //     0x884a74: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x884a78: mov             x1, x0
    // 0x884a7c: r2 = 200
    //     0x884a7c: movz            x2, #0xc8
    // 0x884a80: r0 = nextInt()
    //     0x884a80: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x884a84: add             x1, x0, #0x64
    // 0x884a88: mov             x0, x1
    // 0x884a8c: b               #0x88db2c
    // 0x884a90: r16 = "bankSavings"
    //     0x884a90: add             x16, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x884a94: ldr             x16, [x16, #0x3c0]
    // 0x884a98: ldur            lr, [fp, #-0x20]
    // 0x884a9c: stp             lr, x16, [SP]
    // 0x884aa0: r0 = ==()
    //     0x884aa0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884aa4: tbnz            w0, #4, #0x884b84
    // 0x884aa8: r0 = LoadStaticField(0xb54)
    //     0x884aa8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884aac: ldr             x0, [x0, #0x16a8]
    // 0x884ab0: cmp             w0, NULL
    // 0x884ab4: b.eq            #0x884b7c
    // 0x884ab8: r17 = 347
    //     0x884ab8: movz            x17, #0x15b
    // 0x884abc: ldr             w1, [x0, x17]
    // 0x884ac0: DecompressPointer r1
    //     0x884ac0: add             x1, x1, HEAP, lsl #32
    // 0x884ac4: r0 = LoadClassIdInstr(r1)
    //     0x884ac4: ldur            x0, [x1, #-1]
    //     0x884ac8: ubfx            x0, x0, #0xc, #0x14
    // 0x884acc: r2 = "bankSavings"
    //     0x884acc: add             x2, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x884ad0: ldr             x2, [x2, #0x3c0]
    // 0x884ad4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884ad4: sub             lr, x0, #0xb4
    //     0x884ad8: ldr             lr, [x21, lr, lsl #3]
    //     0x884adc: blr             lr
    // 0x884ae0: cmp             w0, NULL
    // 0x884ae4: b.eq            #0x884b7c
    // 0x884ae8: r0 = LoadStaticField(0xb54)
    //     0x884ae8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884aec: ldr             x0, [x0, #0x16a8]
    // 0x884af0: cmp             w0, NULL
    // 0x884af4: b.ne            #0x884b00
    // 0x884af8: r3 = Null
    //     0x884af8: mov             x3, NULL
    // 0x884afc: b               #0x884b2c
    // 0x884b00: r17 = 347
    //     0x884b00: movz            x17, #0x15b
    // 0x884b04: ldr             w1, [x0, x17]
    // 0x884b08: DecompressPointer r1
    //     0x884b08: add             x1, x1, HEAP, lsl #32
    // 0x884b0c: r0 = LoadClassIdInstr(r1)
    //     0x884b0c: ldur            x0, [x1, #-1]
    //     0x884b10: ubfx            x0, x0, #0xc, #0x14
    // 0x884b14: r2 = "bankSavings"
    //     0x884b14: add             x2, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x884b18: ldr             x2, [x2, #0x3c0]
    // 0x884b1c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884b1c: sub             lr, x0, #0xb4
    //     0x884b20: ldr             lr, [x21, lr, lsl #3]
    //     0x884b24: blr             lr
    // 0x884b28: mov             x3, x0
    // 0x884b2c: mov             x0, x3
    // 0x884b30: stur            x3, [fp, #-8]
    // 0x884b34: r2 = Null
    //     0x884b34: mov             x2, NULL
    // 0x884b38: r1 = Null
    //     0x884b38: mov             x1, NULL
    // 0x884b3c: branchIfSmi(r0, 0x884b64)
    //     0x884b3c: tbz             w0, #0, #0x884b64
    // 0x884b40: r4 = LoadClassIdInstr(r0)
    //     0x884b40: ldur            x4, [x0, #-1]
    //     0x884b44: ubfx            x4, x4, #0xc, #0x14
    // 0x884b48: sub             x4, x4, #0x3b
    // 0x884b4c: cmp             x4, #1
    // 0x884b50: b.ls            #0x884b64
    // 0x884b54: r8 = int
    //     0x884b54: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884b58: r3 = Null
    //     0x884b58: add             x3, PP, #0x12, lsl #12  ; [pp+0x12bb0] Null
    //     0x884b5c: ldr             x3, [x3, #0xbb0]
    // 0x884b60: r0 = int()
    //     0x884b60: bl              #0x1524294  ; IsType_int_Stub
    // 0x884b64: ldur            x0, [fp, #-8]
    // 0x884b68: r1 = LoadInt32Instr(r0)
    //     0x884b68: sbfx            x1, x0, #1, #0x1f
    //     0x884b6c: tbz             w0, #0, #0x884b74
    //     0x884b70: ldur            x1, [x0, #7]
    // 0x884b74: mov             x0, x1
    // 0x884b78: b               #0x88db2c
    // 0x884b7c: r0 = 0
    //     0x884b7c: movz            x0, #0
    // 0x884b80: b               #0x88db2c
    // 0x884b84: r16 = "danielEnergyDrink"
    //     0x884b84: add             x16, PP, #0x12, lsl #12  ; [pp+0x12bc0] "danielEnergyDrink"
    //     0x884b88: ldr             x16, [x16, #0xbc0]
    // 0x884b8c: ldur            lr, [fp, #-0x20]
    // 0x884b90: stp             lr, x16, [SP]
    // 0x884b94: r0 = ==()
    //     0x884b94: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884b98: tbnz            w0, #4, #0x884cd0
    // 0x884b9c: r0 = LoadStaticField(0xb54)
    //     0x884b9c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884ba0: ldr             x0, [x0, #0x16a8]
    // 0x884ba4: cmp             w0, NULL
    // 0x884ba8: b.eq            #0x884cc8
    // 0x884bac: r17 = 347
    //     0x884bac: movz            x17, #0x15b
    // 0x884bb0: ldr             w1, [x0, x17]
    // 0x884bb4: DecompressPointer r1
    //     0x884bb4: add             x1, x1, HEAP, lsl #32
    // 0x884bb8: r0 = LoadClassIdInstr(r1)
    //     0x884bb8: ldur            x0, [x1, #-1]
    //     0x884bbc: ubfx            x0, x0, #0xc, #0x14
    // 0x884bc0: r2 = "danielEnergyDrink"
    //     0x884bc0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12bc0] "danielEnergyDrink"
    //     0x884bc4: ldr             x2, [x2, #0xbc0]
    // 0x884bc8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884bc8: sub             lr, x0, #0xb4
    //     0x884bcc: ldr             lr, [x21, lr, lsl #3]
    //     0x884bd0: blr             lr
    // 0x884bd4: cmp             w0, NULL
    // 0x884bd8: b.eq            #0x884cc8
    // 0x884bdc: r0 = LoadStaticField(0xb54)
    //     0x884bdc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884be0: ldr             x0, [x0, #0x16a8]
    // 0x884be4: cmp             w0, NULL
    // 0x884be8: b.ne            #0x884bf4
    // 0x884bec: r0 = Null
    //     0x884bec: mov             x0, NULL
    // 0x884bf0: b               #0x884c1c
    // 0x884bf4: r17 = 347
    //     0x884bf4: movz            x17, #0x15b
    // 0x884bf8: ldr             w1, [x0, x17]
    // 0x884bfc: DecompressPointer r1
    //     0x884bfc: add             x1, x1, HEAP, lsl #32
    // 0x884c00: r0 = LoadClassIdInstr(r1)
    //     0x884c00: ldur            x0, [x1, #-1]
    //     0x884c04: ubfx            x0, x0, #0xc, #0x14
    // 0x884c08: r2 = "danielEnergyDrink"
    //     0x884c08: add             x2, PP, #0x12, lsl #12  ; [pp+0x12bc0] "danielEnergyDrink"
    //     0x884c0c: ldr             x2, [x2, #0xbc0]
    // 0x884c10: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884c10: sub             lr, x0, #0xb4
    //     0x884c14: ldr             lr, [x21, lr, lsl #3]
    //     0x884c18: blr             lr
    // 0x884c1c: cmp             w0, NULL
    // 0x884c20: b.ne            #0x884c2c
    // 0x884c24: r3 = 0
    //     0x884c24: movz            x3, #0
    // 0x884c28: b               #0x884c30
    // 0x884c2c: mov             x3, x0
    // 0x884c30: mov             x0, x3
    // 0x884c34: stur            x3, [fp, #-8]
    // 0x884c38: r2 = Null
    //     0x884c38: mov             x2, NULL
    // 0x884c3c: r1 = Null
    //     0x884c3c: mov             x1, NULL
    // 0x884c40: branchIfSmi(r0, 0x884c68)
    //     0x884c40: tbz             w0, #0, #0x884c68
    // 0x884c44: r4 = LoadClassIdInstr(r0)
    //     0x884c44: ldur            x4, [x0, #-1]
    //     0x884c48: ubfx            x4, x4, #0xc, #0x14
    // 0x884c4c: sub             x4, x4, #0x3b
    // 0x884c50: cmp             x4, #2
    // 0x884c54: b.ls            #0x884c68
    // 0x884c58: r8 = num
    //     0x884c58: ldr             x8, [PP, #0x3e8]  ; [pp+0x3e8] Type: num
    // 0x884c5c: r3 = Null
    //     0x884c5c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12bc8] Null
    //     0x884c60: ldr             x3, [x3, #0xbc8]
    // 0x884c64: r0 = DefaultTypeTest()
    //     0x884c64: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x884c68: r16 = 10
    //     0x884c68: movz            x16, #0xa
    // 0x884c6c: ldur            lr, [fp, #-8]
    // 0x884c70: stp             lr, x16, [SP]
    // 0x884c74: r0 = -()
    //     0x884c74: bl              #0x14fdaac  ; [dart:core] _IntegerImplementation::-
    // 0x884c78: mov             x3, x0
    // 0x884c7c: r2 = Null
    //     0x884c7c: mov             x2, NULL
    // 0x884c80: r1 = Null
    //     0x884c80: mov             x1, NULL
    // 0x884c84: stur            x3, [fp, #-8]
    // 0x884c88: branchIfSmi(r0, 0x884cb0)
    //     0x884c88: tbz             w0, #0, #0x884cb0
    // 0x884c8c: r4 = LoadClassIdInstr(r0)
    //     0x884c8c: ldur            x4, [x0, #-1]
    //     0x884c90: ubfx            x4, x4, #0xc, #0x14
    // 0x884c94: sub             x4, x4, #0x3b
    // 0x884c98: cmp             x4, #1
    // 0x884c9c: b.ls            #0x884cb0
    // 0x884ca0: r8 = int
    //     0x884ca0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884ca4: r3 = Null
    //     0x884ca4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12bd8] Null
    //     0x884ca8: ldr             x3, [x3, #0xbd8]
    // 0x884cac: r0 = int()
    //     0x884cac: bl              #0x1524294  ; IsType_int_Stub
    // 0x884cb0: ldur            x0, [fp, #-8]
    // 0x884cb4: r1 = LoadInt32Instr(r0)
    //     0x884cb4: sbfx            x1, x0, #1, #0x1f
    //     0x884cb8: tbz             w0, #0, #0x884cc0
    //     0x884cbc: ldur            x1, [x0, #7]
    // 0x884cc0: mov             x0, x1
    // 0x884cc4: b               #0x88db2c
    // 0x884cc8: r0 = 5
    //     0x884cc8: movz            x0, #0x5
    // 0x884ccc: b               #0x88db2c
    // 0x884cd0: r16 = "yukiFund"
    //     0x884cd0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12be8] "yukiFund"
    //     0x884cd4: ldr             x16, [x16, #0xbe8]
    // 0x884cd8: ldur            lr, [fp, #-0x20]
    // 0x884cdc: stp             lr, x16, [SP]
    // 0x884ce0: r0 = ==()
    //     0x884ce0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884ce4: tbnz            w0, #4, #0x884dc4
    // 0x884ce8: r0 = LoadStaticField(0xb54)
    //     0x884ce8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884cec: ldr             x0, [x0, #0x16a8]
    // 0x884cf0: cmp             w0, NULL
    // 0x884cf4: b.eq            #0x884dbc
    // 0x884cf8: r17 = 347
    //     0x884cf8: movz            x17, #0x15b
    // 0x884cfc: ldr             w1, [x0, x17]
    // 0x884d00: DecompressPointer r1
    //     0x884d00: add             x1, x1, HEAP, lsl #32
    // 0x884d04: r0 = LoadClassIdInstr(r1)
    //     0x884d04: ldur            x0, [x1, #-1]
    //     0x884d08: ubfx            x0, x0, #0xc, #0x14
    // 0x884d0c: r2 = "yukiFund"
    //     0x884d0c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12be8] "yukiFund"
    //     0x884d10: ldr             x2, [x2, #0xbe8]
    // 0x884d14: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884d14: sub             lr, x0, #0xb4
    //     0x884d18: ldr             lr, [x21, lr, lsl #3]
    //     0x884d1c: blr             lr
    // 0x884d20: cmp             w0, NULL
    // 0x884d24: b.eq            #0x884dbc
    // 0x884d28: r0 = LoadStaticField(0xb54)
    //     0x884d28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884d2c: ldr             x0, [x0, #0x16a8]
    // 0x884d30: cmp             w0, NULL
    // 0x884d34: b.ne            #0x884d40
    // 0x884d38: r3 = Null
    //     0x884d38: mov             x3, NULL
    // 0x884d3c: b               #0x884d6c
    // 0x884d40: r17 = 347
    //     0x884d40: movz            x17, #0x15b
    // 0x884d44: ldr             w1, [x0, x17]
    // 0x884d48: DecompressPointer r1
    //     0x884d48: add             x1, x1, HEAP, lsl #32
    // 0x884d4c: r0 = LoadClassIdInstr(r1)
    //     0x884d4c: ldur            x0, [x1, #-1]
    //     0x884d50: ubfx            x0, x0, #0xc, #0x14
    // 0x884d54: r2 = "yukiFund"
    //     0x884d54: add             x2, PP, #0x12, lsl #12  ; [pp+0x12be8] "yukiFund"
    //     0x884d58: ldr             x2, [x2, #0xbe8]
    // 0x884d5c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884d5c: sub             lr, x0, #0xb4
    //     0x884d60: ldr             lr, [x21, lr, lsl #3]
    //     0x884d64: blr             lr
    // 0x884d68: mov             x3, x0
    // 0x884d6c: mov             x0, x3
    // 0x884d70: stur            x3, [fp, #-8]
    // 0x884d74: r2 = Null
    //     0x884d74: mov             x2, NULL
    // 0x884d78: r1 = Null
    //     0x884d78: mov             x1, NULL
    // 0x884d7c: branchIfSmi(r0, 0x884da4)
    //     0x884d7c: tbz             w0, #0, #0x884da4
    // 0x884d80: r4 = LoadClassIdInstr(r0)
    //     0x884d80: ldur            x4, [x0, #-1]
    //     0x884d84: ubfx            x4, x4, #0xc, #0x14
    // 0x884d88: sub             x4, x4, #0x3b
    // 0x884d8c: cmp             x4, #1
    // 0x884d90: b.ls            #0x884da4
    // 0x884d94: r8 = int
    //     0x884d94: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884d98: r3 = Null
    //     0x884d98: add             x3, PP, #0x12, lsl #12  ; [pp+0x12bf0] Null
    //     0x884d9c: ldr             x3, [x3, #0xbf0]
    // 0x884da0: r0 = int()
    //     0x884da0: bl              #0x1524294  ; IsType_int_Stub
    // 0x884da4: ldur            x0, [fp, #-8]
    // 0x884da8: r1 = LoadInt32Instr(r0)
    //     0x884da8: sbfx            x1, x0, #1, #0x1f
    //     0x884dac: tbz             w0, #0, #0x884db4
    //     0x884db0: ldur            x1, [x0, #7]
    // 0x884db4: mov             x0, x1
    // 0x884db8: b               #0x88db2c
    // 0x884dbc: r0 = 0
    //     0x884dbc: movz            x0, #0
    // 0x884dc0: b               #0x88db2c
    // 0x884dc4: r16 = "jimaPetition"
    //     0x884dc4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c00] "jimaPetition"
    //     0x884dc8: ldr             x16, [x16, #0xc00]
    // 0x884dcc: ldur            lr, [fp, #-0x20]
    // 0x884dd0: stp             lr, x16, [SP]
    // 0x884dd4: r0 = ==()
    //     0x884dd4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884dd8: tbnz            w0, #4, #0x884eb8
    // 0x884ddc: r0 = LoadStaticField(0xb54)
    //     0x884ddc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884de0: ldr             x0, [x0, #0x16a8]
    // 0x884de4: cmp             w0, NULL
    // 0x884de8: b.eq            #0x884eb0
    // 0x884dec: r17 = 347
    //     0x884dec: movz            x17, #0x15b
    // 0x884df0: ldr             w1, [x0, x17]
    // 0x884df4: DecompressPointer r1
    //     0x884df4: add             x1, x1, HEAP, lsl #32
    // 0x884df8: r0 = LoadClassIdInstr(r1)
    //     0x884df8: ldur            x0, [x1, #-1]
    //     0x884dfc: ubfx            x0, x0, #0xc, #0x14
    // 0x884e00: r2 = "jimaPetition"
    //     0x884e00: add             x2, PP, #0x12, lsl #12  ; [pp+0x12c00] "jimaPetition"
    //     0x884e04: ldr             x2, [x2, #0xc00]
    // 0x884e08: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884e08: sub             lr, x0, #0xb4
    //     0x884e0c: ldr             lr, [x21, lr, lsl #3]
    //     0x884e10: blr             lr
    // 0x884e14: cmp             w0, NULL
    // 0x884e18: b.eq            #0x884eb0
    // 0x884e1c: r0 = LoadStaticField(0xb54)
    //     0x884e1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884e20: ldr             x0, [x0, #0x16a8]
    // 0x884e24: cmp             w0, NULL
    // 0x884e28: b.ne            #0x884e34
    // 0x884e2c: r3 = Null
    //     0x884e2c: mov             x3, NULL
    // 0x884e30: b               #0x884e60
    // 0x884e34: r17 = 347
    //     0x884e34: movz            x17, #0x15b
    // 0x884e38: ldr             w1, [x0, x17]
    // 0x884e3c: DecompressPointer r1
    //     0x884e3c: add             x1, x1, HEAP, lsl #32
    // 0x884e40: r0 = LoadClassIdInstr(r1)
    //     0x884e40: ldur            x0, [x1, #-1]
    //     0x884e44: ubfx            x0, x0, #0xc, #0x14
    // 0x884e48: r2 = "jimaPetition"
    //     0x884e48: add             x2, PP, #0x12, lsl #12  ; [pp+0x12c00] "jimaPetition"
    //     0x884e4c: ldr             x2, [x2, #0xc00]
    // 0x884e50: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884e50: sub             lr, x0, #0xb4
    //     0x884e54: ldr             lr, [x21, lr, lsl #3]
    //     0x884e58: blr             lr
    // 0x884e5c: mov             x3, x0
    // 0x884e60: mov             x0, x3
    // 0x884e64: stur            x3, [fp, #-8]
    // 0x884e68: r2 = Null
    //     0x884e68: mov             x2, NULL
    // 0x884e6c: r1 = Null
    //     0x884e6c: mov             x1, NULL
    // 0x884e70: branchIfSmi(r0, 0x884e98)
    //     0x884e70: tbz             w0, #0, #0x884e98
    // 0x884e74: r4 = LoadClassIdInstr(r0)
    //     0x884e74: ldur            x4, [x0, #-1]
    //     0x884e78: ubfx            x4, x4, #0xc, #0x14
    // 0x884e7c: sub             x4, x4, #0x3b
    // 0x884e80: cmp             x4, #1
    // 0x884e84: b.ls            #0x884e98
    // 0x884e88: r8 = int
    //     0x884e88: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x884e8c: r3 = Null
    //     0x884e8c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12c08] Null
    //     0x884e90: ldr             x3, [x3, #0xc08]
    // 0x884e94: r0 = int()
    //     0x884e94: bl              #0x1524294  ; IsType_int_Stub
    // 0x884e98: ldur            x0, [fp, #-8]
    // 0x884e9c: r1 = LoadInt32Instr(r0)
    //     0x884e9c: sbfx            x1, x0, #1, #0x1f
    //     0x884ea0: tbz             w0, #0, #0x884ea8
    //     0x884ea4: ldur            x1, [x0, #7]
    // 0x884ea8: mov             x0, x1
    // 0x884eac: b               #0x88db2c
    // 0x884eb0: r0 = 0
    //     0x884eb0: movz            x0, #0
    // 0x884eb4: b               #0x88db2c
    // 0x884eb8: r16 = "9snack9sackmoney"
    //     0x884eb8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c18] "9snack9sackmoney"
    //     0x884ebc: ldr             x16, [x16, #0xc18]
    // 0x884ec0: ldur            lr, [fp, #-0x20]
    // 0x884ec4: stp             lr, x16, [SP]
    // 0x884ec8: r0 = ==()
    //     0x884ec8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884ecc: tbnz            w0, #4, #0x884f5c
    // 0x884ed0: r0 = LoadStaticField(0xb54)
    //     0x884ed0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884ed4: ldr             x0, [x0, #0x16a8]
    // 0x884ed8: cmp             w0, NULL
    // 0x884edc: b.ne            #0x884ee8
    // 0x884ee0: r0 = Null
    //     0x884ee0: mov             x0, NULL
    // 0x884ee4: b               #0x884f10
    // 0x884ee8: r17 = 351
    //     0x884ee8: movz            x17, #0x15f
    // 0x884eec: ldr             w1, [x0, x17]
    // 0x884ef0: DecompressPointer r1
    //     0x884ef0: add             x1, x1, HEAP, lsl #32
    // 0x884ef4: r0 = LoadClassIdInstr(r1)
    //     0x884ef4: ldur            x0, [x1, #-1]
    //     0x884ef8: ubfx            x0, x0, #0xc, #0x14
    // 0x884efc: r2 = "9exp9goldTradeType"
    //     0x884efc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc98] "9exp9goldTradeType"
    //     0x884f00: ldr             x2, [x2, #0xc98]
    // 0x884f04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884f04: sub             lr, x0, #0xb4
    //     0x884f08: ldr             lr, [x21, lr, lsl #3]
    //     0x884f0c: blr             lr
    // 0x884f10: r1 = 59
    //     0x884f10: movz            x1, #0x3b
    // 0x884f14: branchIfSmi(r0, 0x884f20)
    //     0x884f14: tbz             w0, #0, #0x884f20
    // 0x884f18: r1 = LoadClassIdInstr(r0)
    //     0x884f18: ldur            x1, [x0, #-1]
    //     0x884f1c: ubfx            x1, x1, #0xc, #0x14
    // 0x884f20: r16 = "9bundle"
    //     0x884f20: add             x16, PP, #0xf, lsl #12  ; [pp+0xfc90] "9bundle"
    //     0x884f24: ldr             x16, [x16, #0xc90]
    // 0x884f28: stp             x16, x0, [SP]
    // 0x884f2c: mov             x0, x1
    // 0x884f30: mov             lr, x0
    // 0x884f34: ldr             lr, [x21, lr, lsl #3]
    // 0x884f38: blr             lr
    // 0x884f3c: tst             x0, #0x10
    // 0x884f40: cset            x1, ne
    // 0x884f44: sub             x1, x1, #1
    // 0x884f48: r16 = 1500
    //     0x884f48: movz            x16, #0x5dc
    // 0x884f4c: and             x1, x1, x16
    // 0x884f50: add             x1, x1, #0x1f4
    // 0x884f54: r0 = LoadInt32Instr(r1)
    //     0x884f54: sbfx            x0, x1, #1, #0x1f
    // 0x884f58: b               #0x88db2c
    // 0x884f5c: r16 = "dojoHellMode"
    //     0x884f5c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c20] "dojoHellMode"
    //     0x884f60: ldr             x16, [x16, #0xc20]
    // 0x884f64: ldur            lr, [fp, #-0x20]
    // 0x884f68: stp             lr, x16, [SP]
    // 0x884f6c: r0 = ==()
    //     0x884f6c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x884f70: tbnz            w0, #4, #0x884ff8
    // 0x884f74: r0 = LoadStaticField(0xb54)
    //     0x884f74: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x884f78: ldr             x0, [x0, #0x16a8]
    // 0x884f7c: cmp             w0, NULL
    // 0x884f80: b.ne            #0x884f8c
    // 0x884f84: r0 = Null
    //     0x884f84: mov             x0, NULL
    // 0x884f88: b               #0x884fb4
    // 0x884f8c: r17 = 327
    //     0x884f8c: movz            x17, #0x147
    // 0x884f90: ldr             w1, [x0, x17]
    // 0x884f94: DecompressPointer r1
    //     0x884f94: add             x1, x1, HEAP, lsl #32
    // 0x884f98: r0 = LoadClassIdInstr(r1)
    //     0x884f98: ldur            x0, [x1, #-1]
    //     0x884f9c: ubfx            x0, x0, #0xc, #0x14
    // 0x884fa0: r2 = "hellMode"
    //     0x884fa0: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x884fa4: ldr             x2, [x2, #0xd40]
    // 0x884fa8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x884fa8: sub             lr, x0, #0xb4
    //     0x884fac: ldr             lr, [x21, lr, lsl #3]
    //     0x884fb0: blr             lr
    // 0x884fb4: r1 = 59
    //     0x884fb4: movz            x1, #0x3b
    // 0x884fb8: branchIfSmi(r0, 0x884fc4)
    //     0x884fb8: tbz             w0, #0, #0x884fc4
    // 0x884fbc: r1 = LoadClassIdInstr(r0)
    //     0x884fbc: ldur            x1, [x0, #-1]
    //     0x884fc0: ubfx            x1, x1, #0xc, #0x14
    // 0x884fc4: r16 = true
    //     0x884fc4: add             x16, NULL, #0x20  ; true
    // 0x884fc8: stp             x16, x0, [SP]
    // 0x884fcc: mov             x0, x1
    // 0x884fd0: mov             lr, x0
    // 0x884fd4: ldr             lr, [x21, lr, lsl #3]
    // 0x884fd8: blr             lr
    // 0x884fdc: tst             x0, #0x10
    // 0x884fe0: cset            x1, ne
    // 0x884fe4: sub             x1, x1, #1
    // 0x884fe8: and             x1, x1, #4
    // 0x884fec: add             x1, x1, #0x10
    // 0x884ff0: r0 = LoadInt32Instr(r1)
    //     0x884ff0: sbfx            x0, x1, #1, #0x1f
    // 0x884ff4: b               #0x88db2c
    // 0x884ff8: r16 = "dojoHellMode2"
    //     0x884ff8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c28] "dojoHellMode2"
    //     0x884ffc: ldr             x16, [x16, #0xc28]
    // 0x885000: ldur            lr, [fp, #-0x20]
    // 0x885004: stp             lr, x16, [SP]
    // 0x885008: r0 = ==()
    //     0x885008: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88500c: tbnz            w0, #4, #0x885094
    // 0x885010: r0 = LoadStaticField(0xb54)
    //     0x885010: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885014: ldr             x0, [x0, #0x16a8]
    // 0x885018: cmp             w0, NULL
    // 0x88501c: b.ne            #0x885028
    // 0x885020: r0 = Null
    //     0x885020: mov             x0, NULL
    // 0x885024: b               #0x885050
    // 0x885028: r17 = 327
    //     0x885028: movz            x17, #0x147
    // 0x88502c: ldr             w1, [x0, x17]
    // 0x885030: DecompressPointer r1
    //     0x885030: add             x1, x1, HEAP, lsl #32
    // 0x885034: r0 = LoadClassIdInstr(r1)
    //     0x885034: ldur            x0, [x1, #-1]
    //     0x885038: ubfx            x0, x0, #0xc, #0x14
    // 0x88503c: r2 = "hellMode"
    //     0x88503c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885040: ldr             x2, [x2, #0xd40]
    // 0x885044: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885044: sub             lr, x0, #0xb4
    //     0x885048: ldr             lr, [x21, lr, lsl #3]
    //     0x88504c: blr             lr
    // 0x885050: r1 = 59
    //     0x885050: movz            x1, #0x3b
    // 0x885054: branchIfSmi(r0, 0x885060)
    //     0x885054: tbz             w0, #0, #0x885060
    // 0x885058: r1 = LoadClassIdInstr(r0)
    //     0x885058: ldur            x1, [x0, #-1]
    //     0x88505c: ubfx            x1, x1, #0xc, #0x14
    // 0x885060: r16 = true
    //     0x885060: add             x16, NULL, #0x20  ; true
    // 0x885064: stp             x16, x0, [SP]
    // 0x885068: mov             x0, x1
    // 0x88506c: mov             lr, x0
    // 0x885070: ldr             lr, [x21, lr, lsl #3]
    // 0x885074: blr             lr
    // 0x885078: tst             x0, #0x10
    // 0x88507c: cset            x1, ne
    // 0x885080: sub             x1, x1, #1
    // 0x885084: and             x1, x1, #8
    // 0x885088: add             x1, x1, #0xc
    // 0x88508c: r0 = LoadInt32Instr(r1)
    //     0x88508c: sbfx            x0, x1, #1, #0x1f
    // 0x885090: b               #0x88db2c
    // 0x885094: r16 = "nbaDojoRushRewardAmount"
    //     0x885094: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c30] "nbaDojoRushRewardAmount"
    //     0x885098: ldr             x16, [x16, #0xc30]
    // 0x88509c: ldur            lr, [fp, #-0x20]
    // 0x8850a0: stp             lr, x16, [SP]
    // 0x8850a4: r0 = ==()
    //     0x8850a4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8850a8: tbnz            w0, #4, #0x885134
    // 0x8850ac: r0 = LoadStaticField(0xb54)
    //     0x8850ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8850b0: ldr             x0, [x0, #0x16a8]
    // 0x8850b4: cmp             w0, NULL
    // 0x8850b8: b.ne            #0x8850c4
    // 0x8850bc: r0 = Null
    //     0x8850bc: mov             x0, NULL
    // 0x8850c0: b               #0x8850ec
    // 0x8850c4: r17 = 327
    //     0x8850c4: movz            x17, #0x147
    // 0x8850c8: ldr             w1, [x0, x17]
    // 0x8850cc: DecompressPointer r1
    //     0x8850cc: add             x1, x1, HEAP, lsl #32
    // 0x8850d0: r0 = LoadClassIdInstr(r1)
    //     0x8850d0: ldur            x0, [x1, #-1]
    //     0x8850d4: ubfx            x0, x0, #0xc, #0x14
    // 0x8850d8: r2 = "hellMode"
    //     0x8850d8: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x8850dc: ldr             x2, [x2, #0xd40]
    // 0x8850e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8850e0: sub             lr, x0, #0xb4
    //     0x8850e4: ldr             lr, [x21, lr, lsl #3]
    //     0x8850e8: blr             lr
    // 0x8850ec: r1 = 59
    //     0x8850ec: movz            x1, #0x3b
    // 0x8850f0: branchIfSmi(r0, 0x8850fc)
    //     0x8850f0: tbz             w0, #0, #0x8850fc
    // 0x8850f4: r1 = LoadClassIdInstr(r0)
    //     0x8850f4: ldur            x1, [x0, #-1]
    //     0x8850f8: ubfx            x1, x1, #0xc, #0x14
    // 0x8850fc: r16 = true
    //     0x8850fc: add             x16, NULL, #0x20  ; true
    // 0x885100: stp             x16, x0, [SP]
    // 0x885104: mov             x0, x1
    // 0x885108: mov             lr, x0
    // 0x88510c: ldr             lr, [x21, lr, lsl #3]
    // 0x885110: blr             lr
    // 0x885114: tst             x0, #0x10
    // 0x885118: cset            x1, ne
    // 0x88511c: sub             x1, x1, #1
    // 0x885120: r16 = 1000
    //     0x885120: movz            x16, #0x3e8
    // 0x885124: and             x1, x1, x16
    // 0x885128: add             x1, x1, #0x3e8
    // 0x88512c: r0 = LoadInt32Instr(r1)
    //     0x88512c: sbfx            x0, x1, #1, #0x1f
    // 0x885130: b               #0x88db2c
    // 0x885134: r16 = "rizePreJudgement"
    //     0x885134: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c38] "rizePreJudgement"
    //     0x885138: ldr             x16, [x16, #0xc38]
    // 0x88513c: ldur            lr, [fp, #-0x20]
    // 0x885140: stp             lr, x16, [SP]
    // 0x885144: r0 = ==()
    //     0x885144: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885148: tbnz            w0, #4, #0x8851dc
    // 0x88514c: r0 = LoadStaticField(0xb54)
    //     0x88514c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885150: ldr             x0, [x0, #0x16a8]
    // 0x885154: cmp             w0, NULL
    // 0x885158: b.ne            #0x885164
    // 0x88515c: r0 = Null
    //     0x88515c: mov             x0, NULL
    // 0x885160: b               #0x88518c
    // 0x885164: r17 = 327
    //     0x885164: movz            x17, #0x147
    // 0x885168: ldr             w1, [x0, x17]
    // 0x88516c: DecompressPointer r1
    //     0x88516c: add             x1, x1, HEAP, lsl #32
    // 0x885170: r0 = LoadClassIdInstr(r1)
    //     0x885170: ldur            x0, [x1, #-1]
    //     0x885174: ubfx            x0, x0, #0xc, #0x14
    // 0x885178: r2 = "hellMode"
    //     0x885178: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x88517c: ldr             x2, [x2, #0xd40]
    // 0x885180: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885180: sub             lr, x0, #0xb4
    //     0x885184: ldr             lr, [x21, lr, lsl #3]
    //     0x885188: blr             lr
    // 0x88518c: r1 = 59
    //     0x88518c: movz            x1, #0x3b
    // 0x885190: branchIfSmi(r0, 0x88519c)
    //     0x885190: tbz             w0, #0, #0x88519c
    // 0x885194: r1 = LoadClassIdInstr(r0)
    //     0x885194: ldur            x1, [x0, #-1]
    //     0x885198: ubfx            x1, x1, #0xc, #0x14
    // 0x88519c: r16 = true
    //     0x88519c: add             x16, NULL, #0x20  ; true
    // 0x8851a0: stp             x16, x0, [SP]
    // 0x8851a4: mov             x0, x1
    // 0x8851a8: mov             lr, x0
    // 0x8851ac: ldr             lr, [x21, lr, lsl #3]
    // 0x8851b0: blr             lr
    // 0x8851b4: tst             x0, #0x10
    // 0x8851b8: cset            x1, ne
    // 0x8851bc: sub             x1, x1, #1
    // 0x8851c0: r16 = 90000
    //     0x8851c0: movz            x16, #0x5f90
    //     0x8851c4: movk            x16, #0x1, lsl #16
    // 0x8851c8: and             x1, x1, x16
    // 0x8851cc: r17 = 10000
    //     0x8851cc: movz            x17, #0x2710
    // 0x8851d0: add             x1, x1, x17
    // 0x8851d4: r0 = LoadInt32Instr(r1)
    //     0x8851d4: sbfx            x0, x1, #1, #0x1f
    // 0x8851d8: b               #0x88db2c
    // 0x8851dc: r16 = "shoumaHellMode"
    //     0x8851dc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c40] "shoumaHellMode"
    //     0x8851e0: ldr             x16, [x16, #0xc40]
    // 0x8851e4: ldur            lr, [fp, #-0x20]
    // 0x8851e8: stp             lr, x16, [SP]
    // 0x8851ec: r0 = ==()
    //     0x8851ec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8851f0: tbnz            w0, #4, #0x88527c
    // 0x8851f4: r0 = LoadStaticField(0xb54)
    //     0x8851f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8851f8: ldr             x0, [x0, #0x16a8]
    // 0x8851fc: cmp             w0, NULL
    // 0x885200: b.ne            #0x88520c
    // 0x885204: r0 = Null
    //     0x885204: mov             x0, NULL
    // 0x885208: b               #0x885234
    // 0x88520c: r17 = 327
    //     0x88520c: movz            x17, #0x147
    // 0x885210: ldr             w1, [x0, x17]
    // 0x885214: DecompressPointer r1
    //     0x885214: add             x1, x1, HEAP, lsl #32
    // 0x885218: r0 = LoadClassIdInstr(r1)
    //     0x885218: ldur            x0, [x1, #-1]
    //     0x88521c: ubfx            x0, x0, #0xc, #0x14
    // 0x885220: r2 = "hellMode"
    //     0x885220: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885224: ldr             x2, [x2, #0xd40]
    // 0x885228: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885228: sub             lr, x0, #0xb4
    //     0x88522c: ldr             lr, [x21, lr, lsl #3]
    //     0x885230: blr             lr
    // 0x885234: r1 = 59
    //     0x885234: movz            x1, #0x3b
    // 0x885238: branchIfSmi(r0, 0x885244)
    //     0x885238: tbz             w0, #0, #0x885244
    // 0x88523c: r1 = LoadClassIdInstr(r0)
    //     0x88523c: ldur            x1, [x0, #-1]
    //     0x885240: ubfx            x1, x1, #0xc, #0x14
    // 0x885244: r16 = true
    //     0x885244: add             x16, NULL, #0x20  ; true
    // 0x885248: stp             x16, x0, [SP]
    // 0x88524c: mov             x0, x1
    // 0x885250: mov             lr, x0
    // 0x885254: ldr             lr, [x21, lr, lsl #3]
    // 0x885258: blr             lr
    // 0x88525c: tst             x0, #0x10
    // 0x885260: cset            x1, ne
    // 0x885264: sub             x1, x1, #1
    // 0x885268: r16 = -30
    //     0x885268: movn            x16, #0x1d
    // 0x88526c: and             x1, x1, x16
    // 0x885270: add             x1, x1, #0x3c
    // 0x885274: r0 = LoadInt32Instr(r1)
    //     0x885274: sbfx            x0, x1, #1, #0x1f
    // 0x885278: b               #0x88db2c
    // 0x88527c: r16 = "shoumaHellModeCountdown"
    //     0x88527c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c48] "shoumaHellModeCountdown"
    //     0x885280: ldr             x16, [x16, #0xc48]
    // 0x885284: ldur            lr, [fp, #-0x20]
    // 0x885288: stp             lr, x16, [SP]
    // 0x88528c: r0 = ==()
    //     0x88528c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885290: tbnz            w0, #4, #0x88531c
    // 0x885294: r0 = LoadStaticField(0xb54)
    //     0x885294: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885298: ldr             x0, [x0, #0x16a8]
    // 0x88529c: cmp             w0, NULL
    // 0x8852a0: b.ne            #0x8852ac
    // 0x8852a4: r0 = Null
    //     0x8852a4: mov             x0, NULL
    // 0x8852a8: b               #0x8852d4
    // 0x8852ac: r17 = 327
    //     0x8852ac: movz            x17, #0x147
    // 0x8852b0: ldr             w1, [x0, x17]
    // 0x8852b4: DecompressPointer r1
    //     0x8852b4: add             x1, x1, HEAP, lsl #32
    // 0x8852b8: r0 = LoadClassIdInstr(r1)
    //     0x8852b8: ldur            x0, [x1, #-1]
    //     0x8852bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8852c0: r2 = "hellMode"
    //     0x8852c0: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x8852c4: ldr             x2, [x2, #0xd40]
    // 0x8852c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8852c8: sub             lr, x0, #0xb4
    //     0x8852cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8852d0: blr             lr
    // 0x8852d4: r1 = 59
    //     0x8852d4: movz            x1, #0x3b
    // 0x8852d8: branchIfSmi(r0, 0x8852e4)
    //     0x8852d8: tbz             w0, #0, #0x8852e4
    // 0x8852dc: r1 = LoadClassIdInstr(r0)
    //     0x8852dc: ldur            x1, [x0, #-1]
    //     0x8852e0: ubfx            x1, x1, #0xc, #0x14
    // 0x8852e4: r16 = true
    //     0x8852e4: add             x16, NULL, #0x20  ; true
    // 0x8852e8: stp             x16, x0, [SP]
    // 0x8852ec: mov             x0, x1
    // 0x8852f0: mov             lr, x0
    // 0x8852f4: ldr             lr, [x21, lr, lsl #3]
    // 0x8852f8: blr             lr
    // 0x8852fc: tst             x0, #0x10
    // 0x885300: cset            x1, ne
    // 0x885304: sub             x1, x1, #1
    // 0x885308: r16 = -1800
    //     0x885308: movn            x16, #0x707
    // 0x88530c: and             x1, x1, x16
    // 0x885310: add             x1, x1, #0xe10
    // 0x885314: r0 = LoadInt32Instr(r1)
    //     0x885314: sbfx            x0, x1, #1, #0x1f
    // 0x885318: b               #0x88db2c
    // 0x88531c: r16 = "makiHellMode"
    //     0x88531c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c50] "makiHellMode"
    //     0x885320: ldr             x16, [x16, #0xc50]
    // 0x885324: ldur            lr, [fp, #-0x20]
    // 0x885328: stp             lr, x16, [SP]
    // 0x88532c: r0 = ==()
    //     0x88532c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885330: tbnz            w0, #4, #0x8853c0
    // 0x885334: r0 = LoadStaticField(0xb54)
    //     0x885334: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885338: ldr             x0, [x0, #0x16a8]
    // 0x88533c: cmp             w0, NULL
    // 0x885340: b.ne            #0x88534c
    // 0x885344: r0 = Null
    //     0x885344: mov             x0, NULL
    // 0x885348: b               #0x885374
    // 0x88534c: r17 = 327
    //     0x88534c: movz            x17, #0x147
    // 0x885350: ldr             w1, [x0, x17]
    // 0x885354: DecompressPointer r1
    //     0x885354: add             x1, x1, HEAP, lsl #32
    // 0x885358: r0 = LoadClassIdInstr(r1)
    //     0x885358: ldur            x0, [x1, #-1]
    //     0x88535c: ubfx            x0, x0, #0xc, #0x14
    // 0x885360: r2 = "hellMode"
    //     0x885360: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885364: ldr             x2, [x2, #0xd40]
    // 0x885368: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885368: sub             lr, x0, #0xb4
    //     0x88536c: ldr             lr, [x21, lr, lsl #3]
    //     0x885370: blr             lr
    // 0x885374: r1 = 59
    //     0x885374: movz            x1, #0x3b
    // 0x885378: branchIfSmi(r0, 0x885384)
    //     0x885378: tbz             w0, #0, #0x885384
    // 0x88537c: r1 = LoadClassIdInstr(r0)
    //     0x88537c: ldur            x1, [x0, #-1]
    //     0x885380: ubfx            x1, x1, #0xc, #0x14
    // 0x885384: r16 = true
    //     0x885384: add             x16, NULL, #0x20  ; true
    // 0x885388: stp             x16, x0, [SP]
    // 0x88538c: mov             x0, x1
    // 0x885390: mov             lr, x0
    // 0x885394: ldr             lr, [x21, lr, lsl #3]
    // 0x885398: blr             lr
    // 0x88539c: tst             x0, #0x10
    // 0x8853a0: cset            x1, ne
    // 0x8853a4: sub             x1, x1, #1
    // 0x8853a8: r16 = 197000
    //     0x8853a8: movz            x16, #0x188
    //     0x8853ac: movk            x16, #0x3, lsl #16
    // 0x8853b0: and             x1, x1, x16
    // 0x8853b4: add             x1, x1, #0xbb8
    // 0x8853b8: r0 = LoadInt32Instr(r1)
    //     0x8853b8: sbfx            x0, x1, #1, #0x1f
    // 0x8853bc: b               #0x88db2c
    // 0x8853c0: r16 = "makiHellMode2"
    //     0x8853c0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c58] "makiHellMode2"
    //     0x8853c4: ldr             x16, [x16, #0xc58]
    // 0x8853c8: ldur            lr, [fp, #-0x20]
    // 0x8853cc: stp             lr, x16, [SP]
    // 0x8853d0: r0 = ==()
    //     0x8853d0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8853d4: tbnz            w0, #4, #0x885468
    // 0x8853d8: r0 = LoadStaticField(0xb54)
    //     0x8853d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8853dc: ldr             x0, [x0, #0x16a8]
    // 0x8853e0: cmp             w0, NULL
    // 0x8853e4: b.ne            #0x8853f0
    // 0x8853e8: r0 = Null
    //     0x8853e8: mov             x0, NULL
    // 0x8853ec: b               #0x885418
    // 0x8853f0: r17 = 327
    //     0x8853f0: movz            x17, #0x147
    // 0x8853f4: ldr             w1, [x0, x17]
    // 0x8853f8: DecompressPointer r1
    //     0x8853f8: add             x1, x1, HEAP, lsl #32
    // 0x8853fc: r0 = LoadClassIdInstr(r1)
    //     0x8853fc: ldur            x0, [x1, #-1]
    //     0x885400: ubfx            x0, x0, #0xc, #0x14
    // 0x885404: r2 = "hellMode"
    //     0x885404: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885408: ldr             x2, [x2, #0xd40]
    // 0x88540c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88540c: sub             lr, x0, #0xb4
    //     0x885410: ldr             lr, [x21, lr, lsl #3]
    //     0x885414: blr             lr
    // 0x885418: r1 = 59
    //     0x885418: movz            x1, #0x3b
    // 0x88541c: branchIfSmi(r0, 0x885428)
    //     0x88541c: tbz             w0, #0, #0x885428
    // 0x885420: r1 = LoadClassIdInstr(r0)
    //     0x885420: ldur            x1, [x0, #-1]
    //     0x885424: ubfx            x1, x1, #0xc, #0x14
    // 0x885428: r16 = true
    //     0x885428: add             x16, NULL, #0x20  ; true
    // 0x88542c: stp             x16, x0, [SP]
    // 0x885430: mov             x0, x1
    // 0x885434: mov             lr, x0
    // 0x885438: ldr             lr, [x21, lr, lsl #3]
    // 0x88543c: blr             lr
    // 0x885440: tst             x0, #0x10
    // 0x885444: cset            x1, ne
    // 0x885448: sub             x1, x1, #1
    // 0x88544c: r16 = 1980000
    //     0x88544c: movz            x16, #0x3660
    //     0x885450: movk            x16, #0x1e, lsl #16
    // 0x885454: and             x1, x1, x16
    // 0x885458: r17 = 20000
    //     0x885458: movz            x17, #0x4e20
    // 0x88545c: add             x1, x1, x17
    // 0x885460: r0 = LoadInt32Instr(r1)
    //     0x885460: sbfx            x0, x1, #1, #0x1f
    // 0x885464: b               #0x88db2c
    // 0x885468: r16 = "makiHellMode3"
    //     0x885468: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c60] "makiHellMode3"
    //     0x88546c: ldr             x16, [x16, #0xc60]
    // 0x885470: ldur            lr, [fp, #-0x20]
    // 0x885474: stp             lr, x16, [SP]
    // 0x885478: r0 = ==()
    //     0x885478: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88547c: tbnz            w0, #4, #0x885510
    // 0x885480: r0 = LoadStaticField(0xb54)
    //     0x885480: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885484: ldr             x0, [x0, #0x16a8]
    // 0x885488: cmp             w0, NULL
    // 0x88548c: b.ne            #0x885498
    // 0x885490: r0 = Null
    //     0x885490: mov             x0, NULL
    // 0x885494: b               #0x8854c0
    // 0x885498: r17 = 327
    //     0x885498: movz            x17, #0x147
    // 0x88549c: ldr             w1, [x0, x17]
    // 0x8854a0: DecompressPointer r1
    //     0x8854a0: add             x1, x1, HEAP, lsl #32
    // 0x8854a4: r0 = LoadClassIdInstr(r1)
    //     0x8854a4: ldur            x0, [x1, #-1]
    //     0x8854a8: ubfx            x0, x0, #0xc, #0x14
    // 0x8854ac: r2 = "hellMode"
    //     0x8854ac: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x8854b0: ldr             x2, [x2, #0xd40]
    // 0x8854b4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8854b4: sub             lr, x0, #0xb4
    //     0x8854b8: ldr             lr, [x21, lr, lsl #3]
    //     0x8854bc: blr             lr
    // 0x8854c0: r1 = 59
    //     0x8854c0: movz            x1, #0x3b
    // 0x8854c4: branchIfSmi(r0, 0x8854d0)
    //     0x8854c4: tbz             w0, #0, #0x8854d0
    // 0x8854c8: r1 = LoadClassIdInstr(r0)
    //     0x8854c8: ldur            x1, [x0, #-1]
    //     0x8854cc: ubfx            x1, x1, #0xc, #0x14
    // 0x8854d0: r16 = true
    //     0x8854d0: add             x16, NULL, #0x20  ; true
    // 0x8854d4: stp             x16, x0, [SP]
    // 0x8854d8: mov             x0, x1
    // 0x8854dc: mov             lr, x0
    // 0x8854e0: ldr             lr, [x21, lr, lsl #3]
    // 0x8854e4: blr             lr
    // 0x8854e8: tst             x0, #0x10
    // 0x8854ec: cset            x1, ne
    // 0x8854f0: sub             x1, x1, #1
    // 0x8854f4: r16 = 1783000
    //     0x8854f4: movz            x16, #0x34d8
    //     0x8854f8: movk            x16, #0x1b, lsl #16
    // 0x8854fc: and             x1, x1, x16
    // 0x885500: r17 = 17000
    //     0x885500: movz            x17, #0x4268
    // 0x885504: add             x1, x1, x17
    // 0x885508: r0 = LoadInt32Instr(r1)
    //     0x885508: sbfx            x0, x1, #1, #0x1f
    // 0x88550c: b               #0x88db2c
    // 0x885510: r16 = "nbaDojoRush"
    //     0x885510: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c68] "nbaDojoRush"
    //     0x885514: ldr             x16, [x16, #0xc68]
    // 0x885518: ldur            lr, [fp, #-0x20]
    // 0x88551c: stp             lr, x16, [SP]
    // 0x885520: r0 = ==()
    //     0x885520: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885524: tbnz            w0, #4, #0x8855b0
    // 0x885528: r0 = LoadStaticField(0xb54)
    //     0x885528: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88552c: ldr             x0, [x0, #0x16a8]
    // 0x885530: cmp             w0, NULL
    // 0x885534: b.ne            #0x885540
    // 0x885538: r0 = Null
    //     0x885538: mov             x0, NULL
    // 0x88553c: b               #0x885568
    // 0x885540: r17 = 327
    //     0x885540: movz            x17, #0x147
    // 0x885544: ldr             w1, [x0, x17]
    // 0x885548: DecompressPointer r1
    //     0x885548: add             x1, x1, HEAP, lsl #32
    // 0x88554c: r0 = LoadClassIdInstr(r1)
    //     0x88554c: ldur            x0, [x1, #-1]
    //     0x885550: ubfx            x0, x0, #0xc, #0x14
    // 0x885554: r2 = "hellMode"
    //     0x885554: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885558: ldr             x2, [x2, #0xd40]
    // 0x88555c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88555c: sub             lr, x0, #0xb4
    //     0x885560: ldr             lr, [x21, lr, lsl #3]
    //     0x885564: blr             lr
    // 0x885568: r1 = 59
    //     0x885568: movz            x1, #0x3b
    // 0x88556c: branchIfSmi(r0, 0x885578)
    //     0x88556c: tbz             w0, #0, #0x885578
    // 0x885570: r1 = LoadClassIdInstr(r0)
    //     0x885570: ldur            x1, [x0, #-1]
    //     0x885574: ubfx            x1, x1, #0xc, #0x14
    // 0x885578: r16 = true
    //     0x885578: add             x16, NULL, #0x20  ; true
    // 0x88557c: stp             x16, x0, [SP]
    // 0x885580: mov             x0, x1
    // 0x885584: mov             lr, x0
    // 0x885588: ldr             lr, [x21, lr, lsl #3]
    // 0x88558c: blr             lr
    // 0x885590: tst             x0, #0x10
    // 0x885594: cset            x1, ne
    // 0x885598: sub             x1, x1, #1
    // 0x88559c: r16 = 20
    //     0x88559c: movz            x16, #0x14
    // 0x8855a0: and             x1, x1, x16
    // 0x8855a4: add             x1, x1, #0x14
    // 0x8855a8: r0 = LoadInt32Instr(r1)
    //     0x8855a8: sbfx            x0, x1, #1, #0x1f
    // 0x8855ac: b               #0x88db2c
    // 0x8855b0: r16 = "distressFlickGet"
    //     0x8855b0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c70] "distressFlickGet"
    //     0x8855b4: ldr             x16, [x16, #0xc70]
    // 0x8855b8: ldur            lr, [fp, #-0x20]
    // 0x8855bc: stp             lr, x16, [SP]
    // 0x8855c0: r0 = ==()
    //     0x8855c0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8855c4: tbnz            w0, #4, #0x885650
    // 0x8855c8: r0 = LoadStaticField(0xb54)
    //     0x8855c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8855cc: ldr             x0, [x0, #0x16a8]
    // 0x8855d0: cmp             w0, NULL
    // 0x8855d4: b.ne            #0x8855e0
    // 0x8855d8: r0 = Null
    //     0x8855d8: mov             x0, NULL
    // 0x8855dc: b               #0x885608
    // 0x8855e0: r17 = 327
    //     0x8855e0: movz            x17, #0x147
    // 0x8855e4: ldr             w1, [x0, x17]
    // 0x8855e8: DecompressPointer r1
    //     0x8855e8: add             x1, x1, HEAP, lsl #32
    // 0x8855ec: r0 = LoadClassIdInstr(r1)
    //     0x8855ec: ldur            x0, [x1, #-1]
    //     0x8855f0: ubfx            x0, x0, #0xc, #0x14
    // 0x8855f4: r2 = "hellMode"
    //     0x8855f4: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x8855f8: ldr             x2, [x2, #0xd40]
    // 0x8855fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8855fc: sub             lr, x0, #0xb4
    //     0x885600: ldr             lr, [x21, lr, lsl #3]
    //     0x885604: blr             lr
    // 0x885608: r1 = 59
    //     0x885608: movz            x1, #0x3b
    // 0x88560c: branchIfSmi(r0, 0x885618)
    //     0x88560c: tbz             w0, #0, #0x885618
    // 0x885610: r1 = LoadClassIdInstr(r0)
    //     0x885610: ldur            x1, [x0, #-1]
    //     0x885614: ubfx            x1, x1, #0xc, #0x14
    // 0x885618: r16 = true
    //     0x885618: add             x16, NULL, #0x20  ; true
    // 0x88561c: stp             x16, x0, [SP]
    // 0x885620: mov             x0, x1
    // 0x885624: mov             lr, x0
    // 0x885628: ldr             lr, [x21, lr, lsl #3]
    // 0x88562c: blr             lr
    // 0x885630: tst             x0, #0x10
    // 0x885634: cset            x1, ne
    // 0x885638: sub             x1, x1, #1
    // 0x88563c: r16 = 10
    //     0x88563c: movz            x16, #0xa
    // 0x885640: and             x1, x1, x16
    // 0x885644: add             x1, x1, #0xa
    // 0x885648: r0 = LoadInt32Instr(r1)
    //     0x885648: sbfx            x0, x1, #1, #0x1f
    // 0x88564c: b               #0x88db2c
    // 0x885650: r16 = "dojoRushPrice"
    //     0x885650: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c78] "dojoRushPrice"
    //     0x885654: ldr             x16, [x16, #0xc78]
    // 0x885658: ldur            lr, [fp, #-0x20]
    // 0x88565c: stp             lr, x16, [SP]
    // 0x885660: r0 = ==()
    //     0x885660: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885664: tbnz            w0, #4, #0x8856f0
    // 0x885668: r0 = LoadStaticField(0xb54)
    //     0x885668: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88566c: ldr             x0, [x0, #0x16a8]
    // 0x885670: cmp             w0, NULL
    // 0x885674: b.ne            #0x885680
    // 0x885678: r0 = Null
    //     0x885678: mov             x0, NULL
    // 0x88567c: b               #0x8856a8
    // 0x885680: r17 = 327
    //     0x885680: movz            x17, #0x147
    // 0x885684: ldr             w1, [x0, x17]
    // 0x885688: DecompressPointer r1
    //     0x885688: add             x1, x1, HEAP, lsl #32
    // 0x88568c: r0 = LoadClassIdInstr(r1)
    //     0x88568c: ldur            x0, [x1, #-1]
    //     0x885690: ubfx            x0, x0, #0xc, #0x14
    // 0x885694: r2 = "hellMode"
    //     0x885694: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885698: ldr             x2, [x2, #0xd40]
    // 0x88569c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88569c: sub             lr, x0, #0xb4
    //     0x8856a0: ldr             lr, [x21, lr, lsl #3]
    //     0x8856a4: blr             lr
    // 0x8856a8: r1 = 59
    //     0x8856a8: movz            x1, #0x3b
    // 0x8856ac: branchIfSmi(r0, 0x8856b8)
    //     0x8856ac: tbz             w0, #0, #0x8856b8
    // 0x8856b0: r1 = LoadClassIdInstr(r0)
    //     0x8856b0: ldur            x1, [x0, #-1]
    //     0x8856b4: ubfx            x1, x1, #0xc, #0x14
    // 0x8856b8: r16 = true
    //     0x8856b8: add             x16, NULL, #0x20  ; true
    // 0x8856bc: stp             x16, x0, [SP]
    // 0x8856c0: mov             x0, x1
    // 0x8856c4: mov             lr, x0
    // 0x8856c8: ldr             lr, [x21, lr, lsl #3]
    // 0x8856cc: blr             lr
    // 0x8856d0: tst             x0, #0x10
    // 0x8856d4: cset            x1, ne
    // 0x8856d8: sub             x1, x1, #1
    // 0x8856dc: r16 = 3000
    //     0x8856dc: movz            x16, #0xbb8
    // 0x8856e0: and             x1, x1, x16
    // 0x8856e4: add             x1, x1, #0x3e8
    // 0x8856e8: r0 = LoadInt32Instr(r1)
    //     0x8856e8: sbfx            x0, x1, #1, #0x1f
    // 0x8856ec: b               #0x88db2c
    // 0x8856f0: r16 = "legendHellMode"
    //     0x8856f0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12c80] "legendHellMode"
    //     0x8856f4: ldr             x16, [x16, #0xc80]
    // 0x8856f8: ldur            lr, [fp, #-0x20]
    // 0x8856fc: stp             lr, x16, [SP]
    // 0x885700: r0 = ==()
    //     0x885700: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885704: tbnz            w0, #4, #0x885d20
    // 0x885708: r0 = LoadStaticField(0xb54)
    //     0x885708: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88570c: ldr             x0, [x0, #0x16a8]
    // 0x885710: cmp             w0, NULL
    // 0x885714: b.ne            #0x885720
    // 0x885718: r0 = Null
    //     0x885718: mov             x0, NULL
    // 0x88571c: b               #0x885748
    // 0x885720: r17 = 347
    //     0x885720: movz            x17, #0x15b
    // 0x885724: ldr             w1, [x0, x17]
    // 0x885728: DecompressPointer r1
    //     0x885728: add             x1, x1, HEAP, lsl #32
    // 0x88572c: r0 = LoadClassIdInstr(r1)
    //     0x88572c: ldur            x0, [x1, #-1]
    //     0x885730: ubfx            x0, x0, #0xc, #0x14
    // 0x885734: r2 = "winLcw"
    //     0x885734: add             x2, PP, #0x12, lsl #12  ; [pp+0x12c88] "winLcw"
    //     0x885738: ldr             x2, [x2, #0xc88]
    // 0x88573c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88573c: sub             lr, x0, #0xb4
    //     0x885740: ldr             lr, [x21, lr, lsl #3]
    //     0x885744: blr             lr
    // 0x885748: cmp             w0, NULL
    // 0x88574c: b.ne            #0x885758
    // 0x885750: r3 = 0
    //     0x885750: movz            x3, #0
    // 0x885754: b               #0x88575c
    // 0x885758: mov             x3, x0
    // 0x88575c: mov             x0, x3
    // 0x885760: stur            x3, [fp, #-8]
    // 0x885764: r2 = Null
    //     0x885764: mov             x2, NULL
    // 0x885768: r1 = Null
    //     0x885768: mov             x1, NULL
    // 0x88576c: branchIfSmi(r0, 0x885794)
    //     0x88576c: tbz             w0, #0, #0x885794
    // 0x885770: r4 = LoadClassIdInstr(r0)
    //     0x885770: ldur            x4, [x0, #-1]
    //     0x885774: ubfx            x4, x4, #0xc, #0x14
    // 0x885778: sub             x4, x4, #0x3b
    // 0x88577c: cmp             x4, #1
    // 0x885780: b.ls            #0x885794
    // 0x885784: r8 = int
    //     0x885784: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x885788: r3 = Null
    //     0x885788: add             x3, PP, #0x12, lsl #12  ; [pp+0x12c90] Null
    //     0x88578c: ldr             x3, [x3, #0xc90]
    // 0x885790: r0 = int()
    //     0x885790: bl              #0x1524294  ; IsType_int_Stub
    // 0x885794: r0 = LoadStaticField(0xb54)
    //     0x885794: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885798: ldr             x0, [x0, #0x16a8]
    // 0x88579c: cmp             w0, NULL
    // 0x8857a0: b.ne            #0x8857ac
    // 0x8857a4: r0 = Null
    //     0x8857a4: mov             x0, NULL
    // 0x8857a8: b               #0x8857d4
    // 0x8857ac: r17 = 347
    //     0x8857ac: movz            x17, #0x15b
    // 0x8857b0: ldr             w1, [x0, x17]
    // 0x8857b4: DecompressPointer r1
    //     0x8857b4: add             x1, x1, HEAP, lsl #32
    // 0x8857b8: r0 = LoadClassIdInstr(r1)
    //     0x8857b8: ldur            x0, [x1, #-1]
    //     0x8857bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8857c0: r2 = "winLd"
    //     0x8857c0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12ca0] "winLd"
    //     0x8857c4: ldr             x2, [x2, #0xca0]
    // 0x8857c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8857c8: sub             lr, x0, #0xb4
    //     0x8857cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8857d0: blr             lr
    // 0x8857d4: cmp             w0, NULL
    // 0x8857d8: b.ne            #0x8857e4
    // 0x8857dc: r3 = 0
    //     0x8857dc: movz            x3, #0
    // 0x8857e0: b               #0x8857e8
    // 0x8857e4: mov             x3, x0
    // 0x8857e8: mov             x0, x3
    // 0x8857ec: stur            x3, [fp, #-0x18]
    // 0x8857f0: r2 = Null
    //     0x8857f0: mov             x2, NULL
    // 0x8857f4: r1 = Null
    //     0x8857f4: mov             x1, NULL
    // 0x8857f8: branchIfSmi(r0, 0x885820)
    //     0x8857f8: tbz             w0, #0, #0x885820
    // 0x8857fc: r4 = LoadClassIdInstr(r0)
    //     0x8857fc: ldur            x4, [x0, #-1]
    //     0x885800: ubfx            x4, x4, #0xc, #0x14
    // 0x885804: sub             x4, x4, #0x3b
    // 0x885808: cmp             x4, #1
    // 0x88580c: b.ls            #0x885820
    // 0x885810: r8 = int
    //     0x885810: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x885814: r3 = Null
    //     0x885814: add             x3, PP, #0x12, lsl #12  ; [pp+0x12ca8] Null
    //     0x885818: ldr             x3, [x3, #0xca8]
    // 0x88581c: r0 = int()
    //     0x88581c: bl              #0x1524294  ; IsType_int_Stub
    // 0x885820: r0 = LoadStaticField(0xb54)
    //     0x885820: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885824: ldr             x0, [x0, #0x16a8]
    // 0x885828: cmp             w0, NULL
    // 0x88582c: b.ne            #0x885838
    // 0x885830: r0 = Null
    //     0x885830: mov             x0, NULL
    // 0x885834: b               #0x885860
    // 0x885838: r17 = 347
    //     0x885838: movz            x17, #0x15b
    // 0x88583c: ldr             w1, [x0, x17]
    // 0x885840: DecompressPointer r1
    //     0x885840: add             x1, x1, HEAP, lsl #32
    // 0x885844: r0 = LoadClassIdInstr(r1)
    //     0x885844: ldur            x0, [x1, #-1]
    //     0x885848: ubfx            x0, x0, #0xc, #0x14
    // 0x88584c: r2 = "winPg"
    //     0x88584c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12cb8] "winPg"
    //     0x885850: ldr             x2, [x2, #0xcb8]
    // 0x885854: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885854: sub             lr, x0, #0xb4
    //     0x885858: ldr             lr, [x21, lr, lsl #3]
    //     0x88585c: blr             lr
    // 0x885860: cmp             w0, NULL
    // 0x885864: b.ne            #0x885870
    // 0x885868: r3 = 0
    //     0x885868: movz            x3, #0
    // 0x88586c: b               #0x885874
    // 0x885870: mov             x3, x0
    // 0x885874: mov             x0, x3
    // 0x885878: stur            x3, [fp, #-0x30]
    // 0x88587c: r2 = Null
    //     0x88587c: mov             x2, NULL
    // 0x885880: r1 = Null
    //     0x885880: mov             x1, NULL
    // 0x885884: branchIfSmi(r0, 0x8858ac)
    //     0x885884: tbz             w0, #0, #0x8858ac
    // 0x885888: r4 = LoadClassIdInstr(r0)
    //     0x885888: ldur            x4, [x0, #-1]
    //     0x88588c: ubfx            x4, x4, #0xc, #0x14
    // 0x885890: sub             x4, x4, #0x3b
    // 0x885894: cmp             x4, #1
    // 0x885898: b.ls            #0x8858ac
    // 0x88589c: r8 = int
    //     0x88589c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8858a0: r3 = Null
    //     0x8858a0: add             x3, PP, #0x12, lsl #12  ; [pp+0x12cc0] Null
    //     0x8858a4: ldr             x3, [x3, #0xcc0]
    // 0x8858a8: r0 = int()
    //     0x8858a8: bl              #0x1524294  ; IsType_int_Stub
    // 0x8858ac: r0 = LoadStaticField(0xb54)
    //     0x8858ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8858b0: ldr             x0, [x0, #0x16a8]
    // 0x8858b4: cmp             w0, NULL
    // 0x8858b8: b.ne            #0x8858c4
    // 0x8858bc: r0 = Null
    //     0x8858bc: mov             x0, NULL
    // 0x8858c0: b               #0x8858ec
    // 0x8858c4: r17 = 347
    //     0x8858c4: movz            x17, #0x15b
    // 0x8858c8: ldr             w1, [x0, x17]
    // 0x8858cc: DecompressPointer r1
    //     0x8858cc: add             x1, x1, HEAP, lsl #32
    // 0x8858d0: r0 = LoadClassIdInstr(r1)
    //     0x8858d0: ldur            x0, [x1, #-1]
    //     0x8858d4: ubfx            x0, x0, #0xc, #0x14
    // 0x8858d8: r2 = "winTh"
    //     0x8858d8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12cd0] "winTh"
    //     0x8858dc: ldr             x2, [x2, #0xcd0]
    // 0x8858e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8858e0: sub             lr, x0, #0xb4
    //     0x8858e4: ldr             lr, [x21, lr, lsl #3]
    //     0x8858e8: blr             lr
    // 0x8858ec: cmp             w0, NULL
    // 0x8858f0: b.ne            #0x8858fc
    // 0x8858f4: r3 = 0
    //     0x8858f4: movz            x3, #0
    // 0x8858f8: b               #0x885900
    // 0x8858fc: mov             x3, x0
    // 0x885900: mov             x0, x3
    // 0x885904: stur            x3, [fp, #-0x38]
    // 0x885908: r2 = Null
    //     0x885908: mov             x2, NULL
    // 0x88590c: r1 = Null
    //     0x88590c: mov             x1, NULL
    // 0x885910: branchIfSmi(r0, 0x885938)
    //     0x885910: tbz             w0, #0, #0x885938
    // 0x885914: r4 = LoadClassIdInstr(r0)
    //     0x885914: ldur            x4, [x0, #-1]
    //     0x885918: ubfx            x4, x4, #0xc, #0x14
    // 0x88591c: sub             x4, x4, #0x3b
    // 0x885920: cmp             x4, #1
    // 0x885924: b.ls            #0x885938
    // 0x885928: r8 = int
    //     0x885928: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88592c: r3 = Null
    //     0x88592c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12cd8] Null
    //     0x885930: ldr             x3, [x3, #0xcd8]
    // 0x885934: r0 = int()
    //     0x885934: bl              #0x1524294  ; IsType_int_Stub
    // 0x885938: r0 = LoadStaticField(0xb54)
    //     0x885938: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88593c: ldr             x0, [x0, #0x16a8]
    // 0x885940: cmp             w0, NULL
    // 0x885944: b.ne            #0x885950
    // 0x885948: r0 = Null
    //     0x885948: mov             x0, NULL
    // 0x88594c: b               #0x885978
    // 0x885950: r17 = 327
    //     0x885950: movz            x17, #0x147
    // 0x885954: ldr             w1, [x0, x17]
    // 0x885958: DecompressPointer r1
    //     0x885958: add             x1, x1, HEAP, lsl #32
    // 0x88595c: r0 = LoadClassIdInstr(r1)
    //     0x88595c: ldur            x0, [x1, #-1]
    //     0x885960: ubfx            x0, x0, #0xc, #0x14
    // 0x885964: r2 = "hellMode"
    //     0x885964: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x885968: ldr             x2, [x2, #0xd40]
    // 0x88596c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88596c: sub             lr, x0, #0xb4
    //     0x885970: ldr             lr, [x21, lr, lsl #3]
    //     0x885974: blr             lr
    // 0x885978: r1 = 59
    //     0x885978: movz            x1, #0x3b
    // 0x88597c: branchIfSmi(r0, 0x885988)
    //     0x88597c: tbz             w0, #0, #0x885988
    // 0x885980: r1 = LoadClassIdInstr(r0)
    //     0x885980: ldur            x1, [x0, #-1]
    //     0x885984: ubfx            x1, x1, #0xc, #0x14
    // 0x885988: r16 = true
    //     0x885988: add             x16, NULL, #0x20  ; true
    // 0x88598c: stp             x16, x0, [SP]
    // 0x885990: mov             x0, x1
    // 0x885994: mov             lr, x0
    // 0x885998: ldr             lr, [x21, lr, lsl #3]
    // 0x88599c: blr             lr
    // 0x8859a0: tst             x0, #0x10
    // 0x8859a4: cset            x3, ne
    // 0x8859a8: sub             x3, x3, #1
    // 0x8859ac: r16 = -40
    //     0x8859ac: movn            x16, #0x27
    // 0x8859b0: and             x3, x3, x16
    // 0x8859b4: add             x3, x3, #0x3c
    // 0x8859b8: stur            x3, [fp, #-0x40]
    // 0x8859bc: r0 = LoadStaticField(0xb54)
    //     0x8859bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8859c0: ldr             x0, [x0, #0x16a8]
    // 0x8859c4: cmp             w0, NULL
    // 0x8859c8: b.ne            #0x8859d4
    // 0x8859cc: r0 = Null
    //     0x8859cc: mov             x0, NULL
    // 0x8859d0: b               #0x8859fc
    // 0x8859d4: r17 = 327
    //     0x8859d4: movz            x17, #0x147
    // 0x8859d8: ldr             w1, [x0, x17]
    // 0x8859dc: DecompressPointer r1
    //     0x8859dc: add             x1, x1, HEAP, lsl #32
    // 0x8859e0: r0 = LoadClassIdInstr(r1)
    //     0x8859e0: ldur            x0, [x1, #-1]
    //     0x8859e4: ubfx            x0, x0, #0xc, #0x14
    // 0x8859e8: r2 = "getLegendCard"
    //     0x8859e8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12ce8] "getLegendCard"
    //     0x8859ec: ldr             x2, [x2, #0xce8]
    // 0x8859f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8859f0: sub             lr, x0, #0xb4
    //     0x8859f4: ldr             lr, [x21, lr, lsl #3]
    //     0x8859f8: blr             lr
    // 0x8859fc: r1 = 59
    //     0x8859fc: movz            x1, #0x3b
    // 0x885a00: branchIfSmi(r0, 0x885a0c)
    //     0x885a00: tbz             w0, #0, #0x885a0c
    // 0x885a04: r1 = LoadClassIdInstr(r0)
    //     0x885a04: ldur            x1, [x0, #-1]
    //     0x885a08: ubfx            x1, x1, #0xc, #0x14
    // 0x885a0c: r16 = true
    //     0x885a0c: add             x16, NULL, #0x20  ; true
    // 0x885a10: stp             x16, x0, [SP]
    // 0x885a14: mov             x0, x1
    // 0x885a18: mov             lr, x0
    // 0x885a1c: ldr             lr, [x21, lr, lsl #3]
    // 0x885a20: blr             lr
    // 0x885a24: tbz             w0, #4, #0x885d18
    // 0x885a28: r0 = LoadStaticField(0xb54)
    //     0x885a28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885a2c: ldr             x0, [x0, #0x16a8]
    // 0x885a30: cmp             w0, NULL
    // 0x885a34: b.ne            #0x885a40
    // 0x885a38: r0 = Null
    //     0x885a38: mov             x0, NULL
    // 0x885a3c: b               #0x885a68
    // 0x885a40: r17 = 351
    //     0x885a40: movz            x17, #0x15f
    // 0x885a44: ldr             w1, [x0, x17]
    // 0x885a48: DecompressPointer r1
    //     0x885a48: add             x1, x1, HEAP, lsl #32
    // 0x885a4c: r0 = LoadClassIdInstr(r1)
    //     0x885a4c: ldur            x0, [x1, #-1]
    //     0x885a50: ubfx            x0, x0, #0xc, #0x14
    // 0x885a54: r2 = "legendBattle"
    //     0x885a54: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x885a58: ldr             x2, [x2, #0xb68]
    // 0x885a5c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885a5c: sub             lr, x0, #0xb4
    //     0x885a60: ldr             lr, [x21, lr, lsl #3]
    //     0x885a64: blr             lr
    // 0x885a68: r1 = 59
    //     0x885a68: movz            x1, #0x3b
    // 0x885a6c: branchIfSmi(r0, 0x885a78)
    //     0x885a6c: tbz             w0, #0, #0x885a78
    // 0x885a70: r1 = LoadClassIdInstr(r0)
    //     0x885a70: ldur            x1, [x0, #-1]
    //     0x885a74: ubfx            x1, x1, #0xc, #0x14
    // 0x885a78: r16 = "leecw"
    //     0x885a78: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4a8] "leecw"
    //     0x885a7c: ldr             x16, [x16, #0x4a8]
    // 0x885a80: stp             x16, x0, [SP]
    // 0x885a84: mov             x0, x1
    // 0x885a88: mov             lr, x0
    // 0x885a8c: ldr             lr, [x21, lr, lsl #3]
    // 0x885a90: blr             lr
    // 0x885a94: tbnz            w0, #4, #0x885ae0
    // 0x885a98: ldur            x0, [fp, #-8]
    // 0x885a9c: ldur            x3, [fp, #-0x40]
    // 0x885aa0: r1 = LoadInt32Instr(r0)
    //     0x885aa0: sbfx            x1, x0, #1, #0x1f
    //     0x885aa4: tbz             w0, #0, #0x885aac
    //     0x885aa8: ldur            x1, [x0, #7]
    // 0x885aac: r0 = LoadInt32Instr(r3)
    //     0x885aac: sbfx            x0, x3, #1, #0x1f
    // 0x885ab0: cmp             x1, x0
    // 0x885ab4: r16 = true
    //     0x885ab4: add             x16, NULL, #0x20  ; true
    // 0x885ab8: r17 = false
    //     0x885ab8: add             x17, NULL, #0x30  ; false
    // 0x885abc: csel            x2, x16, x17, ge
    // 0x885ac0: tst             x2, #0x10
    // 0x885ac4: cset            x0, ne
    // 0x885ac8: sub             x0, x0, #1
    // 0x885acc: r16 = 200
    //     0x885acc: movz            x16, #0xc8
    // 0x885ad0: and             x0, x0, x16
    // 0x885ad4: r1 = LoadInt32Instr(r0)
    //     0x885ad4: sbfx            x1, x0, #1, #0x1f
    // 0x885ad8: mov             x0, x1
    // 0x885adc: b               #0x88db2c
    // 0x885ae0: ldur            x3, [fp, #-0x40]
    // 0x885ae4: r0 = LoadStaticField(0xb54)
    //     0x885ae4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885ae8: ldr             x0, [x0, #0x16a8]
    // 0x885aec: cmp             w0, NULL
    // 0x885af0: b.ne            #0x885afc
    // 0x885af4: r0 = Null
    //     0x885af4: mov             x0, NULL
    // 0x885af8: b               #0x885b24
    // 0x885afc: r17 = 351
    //     0x885afc: movz            x17, #0x15f
    // 0x885b00: ldr             w1, [x0, x17]
    // 0x885b04: DecompressPointer r1
    //     0x885b04: add             x1, x1, HEAP, lsl #32
    // 0x885b08: r0 = LoadClassIdInstr(r1)
    //     0x885b08: ldur            x0, [x1, #-1]
    //     0x885b0c: ubfx            x0, x0, #0xc, #0x14
    // 0x885b10: r2 = "legendBattle"
    //     0x885b10: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x885b14: ldr             x2, [x2, #0xb68]
    // 0x885b18: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885b18: sub             lr, x0, #0xb4
    //     0x885b1c: ldr             lr, [x21, lr, lsl #3]
    //     0x885b20: blr             lr
    // 0x885b24: r1 = 59
    //     0x885b24: movz            x1, #0x3b
    // 0x885b28: branchIfSmi(r0, 0x885b34)
    //     0x885b28: tbz             w0, #0, #0x885b34
    // 0x885b2c: r1 = LoadClassIdInstr(r0)
    //     0x885b2c: ldur            x1, [x0, #-1]
    //     0x885b30: ubfx            x1, x1, #0xc, #0x14
    // 0x885b34: r16 = "lind"
    //     0x885b34: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4b0] "lind"
    //     0x885b38: ldr             x16, [x16, #0x4b0]
    // 0x885b3c: stp             x16, x0, [SP]
    // 0x885b40: mov             x0, x1
    // 0x885b44: mov             lr, x0
    // 0x885b48: ldr             lr, [x21, lr, lsl #3]
    // 0x885b4c: blr             lr
    // 0x885b50: tbnz            w0, #4, #0x885b9c
    // 0x885b54: ldur            x0, [fp, #-0x18]
    // 0x885b58: ldur            x3, [fp, #-0x40]
    // 0x885b5c: r1 = LoadInt32Instr(r0)
    //     0x885b5c: sbfx            x1, x0, #1, #0x1f
    //     0x885b60: tbz             w0, #0, #0x885b68
    //     0x885b64: ldur            x1, [x0, #7]
    // 0x885b68: r0 = LoadInt32Instr(r3)
    //     0x885b68: sbfx            x0, x3, #1, #0x1f
    // 0x885b6c: cmp             x1, x0
    // 0x885b70: r16 = true
    //     0x885b70: add             x16, NULL, #0x20  ; true
    // 0x885b74: r17 = false
    //     0x885b74: add             x17, NULL, #0x30  ; false
    // 0x885b78: csel            x2, x16, x17, ge
    // 0x885b7c: tst             x2, #0x10
    // 0x885b80: cset            x0, ne
    // 0x885b84: sub             x0, x0, #1
    // 0x885b88: r16 = 200
    //     0x885b88: movz            x16, #0xc8
    // 0x885b8c: and             x0, x0, x16
    // 0x885b90: r1 = LoadInt32Instr(r0)
    //     0x885b90: sbfx            x1, x0, #1, #0x1f
    // 0x885b94: mov             x0, x1
    // 0x885b98: b               #0x88db2c
    // 0x885b9c: ldur            x3, [fp, #-0x40]
    // 0x885ba0: r0 = LoadStaticField(0xb54)
    //     0x885ba0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885ba4: ldr             x0, [x0, #0x16a8]
    // 0x885ba8: cmp             w0, NULL
    // 0x885bac: b.ne            #0x885bb8
    // 0x885bb0: r0 = Null
    //     0x885bb0: mov             x0, NULL
    // 0x885bb4: b               #0x885be0
    // 0x885bb8: r17 = 351
    //     0x885bb8: movz            x17, #0x15f
    // 0x885bbc: ldr             w1, [x0, x17]
    // 0x885bc0: DecompressPointer r1
    //     0x885bc0: add             x1, x1, HEAP, lsl #32
    // 0x885bc4: r0 = LoadClassIdInstr(r1)
    //     0x885bc4: ldur            x0, [x1, #-1]
    //     0x885bc8: ubfx            x0, x0, #0xc, #0x14
    // 0x885bcc: r2 = "legendBattle"
    //     0x885bcc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x885bd0: ldr             x2, [x2, #0xb68]
    // 0x885bd4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885bd4: sub             lr, x0, #0xb4
    //     0x885bd8: ldr             lr, [x21, lr, lsl #3]
    //     0x885bdc: blr             lr
    // 0x885be0: r1 = 59
    //     0x885be0: movz            x1, #0x3b
    // 0x885be4: branchIfSmi(r0, 0x885bf0)
    //     0x885be4: tbz             w0, #0, #0x885bf0
    // 0x885be8: r1 = LoadClassIdInstr(r0)
    //     0x885be8: ldur            x1, [x0, #-1]
    //     0x885bec: ubfx            x1, x1, #0xc, #0x14
    // 0x885bf0: r16 = "taufikh"
    //     0x885bf0: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4b8] "taufikh"
    //     0x885bf4: ldr             x16, [x16, #0x4b8]
    // 0x885bf8: stp             x16, x0, [SP]
    // 0x885bfc: mov             x0, x1
    // 0x885c00: mov             lr, x0
    // 0x885c04: ldr             lr, [x21, lr, lsl #3]
    // 0x885c08: blr             lr
    // 0x885c0c: tbnz            w0, #4, #0x885c58
    // 0x885c10: ldur            x0, [fp, #-0x38]
    // 0x885c14: ldur            x3, [fp, #-0x40]
    // 0x885c18: r1 = LoadInt32Instr(r0)
    //     0x885c18: sbfx            x1, x0, #1, #0x1f
    //     0x885c1c: tbz             w0, #0, #0x885c24
    //     0x885c20: ldur            x1, [x0, #7]
    // 0x885c24: r0 = LoadInt32Instr(r3)
    //     0x885c24: sbfx            x0, x3, #1, #0x1f
    // 0x885c28: cmp             x1, x0
    // 0x885c2c: r16 = true
    //     0x885c2c: add             x16, NULL, #0x20  ; true
    // 0x885c30: r17 = false
    //     0x885c30: add             x17, NULL, #0x30  ; false
    // 0x885c34: csel            x2, x16, x17, ge
    // 0x885c38: tst             x2, #0x10
    // 0x885c3c: cset            x0, ne
    // 0x885c40: sub             x0, x0, #1
    // 0x885c44: r16 = 200
    //     0x885c44: movz            x16, #0xc8
    // 0x885c48: and             x0, x0, x16
    // 0x885c4c: r1 = LoadInt32Instr(r0)
    //     0x885c4c: sbfx            x1, x0, #1, #0x1f
    // 0x885c50: mov             x0, x1
    // 0x885c54: b               #0x88db2c
    // 0x885c58: ldur            x3, [fp, #-0x40]
    // 0x885c5c: r0 = LoadStaticField(0xb54)
    //     0x885c5c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885c60: ldr             x0, [x0, #0x16a8]
    // 0x885c64: cmp             w0, NULL
    // 0x885c68: b.ne            #0x885c74
    // 0x885c6c: r0 = Null
    //     0x885c6c: mov             x0, NULL
    // 0x885c70: b               #0x885c9c
    // 0x885c74: r17 = 351
    //     0x885c74: movz            x17, #0x15f
    // 0x885c78: ldr             w1, [x0, x17]
    // 0x885c7c: DecompressPointer r1
    //     0x885c7c: add             x1, x1, HEAP, lsl #32
    // 0x885c80: r0 = LoadClassIdInstr(r1)
    //     0x885c80: ldur            x0, [x1, #-1]
    //     0x885c84: ubfx            x0, x0, #0xc, #0x14
    // 0x885c88: r2 = "legendBattle"
    //     0x885c88: add             x2, PP, #0x10, lsl #12  ; [pp+0x10b68] "legendBattle"
    //     0x885c8c: ldr             x2, [x2, #0xb68]
    // 0x885c90: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885c90: sub             lr, x0, #0xb4
    //     0x885c94: ldr             lr, [x21, lr, lsl #3]
    //     0x885c98: blr             lr
    // 0x885c9c: r1 = 59
    //     0x885c9c: movz            x1, #0x3b
    // 0x885ca0: branchIfSmi(r0, 0x885cac)
    //     0x885ca0: tbz             w0, #0, #0x885cac
    // 0x885ca4: r1 = LoadClassIdInstr(r0)
    //     0x885ca4: ldur            x1, [x0, #-1]
    //     0x885ca8: ubfx            x1, x1, #0xc, #0x14
    // 0x885cac: r16 = "peterg"
    //     0x885cac: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4c0] "peterg"
    //     0x885cb0: ldr             x16, [x16, #0x4c0]
    // 0x885cb4: stp             x16, x0, [SP]
    // 0x885cb8: mov             x0, x1
    // 0x885cbc: mov             lr, x0
    // 0x885cc0: ldr             lr, [x21, lr, lsl #3]
    // 0x885cc4: blr             lr
    // 0x885cc8: tbnz            w0, #4, #0x885d10
    // 0x885ccc: ldur            x1, [fp, #-0x30]
    // 0x885cd0: ldur            x0, [fp, #-0x40]
    // 0x885cd4: r2 = LoadInt32Instr(r1)
    //     0x885cd4: sbfx            x2, x1, #1, #0x1f
    //     0x885cd8: tbz             w1, #0, #0x885ce0
    //     0x885cdc: ldur            x2, [x1, #7]
    // 0x885ce0: r1 = LoadInt32Instr(r0)
    //     0x885ce0: sbfx            x1, x0, #1, #0x1f
    // 0x885ce4: cmp             x2, x1
    // 0x885ce8: r16 = true
    //     0x885ce8: add             x16, NULL, #0x20  ; true
    // 0x885cec: r17 = false
    //     0x885cec: add             x17, NULL, #0x30  ; false
    // 0x885cf0: csel            x0, x16, x17, ge
    // 0x885cf4: tst             x0, #0x10
    // 0x885cf8: cset            x1, ne
    // 0x885cfc: sub             x1, x1, #1
    // 0x885d00: r16 = 200
    //     0x885d00: movz            x16, #0xc8
    // 0x885d04: and             x1, x1, x16
    // 0x885d08: r0 = LoadInt32Instr(r1)
    //     0x885d08: sbfx            x0, x1, #1, #0x1f
    // 0x885d0c: b               #0x88db2c
    // 0x885d10: r0 = 0
    //     0x885d10: movz            x0, #0
    // 0x885d14: b               #0x88db2c
    // 0x885d18: r0 = 0
    //     0x885d18: movz            x0, #0
    // 0x885d1c: b               #0x88db2c
    // 0x885d20: r16 = "kankiPetitionCount"
    //     0x885d20: add             x16, PP, #0x12, lsl #12  ; [pp+0x12cf0] "kankiPetitionCount"
    //     0x885d24: ldr             x16, [x16, #0xcf0]
    // 0x885d28: ldur            lr, [fp, #-0x20]
    // 0x885d2c: stp             lr, x16, [SP]
    // 0x885d30: r0 = ==()
    //     0x885d30: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885d34: tbnz            w0, #4, #0x885dc0
    // 0x885d38: r0 = LoadStaticField(0xb54)
    //     0x885d38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885d3c: ldr             x0, [x0, #0x16a8]
    // 0x885d40: cmp             w0, NULL
    // 0x885d44: b.ne            #0x885d50
    // 0x885d48: r0 = Null
    //     0x885d48: mov             x0, NULL
    // 0x885d4c: b               #0x885d78
    // 0x885d50: r17 = 327
    //     0x885d50: movz            x17, #0x147
    // 0x885d54: ldr             w1, [x0, x17]
    // 0x885d58: DecompressPointer r1
    //     0x885d58: add             x1, x1, HEAP, lsl #32
    // 0x885d5c: r0 = LoadClassIdInstr(r1)
    //     0x885d5c: ldur            x0, [x1, #-1]
    //     0x885d60: ubfx            x0, x0, #0xc, #0x14
    // 0x885d64: r2 = "questKankiRamen3.End"
    //     0x885d64: add             x2, PP, #0x12, lsl #12  ; [pp+0x12cf8] "questKankiRamen3.End"
    //     0x885d68: ldr             x2, [x2, #0xcf8]
    // 0x885d6c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885d6c: sub             lr, x0, #0xb4
    //     0x885d70: ldr             lr, [x21, lr, lsl #3]
    //     0x885d74: blr             lr
    // 0x885d78: r1 = 59
    //     0x885d78: movz            x1, #0x3b
    // 0x885d7c: branchIfSmi(r0, 0x885d88)
    //     0x885d7c: tbz             w0, #0, #0x885d88
    // 0x885d80: r1 = LoadClassIdInstr(r0)
    //     0x885d80: ldur            x1, [x0, #-1]
    //     0x885d84: ubfx            x1, x1, #0xc, #0x14
    // 0x885d88: r16 = true
    //     0x885d88: add             x16, NULL, #0x20  ; true
    // 0x885d8c: stp             x16, x0, [SP]
    // 0x885d90: mov             x0, x1
    // 0x885d94: mov             lr, x0
    // 0x885d98: ldr             lr, [x21, lr, lsl #3]
    // 0x885d9c: blr             lr
    // 0x885da0: tst             x0, #0x10
    // 0x885da4: cset            x1, ne
    // 0x885da8: sub             x1, x1, #1
    // 0x885dac: r16 = 40
    //     0x885dac: movz            x16, #0x28
    // 0x885db0: and             x1, x1, x16
    // 0x885db4: add             x1, x1, #0xa
    // 0x885db8: r0 = LoadInt32Instr(r1)
    //     0x885db8: sbfx            x0, x1, #1, #0x1f
    // 0x885dbc: b               #0x88db2c
    // 0x885dc0: r16 = "charity"
    //     0x885dc0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d00] "charity"
    //     0x885dc4: ldr             x16, [x16, #0xd00]
    // 0x885dc8: ldur            lr, [fp, #-0x20]
    // 0x885dcc: stp             lr, x16, [SP]
    // 0x885dd0: r0 = ==()
    //     0x885dd0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885dd4: tbnz            w0, #4, #0x885ef0
    // 0x885dd8: r0 = LoadStaticField(0xb54)
    //     0x885dd8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885ddc: ldr             x0, [x0, #0x16a8]
    // 0x885de0: cmp             w0, NULL
    // 0x885de4: b.eq            #0x885eac
    // 0x885de8: r17 = 347
    //     0x885de8: movz            x17, #0x15b
    // 0x885dec: ldr             w1, [x0, x17]
    // 0x885df0: DecompressPointer r1
    //     0x885df0: add             x1, x1, HEAP, lsl #32
    // 0x885df4: r0 = LoadClassIdInstr(r1)
    //     0x885df4: ldur            x0, [x1, #-1]
    //     0x885df8: ubfx            x0, x0, #0xc, #0x14
    // 0x885dfc: r2 = "townhallCharity"
    //     0x885dfc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d08] "townhallCharity"
    //     0x885e00: ldr             x2, [x2, #0xd08]
    // 0x885e04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885e04: sub             lr, x0, #0xb4
    //     0x885e08: ldr             lr, [x21, lr, lsl #3]
    //     0x885e0c: blr             lr
    // 0x885e10: cmp             w0, NULL
    // 0x885e14: b.eq            #0x885eac
    // 0x885e18: r0 = LoadStaticField(0xb54)
    //     0x885e18: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885e1c: ldr             x0, [x0, #0x16a8]
    // 0x885e20: cmp             w0, NULL
    // 0x885e24: b.ne            #0x885e30
    // 0x885e28: r3 = Null
    //     0x885e28: mov             x3, NULL
    // 0x885e2c: b               #0x885e5c
    // 0x885e30: r17 = 347
    //     0x885e30: movz            x17, #0x15b
    // 0x885e34: ldr             w1, [x0, x17]
    // 0x885e38: DecompressPointer r1
    //     0x885e38: add             x1, x1, HEAP, lsl #32
    // 0x885e3c: r0 = LoadClassIdInstr(r1)
    //     0x885e3c: ldur            x0, [x1, #-1]
    //     0x885e40: ubfx            x0, x0, #0xc, #0x14
    // 0x885e44: r2 = "townhallCharity"
    //     0x885e44: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d08] "townhallCharity"
    //     0x885e48: ldr             x2, [x2, #0xd08]
    // 0x885e4c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885e4c: sub             lr, x0, #0xb4
    //     0x885e50: ldr             lr, [x21, lr, lsl #3]
    //     0x885e54: blr             lr
    // 0x885e58: mov             x3, x0
    // 0x885e5c: mov             x0, x3
    // 0x885e60: stur            x3, [fp, #-8]
    // 0x885e64: r2 = Null
    //     0x885e64: mov             x2, NULL
    // 0x885e68: r1 = Null
    //     0x885e68: mov             x1, NULL
    // 0x885e6c: branchIfSmi(r0, 0x885e94)
    //     0x885e6c: tbz             w0, #0, #0x885e94
    // 0x885e70: r4 = LoadClassIdInstr(r0)
    //     0x885e70: ldur            x4, [x0, #-1]
    //     0x885e74: ubfx            x4, x4, #0xc, #0x14
    // 0x885e78: sub             x4, x4, #0x3b
    // 0x885e7c: cmp             x4, #1
    // 0x885e80: b.ls            #0x885e94
    // 0x885e84: r8 = int
    //     0x885e84: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x885e88: r3 = Null
    //     0x885e88: add             x3, PP, #0x12, lsl #12  ; [pp+0x12d10] Null
    //     0x885e8c: ldr             x3, [x3, #0xd10]
    // 0x885e90: r0 = int()
    //     0x885e90: bl              #0x1524294  ; IsType_int_Stub
    // 0x885e94: ldur            x0, [fp, #-8]
    // 0x885e98: r1 = LoadInt32Instr(r0)
    //     0x885e98: sbfx            x1, x0, #1, #0x1f
    //     0x885e9c: tbz             w0, #0, #0x885ea4
    //     0x885ea0: ldur            x1, [x0, #7]
    // 0x885ea4: mov             x0, x1
    // 0x885ea8: b               #0x88db2c
    // 0x885eac: r0 = LoadStaticField(0xb54)
    //     0x885eac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885eb0: ldr             x0, [x0, #0x16a8]
    // 0x885eb4: cmp             w0, NULL
    // 0x885eb8: b.eq            #0x885ee8
    // 0x885ebc: r17 = 347
    //     0x885ebc: movz            x17, #0x15b
    // 0x885ec0: ldr             w1, [x0, x17]
    // 0x885ec4: DecompressPointer r1
    //     0x885ec4: add             x1, x1, HEAP, lsl #32
    // 0x885ec8: r0 = LoadClassIdInstr(r1)
    //     0x885ec8: ldur            x0, [x1, #-1]
    //     0x885ecc: ubfx            x0, x0, #0xc, #0x14
    // 0x885ed0: r2 = "townhallCharity"
    //     0x885ed0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d08] "townhallCharity"
    //     0x885ed4: ldr             x2, [x2, #0xd08]
    // 0x885ed8: r3 = 0
    //     0x885ed8: movz            x3, #0
    // 0x885edc: r0 = GDT[cid_x0 + 0x2da]()
    //     0x885edc: add             lr, x0, #0x2da
    //     0x885ee0: ldr             lr, [x21, lr, lsl #3]
    //     0x885ee4: blr             lr
    // 0x885ee8: r0 = 0
    //     0x885ee8: movz            x0, #0
    // 0x885eec: b               #0x88db2c
    // 0x885ef0: r16 = "dividend"
    //     0x885ef0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d20] "dividend"
    //     0x885ef4: ldr             x16, [x16, #0xd20]
    // 0x885ef8: ldur            lr, [fp, #-0x20]
    // 0x885efc: stp             lr, x16, [SP]
    // 0x885f00: r0 = ==()
    //     0x885f00: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x885f04: tbnz            w0, #4, #0x88611c
    // 0x885f08: r0 = LoadStaticField(0xb54)
    //     0x885f08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885f0c: ldr             x0, [x0, #0x16a8]
    // 0x885f10: cmp             w0, NULL
    // 0x885f14: b.eq            #0x886020
    // 0x885f18: r17 = 347
    //     0x885f18: movz            x17, #0x15b
    // 0x885f1c: ldr             w1, [x0, x17]
    // 0x885f20: DecompressPointer r1
    //     0x885f20: add             x1, x1, HEAP, lsl #32
    // 0x885f24: r0 = LoadClassIdInstr(r1)
    //     0x885f24: ldur            x0, [x1, #-1]
    //     0x885f28: ubfx            x0, x0, #0xc, #0x14
    // 0x885f2c: r2 = "bankSavings"
    //     0x885f2c: add             x2, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x885f30: ldr             x2, [x2, #0x3c0]
    // 0x885f34: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885f34: sub             lr, x0, #0xb4
    //     0x885f38: ldr             lr, [x21, lr, lsl #3]
    //     0x885f3c: blr             lr
    // 0x885f40: cmp             w0, NULL
    // 0x885f44: b.eq            #0x886020
    // 0x885f48: r0 = LoadStaticField(0xb54)
    //     0x885f48: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x885f4c: ldr             x0, [x0, #0x16a8]
    // 0x885f50: cmp             w0, NULL
    // 0x885f54: b.ne            #0x885f60
    // 0x885f58: r0 = Null
    //     0x885f58: mov             x0, NULL
    // 0x885f5c: b               #0x885f88
    // 0x885f60: r17 = 347
    //     0x885f60: movz            x17, #0x15b
    // 0x885f64: ldr             w1, [x0, x17]
    // 0x885f68: DecompressPointer r1
    //     0x885f68: add             x1, x1, HEAP, lsl #32
    // 0x885f6c: r0 = LoadClassIdInstr(r1)
    //     0x885f6c: ldur            x0, [x1, #-1]
    //     0x885f70: ubfx            x0, x0, #0xc, #0x14
    // 0x885f74: r2 = "bankSavings"
    //     0x885f74: add             x2, PP, #0x11, lsl #12  ; [pp+0x113c0] "bankSavings"
    //     0x885f78: ldr             x2, [x2, #0x3c0]
    // 0x885f7c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x885f7c: sub             lr, x0, #0xb4
    //     0x885f80: ldr             lr, [x21, lr, lsl #3]
    //     0x885f84: blr             lr
    // 0x885f88: r16 = 0.010000
    //     0x885f88: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d28] 0.01
    //     0x885f8c: ldr             x16, [x16, #0xd28]
    // 0x885f90: stp             x16, x0, [SP]
    // 0x885f94: r4 = 0
    //     0x885f94: movz            x4, #0
    // 0x885f98: ldr             x0, [SP, #8]
    // 0x885f9c: r16 = UnlinkedCall_0x7b3c80
    //     0x885f9c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d30] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x885fa0: add             x16, x16, #0xd30
    // 0x885fa4: ldp             x5, lr, [x16]
    // 0x885fa8: blr             lr
    // 0x885fac: str             x0, [SP]
    // 0x885fb0: r4 = 0
    //     0x885fb0: movz            x4, #0
    // 0x885fb4: ldr             x0, [SP]
    // 0x885fb8: r16 = UnlinkedCall_0x7b3c80
    //     0x885fb8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d40] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x885fbc: add             x16, x16, #0xd40
    // 0x885fc0: ldp             x5, lr, [x16]
    // 0x885fc4: blr             lr
    // 0x885fc8: mov             x3, x0
    // 0x885fcc: r2 = Null
    //     0x885fcc: mov             x2, NULL
    // 0x885fd0: r1 = Null
    //     0x885fd0: mov             x1, NULL
    // 0x885fd4: stur            x3, [fp, #-8]
    // 0x885fd8: branchIfSmi(r0, 0x886000)
    //     0x885fd8: tbz             w0, #0, #0x886000
    // 0x885fdc: r4 = LoadClassIdInstr(r0)
    //     0x885fdc: ldur            x4, [x0, #-1]
    //     0x885fe0: ubfx            x4, x4, #0xc, #0x14
    // 0x885fe4: sub             x4, x4, #0x3b
    // 0x885fe8: cmp             x4, #1
    // 0x885fec: b.ls            #0x886000
    // 0x885ff0: r8 = int
    //     0x885ff0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x885ff4: r3 = Null
    //     0x885ff4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12d50] Null
    //     0x885ff8: ldr             x3, [x3, #0xd50]
    // 0x885ffc: r0 = int()
    //     0x885ffc: bl              #0x1524294  ; IsType_int_Stub
    // 0x886000: ldur            x1, [fp, #-8]
    // 0x886004: r0 = print()
    //     0x886004: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x886008: ldur            x0, [fp, #-8]
    // 0x88600c: r1 = LoadInt32Instr(r0)
    //     0x88600c: sbfx            x1, x0, #1, #0x1f
    //     0x886010: tbz             w0, #0, #0x886018
    //     0x886014: ldur            x1, [x0, #7]
    // 0x886018: mov             x0, x1
    // 0x88601c: b               #0x886024
    // 0x886020: r0 = 1
    //     0x886020: movz            x0, #0x1
    // 0x886024: cmp             x0, #0
    // 0x886028: b.gt            #0x886030
    // 0x88602c: r0 = 1
    //     0x88602c: movz            x0, #0x1
    // 0x886030: cmp             x0, #0xbb8
    // 0x886034: b.le            #0x886040
    // 0x886038: r3 = 3000
    //     0x886038: movz            x3, #0xbb8
    // 0x88603c: b               #0x886044
    // 0x886040: mov             x3, x0
    // 0x886044: stur            x3, [fp, #-0x28]
    // 0x886048: r0 = LoadStaticField(0xb54)
    //     0x886048: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88604c: ldr             x0, [x0, #0x16a8]
    // 0x886050: cmp             w0, NULL
    // 0x886054: b.ne            #0x886060
    // 0x886058: mov             x0, x3
    // 0x88605c: b               #0x88db2c
    // 0x886060: r17 = 335
    //     0x886060: movz            x17, #0x14f
    // 0x886064: ldr             w1, [x0, x17]
    // 0x886068: DecompressPointer r1
    //     0x886068: add             x1, x1, HEAP, lsl #32
    // 0x88606c: r0 = LoadClassIdInstr(r1)
    //     0x88606c: ldur            x0, [x1, #-1]
    //     0x886070: ubfx            x0, x0, #0xc, #0x14
    // 0x886074: r2 = "bankvipcard"
    //     0x886074: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d60] "bankvipcard"
    //     0x886078: ldr             x2, [x2, #0xd60]
    // 0x88607c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88607c: sub             lr, x0, #0xb4
    //     0x886080: ldr             lr, [x21, lr, lsl #3]
    //     0x886084: blr             lr
    // 0x886088: cmp             w0, NULL
    // 0x88608c: b.eq            #0x886114
    // 0x886090: r0 = LoadStaticField(0xb54)
    //     0x886090: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886094: ldr             x0, [x0, #0x16a8]
    // 0x886098: cmp             w0, NULL
    // 0x88609c: b.ne            #0x8860a8
    // 0x8860a0: r0 = Null
    //     0x8860a0: mov             x0, NULL
    // 0x8860a4: b               #0x8860d0
    // 0x8860a8: r17 = 335
    //     0x8860a8: movz            x17, #0x14f
    // 0x8860ac: ldr             w1, [x0, x17]
    // 0x8860b0: DecompressPointer r1
    //     0x8860b0: add             x1, x1, HEAP, lsl #32
    // 0x8860b4: r0 = LoadClassIdInstr(r1)
    //     0x8860b4: ldur            x0, [x1, #-1]
    //     0x8860b8: ubfx            x0, x0, #0xc, #0x14
    // 0x8860bc: r2 = "bankvipcard"
    //     0x8860bc: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d60] "bankvipcard"
    //     0x8860c0: ldr             x2, [x2, #0xd60]
    // 0x8860c4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8860c4: sub             lr, x0, #0xb4
    //     0x8860c8: ldr             lr, [x21, lr, lsl #3]
    //     0x8860cc: blr             lr
    // 0x8860d0: r1 = 59
    //     0x8860d0: movz            x1, #0x3b
    // 0x8860d4: branchIfSmi(r0, 0x8860e0)
    //     0x8860d4: tbz             w0, #0, #0x8860e0
    // 0x8860d8: r1 = LoadClassIdInstr(r0)
    //     0x8860d8: ldur            x1, [x0, #-1]
    //     0x8860dc: ubfx            x1, x1, #0xc, #0x14
    // 0x8860e0: r16 = true
    //     0x8860e0: add             x16, NULL, #0x20  ; true
    // 0x8860e4: stp             x16, x0, [SP]
    // 0x8860e8: mov             x0, x1
    // 0x8860ec: mov             lr, x0
    // 0x8860f0: ldr             lr, [x21, lr, lsl #3]
    // 0x8860f4: blr             lr
    // 0x8860f8: tbnz            w0, #4, #0x88610c
    // 0x8860fc: ldur            x0, [fp, #-0x28]
    // 0x886100: lsl             x1, x0, #1
    // 0x886104: mov             x0, x1
    // 0x886108: b               #0x88db2c
    // 0x88610c: ldur            x0, [fp, #-0x28]
    // 0x886110: b               #0x88db2c
    // 0x886114: ldur            x0, [fp, #-0x28]
    // 0x886118: b               #0x88db2c
    // 0x88611c: r16 = "dojoPupil"
    //     0x88611c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x886120: ldr             x16, [x16, #0xb08]
    // 0x886124: ldur            lr, [fp, #-0x20]
    // 0x886128: stp             lr, x16, [SP]
    // 0x88612c: r0 = ==()
    //     0x88612c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x886130: tbnz            w0, #4, #0x88622c
    // 0x886134: r0 = LoadStaticField(0xb54)
    //     0x886134: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886138: ldr             x0, [x0, #0x16a8]
    // 0x88613c: cmp             w0, NULL
    // 0x886140: b.eq            #0x886224
    // 0x886144: r17 = 347
    //     0x886144: movz            x17, #0x15b
    // 0x886148: ldr             w1, [x0, x17]
    // 0x88614c: DecompressPointer r1
    //     0x88614c: add             x1, x1, HEAP, lsl #32
    // 0x886150: r0 = LoadClassIdInstr(r1)
    //     0x886150: ldur            x0, [x1, #-1]
    //     0x886154: ubfx            x0, x0, #0xc, #0x14
    // 0x886158: r2 = "dojoPupil"
    //     0x886158: add             x2, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x88615c: ldr             x2, [x2, #0xb08]
    // 0x886160: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886160: sub             lr, x0, #0xb4
    //     0x886164: ldr             lr, [x21, lr, lsl #3]
    //     0x886168: blr             lr
    // 0x88616c: cmp             w0, NULL
    // 0x886170: b.eq            #0x886224
    // 0x886174: r0 = LoadStaticField(0xb54)
    //     0x886174: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886178: ldr             x0, [x0, #0x16a8]
    // 0x88617c: cmp             w0, NULL
    // 0x886180: b.ne            #0x88618c
    // 0x886184: r0 = Null
    //     0x886184: mov             x0, NULL
    // 0x886188: b               #0x8861b4
    // 0x88618c: r17 = 347
    //     0x88618c: movz            x17, #0x15b
    // 0x886190: ldr             w1, [x0, x17]
    // 0x886194: DecompressPointer r1
    //     0x886194: add             x1, x1, HEAP, lsl #32
    // 0x886198: r0 = LoadClassIdInstr(r1)
    //     0x886198: ldur            x0, [x1, #-1]
    //     0x88619c: ubfx            x0, x0, #0xc, #0x14
    // 0x8861a0: r2 = "dojoPupil"
    //     0x8861a0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12b08] "dojoPupil"
    //     0x8861a4: ldr             x2, [x2, #0xb08]
    // 0x8861a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8861a8: sub             lr, x0, #0xb4
    //     0x8861ac: ldr             lr, [x21, lr, lsl #3]
    //     0x8861b0: blr             lr
    // 0x8861b4: r16 = 2
    //     0x8861b4: movz            x16, #0x2
    // 0x8861b8: stp             x16, x0, [SP]
    // 0x8861bc: r4 = 0
    //     0x8861bc: movz            x4, #0
    // 0x8861c0: ldr             x0, [SP, #8]
    // 0x8861c4: r16 = UnlinkedCall_0x7b3c80
    //     0x8861c4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d68] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8861c8: add             x16, x16, #0xd68
    // 0x8861cc: ldp             x5, lr, [x16]
    // 0x8861d0: blr             lr
    // 0x8861d4: mov             x3, x0
    // 0x8861d8: r2 = Null
    //     0x8861d8: mov             x2, NULL
    // 0x8861dc: r1 = Null
    //     0x8861dc: mov             x1, NULL
    // 0x8861e0: stur            x3, [fp, #-8]
    // 0x8861e4: branchIfSmi(r0, 0x88620c)
    //     0x8861e4: tbz             w0, #0, #0x88620c
    // 0x8861e8: r4 = LoadClassIdInstr(r0)
    //     0x8861e8: ldur            x4, [x0, #-1]
    //     0x8861ec: ubfx            x4, x4, #0xc, #0x14
    // 0x8861f0: sub             x4, x4, #0x3b
    // 0x8861f4: cmp             x4, #1
    // 0x8861f8: b.ls            #0x88620c
    // 0x8861fc: r8 = int
    //     0x8861fc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x886200: r3 = Null
    //     0x886200: add             x3, PP, #0x12, lsl #12  ; [pp+0x12d78] Null
    //     0x886204: ldr             x3, [x3, #0xd78]
    // 0x886208: r0 = int()
    //     0x886208: bl              #0x1524294  ; IsType_int_Stub
    // 0x88620c: ldur            x0, [fp, #-8]
    // 0x886210: r1 = LoadInt32Instr(r0)
    //     0x886210: sbfx            x1, x0, #1, #0x1f
    //     0x886214: tbz             w0, #0, #0x88621c
    //     0x886218: ldur            x1, [x0, #7]
    // 0x88621c: mov             x0, x1
    // 0x886220: b               #0x88db2c
    // 0x886224: r0 = 1
    //     0x886224: movz            x0, #0x1
    // 0x886228: b               #0x88db2c
    // 0x88622c: r16 = "dojoBattleCount"
    //     0x88622c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d88] "dojoBattleCount"
    //     0x886230: ldr             x16, [x16, #0xd88]
    // 0x886234: ldur            lr, [fp, #-0x20]
    // 0x886238: stp             lr, x16, [SP]
    // 0x88623c: r0 = ==()
    //     0x88623c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x886240: tbnz            w0, #4, #0x88633c
    // 0x886244: r0 = LoadStaticField(0xb54)
    //     0x886244: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886248: ldr             x0, [x0, #0x16a8]
    // 0x88624c: cmp             w0, NULL
    // 0x886250: b.eq            #0x886334
    // 0x886254: r17 = 347
    //     0x886254: movz            x17, #0x15b
    // 0x886258: ldr             w1, [x0, x17]
    // 0x88625c: DecompressPointer r1
    //     0x88625c: add             x1, x1, HEAP, lsl #32
    // 0x886260: r0 = LoadClassIdInstr(r1)
    //     0x886260: ldur            x0, [x1, #-1]
    //     0x886264: ubfx            x0, x0, #0xc, #0x14
    // 0x886268: r2 = "lastDojoWin"
    //     0x886268: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d90] "lastDojoWin"
    //     0x88626c: ldr             x2, [x2, #0xd90]
    // 0x886270: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886270: sub             lr, x0, #0xb4
    //     0x886274: ldr             lr, [x21, lr, lsl #3]
    //     0x886278: blr             lr
    // 0x88627c: cmp             w0, NULL
    // 0x886280: b.eq            #0x886334
    // 0x886284: r0 = LoadStaticField(0xb54)
    //     0x886284: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886288: ldr             x0, [x0, #0x16a8]
    // 0x88628c: cmp             w0, NULL
    // 0x886290: b.ne            #0x88629c
    // 0x886294: r0 = Null
    //     0x886294: mov             x0, NULL
    // 0x886298: b               #0x8862c4
    // 0x88629c: r17 = 347
    //     0x88629c: movz            x17, #0x15b
    // 0x8862a0: ldr             w1, [x0, x17]
    // 0x8862a4: DecompressPointer r1
    //     0x8862a4: add             x1, x1, HEAP, lsl #32
    // 0x8862a8: r0 = LoadClassIdInstr(r1)
    //     0x8862a8: ldur            x0, [x1, #-1]
    //     0x8862ac: ubfx            x0, x0, #0xc, #0x14
    // 0x8862b0: r2 = "lastDojoWin"
    //     0x8862b0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12d90] "lastDojoWin"
    //     0x8862b4: ldr             x2, [x2, #0xd90]
    // 0x8862b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8862b8: sub             lr, x0, #0xb4
    //     0x8862bc: ldr             lr, [x21, lr, lsl #3]
    //     0x8862c0: blr             lr
    // 0x8862c4: r16 = 2
    //     0x8862c4: movz            x16, #0x2
    // 0x8862c8: stp             x16, x0, [SP]
    // 0x8862cc: r4 = 0
    //     0x8862cc: movz            x4, #0
    // 0x8862d0: ldr             x0, [SP, #8]
    // 0x8862d4: r16 = UnlinkedCall_0x7b3c80
    //     0x8862d4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12d98] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8862d8: add             x16, x16, #0xd98
    // 0x8862dc: ldp             x5, lr, [x16]
    // 0x8862e0: blr             lr
    // 0x8862e4: mov             x3, x0
    // 0x8862e8: r2 = Null
    //     0x8862e8: mov             x2, NULL
    // 0x8862ec: r1 = Null
    //     0x8862ec: mov             x1, NULL
    // 0x8862f0: stur            x3, [fp, #-8]
    // 0x8862f4: branchIfSmi(r0, 0x88631c)
    //     0x8862f4: tbz             w0, #0, #0x88631c
    // 0x8862f8: r4 = LoadClassIdInstr(r0)
    //     0x8862f8: ldur            x4, [x0, #-1]
    //     0x8862fc: ubfx            x4, x4, #0xc, #0x14
    // 0x886300: sub             x4, x4, #0x3b
    // 0x886304: cmp             x4, #1
    // 0x886308: b.ls            #0x88631c
    // 0x88630c: r8 = int
    //     0x88630c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x886310: r3 = Null
    //     0x886310: add             x3, PP, #0x12, lsl #12  ; [pp+0x12da8] Null
    //     0x886314: ldr             x3, [x3, #0xda8]
    // 0x886318: r0 = int()
    //     0x886318: bl              #0x1524294  ; IsType_int_Stub
    // 0x88631c: ldur            x0, [fp, #-8]
    // 0x886320: r1 = LoadInt32Instr(r0)
    //     0x886320: sbfx            x1, x0, #1, #0x1f
    //     0x886324: tbz             w0, #0, #0x88632c
    //     0x886328: ldur            x1, [x0, #7]
    // 0x88632c: mov             x0, x1
    // 0x886330: b               #0x88db2c
    // 0x886334: r0 = 1
    //     0x886334: movz            x0, #0x1
    // 0x886338: b               #0x88db2c
    // 0x88633c: r16 = "fishingBait"
    //     0x88633c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12db8] "fishingBait"
    //     0x886340: ldr             x16, [x16, #0xdb8]
    // 0x886344: ldur            lr, [fp, #-0x20]
    // 0x886348: stp             lr, x16, [SP]
    // 0x88634c: r0 = ==()
    //     0x88634c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x886350: tbnz            w0, #4, #0x886488
    // 0x886354: r0 = LoadStaticField(0xb54)
    //     0x886354: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886358: ldr             x0, [x0, #0x16a8]
    // 0x88635c: cmp             w0, NULL
    // 0x886360: b.eq            #0x886480
    // 0x886364: r17 = 347
    //     0x886364: movz            x17, #0x15b
    // 0x886368: ldr             w1, [x0, x17]
    // 0x88636c: DecompressPointer r1
    //     0x88636c: add             x1, x1, HEAP, lsl #32
    // 0x886370: r0 = LoadClassIdInstr(r1)
    //     0x886370: ldur            x0, [x1, #-1]
    //     0x886374: ubfx            x0, x0, #0xc, #0x14
    // 0x886378: r2 = "fishingBait"
    //     0x886378: add             x2, PP, #0x12, lsl #12  ; [pp+0x12db8] "fishingBait"
    //     0x88637c: ldr             x2, [x2, #0xdb8]
    // 0x886380: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886380: sub             lr, x0, #0xb4
    //     0x886384: ldr             lr, [x21, lr, lsl #3]
    //     0x886388: blr             lr
    // 0x88638c: cmp             w0, NULL
    // 0x886390: b.eq            #0x886480
    // 0x886394: r0 = LoadStaticField(0xb54)
    //     0x886394: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886398: ldr             x0, [x0, #0x16a8]
    // 0x88639c: cmp             w0, NULL
    // 0x8863a0: b.ne            #0x8863ac
    // 0x8863a4: r0 = Null
    //     0x8863a4: mov             x0, NULL
    // 0x8863a8: b               #0x8863d4
    // 0x8863ac: r17 = 347
    //     0x8863ac: movz            x17, #0x15b
    // 0x8863b0: ldr             w1, [x0, x17]
    // 0x8863b4: DecompressPointer r1
    //     0x8863b4: add             x1, x1, HEAP, lsl #32
    // 0x8863b8: r0 = LoadClassIdInstr(r1)
    //     0x8863b8: ldur            x0, [x1, #-1]
    //     0x8863bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8863c0: r2 = "fishingBait"
    //     0x8863c0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12db8] "fishingBait"
    //     0x8863c4: ldr             x2, [x2, #0xdb8]
    // 0x8863c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8863c8: sub             lr, x0, #0xb4
    //     0x8863cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8863d0: blr             lr
    // 0x8863d4: cmp             w0, NULL
    // 0x8863d8: b.ne            #0x8863e4
    // 0x8863dc: r3 = 0
    //     0x8863dc: movz            x3, #0
    // 0x8863e0: b               #0x8863e8
    // 0x8863e4: mov             x3, x0
    // 0x8863e8: mov             x0, x3
    // 0x8863ec: stur            x3, [fp, #-8]
    // 0x8863f0: r2 = Null
    //     0x8863f0: mov             x2, NULL
    // 0x8863f4: r1 = Null
    //     0x8863f4: mov             x1, NULL
    // 0x8863f8: branchIfSmi(r0, 0x886420)
    //     0x8863f8: tbz             w0, #0, #0x886420
    // 0x8863fc: r4 = LoadClassIdInstr(r0)
    //     0x8863fc: ldur            x4, [x0, #-1]
    //     0x886400: ubfx            x4, x4, #0xc, #0x14
    // 0x886404: sub             x4, x4, #0x3b
    // 0x886408: cmp             x4, #2
    // 0x88640c: b.ls            #0x886420
    // 0x886410: r8 = num
    //     0x886410: ldr             x8, [PP, #0x3e8]  ; [pp+0x3e8] Type: num
    // 0x886414: r3 = Null
    //     0x886414: add             x3, PP, #0x12, lsl #12  ; [pp+0x12dc0] Null
    //     0x886418: ldr             x3, [x3, #0xdc0]
    // 0x88641c: r0 = DefaultTypeTest()
    //     0x88641c: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x886420: r16 = 20
    //     0x886420: movz            x16, #0x14
    // 0x886424: ldur            lr, [fp, #-8]
    // 0x886428: stp             lr, x16, [SP]
    // 0x88642c: r0 = -()
    //     0x88642c: bl              #0x14fdaac  ; [dart:core] _IntegerImplementation::-
    // 0x886430: mov             x3, x0
    // 0x886434: r2 = Null
    //     0x886434: mov             x2, NULL
    // 0x886438: r1 = Null
    //     0x886438: mov             x1, NULL
    // 0x88643c: stur            x3, [fp, #-8]
    // 0x886440: branchIfSmi(r0, 0x886468)
    //     0x886440: tbz             w0, #0, #0x886468
    // 0x886444: r4 = LoadClassIdInstr(r0)
    //     0x886444: ldur            x4, [x0, #-1]
    //     0x886448: ubfx            x4, x4, #0xc, #0x14
    // 0x88644c: sub             x4, x4, #0x3b
    // 0x886450: cmp             x4, #1
    // 0x886454: b.ls            #0x886468
    // 0x886458: r8 = int
    //     0x886458: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88645c: r3 = Null
    //     0x88645c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12dd0] Null
    //     0x886460: ldr             x3, [x3, #0xdd0]
    // 0x886464: r0 = int()
    //     0x886464: bl              #0x1524294  ; IsType_int_Stub
    // 0x886468: ldur            x0, [fp, #-8]
    // 0x88646c: r1 = LoadInt32Instr(r0)
    //     0x88646c: sbfx            x1, x0, #1, #0x1f
    //     0x886470: tbz             w0, #0, #0x886478
    //     0x886474: ldur            x1, [x0, #7]
    // 0x886478: mov             x0, x1
    // 0x88647c: b               #0x88db2c
    // 0x886480: r0 = 10
    //     0x886480: movz            x0, #0xa
    // 0x886484: b               #0x88db2c
    // 0x886488: r16 = "dojoRushExp"
    //     0x886488: add             x16, PP, #0x12, lsl #12  ; [pp+0x12de0] "dojoRushExp"
    //     0x88648c: ldr             x16, [x16, #0xde0]
    // 0x886490: ldur            lr, [fp, #-0x20]
    // 0x886494: stp             lr, x16, [SP]
    // 0x886498: r0 = ==()
    //     0x886498: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88649c: tbnz            w0, #4, #0x8864f8
    // 0x8864a0: r0 = lastDojoWin()
    //     0x8864a0: bl              #0x8902cc  ; [package:battlecross/globals.dart] ::lastDojoWin
    // 0x8864a4: cbz             x0, #0x8864e4
    // 0x8864a8: r0 = lastDojoWin()
    //     0x8864a8: bl              #0x8902cc  ; [package:battlecross/globals.dart] ::lastDojoWin
    // 0x8864ac: cmp             x0, #0xa
    // 0x8864b0: b.ge            #0x8864c8
    // 0x8864b4: r0 = lastDojoWin()
    //     0x8864b4: bl              #0x8902cc  ; [package:battlecross/globals.dart] ::lastDojoWin
    // 0x8864b8: r16 = 100
    //     0x8864b8: movz            x16, #0x64
    // 0x8864bc: mul             x1, x0, x16
    // 0x8864c0: mov             x0, x1
    // 0x8864c4: b               #0x8864e8
    // 0x8864c8: r0 = lastDojoWin()
    //     0x8864c8: bl              #0x8902cc  ; [package:battlecross/globals.dart] ::lastDojoWin
    // 0x8864cc: sub             x1, x0, #9
    // 0x8864d0: r16 = 200
    //     0x8864d0: movz            x16, #0xc8
    // 0x8864d4: mul             x0, x1, x16
    // 0x8864d8: add             x1, x0, #0x384
    // 0x8864dc: mov             x0, x1
    // 0x8864e0: b               #0x8864e8
    // 0x8864e4: r0 = 100
    //     0x8864e4: movz            x0, #0x64
    // 0x8864e8: cmp             x0, #0x64
    // 0x8864ec: b.ge            #0x88db2c
    // 0x8864f0: r0 = 100
    //     0x8864f0: movz            x0, #0x64
    // 0x8864f4: b               #0x88db2c
    // 0x8864f8: r16 = "auctionBidInitialSet"
    //     0x8864f8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12de8] "auctionBidInitialSet"
    //     0x8864fc: ldr             x16, [x16, #0xde8]
    // 0x886500: ldur            lr, [fp, #-0x20]
    // 0x886504: stp             lr, x16, [SP]
    // 0x886508: r0 = ==()
    //     0x886508: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88650c: tbnz            w0, #4, #0x8865bc
    // 0x886510: r0 = LoadStaticField(0xb54)
    //     0x886510: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886514: ldr             x0, [x0, #0x16a8]
    // 0x886518: cmp             w0, NULL
    // 0x88651c: b.ne            #0x886528
    // 0x886520: r0 = Null
    //     0x886520: mov             x0, NULL
    // 0x886524: b               #0x886550
    // 0x886528: r17 = 347
    //     0x886528: movz            x17, #0x15b
    // 0x88652c: ldr             w1, [x0, x17]
    // 0x886530: DecompressPointer r1
    //     0x886530: add             x1, x1, HEAP, lsl #32
    // 0x886534: r0 = LoadClassIdInstr(r1)
    //     0x886534: ldur            x0, [x1, #-1]
    //     0x886538: ubfx            x0, x0, #0xc, #0x14
    // 0x88653c: r2 = "hall1AuctionItem"
    //     0x88653c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12df0] "hall1AuctionItem"
    //     0x886540: ldr             x2, [x2, #0xdf0]
    // 0x886544: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886544: sub             lr, x0, #0xb4
    //     0x886548: ldr             lr, [x21, lr, lsl #3]
    //     0x88654c: blr             lr
    // 0x886550: cmp             w0, NULL
    // 0x886554: b.ne            #0x886560
    // 0x886558: r3 = 0
    //     0x886558: movz            x3, #0
    // 0x88655c: b               #0x886564
    // 0x886560: mov             x3, x0
    // 0x886564: mov             x0, x3
    // 0x886568: stur            x3, [fp, #-8]
    // 0x88656c: r2 = Null
    //     0x88656c: mov             x2, NULL
    // 0x886570: r1 = Null
    //     0x886570: mov             x1, NULL
    // 0x886574: branchIfSmi(r0, 0x88659c)
    //     0x886574: tbz             w0, #0, #0x88659c
    // 0x886578: r4 = LoadClassIdInstr(r0)
    //     0x886578: ldur            x4, [x0, #-1]
    //     0x88657c: ubfx            x4, x4, #0xc, #0x14
    // 0x886580: sub             x4, x4, #0x3b
    // 0x886584: cmp             x4, #1
    // 0x886588: b.ls            #0x88659c
    // 0x88658c: r8 = int?
    //     0x88658c: ldr             x8, [PP, #0x3298]  ; [pp+0x3298] Type: int?
    // 0x886590: r3 = Null
    //     0x886590: add             x3, PP, #0x12, lsl #12  ; [pp+0x12df8] Null
    //     0x886594: ldr             x3, [x3, #0xdf8]
    // 0x886598: r0 = int?()
    //     0x886598: bl              #0x1524258  ; IsType_int?_Stub
    // 0x88659c: ldur            x0, [fp, #-8]
    // 0x8865a0: r1 = LoadInt32Instr(r0)
    //     0x8865a0: sbfx            x1, x0, #1, #0x1f
    //     0x8865a4: tbz             w0, #0, #0x8865ac
    //     0x8865a8: ldur            x1, [x0, #7]
    // 0x8865ac: r0 = getAuctionItemHall1()
    //     0x8865ac: bl              #0x8901cc  ; [package:battlecross/library/auctionItemLibrary.dart] ::getAuctionItemHall1
    // 0x8865b0: LoadField: r1 = r0->field_7
    //     0x8865b0: ldur            x1, [x0, #7]
    // 0x8865b4: mov             x0, x1
    // 0x8865b8: b               #0x88db2c
    // 0x8865bc: r16 = "auctionBid2InitialSet"
    //     0x8865bc: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e08] "auctionBid2InitialSet"
    //     0x8865c0: ldr             x16, [x16, #0xe08]
    // 0x8865c4: ldur            lr, [fp, #-0x20]
    // 0x8865c8: stp             lr, x16, [SP]
    // 0x8865cc: r0 = ==()
    //     0x8865cc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8865d0: tbnz            w0, #4, #0x886680
    // 0x8865d4: r0 = LoadStaticField(0xb54)
    //     0x8865d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8865d8: ldr             x0, [x0, #0x16a8]
    // 0x8865dc: cmp             w0, NULL
    // 0x8865e0: b.ne            #0x8865ec
    // 0x8865e4: r0 = Null
    //     0x8865e4: mov             x0, NULL
    // 0x8865e8: b               #0x886614
    // 0x8865ec: r17 = 347
    //     0x8865ec: movz            x17, #0x15b
    // 0x8865f0: ldr             w1, [x0, x17]
    // 0x8865f4: DecompressPointer r1
    //     0x8865f4: add             x1, x1, HEAP, lsl #32
    // 0x8865f8: r0 = LoadClassIdInstr(r1)
    //     0x8865f8: ldur            x0, [x1, #-1]
    //     0x8865fc: ubfx            x0, x0, #0xc, #0x14
    // 0x886600: r2 = "hall2AuctionItem"
    //     0x886600: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e10] "hall2AuctionItem"
    //     0x886604: ldr             x2, [x2, #0xe10]
    // 0x886608: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886608: sub             lr, x0, #0xb4
    //     0x88660c: ldr             lr, [x21, lr, lsl #3]
    //     0x886610: blr             lr
    // 0x886614: cmp             w0, NULL
    // 0x886618: b.ne            #0x886624
    // 0x88661c: r3 = 0
    //     0x88661c: movz            x3, #0
    // 0x886620: b               #0x886628
    // 0x886624: mov             x3, x0
    // 0x886628: mov             x0, x3
    // 0x88662c: stur            x3, [fp, #-8]
    // 0x886630: r2 = Null
    //     0x886630: mov             x2, NULL
    // 0x886634: r1 = Null
    //     0x886634: mov             x1, NULL
    // 0x886638: branchIfSmi(r0, 0x886660)
    //     0x886638: tbz             w0, #0, #0x886660
    // 0x88663c: r4 = LoadClassIdInstr(r0)
    //     0x88663c: ldur            x4, [x0, #-1]
    //     0x886640: ubfx            x4, x4, #0xc, #0x14
    // 0x886644: sub             x4, x4, #0x3b
    // 0x886648: cmp             x4, #1
    // 0x88664c: b.ls            #0x886660
    // 0x886650: r8 = int?
    //     0x886650: ldr             x8, [PP, #0x3298]  ; [pp+0x3298] Type: int?
    // 0x886654: r3 = Null
    //     0x886654: add             x3, PP, #0x12, lsl #12  ; [pp+0x12e18] Null
    //     0x886658: ldr             x3, [x3, #0xe18]
    // 0x88665c: r0 = int?()
    //     0x88665c: bl              #0x1524258  ; IsType_int?_Stub
    // 0x886660: ldur            x0, [fp, #-8]
    // 0x886664: r1 = LoadInt32Instr(r0)
    //     0x886664: sbfx            x1, x0, #1, #0x1f
    //     0x886668: tbz             w0, #0, #0x886670
    //     0x88666c: ldur            x1, [x0, #7]
    // 0x886670: r0 = getAuctionItemHall2()
    //     0x886670: bl              #0x8900b4  ; [package:battlecross/library/auctionItemLibrary.dart] ::getAuctionItemHall2
    // 0x886674: LoadField: r1 = r0->field_7
    //     0x886674: ldur            x1, [x0, #7]
    // 0x886678: mov             x0, x1
    // 0x88667c: b               #0x88db2c
    // 0x886680: r16 = "yourBidInitialSet"
    //     0x886680: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e28] "yourBidInitialSet"
    //     0x886684: ldr             x16, [x16, #0xe28]
    // 0x886688: ldur            lr, [fp, #-0x20]
    // 0x88668c: stp             lr, x16, [SP]
    // 0x886690: r0 = ==()
    //     0x886690: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x886694: tbnz            w0, #4, #0x8866a0
    // 0x886698: r0 = 0
    //     0x886698: movz            x0, #0
    // 0x88669c: b               #0x88db2c
    // 0x8866a0: r16 = "untilNextLvlExp"
    //     0x8866a0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e30] "untilNextLvlExp"
    //     0x8866a4: ldr             x16, [x16, #0xe30]
    // 0x8866a8: ldur            lr, [fp, #-0x20]
    // 0x8866ac: stp             lr, x16, [SP]
    // 0x8866b0: r0 = ==()
    //     0x8866b0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8866b4: tbnz            w0, #4, #0x886768
    // 0x8866b8: r0 = LoadStaticField(0xb54)
    //     0x8866b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8866bc: ldr             x0, [x0, #0x16a8]
    // 0x8866c0: cmp             w0, NULL
    // 0x8866c4: b.ne            #0x8866d0
    // 0x8866c8: r0 = Null
    //     0x8866c8: mov             x0, NULL
    // 0x8866cc: b               #0x8866e8
    // 0x8866d0: LoadField: r2 = r0->field_6b
    //     0x8866d0: ldur            x2, [x0, #0x6b]
    // 0x8866d4: r0 = BoxInt64Instr(r2)
    //     0x8866d4: sbfiz           x0, x2, #1, #0x1f
    //     0x8866d8: cmp             x2, x0, asr #1
    //     0x8866dc: b.eq            #0x8866e8
    //     0x8866e0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8866e4: stur            x2, [x0, #7]
    // 0x8866e8: cmp             w0, NULL
    // 0x8866ec: b.ne            #0x8866f8
    // 0x8866f0: r1 = 5
    //     0x8866f0: movz            x1, #0x5
    // 0x8866f4: b               #0x886704
    // 0x8866f8: r1 = LoadInt32Instr(r0)
    //     0x8866f8: sbfx            x1, x0, #1, #0x1f
    //     0x8866fc: tbz             w0, #0, #0x886704
    //     0x886700: ldur            x1, [x0, #7]
    // 0x886704: r0 = getNextLevelRequiredExp()
    //     0x886704: bl              #0x88ff44  ; [package:battlecross/method/playerMethod.dart] ::getNextLevelRequiredExp
    // 0x886708: mov             x2, x0
    // 0x88670c: r0 = LoadStaticField(0xb54)
    //     0x88670c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886710: ldr             x0, [x0, #0x16a8]
    // 0x886714: cmp             w0, NULL
    // 0x886718: b.ne            #0x886724
    // 0x88671c: r0 = Null
    //     0x88671c: mov             x0, NULL
    // 0x886720: b               #0x88673c
    // 0x886724: LoadField: r3 = r0->field_73
    //     0x886724: ldur            x3, [x0, #0x73]
    // 0x886728: r0 = BoxInt64Instr(r3)
    //     0x886728: sbfiz           x0, x3, #1, #0x1f
    //     0x88672c: cmp             x3, x0, asr #1
    //     0x886730: b.eq            #0x88673c
    //     0x886734: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886738: stur            x3, [x0, #7]
    // 0x88673c: cmp             w0, NULL
    // 0x886740: b.ne            #0x88674c
    // 0x886744: r0 = 0
    //     0x886744: movz            x0, #0
    // 0x886748: b               #0x88675c
    // 0x88674c: r1 = LoadInt32Instr(r0)
    //     0x88674c: sbfx            x1, x0, #1, #0x1f
    //     0x886750: tbz             w0, #0, #0x886758
    //     0x886754: ldur            x1, [x0, #7]
    // 0x886758: mov             x0, x1
    // 0x88675c: sub             x1, x2, x0
    // 0x886760: add             x0, x1, #1
    // 0x886764: b               #0x88db2c
    // 0x886768: r16 = "expsnack"
    //     0x886768: add             x16, PP, #0x10, lsl #12  ; [pp+0x10640] "expsnack"
    //     0x88676c: ldr             x16, [x16, #0x640]
    // 0x886770: ldur            lr, [fp, #-0x20]
    // 0x886774: stp             lr, x16, [SP]
    // 0x886778: r0 = ==()
    //     0x886778: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88677c: tbnz            w0, #4, #0x8868b0
    // 0x886780: r1 = Null
    //     0x886780: mov             x1, NULL
    // 0x886784: r0 = Random()
    //     0x886784: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x886788: mov             x2, x0
    // 0x88678c: r0 = LoadStaticField(0xb54)
    //     0x88678c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886790: ldr             x0, [x0, #0x16a8]
    // 0x886794: cmp             w0, NULL
    // 0x886798: b.ne            #0x8867a4
    // 0x88679c: r0 = Null
    //     0x88679c: mov             x0, NULL
    // 0x8867a0: b               #0x8867bc
    // 0x8867a4: LoadField: r3 = r0->field_6b
    //     0x8867a4: ldur            x3, [x0, #0x6b]
    // 0x8867a8: r0 = BoxInt64Instr(r3)
    //     0x8867a8: sbfiz           x0, x3, #1, #0x1f
    //     0x8867ac: cmp             x3, x0, asr #1
    //     0x8867b0: b.eq            #0x8867bc
    //     0x8867b4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8867b8: stur            x3, [x0, #7]
    // 0x8867bc: cmp             w0, NULL
    // 0x8867c0: b.ne            #0x8867cc
    // 0x8867c4: r0 = 0
    //     0x8867c4: movz            x0, #0
    // 0x8867c8: b               #0x8867dc
    // 0x8867cc: r1 = LoadInt32Instr(r0)
    //     0x8867cc: sbfx            x1, x0, #1, #0x1f
    //     0x8867d0: tbz             w0, #0, #0x8867d8
    //     0x8867d4: ldur            x1, [x0, #7]
    // 0x8867d8: mov             x0, x1
    // 0x8867dc: d0 = 0.750000
    //     0x8867dc: fmov            d0, #0.75000000
    // 0x8867e0: scvtf           d1, x0
    // 0x8867e4: fmul            d2, d1, d0
    // 0x8867e8: fcmp            d2, d2
    // 0x8867ec: b.vs            #0x88db7c
    // 0x8867f0: fcvtps          x0, d2
    // 0x8867f4: asr             x16, x0, #0x1e
    // 0x8867f8: cmp             x16, x0, asr #63
    // 0x8867fc: b.ne            #0x88db7c
    // 0x886800: lsl             x0, x0, #1
    // 0x886804: r1 = LoadInt32Instr(r0)
    //     0x886804: sbfx            x1, x0, #1, #0x1f
    //     0x886808: tbz             w0, #0, #0x886810
    //     0x88680c: ldur            x1, [x0, #7]
    // 0x886810: mov             x16, x1
    // 0x886814: mov             x1, x2
    // 0x886818: mov             x2, x16
    // 0x88681c: r0 = nextInt()
    //     0x88681c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x886820: add             x2, x0, #0xa
    // 0x886824: r0 = LoadStaticField(0xb54)
    //     0x886824: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886828: ldr             x0, [x0, #0x16a8]
    // 0x88682c: cmp             w0, NULL
    // 0x886830: b.ne            #0x88683c
    // 0x886834: r0 = Null
    //     0x886834: mov             x0, NULL
    // 0x886838: b               #0x886854
    // 0x88683c: LoadField: r3 = r0->field_6b
    //     0x88683c: ldur            x3, [x0, #0x6b]
    // 0x886840: r0 = BoxInt64Instr(r3)
    //     0x886840: sbfiz           x0, x3, #1, #0x1f
    //     0x886844: cmp             x3, x0, asr #1
    //     0x886848: b.eq            #0x886854
    //     0x88684c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886850: stur            x3, [x0, #7]
    // 0x886854: cmp             w0, NULL
    // 0x886858: b.ne            #0x886864
    // 0x88685c: r0 = 0
    //     0x88685c: movz            x0, #0
    // 0x886860: b               #0x886874
    // 0x886864: r1 = LoadInt32Instr(r0)
    //     0x886864: sbfx            x1, x0, #1, #0x1f
    //     0x886868: tbz             w0, #0, #0x886870
    //     0x88686c: ldur            x1, [x0, #7]
    // 0x886870: mov             x0, x1
    // 0x886874: d1 = 4.000000
    //     0x886874: fmov            d1, #4.00000000
    // 0x886878: scvtf           d0, x0
    // 0x88687c: fdiv            d2, d0, d1
    // 0x886880: fcmp            d2, d2
    // 0x886884: b.vs            #0x88dba4
    // 0x886888: fcvtps          x0, d2
    // 0x88688c: asr             x16, x0, #0x1e
    // 0x886890: cmp             x16, x0, asr #63
    // 0x886894: b.ne            #0x88dba4
    // 0x886898: lsl             x0, x0, #1
    // 0x88689c: r1 = LoadInt32Instr(r0)
    //     0x88689c: sbfx            x1, x0, #1, #0x1f
    //     0x8868a0: tbz             w0, #0, #0x8868a8
    //     0x8868a4: ldur            x1, [x0, #7]
    // 0x8868a8: add             x0, x2, x1
    // 0x8868ac: b               #0x88db2c
    // 0x8868b0: d1 = 4.000000
    //     0x8868b0: fmov            d1, #4.00000000
    // 0x8868b4: d0 = 0.750000
    //     0x8868b4: fmov            d0, #0.75000000
    // 0x8868b8: r16 = "moneysack"
    //     0x8868b8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10628] "moneysack"
    //     0x8868bc: ldr             x16, [x16, #0x628]
    // 0x8868c0: ldur            lr, [fp, #-0x20]
    // 0x8868c4: stp             lr, x16, [SP]
    // 0x8868c8: r0 = ==()
    //     0x8868c8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8868cc: tbnz            w0, #4, #0x886a00
    // 0x8868d0: r1 = Null
    //     0x8868d0: mov             x1, NULL
    // 0x8868d4: r0 = Random()
    //     0x8868d4: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x8868d8: mov             x2, x0
    // 0x8868dc: r0 = LoadStaticField(0xb54)
    //     0x8868dc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8868e0: ldr             x0, [x0, #0x16a8]
    // 0x8868e4: cmp             w0, NULL
    // 0x8868e8: b.ne            #0x8868f4
    // 0x8868ec: r0 = Null
    //     0x8868ec: mov             x0, NULL
    // 0x8868f0: b               #0x88690c
    // 0x8868f4: LoadField: r3 = r0->field_6b
    //     0x8868f4: ldur            x3, [x0, #0x6b]
    // 0x8868f8: r0 = BoxInt64Instr(r3)
    //     0x8868f8: sbfiz           x0, x3, #1, #0x1f
    //     0x8868fc: cmp             x3, x0, asr #1
    //     0x886900: b.eq            #0x88690c
    //     0x886904: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886908: stur            x3, [x0, #7]
    // 0x88690c: cmp             w0, NULL
    // 0x886910: b.ne            #0x88691c
    // 0x886914: r0 = 0
    //     0x886914: movz            x0, #0
    // 0x886918: b               #0x88692c
    // 0x88691c: r1 = LoadInt32Instr(r0)
    //     0x88691c: sbfx            x1, x0, #1, #0x1f
    //     0x886920: tbz             w0, #0, #0x886928
    //     0x886924: ldur            x1, [x0, #7]
    // 0x886928: mov             x0, x1
    // 0x88692c: d0 = 0.750000
    //     0x88692c: fmov            d0, #0.75000000
    // 0x886930: scvtf           d1, x0
    // 0x886934: fmul            d2, d1, d0
    // 0x886938: fcmp            d2, d2
    // 0x88693c: b.vs            #0x88dbcc
    // 0x886940: fcvtps          x0, d2
    // 0x886944: asr             x16, x0, #0x1e
    // 0x886948: cmp             x16, x0, asr #63
    // 0x88694c: b.ne            #0x88dbcc
    // 0x886950: lsl             x0, x0, #1
    // 0x886954: r1 = LoadInt32Instr(r0)
    //     0x886954: sbfx            x1, x0, #1, #0x1f
    //     0x886958: tbz             w0, #0, #0x886960
    //     0x88695c: ldur            x1, [x0, #7]
    // 0x886960: mov             x16, x1
    // 0x886964: mov             x1, x2
    // 0x886968: mov             x2, x16
    // 0x88696c: r0 = nextInt()
    //     0x88696c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x886970: add             x2, x0, #0xa
    // 0x886974: r0 = LoadStaticField(0xb54)
    //     0x886974: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886978: ldr             x0, [x0, #0x16a8]
    // 0x88697c: cmp             w0, NULL
    // 0x886980: b.ne            #0x88698c
    // 0x886984: r0 = Null
    //     0x886984: mov             x0, NULL
    // 0x886988: b               #0x8869a4
    // 0x88698c: LoadField: r3 = r0->field_6b
    //     0x88698c: ldur            x3, [x0, #0x6b]
    // 0x886990: r0 = BoxInt64Instr(r3)
    //     0x886990: sbfiz           x0, x3, #1, #0x1f
    //     0x886994: cmp             x3, x0, asr #1
    //     0x886998: b.eq            #0x8869a4
    //     0x88699c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8869a0: stur            x3, [x0, #7]
    // 0x8869a4: cmp             w0, NULL
    // 0x8869a8: b.ne            #0x8869b4
    // 0x8869ac: r0 = 0
    //     0x8869ac: movz            x0, #0
    // 0x8869b0: b               #0x8869c4
    // 0x8869b4: r1 = LoadInt32Instr(r0)
    //     0x8869b4: sbfx            x1, x0, #1, #0x1f
    //     0x8869b8: tbz             w0, #0, #0x8869c0
    //     0x8869bc: ldur            x1, [x0, #7]
    // 0x8869c0: mov             x0, x1
    // 0x8869c4: d0 = 4.000000
    //     0x8869c4: fmov            d0, #4.00000000
    // 0x8869c8: scvtf           d1, x0
    // 0x8869cc: fdiv            d2, d1, d0
    // 0x8869d0: fcmp            d2, d2
    // 0x8869d4: b.vs            #0x88dbf4
    // 0x8869d8: fcvtps          x0, d2
    // 0x8869dc: asr             x16, x0, #0x1e
    // 0x8869e0: cmp             x16, x0, asr #63
    // 0x8869e4: b.ne            #0x88dbf4
    // 0x8869e8: lsl             x0, x0, #1
    // 0x8869ec: r1 = LoadInt32Instr(r0)
    //     0x8869ec: sbfx            x1, x0, #1, #0x1f
    //     0x8869f0: tbz             w0, #0, #0x8869f8
    //     0x8869f4: ldur            x1, [x0, #7]
    // 0x8869f8: add             x0, x2, x1
    // 0x8869fc: b               #0x88db2c
    // 0x886a00: d0 = 0.750000
    //     0x886a00: fmov            d0, #0.75000000
    // 0x886a04: r16 = "auctionBidChance"
    //     0x886a04: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e38] "auctionBidChance"
    //     0x886a08: ldr             x16, [x16, #0xe38]
    // 0x886a0c: ldur            lr, [fp, #-0x20]
    // 0x886a10: stp             lr, x16, [SP]
    // 0x886a14: r0 = ==()
    //     0x886a14: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x886a18: tbnz            w0, #4, #0x88705c
    // 0x886a1c: r0 = LoadStaticField(0xb54)
    //     0x886a1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886a20: ldr             x0, [x0, #0x16a8]
    // 0x886a24: cmp             w0, NULL
    // 0x886a28: b.ne            #0x886a34
    // 0x886a2c: r0 = Null
    //     0x886a2c: mov             x0, NULL
    // 0x886a30: b               #0x886a5c
    // 0x886a34: r17 = 347
    //     0x886a34: movz            x17, #0x15b
    // 0x886a38: ldr             w1, [x0, x17]
    // 0x886a3c: DecompressPointer r1
    //     0x886a3c: add             x1, x1, HEAP, lsl #32
    // 0x886a40: r0 = LoadClassIdInstr(r1)
    //     0x886a40: ldur            x0, [x1, #-1]
    //     0x886a44: ubfx            x0, x0, #0xc, #0x14
    // 0x886a48: r2 = "hall1AuctionItem"
    //     0x886a48: add             x2, PP, #0x12, lsl #12  ; [pp+0x12df0] "hall1AuctionItem"
    //     0x886a4c: ldr             x2, [x2, #0xdf0]
    // 0x886a50: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886a50: sub             lr, x0, #0xb4
    //     0x886a54: ldr             lr, [x21, lr, lsl #3]
    //     0x886a58: blr             lr
    // 0x886a5c: cmp             w0, NULL
    // 0x886a60: b.ne            #0x886a6c
    // 0x886a64: r3 = 0
    //     0x886a64: movz            x3, #0
    // 0x886a68: b               #0x886a70
    // 0x886a6c: mov             x3, x0
    // 0x886a70: mov             x0, x3
    // 0x886a74: stur            x3, [fp, #-8]
    // 0x886a78: r2 = Null
    //     0x886a78: mov             x2, NULL
    // 0x886a7c: r1 = Null
    //     0x886a7c: mov             x1, NULL
    // 0x886a80: branchIfSmi(r0, 0x886aa8)
    //     0x886a80: tbz             w0, #0, #0x886aa8
    // 0x886a84: r4 = LoadClassIdInstr(r0)
    //     0x886a84: ldur            x4, [x0, #-1]
    //     0x886a88: ubfx            x4, x4, #0xc, #0x14
    // 0x886a8c: sub             x4, x4, #0x3b
    // 0x886a90: cmp             x4, #1
    // 0x886a94: b.ls            #0x886aa8
    // 0x886a98: r8 = int?
    //     0x886a98: ldr             x8, [PP, #0x3298]  ; [pp+0x3298] Type: int?
    // 0x886a9c: r3 = Null
    //     0x886a9c: add             x3, PP, #0x12, lsl #12  ; [pp+0x12e40] Null
    //     0x886aa0: ldr             x3, [x3, #0xe40]
    // 0x886aa4: r0 = int?()
    //     0x886aa4: bl              #0x1524258  ; IsType_int?_Stub
    // 0x886aa8: ldur            x0, [fp, #-8]
    // 0x886aac: r1 = LoadInt32Instr(r0)
    //     0x886aac: sbfx            x1, x0, #1, #0x1f
    //     0x886ab0: tbz             w0, #0, #0x886ab8
    //     0x886ab4: ldur            x1, [x0, #7]
    // 0x886ab8: r0 = getAuctionItemHall1()
    //     0x886ab8: bl              #0x8901cc  ; [package:battlecross/library/auctionItemLibrary.dart] ::getAuctionItemHall1
    // 0x886abc: r1 = Null
    //     0x886abc: mov             x1, NULL
    // 0x886ac0: r2 = 4
    //     0x886ac0: movz            x2, #0x4
    // 0x886ac4: stur            x0, [fp, #-8]
    // 0x886ac8: r0 = AllocateArray()
    //     0x886ac8: bl              #0x1502560  ; AllocateArrayStub
    // 0x886acc: mov             x2, x0
    // 0x886ad0: r17 = "auction item hidden price: "
    //     0x886ad0: add             x17, PP, #0x12, lsl #12  ; [pp+0x12e50] "auction item hidden price: "
    //     0x886ad4: ldr             x17, [x17, #0xe50]
    // 0x886ad8: StoreField: r2->field_f = r17
    //     0x886ad8: stur            w17, [x2, #0xf]
    // 0x886adc: ldur            x3, [fp, #-8]
    // 0x886ae0: LoadField: r4 = r3->field_f
    //     0x886ae0: ldur            x4, [x3, #0xf]
    // 0x886ae4: r0 = BoxInt64Instr(r4)
    //     0x886ae4: sbfiz           x0, x4, #1, #0x1f
    //     0x886ae8: cmp             x4, x0, asr #1
    //     0x886aec: b.eq            #0x886af8
    //     0x886af0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886af4: stur            x4, [x0, #7]
    // 0x886af8: StoreField: r2->field_13 = r0
    //     0x886af8: stur            w0, [x2, #0x13]
    // 0x886afc: str             x2, [SP]
    // 0x886b00: r0 = _interpolate()
    //     0x886b00: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x886b04: mov             x1, x0
    // 0x886b08: r0 = print()
    //     0x886b08: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x886b0c: r0 = LoadStaticField(0xb54)
    //     0x886b0c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886b10: ldr             x0, [x0, #0x16a8]
    // 0x886b14: cmp             w0, NULL
    // 0x886b18: b.ne            #0x886b24
    // 0x886b1c: r0 = Null
    //     0x886b1c: mov             x0, NULL
    // 0x886b20: b               #0x886b4c
    // 0x886b24: r17 = 327
    //     0x886b24: movz            x17, #0x147
    // 0x886b28: ldr             w1, [x0, x17]
    // 0x886b2c: DecompressPointer r1
    //     0x886b2c: add             x1, x1, HEAP, lsl #32
    // 0x886b30: r0 = LoadClassIdInstr(r1)
    //     0x886b30: ldur            x0, [x1, #-1]
    //     0x886b34: ubfx            x0, x0, #0xc, #0x14
    // 0x886b38: r2 = "auctionSpecial"
    //     0x886b38: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e58] "auctionSpecial"
    //     0x886b3c: ldr             x2, [x2, #0xe58]
    // 0x886b40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886b40: sub             lr, x0, #0xb4
    //     0x886b44: ldr             lr, [x21, lr, lsl #3]
    //     0x886b48: blr             lr
    // 0x886b4c: r1 = 59
    //     0x886b4c: movz            x1, #0x3b
    // 0x886b50: branchIfSmi(r0, 0x886b5c)
    //     0x886b50: tbz             w0, #0, #0x886b5c
    // 0x886b54: r1 = LoadClassIdInstr(r0)
    //     0x886b54: ldur            x1, [x0, #-1]
    //     0x886b58: ubfx            x1, x1, #0xc, #0x14
    // 0x886b5c: r16 = true
    //     0x886b5c: add             x16, NULL, #0x20  ; true
    // 0x886b60: stp             x16, x0, [SP]
    // 0x886b64: mov             x0, x1
    // 0x886b68: mov             lr, x0
    // 0x886b6c: ldr             lr, [x21, lr, lsl #3]
    // 0x886b70: blr             lr
    // 0x886b74: tbnz            w0, #4, #0x886dd8
    // 0x886b78: r0 = LoadStaticField(0xb54)
    //     0x886b78: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886b7c: ldr             x0, [x0, #0x16a8]
    // 0x886b80: cmp             w0, NULL
    // 0x886b84: b.ne            #0x886b90
    // 0x886b88: r0 = Null
    //     0x886b88: mov             x0, NULL
    // 0x886b8c: b               #0x886bb8
    // 0x886b90: r17 = 347
    //     0x886b90: movz            x17, #0x15b
    // 0x886b94: ldr             w1, [x0, x17]
    // 0x886b98: DecompressPointer r1
    //     0x886b98: add             x1, x1, HEAP, lsl #32
    // 0x886b9c: r0 = LoadClassIdInstr(r1)
    //     0x886b9c: ldur            x0, [x1, #-1]
    //     0x886ba0: ubfx            x0, x0, #0xc, #0x14
    // 0x886ba4: r2 = "auctionBid"
    //     0x886ba4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x886ba8: ldr             x2, [x2, #0xe60]
    // 0x886bac: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886bac: sub             lr, x0, #0xb4
    //     0x886bb0: ldr             lr, [x21, lr, lsl #3]
    //     0x886bb4: blr             lr
    // 0x886bb8: cmp             w0, NULL
    // 0x886bbc: b.ne            #0x886bc8
    // 0x886bc0: r3 = 0
    //     0x886bc0: movz            x3, #0
    // 0x886bc4: b               #0x886bcc
    // 0x886bc8: mov             x3, x0
    // 0x886bcc: ldur            x2, [fp, #-8]
    // 0x886bd0: d0 = 1.500000
    //     0x886bd0: fmov            d0, #1.50000000
    // 0x886bd4: LoadField: r0 = r2->field_f
    //     0x886bd4: ldur            x0, [x2, #0xf]
    // 0x886bd8: fcmp            d0, d0
    // 0x886bdc: b.vs            #0x88dc1c
    // 0x886be0: fcvtms          x4, d0
    // 0x886be4: asr             x16, x4, #0x1e
    // 0x886be8: cmp             x16, x4, asr #63
    // 0x886bec: b.ne            #0x88dc1c
    // 0x886bf0: lsl             x4, x4, #1
    // 0x886bf4: stur            x4, [fp, #-0x18]
    // 0x886bf8: r5 = LoadInt32Instr(r4)
    //     0x886bf8: sbfx            x5, x4, #1, #0x1f
    //     0x886bfc: tbz             w4, #0, #0x886c04
    //     0x886c00: ldur            x5, [x4, #7]
    // 0x886c04: stur            x5, [fp, #-0x28]
    // 0x886c08: mul             x6, x0, x5
    // 0x886c0c: r0 = BoxInt64Instr(r6)
    //     0x886c0c: sbfiz           x0, x6, #1, #0x1f
    //     0x886c10: cmp             x6, x0, asr #1
    //     0x886c14: b.eq            #0x886c20
    //     0x886c18: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886c1c: stur            x6, [x0, #7]
    // 0x886c20: stp             x0, x3, [SP]
    // 0x886c24: r4 = 0
    //     0x886c24: movz            x4, #0
    // 0x886c28: ldr             x0, [SP, #8]
    // 0x886c2c: r16 = UnlinkedCall_0x7b3c80
    //     0x886c2c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e68] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886c30: add             x16, x16, #0xe68
    // 0x886c34: ldp             x5, lr, [x16]
    // 0x886c38: blr             lr
    // 0x886c3c: tbnz            w0, #4, #0x886dcc
    // 0x886c40: r0 = LoadStaticField(0xb54)
    //     0x886c40: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886c44: ldr             x0, [x0, #0x16a8]
    // 0x886c48: cmp             w0, NULL
    // 0x886c4c: b.ne            #0x886c58
    // 0x886c50: r0 = Null
    //     0x886c50: mov             x0, NULL
    // 0x886c54: b               #0x886c80
    // 0x886c58: r17 = 347
    //     0x886c58: movz            x17, #0x15b
    // 0x886c5c: ldr             w1, [x0, x17]
    // 0x886c60: DecompressPointer r1
    //     0x886c60: add             x1, x1, HEAP, lsl #32
    // 0x886c64: r0 = LoadClassIdInstr(r1)
    //     0x886c64: ldur            x0, [x1, #-1]
    //     0x886c68: ubfx            x0, x0, #0xc, #0x14
    // 0x886c6c: r2 = "auctionBid"
    //     0x886c6c: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x886c70: ldr             x2, [x2, #0xe60]
    // 0x886c74: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886c74: sub             lr, x0, #0xb4
    //     0x886c78: ldr             lr, [x21, lr, lsl #3]
    //     0x886c7c: blr             lr
    // 0x886c80: cmp             w0, NULL
    // 0x886c84: b.ne            #0x886c90
    // 0x886c88: r3 = 0
    //     0x886c88: movz            x3, #0
    // 0x886c8c: b               #0x886c94
    // 0x886c90: mov             x3, x0
    // 0x886c94: ldur            x2, [fp, #-8]
    // 0x886c98: ldur            x0, [fp, #-0x28]
    // 0x886c9c: LoadField: r1 = r2->field_f
    //     0x886c9c: ldur            x1, [x2, #0xf]
    // 0x886ca0: mul             x4, x1, x0
    // 0x886ca4: r0 = BoxInt64Instr(r4)
    //     0x886ca4: sbfiz           x0, x4, #1, #0x1f
    //     0x886ca8: cmp             x4, x0, asr #1
    //     0x886cac: b.eq            #0x886cb8
    //     0x886cb0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886cb4: stur            x4, [x0, #7]
    // 0x886cb8: stp             x0, x3, [SP]
    // 0x886cbc: r4 = 0
    //     0x886cbc: movz            x4, #0
    // 0x886cc0: ldr             x0, [SP, #8]
    // 0x886cc4: r16 = UnlinkedCall_0x7b3c80
    //     0x886cc4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e78] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886cc8: add             x16, x16, #0xe78
    // 0x886ccc: ldp             x5, lr, [x16]
    // 0x886cd0: blr             lr
    // 0x886cd4: mov             x2, x0
    // 0x886cd8: ldur            x3, [fp, #-8]
    // 0x886cdc: LoadField: r4 = r3->field_f
    //     0x886cdc: ldur            x4, [x3, #0xf]
    // 0x886ce0: r0 = BoxInt64Instr(r4)
    //     0x886ce0: sbfiz           x0, x4, #1, #0x1f
    //     0x886ce4: cmp             x4, x0, asr #1
    //     0x886ce8: b.eq            #0x886cf4
    //     0x886cec: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886cf0: stur            x4, [x0, #7]
    // 0x886cf4: stp             x0, x2, [SP]
    // 0x886cf8: r4 = 0
    //     0x886cf8: movz            x4, #0
    // 0x886cfc: ldr             x0, [SP, #8]
    // 0x886d00: r16 = UnlinkedCall_0x7b3c80
    //     0x886d00: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e88] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886d04: add             x16, x16, #0xe88
    // 0x886d08: ldp             x5, lr, [x16]
    // 0x886d0c: blr             lr
    // 0x886d10: ldur            x16, [fp, #-0x18]
    // 0x886d14: stp             x16, x0, [SP]
    // 0x886d18: r4 = 0
    //     0x886d18: movz            x4, #0
    // 0x886d1c: ldr             x0, [SP, #8]
    // 0x886d20: r16 = UnlinkedCall_0x7b3c80
    //     0x886d20: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e98] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886d24: add             x16, x16, #0xe98
    // 0x886d28: ldp             x5, lr, [x16]
    // 0x886d2c: blr             lr
    // 0x886d30: r16 = 200
    //     0x886d30: movz            x16, #0xc8
    // 0x886d34: stp             x16, x0, [SP]
    // 0x886d38: r4 = 0
    //     0x886d38: movz            x4, #0
    // 0x886d3c: ldr             x0, [SP, #8]
    // 0x886d40: r16 = UnlinkedCall_0x7b3c80
    //     0x886d40: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ea8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886d44: add             x16, x16, #0xea8
    // 0x886d48: ldp             x5, lr, [x16]
    // 0x886d4c: blr             lr
    // 0x886d50: str             x0, [SP]
    // 0x886d54: r4 = 0
    //     0x886d54: movz            x4, #0
    // 0x886d58: ldr             x0, [SP]
    // 0x886d5c: r16 = UnlinkedCall_0x7b3c80
    //     0x886d5c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12eb8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886d60: add             x16, x16, #0xeb8
    // 0x886d64: ldp             x5, lr, [x16]
    // 0x886d68: blr             lr
    // 0x886d6c: mov             x3, x0
    // 0x886d70: r2 = Null
    //     0x886d70: mov             x2, NULL
    // 0x886d74: r1 = Null
    //     0x886d74: mov             x1, NULL
    // 0x886d78: stur            x3, [fp, #-0x18]
    // 0x886d7c: branchIfSmi(r0, 0x886da4)
    //     0x886d7c: tbz             w0, #0, #0x886da4
    // 0x886d80: r4 = LoadClassIdInstr(r0)
    //     0x886d80: ldur            x4, [x0, #-1]
    //     0x886d84: ubfx            x4, x4, #0xc, #0x14
    // 0x886d88: sub             x4, x4, #0x3b
    // 0x886d8c: cmp             x4, #1
    // 0x886d90: b.ls            #0x886da4
    // 0x886d94: r8 = int
    //     0x886d94: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x886d98: r3 = Null
    //     0x886d98: add             x3, PP, #0x12, lsl #12  ; [pp+0x12ec8] Null
    //     0x886d9c: ldr             x3, [x3, #0xec8]
    // 0x886da0: r0 = int()
    //     0x886da0: bl              #0x1524294  ; IsType_int_Stub
    // 0x886da4: ldur            x0, [fp, #-0x18]
    // 0x886da8: r1 = LoadInt32Instr(r0)
    //     0x886da8: sbfx            x1, x0, #1, #0x1f
    //     0x886dac: tbz             w0, #0, #0x886db4
    //     0x886db0: ldur            x1, [x0, #7]
    // 0x886db4: cmp             x1, #0x64
    // 0x886db8: b.le            #0x886dc4
    // 0x886dbc: r0 = 100
    //     0x886dbc: movz            x0, #0x64
    // 0x886dc0: b               #0x886dd0
    // 0x886dc4: mov             x0, x1
    // 0x886dc8: b               #0x886dd0
    // 0x886dcc: r0 = 0
    //     0x886dcc: movz            x0, #0
    // 0x886dd0: mov             x2, x0
    // 0x886dd4: b               #0x886ff8
    // 0x886dd8: ldur            x3, [fp, #-8]
    // 0x886ddc: r0 = LoadStaticField(0xb54)
    //     0x886ddc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886de0: ldr             x0, [x0, #0x16a8]
    // 0x886de4: cmp             w0, NULL
    // 0x886de8: b.ne            #0x886df4
    // 0x886dec: r0 = Null
    //     0x886dec: mov             x0, NULL
    // 0x886df0: b               #0x886e1c
    // 0x886df4: r17 = 347
    //     0x886df4: movz            x17, #0x15b
    // 0x886df8: ldr             w1, [x0, x17]
    // 0x886dfc: DecompressPointer r1
    //     0x886dfc: add             x1, x1, HEAP, lsl #32
    // 0x886e00: r0 = LoadClassIdInstr(r1)
    //     0x886e00: ldur            x0, [x1, #-1]
    //     0x886e04: ubfx            x0, x0, #0xc, #0x14
    // 0x886e08: r2 = "auctionBid"
    //     0x886e08: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x886e0c: ldr             x2, [x2, #0xe60]
    // 0x886e10: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886e10: sub             lr, x0, #0xb4
    //     0x886e14: ldr             lr, [x21, lr, lsl #3]
    //     0x886e18: blr             lr
    // 0x886e1c: cmp             w0, NULL
    // 0x886e20: b.ne            #0x886e2c
    // 0x886e24: r3 = 0
    //     0x886e24: movz            x3, #0
    // 0x886e28: b               #0x886e30
    // 0x886e2c: mov             x3, x0
    // 0x886e30: ldur            x2, [fp, #-8]
    // 0x886e34: LoadField: r4 = r2->field_f
    //     0x886e34: ldur            x4, [x2, #0xf]
    // 0x886e38: r0 = BoxInt64Instr(r4)
    //     0x886e38: sbfiz           x0, x4, #1, #0x1f
    //     0x886e3c: cmp             x4, x0, asr #1
    //     0x886e40: b.eq            #0x886e4c
    //     0x886e44: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886e48: stur            x4, [x0, #7]
    // 0x886e4c: stp             x0, x3, [SP]
    // 0x886e50: r4 = 0
    //     0x886e50: movz            x4, #0
    // 0x886e54: ldr             x0, [SP, #8]
    // 0x886e58: r16 = UnlinkedCall_0x7b3c80
    //     0x886e58: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ed8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886e5c: add             x16, x16, #0xed8
    // 0x886e60: ldp             x5, lr, [x16]
    // 0x886e64: blr             lr
    // 0x886e68: tbnz            w0, #4, #0x886ff0
    // 0x886e6c: r0 = LoadStaticField(0xb54)
    //     0x886e6c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x886e70: ldr             x0, [x0, #0x16a8]
    // 0x886e74: cmp             w0, NULL
    // 0x886e78: b.ne            #0x886e84
    // 0x886e7c: r0 = Null
    //     0x886e7c: mov             x0, NULL
    // 0x886e80: b               #0x886eac
    // 0x886e84: r17 = 347
    //     0x886e84: movz            x17, #0x15b
    // 0x886e88: ldr             w1, [x0, x17]
    // 0x886e8c: DecompressPointer r1
    //     0x886e8c: add             x1, x1, HEAP, lsl #32
    // 0x886e90: r0 = LoadClassIdInstr(r1)
    //     0x886e90: ldur            x0, [x1, #-1]
    //     0x886e94: ubfx            x0, x0, #0xc, #0x14
    // 0x886e98: r2 = "auctionBid"
    //     0x886e98: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x886e9c: ldr             x2, [x2, #0xe60]
    // 0x886ea0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x886ea0: sub             lr, x0, #0xb4
    //     0x886ea4: ldr             lr, [x21, lr, lsl #3]
    //     0x886ea8: blr             lr
    // 0x886eac: cmp             w0, NULL
    // 0x886eb0: b.ne            #0x886ebc
    // 0x886eb4: r3 = 0
    //     0x886eb4: movz            x3, #0
    // 0x886eb8: b               #0x886ec0
    // 0x886ebc: mov             x3, x0
    // 0x886ec0: ldur            x2, [fp, #-8]
    // 0x886ec4: LoadField: r4 = r2->field_f
    //     0x886ec4: ldur            x4, [x2, #0xf]
    // 0x886ec8: r0 = BoxInt64Instr(r4)
    //     0x886ec8: sbfiz           x0, x4, #1, #0x1f
    //     0x886ecc: cmp             x4, x0, asr #1
    //     0x886ed0: b.eq            #0x886edc
    //     0x886ed4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x886ed8: stur            x4, [x0, #7]
    // 0x886edc: stp             x0, x3, [SP]
    // 0x886ee0: r4 = 0
    //     0x886ee0: movz            x4, #0
    // 0x886ee4: ldr             x0, [SP, #8]
    // 0x886ee8: r16 = UnlinkedCall_0x7b3c80
    //     0x886ee8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ee8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886eec: add             x16, x16, #0xee8
    // 0x886ef0: ldp             x5, lr, [x16]
    // 0x886ef4: blr             lr
    // 0x886ef8: mov             x1, x0
    // 0x886efc: ldur            x0, [fp, #-8]
    // 0x886f00: LoadField: r2 = r0->field_f
    //     0x886f00: ldur            x2, [x0, #0xf]
    // 0x886f04: scvtf           d0, x2
    // 0x886f08: d1 = 2.000000
    //     0x886f08: fmov            d1, #2.00000000
    // 0x886f0c: fdiv            d2, d0, d1
    // 0x886f10: r0 = inline_Allocate_Double()
    //     0x886f10: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x886f14: add             x0, x0, #0x10
    //     0x886f18: cmp             x2, x0
    //     0x886f1c: b.ls            #0x88dc4c
    //     0x886f20: str             x0, [THR, #0x50]  ; THR::top
    //     0x886f24: sub             x0, x0, #0xf
    //     0x886f28: movz            x2, #0xd15c
    //     0x886f2c: movk            x2, #0x3, lsl #16
    //     0x886f30: stur            x2, [x0, #-1]
    // 0x886f34: StoreField: r0->field_7 = d2
    //     0x886f34: stur            d2, [x0, #7]
    // 0x886f38: stp             x0, x1, [SP]
    // 0x886f3c: r4 = 0
    //     0x886f3c: movz            x4, #0
    // 0x886f40: ldr             x0, [SP, #8]
    // 0x886f44: r16 = UnlinkedCall_0x7b3c80
    //     0x886f44: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ef8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886f48: add             x16, x16, #0xef8
    // 0x886f4c: ldp             x5, lr, [x16]
    // 0x886f50: blr             lr
    // 0x886f54: r16 = 200
    //     0x886f54: movz            x16, #0xc8
    // 0x886f58: stp             x16, x0, [SP]
    // 0x886f5c: r4 = 0
    //     0x886f5c: movz            x4, #0
    // 0x886f60: ldr             x0, [SP, #8]
    // 0x886f64: r16 = UnlinkedCall_0x7b3c80
    //     0x886f64: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f08] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886f68: add             x16, x16, #0xf08
    // 0x886f6c: ldp             x5, lr, [x16]
    // 0x886f70: blr             lr
    // 0x886f74: str             x0, [SP]
    // 0x886f78: r4 = 0
    //     0x886f78: movz            x4, #0
    // 0x886f7c: ldr             x0, [SP]
    // 0x886f80: r16 = UnlinkedCall_0x7b3c80
    //     0x886f80: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f18] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x886f84: add             x16, x16, #0xf18
    // 0x886f88: ldp             x5, lr, [x16]
    // 0x886f8c: blr             lr
    // 0x886f90: mov             x3, x0
    // 0x886f94: r2 = Null
    //     0x886f94: mov             x2, NULL
    // 0x886f98: r1 = Null
    //     0x886f98: mov             x1, NULL
    // 0x886f9c: stur            x3, [fp, #-8]
    // 0x886fa0: branchIfSmi(r0, 0x886fc8)
    //     0x886fa0: tbz             w0, #0, #0x886fc8
    // 0x886fa4: r4 = LoadClassIdInstr(r0)
    //     0x886fa4: ldur            x4, [x0, #-1]
    //     0x886fa8: ubfx            x4, x4, #0xc, #0x14
    // 0x886fac: sub             x4, x4, #0x3b
    // 0x886fb0: cmp             x4, #1
    // 0x886fb4: b.ls            #0x886fc8
    // 0x886fb8: r8 = int
    //     0x886fb8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x886fbc: r3 = Null
    //     0x886fbc: add             x3, PP, #0x12, lsl #12  ; [pp+0x12f28] Null
    //     0x886fc0: ldr             x3, [x3, #0xf28]
    // 0x886fc4: r0 = int()
    //     0x886fc4: bl              #0x1524294  ; IsType_int_Stub
    // 0x886fc8: ldur            x0, [fp, #-8]
    // 0x886fcc: r1 = LoadInt32Instr(r0)
    //     0x886fcc: sbfx            x1, x0, #1, #0x1f
    //     0x886fd0: tbz             w0, #0, #0x886fd8
    //     0x886fd4: ldur            x1, [x0, #7]
    // 0x886fd8: cmp             x1, #0x64
    // 0x886fdc: b.le            #0x886fe8
    // 0x886fe0: r0 = 100
    //     0x886fe0: movz            x0, #0x64
    // 0x886fe4: b               #0x886ff4
    // 0x886fe8: mov             x0, x1
    // 0x886fec: b               #0x886ff4
    // 0x886ff0: r0 = 0
    //     0x886ff0: movz            x0, #0
    // 0x886ff4: mov             x2, x0
    // 0x886ff8: stur            x2, [fp, #-0x28]
    // 0x886ffc: r0 = BoxInt64Instr(r2)
    //     0x886ffc: sbfiz           x0, x2, #1, #0x1f
    //     0x887000: cmp             x2, x0, asr #1
    //     0x887004: b.eq            #0x887010
    //     0x887008: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x88700c: stur            x2, [x0, #7]
    // 0x887010: r1 = 59
    //     0x887010: movz            x1, #0x3b
    // 0x887014: branchIfSmi(r0, 0x887020)
    //     0x887014: tbz             w0, #0, #0x887020
    // 0x887018: r1 = LoadClassIdInstr(r0)
    //     0x887018: ldur            x1, [x0, #-1]
    //     0x88701c: ubfx            x1, x1, #0xc, #0x14
    // 0x887020: str             x0, [SP]
    // 0x887024: mov             x0, x1
    // 0x887028: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x887028: ldr             x4, [PP, #0x2a8]  ; [pp+0x2a8] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x88702c: r0 = GDT[cid_x0 + 0x4756]()
    //     0x88702c: movz            x17, #0x4756
    //     0x887030: add             lr, x0, x17
    //     0x887034: ldr             lr, [x21, lr, lsl #3]
    //     0x887038: blr             lr
    // 0x88703c: r16 = "Chance: "
    //     0x88703c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f38] "Chance: "
    //     0x887040: ldr             x16, [x16, #0xf38]
    // 0x887044: stp             x0, x16, [SP]
    // 0x887048: r0 = +()
    //     0x887048: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x88704c: mov             x1, x0
    // 0x887050: r0 = print()
    //     0x887050: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x887054: ldur            x0, [fp, #-0x28]
    // 0x887058: b               #0x88db2c
    // 0x88705c: d0 = 1.500000
    //     0x88705c: fmov            d0, #1.50000000
    // 0x887060: r16 = "auctionBidChance2"
    //     0x887060: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f40] "auctionBidChance2"
    //     0x887064: ldr             x16, [x16, #0xf40]
    // 0x887068: ldur            lr, [fp, #-0x20]
    // 0x88706c: stp             lr, x16, [SP]
    // 0x887070: r0 = ==()
    //     0x887070: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887074: tbnz            w0, #4, #0x887694
    // 0x887078: r0 = LoadStaticField(0xb54)
    //     0x887078: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88707c: ldr             x0, [x0, #0x16a8]
    // 0x887080: cmp             w0, NULL
    // 0x887084: b.ne            #0x887090
    // 0x887088: r0 = Null
    //     0x887088: mov             x0, NULL
    // 0x88708c: b               #0x8870b8
    // 0x887090: r17 = 347
    //     0x887090: movz            x17, #0x15b
    // 0x887094: ldr             w1, [x0, x17]
    // 0x887098: DecompressPointer r1
    //     0x887098: add             x1, x1, HEAP, lsl #32
    // 0x88709c: r0 = LoadClassIdInstr(r1)
    //     0x88709c: ldur            x0, [x1, #-1]
    //     0x8870a0: ubfx            x0, x0, #0xc, #0x14
    // 0x8870a4: r2 = "hall2AuctionItem"
    //     0x8870a4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e10] "hall2AuctionItem"
    //     0x8870a8: ldr             x2, [x2, #0xe10]
    // 0x8870ac: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8870ac: sub             lr, x0, #0xb4
    //     0x8870b0: ldr             lr, [x21, lr, lsl #3]
    //     0x8870b4: blr             lr
    // 0x8870b8: cmp             w0, NULL
    // 0x8870bc: b.ne            #0x8870c8
    // 0x8870c0: r3 = 0
    //     0x8870c0: movz            x3, #0
    // 0x8870c4: b               #0x8870cc
    // 0x8870c8: mov             x3, x0
    // 0x8870cc: mov             x0, x3
    // 0x8870d0: stur            x3, [fp, #-8]
    // 0x8870d4: r2 = Null
    //     0x8870d4: mov             x2, NULL
    // 0x8870d8: r1 = Null
    //     0x8870d8: mov             x1, NULL
    // 0x8870dc: branchIfSmi(r0, 0x887104)
    //     0x8870dc: tbz             w0, #0, #0x887104
    // 0x8870e0: r4 = LoadClassIdInstr(r0)
    //     0x8870e0: ldur            x4, [x0, #-1]
    //     0x8870e4: ubfx            x4, x4, #0xc, #0x14
    // 0x8870e8: sub             x4, x4, #0x3b
    // 0x8870ec: cmp             x4, #1
    // 0x8870f0: b.ls            #0x887104
    // 0x8870f4: r8 = int?
    //     0x8870f4: ldr             x8, [PP, #0x3298]  ; [pp+0x3298] Type: int?
    // 0x8870f8: r3 = Null
    //     0x8870f8: add             x3, PP, #0x12, lsl #12  ; [pp+0x12f48] Null
    //     0x8870fc: ldr             x3, [x3, #0xf48]
    // 0x887100: r0 = int?()
    //     0x887100: bl              #0x1524258  ; IsType_int?_Stub
    // 0x887104: ldur            x0, [fp, #-8]
    // 0x887108: r1 = LoadInt32Instr(r0)
    //     0x887108: sbfx            x1, x0, #1, #0x1f
    //     0x88710c: tbz             w0, #0, #0x887114
    //     0x887110: ldur            x1, [x0, #7]
    // 0x887114: r0 = getAuctionItemHall1()
    //     0x887114: bl              #0x8901cc  ; [package:battlecross/library/auctionItemLibrary.dart] ::getAuctionItemHall1
    // 0x887118: r1 = Null
    //     0x887118: mov             x1, NULL
    // 0x88711c: r2 = 4
    //     0x88711c: movz            x2, #0x4
    // 0x887120: stur            x0, [fp, #-8]
    // 0x887124: r0 = AllocateArray()
    //     0x887124: bl              #0x1502560  ; AllocateArrayStub
    // 0x887128: mov             x2, x0
    // 0x88712c: r17 = "auction item hidden price: "
    //     0x88712c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12e50] "auction item hidden price: "
    //     0x887130: ldr             x17, [x17, #0xe50]
    // 0x887134: StoreField: r2->field_f = r17
    //     0x887134: stur            w17, [x2, #0xf]
    // 0x887138: ldur            x3, [fp, #-8]
    // 0x88713c: LoadField: r4 = r3->field_f
    //     0x88713c: ldur            x4, [x3, #0xf]
    // 0x887140: r0 = BoxInt64Instr(r4)
    //     0x887140: sbfiz           x0, x4, #1, #0x1f
    //     0x887144: cmp             x4, x0, asr #1
    //     0x887148: b.eq            #0x887154
    //     0x88714c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887150: stur            x4, [x0, #7]
    // 0x887154: StoreField: r2->field_13 = r0
    //     0x887154: stur            w0, [x2, #0x13]
    // 0x887158: str             x2, [SP]
    // 0x88715c: r0 = _interpolate()
    //     0x88715c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x887160: mov             x1, x0
    // 0x887164: r0 = print()
    //     0x887164: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x887168: r0 = LoadStaticField(0xb54)
    //     0x887168: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88716c: ldr             x0, [x0, #0x16a8]
    // 0x887170: cmp             w0, NULL
    // 0x887174: b.ne            #0x887180
    // 0x887178: r0 = Null
    //     0x887178: mov             x0, NULL
    // 0x88717c: b               #0x8871a8
    // 0x887180: r17 = 327
    //     0x887180: movz            x17, #0x147
    // 0x887184: ldr             w1, [x0, x17]
    // 0x887188: DecompressPointer r1
    //     0x887188: add             x1, x1, HEAP, lsl #32
    // 0x88718c: r0 = LoadClassIdInstr(r1)
    //     0x88718c: ldur            x0, [x1, #-1]
    //     0x887190: ubfx            x0, x0, #0xc, #0x14
    // 0x887194: r2 = "auctionSpecial"
    //     0x887194: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e58] "auctionSpecial"
    //     0x887198: ldr             x2, [x2, #0xe58]
    // 0x88719c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88719c: sub             lr, x0, #0xb4
    //     0x8871a0: ldr             lr, [x21, lr, lsl #3]
    //     0x8871a4: blr             lr
    // 0x8871a8: r1 = 59
    //     0x8871a8: movz            x1, #0x3b
    // 0x8871ac: branchIfSmi(r0, 0x8871b8)
    //     0x8871ac: tbz             w0, #0, #0x8871b8
    // 0x8871b0: r1 = LoadClassIdInstr(r0)
    //     0x8871b0: ldur            x1, [x0, #-1]
    //     0x8871b4: ubfx            x1, x1, #0xc, #0x14
    // 0x8871b8: r16 = true
    //     0x8871b8: add             x16, NULL, #0x20  ; true
    // 0x8871bc: stp             x16, x0, [SP]
    // 0x8871c0: mov             x0, x1
    // 0x8871c4: mov             lr, x0
    // 0x8871c8: ldr             lr, [x21, lr, lsl #3]
    // 0x8871cc: blr             lr
    // 0x8871d0: tbnz            w0, #4, #0x887434
    // 0x8871d4: r0 = LoadStaticField(0xb54)
    //     0x8871d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8871d8: ldr             x0, [x0, #0x16a8]
    // 0x8871dc: cmp             w0, NULL
    // 0x8871e0: b.ne            #0x8871ec
    // 0x8871e4: r0 = Null
    //     0x8871e4: mov             x0, NULL
    // 0x8871e8: b               #0x887214
    // 0x8871ec: r17 = 347
    //     0x8871ec: movz            x17, #0x15b
    // 0x8871f0: ldr             w1, [x0, x17]
    // 0x8871f4: DecompressPointer r1
    //     0x8871f4: add             x1, x1, HEAP, lsl #32
    // 0x8871f8: r0 = LoadClassIdInstr(r1)
    //     0x8871f8: ldur            x0, [x1, #-1]
    //     0x8871fc: ubfx            x0, x0, #0xc, #0x14
    // 0x887200: r2 = "auctionBid"
    //     0x887200: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x887204: ldr             x2, [x2, #0xe60]
    // 0x887208: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887208: sub             lr, x0, #0xb4
    //     0x88720c: ldr             lr, [x21, lr, lsl #3]
    //     0x887210: blr             lr
    // 0x887214: cmp             w0, NULL
    // 0x887218: b.ne            #0x887224
    // 0x88721c: r3 = 0
    //     0x88721c: movz            x3, #0
    // 0x887220: b               #0x887228
    // 0x887224: mov             x3, x0
    // 0x887228: ldur            x2, [fp, #-8]
    // 0x88722c: d0 = 1.500000
    //     0x88722c: fmov            d0, #1.50000000
    // 0x887230: LoadField: r0 = r2->field_f
    //     0x887230: ldur            x0, [x2, #0xf]
    // 0x887234: fcmp            d0, d0
    // 0x887238: b.vs            #0x88dc64
    // 0x88723c: fcvtms          x4, d0
    // 0x887240: asr             x16, x4, #0x1e
    // 0x887244: cmp             x16, x4, asr #63
    // 0x887248: b.ne            #0x88dc64
    // 0x88724c: lsl             x4, x4, #1
    // 0x887250: stur            x4, [fp, #-0x18]
    // 0x887254: r5 = LoadInt32Instr(r4)
    //     0x887254: sbfx            x5, x4, #1, #0x1f
    //     0x887258: tbz             w4, #0, #0x887260
    //     0x88725c: ldur            x5, [x4, #7]
    // 0x887260: stur            x5, [fp, #-0x28]
    // 0x887264: mul             x6, x0, x5
    // 0x887268: r0 = BoxInt64Instr(r6)
    //     0x887268: sbfiz           x0, x6, #1, #0x1f
    //     0x88726c: cmp             x6, x0, asr #1
    //     0x887270: b.eq            #0x88727c
    //     0x887274: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887278: stur            x6, [x0, #7]
    // 0x88727c: stp             x0, x3, [SP]
    // 0x887280: r4 = 0
    //     0x887280: movz            x4, #0
    // 0x887284: ldr             x0, [SP, #8]
    // 0x887288: r16 = UnlinkedCall_0x7b3c80
    //     0x887288: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f58] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x88728c: add             x16, x16, #0xf58
    // 0x887290: ldp             x5, lr, [x16]
    // 0x887294: blr             lr
    // 0x887298: tbnz            w0, #4, #0x887428
    // 0x88729c: r0 = LoadStaticField(0xb54)
    //     0x88729c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8872a0: ldr             x0, [x0, #0x16a8]
    // 0x8872a4: cmp             w0, NULL
    // 0x8872a8: b.ne            #0x8872b4
    // 0x8872ac: r0 = Null
    //     0x8872ac: mov             x0, NULL
    // 0x8872b0: b               #0x8872dc
    // 0x8872b4: r17 = 347
    //     0x8872b4: movz            x17, #0x15b
    // 0x8872b8: ldr             w1, [x0, x17]
    // 0x8872bc: DecompressPointer r1
    //     0x8872bc: add             x1, x1, HEAP, lsl #32
    // 0x8872c0: r0 = LoadClassIdInstr(r1)
    //     0x8872c0: ldur            x0, [x1, #-1]
    //     0x8872c4: ubfx            x0, x0, #0xc, #0x14
    // 0x8872c8: r2 = "auctionBid"
    //     0x8872c8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x8872cc: ldr             x2, [x2, #0xe60]
    // 0x8872d0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8872d0: sub             lr, x0, #0xb4
    //     0x8872d4: ldr             lr, [x21, lr, lsl #3]
    //     0x8872d8: blr             lr
    // 0x8872dc: cmp             w0, NULL
    // 0x8872e0: b.ne            #0x8872ec
    // 0x8872e4: r3 = 0
    //     0x8872e4: movz            x3, #0
    // 0x8872e8: b               #0x8872f0
    // 0x8872ec: mov             x3, x0
    // 0x8872f0: ldur            x2, [fp, #-8]
    // 0x8872f4: ldur            x0, [fp, #-0x28]
    // 0x8872f8: LoadField: r1 = r2->field_f
    //     0x8872f8: ldur            x1, [x2, #0xf]
    // 0x8872fc: mul             x4, x1, x0
    // 0x887300: r0 = BoxInt64Instr(r4)
    //     0x887300: sbfiz           x0, x4, #1, #0x1f
    //     0x887304: cmp             x4, x0, asr #1
    //     0x887308: b.eq            #0x887314
    //     0x88730c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887310: stur            x4, [x0, #7]
    // 0x887314: stp             x0, x3, [SP]
    // 0x887318: r4 = 0
    //     0x887318: movz            x4, #0
    // 0x88731c: ldr             x0, [SP, #8]
    // 0x887320: r16 = UnlinkedCall_0x7b3c80
    //     0x887320: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f68] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887324: add             x16, x16, #0xf68
    // 0x887328: ldp             x5, lr, [x16]
    // 0x88732c: blr             lr
    // 0x887330: mov             x2, x0
    // 0x887334: ldur            x3, [fp, #-8]
    // 0x887338: LoadField: r4 = r3->field_f
    //     0x887338: ldur            x4, [x3, #0xf]
    // 0x88733c: r0 = BoxInt64Instr(r4)
    //     0x88733c: sbfiz           x0, x4, #1, #0x1f
    //     0x887340: cmp             x4, x0, asr #1
    //     0x887344: b.eq            #0x887350
    //     0x887348: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x88734c: stur            x4, [x0, #7]
    // 0x887350: stp             x0, x2, [SP]
    // 0x887354: r4 = 0
    //     0x887354: movz            x4, #0
    // 0x887358: ldr             x0, [SP, #8]
    // 0x88735c: r16 = UnlinkedCall_0x7b3c80
    //     0x88735c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f78] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887360: add             x16, x16, #0xf78
    // 0x887364: ldp             x5, lr, [x16]
    // 0x887368: blr             lr
    // 0x88736c: ldur            x16, [fp, #-0x18]
    // 0x887370: stp             x16, x0, [SP]
    // 0x887374: r4 = 0
    //     0x887374: movz            x4, #0
    // 0x887378: ldr             x0, [SP, #8]
    // 0x88737c: r16 = UnlinkedCall_0x7b3c80
    //     0x88737c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f88] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887380: add             x16, x16, #0xf88
    // 0x887384: ldp             x5, lr, [x16]
    // 0x887388: blr             lr
    // 0x88738c: r16 = 200
    //     0x88738c: movz            x16, #0xc8
    // 0x887390: stp             x16, x0, [SP]
    // 0x887394: r4 = 0
    //     0x887394: movz            x4, #0
    // 0x887398: ldr             x0, [SP, #8]
    // 0x88739c: r16 = UnlinkedCall_0x7b3c80
    //     0x88739c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f98] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8873a0: add             x16, x16, #0xf98
    // 0x8873a4: ldp             x5, lr, [x16]
    // 0x8873a8: blr             lr
    // 0x8873ac: str             x0, [SP]
    // 0x8873b0: r4 = 0
    //     0x8873b0: movz            x4, #0
    // 0x8873b4: ldr             x0, [SP]
    // 0x8873b8: r16 = UnlinkedCall_0x7b3c80
    //     0x8873b8: add             x16, PP, #0x12, lsl #12  ; [pp+0x12fa8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8873bc: add             x16, x16, #0xfa8
    // 0x8873c0: ldp             x5, lr, [x16]
    // 0x8873c4: blr             lr
    // 0x8873c8: mov             x3, x0
    // 0x8873cc: r2 = Null
    //     0x8873cc: mov             x2, NULL
    // 0x8873d0: r1 = Null
    //     0x8873d0: mov             x1, NULL
    // 0x8873d4: stur            x3, [fp, #-0x18]
    // 0x8873d8: branchIfSmi(r0, 0x887400)
    //     0x8873d8: tbz             w0, #0, #0x887400
    // 0x8873dc: r4 = LoadClassIdInstr(r0)
    //     0x8873dc: ldur            x4, [x0, #-1]
    //     0x8873e0: ubfx            x4, x4, #0xc, #0x14
    // 0x8873e4: sub             x4, x4, #0x3b
    // 0x8873e8: cmp             x4, #1
    // 0x8873ec: b.ls            #0x887400
    // 0x8873f0: r8 = int
    //     0x8873f0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8873f4: r3 = Null
    //     0x8873f4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12fb8] Null
    //     0x8873f8: ldr             x3, [x3, #0xfb8]
    // 0x8873fc: r0 = int()
    //     0x8873fc: bl              #0x1524294  ; IsType_int_Stub
    // 0x887400: ldur            x0, [fp, #-0x18]
    // 0x887404: r1 = LoadInt32Instr(r0)
    //     0x887404: sbfx            x1, x0, #1, #0x1f
    //     0x887408: tbz             w0, #0, #0x887410
    //     0x88740c: ldur            x1, [x0, #7]
    // 0x887410: cmp             x1, #0x64
    // 0x887414: b.le            #0x887420
    // 0x887418: r0 = 100
    //     0x887418: movz            x0, #0x64
    // 0x88741c: b               #0x88742c
    // 0x887420: mov             x0, x1
    // 0x887424: b               #0x88742c
    // 0x887428: r0 = 0
    //     0x887428: movz            x0, #0
    // 0x88742c: mov             x2, x0
    // 0x887430: b               #0x887630
    // 0x887434: ldur            x3, [fp, #-8]
    // 0x887438: r0 = LoadStaticField(0xb54)
    //     0x887438: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88743c: ldr             x0, [x0, #0x16a8]
    // 0x887440: cmp             w0, NULL
    // 0x887444: b.ne            #0x887450
    // 0x887448: r0 = Null
    //     0x887448: mov             x0, NULL
    // 0x88744c: b               #0x887478
    // 0x887450: r17 = 347
    //     0x887450: movz            x17, #0x15b
    // 0x887454: ldr             w1, [x0, x17]
    // 0x887458: DecompressPointer r1
    //     0x887458: add             x1, x1, HEAP, lsl #32
    // 0x88745c: r0 = LoadClassIdInstr(r1)
    //     0x88745c: ldur            x0, [x1, #-1]
    //     0x887460: ubfx            x0, x0, #0xc, #0x14
    // 0x887464: r2 = "auctionBid"
    //     0x887464: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x887468: ldr             x2, [x2, #0xe60]
    // 0x88746c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88746c: sub             lr, x0, #0xb4
    //     0x887470: ldr             lr, [x21, lr, lsl #3]
    //     0x887474: blr             lr
    // 0x887478: cmp             w0, NULL
    // 0x88747c: b.ne            #0x887488
    // 0x887480: r3 = 0
    //     0x887480: movz            x3, #0
    // 0x887484: b               #0x88748c
    // 0x887488: mov             x3, x0
    // 0x88748c: ldur            x2, [fp, #-8]
    // 0x887490: LoadField: r4 = r2->field_f
    //     0x887490: ldur            x4, [x2, #0xf]
    // 0x887494: r0 = BoxInt64Instr(r4)
    //     0x887494: sbfiz           x0, x4, #1, #0x1f
    //     0x887498: cmp             x4, x0, asr #1
    //     0x88749c: b.eq            #0x8874a8
    //     0x8874a0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8874a4: stur            x4, [x0, #7]
    // 0x8874a8: stp             x0, x3, [SP]
    // 0x8874ac: r4 = 0
    //     0x8874ac: movz            x4, #0
    // 0x8874b0: ldr             x0, [SP, #8]
    // 0x8874b4: r16 = UnlinkedCall_0x7b3c80
    //     0x8874b4: add             x16, PP, #0x12, lsl #12  ; [pp+0x12fc8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8874b8: add             x16, x16, #0xfc8
    // 0x8874bc: ldp             x5, lr, [x16]
    // 0x8874c0: blr             lr
    // 0x8874c4: tbnz            w0, #4, #0x887628
    // 0x8874c8: r0 = LoadStaticField(0xb54)
    //     0x8874c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8874cc: ldr             x0, [x0, #0x16a8]
    // 0x8874d0: cmp             w0, NULL
    // 0x8874d4: b.ne            #0x8874e0
    // 0x8874d8: r0 = Null
    //     0x8874d8: mov             x0, NULL
    // 0x8874dc: b               #0x887508
    // 0x8874e0: r17 = 347
    //     0x8874e0: movz            x17, #0x15b
    // 0x8874e4: ldr             w1, [x0, x17]
    // 0x8874e8: DecompressPointer r1
    //     0x8874e8: add             x1, x1, HEAP, lsl #32
    // 0x8874ec: r0 = LoadClassIdInstr(r1)
    //     0x8874ec: ldur            x0, [x1, #-1]
    //     0x8874f0: ubfx            x0, x0, #0xc, #0x14
    // 0x8874f4: r2 = "auctionBid"
    //     0x8874f4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x8874f8: ldr             x2, [x2, #0xe60]
    // 0x8874fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8874fc: sub             lr, x0, #0xb4
    //     0x887500: ldr             lr, [x21, lr, lsl #3]
    //     0x887504: blr             lr
    // 0x887508: cmp             w0, NULL
    // 0x88750c: b.ne            #0x887518
    // 0x887510: r3 = 0
    //     0x887510: movz            x3, #0
    // 0x887514: b               #0x88751c
    // 0x887518: mov             x3, x0
    // 0x88751c: ldur            x2, [fp, #-8]
    // 0x887520: LoadField: r4 = r2->field_f
    //     0x887520: ldur            x4, [x2, #0xf]
    // 0x887524: r0 = BoxInt64Instr(r4)
    //     0x887524: sbfiz           x0, x4, #1, #0x1f
    //     0x887528: cmp             x4, x0, asr #1
    //     0x88752c: b.eq            #0x887538
    //     0x887530: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887534: stur            x4, [x0, #7]
    // 0x887538: stp             x0, x3, [SP]
    // 0x88753c: r4 = 0
    //     0x88753c: movz            x4, #0
    // 0x887540: ldr             x0, [SP, #8]
    // 0x887544: r16 = UnlinkedCall_0x7b3c80
    //     0x887544: add             x16, PP, #0x12, lsl #12  ; [pp+0x12fd8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887548: add             x16, x16, #0xfd8
    // 0x88754c: ldp             x5, lr, [x16]
    // 0x887550: blr             lr
    // 0x887554: mov             x2, x0
    // 0x887558: ldur            x0, [fp, #-8]
    // 0x88755c: LoadField: r3 = r0->field_f
    //     0x88755c: ldur            x3, [x0, #0xf]
    // 0x887560: r0 = BoxInt64Instr(r3)
    //     0x887560: sbfiz           x0, x3, #1, #0x1f
    //     0x887564: cmp             x3, x0, asr #1
    //     0x887568: b.eq            #0x887574
    //     0x88756c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887570: stur            x3, [x0, #7]
    // 0x887574: stp             x0, x2, [SP]
    // 0x887578: r4 = 0
    //     0x887578: movz            x4, #0
    // 0x88757c: ldr             x0, [SP, #8]
    // 0x887580: r16 = UnlinkedCall_0x7b3c80
    //     0x887580: add             x16, PP, #0x12, lsl #12  ; [pp+0x12fe8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887584: add             x16, x16, #0xfe8
    // 0x887588: ldp             x5, lr, [x16]
    // 0x88758c: blr             lr
    // 0x887590: r16 = 200
    //     0x887590: movz            x16, #0xc8
    // 0x887594: stp             x16, x0, [SP]
    // 0x887598: r4 = 0
    //     0x887598: movz            x4, #0
    // 0x88759c: ldr             x0, [SP, #8]
    // 0x8875a0: r16 = UnlinkedCall_0x7b3c80
    //     0x8875a0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12ff8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8875a4: add             x16, x16, #0xff8
    // 0x8875a8: ldp             x5, lr, [x16]
    // 0x8875ac: blr             lr
    // 0x8875b0: str             x0, [SP]
    // 0x8875b4: r4 = 0
    //     0x8875b4: movz            x4, #0
    // 0x8875b8: ldr             x0, [SP]
    // 0x8875bc: r5 = UnlinkedCall_0x7b3c80
    //     0x8875bc: add             x16, PP, #0x13, lsl #12  ; [pp+0x13008] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8875c0: ldp             x5, lr, [x16, #8]
    // 0x8875c4: blr             lr
    // 0x8875c8: mov             x3, x0
    // 0x8875cc: r2 = Null
    //     0x8875cc: mov             x2, NULL
    // 0x8875d0: r1 = Null
    //     0x8875d0: mov             x1, NULL
    // 0x8875d4: stur            x3, [fp, #-8]
    // 0x8875d8: branchIfSmi(r0, 0x887600)
    //     0x8875d8: tbz             w0, #0, #0x887600
    // 0x8875dc: r4 = LoadClassIdInstr(r0)
    //     0x8875dc: ldur            x4, [x0, #-1]
    //     0x8875e0: ubfx            x4, x4, #0xc, #0x14
    // 0x8875e4: sub             x4, x4, #0x3b
    // 0x8875e8: cmp             x4, #1
    // 0x8875ec: b.ls            #0x887600
    // 0x8875f0: r8 = int
    //     0x8875f0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8875f4: r3 = Null
    //     0x8875f4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13018] Null
    //     0x8875f8: ldr             x3, [x3, #0x18]
    // 0x8875fc: r0 = int()
    //     0x8875fc: bl              #0x1524294  ; IsType_int_Stub
    // 0x887600: ldur            x0, [fp, #-8]
    // 0x887604: r1 = LoadInt32Instr(r0)
    //     0x887604: sbfx            x1, x0, #1, #0x1f
    //     0x887608: tbz             w0, #0, #0x887610
    //     0x88760c: ldur            x1, [x0, #7]
    // 0x887610: cmp             x1, #0x64
    // 0x887614: b.le            #0x887620
    // 0x887618: r0 = 100
    //     0x887618: movz            x0, #0x64
    // 0x88761c: b               #0x88762c
    // 0x887620: mov             x0, x1
    // 0x887624: b               #0x88762c
    // 0x887628: r0 = 0
    //     0x887628: movz            x0, #0
    // 0x88762c: mov             x2, x0
    // 0x887630: stur            x2, [fp, #-0x28]
    // 0x887634: r0 = BoxInt64Instr(r2)
    //     0x887634: sbfiz           x0, x2, #1, #0x1f
    //     0x887638: cmp             x2, x0, asr #1
    //     0x88763c: b.eq            #0x887648
    //     0x887640: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887644: stur            x2, [x0, #7]
    // 0x887648: r1 = 59
    //     0x887648: movz            x1, #0x3b
    // 0x88764c: branchIfSmi(r0, 0x887658)
    //     0x88764c: tbz             w0, #0, #0x887658
    // 0x887650: r1 = LoadClassIdInstr(r0)
    //     0x887650: ldur            x1, [x0, #-1]
    //     0x887654: ubfx            x1, x1, #0xc, #0x14
    // 0x887658: str             x0, [SP]
    // 0x88765c: mov             x0, x1
    // 0x887660: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x887660: ldr             x4, [PP, #0x2a8]  ; [pp+0x2a8] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x887664: r0 = GDT[cid_x0 + 0x4756]()
    //     0x887664: movz            x17, #0x4756
    //     0x887668: add             lr, x0, x17
    //     0x88766c: ldr             lr, [x21, lr, lsl #3]
    //     0x887670: blr             lr
    // 0x887674: r16 = "Chance: "
    //     0x887674: add             x16, PP, #0x12, lsl #12  ; [pp+0x12f38] "Chance: "
    //     0x887678: ldr             x16, [x16, #0xf38]
    // 0x88767c: stp             x0, x16, [SP]
    // 0x887680: r0 = +()
    //     0x887680: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x887684: mov             x1, x0
    // 0x887688: r0 = print()
    //     0x887688: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x88768c: ldur            x0, [fp, #-0x28]
    // 0x887690: b               #0x88db2c
    // 0x887694: r16 = "auctionBid"
    //     0x887694: add             x16, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x887698: ldr             x16, [x16, #0xe60]
    // 0x88769c: ldur            lr, [fp, #-0x20]
    // 0x8876a0: stp             lr, x16, [SP]
    // 0x8876a4: r0 = ==()
    //     0x8876a4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8876a8: tbnz            w0, #4, #0x887750
    // 0x8876ac: r0 = LoadStaticField(0xb54)
    //     0x8876ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8876b0: ldr             x0, [x0, #0x16a8]
    // 0x8876b4: cmp             w0, NULL
    // 0x8876b8: b.ne            #0x8876c4
    // 0x8876bc: r0 = Null
    //     0x8876bc: mov             x0, NULL
    // 0x8876c0: b               #0x8876ec
    // 0x8876c4: r17 = 347
    //     0x8876c4: movz            x17, #0x15b
    // 0x8876c8: ldr             w1, [x0, x17]
    // 0x8876cc: DecompressPointer r1
    //     0x8876cc: add             x1, x1, HEAP, lsl #32
    // 0x8876d0: r0 = LoadClassIdInstr(r1)
    //     0x8876d0: ldur            x0, [x1, #-1]
    //     0x8876d4: ubfx            x0, x0, #0xc, #0x14
    // 0x8876d8: r2 = "auctionBid"
    //     0x8876d8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12e60] "auctionBid"
    //     0x8876dc: ldr             x2, [x2, #0xe60]
    // 0x8876e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8876e0: sub             lr, x0, #0xb4
    //     0x8876e4: ldr             lr, [x21, lr, lsl #3]
    //     0x8876e8: blr             lr
    // 0x8876ec: cmp             w0, NULL
    // 0x8876f0: b.ne            #0x8876fc
    // 0x8876f4: r3 = 0
    //     0x8876f4: movz            x3, #0
    // 0x8876f8: b               #0x887700
    // 0x8876fc: mov             x3, x0
    // 0x887700: mov             x0, x3
    // 0x887704: stur            x3, [fp, #-8]
    // 0x887708: r2 = Null
    //     0x887708: mov             x2, NULL
    // 0x88770c: r1 = Null
    //     0x88770c: mov             x1, NULL
    // 0x887710: branchIfSmi(r0, 0x887738)
    //     0x887710: tbz             w0, #0, #0x887738
    // 0x887714: r4 = LoadClassIdInstr(r0)
    //     0x887714: ldur            x4, [x0, #-1]
    //     0x887718: ubfx            x4, x4, #0xc, #0x14
    // 0x88771c: sub             x4, x4, #0x3b
    // 0x887720: cmp             x4, #1
    // 0x887724: b.ls            #0x887738
    // 0x887728: r8 = int
    //     0x887728: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88772c: r3 = Null
    //     0x88772c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13028] Null
    //     0x887730: ldr             x3, [x3, #0x28]
    // 0x887734: r0 = int()
    //     0x887734: bl              #0x1524294  ; IsType_int_Stub
    // 0x887738: ldur            x0, [fp, #-8]
    // 0x88773c: r1 = LoadInt32Instr(r0)
    //     0x88773c: sbfx            x1, x0, #1, #0x1f
    //     0x887740: tbz             w0, #0, #0x887748
    //     0x887744: ldur            x1, [x0, #7]
    // 0x887748: mov             x0, x1
    // 0x88774c: b               #0x88db2c
    // 0x887750: r16 = "yourBid"
    //     0x887750: add             x16, PP, #0x13, lsl #12  ; [pp+0x13038] "yourBid"
    //     0x887754: ldr             x16, [x16, #0x38]
    // 0x887758: ldur            lr, [fp, #-0x20]
    // 0x88775c: stp             lr, x16, [SP]
    // 0x887760: r0 = ==()
    //     0x887760: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887764: tbnz            w0, #4, #0x88780c
    // 0x887768: r0 = LoadStaticField(0xb54)
    //     0x887768: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88776c: ldr             x0, [x0, #0x16a8]
    // 0x887770: cmp             w0, NULL
    // 0x887774: b.ne            #0x887780
    // 0x887778: r0 = Null
    //     0x887778: mov             x0, NULL
    // 0x88777c: b               #0x8877a8
    // 0x887780: r17 = 347
    //     0x887780: movz            x17, #0x15b
    // 0x887784: ldr             w1, [x0, x17]
    // 0x887788: DecompressPointer r1
    //     0x887788: add             x1, x1, HEAP, lsl #32
    // 0x88778c: r0 = LoadClassIdInstr(r1)
    //     0x88778c: ldur            x0, [x1, #-1]
    //     0x887790: ubfx            x0, x0, #0xc, #0x14
    // 0x887794: r2 = "yourBid"
    //     0x887794: add             x2, PP, #0x13, lsl #12  ; [pp+0x13038] "yourBid"
    //     0x887798: ldr             x2, [x2, #0x38]
    // 0x88779c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88779c: sub             lr, x0, #0xb4
    //     0x8877a0: ldr             lr, [x21, lr, lsl #3]
    //     0x8877a4: blr             lr
    // 0x8877a8: cmp             w0, NULL
    // 0x8877ac: b.ne            #0x8877b8
    // 0x8877b0: r3 = 0
    //     0x8877b0: movz            x3, #0
    // 0x8877b4: b               #0x8877bc
    // 0x8877b8: mov             x3, x0
    // 0x8877bc: mov             x0, x3
    // 0x8877c0: stur            x3, [fp, #-8]
    // 0x8877c4: r2 = Null
    //     0x8877c4: mov             x2, NULL
    // 0x8877c8: r1 = Null
    //     0x8877c8: mov             x1, NULL
    // 0x8877cc: branchIfSmi(r0, 0x8877f4)
    //     0x8877cc: tbz             w0, #0, #0x8877f4
    // 0x8877d0: r4 = LoadClassIdInstr(r0)
    //     0x8877d0: ldur            x4, [x0, #-1]
    //     0x8877d4: ubfx            x4, x4, #0xc, #0x14
    // 0x8877d8: sub             x4, x4, #0x3b
    // 0x8877dc: cmp             x4, #1
    // 0x8877e0: b.ls            #0x8877f4
    // 0x8877e4: r8 = int
    //     0x8877e4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8877e8: r3 = Null
    //     0x8877e8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13040] Null
    //     0x8877ec: ldr             x3, [x3, #0x40]
    // 0x8877f0: r0 = int()
    //     0x8877f0: bl              #0x1524294  ; IsType_int_Stub
    // 0x8877f4: ldur            x0, [fp, #-8]
    // 0x8877f8: r1 = LoadInt32Instr(r0)
    //     0x8877f8: sbfx            x1, x0, #1, #0x1f
    //     0x8877fc: tbz             w0, #0, #0x887804
    //     0x887800: ldur            x1, [x0, #7]
    // 0x887804: mov             x0, x1
    // 0x887808: b               #0x88db2c
    // 0x88780c: r16 = "nbaTraining"
    //     0x88780c: add             x16, PP, #0x13, lsl #12  ; [pp+0x13050] "nbaTraining"
    //     0x887810: ldr             x16, [x16, #0x50]
    // 0x887814: ldur            lr, [fp, #-0x20]
    // 0x887818: stp             lr, x16, [SP]
    // 0x88781c: r0 = ==()
    //     0x88781c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887820: tbnz            w0, #4, #0x887a40
    // 0x887824: r0 = LoadStaticField(0xb54)
    //     0x887824: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887828: ldr             x0, [x0, #0x16a8]
    // 0x88782c: cmp             w0, NULL
    // 0x887830: b.ne            #0x88783c
    // 0x887834: r0 = Null
    //     0x887834: mov             x0, NULL
    // 0x887838: b               #0x887864
    // 0x88783c: r17 = 335
    //     0x88783c: movz            x17, #0x14f
    // 0x887840: ldr             w1, [x0, x17]
    // 0x887844: DecompressPointer r1
    //     0x887844: add             x1, x1, HEAP, lsl #32
    // 0x887848: r0 = LoadClassIdInstr(r1)
    //     0x887848: ldur            x0, [x1, #-1]
    //     0x88784c: ubfx            x0, x0, #0xc, #0x14
    // 0x887850: r2 = "lcwmedal"
    //     0x887850: add             x2, PP, #0x13, lsl #12  ; [pp+0x13058] "lcwmedal"
    //     0x887854: ldr             x2, [x2, #0x58]
    // 0x887858: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887858: sub             lr, x0, #0xb4
    //     0x88785c: ldr             lr, [x21, lr, lsl #3]
    //     0x887860: blr             lr
    // 0x887864: r1 = 59
    //     0x887864: movz            x1, #0x3b
    // 0x887868: branchIfSmi(r0, 0x887874)
    //     0x887868: tbz             w0, #0, #0x887874
    // 0x88786c: r1 = LoadClassIdInstr(r0)
    //     0x88786c: ldur            x1, [x0, #-1]
    //     0x887870: ubfx            x1, x1, #0xc, #0x14
    // 0x887874: r16 = true
    //     0x887874: add             x16, NULL, #0x20  ; true
    // 0x887878: stp             x16, x0, [SP]
    // 0x88787c: mov             x0, x1
    // 0x887880: mov             lr, x0
    // 0x887884: ldr             lr, [x21, lr, lsl #3]
    // 0x887888: blr             lr
    // 0x88788c: tst             x0, #0x10
    // 0x887890: cset            x3, eq
    // 0x887894: lsl             x3, x3, #2
    // 0x887898: stur            x3, [fp, #-8]
    // 0x88789c: r0 = LoadStaticField(0xb54)
    //     0x88789c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8878a0: ldr             x0, [x0, #0x16a8]
    // 0x8878a4: cmp             w0, NULL
    // 0x8878a8: b.ne            #0x8878b4
    // 0x8878ac: r0 = Null
    //     0x8878ac: mov             x0, NULL
    // 0x8878b0: b               #0x8878dc
    // 0x8878b4: r17 = 335
    //     0x8878b4: movz            x17, #0x14f
    // 0x8878b8: ldr             w1, [x0, x17]
    // 0x8878bc: DecompressPointer r1
    //     0x8878bc: add             x1, x1, HEAP, lsl #32
    // 0x8878c0: r0 = LoadClassIdInstr(r1)
    //     0x8878c0: ldur            x0, [x1, #-1]
    //     0x8878c4: ubfx            x0, x0, #0xc, #0x14
    // 0x8878c8: r2 = "ldmedal"
    //     0x8878c8: add             x2, PP, #0x13, lsl #12  ; [pp+0x13060] "ldmedal"
    //     0x8878cc: ldr             x2, [x2, #0x60]
    // 0x8878d0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8878d0: sub             lr, x0, #0xb4
    //     0x8878d4: ldr             lr, [x21, lr, lsl #3]
    //     0x8878d8: blr             lr
    // 0x8878dc: r1 = 59
    //     0x8878dc: movz            x1, #0x3b
    // 0x8878e0: branchIfSmi(r0, 0x8878ec)
    //     0x8878e0: tbz             w0, #0, #0x8878ec
    // 0x8878e4: r1 = LoadClassIdInstr(r0)
    //     0x8878e4: ldur            x1, [x0, #-1]
    //     0x8878e8: ubfx            x1, x1, #0xc, #0x14
    // 0x8878ec: r16 = true
    //     0x8878ec: add             x16, NULL, #0x20  ; true
    // 0x8878f0: stp             x16, x0, [SP]
    // 0x8878f4: mov             x0, x1
    // 0x8878f8: mov             lr, x0
    // 0x8878fc: ldr             lr, [x21, lr, lsl #3]
    // 0x887900: blr             lr
    // 0x887904: tbnz            w0, #4, #0x88791c
    // 0x887908: ldur            x0, [fp, #-8]
    // 0x88790c: r1 = LoadInt32Instr(r0)
    //     0x88790c: sbfx            x1, x0, #1, #0x1f
    // 0x887910: add             x0, x1, #2
    // 0x887914: mov             x3, x0
    // 0x887918: b               #0x887928
    // 0x88791c: ldur            x0, [fp, #-8]
    // 0x887920: r1 = LoadInt32Instr(r0)
    //     0x887920: sbfx            x1, x0, #1, #0x1f
    // 0x887924: mov             x3, x1
    // 0x887928: stur            x3, [fp, #-0x28]
    // 0x88792c: r0 = LoadStaticField(0xb54)
    //     0x88792c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887930: ldr             x0, [x0, #0x16a8]
    // 0x887934: cmp             w0, NULL
    // 0x887938: b.ne            #0x887944
    // 0x88793c: r0 = Null
    //     0x88793c: mov             x0, NULL
    // 0x887940: b               #0x88796c
    // 0x887944: r17 = 335
    //     0x887944: movz            x17, #0x14f
    // 0x887948: ldr             w1, [x0, x17]
    // 0x88794c: DecompressPointer r1
    //     0x88794c: add             x1, x1, HEAP, lsl #32
    // 0x887950: r0 = LoadClassIdInstr(r1)
    //     0x887950: ldur            x0, [x1, #-1]
    //     0x887954: ubfx            x0, x0, #0xc, #0x14
    // 0x887958: r2 = "thmedal"
    //     0x887958: add             x2, PP, #0x13, lsl #12  ; [pp+0x13068] "thmedal"
    //     0x88795c: ldr             x2, [x2, #0x68]
    // 0x887960: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887960: sub             lr, x0, #0xb4
    //     0x887964: ldr             lr, [x21, lr, lsl #3]
    //     0x887968: blr             lr
    // 0x88796c: r1 = 59
    //     0x88796c: movz            x1, #0x3b
    // 0x887970: branchIfSmi(r0, 0x88797c)
    //     0x887970: tbz             w0, #0, #0x88797c
    // 0x887974: r1 = LoadClassIdInstr(r0)
    //     0x887974: ldur            x1, [x0, #-1]
    //     0x887978: ubfx            x1, x1, #0xc, #0x14
    // 0x88797c: r16 = true
    //     0x88797c: add             x16, NULL, #0x20  ; true
    // 0x887980: stp             x16, x0, [SP]
    // 0x887984: mov             x0, x1
    // 0x887988: mov             lr, x0
    // 0x88798c: ldr             lr, [x21, lr, lsl #3]
    // 0x887990: blr             lr
    // 0x887994: tbnz            w0, #4, #0x8879a8
    // 0x887998: ldur            x0, [fp, #-0x28]
    // 0x88799c: add             x1, x0, #2
    // 0x8879a0: mov             x3, x1
    // 0x8879a4: b               #0x8879b0
    // 0x8879a8: ldur            x0, [fp, #-0x28]
    // 0x8879ac: mov             x3, x0
    // 0x8879b0: stur            x3, [fp, #-0x28]
    // 0x8879b4: r0 = LoadStaticField(0xb54)
    //     0x8879b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8879b8: ldr             x0, [x0, #0x16a8]
    // 0x8879bc: cmp             w0, NULL
    // 0x8879c0: b.ne            #0x8879cc
    // 0x8879c4: r0 = Null
    //     0x8879c4: mov             x0, NULL
    // 0x8879c8: b               #0x8879f4
    // 0x8879cc: r17 = 335
    //     0x8879cc: movz            x17, #0x14f
    // 0x8879d0: ldr             w1, [x0, x17]
    // 0x8879d4: DecompressPointer r1
    //     0x8879d4: add             x1, x1, HEAP, lsl #32
    // 0x8879d8: r0 = LoadClassIdInstr(r1)
    //     0x8879d8: ldur            x0, [x1, #-1]
    //     0x8879dc: ubfx            x0, x0, #0xc, #0x14
    // 0x8879e0: r2 = "pgmedal"
    //     0x8879e0: add             x2, PP, #0x13, lsl #12  ; [pp+0x13070] "pgmedal"
    //     0x8879e4: ldr             x2, [x2, #0x70]
    // 0x8879e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8879e8: sub             lr, x0, #0xb4
    //     0x8879ec: ldr             lr, [x21, lr, lsl #3]
    //     0x8879f0: blr             lr
    // 0x8879f4: r1 = 59
    //     0x8879f4: movz            x1, #0x3b
    // 0x8879f8: branchIfSmi(r0, 0x887a04)
    //     0x8879f8: tbz             w0, #0, #0x887a04
    // 0x8879fc: r1 = LoadClassIdInstr(r0)
    //     0x8879fc: ldur            x1, [x0, #-1]
    //     0x887a00: ubfx            x1, x1, #0xc, #0x14
    // 0x887a04: r16 = true
    //     0x887a04: add             x16, NULL, #0x20  ; true
    // 0x887a08: stp             x16, x0, [SP]
    // 0x887a0c: mov             x0, x1
    // 0x887a10: mov             lr, x0
    // 0x887a14: ldr             lr, [x21, lr, lsl #3]
    // 0x887a18: blr             lr
    // 0x887a1c: tbnz            w0, #4, #0x887a30
    // 0x887a20: ldur            x0, [fp, #-0x28]
    // 0x887a24: add             x1, x0, #2
    // 0x887a28: mov             x0, x1
    // 0x887a2c: b               #0x887a34
    // 0x887a30: ldur            x0, [fp, #-0x28]
    // 0x887a34: add             x1, x0, #3
    // 0x887a38: mov             x0, x1
    // 0x887a3c: b               #0x88db2c
    // 0x887a40: r16 = "nbaDailyTraining"
    //     0x887a40: add             x16, PP, #0x13, lsl #12  ; [pp+0x13078] "nbaDailyTraining"
    //     0x887a44: ldr             x16, [x16, #0x78]
    // 0x887a48: ldur            lr, [fp, #-0x20]
    // 0x887a4c: stp             lr, x16, [SP]
    // 0x887a50: r0 = ==()
    //     0x887a50: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887a54: tbnz            w0, #4, #0x887b34
    // 0x887a58: r0 = LoadStaticField(0xb54)
    //     0x887a58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887a5c: ldr             x0, [x0, #0x16a8]
    // 0x887a60: cmp             w0, NULL
    // 0x887a64: b.eq            #0x887b2c
    // 0x887a68: r17 = 347
    //     0x887a68: movz            x17, #0x15b
    // 0x887a6c: ldr             w1, [x0, x17]
    // 0x887a70: DecompressPointer r1
    //     0x887a70: add             x1, x1, HEAP, lsl #32
    // 0x887a74: r0 = LoadClassIdInstr(r1)
    //     0x887a74: ldur            x0, [x1, #-1]
    //     0x887a78: ubfx            x0, x0, #0xc, #0x14
    // 0x887a7c: r2 = "nbaDailyTraining"
    //     0x887a7c: add             x2, PP, #0x13, lsl #12  ; [pp+0x13078] "nbaDailyTraining"
    //     0x887a80: ldr             x2, [x2, #0x78]
    // 0x887a84: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887a84: sub             lr, x0, #0xb4
    //     0x887a88: ldr             lr, [x21, lr, lsl #3]
    //     0x887a8c: blr             lr
    // 0x887a90: cmp             w0, NULL
    // 0x887a94: b.eq            #0x887b2c
    // 0x887a98: r0 = LoadStaticField(0xb54)
    //     0x887a98: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887a9c: ldr             x0, [x0, #0x16a8]
    // 0x887aa0: cmp             w0, NULL
    // 0x887aa4: b.ne            #0x887ab0
    // 0x887aa8: r3 = Null
    //     0x887aa8: mov             x3, NULL
    // 0x887aac: b               #0x887adc
    // 0x887ab0: r17 = 347
    //     0x887ab0: movz            x17, #0x15b
    // 0x887ab4: ldr             w1, [x0, x17]
    // 0x887ab8: DecompressPointer r1
    //     0x887ab8: add             x1, x1, HEAP, lsl #32
    // 0x887abc: r0 = LoadClassIdInstr(r1)
    //     0x887abc: ldur            x0, [x1, #-1]
    //     0x887ac0: ubfx            x0, x0, #0xc, #0x14
    // 0x887ac4: r2 = "nbaDailyTraining"
    //     0x887ac4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13078] "nbaDailyTraining"
    //     0x887ac8: ldr             x2, [x2, #0x78]
    // 0x887acc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887acc: sub             lr, x0, #0xb4
    //     0x887ad0: ldr             lr, [x21, lr, lsl #3]
    //     0x887ad4: blr             lr
    // 0x887ad8: mov             x3, x0
    // 0x887adc: mov             x0, x3
    // 0x887ae0: stur            x3, [fp, #-8]
    // 0x887ae4: r2 = Null
    //     0x887ae4: mov             x2, NULL
    // 0x887ae8: r1 = Null
    //     0x887ae8: mov             x1, NULL
    // 0x887aec: branchIfSmi(r0, 0x887b14)
    //     0x887aec: tbz             w0, #0, #0x887b14
    // 0x887af0: r4 = LoadClassIdInstr(r0)
    //     0x887af0: ldur            x4, [x0, #-1]
    //     0x887af4: ubfx            x4, x4, #0xc, #0x14
    // 0x887af8: sub             x4, x4, #0x3b
    // 0x887afc: cmp             x4, #1
    // 0x887b00: b.ls            #0x887b14
    // 0x887b04: r8 = int
    //     0x887b04: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x887b08: r3 = Null
    //     0x887b08: add             x3, PP, #0x13, lsl #12  ; [pp+0x13080] Null
    //     0x887b0c: ldr             x3, [x3, #0x80]
    // 0x887b10: r0 = int()
    //     0x887b10: bl              #0x1524294  ; IsType_int_Stub
    // 0x887b14: ldur            x0, [fp, #-8]
    // 0x887b18: r1 = LoadInt32Instr(r0)
    //     0x887b18: sbfx            x1, x0, #1, #0x1f
    //     0x887b1c: tbz             w0, #0, #0x887b24
    //     0x887b20: ldur            x1, [x0, #7]
    // 0x887b24: mov             x0, x1
    // 0x887b28: b               #0x88db2c
    // 0x887b2c: r0 = 0
    //     0x887b2c: movz            x0, #0
    // 0x887b30: b               #0x88db2c
    // 0x887b34: r16 = "jailTime"
    //     0x887b34: add             x16, PP, #0x13, lsl #12  ; [pp+0x13090] "jailTime"
    //     0x887b38: ldr             x16, [x16, #0x90]
    // 0x887b3c: ldur            lr, [fp, #-0x20]
    // 0x887b40: stp             lr, x16, [SP]
    // 0x887b44: r0 = ==()
    //     0x887b44: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887b48: tbnz            w0, #4, #0x887c30
    // 0x887b4c: r0 = LoadStaticField(0xb54)
    //     0x887b4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887b50: ldr             x0, [x0, #0x16a8]
    // 0x887b54: cmp             w0, NULL
    // 0x887b58: b.eq            #0x887c28
    // 0x887b5c: r17 = 327
    //     0x887b5c: movz            x17, #0x147
    // 0x887b60: ldr             w1, [x0, x17]
    // 0x887b64: DecompressPointer r1
    //     0x887b64: add             x1, x1, HEAP, lsl #32
    // 0x887b68: r0 = LoadClassIdInstr(r1)
    //     0x887b68: ldur            x0, [x1, #-1]
    //     0x887b6c: ubfx            x0, x0, #0xc, #0x14
    // 0x887b70: r2 = "prisonExtend"
    //     0x887b70: add             x2, PP, #0x11, lsl #12  ; [pp+0x11338] "prisonExtend"
    //     0x887b74: ldr             x2, [x2, #0x338]
    // 0x887b78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887b78: sub             lr, x0, #0xb4
    //     0x887b7c: ldr             lr, [x21, lr, lsl #3]
    //     0x887b80: blr             lr
    // 0x887b84: cmp             w0, NULL
    // 0x887b88: b.eq            #0x887c28
    // 0x887b8c: r0 = LoadStaticField(0xb54)
    //     0x887b8c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887b90: ldr             x0, [x0, #0x16a8]
    // 0x887b94: cmp             w0, NULL
    // 0x887b98: b.ne            #0x887ba4
    // 0x887b9c: r3 = Null
    //     0x887b9c: mov             x3, NULL
    // 0x887ba0: b               #0x887bd0
    // 0x887ba4: r17 = 327
    //     0x887ba4: movz            x17, #0x147
    // 0x887ba8: ldr             w1, [x0, x17]
    // 0x887bac: DecompressPointer r1
    //     0x887bac: add             x1, x1, HEAP, lsl #32
    // 0x887bb0: r0 = LoadClassIdInstr(r1)
    //     0x887bb0: ldur            x0, [x1, #-1]
    //     0x887bb4: ubfx            x0, x0, #0xc, #0x14
    // 0x887bb8: r2 = "prisonExtend"
    //     0x887bb8: add             x2, PP, #0x11, lsl #12  ; [pp+0x11338] "prisonExtend"
    //     0x887bbc: ldr             x2, [x2, #0x338]
    // 0x887bc0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887bc0: sub             lr, x0, #0xb4
    //     0x887bc4: ldr             lr, [x21, lr, lsl #3]
    //     0x887bc8: blr             lr
    // 0x887bcc: mov             x3, x0
    // 0x887bd0: mov             x0, x3
    // 0x887bd4: stur            x3, [fp, #-8]
    // 0x887bd8: r2 = Null
    //     0x887bd8: mov             x2, NULL
    // 0x887bdc: r1 = Null
    //     0x887bdc: mov             x1, NULL
    // 0x887be0: r4 = 59
    //     0x887be0: movz            x4, #0x3b
    // 0x887be4: branchIfSmi(r0, 0x887bf0)
    //     0x887be4: tbz             w0, #0, #0x887bf0
    // 0x887be8: r4 = LoadClassIdInstr(r0)
    //     0x887be8: ldur            x4, [x0, #-1]
    //     0x887bec: ubfx            x4, x4, #0xc, #0x14
    // 0x887bf0: cmp             x4, #0x3e
    // 0x887bf4: b.eq            #0x887c08
    // 0x887bf8: r8 = bool
    //     0x887bf8: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x887bfc: r3 = Null
    //     0x887bfc: add             x3, PP, #0x13, lsl #12  ; [pp+0x13098] Null
    //     0x887c00: ldr             x3, [x3, #0x98]
    // 0x887c04: r0 = bool()
    //     0x887c04: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x887c08: ldur            x0, [fp, #-8]
    // 0x887c0c: tst             x0, #0x10
    // 0x887c10: cset            x1, ne
    // 0x887c14: sub             x1, x1, #1
    // 0x887c18: and             x1, x1, #0x3c
    // 0x887c1c: add             x1, x1, #0x3c
    // 0x887c20: r0 = LoadInt32Instr(r1)
    //     0x887c20: sbfx            x0, x1, #1, #0x1f
    // 0x887c24: b               #0x88db2c
    // 0x887c28: r0 = 30
    //     0x887c28: movz            x0, #0x1e
    // 0x887c2c: b               #0x88db2c
    // 0x887c30: r16 = "dailyAllowance"
    //     0x887c30: add             x16, PP, #0x13, lsl #12  ; [pp+0x130a8] "dailyAllowance"
    //     0x887c34: ldr             x16, [x16, #0xa8]
    // 0x887c38: ldur            lr, [fp, #-0x20]
    // 0x887c3c: stp             lr, x16, [SP]
    // 0x887c40: r0 = ==()
    //     0x887c40: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887c44: tbnz            w0, #4, #0x887db0
    // 0x887c48: r2 = LoadStaticField(0xb54)
    //     0x887c48: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x887c4c: ldr             x2, [x2, #0x16a8]
    // 0x887c50: cmp             w2, NULL
    // 0x887c54: b.ne            #0x887c60
    // 0x887c58: r0 = Null
    //     0x887c58: mov             x0, NULL
    // 0x887c5c: b               #0x887c78
    // 0x887c60: LoadField: r3 = r2->field_6b
    //     0x887c60: ldur            x3, [x2, #0x6b]
    // 0x887c64: r0 = BoxInt64Instr(r3)
    //     0x887c64: sbfiz           x0, x3, #1, #0x1f
    //     0x887c68: cmp             x3, x0, asr #1
    //     0x887c6c: b.eq            #0x887c78
    //     0x887c70: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887c74: stur            x3, [x0, #7]
    // 0x887c78: cmp             w0, NULL
    // 0x887c7c: b.ne            #0x887c88
    // 0x887c80: r0 = 0
    //     0x887c80: movz            x0, #0
    // 0x887c84: b               #0x887c98
    // 0x887c88: r1 = LoadInt32Instr(r0)
    //     0x887c88: sbfx            x1, x0, #1, #0x1f
    //     0x887c8c: tbz             w0, #0, #0x887c94
    //     0x887c90: ldur            x1, [x0, #7]
    // 0x887c94: mov             x0, x1
    // 0x887c98: cmp             x0, #0xf
    // 0x887c9c: b.lt            #0x887d2c
    // 0x887ca0: cmp             w2, NULL
    // 0x887ca4: b.ne            #0x887cb0
    // 0x887ca8: r0 = Null
    //     0x887ca8: mov             x0, NULL
    // 0x887cac: b               #0x887cc8
    // 0x887cb0: LoadField: r3 = r2->field_6b
    //     0x887cb0: ldur            x3, [x2, #0x6b]
    // 0x887cb4: r0 = BoxInt64Instr(r3)
    //     0x887cb4: sbfiz           x0, x3, #1, #0x1f
    //     0x887cb8: cmp             x3, x0, asr #1
    //     0x887cbc: b.eq            #0x887cc8
    //     0x887cc0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x887cc4: stur            x3, [x0, #7]
    // 0x887cc8: cmp             w0, NULL
    // 0x887ccc: b.ne            #0x887cd8
    // 0x887cd0: r0 = 0
    //     0x887cd0: movz            x0, #0
    // 0x887cd4: b               #0x887ce8
    // 0x887cd8: r1 = LoadInt32Instr(r0)
    //     0x887cd8: sbfx            x1, x0, #1, #0x1f
    //     0x887cdc: tbz             w0, #0, #0x887ce4
    //     0x887ce0: ldur            x1, [x0, #7]
    // 0x887ce4: mov             x0, x1
    // 0x887ce8: d0 = 5.000000
    //     0x887ce8: fmov            d0, #5.00000000
    // 0x887cec: scvtf           d1, x0
    // 0x887cf0: fdiv            d2, d1, d0
    // 0x887cf4: fcmp            d2, d2
    // 0x887cf8: b.vs            #0x88dc94
    // 0x887cfc: fcvtms          x0, d2
    // 0x887d00: asr             x16, x0, #0x1e
    // 0x887d04: cmp             x16, x0, asr #63
    // 0x887d08: b.ne            #0x88dc94
    // 0x887d0c: lsl             x0, x0, #1
    // 0x887d10: r1 = LoadInt32Instr(r0)
    //     0x887d10: sbfx            x1, x0, #1, #0x1f
    //     0x887d14: tbz             w0, #0, #0x887d1c
    //     0x887d18: ldur            x1, [x0, #7]
    // 0x887d1c: r16 = 25
    //     0x887d1c: movz            x16, #0x19
    // 0x887d20: mul             x0, x1, x16
    // 0x887d24: mov             x3, x0
    // 0x887d28: b               #0x887d30
    // 0x887d2c: r3 = 100
    //     0x887d2c: movz            x3, #0x64
    // 0x887d30: stur            x3, [fp, #-0x28]
    // 0x887d34: cmp             w2, NULL
    // 0x887d38: b.ne            #0x887d44
    // 0x887d3c: r0 = Null
    //     0x887d3c: mov             x0, NULL
    // 0x887d40: b               #0x887d6c
    // 0x887d44: r17 = 327
    //     0x887d44: movz            x17, #0x147
    // 0x887d48: ldr             w1, [x2, x17]
    // 0x887d4c: DecompressPointer r1
    //     0x887d4c: add             x1, x1, HEAP, lsl #32
    // 0x887d50: r0 = LoadClassIdInstr(r1)
    //     0x887d50: ldur            x0, [x1, #-1]
    //     0x887d54: ubfx            x0, x0, #0xc, #0x14
    // 0x887d58: r2 = "adsRemoval"
    //     0x887d58: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe88] "adsRemoval"
    //     0x887d5c: ldr             x2, [x2, #0xe88]
    // 0x887d60: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887d60: sub             lr, x0, #0xb4
    //     0x887d64: ldr             lr, [x21, lr, lsl #3]
    //     0x887d68: blr             lr
    // 0x887d6c: r1 = 59
    //     0x887d6c: movz            x1, #0x3b
    // 0x887d70: branchIfSmi(r0, 0x887d7c)
    //     0x887d70: tbz             w0, #0, #0x887d7c
    // 0x887d74: r1 = LoadClassIdInstr(r0)
    //     0x887d74: ldur            x1, [x0, #-1]
    //     0x887d78: ubfx            x1, x1, #0xc, #0x14
    // 0x887d7c: r16 = true
    //     0x887d7c: add             x16, NULL, #0x20  ; true
    // 0x887d80: stp             x16, x0, [SP]
    // 0x887d84: mov             x0, x1
    // 0x887d88: mov             lr, x0
    // 0x887d8c: ldr             lr, [x21, lr, lsl #3]
    // 0x887d90: blr             lr
    // 0x887d94: tbnz            w0, #4, #0x887da8
    // 0x887d98: ldur            x0, [fp, #-0x28]
    // 0x887d9c: lsl             x1, x0, #1
    // 0x887da0: mov             x0, x1
    // 0x887da4: b               #0x88db2c
    // 0x887da8: ldur            x0, [fp, #-0x28]
    // 0x887dac: b               #0x88db2c
    // 0x887db0: r16 = "daysLeft"
    //     0x887db0: add             x16, PP, #0x13, lsl #12  ; [pp+0x130b0] "daysLeft"
    //     0x887db4: ldr             x16, [x16, #0xb0]
    // 0x887db8: ldur            lr, [fp, #-0x20]
    // 0x887dbc: stp             lr, x16, [SP]
    // 0x887dc0: r0 = ==()
    //     0x887dc0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887dc4: tbnz            w0, #4, #0x887ec4
    // 0x887dc8: r0 = LoadStaticField(0xb54)
    //     0x887dc8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887dcc: ldr             x0, [x0, #0x16a8]
    // 0x887dd0: cmp             w0, NULL
    // 0x887dd4: b.eq            #0x887eb4
    // 0x887dd8: r17 = 347
    //     0x887dd8: movz            x17, #0x15b
    // 0x887ddc: ldr             w1, [x0, x17]
    // 0x887de0: DecompressPointer r1
    //     0x887de0: add             x1, x1, HEAP, lsl #32
    // 0x887de4: r0 = LoadClassIdInstr(r1)
    //     0x887de4: ldur            x0, [x1, #-1]
    //     0x887de8: ubfx            x0, x0, #0xc, #0x14
    // 0x887dec: r2 = "fundRaise"
    //     0x887dec: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc00] "fundRaise"
    //     0x887df0: ldr             x2, [x2, #0xc00]
    // 0x887df4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887df4: sub             lr, x0, #0xb4
    //     0x887df8: ldr             lr, [x21, lr, lsl #3]
    //     0x887dfc: blr             lr
    // 0x887e00: cmp             w0, NULL
    // 0x887e04: b.eq            #0x887eb4
    // 0x887e08: r0 = LoadStaticField(0xb54)
    //     0x887e08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887e0c: ldr             x0, [x0, #0x16a8]
    // 0x887e10: cmp             w0, NULL
    // 0x887e14: b.ne            #0x887e20
    // 0x887e18: r0 = Null
    //     0x887e18: mov             x0, NULL
    // 0x887e1c: b               #0x887e48
    // 0x887e20: r17 = 347
    //     0x887e20: movz            x17, #0x15b
    // 0x887e24: ldr             w1, [x0, x17]
    // 0x887e28: DecompressPointer r1
    //     0x887e28: add             x1, x1, HEAP, lsl #32
    // 0x887e2c: r0 = LoadClassIdInstr(r1)
    //     0x887e2c: ldur            x0, [x1, #-1]
    //     0x887e30: ubfx            x0, x0, #0xc, #0x14
    // 0x887e34: r2 = "fundRaise"
    //     0x887e34: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc00] "fundRaise"
    //     0x887e38: ldr             x2, [x2, #0xc00]
    // 0x887e3c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887e3c: sub             lr, x0, #0xb4
    //     0x887e40: ldr             lr, [x21, lr, lsl #3]
    //     0x887e44: blr             lr
    // 0x887e48: r16 = 2
    //     0x887e48: movz            x16, #0x2
    // 0x887e4c: stp             x16, x0, [SP]
    // 0x887e50: r4 = 0
    //     0x887e50: movz            x4, #0
    // 0x887e54: ldr             x0, [SP, #8]
    // 0x887e58: r5 = UnlinkedCall_0x7b3c80
    //     0x887e58: add             x16, PP, #0x13, lsl #12  ; [pp+0x130b8] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x887e5c: ldp             x5, lr, [x16, #0xb8]
    // 0x887e60: blr             lr
    // 0x887e64: mov             x3, x0
    // 0x887e68: r2 = Null
    //     0x887e68: mov             x2, NULL
    // 0x887e6c: r1 = Null
    //     0x887e6c: mov             x1, NULL
    // 0x887e70: stur            x3, [fp, #-8]
    // 0x887e74: branchIfSmi(r0, 0x887e9c)
    //     0x887e74: tbz             w0, #0, #0x887e9c
    // 0x887e78: r4 = LoadClassIdInstr(r0)
    //     0x887e78: ldur            x4, [x0, #-1]
    //     0x887e7c: ubfx            x4, x4, #0xc, #0x14
    // 0x887e80: sub             x4, x4, #0x3b
    // 0x887e84: cmp             x4, #1
    // 0x887e88: b.ls            #0x887e9c
    // 0x887e8c: r8 = int
    //     0x887e8c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x887e90: r3 = Null
    //     0x887e90: add             x3, PP, #0x13, lsl #12  ; [pp+0x130c8] Null
    //     0x887e94: ldr             x3, [x3, #0xc8]
    // 0x887e98: r0 = int()
    //     0x887e98: bl              #0x1524294  ; IsType_int_Stub
    // 0x887e9c: ldur            x0, [fp, #-8]
    // 0x887ea0: r1 = LoadInt32Instr(r0)
    //     0x887ea0: sbfx            x1, x0, #1, #0x1f
    //     0x887ea4: tbz             w0, #0, #0x887eac
    //     0x887ea8: ldur            x1, [x0, #7]
    // 0x887eac: mov             x0, x1
    // 0x887eb0: b               #0x887eb8
    // 0x887eb4: r0 = 1
    //     0x887eb4: movz            x0, #0x1
    // 0x887eb8: tbz             x0, #0x3f, #0x88db2c
    // 0x887ebc: r0 = 0
    //     0x887ebc: movz            x0, #0
    // 0x887ec0: b               #0x88db2c
    // 0x887ec4: r16 = "petitionDaysLeft"
    //     0x887ec4: add             x16, PP, #0x13, lsl #12  ; [pp+0x130d8] "petitionDaysLeft"
    //     0x887ec8: ldr             x16, [x16, #0xd8]
    // 0x887ecc: ldur            lr, [fp, #-0x20]
    // 0x887ed0: stp             lr, x16, [SP]
    // 0x887ed4: r0 = ==()
    //     0x887ed4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x887ed8: tbnz            w0, #4, #0x888018
    // 0x887edc: r0 = LoadStaticField(0xb54)
    //     0x887edc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887ee0: ldr             x0, [x0, #0x16a8]
    // 0x887ee4: cmp             w0, NULL
    // 0x887ee8: b.eq            #0x888008
    // 0x887eec: r17 = 347
    //     0x887eec: movz            x17, #0x15b
    // 0x887ef0: ldr             w1, [x0, x17]
    // 0x887ef4: DecompressPointer r1
    //     0x887ef4: add             x1, x1, HEAP, lsl #32
    // 0x887ef8: r0 = LoadClassIdInstr(r1)
    //     0x887ef8: ldur            x0, [x1, #-1]
    //     0x887efc: ubfx            x0, x0, #0xc, #0x14
    // 0x887f00: r2 = "petitionDay"
    //     0x887f00: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc20] "petitionDay"
    //     0x887f04: ldr             x2, [x2, #0xc20]
    // 0x887f08: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887f08: sub             lr, x0, #0xb4
    //     0x887f0c: ldr             lr, [x21, lr, lsl #3]
    //     0x887f10: blr             lr
    // 0x887f14: cmp             w0, NULL
    // 0x887f18: b.eq            #0x888008
    // 0x887f1c: r0 = LoadStaticField(0xb54)
    //     0x887f1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x887f20: ldr             x0, [x0, #0x16a8]
    // 0x887f24: cmp             w0, NULL
    // 0x887f28: b.ne            #0x887f34
    // 0x887f2c: r0 = Null
    //     0x887f2c: mov             x0, NULL
    // 0x887f30: b               #0x887f5c
    // 0x887f34: r17 = 347
    //     0x887f34: movz            x17, #0x15b
    // 0x887f38: ldr             w1, [x0, x17]
    // 0x887f3c: DecompressPointer r1
    //     0x887f3c: add             x1, x1, HEAP, lsl #32
    // 0x887f40: r0 = LoadClassIdInstr(r1)
    //     0x887f40: ldur            x0, [x1, #-1]
    //     0x887f44: ubfx            x0, x0, #0xc, #0x14
    // 0x887f48: r2 = "petitionDay"
    //     0x887f48: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc20] "petitionDay"
    //     0x887f4c: ldr             x2, [x2, #0xc20]
    // 0x887f50: r0 = GDT[cid_x0 + -0xb4]()
    //     0x887f50: sub             lr, x0, #0xb4
    //     0x887f54: ldr             lr, [x21, lr, lsl #3]
    //     0x887f58: blr             lr
    // 0x887f5c: cmp             w0, NULL
    // 0x887f60: b.ne            #0x887f6c
    // 0x887f64: r3 = 0
    //     0x887f64: movz            x3, #0
    // 0x887f68: b               #0x887f70
    // 0x887f6c: mov             x3, x0
    // 0x887f70: mov             x0, x3
    // 0x887f74: stur            x3, [fp, #-8]
    // 0x887f78: r2 = Null
    //     0x887f78: mov             x2, NULL
    // 0x887f7c: r1 = Null
    //     0x887f7c: mov             x1, NULL
    // 0x887f80: branchIfSmi(r0, 0x887fa8)
    //     0x887f80: tbz             w0, #0, #0x887fa8
    // 0x887f84: r4 = LoadClassIdInstr(r0)
    //     0x887f84: ldur            x4, [x0, #-1]
    //     0x887f88: ubfx            x4, x4, #0xc, #0x14
    // 0x887f8c: sub             x4, x4, #0x3b
    // 0x887f90: cmp             x4, #2
    // 0x887f94: b.ls            #0x887fa8
    // 0x887f98: r8 = num
    //     0x887f98: ldr             x8, [PP, #0x3e8]  ; [pp+0x3e8] Type: num
    // 0x887f9c: r3 = Null
    //     0x887f9c: add             x3, PP, #0x13, lsl #12  ; [pp+0x130e0] Null
    //     0x887fa0: ldr             x3, [x3, #0xe0]
    // 0x887fa4: r0 = DefaultTypeTest()
    //     0x887fa4: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x887fa8: r16 = 14
    //     0x887fa8: movz            x16, #0xe
    // 0x887fac: ldur            lr, [fp, #-8]
    // 0x887fb0: stp             lr, x16, [SP]
    // 0x887fb4: r0 = -()
    //     0x887fb4: bl              #0x14fdaac  ; [dart:core] _IntegerImplementation::-
    // 0x887fb8: mov             x3, x0
    // 0x887fbc: r2 = Null
    //     0x887fbc: mov             x2, NULL
    // 0x887fc0: r1 = Null
    //     0x887fc0: mov             x1, NULL
    // 0x887fc4: stur            x3, [fp, #-8]
    // 0x887fc8: branchIfSmi(r0, 0x887ff0)
    //     0x887fc8: tbz             w0, #0, #0x887ff0
    // 0x887fcc: r4 = LoadClassIdInstr(r0)
    //     0x887fcc: ldur            x4, [x0, #-1]
    //     0x887fd0: ubfx            x4, x4, #0xc, #0x14
    // 0x887fd4: sub             x4, x4, #0x3b
    // 0x887fd8: cmp             x4, #1
    // 0x887fdc: b.ls            #0x887ff0
    // 0x887fe0: r8 = int
    //     0x887fe0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x887fe4: r3 = Null
    //     0x887fe4: add             x3, PP, #0x13, lsl #12  ; [pp+0x130f0] Null
    //     0x887fe8: ldr             x3, [x3, #0xf0]
    // 0x887fec: r0 = int()
    //     0x887fec: bl              #0x1524294  ; IsType_int_Stub
    // 0x887ff0: ldur            x0, [fp, #-8]
    // 0x887ff4: r1 = LoadInt32Instr(r0)
    //     0x887ff4: sbfx            x1, x0, #1, #0x1f
    //     0x887ff8: tbz             w0, #0, #0x888000
    //     0x887ffc: ldur            x1, [x0, #7]
    // 0x888000: mov             x0, x1
    // 0x888004: b               #0x88800c
    // 0x888008: r0 = 7
    //     0x888008: movz            x0, #0x7
    // 0x88800c: tbz             x0, #0x3f, #0x88db2c
    // 0x888010: r0 = 0
    //     0x888010: movz            x0, #0
    // 0x888014: b               #0x88db2c
    // 0x888018: r16 = "fundTeraCustomer"
    //     0x888018: add             x16, PP, #0x13, lsl #12  ; [pp+0x13100] "fundTeraCustomer"
    //     0x88801c: ldr             x16, [x16, #0x100]
    // 0x888020: ldur            lr, [fp, #-0x20]
    // 0x888024: stp             lr, x16, [SP]
    // 0x888028: r0 = ==()
    //     0x888028: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88802c: tbnz            w0, #4, #0x888164
    // 0x888030: r0 = LoadStaticField(0xb54)
    //     0x888030: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888034: ldr             x0, [x0, #0x16a8]
    // 0x888038: cmp             w0, NULL
    // 0x88803c: b.eq            #0x88815c
    // 0x888040: r17 = 347
    //     0x888040: movz            x17, #0x15b
    // 0x888044: ldr             w1, [x0, x17]
    // 0x888048: DecompressPointer r1
    //     0x888048: add             x1, x1, HEAP, lsl #32
    // 0x88804c: r0 = LoadClassIdInstr(r1)
    //     0x88804c: ldur            x0, [x1, #-1]
    //     0x888050: ubfx            x0, x0, #0xc, #0x14
    // 0x888054: r2 = "fundTeraCustomer"
    //     0x888054: add             x2, PP, #0x13, lsl #12  ; [pp+0x13100] "fundTeraCustomer"
    //     0x888058: ldr             x2, [x2, #0x100]
    // 0x88805c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88805c: sub             lr, x0, #0xb4
    //     0x888060: ldr             lr, [x21, lr, lsl #3]
    //     0x888064: blr             lr
    // 0x888068: cmp             w0, NULL
    // 0x88806c: b.eq            #0x88815c
    // 0x888070: r0 = LoadStaticField(0xb54)
    //     0x888070: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888074: ldr             x0, [x0, #0x16a8]
    // 0x888078: cmp             w0, NULL
    // 0x88807c: b.ne            #0x888088
    // 0x888080: r0 = Null
    //     0x888080: mov             x0, NULL
    // 0x888084: b               #0x8880b0
    // 0x888088: r17 = 347
    //     0x888088: movz            x17, #0x15b
    // 0x88808c: ldr             w1, [x0, x17]
    // 0x888090: DecompressPointer r1
    //     0x888090: add             x1, x1, HEAP, lsl #32
    // 0x888094: r0 = LoadClassIdInstr(r1)
    //     0x888094: ldur            x0, [x1, #-1]
    //     0x888098: ubfx            x0, x0, #0xc, #0x14
    // 0x88809c: r2 = "fundTeraCustomer"
    //     0x88809c: add             x2, PP, #0x13, lsl #12  ; [pp+0x13100] "fundTeraCustomer"
    //     0x8880a0: ldr             x2, [x2, #0x100]
    // 0x8880a4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8880a4: sub             lr, x0, #0xb4
    //     0x8880a8: ldr             lr, [x21, lr, lsl #3]
    //     0x8880ac: blr             lr
    // 0x8880b0: stur            x0, [fp, #-8]
    // 0x8880b4: stp             x0, xzr, [SP]
    // 0x8880b8: r0 = ==()
    //     0x8880b8: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8880bc: tbnz            w0, #4, #0x8880c8
    // 0x8880c0: r0 = 1000
    //     0x8880c0: movz            x0, #0x3e8
    // 0x8880c4: b               #0x88db2c
    // 0x8880c8: r16 = 2
    //     0x8880c8: movz            x16, #0x2
    // 0x8880cc: ldur            lr, [fp, #-8]
    // 0x8880d0: stp             lr, x16, [SP]
    // 0x8880d4: r0 = ==()
    //     0x8880d4: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8880d8: tbnz            w0, #4, #0x8880e4
    // 0x8880dc: r0 = 2000
    //     0x8880dc: movz            x0, #0x7d0
    // 0x8880e0: b               #0x88db2c
    // 0x8880e4: r16 = 4
    //     0x8880e4: movz            x16, #0x4
    // 0x8880e8: ldur            lr, [fp, #-8]
    // 0x8880ec: stp             lr, x16, [SP]
    // 0x8880f0: r0 = ==()
    //     0x8880f0: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8880f4: tbnz            w0, #4, #0x888100
    // 0x8880f8: r0 = 4000
    //     0x8880f8: movz            x0, #0xfa0
    // 0x8880fc: b               #0x88db2c
    // 0x888100: r16 = 6
    //     0x888100: movz            x16, #0x6
    // 0x888104: ldur            lr, [fp, #-8]
    // 0x888108: stp             lr, x16, [SP]
    // 0x88810c: r0 = ==()
    //     0x88810c: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x888110: tbnz            w0, #4, #0x88811c
    // 0x888114: r0 = 8000
    //     0x888114: movz            x0, #0x1f40
    // 0x888118: b               #0x88db2c
    // 0x88811c: r16 = 8
    //     0x88811c: movz            x16, #0x8
    // 0x888120: ldur            lr, [fp, #-8]
    // 0x888124: stp             lr, x16, [SP]
    // 0x888128: r0 = ==()
    //     0x888128: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x88812c: tbnz            w0, #4, #0x888138
    // 0x888130: r0 = 10000
    //     0x888130: movz            x0, #0x2710
    // 0x888134: b               #0x88db2c
    // 0x888138: r16 = 10
    //     0x888138: movz            x16, #0xa
    // 0x88813c: ldur            lr, [fp, #-8]
    // 0x888140: stp             lr, x16, [SP]
    // 0x888144: r0 = ==()
    //     0x888144: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x888148: tbnz            w0, #4, #0x888154
    // 0x88814c: r0 = 12000
    //     0x88814c: movz            x0, #0x2ee0
    // 0x888150: b               #0x88db2c
    // 0x888154: r0 = 500
    //     0x888154: movz            x0, #0x1f4
    // 0x888158: b               #0x88db2c
    // 0x88815c: r0 = 500
    //     0x88815c: movz            x0, #0x1f4
    // 0x888160: b               #0x88db2c
    // 0x888164: r16 = "gearExamQuestion"
    //     0x888164: add             x16, PP, #0x10, lsl #12  ; [pp+0x10be8] "gearExamQuestion"
    //     0x888168: ldr             x16, [x16, #0xbe8]
    // 0x88816c: ldur            lr, [fp, #-0x20]
    // 0x888170: stp             lr, x16, [SP]
    // 0x888174: r0 = ==()
    //     0x888174: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888178: tbnz            w0, #4, #0x888234
    // 0x88817c: r0 = LoadStaticField(0xb54)
    //     0x88817c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888180: ldr             x0, [x0, #0x16a8]
    // 0x888184: cmp             w0, NULL
    // 0x888188: b.ne            #0x888194
    // 0x88818c: r0 = Null
    //     0x88818c: mov             x0, NULL
    // 0x888190: b               #0x8881bc
    // 0x888194: r17 = 347
    //     0x888194: movz            x17, #0x15b
    // 0x888198: ldr             w1, [x0, x17]
    // 0x88819c: DecompressPointer r1
    //     0x88819c: add             x1, x1, HEAP, lsl #32
    // 0x8881a0: r0 = LoadClassIdInstr(r1)
    //     0x8881a0: ldur            x0, [x1, #-1]
    //     0x8881a4: ubfx            x0, x0, #0xc, #0x14
    // 0x8881a8: r2 = "gearExamQuestion"
    //     0x8881a8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10be8] "gearExamQuestion"
    //     0x8881ac: ldr             x2, [x2, #0xbe8]
    // 0x8881b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8881b0: sub             lr, x0, #0xb4
    //     0x8881b4: ldr             lr, [x21, lr, lsl #3]
    //     0x8881b8: blr             lr
    // 0x8881bc: cmp             w0, NULL
    // 0x8881c0: b.ne            #0x8881c8
    // 0x8881c4: r0 = 0
    //     0x8881c4: movz            x0, #0
    // 0x8881c8: r16 = 2
    //     0x8881c8: movz            x16, #0x2
    // 0x8881cc: stp             x16, x0, [SP]
    // 0x8881d0: r4 = 0
    //     0x8881d0: movz            x4, #0
    // 0x8881d4: ldr             x0, [SP, #8]
    // 0x8881d8: r5 = UnlinkedCall_0x7b3c80
    //     0x8881d8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13108] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8881dc: ldp             x5, lr, [x16, #0x108]
    // 0x8881e0: blr             lr
    // 0x8881e4: mov             x3, x0
    // 0x8881e8: r2 = Null
    //     0x8881e8: mov             x2, NULL
    // 0x8881ec: r1 = Null
    //     0x8881ec: mov             x1, NULL
    // 0x8881f0: stur            x3, [fp, #-8]
    // 0x8881f4: branchIfSmi(r0, 0x88821c)
    //     0x8881f4: tbz             w0, #0, #0x88821c
    // 0x8881f8: r4 = LoadClassIdInstr(r0)
    //     0x8881f8: ldur            x4, [x0, #-1]
    //     0x8881fc: ubfx            x4, x4, #0xc, #0x14
    // 0x888200: sub             x4, x4, #0x3b
    // 0x888204: cmp             x4, #1
    // 0x888208: b.ls            #0x88821c
    // 0x88820c: r8 = int
    //     0x88820c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x888210: r3 = Null
    //     0x888210: add             x3, PP, #0x13, lsl #12  ; [pp+0x13118] Null
    //     0x888214: ldr             x3, [x3, #0x118]
    // 0x888218: r0 = int()
    //     0x888218: bl              #0x1524294  ; IsType_int_Stub
    // 0x88821c: ldur            x0, [fp, #-8]
    // 0x888220: r1 = LoadInt32Instr(r0)
    //     0x888220: sbfx            x1, x0, #1, #0x1f
    //     0x888224: tbz             w0, #0, #0x88822c
    //     0x888228: ldur            x1, [x0, #7]
    // 0x88822c: mov             x0, x1
    // 0x888230: b               #0x88db2c
    // 0x888234: r16 = "geographyExamQuestion"
    //     0x888234: add             x16, PP, #0x10, lsl #12  ; [pp+0x10c68] "geographyExamQuestion"
    //     0x888238: ldr             x16, [x16, #0xc68]
    // 0x88823c: ldur            lr, [fp, #-0x20]
    // 0x888240: stp             lr, x16, [SP]
    // 0x888244: r0 = ==()
    //     0x888244: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888248: tbnz            w0, #4, #0x888304
    // 0x88824c: r0 = LoadStaticField(0xb54)
    //     0x88824c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888250: ldr             x0, [x0, #0x16a8]
    // 0x888254: cmp             w0, NULL
    // 0x888258: b.ne            #0x888264
    // 0x88825c: r0 = Null
    //     0x88825c: mov             x0, NULL
    // 0x888260: b               #0x88828c
    // 0x888264: r17 = 347
    //     0x888264: movz            x17, #0x15b
    // 0x888268: ldr             w1, [x0, x17]
    // 0x88826c: DecompressPointer r1
    //     0x88826c: add             x1, x1, HEAP, lsl #32
    // 0x888270: r0 = LoadClassIdInstr(r1)
    //     0x888270: ldur            x0, [x1, #-1]
    //     0x888274: ubfx            x0, x0, #0xc, #0x14
    // 0x888278: r2 = "geographyExamQuestion"
    //     0x888278: add             x2, PP, #0x10, lsl #12  ; [pp+0x10c68] "geographyExamQuestion"
    //     0x88827c: ldr             x2, [x2, #0xc68]
    // 0x888280: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888280: sub             lr, x0, #0xb4
    //     0x888284: ldr             lr, [x21, lr, lsl #3]
    //     0x888288: blr             lr
    // 0x88828c: cmp             w0, NULL
    // 0x888290: b.ne            #0x888298
    // 0x888294: r0 = 0
    //     0x888294: movz            x0, #0
    // 0x888298: r16 = 2
    //     0x888298: movz            x16, #0x2
    // 0x88829c: stp             x16, x0, [SP]
    // 0x8882a0: r4 = 0
    //     0x8882a0: movz            x4, #0
    // 0x8882a4: ldr             x0, [SP, #8]
    // 0x8882a8: r5 = UnlinkedCall_0x7b3c80
    //     0x8882a8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13128] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8882ac: ldp             x5, lr, [x16, #0x128]
    // 0x8882b0: blr             lr
    // 0x8882b4: mov             x3, x0
    // 0x8882b8: r2 = Null
    //     0x8882b8: mov             x2, NULL
    // 0x8882bc: r1 = Null
    //     0x8882bc: mov             x1, NULL
    // 0x8882c0: stur            x3, [fp, #-8]
    // 0x8882c4: branchIfSmi(r0, 0x8882ec)
    //     0x8882c4: tbz             w0, #0, #0x8882ec
    // 0x8882c8: r4 = LoadClassIdInstr(r0)
    //     0x8882c8: ldur            x4, [x0, #-1]
    //     0x8882cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8882d0: sub             x4, x4, #0x3b
    // 0x8882d4: cmp             x4, #1
    // 0x8882d8: b.ls            #0x8882ec
    // 0x8882dc: r8 = int
    //     0x8882dc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8882e0: r3 = Null
    //     0x8882e0: add             x3, PP, #0x13, lsl #12  ; [pp+0x13138] Null
    //     0x8882e4: ldr             x3, [x3, #0x138]
    // 0x8882e8: r0 = int()
    //     0x8882e8: bl              #0x1524294  ; IsType_int_Stub
    // 0x8882ec: ldur            x0, [fp, #-8]
    // 0x8882f0: r1 = LoadInt32Instr(r0)
    //     0x8882f0: sbfx            x1, x0, #1, #0x1f
    //     0x8882f4: tbz             w0, #0, #0x8882fc
    //     0x8882f8: ldur            x1, [x0, #7]
    // 0x8882fc: mov             x0, x1
    // 0x888300: b               #0x88db2c
    // 0x888304: r16 = "cardsExamQuestion"
    //     0x888304: add             x16, PP, #0x10, lsl #12  ; [pp+0x10ca8] "cardsExamQuestion"
    //     0x888308: ldr             x16, [x16, #0xca8]
    // 0x88830c: ldur            lr, [fp, #-0x20]
    // 0x888310: stp             lr, x16, [SP]
    // 0x888314: r0 = ==()
    //     0x888314: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888318: tbnz            w0, #4, #0x8883d4
    // 0x88831c: r0 = LoadStaticField(0xb54)
    //     0x88831c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888320: ldr             x0, [x0, #0x16a8]
    // 0x888324: cmp             w0, NULL
    // 0x888328: b.ne            #0x888334
    // 0x88832c: r0 = Null
    //     0x88832c: mov             x0, NULL
    // 0x888330: b               #0x88835c
    // 0x888334: r17 = 347
    //     0x888334: movz            x17, #0x15b
    // 0x888338: ldr             w1, [x0, x17]
    // 0x88833c: DecompressPointer r1
    //     0x88833c: add             x1, x1, HEAP, lsl #32
    // 0x888340: r0 = LoadClassIdInstr(r1)
    //     0x888340: ldur            x0, [x1, #-1]
    //     0x888344: ubfx            x0, x0, #0xc, #0x14
    // 0x888348: r2 = "cardsExamQuestion"
    //     0x888348: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ca8] "cardsExamQuestion"
    //     0x88834c: ldr             x2, [x2, #0xca8]
    // 0x888350: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888350: sub             lr, x0, #0xb4
    //     0x888354: ldr             lr, [x21, lr, lsl #3]
    //     0x888358: blr             lr
    // 0x88835c: cmp             w0, NULL
    // 0x888360: b.ne            #0x888368
    // 0x888364: r0 = 0
    //     0x888364: movz            x0, #0
    // 0x888368: r16 = 2
    //     0x888368: movz            x16, #0x2
    // 0x88836c: stp             x16, x0, [SP]
    // 0x888370: r4 = 0
    //     0x888370: movz            x4, #0
    // 0x888374: ldr             x0, [SP, #8]
    // 0x888378: r5 = UnlinkedCall_0x7b3c80
    //     0x888378: add             x16, PP, #0x13, lsl #12  ; [pp+0x13148] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x88837c: ldp             x5, lr, [x16, #0x148]
    // 0x888380: blr             lr
    // 0x888384: mov             x3, x0
    // 0x888388: r2 = Null
    //     0x888388: mov             x2, NULL
    // 0x88838c: r1 = Null
    //     0x88838c: mov             x1, NULL
    // 0x888390: stur            x3, [fp, #-8]
    // 0x888394: branchIfSmi(r0, 0x8883bc)
    //     0x888394: tbz             w0, #0, #0x8883bc
    // 0x888398: r4 = LoadClassIdInstr(r0)
    //     0x888398: ldur            x4, [x0, #-1]
    //     0x88839c: ubfx            x4, x4, #0xc, #0x14
    // 0x8883a0: sub             x4, x4, #0x3b
    // 0x8883a4: cmp             x4, #1
    // 0x8883a8: b.ls            #0x8883bc
    // 0x8883ac: r8 = int
    //     0x8883ac: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8883b0: r3 = Null
    //     0x8883b0: add             x3, PP, #0x13, lsl #12  ; [pp+0x13158] Null
    //     0x8883b4: ldr             x3, [x3, #0x158]
    // 0x8883b8: r0 = int()
    //     0x8883b8: bl              #0x1524294  ; IsType_int_Stub
    // 0x8883bc: ldur            x0, [fp, #-8]
    // 0x8883c0: r1 = LoadInt32Instr(r0)
    //     0x8883c0: sbfx            x1, x0, #1, #0x1f
    //     0x8883c4: tbz             w0, #0, #0x8883cc
    //     0x8883c8: ldur            x1, [x0, #7]
    // 0x8883cc: mov             x0, x1
    // 0x8883d0: b               #0x88db2c
    // 0x8883d4: r16 = "petitionTeraCustomer"
    //     0x8883d4: add             x16, PP, #0x13, lsl #12  ; [pp+0x13168] "petitionTeraCustomer"
    //     0x8883d8: ldr             x16, [x16, #0x168]
    // 0x8883dc: ldur            lr, [fp, #-0x20]
    // 0x8883e0: stp             lr, x16, [SP]
    // 0x8883e4: r0 = ==()
    //     0x8883e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8883e8: tbnz            w0, #4, #0x888520
    // 0x8883ec: r0 = LoadStaticField(0xb54)
    //     0x8883ec: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8883f0: ldr             x0, [x0, #0x16a8]
    // 0x8883f4: cmp             w0, NULL
    // 0x8883f8: b.eq            #0x888518
    // 0x8883fc: r17 = 347
    //     0x8883fc: movz            x17, #0x15b
    // 0x888400: ldr             w1, [x0, x17]
    // 0x888404: DecompressPointer r1
    //     0x888404: add             x1, x1, HEAP, lsl #32
    // 0x888408: r0 = LoadClassIdInstr(r1)
    //     0x888408: ldur            x0, [x1, #-1]
    //     0x88840c: ubfx            x0, x0, #0xc, #0x14
    // 0x888410: r2 = "petitionTeraCustomer"
    //     0x888410: add             x2, PP, #0x13, lsl #12  ; [pp+0x13168] "petitionTeraCustomer"
    //     0x888414: ldr             x2, [x2, #0x168]
    // 0x888418: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888418: sub             lr, x0, #0xb4
    //     0x88841c: ldr             lr, [x21, lr, lsl #3]
    //     0x888420: blr             lr
    // 0x888424: cmp             w0, NULL
    // 0x888428: b.eq            #0x888518
    // 0x88842c: r0 = LoadStaticField(0xb54)
    //     0x88842c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888430: ldr             x0, [x0, #0x16a8]
    // 0x888434: cmp             w0, NULL
    // 0x888438: b.ne            #0x888444
    // 0x88843c: r0 = Null
    //     0x88843c: mov             x0, NULL
    // 0x888440: b               #0x88846c
    // 0x888444: r17 = 347
    //     0x888444: movz            x17, #0x15b
    // 0x888448: ldr             w1, [x0, x17]
    // 0x88844c: DecompressPointer r1
    //     0x88844c: add             x1, x1, HEAP, lsl #32
    // 0x888450: r0 = LoadClassIdInstr(r1)
    //     0x888450: ldur            x0, [x1, #-1]
    //     0x888454: ubfx            x0, x0, #0xc, #0x14
    // 0x888458: r2 = "petitionTeraCustomer"
    //     0x888458: add             x2, PP, #0x13, lsl #12  ; [pp+0x13168] "petitionTeraCustomer"
    //     0x88845c: ldr             x2, [x2, #0x168]
    // 0x888460: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888460: sub             lr, x0, #0xb4
    //     0x888464: ldr             lr, [x21, lr, lsl #3]
    //     0x888468: blr             lr
    // 0x88846c: stur            x0, [fp, #-8]
    // 0x888470: stp             x0, xzr, [SP]
    // 0x888474: r0 = ==()
    //     0x888474: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x888478: tbnz            w0, #4, #0x888484
    // 0x88847c: r0 = 5
    //     0x88847c: movz            x0, #0x5
    // 0x888480: b               #0x88db2c
    // 0x888484: r16 = 2
    //     0x888484: movz            x16, #0x2
    // 0x888488: ldur            lr, [fp, #-8]
    // 0x88848c: stp             lr, x16, [SP]
    // 0x888490: r0 = ==()
    //     0x888490: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x888494: tbnz            w0, #4, #0x8884a0
    // 0x888498: r0 = 10
    //     0x888498: movz            x0, #0xa
    // 0x88849c: b               #0x88db2c
    // 0x8884a0: r16 = 4
    //     0x8884a0: movz            x16, #0x4
    // 0x8884a4: ldur            lr, [fp, #-8]
    // 0x8884a8: stp             lr, x16, [SP]
    // 0x8884ac: r0 = ==()
    //     0x8884ac: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8884b0: tbnz            w0, #4, #0x8884bc
    // 0x8884b4: r0 = 15
    //     0x8884b4: movz            x0, #0xf
    // 0x8884b8: b               #0x88db2c
    // 0x8884bc: r16 = 6
    //     0x8884bc: movz            x16, #0x6
    // 0x8884c0: ldur            lr, [fp, #-8]
    // 0x8884c4: stp             lr, x16, [SP]
    // 0x8884c8: r0 = ==()
    //     0x8884c8: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8884cc: tbnz            w0, #4, #0x8884d8
    // 0x8884d0: r0 = 20
    //     0x8884d0: movz            x0, #0x14
    // 0x8884d4: b               #0x88db2c
    // 0x8884d8: r16 = 8
    //     0x8884d8: movz            x16, #0x8
    // 0x8884dc: ldur            lr, [fp, #-8]
    // 0x8884e0: stp             lr, x16, [SP]
    // 0x8884e4: r0 = ==()
    //     0x8884e4: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x8884e8: tbnz            w0, #4, #0x8884f4
    // 0x8884ec: r0 = 25
    //     0x8884ec: movz            x0, #0x19
    // 0x8884f0: b               #0x88db2c
    // 0x8884f4: r16 = 10
    //     0x8884f4: movz            x16, #0xa
    // 0x8884f8: ldur            lr, [fp, #-8]
    // 0x8884fc: stp             lr, x16, [SP]
    // 0x888500: r0 = ==()
    //     0x888500: bl              #0x148272c  ; [dart:core] _IntegerImplementation::==
    // 0x888504: tbnz            w0, #4, #0x888510
    // 0x888508: r0 = 30
    //     0x888508: movz            x0, #0x1e
    // 0x88850c: b               #0x88db2c
    // 0x888510: r0 = 5
    //     0x888510: movz            x0, #0x5
    // 0x888514: b               #0x88db2c
    // 0x888518: r0 = 5
    //     0x888518: movz            x0, #0x5
    // 0x88851c: b               #0x88db2c
    // 0x888520: r16 = "swimming"
    //     0x888520: add             x16, PP, #0x13, lsl #12  ; [pp+0x13170] "swimming"
    //     0x888524: ldr             x16, [x16, #0x170]
    // 0x888528: ldur            lr, [fp, #-0x20]
    // 0x88852c: stp             lr, x16, [SP]
    // 0x888530: r0 = ==()
    //     0x888530: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888534: tbnz            w0, #4, #0x888594
    // 0x888538: r0 = LoadStaticField(0xb54)
    //     0x888538: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88853c: ldr             x0, [x0, #0x16a8]
    // 0x888540: cmp             w0, NULL
    // 0x888544: b.ne            #0x888550
    // 0x888548: r0 = Null
    //     0x888548: mov             x0, NULL
    // 0x88854c: b               #0x888568
    // 0x888550: LoadField: r2 = r0->field_8b
    //     0x888550: ldur            x2, [x0, #0x8b]
    // 0x888554: r0 = BoxInt64Instr(r2)
    //     0x888554: sbfiz           x0, x2, #1, #0x1f
    //     0x888558: cmp             x2, x0, asr #1
    //     0x88855c: b.eq            #0x888568
    //     0x888560: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x888564: stur            x2, [x0, #7]
    // 0x888568: cmp             w0, NULL
    // 0x88856c: b.ne            #0x888578
    // 0x888570: r0 = 0
    //     0x888570: movz            x0, #0
    // 0x888574: b               #0x888588
    // 0x888578: r1 = LoadInt32Instr(r0)
    //     0x888578: sbfx            x1, x0, #1, #0x1f
    //     0x88857c: tbz             w0, #0, #0x888584
    //     0x888580: ldur            x1, [x0, #7]
    // 0x888584: mov             x0, x1
    // 0x888588: lsl             x1, x0, #1
    // 0x88858c: add             x0, x1, #0x14
    // 0x888590: b               #0x88db2c
    // 0x888594: r16 = "joeyChance"
    //     0x888594: add             x16, PP, #0x13, lsl #12  ; [pp+0x13178] "joeyChance"
    //     0x888598: ldr             x16, [x16, #0x178]
    // 0x88859c: ldur            lr, [fp, #-0x20]
    // 0x8885a0: stp             lr, x16, [SP]
    // 0x8885a4: r0 = ==()
    //     0x8885a4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8885a8: tbnz            w0, #4, #0x888608
    // 0x8885ac: r0 = LoadStaticField(0xb54)
    //     0x8885ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8885b0: ldr             x0, [x0, #0x16a8]
    // 0x8885b4: cmp             w0, NULL
    // 0x8885b8: b.ne            #0x8885c4
    // 0x8885bc: r0 = Null
    //     0x8885bc: mov             x0, NULL
    // 0x8885c0: b               #0x8885dc
    // 0x8885c4: LoadField: r2 = r0->field_9b
    //     0x8885c4: ldur            x2, [x0, #0x9b]
    // 0x8885c8: r0 = BoxInt64Instr(r2)
    //     0x8885c8: sbfiz           x0, x2, #1, #0x1f
    //     0x8885cc: cmp             x2, x0, asr #1
    //     0x8885d0: b.eq            #0x8885dc
    //     0x8885d4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8885d8: stur            x2, [x0, #7]
    // 0x8885dc: cmp             w0, NULL
    // 0x8885e0: b.ne            #0x8885ec
    // 0x8885e4: r0 = 0
    //     0x8885e4: movz            x0, #0
    // 0x8885e8: b               #0x8885fc
    // 0x8885ec: r1 = LoadInt32Instr(r0)
    //     0x8885ec: sbfx            x1, x0, #1, #0x1f
    //     0x8885f0: tbz             w0, #0, #0x8885f8
    //     0x8885f4: ldur            x1, [x0, #7]
    // 0x8885f8: mov             x0, x1
    // 0x8885fc: add             x1, x0, #0x19
    // 0x888600: mov             x0, x1
    // 0x888604: b               #0x88db2c
    // 0x888608: r16 = "flierChance"
    //     0x888608: add             x16, PP, #0x13, lsl #12  ; [pp+0x13180] "flierChance"
    //     0x88860c: ldr             x16, [x16, #0x180]
    // 0x888610: ldur            lr, [fp, #-0x20]
    // 0x888614: stp             lr, x16, [SP]
    // 0x888618: r0 = ==()
    //     0x888618: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88861c: tbnz            w0, #4, #0x888848
    // 0x888620: r0 = LoadStaticField(0xb54)
    //     0x888620: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888624: ldr             x0, [x0, #0x16a8]
    // 0x888628: cmp             w0, NULL
    // 0x88862c: b.eq            #0x888840
    // 0x888630: r17 = 347
    //     0x888630: movz            x17, #0x15b
    // 0x888634: ldr             w1, [x0, x17]
    // 0x888638: DecompressPointer r1
    //     0x888638: add             x1, x1, HEAP, lsl #32
    // 0x88863c: r0 = LoadClassIdInstr(r1)
    //     0x88863c: ldur            x0, [x1, #-1]
    //     0x888640: ubfx            x0, x0, #0xc, #0x14
    // 0x888644: r2 = "dailyChores"
    //     0x888644: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x888648: ldr             x2, [x2, #0xe48]
    // 0x88864c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88864c: sub             lr, x0, #0xb4
    //     0x888650: ldr             lr, [x21, lr, lsl #3]
    //     0x888654: blr             lr
    // 0x888658: cmp             w0, NULL
    // 0x88865c: b.eq            #0x888840
    // 0x888660: r0 = LoadStaticField(0xb54)
    //     0x888660: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888664: ldr             x0, [x0, #0x16a8]
    // 0x888668: cmp             w0, NULL
    // 0x88866c: b.ne            #0x888678
    // 0x888670: r0 = Null
    //     0x888670: mov             x0, NULL
    // 0x888674: b               #0x8886a0
    // 0x888678: r17 = 347
    //     0x888678: movz            x17, #0x15b
    // 0x88867c: ldr             w1, [x0, x17]
    // 0x888680: DecompressPointer r1
    //     0x888680: add             x1, x1, HEAP, lsl #32
    // 0x888684: r0 = LoadClassIdInstr(r1)
    //     0x888684: ldur            x0, [x1, #-1]
    //     0x888688: ubfx            x0, x0, #0xc, #0x14
    // 0x88868c: r2 = "dailyChores"
    //     0x88868c: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x888690: ldr             x2, [x2, #0xe48]
    // 0x888694: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888694: sub             lr, x0, #0xb4
    //     0x888698: ldr             lr, [x21, lr, lsl #3]
    //     0x88869c: blr             lr
    // 0x8886a0: cmp             w0, NULL
    // 0x8886a4: b.ne            #0x8886ac
    // 0x8886a8: r0 = 0
    //     0x8886a8: movz            x0, #0
    // 0x8886ac: r16 = 40
    //     0x8886ac: movz            x16, #0x28
    // 0x8886b0: stp             x16, x0, [SP]
    // 0x8886b4: r4 = 0
    //     0x8886b4: movz            x4, #0
    // 0x8886b8: ldr             x0, [SP, #8]
    // 0x8886bc: r5 = UnlinkedCall_0x7b3c80
    //     0x8886bc: add             x16, PP, #0x13, lsl #12  ; [pp+0x13188] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8886c0: ldp             x5, lr, [x16, #0x188]
    // 0x8886c4: blr             lr
    // 0x8886c8: r16 = 0.200000
    //     0x8886c8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13198] 0.2
    //     0x8886cc: ldr             x16, [x16, #0x198]
    // 0x8886d0: stp             x16, x0, [SP]
    // 0x8886d4: r4 = 0
    //     0x8886d4: movz            x4, #0
    // 0x8886d8: ldr             x0, [SP, #8]
    // 0x8886dc: r5 = UnlinkedCall_0x7b3c80
    //     0x8886dc: add             x16, PP, #0x13, lsl #12  ; [pp+0x131a0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8886e0: ldp             x5, lr, [x16, #0x1a0]
    // 0x8886e4: blr             lr
    // 0x8886e8: str             x0, [SP]
    // 0x8886ec: r4 = 0
    //     0x8886ec: movz            x4, #0
    // 0x8886f0: ldr             x0, [SP]
    // 0x8886f4: r5 = UnlinkedCall_0x7b3c80
    //     0x8886f4: add             x16, PP, #0x13, lsl #12  ; [pp+0x131b0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8886f8: ldp             x5, lr, [x16, #0x1b0]
    // 0x8886fc: blr             lr
    // 0x888700: mov             x3, x0
    // 0x888704: r2 = Null
    //     0x888704: mov             x2, NULL
    // 0x888708: r1 = Null
    //     0x888708: mov             x1, NULL
    // 0x88870c: stur            x3, [fp, #-8]
    // 0x888710: branchIfSmi(r0, 0x888738)
    //     0x888710: tbz             w0, #0, #0x888738
    // 0x888714: r4 = LoadClassIdInstr(r0)
    //     0x888714: ldur            x4, [x0, #-1]
    //     0x888718: ubfx            x4, x4, #0xc, #0x14
    // 0x88871c: sub             x4, x4, #0x3b
    // 0x888720: cmp             x4, #2
    // 0x888724: b.ls            #0x888738
    // 0x888728: r8 = num
    //     0x888728: ldr             x8, [PP, #0x3e8]  ; [pp+0x3e8] Type: num
    // 0x88872c: r3 = Null
    //     0x88872c: add             x3, PP, #0x13, lsl #12  ; [pp+0x131c0] Null
    //     0x888730: ldr             x3, [x3, #0x1c0]
    // 0x888734: r0 = DefaultTypeTest()
    //     0x888734: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x888738: r16 = 40
    //     0x888738: movz            x16, #0x28
    // 0x88873c: ldur            lr, [fp, #-8]
    // 0x888740: stp             lr, x16, [SP]
    // 0x888744: r0 = -()
    //     0x888744: bl              #0x14fdaac  ; [dart:core] _IntegerImplementation::-
    // 0x888748: r1 = LoadInt32Instr(r0)
    //     0x888748: sbfx            x1, x0, #1, #0x1f
    //     0x88874c: tbz             w0, #0, #0x888754
    //     0x888750: ldur            x1, [x0, #7]
    // 0x888754: cmp             x1, #1
    // 0x888758: b.ge            #0x888764
    // 0x88875c: r3 = 1
    //     0x88875c: movz            x3, #0x1
    // 0x888760: b               #0x888768
    // 0x888764: mov             x3, x1
    // 0x888768: stur            x3, [fp, #-0x28]
    // 0x88876c: r0 = LoadStaticField(0xb54)
    //     0x88876c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888770: ldr             x0, [x0, #0x16a8]
    // 0x888774: cmp             w0, NULL
    // 0x888778: b.ne            #0x888784
    // 0x88877c: r0 = Null
    //     0x88877c: mov             x0, NULL
    // 0x888780: b               #0x8887ac
    // 0x888784: r17 = 347
    //     0x888784: movz            x17, #0x15b
    // 0x888788: ldr             w1, [x0, x17]
    // 0x88878c: DecompressPointer r1
    //     0x88878c: add             x1, x1, HEAP, lsl #32
    // 0x888790: r0 = LoadClassIdInstr(r1)
    //     0x888790: ldur            x0, [x1, #-1]
    //     0x888794: ubfx            x0, x0, #0xc, #0x14
    // 0x888798: r2 = "dailyChores"
    //     0x888798: add             x2, PP, #0xf, lsl #12  ; [pp+0xfe48] "dailyChores"
    //     0x88879c: ldr             x2, [x2, #0xe48]
    // 0x8887a0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8887a0: sub             lr, x0, #0xb4
    //     0x8887a4: ldr             lr, [x21, lr, lsl #3]
    //     0x8887a8: blr             lr
    // 0x8887ac: r16 = 10
    //     0x8887ac: movz            x16, #0xa
    // 0x8887b0: stp             x16, x0, [SP]
    // 0x8887b4: r4 = 0
    //     0x8887b4: movz            x4, #0
    // 0x8887b8: ldr             x0, [SP, #8]
    // 0x8887bc: r5 = UnlinkedCall_0x7b3c80
    //     0x8887bc: add             x16, PP, #0x13, lsl #12  ; [pp+0x131d0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8887c0: ldp             x5, lr, [x16, #0x1d0]
    // 0x8887c4: blr             lr
    // 0x8887c8: tbnz            w0, #4, #0x8887d4
    // 0x8887cc: r2 = 1
    //     0x8887cc: movz            x2, #0x1
    // 0x8887d0: b               #0x8887d8
    // 0x8887d4: ldur            x2, [fp, #-0x28]
    // 0x8887d8: r0 = LoadStaticField(0xb54)
    //     0x8887d8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8887dc: ldr             x0, [x0, #0x16a8]
    // 0x8887e0: cmp             w0, NULL
    // 0x8887e4: b.ne            #0x8887f0
    // 0x8887e8: r0 = Null
    //     0x8887e8: mov             x0, NULL
    // 0x8887ec: b               #0x888808
    // 0x8887f0: LoadField: r3 = r0->field_6b
    //     0x8887f0: ldur            x3, [x0, #0x6b]
    // 0x8887f4: r0 = BoxInt64Instr(r3)
    //     0x8887f4: sbfiz           x0, x3, #1, #0x1f
    //     0x8887f8: cmp             x3, x0, asr #1
    //     0x8887fc: b.eq            #0x888808
    //     0x888800: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x888804: stur            x3, [x0, #7]
    // 0x888808: cmp             w0, NULL
    // 0x88880c: b.ne            #0x888818
    // 0x888810: r0 = 0
    //     0x888810: movz            x0, #0
    // 0x888814: b               #0x888828
    // 0x888818: r1 = LoadInt32Instr(r0)
    //     0x888818: sbfx            x1, x0, #1, #0x1f
    //     0x88881c: tbz             w0, #0, #0x888824
    //     0x888820: ldur            x1, [x0, #7]
    // 0x888824: mov             x0, x1
    // 0x888828: cmp             x0, #0x1e
    // 0x88882c: b.ge            #0x888838
    // 0x888830: r0 = 1
    //     0x888830: movz            x0, #0x1
    // 0x888834: b               #0x88db2c
    // 0x888838: mov             x0, x2
    // 0x88883c: b               #0x88db2c
    // 0x888840: r0 = 20
    //     0x888840: movz            x0, #0x14
    // 0x888844: b               #0x88db2c
    // 0x888848: r16 = "monkeyMoney"
    //     0x888848: add             x16, PP, #0x13, lsl #12  ; [pp+0x131e0] "monkeyMoney"
    //     0x88884c: ldr             x16, [x16, #0x1e0]
    // 0x888850: ldur            lr, [fp, #-0x20]
    // 0x888854: stp             lr, x16, [SP]
    // 0x888858: r0 = ==()
    //     0x888858: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88885c: tbnz            w0, #4, #0x888a10
    // 0x888860: r0 = LoadStaticField(0xb54)
    //     0x888860: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888864: ldr             x0, [x0, #0x16a8]
    // 0x888868: cmp             w0, NULL
    // 0x88886c: b.eq            #0x888a08
    // 0x888870: r17 = 347
    //     0x888870: movz            x17, #0x15b
    // 0x888874: ldr             w1, [x0, x17]
    // 0x888878: DecompressPointer r1
    //     0x888878: add             x1, x1, HEAP, lsl #32
    // 0x88887c: r0 = LoadClassIdInstr(r1)
    //     0x88887c: ldur            x0, [x1, #-1]
    //     0x888880: ubfx            x0, x0, #0xc, #0x14
    // 0x888884: r2 = "monkeyAffection"
    //     0x888884: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888888: ldr             x2, [x2, #0x1e8]
    // 0x88888c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88888c: sub             lr, x0, #0xb4
    //     0x888890: ldr             lr, [x21, lr, lsl #3]
    //     0x888894: blr             lr
    // 0x888898: cmp             w0, NULL
    // 0x88889c: b.eq            #0x888a08
    // 0x8888a0: r0 = LoadStaticField(0xb54)
    //     0x8888a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8888a4: ldr             x0, [x0, #0x16a8]
    // 0x8888a8: cmp             w0, NULL
    // 0x8888ac: b.ne            #0x8888b8
    // 0x8888b0: r0 = Null
    //     0x8888b0: mov             x0, NULL
    // 0x8888b4: b               #0x8888e0
    // 0x8888b8: r17 = 347
    //     0x8888b8: movz            x17, #0x15b
    // 0x8888bc: ldr             w1, [x0, x17]
    // 0x8888c0: DecompressPointer r1
    //     0x8888c0: add             x1, x1, HEAP, lsl #32
    // 0x8888c4: r0 = LoadClassIdInstr(r1)
    //     0x8888c4: ldur            x0, [x1, #-1]
    //     0x8888c8: ubfx            x0, x0, #0xc, #0x14
    // 0x8888cc: r2 = "monkeyAffection"
    //     0x8888cc: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x8888d0: ldr             x2, [x2, #0x1e8]
    // 0x8888d4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8888d4: sub             lr, x0, #0xb4
    //     0x8888d8: ldr             lr, [x21, lr, lsl #3]
    //     0x8888dc: blr             lr
    // 0x8888e0: r16 = 10
    //     0x8888e0: movz            x16, #0xa
    // 0x8888e4: stp             x16, x0, [SP]
    // 0x8888e8: r4 = 0
    //     0x8888e8: movz            x4, #0
    // 0x8888ec: ldr             x0, [SP, #8]
    // 0x8888f0: r5 = UnlinkedCall_0x7b3c80
    //     0x8888f0: add             x16, PP, #0x13, lsl #12  ; [pp+0x131f0] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8888f4: ldp             x5, lr, [x16, #0x1f0]
    // 0x8888f8: blr             lr
    // 0x8888fc: tst             x0, #0x10
    // 0x888900: cset            x3, ne
    // 0x888904: sub             x3, x3, #1
    // 0x888908: r16 = -200
    //     0x888908: movn            x16, #0xc7
    // 0x88890c: and             x3, x3, x16
    // 0x888910: add             x3, x3, #0x190
    // 0x888914: stur            x3, [fp, #-8]
    // 0x888918: r0 = LoadStaticField(0xb54)
    //     0x888918: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88891c: ldr             x0, [x0, #0x16a8]
    // 0x888920: cmp             w0, NULL
    // 0x888924: b.ne            #0x888930
    // 0x888928: r0 = Null
    //     0x888928: mov             x0, NULL
    // 0x88892c: b               #0x888958
    // 0x888930: r17 = 347
    //     0x888930: movz            x17, #0x15b
    // 0x888934: ldr             w1, [x0, x17]
    // 0x888938: DecompressPointer r1
    //     0x888938: add             x1, x1, HEAP, lsl #32
    // 0x88893c: r0 = LoadClassIdInstr(r1)
    //     0x88893c: ldur            x0, [x1, #-1]
    //     0x888940: ubfx            x0, x0, #0xc, #0x14
    // 0x888944: r2 = "monkeyAffection"
    //     0x888944: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888948: ldr             x2, [x2, #0x1e8]
    // 0x88894c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88894c: sub             lr, x0, #0xb4
    //     0x888950: ldr             lr, [x21, lr, lsl #3]
    //     0x888954: blr             lr
    // 0x888958: r16 = 16
    //     0x888958: movz            x16, #0x10
    // 0x88895c: stp             x16, x0, [SP]
    // 0x888960: r4 = 0
    //     0x888960: movz            x4, #0
    // 0x888964: ldr             x0, [SP, #8]
    // 0x888968: r16 = UnlinkedCall_0x7b3c80
    //     0x888968: add             x16, PP, #0x13, lsl #12  ; [pp+0x13200] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x88896c: add             x16, x16, #0x200
    // 0x888970: ldp             x5, lr, [x16]
    // 0x888974: blr             lr
    // 0x888978: tbnz            w0, #4, #0x888984
    // 0x88897c: r3 = 50
    //     0x88897c: movz            x3, #0x32
    // 0x888980: b               #0x888990
    // 0x888984: ldur            x0, [fp, #-8]
    // 0x888988: r1 = LoadInt32Instr(r0)
    //     0x888988: sbfx            x1, x0, #1, #0x1f
    // 0x88898c: mov             x3, x1
    // 0x888990: stur            x3, [fp, #-0x28]
    // 0x888994: r0 = LoadStaticField(0xb54)
    //     0x888994: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888998: ldr             x0, [x0, #0x16a8]
    // 0x88899c: cmp             w0, NULL
    // 0x8889a0: b.ne            #0x8889ac
    // 0x8889a4: r0 = Null
    //     0x8889a4: mov             x0, NULL
    // 0x8889a8: b               #0x8889d4
    // 0x8889ac: r17 = 347
    //     0x8889ac: movz            x17, #0x15b
    // 0x8889b0: ldr             w1, [x0, x17]
    // 0x8889b4: DecompressPointer r1
    //     0x8889b4: add             x1, x1, HEAP, lsl #32
    // 0x8889b8: r0 = LoadClassIdInstr(r1)
    //     0x8889b8: ldur            x0, [x1, #-1]
    //     0x8889bc: ubfx            x0, x0, #0xc, #0x14
    // 0x8889c0: r2 = "monkeyAffection"
    //     0x8889c0: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x8889c4: ldr             x2, [x2, #0x1e8]
    // 0x8889c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8889c8: sub             lr, x0, #0xb4
    //     0x8889cc: ldr             lr, [x21, lr, lsl #3]
    //     0x8889d0: blr             lr
    // 0x8889d4: r16 = 20
    //     0x8889d4: movz            x16, #0x14
    // 0x8889d8: stp             x16, x0, [SP]
    // 0x8889dc: r4 = 0
    //     0x8889dc: movz            x4, #0
    // 0x8889e0: ldr             x0, [SP, #8]
    // 0x8889e4: r16 = UnlinkedCall_0x7b3c80
    //     0x8889e4: add             x16, PP, #0x13, lsl #12  ; [pp+0x13210] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x8889e8: add             x16, x16, #0x210
    // 0x8889ec: ldp             x5, lr, [x16]
    // 0x8889f0: blr             lr
    // 0x8889f4: tbnz            w0, #4, #0x888a00
    // 0x8889f8: r0 = 10
    //     0x8889f8: movz            x0, #0xa
    // 0x8889fc: b               #0x88db2c
    // 0x888a00: ldur            x0, [fp, #-0x28]
    // 0x888a04: b               #0x88db2c
    // 0x888a08: r0 = 200
    //     0x888a08: movz            x0, #0xc8
    // 0x888a0c: b               #0x88db2c
    // 0x888a10: r16 = "monkeyEvent"
    //     0x888a10: add             x16, PP, #0x13, lsl #12  ; [pp+0x13220] "monkeyEvent"
    //     0x888a14: ldr             x16, [x16, #0x220]
    // 0x888a18: ldur            lr, [fp, #-0x20]
    // 0x888a1c: stp             lr, x16, [SP]
    // 0x888a20: r0 = ==()
    //     0x888a20: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888a24: tbnz            w0, #4, #0x888bdc
    // 0x888a28: r0 = LoadStaticField(0xb54)
    //     0x888a28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888a2c: ldr             x0, [x0, #0x16a8]
    // 0x888a30: cmp             w0, NULL
    // 0x888a34: b.eq            #0x888bd4
    // 0x888a38: r17 = 347
    //     0x888a38: movz            x17, #0x15b
    // 0x888a3c: ldr             w1, [x0, x17]
    // 0x888a40: DecompressPointer r1
    //     0x888a40: add             x1, x1, HEAP, lsl #32
    // 0x888a44: r0 = LoadClassIdInstr(r1)
    //     0x888a44: ldur            x0, [x1, #-1]
    //     0x888a48: ubfx            x0, x0, #0xc, #0x14
    // 0x888a4c: r2 = "monkeyAffection"
    //     0x888a4c: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888a50: ldr             x2, [x2, #0x1e8]
    // 0x888a54: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888a54: sub             lr, x0, #0xb4
    //     0x888a58: ldr             lr, [x21, lr, lsl #3]
    //     0x888a5c: blr             lr
    // 0x888a60: cmp             w0, NULL
    // 0x888a64: b.eq            #0x888bd4
    // 0x888a68: r0 = LoadStaticField(0xb54)
    //     0x888a68: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888a6c: ldr             x0, [x0, #0x16a8]
    // 0x888a70: cmp             w0, NULL
    // 0x888a74: b.ne            #0x888a80
    // 0x888a78: r0 = Null
    //     0x888a78: mov             x0, NULL
    // 0x888a7c: b               #0x888aa8
    // 0x888a80: r17 = 347
    //     0x888a80: movz            x17, #0x15b
    // 0x888a84: ldr             w1, [x0, x17]
    // 0x888a88: DecompressPointer r1
    //     0x888a88: add             x1, x1, HEAP, lsl #32
    // 0x888a8c: r0 = LoadClassIdInstr(r1)
    //     0x888a8c: ldur            x0, [x1, #-1]
    //     0x888a90: ubfx            x0, x0, #0xc, #0x14
    // 0x888a94: r2 = "monkeyAffection"
    //     0x888a94: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888a98: ldr             x2, [x2, #0x1e8]
    // 0x888a9c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888a9c: sub             lr, x0, #0xb4
    //     0x888aa0: ldr             lr, [x21, lr, lsl #3]
    //     0x888aa4: blr             lr
    // 0x888aa8: r16 = 10
    //     0x888aa8: movz            x16, #0xa
    // 0x888aac: stp             x16, x0, [SP]
    // 0x888ab0: r4 = 0
    //     0x888ab0: movz            x4, #0
    // 0x888ab4: ldr             x0, [SP, #8]
    // 0x888ab8: r16 = UnlinkedCall_0x7b3c80
    //     0x888ab8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13228] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x888abc: add             x16, x16, #0x228
    // 0x888ac0: ldp             x5, lr, [x16]
    // 0x888ac4: blr             lr
    // 0x888ac8: tst             x0, #0x10
    // 0x888acc: cset            x3, ne
    // 0x888ad0: sub             x3, x3, #1
    // 0x888ad4: r16 = 10
    //     0x888ad4: movz            x16, #0xa
    // 0x888ad8: and             x3, x3, x16
    // 0x888adc: add             x3, x3, #0xa
    // 0x888ae0: stur            x3, [fp, #-8]
    // 0x888ae4: r0 = LoadStaticField(0xb54)
    //     0x888ae4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888ae8: ldr             x0, [x0, #0x16a8]
    // 0x888aec: cmp             w0, NULL
    // 0x888af0: b.ne            #0x888afc
    // 0x888af4: r0 = Null
    //     0x888af4: mov             x0, NULL
    // 0x888af8: b               #0x888b24
    // 0x888afc: r17 = 347
    //     0x888afc: movz            x17, #0x15b
    // 0x888b00: ldr             w1, [x0, x17]
    // 0x888b04: DecompressPointer r1
    //     0x888b04: add             x1, x1, HEAP, lsl #32
    // 0x888b08: r0 = LoadClassIdInstr(r1)
    //     0x888b08: ldur            x0, [x1, #-1]
    //     0x888b0c: ubfx            x0, x0, #0xc, #0x14
    // 0x888b10: r2 = "monkeyAffection"
    //     0x888b10: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888b14: ldr             x2, [x2, #0x1e8]
    // 0x888b18: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888b18: sub             lr, x0, #0xb4
    //     0x888b1c: ldr             lr, [x21, lr, lsl #3]
    //     0x888b20: blr             lr
    // 0x888b24: r16 = 16
    //     0x888b24: movz            x16, #0x10
    // 0x888b28: stp             x16, x0, [SP]
    // 0x888b2c: r4 = 0
    //     0x888b2c: movz            x4, #0
    // 0x888b30: ldr             x0, [SP, #8]
    // 0x888b34: r16 = UnlinkedCall_0x7b3c80
    //     0x888b34: add             x16, PP, #0x13, lsl #12  ; [pp+0x13238] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x888b38: add             x16, x16, #0x238
    // 0x888b3c: ldp             x5, lr, [x16]
    // 0x888b40: blr             lr
    // 0x888b44: tbnz            w0, #4, #0x888b50
    // 0x888b48: r3 = 20
    //     0x888b48: movz            x3, #0x14
    // 0x888b4c: b               #0x888b5c
    // 0x888b50: ldur            x0, [fp, #-8]
    // 0x888b54: r1 = LoadInt32Instr(r0)
    //     0x888b54: sbfx            x1, x0, #1, #0x1f
    // 0x888b58: mov             x3, x1
    // 0x888b5c: stur            x3, [fp, #-0x28]
    // 0x888b60: r0 = LoadStaticField(0xb54)
    //     0x888b60: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888b64: ldr             x0, [x0, #0x16a8]
    // 0x888b68: cmp             w0, NULL
    // 0x888b6c: b.ne            #0x888b78
    // 0x888b70: r0 = Null
    //     0x888b70: mov             x0, NULL
    // 0x888b74: b               #0x888ba0
    // 0x888b78: r17 = 347
    //     0x888b78: movz            x17, #0x15b
    // 0x888b7c: ldr             w1, [x0, x17]
    // 0x888b80: DecompressPointer r1
    //     0x888b80: add             x1, x1, HEAP, lsl #32
    // 0x888b84: r0 = LoadClassIdInstr(r1)
    //     0x888b84: ldur            x0, [x1, #-1]
    //     0x888b88: ubfx            x0, x0, #0xc, #0x14
    // 0x888b8c: r2 = "monkeyAffection"
    //     0x888b8c: add             x2, PP, #0x13, lsl #12  ; [pp+0x131e8] "monkeyAffection"
    //     0x888b90: ldr             x2, [x2, #0x1e8]
    // 0x888b94: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888b94: sub             lr, x0, #0xb4
    //     0x888b98: ldr             lr, [x21, lr, lsl #3]
    //     0x888b9c: blr             lr
    // 0x888ba0: r16 = 20
    //     0x888ba0: movz            x16, #0x14
    // 0x888ba4: stp             x16, x0, [SP]
    // 0x888ba8: r4 = 0
    //     0x888ba8: movz            x4, #0
    // 0x888bac: ldr             x0, [SP, #8]
    // 0x888bb0: r16 = UnlinkedCall_0x7b3c80
    //     0x888bb0: add             x16, PP, #0x13, lsl #12  ; [pp+0x13248] UnlinkedCall: 0x7b3c80 - SwitchableCallMissStub
    //     0x888bb4: add             x16, x16, #0x248
    // 0x888bb8: ldp             x5, lr, [x16]
    // 0x888bbc: blr             lr
    // 0x888bc0: tbnz            w0, #4, #0x888bcc
    // 0x888bc4: r0 = 30
    //     0x888bc4: movz            x0, #0x1e
    // 0x888bc8: b               #0x88db2c
    // 0x888bcc: ldur            x0, [fp, #-0x28]
    // 0x888bd0: b               #0x88db2c
    // 0x888bd4: r0 = 5
    //     0x888bd4: movz            x0, #0x5
    // 0x888bd8: b               #0x88db2c
    // 0x888bdc: r16 = "requireCards"
    //     0x888bdc: add             x16, PP, #0x11, lsl #12  ; [pp+0x11358] "requireCards"
    //     0x888be0: ldr             x16, [x16, #0x358]
    // 0x888be4: ldur            lr, [fp, #-0x20]
    // 0x888be8: stp             lr, x16, [SP]
    // 0x888bec: r0 = ==()
    //     0x888bec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x888bf0: tbnz            w0, #4, #0x889034
    // 0x888bf4: r0 = LoadStaticField(0xb54)
    //     0x888bf4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888bf8: ldr             x0, [x0, #0x16a8]
    // 0x888bfc: cmp             w0, NULL
    // 0x888c00: b.ne            #0x888c0c
    // 0x888c04: r0 = Null
    //     0x888c04: mov             x0, NULL
    // 0x888c08: b               #0x888c34
    // 0x888c0c: r17 = 327
    //     0x888c0c: movz            x17, #0x147
    // 0x888c10: ldr             w1, [x0, x17]
    // 0x888c14: DecompressPointer r1
    //     0x888c14: add             x1, x1, HEAP, lsl #32
    // 0x888c18: r0 = LoadClassIdInstr(r1)
    //     0x888c18: ldur            x0, [x1, #-1]
    //     0x888c1c: ubfx            x0, x0, #0xc, #0x14
    // 0x888c20: r2 = "storyFitnessOpen"
    //     0x888c20: add             x2, PP, #0x13, lsl #12  ; [pp+0x13258] "storyFitnessOpen"
    //     0x888c24: ldr             x2, [x2, #0x258]
    // 0x888c28: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888c28: sub             lr, x0, #0xb4
    //     0x888c2c: ldr             lr, [x21, lr, lsl #3]
    //     0x888c30: blr             lr
    // 0x888c34: r1 = 59
    //     0x888c34: movz            x1, #0x3b
    // 0x888c38: branchIfSmi(r0, 0x888c44)
    //     0x888c38: tbz             w0, #0, #0x888c44
    // 0x888c3c: r1 = LoadClassIdInstr(r0)
    //     0x888c3c: ldur            x1, [x0, #-1]
    //     0x888c40: ubfx            x1, x1, #0xc, #0x14
    // 0x888c44: r16 = true
    //     0x888c44: add             x16, NULL, #0x20  ; true
    // 0x888c48: stp             x16, x0, [SP]
    // 0x888c4c: mov             x0, x1
    // 0x888c50: mov             lr, x0
    // 0x888c54: ldr             lr, [x21, lr, lsl #3]
    // 0x888c58: blr             lr
    // 0x888c5c: tst             x0, #0x10
    // 0x888c60: cset            x3, ne
    // 0x888c64: sub             x3, x3, #1
    // 0x888c68: r16 = 20
    //     0x888c68: movz            x16, #0x14
    // 0x888c6c: and             x3, x3, x16
    // 0x888c70: add             x3, x3, #0x14
    // 0x888c74: stur            x3, [fp, #-8]
    // 0x888c78: r0 = LoadStaticField(0xb54)
    //     0x888c78: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888c7c: ldr             x0, [x0, #0x16a8]
    // 0x888c80: cmp             w0, NULL
    // 0x888c84: b.ne            #0x888c90
    // 0x888c88: r0 = Null
    //     0x888c88: mov             x0, NULL
    // 0x888c8c: b               #0x888cb8
    // 0x888c90: r17 = 327
    //     0x888c90: movz            x17, #0x147
    // 0x888c94: ldr             w1, [x0, x17]
    // 0x888c98: DecompressPointer r1
    //     0x888c98: add             x1, x1, HEAP, lsl #32
    // 0x888c9c: r0 = LoadClassIdInstr(r1)
    //     0x888c9c: ldur            x0, [x1, #-1]
    //     0x888ca0: ubfx            x0, x0, #0xc, #0x14
    // 0x888ca4: r2 = "storyTrip.18"
    //     0x888ca4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13260] "storyTrip.18"
    //     0x888ca8: ldr             x2, [x2, #0x260]
    // 0x888cac: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888cac: sub             lr, x0, #0xb4
    //     0x888cb0: ldr             lr, [x21, lr, lsl #3]
    //     0x888cb4: blr             lr
    // 0x888cb8: r1 = 59
    //     0x888cb8: movz            x1, #0x3b
    // 0x888cbc: branchIfSmi(r0, 0x888cc8)
    //     0x888cbc: tbz             w0, #0, #0x888cc8
    // 0x888cc0: r1 = LoadClassIdInstr(r0)
    //     0x888cc0: ldur            x1, [x0, #-1]
    //     0x888cc4: ubfx            x1, x1, #0xc, #0x14
    // 0x888cc8: r16 = true
    //     0x888cc8: add             x16, NULL, #0x20  ; true
    // 0x888ccc: stp             x16, x0, [SP]
    // 0x888cd0: mov             x0, x1
    // 0x888cd4: mov             lr, x0
    // 0x888cd8: ldr             lr, [x21, lr, lsl #3]
    // 0x888cdc: blr             lr
    // 0x888ce0: tbnz            w0, #4, #0x888cf8
    // 0x888ce4: ldur            x0, [fp, #-8]
    // 0x888ce8: r1 = LoadInt32Instr(r0)
    //     0x888ce8: sbfx            x1, x0, #1, #0x1f
    // 0x888cec: add             x0, x1, #0xa
    // 0x888cf0: mov             x3, x0
    // 0x888cf4: b               #0x888d04
    // 0x888cf8: ldur            x0, [fp, #-8]
    // 0x888cfc: r1 = LoadInt32Instr(r0)
    //     0x888cfc: sbfx            x1, x0, #1, #0x1f
    // 0x888d00: mov             x3, x1
    // 0x888d04: stur            x3, [fp, #-0x28]
    // 0x888d08: r0 = LoadStaticField(0xb54)
    //     0x888d08: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888d0c: ldr             x0, [x0, #0x16a8]
    // 0x888d10: cmp             w0, NULL
    // 0x888d14: b.ne            #0x888d20
    // 0x888d18: r0 = Null
    //     0x888d18: mov             x0, NULL
    // 0x888d1c: b               #0x888d48
    // 0x888d20: r17 = 327
    //     0x888d20: movz            x17, #0x147
    // 0x888d24: ldr             w1, [x0, x17]
    // 0x888d28: DecompressPointer r1
    //     0x888d28: add             x1, x1, HEAP, lsl #32
    // 0x888d2c: r0 = LoadClassIdInstr(r1)
    //     0x888d2c: ldur            x0, [x1, #-1]
    //     0x888d30: ubfx            x0, x0, #0xc, #0x14
    // 0x888d34: r2 = "storyDojo.End"
    //     0x888d34: add             x2, PP, #0x10, lsl #12  ; [pp+0x10ac0] "storyDojo.End"
    //     0x888d38: ldr             x2, [x2, #0xac0]
    // 0x888d3c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888d3c: sub             lr, x0, #0xb4
    //     0x888d40: ldr             lr, [x21, lr, lsl #3]
    //     0x888d44: blr             lr
    // 0x888d48: r1 = 59
    //     0x888d48: movz            x1, #0x3b
    // 0x888d4c: branchIfSmi(r0, 0x888d58)
    //     0x888d4c: tbz             w0, #0, #0x888d58
    // 0x888d50: r1 = LoadClassIdInstr(r0)
    //     0x888d50: ldur            x1, [x0, #-1]
    //     0x888d54: ubfx            x1, x1, #0xc, #0x14
    // 0x888d58: r16 = true
    //     0x888d58: add             x16, NULL, #0x20  ; true
    // 0x888d5c: stp             x16, x0, [SP]
    // 0x888d60: mov             x0, x1
    // 0x888d64: mov             lr, x0
    // 0x888d68: ldr             lr, [x21, lr, lsl #3]
    // 0x888d6c: blr             lr
    // 0x888d70: tbnz            w0, #4, #0x888d84
    // 0x888d74: ldur            x0, [fp, #-0x28]
    // 0x888d78: add             x1, x0, #0xa
    // 0x888d7c: mov             x3, x1
    // 0x888d80: b               #0x888d8c
    // 0x888d84: ldur            x0, [fp, #-0x28]
    // 0x888d88: mov             x3, x0
    // 0x888d8c: stur            x3, [fp, #-0x28]
    // 0x888d90: r0 = LoadStaticField(0xb54)
    //     0x888d90: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888d94: ldr             x0, [x0, #0x16a8]
    // 0x888d98: cmp             w0, NULL
    // 0x888d9c: b.ne            #0x888da8
    // 0x888da0: r0 = Null
    //     0x888da0: mov             x0, NULL
    // 0x888da4: b               #0x888dd0
    // 0x888da8: r17 = 327
    //     0x888da8: movz            x17, #0x147
    // 0x888dac: ldr             w1, [x0, x17]
    // 0x888db0: DecompressPointer r1
    //     0x888db0: add             x1, x1, HEAP, lsl #32
    // 0x888db4: r0 = LoadClassIdInstr(r1)
    //     0x888db4: ldur            x0, [x1, #-1]
    //     0x888db8: ubfx            x0, x0, #0xc, #0x14
    // 0x888dbc: r2 = "storyMinaBadge.End"
    //     0x888dbc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc50] "storyMinaBadge.End"
    //     0x888dc0: ldr             x2, [x2, #0xc50]
    // 0x888dc4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888dc4: sub             lr, x0, #0xb4
    //     0x888dc8: ldr             lr, [x21, lr, lsl #3]
    //     0x888dcc: blr             lr
    // 0x888dd0: r1 = 59
    //     0x888dd0: movz            x1, #0x3b
    // 0x888dd4: branchIfSmi(r0, 0x888de0)
    //     0x888dd4: tbz             w0, #0, #0x888de0
    // 0x888dd8: r1 = LoadClassIdInstr(r0)
    //     0x888dd8: ldur            x1, [x0, #-1]
    //     0x888ddc: ubfx            x1, x1, #0xc, #0x14
    // 0x888de0: r16 = true
    //     0x888de0: add             x16, NULL, #0x20  ; true
    // 0x888de4: stp             x16, x0, [SP]
    // 0x888de8: mov             x0, x1
    // 0x888dec: mov             lr, x0
    // 0x888df0: ldr             lr, [x21, lr, lsl #3]
    // 0x888df4: blr             lr
    // 0x888df8: tbnz            w0, #4, #0x888e0c
    // 0x888dfc: ldur            x0, [fp, #-0x28]
    // 0x888e00: add             x1, x0, #0xa
    // 0x888e04: mov             x3, x1
    // 0x888e08: b               #0x888e14
    // 0x888e0c: ldur            x0, [fp, #-0x28]
    // 0x888e10: mov             x3, x0
    // 0x888e14: stur            x3, [fp, #-0x28]
    // 0x888e18: r0 = LoadStaticField(0xb54)
    //     0x888e18: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888e1c: ldr             x0, [x0, #0x16a8]
    // 0x888e20: cmp             w0, NULL
    // 0x888e24: b.ne            #0x888e30
    // 0x888e28: r0 = Null
    //     0x888e28: mov             x0, NULL
    // 0x888e2c: b               #0x888e58
    // 0x888e30: r17 = 327
    //     0x888e30: movz            x17, #0x147
    // 0x888e34: ldr             w1, [x0, x17]
    // 0x888e38: DecompressPointer r1
    //     0x888e38: add             x1, x1, HEAP, lsl #32
    // 0x888e3c: r0 = LoadClassIdInstr(r1)
    //     0x888e3c: ldur            x0, [x1, #-1]
    //     0x888e40: ubfx            x0, x0, #0xc, #0x14
    // 0x888e44: r2 = "storyYukiComa.End"
    //     0x888e44: add             x2, PP, #0x13, lsl #12  ; [pp+0x13268] "storyYukiComa.End"
    //     0x888e48: ldr             x2, [x2, #0x268]
    // 0x888e4c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888e4c: sub             lr, x0, #0xb4
    //     0x888e50: ldr             lr, [x21, lr, lsl #3]
    //     0x888e54: blr             lr
    // 0x888e58: r1 = 59
    //     0x888e58: movz            x1, #0x3b
    // 0x888e5c: branchIfSmi(r0, 0x888e68)
    //     0x888e5c: tbz             w0, #0, #0x888e68
    // 0x888e60: r1 = LoadClassIdInstr(r0)
    //     0x888e60: ldur            x1, [x0, #-1]
    //     0x888e64: ubfx            x1, x1, #0xc, #0x14
    // 0x888e68: r16 = true
    //     0x888e68: add             x16, NULL, #0x20  ; true
    // 0x888e6c: stp             x16, x0, [SP]
    // 0x888e70: mov             x0, x1
    // 0x888e74: mov             lr, x0
    // 0x888e78: ldr             lr, [x21, lr, lsl #3]
    // 0x888e7c: blr             lr
    // 0x888e80: tbnz            w0, #4, #0x888e94
    // 0x888e84: ldur            x0, [fp, #-0x28]
    // 0x888e88: add             x1, x0, #0xa
    // 0x888e8c: mov             x3, x1
    // 0x888e90: b               #0x888e9c
    // 0x888e94: ldur            x0, [fp, #-0x28]
    // 0x888e98: mov             x3, x0
    // 0x888e9c: stur            x3, [fp, #-0x28]
    // 0x888ea0: r0 = LoadStaticField(0xb54)
    //     0x888ea0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888ea4: ldr             x0, [x0, #0x16a8]
    // 0x888ea8: cmp             w0, NULL
    // 0x888eac: b.ne            #0x888eb8
    // 0x888eb0: r0 = Null
    //     0x888eb0: mov             x0, NULL
    // 0x888eb4: b               #0x888ee0
    // 0x888eb8: r17 = 327
    //     0x888eb8: movz            x17, #0x147
    // 0x888ebc: ldr             w1, [x0, x17]
    // 0x888ec0: DecompressPointer r1
    //     0x888ec0: add             x1, x1, HEAP, lsl #32
    // 0x888ec4: r0 = LoadClassIdInstr(r1)
    //     0x888ec4: ldur            x0, [x1, #-1]
    //     0x888ec8: ubfx            x0, x0, #0xc, #0x14
    // 0x888ecc: r2 = "storyBackHome.1"
    //     0x888ecc: add             x2, PP, #0x13, lsl #12  ; [pp+0x13270] "storyBackHome.1"
    //     0x888ed0: ldr             x2, [x2, #0x270]
    // 0x888ed4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888ed4: sub             lr, x0, #0xb4
    //     0x888ed8: ldr             lr, [x21, lr, lsl #3]
    //     0x888edc: blr             lr
    // 0x888ee0: r1 = 59
    //     0x888ee0: movz            x1, #0x3b
    // 0x888ee4: branchIfSmi(r0, 0x888ef0)
    //     0x888ee4: tbz             w0, #0, #0x888ef0
    // 0x888ee8: r1 = LoadClassIdInstr(r0)
    //     0x888ee8: ldur            x1, [x0, #-1]
    //     0x888eec: ubfx            x1, x1, #0xc, #0x14
    // 0x888ef0: r16 = true
    //     0x888ef0: add             x16, NULL, #0x20  ; true
    // 0x888ef4: stp             x16, x0, [SP]
    // 0x888ef8: mov             x0, x1
    // 0x888efc: mov             lr, x0
    // 0x888f00: ldr             lr, [x21, lr, lsl #3]
    // 0x888f04: blr             lr
    // 0x888f08: tbnz            w0, #4, #0x888f1c
    // 0x888f0c: ldur            x0, [fp, #-0x28]
    // 0x888f10: add             x1, x0, #0xa
    // 0x888f14: mov             x3, x1
    // 0x888f18: b               #0x888f24
    // 0x888f1c: ldur            x0, [fp, #-0x28]
    // 0x888f20: mov             x3, x0
    // 0x888f24: stur            x3, [fp, #-0x28]
    // 0x888f28: r0 = LoadStaticField(0xb54)
    //     0x888f28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888f2c: ldr             x0, [x0, #0x16a8]
    // 0x888f30: cmp             w0, NULL
    // 0x888f34: b.ne            #0x888f40
    // 0x888f38: r0 = Null
    //     0x888f38: mov             x0, NULL
    // 0x888f3c: b               #0x888f68
    // 0x888f40: r17 = 327
    //     0x888f40: movz            x17, #0x147
    // 0x888f44: ldr             w1, [x0, x17]
    // 0x888f48: DecompressPointer r1
    //     0x888f48: add             x1, x1, HEAP, lsl #32
    // 0x888f4c: r0 = LoadClassIdInstr(r1)
    //     0x888f4c: ldur            x0, [x1, #-1]
    //     0x888f50: ubfx            x0, x0, #0xc, #0x14
    // 0x888f54: r2 = "storyJimaPrison.End"
    //     0x888f54: add             x2, PP, #0x13, lsl #12  ; [pp+0x13278] "storyJimaPrison.End"
    //     0x888f58: ldr             x2, [x2, #0x278]
    // 0x888f5c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888f5c: sub             lr, x0, #0xb4
    //     0x888f60: ldr             lr, [x21, lr, lsl #3]
    //     0x888f64: blr             lr
    // 0x888f68: r1 = 59
    //     0x888f68: movz            x1, #0x3b
    // 0x888f6c: branchIfSmi(r0, 0x888f78)
    //     0x888f6c: tbz             w0, #0, #0x888f78
    // 0x888f70: r1 = LoadClassIdInstr(r0)
    //     0x888f70: ldur            x1, [x0, #-1]
    //     0x888f74: ubfx            x1, x1, #0xc, #0x14
    // 0x888f78: r16 = true
    //     0x888f78: add             x16, NULL, #0x20  ; true
    // 0x888f7c: stp             x16, x0, [SP]
    // 0x888f80: mov             x0, x1
    // 0x888f84: mov             lr, x0
    // 0x888f88: ldr             lr, [x21, lr, lsl #3]
    // 0x888f8c: blr             lr
    // 0x888f90: tbnz            w0, #4, #0x888fa4
    // 0x888f94: ldur            x0, [fp, #-0x28]
    // 0x888f98: add             x1, x0, #0xa
    // 0x888f9c: mov             x3, x1
    // 0x888fa0: b               #0x888fac
    // 0x888fa4: ldur            x0, [fp, #-0x28]
    // 0x888fa8: mov             x3, x0
    // 0x888fac: stur            x3, [fp, #-0x28]
    // 0x888fb0: r0 = LoadStaticField(0xb54)
    //     0x888fb0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x888fb4: ldr             x0, [x0, #0x16a8]
    // 0x888fb8: cmp             w0, NULL
    // 0x888fbc: b.ne            #0x888fc8
    // 0x888fc0: r0 = Null
    //     0x888fc0: mov             x0, NULL
    // 0x888fc4: b               #0x888ff0
    // 0x888fc8: r17 = 327
    //     0x888fc8: movz            x17, #0x147
    // 0x888fcc: ldr             w1, [x0, x17]
    // 0x888fd0: DecompressPointer r1
    //     0x888fd0: add             x1, x1, HEAP, lsl #32
    // 0x888fd4: r0 = LoadClassIdInstr(r1)
    //     0x888fd4: ldur            x0, [x1, #-1]
    //     0x888fd8: ubfx            x0, x0, #0xc, #0x14
    // 0x888fdc: r2 = "hellMode"
    //     0x888fdc: add             x2, PP, #0xf, lsl #12  ; [pp+0xfd40] "hellMode"
    //     0x888fe0: ldr             x2, [x2, #0xd40]
    // 0x888fe4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x888fe4: sub             lr, x0, #0xb4
    //     0x888fe8: ldr             lr, [x21, lr, lsl #3]
    //     0x888fec: blr             lr
    // 0x888ff0: r1 = 59
    //     0x888ff0: movz            x1, #0x3b
    // 0x888ff4: branchIfSmi(r0, 0x889000)
    //     0x888ff4: tbz             w0, #0, #0x889000
    // 0x888ff8: r1 = LoadClassIdInstr(r0)
    //     0x888ff8: ldur            x1, [x0, #-1]
    //     0x888ffc: ubfx            x1, x1, #0xc, #0x14
    // 0x889000: r16 = true
    //     0x889000: add             x16, NULL, #0x20  ; true
    // 0x889004: stp             x16, x0, [SP]
    // 0x889008: mov             x0, x1
    // 0x88900c: mov             lr, x0
    // 0x889010: ldr             lr, [x21, lr, lsl #3]
    // 0x889014: blr             lr
    // 0x889018: tbnz            w0, #4, #0x88902c
    // 0x88901c: ldur            x0, [fp, #-0x28]
    // 0x889020: lsl             x1, x0, #1
    // 0x889024: mov             x0, x1
    // 0x889028: b               #0x88db2c
    // 0x88902c: ldur            x0, [fp, #-0x28]
    // 0x889030: b               #0x88db2c
    // 0x889034: r16 = "currentCards"
    //     0x889034: add             x16, PP, #0x13, lsl #12  ; [pp+0x13280] "currentCards"
    //     0x889038: ldr             x16, [x16, #0x280]
    // 0x88903c: ldur            lr, [fp, #-0x20]
    // 0x889040: stp             lr, x16, [SP]
    // 0x889044: r0 = ==()
    //     0x889044: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889048: tbnz            w0, #4, #0x889058
    // 0x88904c: r4 = const [0, 0, 0, 0, null]
    //     0x88904c: ldr             x4, [PP, #0x70a8]  ; [pp+0x70a8] List(5) [0, 0, 0, 0, Null]
    // 0x889050: r0 = getTotalUnlockedCards()
    //     0x889050: bl              #0x83c4fc  ; [package:battlecross/method/playerMethod.dart] ::getTotalUnlockedCards
    // 0x889054: b               #0x88db2c
    // 0x889058: r16 = "discountTravellers"
    //     0x889058: add             x16, PP, #0x13, lsl #12  ; [pp+0x13288] "discountTravellers"
    //     0x88905c: ldr             x16, [x16, #0x288]
    // 0x889060: ldur            lr, [fp, #-0x20]
    // 0x889064: stp             lr, x16, [SP]
    // 0x889068: r0 = ==()
    //     0x889068: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88906c: tbnz            w0, #4, #0x889128
    // 0x889070: r0 = LoadStaticField(0xb54)
    //     0x889070: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889074: ldr             x0, [x0, #0x16a8]
    // 0x889078: cmp             w0, NULL
    // 0x88907c: b.ne            #0x889088
    // 0x889080: r0 = Null
    //     0x889080: mov             x0, NULL
    // 0x889084: b               #0x8890b0
    // 0x889088: r17 = 327
    //     0x889088: movz            x17, #0x147
    // 0x88908c: ldr             w1, [x0, x17]
    // 0x889090: DecompressPointer r1
    //     0x889090: add             x1, x1, HEAP, lsl #32
    // 0x889094: r0 = LoadClassIdInstr(r1)
    //     0x889094: ldur            x0, [x1, #-1]
    //     0x889098: ubfx            x0, x0, #0xc, #0x14
    // 0x88909c: r2 = "travellerAssociation"
    //     0x88909c: add             x2, PP, #0x13, lsl #12  ; [pp+0x13290] "travellerAssociation"
    //     0x8890a0: ldr             x2, [x2, #0x290]
    // 0x8890a4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8890a4: sub             lr, x0, #0xb4
    //     0x8890a8: ldr             lr, [x21, lr, lsl #3]
    //     0x8890ac: blr             lr
    // 0x8890b0: r1 = 59
    //     0x8890b0: movz            x1, #0x3b
    // 0x8890b4: branchIfSmi(r0, 0x8890c0)
    //     0x8890b4: tbz             w0, #0, #0x8890c0
    // 0x8890b8: r1 = LoadClassIdInstr(r0)
    //     0x8890b8: ldur            x1, [x0, #-1]
    //     0x8890bc: ubfx            x1, x1, #0xc, #0x14
    // 0x8890c0: r16 = true
    //     0x8890c0: add             x16, NULL, #0x20  ; true
    // 0x8890c4: stp             x16, x0, [SP]
    // 0x8890c8: mov             x0, x1
    // 0x8890cc: mov             lr, x0
    // 0x8890d0: ldr             lr, [x21, lr, lsl #3]
    // 0x8890d4: blr             lr
    // 0x8890d8: tbnz            w0, #4, #0x889120
    // 0x8890dc: ldur            x0, [fp, #-0x10]
    // 0x8890e0: d0 = 0.700000
    //     0x8890e0: add             x17, PP, #0x13, lsl #12  ; [pp+0x13298] IMM: double(0.7) from 0x3fe6666666666666
    //     0x8890e4: ldr             d0, [x17, #0x298]
    // 0x8890e8: scvtf           d1, x0
    // 0x8890ec: fmul            d2, d1, d0
    // 0x8890f0: fcmp            d2, d2
    // 0x8890f4: b.vs            #0x88dcbc
    // 0x8890f8: fcvtms          x0, d2
    // 0x8890fc: asr             x16, x0, #0x1e
    // 0x889100: cmp             x16, x0, asr #63
    // 0x889104: b.ne            #0x88dcbc
    // 0x889108: lsl             x0, x0, #1
    // 0x88910c: r1 = LoadInt32Instr(r0)
    //     0x88910c: sbfx            x1, x0, #1, #0x1f
    //     0x889110: tbz             w0, #0, #0x889118
    //     0x889114: ldur            x1, [x0, #7]
    // 0x889118: mov             x0, x1
    // 0x88911c: b               #0x88db2c
    // 0x889120: ldur            x0, [fp, #-0x10]
    // 0x889124: b               #0x88db2c
    // 0x889128: r16 = "timeToNextDay8amSeconds"
    //     0x889128: add             x16, PP, #0x13, lsl #12  ; [pp+0x132a0] "timeToNextDay8amSeconds"
    //     0x88912c: ldr             x16, [x16, #0x2a0]
    // 0x889130: ldur            lr, [fp, #-0x20]
    // 0x889134: stp             lr, x16, [SP]
    // 0x889138: r0 = ==()
    //     0x889138: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88913c: tbnz            w0, #4, #0x8892cc
    // 0x889140: r0 = getTrueDateTime()
    //     0x889140: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889144: mov             x1, x0
    // 0x889148: r0 = _parts()
    //     0x889148: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x88914c: mov             x2, x0
    // 0x889150: LoadField: r0 = r2->field_b
    //     0x889150: ldur            w0, [x2, #0xb]
    // 0x889154: DecompressPointer r0
    //     0x889154: add             x0, x0, HEAP, lsl #32
    // 0x889158: r1 = LoadInt32Instr(r0)
    //     0x889158: sbfx            x1, x0, #1, #0x1f
    // 0x88915c: mov             x0, x1
    // 0x889160: r1 = 8
    //     0x889160: movz            x1, #0x8
    // 0x889164: cmp             x1, x0
    // 0x889168: b.hs            #0x88dcdc
    // 0x88916c: LoadField: r0 = r2->field_2f
    //     0x88916c: ldur            w0, [x2, #0x2f]
    // 0x889170: DecompressPointer r0
    //     0x889170: add             x0, x0, HEAP, lsl #32
    // 0x889174: stur            x0, [fp, #-8]
    // 0x889178: r0 = getTrueDateTime()
    //     0x889178: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x88917c: mov             x1, x0
    // 0x889180: r0 = _parts()
    //     0x889180: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889184: mov             x2, x0
    // 0x889188: LoadField: r0 = r2->field_b
    //     0x889188: ldur            w0, [x2, #0xb]
    // 0x88918c: DecompressPointer r0
    //     0x88918c: add             x0, x0, HEAP, lsl #32
    // 0x889190: r1 = LoadInt32Instr(r0)
    //     0x889190: sbfx            x1, x0, #1, #0x1f
    // 0x889194: mov             x0, x1
    // 0x889198: r1 = 7
    //     0x889198: movz            x1, #0x7
    // 0x88919c: cmp             x1, x0
    // 0x8891a0: b.hs            #0x88dce0
    // 0x8891a4: LoadField: r0 = r2->field_2b
    //     0x8891a4: ldur            w0, [x2, #0x2b]
    // 0x8891a8: DecompressPointer r0
    //     0x8891a8: add             x0, x0, HEAP, lsl #32
    // 0x8891ac: stur            x0, [fp, #-0x18]
    // 0x8891b0: r0 = getTrueDateTime()
    //     0x8891b0: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8891b4: mov             x1, x0
    // 0x8891b8: r0 = _parts()
    //     0x8891b8: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8891bc: mov             x2, x0
    // 0x8891c0: LoadField: r0 = r2->field_b
    //     0x8891c0: ldur            w0, [x2, #0xb]
    // 0x8891c4: DecompressPointer r0
    //     0x8891c4: add             x0, x0, HEAP, lsl #32
    // 0x8891c8: r1 = LoadInt32Instr(r0)
    //     0x8891c8: sbfx            x1, x0, #1, #0x1f
    // 0x8891cc: mov             x0, x1
    // 0x8891d0: r1 = 5
    //     0x8891d0: movz            x1, #0x5
    // 0x8891d4: cmp             x1, x0
    // 0x8891d8: b.hs            #0x88dce4
    // 0x8891dc: LoadField: r0 = r2->field_23
    //     0x8891dc: ldur            w0, [x2, #0x23]
    // 0x8891e0: DecompressPointer r0
    //     0x8891e0: add             x0, x0, HEAP, lsl #32
    // 0x8891e4: r1 = LoadInt32Instr(r0)
    //     0x8891e4: sbfx            x1, x0, #1, #0x1f
    //     0x8891e8: tbz             w0, #0, #0x8891f0
    //     0x8891ec: ldur            x1, [x0, #7]
    // 0x8891f0: add             x2, x1, #1
    // 0x8891f4: r0 = BoxInt64Instr(r2)
    //     0x8891f4: sbfiz           x0, x2, #1, #0x1f
    //     0x8891f8: cmp             x2, x0, asr #1
    //     0x8891fc: b.eq            #0x889208
    //     0x889200: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x889204: stur            x2, [x0, #7]
    // 0x889208: stur            x0, [fp, #-0x30]
    // 0x88920c: r0 = DateTime()
    //     0x88920c: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x889210: stur            x0, [fp, #-0x38]
    // 0x889214: ldur            x16, [fp, #-0x18]
    // 0x889218: ldur            lr, [fp, #-0x30]
    // 0x88921c: stp             lr, x16, [SP]
    // 0x889220: mov             x1, x0
    // 0x889224: ldur            x2, [fp, #-8]
    // 0x889228: r4 = const [0, 0x4, 0x2, 0x4, null]
    //     0x889228: ldr             x4, [PP, #0x6790]  ; [pp+0x6790] List(5) [0, 0x4, 0x2, 0x4, Null]
    // 0x88922c: r0 = DateTime()
    //     0x88922c: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x889230: r0 = getTrueDateTime()
    //     0x889230: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889234: ldur            x1, [fp, #-0x38]
    // 0x889238: mov             x2, x0
    // 0x88923c: r0 = difference()
    //     0x88923c: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x889240: LoadField: r1 = r0->field_7
    //     0x889240: ldur            x1, [x0, #7]
    // 0x889244: r0 = 1000000
    //     0x889244: movz            x0, #0x4240
    //     0x889248: movk            x0, #0xf, lsl #16
    // 0x88924c: sdiv            x2, x1, x0
    // 0x889250: tbz             x2, #0x3f, #0x88925c
    // 0x889254: r0 = 0
    //     0x889254: movz            x0, #0
    // 0x889258: b               #0x889260
    // 0x88925c: mov             x0, x2
    // 0x889260: r17 = 32400
    //     0x889260: movz            x17, #0x7e90
    // 0x889264: add             x2, x0, x17
    // 0x889268: stur            x2, [fp, #-0x10]
    // 0x88926c: r0 = BoxInt64Instr(r2)
    //     0x88926c: sbfiz           x0, x2, #1, #0x1f
    //     0x889270: cmp             x2, x0, asr #1
    //     0x889274: b.eq            #0x889280
    //     0x889278: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x88927c: stur            x2, [x0, #7]
    // 0x889280: r1 = 59
    //     0x889280: movz            x1, #0x3b
    // 0x889284: branchIfSmi(r0, 0x889290)
    //     0x889284: tbz             w0, #0, #0x889290
    // 0x889288: r1 = LoadClassIdInstr(r0)
    //     0x889288: ldur            x1, [x0, #-1]
    //     0x88928c: ubfx            x1, x1, #0xc, #0x14
    // 0x889290: str             x0, [SP]
    // 0x889294: mov             x0, x1
    // 0x889298: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x889298: ldr             x4, [PP, #0x2a8]  ; [pp+0x2a8] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x88929c: r0 = GDT[cid_x0 + 0x4756]()
    //     0x88929c: movz            x17, #0x4756
    //     0x8892a0: add             lr, x0, x17
    //     0x8892a4: ldr             lr, [x21, lr, lsl #3]
    //     0x8892a8: blr             lr
    // 0x8892ac: r16 = "Time to next day 8am: "
    //     0x8892ac: add             x16, PP, #0x13, lsl #12  ; [pp+0x132a8] "Time to next day 8am: "
    //     0x8892b0: ldr             x16, [x16, #0x2a8]
    // 0x8892b4: stp             x0, x16, [SP]
    // 0x8892b8: r0 = +()
    //     0x8892b8: bl              #0x7c0e54  ; [dart:core] _StringBase::+
    // 0x8892bc: mov             x1, x0
    // 0x8892c0: r0 = print()
    //     0x8892c0: bl              #0x7ef49c  ; [dart:core] ::print
    // 0x8892c4: ldur            x0, [fp, #-0x10]
    // 0x8892c8: b               #0x88db2c
    // 0x8892cc: r0 = 1000000
    //     0x8892cc: movz            x0, #0x4240
    //     0x8892d0: movk            x0, #0xf, lsl #16
    // 0x8892d4: r16 = "visitorAppearSeconds"
    //     0x8892d4: add             x16, PP, #0x13, lsl #12  ; [pp+0x132b0] "visitorAppearSeconds"
    //     0x8892d8: ldr             x16, [x16, #0x2b0]
    // 0x8892dc: ldur            lr, [fp, #-0x20]
    // 0x8892e0: stp             lr, x16, [SP]
    // 0x8892e4: r0 = ==()
    //     0x8892e4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x8892e8: tbnz            w0, #4, #0x889868
    // 0x8892ec: r0 = getTrueDateTime()
    //     0x8892ec: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8892f0: mov             x1, x0
    // 0x8892f4: r0 = _parts()
    //     0x8892f4: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8892f8: mov             x2, x0
    // 0x8892fc: LoadField: r0 = r2->field_b
    //     0x8892fc: ldur            w0, [x2, #0xb]
    // 0x889300: DecompressPointer r0
    //     0x889300: add             x0, x0, HEAP, lsl #32
    // 0x889304: r1 = LoadInt32Instr(r0)
    //     0x889304: sbfx            x1, x0, #1, #0x1f
    // 0x889308: mov             x0, x1
    // 0x88930c: r1 = 8
    //     0x88930c: movz            x1, #0x8
    // 0x889310: cmp             x1, x0
    // 0x889314: b.hs            #0x88dce8
    // 0x889318: LoadField: r0 = r2->field_2f
    //     0x889318: ldur            w0, [x2, #0x2f]
    // 0x88931c: DecompressPointer r0
    //     0x88931c: add             x0, x0, HEAP, lsl #32
    // 0x889320: stur            x0, [fp, #-8]
    // 0x889324: r0 = getTrueDateTime()
    //     0x889324: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889328: mov             x1, x0
    // 0x88932c: r0 = _parts()
    //     0x88932c: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889330: mov             x2, x0
    // 0x889334: LoadField: r0 = r2->field_b
    //     0x889334: ldur            w0, [x2, #0xb]
    // 0x889338: DecompressPointer r0
    //     0x889338: add             x0, x0, HEAP, lsl #32
    // 0x88933c: r1 = LoadInt32Instr(r0)
    //     0x88933c: sbfx            x1, x0, #1, #0x1f
    // 0x889340: mov             x0, x1
    // 0x889344: r1 = 7
    //     0x889344: movz            x1, #0x7
    // 0x889348: cmp             x1, x0
    // 0x88934c: b.hs            #0x88dcec
    // 0x889350: LoadField: r0 = r2->field_2b
    //     0x889350: ldur            w0, [x2, #0x2b]
    // 0x889354: DecompressPointer r0
    //     0x889354: add             x0, x0, HEAP, lsl #32
    // 0x889358: stur            x0, [fp, #-0x18]
    // 0x88935c: r0 = getTrueDateTime()
    //     0x88935c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889360: mov             x1, x0
    // 0x889364: r0 = _parts()
    //     0x889364: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889368: mov             x2, x0
    // 0x88936c: LoadField: r0 = r2->field_b
    //     0x88936c: ldur            w0, [x2, #0xb]
    // 0x889370: DecompressPointer r0
    //     0x889370: add             x0, x0, HEAP, lsl #32
    // 0x889374: r1 = LoadInt32Instr(r0)
    //     0x889374: sbfx            x1, x0, #1, #0x1f
    // 0x889378: mov             x0, x1
    // 0x88937c: r1 = 5
    //     0x88937c: movz            x1, #0x5
    // 0x889380: cmp             x1, x0
    // 0x889384: b.hs            #0x88dcf0
    // 0x889388: LoadField: r0 = r2->field_23
    //     0x889388: ldur            w0, [x2, #0x23]
    // 0x88938c: DecompressPointer r0
    //     0x88938c: add             x0, x0, HEAP, lsl #32
    // 0x889390: stur            x0, [fp, #-0x30]
    // 0x889394: r0 = DateTime()
    //     0x889394: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x889398: stur            x0, [fp, #-0x38]
    // 0x88939c: ldur            x16, [fp, #-0x18]
    // 0x8893a0: ldur            lr, [fp, #-0x30]
    // 0x8893a4: stp             lr, x16, [SP, #8]
    // 0x8893a8: r16 = 36
    //     0x8893a8: movz            x16, #0x24
    // 0x8893ac: str             x16, [SP]
    // 0x8893b0: mov             x1, x0
    // 0x8893b4: ldur            x2, [fp, #-8]
    // 0x8893b8: r4 = const [0, 0x5, 0x3, 0x5, null]
    //     0x8893b8: ldr             x4, [PP, #0x7d60]  ; [pp+0x7d60] List(5) [0, 0x5, 0x3, 0x5, Null]
    // 0x8893bc: r0 = DateTime()
    //     0x8893bc: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x8893c0: r0 = getTrueDateTime()
    //     0x8893c0: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8893c4: mov             x1, x0
    // 0x8893c8: r0 = _parts()
    //     0x8893c8: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8893cc: mov             x2, x0
    // 0x8893d0: LoadField: r0 = r2->field_b
    //     0x8893d0: ldur            w0, [x2, #0xb]
    // 0x8893d4: DecompressPointer r0
    //     0x8893d4: add             x0, x0, HEAP, lsl #32
    // 0x8893d8: r1 = LoadInt32Instr(r0)
    //     0x8893d8: sbfx            x1, x0, #1, #0x1f
    // 0x8893dc: mov             x0, x1
    // 0x8893e0: r1 = 8
    //     0x8893e0: movz            x1, #0x8
    // 0x8893e4: cmp             x1, x0
    // 0x8893e8: b.hs            #0x88dcf4
    // 0x8893ec: LoadField: r0 = r2->field_2f
    //     0x8893ec: ldur            w0, [x2, #0x2f]
    // 0x8893f0: DecompressPointer r0
    //     0x8893f0: add             x0, x0, HEAP, lsl #32
    // 0x8893f4: stur            x0, [fp, #-8]
    // 0x8893f8: r0 = getTrueDateTime()
    //     0x8893f8: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8893fc: mov             x1, x0
    // 0x889400: r0 = _parts()
    //     0x889400: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889404: mov             x2, x0
    // 0x889408: LoadField: r0 = r2->field_b
    //     0x889408: ldur            w0, [x2, #0xb]
    // 0x88940c: DecompressPointer r0
    //     0x88940c: add             x0, x0, HEAP, lsl #32
    // 0x889410: r1 = LoadInt32Instr(r0)
    //     0x889410: sbfx            x1, x0, #1, #0x1f
    // 0x889414: mov             x0, x1
    // 0x889418: r1 = 7
    //     0x889418: movz            x1, #0x7
    // 0x88941c: cmp             x1, x0
    // 0x889420: b.hs            #0x88dcf8
    // 0x889424: LoadField: r0 = r2->field_2b
    //     0x889424: ldur            w0, [x2, #0x2b]
    // 0x889428: DecompressPointer r0
    //     0x889428: add             x0, x0, HEAP, lsl #32
    // 0x88942c: stur            x0, [fp, #-0x18]
    // 0x889430: r0 = getTrueDateTime()
    //     0x889430: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889434: mov             x1, x0
    // 0x889438: r0 = _parts()
    //     0x889438: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x88943c: mov             x2, x0
    // 0x889440: LoadField: r0 = r2->field_b
    //     0x889440: ldur            w0, [x2, #0xb]
    // 0x889444: DecompressPointer r0
    //     0x889444: add             x0, x0, HEAP, lsl #32
    // 0x889448: r1 = LoadInt32Instr(r0)
    //     0x889448: sbfx            x1, x0, #1, #0x1f
    // 0x88944c: mov             x0, x1
    // 0x889450: r1 = 5
    //     0x889450: movz            x1, #0x5
    // 0x889454: cmp             x1, x0
    // 0x889458: b.hs            #0x88dcfc
    // 0x88945c: LoadField: r0 = r2->field_23
    //     0x88945c: ldur            w0, [x2, #0x23]
    // 0x889460: DecompressPointer r0
    //     0x889460: add             x0, x0, HEAP, lsl #32
    // 0x889464: stur            x0, [fp, #-0x30]
    // 0x889468: r0 = DateTime()
    //     0x889468: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x88946c: stur            x0, [fp, #-0x40]
    // 0x889470: ldur            x16, [fp, #-0x18]
    // 0x889474: ldur            lr, [fp, #-0x30]
    // 0x889478: stp             lr, x16, [SP, #8]
    // 0x88947c: r16 = 38
    //     0x88947c: movz            x16, #0x26
    // 0x889480: str             x16, [SP]
    // 0x889484: mov             x1, x0
    // 0x889488: ldur            x2, [fp, #-8]
    // 0x88948c: r4 = const [0, 0x5, 0x3, 0x5, null]
    //     0x88948c: ldr             x4, [PP, #0x7d60]  ; [pp+0x7d60] List(5) [0, 0x5, 0x3, 0x5, Null]
    // 0x889490: r0 = DateTime()
    //     0x889490: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x889494: r0 = getTrueDateTime()
    //     0x889494: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889498: mov             x1, x0
    // 0x88949c: r0 = _parts()
    //     0x88949c: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8894a0: mov             x2, x0
    // 0x8894a4: LoadField: r0 = r2->field_b
    //     0x8894a4: ldur            w0, [x2, #0xb]
    // 0x8894a8: DecompressPointer r0
    //     0x8894a8: add             x0, x0, HEAP, lsl #32
    // 0x8894ac: r1 = LoadInt32Instr(r0)
    //     0x8894ac: sbfx            x1, x0, #1, #0x1f
    // 0x8894b0: mov             x0, x1
    // 0x8894b4: r1 = 8
    //     0x8894b4: movz            x1, #0x8
    // 0x8894b8: cmp             x1, x0
    // 0x8894bc: b.hs            #0x88dd00
    // 0x8894c0: LoadField: r0 = r2->field_2f
    //     0x8894c0: ldur            w0, [x2, #0x2f]
    // 0x8894c4: DecompressPointer r0
    //     0x8894c4: add             x0, x0, HEAP, lsl #32
    // 0x8894c8: stur            x0, [fp, #-8]
    // 0x8894cc: r0 = getTrueDateTime()
    //     0x8894cc: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8894d0: mov             x1, x0
    // 0x8894d4: r0 = _parts()
    //     0x8894d4: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8894d8: mov             x2, x0
    // 0x8894dc: LoadField: r0 = r2->field_b
    //     0x8894dc: ldur            w0, [x2, #0xb]
    // 0x8894e0: DecompressPointer r0
    //     0x8894e0: add             x0, x0, HEAP, lsl #32
    // 0x8894e4: r1 = LoadInt32Instr(r0)
    //     0x8894e4: sbfx            x1, x0, #1, #0x1f
    // 0x8894e8: mov             x0, x1
    // 0x8894ec: r1 = 7
    //     0x8894ec: movz            x1, #0x7
    // 0x8894f0: cmp             x1, x0
    // 0x8894f4: b.hs            #0x88dd04
    // 0x8894f8: LoadField: r0 = r2->field_2b
    //     0x8894f8: ldur            w0, [x2, #0x2b]
    // 0x8894fc: DecompressPointer r0
    //     0x8894fc: add             x0, x0, HEAP, lsl #32
    // 0x889500: stur            x0, [fp, #-0x18]
    // 0x889504: r0 = getTrueDateTime()
    //     0x889504: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889508: mov             x1, x0
    // 0x88950c: r0 = _parts()
    //     0x88950c: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889510: mov             x2, x0
    // 0x889514: LoadField: r0 = r2->field_b
    //     0x889514: ldur            w0, [x2, #0xb]
    // 0x889518: DecompressPointer r0
    //     0x889518: add             x0, x0, HEAP, lsl #32
    // 0x88951c: r1 = LoadInt32Instr(r0)
    //     0x88951c: sbfx            x1, x0, #1, #0x1f
    // 0x889520: mov             x0, x1
    // 0x889524: r1 = 5
    //     0x889524: movz            x1, #0x5
    // 0x889528: cmp             x1, x0
    // 0x88952c: b.hs            #0x88dd08
    // 0x889530: LoadField: r0 = r2->field_23
    //     0x889530: ldur            w0, [x2, #0x23]
    // 0x889534: DecompressPointer r0
    //     0x889534: add             x0, x0, HEAP, lsl #32
    // 0x889538: stur            x0, [fp, #-0x30]
    // 0x88953c: r0 = DateTime()
    //     0x88953c: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x889540: stur            x0, [fp, #-0x48]
    // 0x889544: ldur            x16, [fp, #-0x18]
    // 0x889548: ldur            lr, [fp, #-0x30]
    // 0x88954c: stp             lr, x16, [SP, #8]
    // 0x889550: r16 = 40
    //     0x889550: movz            x16, #0x28
    // 0x889554: str             x16, [SP]
    // 0x889558: mov             x1, x0
    // 0x88955c: ldur            x2, [fp, #-8]
    // 0x889560: r4 = const [0, 0x5, 0x3, 0x5, null]
    //     0x889560: ldr             x4, [PP, #0x7d60]  ; [pp+0x7d60] List(5) [0, 0x5, 0x3, 0x5, Null]
    // 0x889564: r0 = DateTime()
    //     0x889564: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x889568: r0 = getTrueDateTime()
    //     0x889568: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x88956c: mov             x1, x0
    // 0x889570: r0 = _parts()
    //     0x889570: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889574: mov             x2, x0
    // 0x889578: LoadField: r0 = r2->field_b
    //     0x889578: ldur            w0, [x2, #0xb]
    // 0x88957c: DecompressPointer r0
    //     0x88957c: add             x0, x0, HEAP, lsl #32
    // 0x889580: r1 = LoadInt32Instr(r0)
    //     0x889580: sbfx            x1, x0, #1, #0x1f
    // 0x889584: mov             x0, x1
    // 0x889588: r1 = 8
    //     0x889588: movz            x1, #0x8
    // 0x88958c: cmp             x1, x0
    // 0x889590: b.hs            #0x88dd0c
    // 0x889594: LoadField: r0 = r2->field_2f
    //     0x889594: ldur            w0, [x2, #0x2f]
    // 0x889598: DecompressPointer r0
    //     0x889598: add             x0, x0, HEAP, lsl #32
    // 0x88959c: stur            x0, [fp, #-8]
    // 0x8895a0: r0 = getTrueDateTime()
    //     0x8895a0: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8895a4: mov             x1, x0
    // 0x8895a8: r0 = _parts()
    //     0x8895a8: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8895ac: mov             x2, x0
    // 0x8895b0: LoadField: r0 = r2->field_b
    //     0x8895b0: ldur            w0, [x2, #0xb]
    // 0x8895b4: DecompressPointer r0
    //     0x8895b4: add             x0, x0, HEAP, lsl #32
    // 0x8895b8: r1 = LoadInt32Instr(r0)
    //     0x8895b8: sbfx            x1, x0, #1, #0x1f
    // 0x8895bc: mov             x0, x1
    // 0x8895c0: r1 = 7
    //     0x8895c0: movz            x1, #0x7
    // 0x8895c4: cmp             x1, x0
    // 0x8895c8: b.hs            #0x88dd10
    // 0x8895cc: LoadField: r0 = r2->field_2b
    //     0x8895cc: ldur            w0, [x2, #0x2b]
    // 0x8895d0: DecompressPointer r0
    //     0x8895d0: add             x0, x0, HEAP, lsl #32
    // 0x8895d4: stur            x0, [fp, #-0x18]
    // 0x8895d8: r0 = getTrueDateTime()
    //     0x8895d8: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8895dc: mov             x1, x0
    // 0x8895e0: r0 = _parts()
    //     0x8895e0: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8895e4: mov             x2, x0
    // 0x8895e8: LoadField: r0 = r2->field_b
    //     0x8895e8: ldur            w0, [x2, #0xb]
    // 0x8895ec: DecompressPointer r0
    //     0x8895ec: add             x0, x0, HEAP, lsl #32
    // 0x8895f0: r1 = LoadInt32Instr(r0)
    //     0x8895f0: sbfx            x1, x0, #1, #0x1f
    // 0x8895f4: mov             x0, x1
    // 0x8895f8: r1 = 5
    //     0x8895f8: movz            x1, #0x5
    // 0x8895fc: cmp             x1, x0
    // 0x889600: b.hs            #0x88dd14
    // 0x889604: LoadField: r0 = r2->field_23
    //     0x889604: ldur            w0, [x2, #0x23]
    // 0x889608: DecompressPointer r0
    //     0x889608: add             x0, x0, HEAP, lsl #32
    // 0x88960c: stur            x0, [fp, #-0x30]
    // 0x889610: r0 = DateTime()
    //     0x889610: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x889614: stur            x0, [fp, #-0x50]
    // 0x889618: ldur            x16, [fp, #-0x18]
    // 0x88961c: ldur            lr, [fp, #-0x30]
    // 0x889620: stp             lr, x16, [SP, #8]
    // 0x889624: r16 = 42
    //     0x889624: movz            x16, #0x2a
    // 0x889628: str             x16, [SP]
    // 0x88962c: mov             x1, x0
    // 0x889630: ldur            x2, [fp, #-8]
    // 0x889634: r4 = const [0, 0x5, 0x3, 0x5, null]
    //     0x889634: ldr             x4, [PP, #0x7d60]  ; [pp+0x7d60] List(5) [0, 0x5, 0x3, 0x5, Null]
    // 0x889638: r0 = DateTime()
    //     0x889638: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x88963c: r0 = getTrueDateTime()
    //     0x88963c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889640: mov             x1, x0
    // 0x889644: r0 = _parts()
    //     0x889644: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889648: mov             x2, x0
    // 0x88964c: LoadField: r0 = r2->field_b
    //     0x88964c: ldur            w0, [x2, #0xb]
    // 0x889650: DecompressPointer r0
    //     0x889650: add             x0, x0, HEAP, lsl #32
    // 0x889654: r1 = LoadInt32Instr(r0)
    //     0x889654: sbfx            x1, x0, #1, #0x1f
    // 0x889658: mov             x0, x1
    // 0x88965c: r1 = 8
    //     0x88965c: movz            x1, #0x8
    // 0x889660: cmp             x1, x0
    // 0x889664: b.hs            #0x88dd18
    // 0x889668: LoadField: r0 = r2->field_2f
    //     0x889668: ldur            w0, [x2, #0x2f]
    // 0x88966c: DecompressPointer r0
    //     0x88966c: add             x0, x0, HEAP, lsl #32
    // 0x889670: stur            x0, [fp, #-8]
    // 0x889674: r0 = getTrueDateTime()
    //     0x889674: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889678: mov             x1, x0
    // 0x88967c: r0 = _parts()
    //     0x88967c: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x889680: mov             x2, x0
    // 0x889684: LoadField: r0 = r2->field_b
    //     0x889684: ldur            w0, [x2, #0xb]
    // 0x889688: DecompressPointer r0
    //     0x889688: add             x0, x0, HEAP, lsl #32
    // 0x88968c: r1 = LoadInt32Instr(r0)
    //     0x88968c: sbfx            x1, x0, #1, #0x1f
    // 0x889690: mov             x0, x1
    // 0x889694: r1 = 7
    //     0x889694: movz            x1, #0x7
    // 0x889698: cmp             x1, x0
    // 0x88969c: b.hs            #0x88dd1c
    // 0x8896a0: LoadField: r0 = r2->field_2b
    //     0x8896a0: ldur            w0, [x2, #0x2b]
    // 0x8896a4: DecompressPointer r0
    //     0x8896a4: add             x0, x0, HEAP, lsl #32
    // 0x8896a8: stur            x0, [fp, #-0x18]
    // 0x8896ac: r0 = getTrueDateTime()
    //     0x8896ac: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8896b0: mov             x1, x0
    // 0x8896b4: r0 = _parts()
    //     0x8896b4: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x8896b8: mov             x2, x0
    // 0x8896bc: LoadField: r0 = r2->field_b
    //     0x8896bc: ldur            w0, [x2, #0xb]
    // 0x8896c0: DecompressPointer r0
    //     0x8896c0: add             x0, x0, HEAP, lsl #32
    // 0x8896c4: r1 = LoadInt32Instr(r0)
    //     0x8896c4: sbfx            x1, x0, #1, #0x1f
    // 0x8896c8: mov             x0, x1
    // 0x8896cc: r1 = 5
    //     0x8896cc: movz            x1, #0x5
    // 0x8896d0: cmp             x1, x0
    // 0x8896d4: b.hs            #0x88dd20
    // 0x8896d8: LoadField: r0 = r2->field_23
    //     0x8896d8: ldur            w0, [x2, #0x23]
    // 0x8896dc: DecompressPointer r0
    //     0x8896dc: add             x0, x0, HEAP, lsl #32
    // 0x8896e0: stur            x0, [fp, #-0x30]
    // 0x8896e4: r0 = DateTime()
    //     0x8896e4: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x8896e8: stur            x0, [fp, #-0x58]
    // 0x8896ec: ldur            x16, [fp, #-0x18]
    // 0x8896f0: ldur            lr, [fp, #-0x30]
    // 0x8896f4: stp             lr, x16, [SP, #8]
    // 0x8896f8: r16 = 44
    //     0x8896f8: movz            x16, #0x2c
    // 0x8896fc: str             x16, [SP]
    // 0x889700: mov             x1, x0
    // 0x889704: ldur            x2, [fp, #-8]
    // 0x889708: r4 = const [0, 0x5, 0x3, 0x5, null]
    //     0x889708: ldr             x4, [PP, #0x7d60]  ; [pp+0x7d60] List(5) [0, 0x5, 0x3, 0x5, Null]
    // 0x88970c: r0 = DateTime()
    //     0x88970c: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x889710: r1 = Null
    //     0x889710: mov             x1, NULL
    // 0x889714: r2 = 10
    //     0x889714: movz            x2, #0xa
    // 0x889718: r0 = AllocateArray()
    //     0x889718: bl              #0x1502560  ; AllocateArrayStub
    // 0x88971c: mov             x2, x0
    // 0x889720: ldur            x0, [fp, #-0x38]
    // 0x889724: stur            x2, [fp, #-8]
    // 0x889728: StoreField: r2->field_f = r0
    //     0x889728: stur            w0, [x2, #0xf]
    // 0x88972c: ldur            x0, [fp, #-0x40]
    // 0x889730: StoreField: r2->field_13 = r0
    //     0x889730: stur            w0, [x2, #0x13]
    // 0x889734: ldur            x0, [fp, #-0x48]
    // 0x889738: ArrayStore: r2[0] = r0  ; List_4
    //     0x889738: stur            w0, [x2, #0x17]
    // 0x88973c: ldur            x0, [fp, #-0x50]
    // 0x889740: StoreField: r2->field_1b = r0
    //     0x889740: stur            w0, [x2, #0x1b]
    // 0x889744: ldur            x0, [fp, #-0x58]
    // 0x889748: StoreField: r2->field_1f = r0
    //     0x889748: stur            w0, [x2, #0x1f]
    // 0x88974c: r1 = Null
    //     0x88974c: mov             x1, NULL
    // 0x889750: r0 = AllocateGrowableArray()
    //     0x889750: bl              #0x1501488  ; AllocateGrowableArrayStub
    // 0x889754: mov             x1, x0
    // 0x889758: ldur            x0, [fp, #-8]
    // 0x88975c: StoreField: r1->field_f = r0
    //     0x88975c: stur            w0, [x1, #0xf]
    // 0x889760: r0 = 10
    //     0x889760: movz            x0, #0xa
    // 0x889764: StoreField: r1->field_b = r0
    //     0x889764: stur            w0, [x1, #0xb]
    // 0x889768: r0 = shuffle()
    //     0x889768: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x88976c: mov             x1, x0
    // 0x889770: r0 = first()
    //     0x889770: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x889774: mov             x3, x0
    // 0x889778: r2 = Null
    //     0x889778: mov             x2, NULL
    // 0x88977c: r1 = Null
    //     0x88977c: mov             x1, NULL
    // 0x889780: stur            x3, [fp, #-8]
    // 0x889784: r4 = 59
    //     0x889784: movz            x4, #0x3b
    // 0x889788: branchIfSmi(r0, 0x889794)
    //     0x889788: tbz             w0, #0, #0x889794
    // 0x88978c: r4 = LoadClassIdInstr(r0)
    //     0x88978c: ldur            x4, [x0, #-1]
    //     0x889790: ubfx            x4, x4, #0xc, #0x14
    // 0x889794: cmp             x4, #0xf4
    // 0x889798: b.eq            #0x8897bc
    // 0x88979c: r17 = 4803
    //     0x88979c: movz            x17, #0x12c3
    // 0x8897a0: cmp             x4, x17
    // 0x8897a4: b.eq            #0x8897bc
    // 0x8897a8: r8 = DateTime
    //     0x8897a8: add             x8, PP, #0x13, lsl #12  ; [pp+0x132b8] Type: DateTime
    //     0x8897ac: ldr             x8, [x8, #0x2b8]
    // 0x8897b0: r3 = Null
    //     0x8897b0: add             x3, PP, #0x13, lsl #12  ; [pp+0x132c0] Null
    //     0x8897b4: ldr             x3, [x3, #0x2c0]
    // 0x8897b8: r0 = DateTime()
    //     0x8897b8: bl              #0x7bcc3c  ; IsType_DateTime_Stub
    // 0x8897bc: r0 = getTrueDateTime()
    //     0x8897bc: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8897c0: ldur            x3, [fp, #-8]
    // 0x8897c4: r1 = LoadClassIdInstr(r3)
    //     0x8897c4: ldur            x1, [x3, #-1]
    //     0x8897c8: ubfx            x1, x1, #0xc, #0x14
    // 0x8897cc: mov             x2, x0
    // 0x8897d0: mov             x0, x1
    // 0x8897d4: mov             x1, x3
    // 0x8897d8: r0 = GDT[cid_x0 + -0xdf1]()
    //     0x8897d8: sub             lr, x0, #0xdf1
    //     0x8897dc: ldr             lr, [x21, lr, lsl #3]
    //     0x8897e0: blr             lr
    // 0x8897e4: LoadField: r1 = r0->field_7
    //     0x8897e4: ldur            x1, [x0, #7]
    // 0x8897e8: r0 = 1000000
    //     0x8897e8: movz            x0, #0x4240
    //     0x8897ec: movk            x0, #0xf, lsl #16
    // 0x8897f0: sdiv            x2, x1, x0
    // 0x8897f4: stur            x2, [fp, #-0x10]
    // 0x8897f8: r0 = DateTime()
    //     0x8897f8: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x8897fc: mov             x1, x0
    // 0x889800: r0 = false
    //     0x889800: add             x0, NULL, #0x30  ; false
    // 0x889804: stur            x1, [fp, #-0x18]
    // 0x889808: StoreField: r1->field_13 = r0
    //     0x889808: stur            w0, [x1, #0x13]
    // 0x88980c: r0 = _getCurrentMicros()
    //     0x88980c: bl              #0x860868  ; [dart:core] DateTime::_getCurrentMicros
    // 0x889810: r1 = LoadInt32Instr(r0)
    //     0x889810: sbfx            x1, x0, #1, #0x1f
    //     0x889814: tbz             w0, #0, #0x88981c
    //     0x889818: ldur            x1, [x0, #7]
    // 0x88981c: ldur            x2, [fp, #-0x18]
    // 0x889820: StoreField: r2->field_b = r1
    //     0x889820: stur            x1, [x2, #0xb]
    // 0x889824: ldur            x1, [fp, #-8]
    // 0x889828: r0 = LoadClassIdInstr(r1)
    //     0x889828: ldur            x0, [x1, #-1]
    //     0x88982c: ubfx            x0, x0, #0xc, #0x14
    // 0x889830: r0 = GDT[cid_x0 + 0xd818]()
    //     0x889830: movz            x17, #0xd818
    //     0x889834: add             lr, x0, x17
    //     0x889838: ldr             lr, [x21, lr, lsl #3]
    //     0x88983c: blr             lr
    // 0x889840: r1 = LoadInt32Instr(r0)
    //     0x889840: sbfx            x1, x0, #1, #0x1f
    // 0x889844: tbz             x1, #0x3f, #0x889860
    // 0x889848: ldur            x0, [fp, #-0x10]
    // 0x88984c: r17 = 86400
    //     0x88984c: movz            x17, #0x5180
    //     0x889850: movk            x17, #0x1, lsl #16
    // 0x889854: add             x1, x0, x17
    // 0x889858: mov             x0, x1
    // 0x88985c: b               #0x88db2c
    // 0x889860: ldur            x0, [fp, #-0x10]
    // 0x889864: b               #0x88db2c
    // 0x889868: r0 = 1000000
    //     0x889868: movz            x0, #0x4240
    //     0x88986c: movk            x0, #0xf, lsl #16
    // 0x889870: r16 = "visitorAppearSecondsDelay"
    //     0x889870: add             x16, PP, #0x13, lsl #12  ; [pp+0x132d0] "visitorAppearSecondsDelay"
    //     0x889874: ldr             x16, [x16, #0x2d0]
    // 0x889878: ldur            lr, [fp, #-0x20]
    // 0x88987c: stp             lr, x16, [SP]
    // 0x889880: r0 = ==()
    //     0x889880: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889884: tbnz            w0, #4, #0x889964
    // 0x889888: r0 = LoadStaticField(0xb54)
    //     0x889888: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88988c: ldr             x0, [x0, #0x16a8]
    // 0x889890: cmp             w0, NULL
    // 0x889894: b.ne            #0x8898a0
    // 0x889898: r0 = Null
    //     0x889898: mov             x0, NULL
    // 0x88989c: b               #0x8898c8
    // 0x8898a0: r17 = 331
    //     0x8898a0: movz            x17, #0x14b
    // 0x8898a4: ldr             w1, [x0, x17]
    // 0x8898a8: DecompressPointer r1
    //     0x8898a8: add             x1, x1, HEAP, lsl #32
    // 0x8898ac: r0 = LoadClassIdInstr(r1)
    //     0x8898ac: ldur            x0, [x1, #-1]
    //     0x8898b0: ubfx            x0, x0, #0xc, #0x14
    // 0x8898b4: r2 = "visitor"
    //     0x8898b4: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0x8898b8: ldr             x2, [x2, #0x2d8]
    // 0x8898bc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8898bc: sub             lr, x0, #0xb4
    //     0x8898c0: ldr             lr, [x21, lr, lsl #3]
    //     0x8898c4: blr             lr
    // 0x8898c8: cmp             w0, NULL
    // 0x8898cc: b.ne            #0x8898e4
    // 0x8898d0: r1 = Null
    //     0x8898d0: mov             x1, NULL
    // 0x8898d4: r2 = 0
    //     0x8898d4: movz            x2, #0
    // 0x8898d8: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x8898d8: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x8898dc: mov             x3, x0
    // 0x8898e0: b               #0x8898e8
    // 0x8898e4: mov             x3, x0
    // 0x8898e8: mov             x0, x3
    // 0x8898ec: stur            x3, [fp, #-8]
    // 0x8898f0: r2 = Null
    //     0x8898f0: mov             x2, NULL
    // 0x8898f4: r1 = Null
    //     0x8898f4: mov             x1, NULL
    // 0x8898f8: r4 = 59
    //     0x8898f8: movz            x4, #0x3b
    // 0x8898fc: branchIfSmi(r0, 0x889908)
    //     0x8898fc: tbz             w0, #0, #0x889908
    // 0x889900: r4 = LoadClassIdInstr(r0)
    //     0x889900: ldur            x4, [x0, #-1]
    //     0x889904: ubfx            x4, x4, #0xc, #0x14
    // 0x889908: cmp             x4, #0xcdb
    // 0x88990c: b.eq            #0x889924
    // 0x889910: r8 = Timestamp
    //     0x889910: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x889914: ldr             x8, [x8, #0xa30]
    // 0x889918: r3 = Null
    //     0x889918: add             x3, PP, #0x13, lsl #12  ; [pp+0x132e0] Null
    //     0x88991c: ldr             x3, [x3, #0x2e0]
    // 0x889920: r0 = Timestamp()
    //     0x889920: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x889924: ldur            x1, [fp, #-8]
    // 0x889928: r0 = toDate()
    //     0x889928: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x88992c: stur            x0, [fp, #-8]
    // 0x889930: r0 = getTrueDateTime()
    //     0x889930: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x889934: ldur            x1, [fp, #-8]
    // 0x889938: mov             x2, x0
    // 0x88993c: r0 = difference()
    //     0x88993c: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x889940: LoadField: r1 = r0->field_7
    //     0x889940: ldur            x1, [x0, #7]
    // 0x889944: r0 = 1000000
    //     0x889944: movz            x0, #0x4240
    //     0x889948: movk            x0, #0xf, lsl #16
    // 0x88994c: sdiv            x2, x1, x0
    // 0x889950: tbz             x2, #0x3f, #0x88995c
    // 0x889954: r0 = 0
    //     0x889954: movz            x0, #0
    // 0x889958: b               #0x88db2c
    // 0x88995c: mov             x0, x2
    // 0x889960: b               #0x88db2c
    // 0x889964: r16 = "memoryCountdownMinute"
    //     0x889964: add             x16, PP, #0x11, lsl #12  ; [pp+0x11b68] "memoryCountdownMinute"
    //     0x889968: ldr             x16, [x16, #0xb68]
    // 0x88996c: ldur            lr, [fp, #-0x20]
    // 0x889970: stp             lr, x16, [SP]
    // 0x889974: r0 = ==()
    //     0x889974: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889978: tbnz            w0, #4, #0x889b20
    // 0x88997c: r0 = LoadStaticField(0xb54)
    //     0x88997c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889980: ldr             x0, [x0, #0x16a8]
    // 0x889984: cmp             w0, NULL
    // 0x889988: b.ne            #0x889994
    // 0x88998c: r0 = Null
    //     0x88998c: mov             x0, NULL
    // 0x889990: b               #0x8899bc
    // 0x889994: r17 = 347
    //     0x889994: movz            x17, #0x15b
    // 0x889998: ldr             w1, [x0, x17]
    // 0x88999c: DecompressPointer r1
    //     0x88999c: add             x1, x1, HEAP, lsl #32
    // 0x8899a0: r0 = LoadClassIdInstr(r1)
    //     0x8899a0: ldur            x0, [x1, #-1]
    //     0x8899a4: ubfx            x0, x0, #0xc, #0x14
    // 0x8899a8: r2 = "totalGoldKey"
    //     0x8899a8: add             x2, PP, #0x13, lsl #12  ; [pp+0x132f0] "totalGoldKey"
    //     0x8899ac: ldr             x2, [x2, #0x2f0]
    // 0x8899b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8899b0: sub             lr, x0, #0xb4
    //     0x8899b4: ldr             lr, [x21, lr, lsl #3]
    //     0x8899b8: blr             lr
    // 0x8899bc: cmp             w0, NULL
    // 0x8899c0: b.ne            #0x8899cc
    // 0x8899c4: r3 = 0
    //     0x8899c4: movz            x3, #0
    // 0x8899c8: b               #0x8899d0
    // 0x8899cc: mov             x3, x0
    // 0x8899d0: mov             x0, x3
    // 0x8899d4: stur            x3, [fp, #-8]
    // 0x8899d8: r2 = Null
    //     0x8899d8: mov             x2, NULL
    // 0x8899dc: r1 = Null
    //     0x8899dc: mov             x1, NULL
    // 0x8899e0: branchIfSmi(r0, 0x889a08)
    //     0x8899e0: tbz             w0, #0, #0x889a08
    // 0x8899e4: r4 = LoadClassIdInstr(r0)
    //     0x8899e4: ldur            x4, [x0, #-1]
    //     0x8899e8: ubfx            x4, x4, #0xc, #0x14
    // 0x8899ec: sub             x4, x4, #0x3b
    // 0x8899f0: cmp             x4, #1
    // 0x8899f4: b.ls            #0x889a08
    // 0x8899f8: r8 = int
    //     0x8899f8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x8899fc: r3 = Null
    //     0x8899fc: add             x3, PP, #0x13, lsl #12  ; [pp+0x132f8] Null
    //     0x889a00: ldr             x3, [x3, #0x2f8]
    // 0x889a04: r0 = int()
    //     0x889a04: bl              #0x1524294  ; IsType_int_Stub
    // 0x889a08: ldur            x0, [fp, #-8]
    // 0x889a0c: r1 = LoadInt32Instr(r0)
    //     0x889a0c: sbfx            x1, x0, #1, #0x1f
    //     0x889a10: tbz             w0, #0, #0x889a18
    //     0x889a14: ldur            x1, [x0, #7]
    // 0x889a18: cmp             x1, #2
    // 0x889a1c: b.gt            #0x889a40
    // 0x889a20: cmp             x1, #1
    // 0x889a24: b.gt            #0x889a38
    // 0x889a28: cmp             w0, #2
    // 0x889a2c: b.ne            #0x889a60
    // 0x889a30: r0 = 5
    //     0x889a30: movz            x0, #0x5
    // 0x889a34: b               #0x889a64
    // 0x889a38: r0 = 10
    //     0x889a38: movz            x0, #0xa
    // 0x889a3c: b               #0x889a64
    // 0x889a40: cmp             x1, #3
    // 0x889a44: b.gt            #0x889a50
    // 0x889a48: r0 = 15
    //     0x889a48: movz            x0, #0xf
    // 0x889a4c: b               #0x889a64
    // 0x889a50: cmp             w0, #8
    // 0x889a54: b.ne            #0x889a60
    // 0x889a58: r0 = 20
    //     0x889a58: movz            x0, #0x14
    // 0x889a5c: b               #0x889a64
    // 0x889a60: r0 = 0
    //     0x889a60: movz            x0, #0
    // 0x889a64: add             x3, x0, #0x1e
    // 0x889a68: stur            x3, [fp, #-0x10]
    // 0x889a6c: r0 = LoadStaticField(0xb54)
    //     0x889a6c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889a70: ldr             x0, [x0, #0x16a8]
    // 0x889a74: cmp             w0, NULL
    // 0x889a78: b.ne            #0x889a84
    // 0x889a7c: r0 = Null
    //     0x889a7c: mov             x0, NULL
    // 0x889a80: b               #0x889aac
    // 0x889a84: r17 = 347
    //     0x889a84: movz            x17, #0x15b
    // 0x889a88: ldr             w1, [x0, x17]
    // 0x889a8c: DecompressPointer r1
    //     0x889a8c: add             x1, x1, HEAP, lsl #32
    // 0x889a90: r0 = LoadClassIdInstr(r1)
    //     0x889a90: ldur            x0, [x1, #-1]
    //     0x889a94: ubfx            x0, x0, #0xc, #0x14
    // 0x889a98: r2 = "memoryTimerReduce"
    //     0x889a98: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x889a9c: ldr             x2, [x2, #0xa30]
    // 0x889aa0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889aa0: sub             lr, x0, #0xb4
    //     0x889aa4: ldr             lr, [x21, lr, lsl #3]
    //     0x889aa8: blr             lr
    // 0x889aac: cmp             w0, NULL
    // 0x889ab0: b.ne            #0x889abc
    // 0x889ab4: r4 = 0
    //     0x889ab4: movz            x4, #0
    // 0x889ab8: b               #0x889ac0
    // 0x889abc: mov             x4, x0
    // 0x889ac0: ldur            x3, [fp, #-0x10]
    // 0x889ac4: mov             x0, x4
    // 0x889ac8: stur            x4, [fp, #-8]
    // 0x889acc: r2 = Null
    //     0x889acc: mov             x2, NULL
    // 0x889ad0: r1 = Null
    //     0x889ad0: mov             x1, NULL
    // 0x889ad4: branchIfSmi(r0, 0x889afc)
    //     0x889ad4: tbz             w0, #0, #0x889afc
    // 0x889ad8: r4 = LoadClassIdInstr(r0)
    //     0x889ad8: ldur            x4, [x0, #-1]
    //     0x889adc: ubfx            x4, x4, #0xc, #0x14
    // 0x889ae0: sub             x4, x4, #0x3b
    // 0x889ae4: cmp             x4, #1
    // 0x889ae8: b.ls            #0x889afc
    // 0x889aec: r8 = int
    //     0x889aec: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889af0: r3 = Null
    //     0x889af0: add             x3, PP, #0x13, lsl #12  ; [pp+0x13308] Null
    //     0x889af4: ldr             x3, [x3, #0x308]
    // 0x889af8: r0 = int()
    //     0x889af8: bl              #0x1524294  ; IsType_int_Stub
    // 0x889afc: ldur            x0, [fp, #-8]
    // 0x889b00: r1 = LoadInt32Instr(r0)
    //     0x889b00: sbfx            x1, x0, #1, #0x1f
    //     0x889b04: tbz             w0, #0, #0x889b0c
    //     0x889b08: ldur            x1, [x0, #7]
    // 0x889b0c: lsl             x0, x1, #1
    // 0x889b10: ldur            x1, [fp, #-0x10]
    // 0x889b14: sub             x2, x1, x0
    // 0x889b18: mov             x0, x2
    // 0x889b1c: b               #0x88db2c
    // 0x889b20: r16 = "memoryTotalMinute"
    //     0x889b20: add             x16, PP, #0x12, lsl #12  ; [pp+0x12590] "memoryTotalMinute"
    //     0x889b24: ldr             x16, [x16, #0x590]
    // 0x889b28: ldur            lr, [fp, #-0x20]
    // 0x889b2c: stp             lr, x16, [SP]
    // 0x889b30: r0 = ==()
    //     0x889b30: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889b34: tbnz            w0, #4, #0x889c2c
    // 0x889b38: r0 = LoadStaticField(0xb54)
    //     0x889b38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889b3c: ldr             x0, [x0, #0x16a8]
    // 0x889b40: cmp             w0, NULL
    // 0x889b44: b.ne            #0x889b50
    // 0x889b48: r0 = Null
    //     0x889b48: mov             x0, NULL
    // 0x889b4c: b               #0x889b78
    // 0x889b50: r17 = 347
    //     0x889b50: movz            x17, #0x15b
    // 0x889b54: ldr             w1, [x0, x17]
    // 0x889b58: DecompressPointer r1
    //     0x889b58: add             x1, x1, HEAP, lsl #32
    // 0x889b5c: r0 = LoadClassIdInstr(r1)
    //     0x889b5c: ldur            x0, [x1, #-1]
    //     0x889b60: ubfx            x0, x0, #0xc, #0x14
    // 0x889b64: r2 = "totalGoldKey"
    //     0x889b64: add             x2, PP, #0x13, lsl #12  ; [pp+0x132f0] "totalGoldKey"
    //     0x889b68: ldr             x2, [x2, #0x2f0]
    // 0x889b6c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889b6c: sub             lr, x0, #0xb4
    //     0x889b70: ldr             lr, [x21, lr, lsl #3]
    //     0x889b74: blr             lr
    // 0x889b78: cmp             w0, NULL
    // 0x889b7c: b.ne            #0x889b88
    // 0x889b80: r3 = 0
    //     0x889b80: movz            x3, #0
    // 0x889b84: b               #0x889b8c
    // 0x889b88: mov             x3, x0
    // 0x889b8c: mov             x0, x3
    // 0x889b90: stur            x3, [fp, #-8]
    // 0x889b94: r2 = Null
    //     0x889b94: mov             x2, NULL
    // 0x889b98: r1 = Null
    //     0x889b98: mov             x1, NULL
    // 0x889b9c: branchIfSmi(r0, 0x889bc4)
    //     0x889b9c: tbz             w0, #0, #0x889bc4
    // 0x889ba0: r4 = LoadClassIdInstr(r0)
    //     0x889ba0: ldur            x4, [x0, #-1]
    //     0x889ba4: ubfx            x4, x4, #0xc, #0x14
    // 0x889ba8: sub             x4, x4, #0x3b
    // 0x889bac: cmp             x4, #1
    // 0x889bb0: b.ls            #0x889bc4
    // 0x889bb4: r8 = int
    //     0x889bb4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889bb8: r3 = Null
    //     0x889bb8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13318] Null
    //     0x889bbc: ldr             x3, [x3, #0x318]
    // 0x889bc0: r0 = int()
    //     0x889bc0: bl              #0x1524294  ; IsType_int_Stub
    // 0x889bc4: ldur            x0, [fp, #-8]
    // 0x889bc8: r1 = LoadInt32Instr(r0)
    //     0x889bc8: sbfx            x1, x0, #1, #0x1f
    //     0x889bcc: tbz             w0, #0, #0x889bd4
    //     0x889bd0: ldur            x1, [x0, #7]
    // 0x889bd4: cmp             x1, #2
    // 0x889bd8: b.gt            #0x889bfc
    // 0x889bdc: cmp             x1, #1
    // 0x889be0: b.gt            #0x889bf4
    // 0x889be4: cmp             w0, #2
    // 0x889be8: b.ne            #0x889c1c
    // 0x889bec: r0 = 5
    //     0x889bec: movz            x0, #0x5
    // 0x889bf0: b               #0x889c20
    // 0x889bf4: r0 = 10
    //     0x889bf4: movz            x0, #0xa
    // 0x889bf8: b               #0x889c20
    // 0x889bfc: cmp             x1, #3
    // 0x889c00: b.gt            #0x889c0c
    // 0x889c04: r0 = 15
    //     0x889c04: movz            x0, #0xf
    // 0x889c08: b               #0x889c20
    // 0x889c0c: cmp             w0, #8
    // 0x889c10: b.ne            #0x889c1c
    // 0x889c14: r0 = 20
    //     0x889c14: movz            x0, #0x14
    // 0x889c18: b               #0x889c20
    // 0x889c1c: r0 = 0
    //     0x889c1c: movz            x0, #0
    // 0x889c20: add             x1, x0, #0x1e
    // 0x889c24: mov             x0, x1
    // 0x889c28: b               #0x88db2c
    // 0x889c2c: r16 = "shoumaMaxCompletion"
    //     0x889c2c: add             x16, PP, #0x13, lsl #12  ; [pp+0x13328] "shoumaMaxCompletion"
    //     0x889c30: ldr             x16, [x16, #0x328]
    // 0x889c34: ldur            lr, [fp, #-0x20]
    // 0x889c38: stp             lr, x16, [SP]
    // 0x889c3c: r0 = ==()
    //     0x889c3c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889c40: tbnz            w0, #4, #0x889d98
    // 0x889c44: r0 = LoadStaticField(0xb54)
    //     0x889c44: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889c48: ldr             x0, [x0, #0x16a8]
    // 0x889c4c: cmp             w0, NULL
    // 0x889c50: b.ne            #0x889c5c
    // 0x889c54: r0 = Null
    //     0x889c54: mov             x0, NULL
    // 0x889c58: b               #0x889c84
    // 0x889c5c: r17 = 347
    //     0x889c5c: movz            x17, #0x15b
    // 0x889c60: ldr             w1, [x0, x17]
    // 0x889c64: DecompressPointer r1
    //     0x889c64: add             x1, x1, HEAP, lsl #32
    // 0x889c68: r0 = LoadClassIdInstr(r1)
    //     0x889c68: ldur            x0, [x1, #-1]
    //     0x889c6c: ubfx            x0, x0, #0xc, #0x14
    // 0x889c70: r2 = "shoumaMaxCompletion"
    //     0x889c70: add             x2, PP, #0x13, lsl #12  ; [pp+0x13328] "shoumaMaxCompletion"
    //     0x889c74: ldr             x2, [x2, #0x328]
    // 0x889c78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889c78: sub             lr, x0, #0xb4
    //     0x889c7c: ldr             lr, [x21, lr, lsl #3]
    //     0x889c80: blr             lr
    // 0x889c84: cmp             w0, NULL
    // 0x889c88: b.ne            #0x889c94
    // 0x889c8c: r3 = 0
    //     0x889c8c: movz            x3, #0
    // 0x889c90: b               #0x889c98
    // 0x889c94: mov             x3, x0
    // 0x889c98: mov             x0, x3
    // 0x889c9c: stur            x3, [fp, #-8]
    // 0x889ca0: r2 = Null
    //     0x889ca0: mov             x2, NULL
    // 0x889ca4: r1 = Null
    //     0x889ca4: mov             x1, NULL
    // 0x889ca8: branchIfSmi(r0, 0x889cd0)
    //     0x889ca8: tbz             w0, #0, #0x889cd0
    // 0x889cac: r4 = LoadClassIdInstr(r0)
    //     0x889cac: ldur            x4, [x0, #-1]
    //     0x889cb0: ubfx            x4, x4, #0xc, #0x14
    // 0x889cb4: sub             x4, x4, #0x3b
    // 0x889cb8: cmp             x4, #1
    // 0x889cbc: b.ls            #0x889cd0
    // 0x889cc0: r8 = int
    //     0x889cc0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889cc4: r3 = Null
    //     0x889cc4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13330] Null
    //     0x889cc8: ldr             x3, [x3, #0x330]
    // 0x889ccc: r0 = int()
    //     0x889ccc: bl              #0x1524294  ; IsType_int_Stub
    // 0x889cd0: r0 = LoadStaticField(0xb54)
    //     0x889cd0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889cd4: ldr             x0, [x0, #0x16a8]
    // 0x889cd8: cmp             w0, NULL
    // 0x889cdc: b.ne            #0x889ce8
    // 0x889ce0: r0 = Null
    //     0x889ce0: mov             x0, NULL
    // 0x889ce4: b               #0x889d10
    // 0x889ce8: r17 = 347
    //     0x889ce8: movz            x17, #0x15b
    // 0x889cec: ldr             w1, [x0, x17]
    // 0x889cf0: DecompressPointer r1
    //     0x889cf0: add             x1, x1, HEAP, lsl #32
    // 0x889cf4: r0 = LoadClassIdInstr(r1)
    //     0x889cf4: ldur            x0, [x1, #-1]
    //     0x889cf8: ubfx            x0, x0, #0xc, #0x14
    // 0x889cfc: r2 = "shoumaCompletion"
    //     0x889cfc: add             x2, PP, #0x13, lsl #12  ; [pp+0x13340] "shoumaCompletion"
    //     0x889d00: ldr             x2, [x2, #0x340]
    // 0x889d04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889d04: sub             lr, x0, #0xb4
    //     0x889d08: ldr             lr, [x21, lr, lsl #3]
    //     0x889d0c: blr             lr
    // 0x889d10: cmp             w0, NULL
    // 0x889d14: b.ne            #0x889d20
    // 0x889d18: r4 = 0
    //     0x889d18: movz            x4, #0
    // 0x889d1c: b               #0x889d24
    // 0x889d20: mov             x4, x0
    // 0x889d24: ldur            x3, [fp, #-8]
    // 0x889d28: mov             x0, x4
    // 0x889d2c: stur            x4, [fp, #-0x18]
    // 0x889d30: r2 = Null
    //     0x889d30: mov             x2, NULL
    // 0x889d34: r1 = Null
    //     0x889d34: mov             x1, NULL
    // 0x889d38: branchIfSmi(r0, 0x889d60)
    //     0x889d38: tbz             w0, #0, #0x889d60
    // 0x889d3c: r4 = LoadClassIdInstr(r0)
    //     0x889d3c: ldur            x4, [x0, #-1]
    //     0x889d40: ubfx            x4, x4, #0xc, #0x14
    // 0x889d44: sub             x4, x4, #0x3b
    // 0x889d48: cmp             x4, #1
    // 0x889d4c: b.ls            #0x889d60
    // 0x889d50: r8 = int
    //     0x889d50: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889d54: r3 = Null
    //     0x889d54: add             x3, PP, #0x13, lsl #12  ; [pp+0x13348] Null
    //     0x889d58: ldr             x3, [x3, #0x348]
    // 0x889d5c: r0 = int()
    //     0x889d5c: bl              #0x1524294  ; IsType_int_Stub
    // 0x889d60: ldur            x0, [fp, #-8]
    // 0x889d64: r1 = LoadInt32Instr(r0)
    //     0x889d64: sbfx            x1, x0, #1, #0x1f
    //     0x889d68: tbz             w0, #0, #0x889d70
    //     0x889d6c: ldur            x1, [x0, #7]
    // 0x889d70: ldur            x0, [fp, #-0x18]
    // 0x889d74: r2 = LoadInt32Instr(r0)
    //     0x889d74: sbfx            x2, x0, #1, #0x1f
    //     0x889d78: tbz             w0, #0, #0x889d80
    //     0x889d7c: ldur            x2, [x0, #7]
    // 0x889d80: cmp             x1, x2
    // 0x889d84: b.lt            #0x889d90
    // 0x889d88: mov             x0, x1
    // 0x889d8c: b               #0x88db2c
    // 0x889d90: mov             x0, x2
    // 0x889d94: b               #0x88db2c
    // 0x889d98: r16 = "shoumaCompletion"
    //     0x889d98: add             x16, PP, #0x13, lsl #12  ; [pp+0x13340] "shoumaCompletion"
    //     0x889d9c: ldr             x16, [x16, #0x340]
    // 0x889da0: ldur            lr, [fp, #-0x20]
    // 0x889da4: stp             lr, x16, [SP]
    // 0x889da8: r0 = ==()
    //     0x889da8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889dac: tbnz            w0, #4, #0x889e54
    // 0x889db0: r0 = LoadStaticField(0xb54)
    //     0x889db0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889db4: ldr             x0, [x0, #0x16a8]
    // 0x889db8: cmp             w0, NULL
    // 0x889dbc: b.ne            #0x889dc8
    // 0x889dc0: r0 = Null
    //     0x889dc0: mov             x0, NULL
    // 0x889dc4: b               #0x889df0
    // 0x889dc8: r17 = 347
    //     0x889dc8: movz            x17, #0x15b
    // 0x889dcc: ldr             w1, [x0, x17]
    // 0x889dd0: DecompressPointer r1
    //     0x889dd0: add             x1, x1, HEAP, lsl #32
    // 0x889dd4: r0 = LoadClassIdInstr(r1)
    //     0x889dd4: ldur            x0, [x1, #-1]
    //     0x889dd8: ubfx            x0, x0, #0xc, #0x14
    // 0x889ddc: r2 = "shoumaCompletion"
    //     0x889ddc: add             x2, PP, #0x13, lsl #12  ; [pp+0x13340] "shoumaCompletion"
    //     0x889de0: ldr             x2, [x2, #0x340]
    // 0x889de4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889de4: sub             lr, x0, #0xb4
    //     0x889de8: ldr             lr, [x21, lr, lsl #3]
    //     0x889dec: blr             lr
    // 0x889df0: cmp             w0, NULL
    // 0x889df4: b.ne            #0x889e00
    // 0x889df8: r3 = 0
    //     0x889df8: movz            x3, #0
    // 0x889dfc: b               #0x889e04
    // 0x889e00: mov             x3, x0
    // 0x889e04: mov             x0, x3
    // 0x889e08: stur            x3, [fp, #-8]
    // 0x889e0c: r2 = Null
    //     0x889e0c: mov             x2, NULL
    // 0x889e10: r1 = Null
    //     0x889e10: mov             x1, NULL
    // 0x889e14: branchIfSmi(r0, 0x889e3c)
    //     0x889e14: tbz             w0, #0, #0x889e3c
    // 0x889e18: r4 = LoadClassIdInstr(r0)
    //     0x889e18: ldur            x4, [x0, #-1]
    //     0x889e1c: ubfx            x4, x4, #0xc, #0x14
    // 0x889e20: sub             x4, x4, #0x3b
    // 0x889e24: cmp             x4, #1
    // 0x889e28: b.ls            #0x889e3c
    // 0x889e2c: r8 = int
    //     0x889e2c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889e30: r3 = Null
    //     0x889e30: add             x3, PP, #0x13, lsl #12  ; [pp+0x13358] Null
    //     0x889e34: ldr             x3, [x3, #0x358]
    // 0x889e38: r0 = int()
    //     0x889e38: bl              #0x1524294  ; IsType_int_Stub
    // 0x889e3c: ldur            x0, [fp, #-8]
    // 0x889e40: r1 = LoadInt32Instr(r0)
    //     0x889e40: sbfx            x1, x0, #1, #0x1f
    //     0x889e44: tbz             w0, #0, #0x889e4c
    //     0x889e48: ldur            x1, [x0, #7]
    // 0x889e4c: mov             x0, x1
    // 0x889e50: b               #0x88db2c
    // 0x889e54: r16 = "lootTokenShouma"
    //     0x889e54: add             x16, PP, #0x13, lsl #12  ; [pp+0x13368] "lootTokenShouma"
    //     0x889e58: ldr             x16, [x16, #0x368]
    // 0x889e5c: ldur            lr, [fp, #-0x20]
    // 0x889e60: stp             lr, x16, [SP]
    // 0x889e64: r0 = ==()
    //     0x889e64: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x889e68: tbnz            w0, #4, #0x88a024
    // 0x889e6c: r1 = "shouma"
    //     0x889e6c: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc58] "shouma"
    //     0x889e70: ldr             x1, [x1, #0xc58]
    // 0x889e74: r0 = getMemory()
    //     0x889e74: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x889e78: LoadField: r3 = r0->field_2b
    //     0x889e78: ldur            x3, [x0, #0x2b]
    // 0x889e7c: stur            x3, [fp, #-0x10]
    // 0x889e80: r0 = LoadStaticField(0xb54)
    //     0x889e80: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x889e84: ldr             x0, [x0, #0x16a8]
    // 0x889e88: cmp             w0, NULL
    // 0x889e8c: b.ne            #0x889e98
    // 0x889e90: r0 = Null
    //     0x889e90: mov             x0, NULL
    // 0x889e94: b               #0x889ec0
    // 0x889e98: r17 = 347
    //     0x889e98: movz            x17, #0x15b
    // 0x889e9c: ldr             w1, [x0, x17]
    // 0x889ea0: DecompressPointer r1
    //     0x889ea0: add             x1, x1, HEAP, lsl #32
    // 0x889ea4: r0 = LoadClassIdInstr(r1)
    //     0x889ea4: ldur            x0, [x1, #-1]
    //     0x889ea8: ubfx            x0, x0, #0xc, #0x14
    // 0x889eac: r2 = "shoumaCompletion"
    //     0x889eac: add             x2, PP, #0x13, lsl #12  ; [pp+0x13340] "shoumaCompletion"
    //     0x889eb0: ldr             x2, [x2, #0x340]
    // 0x889eb4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x889eb4: sub             lr, x0, #0xb4
    //     0x889eb8: ldr             lr, [x21, lr, lsl #3]
    //     0x889ebc: blr             lr
    // 0x889ec0: cmp             w0, NULL
    // 0x889ec4: b.ne            #0x889ed0
    // 0x889ec8: r4 = 0
    //     0x889ec8: movz            x4, #0
    // 0x889ecc: b               #0x889ed4
    // 0x889ed0: mov             x4, x0
    // 0x889ed4: ldur            x3, [fp, #-0x10]
    // 0x889ed8: mov             x0, x4
    // 0x889edc: stur            x4, [fp, #-8]
    // 0x889ee0: r2 = Null
    //     0x889ee0: mov             x2, NULL
    // 0x889ee4: r1 = Null
    //     0x889ee4: mov             x1, NULL
    // 0x889ee8: branchIfSmi(r0, 0x889f10)
    //     0x889ee8: tbz             w0, #0, #0x889f10
    // 0x889eec: r4 = LoadClassIdInstr(r0)
    //     0x889eec: ldur            x4, [x0, #-1]
    //     0x889ef0: ubfx            x4, x4, #0xc, #0x14
    // 0x889ef4: sub             x4, x4, #0x3b
    // 0x889ef8: cmp             x4, #1
    // 0x889efc: b.ls            #0x889f10
    // 0x889f00: r8 = int
    //     0x889f00: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x889f04: r3 = Null
    //     0x889f04: add             x3, PP, #0x13, lsl #12  ; [pp+0x13370] Null
    //     0x889f08: ldr             x3, [x3, #0x370]
    // 0x889f0c: r0 = int()
    //     0x889f0c: bl              #0x1524294  ; IsType_int_Stub
    // 0x889f10: ldur            x0, [fp, #-8]
    // 0x889f14: r1 = LoadInt32Instr(r0)
    //     0x889f14: sbfx            x1, x0, #1, #0x1f
    //     0x889f18: tbz             w0, #0, #0x889f20
    //     0x889f1c: ldur            x1, [x0, #7]
    // 0x889f20: scvtf           d0, x1
    // 0x889f24: d1 = 100.000000
    //     0x889f24: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x889f28: ldr             d1, [x17, #0xa28]
    // 0x889f2c: fdiv            d2, d0, d1
    // 0x889f30: ldur            x0, [fp, #-0x10]
    // 0x889f34: scvtf           d0, x0
    // 0x889f38: fmul            d1, d2, d0
    // 0x889f3c: fcmp            d1, d1
    // 0x889f40: b.vs            #0x88dd24
    // 0x889f44: fcvtms          x2, d1
    // 0x889f48: asr             x16, x2, #0x1e
    // 0x889f4c: cmp             x16, x2, asr #63
    // 0x889f50: b.ne            #0x88dd24
    // 0x889f54: lsl             x2, x2, #1
    // 0x889f58: cmp             x1, #0x32
    // 0x889f5c: b.gt            #0x889fa8
    // 0x889f60: d0 = 0.500000
    //     0x889f60: fmov            d0, #0.50000000
    // 0x889f64: r1 = LoadInt32Instr(r2)
    //     0x889f64: sbfx            x1, x2, #1, #0x1f
    //     0x889f68: tbz             w2, #0, #0x889f70
    //     0x889f6c: ldur            x1, [x2, #7]
    // 0x889f70: scvtf           d1, x1
    // 0x889f74: fmul            d2, d1, d0
    // 0x889f78: fcmp            d2, d2
    // 0x889f7c: b.vs            #0x88dd50
    // 0x889f80: fcvtms          x1, d2
    // 0x889f84: asr             x16, x1, #0x1e
    // 0x889f88: cmp             x16, x1, asr #63
    // 0x889f8c: b.ne            #0x88dd50
    // 0x889f90: lsl             x1, x1, #1
    // 0x889f94: r2 = LoadInt32Instr(r1)
    //     0x889f94: sbfx            x2, x1, #1, #0x1f
    //     0x889f98: tbz             w1, #0, #0x889fa0
    //     0x889f9c: ldur            x2, [x1, #7]
    // 0x889fa0: mov             x1, x2
    // 0x889fa4: b               #0x88a004
    // 0x889fa8: cmp             x1, #0x55
    // 0x889fac: b.gt            #0x889ff8
    // 0x889fb0: d2 = 0.750000
    //     0x889fb0: fmov            d2, #0.75000000
    // 0x889fb4: r1 = LoadInt32Instr(r2)
    //     0x889fb4: sbfx            x1, x2, #1, #0x1f
    //     0x889fb8: tbz             w2, #0, #0x889fc0
    //     0x889fbc: ldur            x1, [x2, #7]
    // 0x889fc0: scvtf           d0, x1
    // 0x889fc4: fmul            d1, d0, d2
    // 0x889fc8: fcmp            d1, d1
    // 0x889fcc: b.vs            #0x88dd7c
    // 0x889fd0: fcvtms          x1, d1
    // 0x889fd4: asr             x16, x1, #0x1e
    // 0x889fd8: cmp             x16, x1, asr #63
    // 0x889fdc: b.ne            #0x88dd7c
    // 0x889fe0: lsl             x1, x1, #1
    // 0x889fe4: r2 = LoadInt32Instr(r1)
    //     0x889fe4: sbfx            x2, x1, #1, #0x1f
    //     0x889fe8: tbz             w1, #0, #0x889ff0
    //     0x889fec: ldur            x2, [x1, #7]
    // 0x889ff0: mov             x1, x2
    // 0x889ff4: b               #0x88a004
    // 0x889ff8: r1 = LoadInt32Instr(r2)
    //     0x889ff8: sbfx            x1, x2, #1, #0x1f
    //     0x889ffc: tbz             w2, #0, #0x88a004
    //     0x88a000: ldur            x1, [x2, #7]
    // 0x88a004: cmp             x1, x0
    // 0x88a008: b.gt            #0x88db2c
    // 0x88a00c: cmp             x1, #0
    // 0x88a010: b.gt            #0x88a01c
    // 0x88a014: r0 = 1
    //     0x88a014: movz            x0, #0x1
    // 0x88a018: b               #0x88db2c
    // 0x88a01c: mov             x0, x1
    // 0x88a020: b               #0x88db2c
    // 0x88a024: d1 = 100.000000
    //     0x88a024: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a028: ldr             d1, [x17, #0xa28]
    // 0x88a02c: d2 = 0.750000
    //     0x88a02c: fmov            d2, #0.75000000
    // 0x88a030: d0 = 0.500000
    //     0x88a030: fmov            d0, #0.50000000
    // 0x88a034: r16 = "lootMoneyShouma"
    //     0x88a034: add             x16, PP, #0x13, lsl #12  ; [pp+0x13380] "lootMoneyShouma"
    //     0x88a038: ldr             x16, [x16, #0x380]
    // 0x88a03c: ldur            lr, [fp, #-0x20]
    // 0x88a040: stp             lr, x16, [SP]
    // 0x88a044: r0 = ==()
    //     0x88a044: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a048: tbnz            w0, #4, #0x88a204
    // 0x88a04c: r1 = "shouma"
    //     0x88a04c: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc58] "shouma"
    //     0x88a050: ldr             x1, [x1, #0xc58]
    // 0x88a054: r0 = getMemory()
    //     0x88a054: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88a058: LoadField: r3 = r0->field_23
    //     0x88a058: ldur            x3, [x0, #0x23]
    // 0x88a05c: stur            x3, [fp, #-0x10]
    // 0x88a060: r0 = LoadStaticField(0xb54)
    //     0x88a060: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a064: ldr             x0, [x0, #0x16a8]
    // 0x88a068: cmp             w0, NULL
    // 0x88a06c: b.ne            #0x88a078
    // 0x88a070: r0 = Null
    //     0x88a070: mov             x0, NULL
    // 0x88a074: b               #0x88a0a0
    // 0x88a078: r17 = 347
    //     0x88a078: movz            x17, #0x15b
    // 0x88a07c: ldr             w1, [x0, x17]
    // 0x88a080: DecompressPointer r1
    //     0x88a080: add             x1, x1, HEAP, lsl #32
    // 0x88a084: r0 = LoadClassIdInstr(r1)
    //     0x88a084: ldur            x0, [x1, #-1]
    //     0x88a088: ubfx            x0, x0, #0xc, #0x14
    // 0x88a08c: r2 = "shoumaCompletion"
    //     0x88a08c: add             x2, PP, #0x13, lsl #12  ; [pp+0x13340] "shoumaCompletion"
    //     0x88a090: ldr             x2, [x2, #0x340]
    // 0x88a094: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a094: sub             lr, x0, #0xb4
    //     0x88a098: ldr             lr, [x21, lr, lsl #3]
    //     0x88a09c: blr             lr
    // 0x88a0a0: cmp             w0, NULL
    // 0x88a0a4: b.ne            #0x88a0b0
    // 0x88a0a8: r4 = 0
    //     0x88a0a8: movz            x4, #0
    // 0x88a0ac: b               #0x88a0b4
    // 0x88a0b0: mov             x4, x0
    // 0x88a0b4: ldur            x3, [fp, #-0x10]
    // 0x88a0b8: mov             x0, x4
    // 0x88a0bc: stur            x4, [fp, #-8]
    // 0x88a0c0: r2 = Null
    //     0x88a0c0: mov             x2, NULL
    // 0x88a0c4: r1 = Null
    //     0x88a0c4: mov             x1, NULL
    // 0x88a0c8: branchIfSmi(r0, 0x88a0f0)
    //     0x88a0c8: tbz             w0, #0, #0x88a0f0
    // 0x88a0cc: r4 = LoadClassIdInstr(r0)
    //     0x88a0cc: ldur            x4, [x0, #-1]
    //     0x88a0d0: ubfx            x4, x4, #0xc, #0x14
    // 0x88a0d4: sub             x4, x4, #0x3b
    // 0x88a0d8: cmp             x4, #1
    // 0x88a0dc: b.ls            #0x88a0f0
    // 0x88a0e0: r8 = int
    //     0x88a0e0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a0e4: r3 = Null
    //     0x88a0e4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13388] Null
    //     0x88a0e8: ldr             x3, [x3, #0x388]
    // 0x88a0ec: r0 = int()
    //     0x88a0ec: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a0f0: ldur            x0, [fp, #-8]
    // 0x88a0f4: r1 = LoadInt32Instr(r0)
    //     0x88a0f4: sbfx            x1, x0, #1, #0x1f
    //     0x88a0f8: tbz             w0, #0, #0x88a100
    //     0x88a0fc: ldur            x1, [x0, #7]
    // 0x88a100: scvtf           d0, x1
    // 0x88a104: d1 = 100.000000
    //     0x88a104: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a108: ldr             d1, [x17, #0xa28]
    // 0x88a10c: fdiv            d2, d0, d1
    // 0x88a110: ldur            x0, [fp, #-0x10]
    // 0x88a114: scvtf           d0, x0
    // 0x88a118: fmul            d1, d2, d0
    // 0x88a11c: fcmp            d1, d1
    // 0x88a120: b.vs            #0x88dda8
    // 0x88a124: fcvtms          x2, d1
    // 0x88a128: asr             x16, x2, #0x1e
    // 0x88a12c: cmp             x16, x2, asr #63
    // 0x88a130: b.ne            #0x88dda8
    // 0x88a134: lsl             x2, x2, #1
    // 0x88a138: cmp             x1, #0x32
    // 0x88a13c: b.gt            #0x88a188
    // 0x88a140: d0 = 0.500000
    //     0x88a140: fmov            d0, #0.50000000
    // 0x88a144: r1 = LoadInt32Instr(r2)
    //     0x88a144: sbfx            x1, x2, #1, #0x1f
    //     0x88a148: tbz             w2, #0, #0x88a150
    //     0x88a14c: ldur            x1, [x2, #7]
    // 0x88a150: scvtf           d1, x1
    // 0x88a154: fmul            d2, d1, d0
    // 0x88a158: fcmp            d2, d2
    // 0x88a15c: b.vs            #0x88ddd4
    // 0x88a160: fcvtms          x1, d2
    // 0x88a164: asr             x16, x1, #0x1e
    // 0x88a168: cmp             x16, x1, asr #63
    // 0x88a16c: b.ne            #0x88ddd4
    // 0x88a170: lsl             x1, x1, #1
    // 0x88a174: r2 = LoadInt32Instr(r1)
    //     0x88a174: sbfx            x2, x1, #1, #0x1f
    //     0x88a178: tbz             w1, #0, #0x88a180
    //     0x88a17c: ldur            x2, [x1, #7]
    // 0x88a180: mov             x1, x2
    // 0x88a184: b               #0x88a1e4
    // 0x88a188: cmp             x1, #0x55
    // 0x88a18c: b.gt            #0x88a1d8
    // 0x88a190: d2 = 0.750000
    //     0x88a190: fmov            d2, #0.75000000
    // 0x88a194: r1 = LoadInt32Instr(r2)
    //     0x88a194: sbfx            x1, x2, #1, #0x1f
    //     0x88a198: tbz             w2, #0, #0x88a1a0
    //     0x88a19c: ldur            x1, [x2, #7]
    // 0x88a1a0: scvtf           d0, x1
    // 0x88a1a4: fmul            d1, d0, d2
    // 0x88a1a8: fcmp            d1, d1
    // 0x88a1ac: b.vs            #0x88de00
    // 0x88a1b0: fcvtms          x1, d1
    // 0x88a1b4: asr             x16, x1, #0x1e
    // 0x88a1b8: cmp             x16, x1, asr #63
    // 0x88a1bc: b.ne            #0x88de00
    // 0x88a1c0: lsl             x1, x1, #1
    // 0x88a1c4: r2 = LoadInt32Instr(r1)
    //     0x88a1c4: sbfx            x2, x1, #1, #0x1f
    //     0x88a1c8: tbz             w1, #0, #0x88a1d0
    //     0x88a1cc: ldur            x2, [x1, #7]
    // 0x88a1d0: mov             x1, x2
    // 0x88a1d4: b               #0x88a1e4
    // 0x88a1d8: r1 = LoadInt32Instr(r2)
    //     0x88a1d8: sbfx            x1, x2, #1, #0x1f
    //     0x88a1dc: tbz             w2, #0, #0x88a1e4
    //     0x88a1e0: ldur            x1, [x2, #7]
    // 0x88a1e4: cmp             x1, #0x64
    // 0x88a1e8: b.gt            #0x88a1f4
    // 0x88a1ec: r0 = 100
    //     0x88a1ec: movz            x0, #0x64
    // 0x88a1f0: b               #0x88db2c
    // 0x88a1f4: cmp             x1, x0
    // 0x88a1f8: b.gt            #0x88db2c
    // 0x88a1fc: mov             x0, x1
    // 0x88a200: b               #0x88db2c
    // 0x88a204: d1 = 100.000000
    //     0x88a204: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a208: ldr             d1, [x17, #0xa28]
    // 0x88a20c: d2 = 0.750000
    //     0x88a20c: fmov            d2, #0.75000000
    // 0x88a210: d0 = 0.500000
    //     0x88a210: fmov            d0, #0.50000000
    // 0x88a214: r16 = "makiMaxCompletion"
    //     0x88a214: add             x16, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x88a218: ldr             x16, [x16, #0x8b8]
    // 0x88a21c: ldur            lr, [fp, #-0x20]
    // 0x88a220: stp             lr, x16, [SP]
    // 0x88a224: r0 = ==()
    //     0x88a224: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a228: tbnz            w0, #4, #0x88a380
    // 0x88a22c: r0 = LoadStaticField(0xb54)
    //     0x88a22c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a230: ldr             x0, [x0, #0x16a8]
    // 0x88a234: cmp             w0, NULL
    // 0x88a238: b.ne            #0x88a244
    // 0x88a23c: r0 = Null
    //     0x88a23c: mov             x0, NULL
    // 0x88a240: b               #0x88a26c
    // 0x88a244: r17 = 347
    //     0x88a244: movz            x17, #0x15b
    // 0x88a248: ldr             w1, [x0, x17]
    // 0x88a24c: DecompressPointer r1
    //     0x88a24c: add             x1, x1, HEAP, lsl #32
    // 0x88a250: r0 = LoadClassIdInstr(r1)
    //     0x88a250: ldur            x0, [x1, #-1]
    //     0x88a254: ubfx            x0, x0, #0xc, #0x14
    // 0x88a258: r2 = "makiMaxCompletion"
    //     0x88a258: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x88a25c: ldr             x2, [x2, #0x8b8]
    // 0x88a260: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a260: sub             lr, x0, #0xb4
    //     0x88a264: ldr             lr, [x21, lr, lsl #3]
    //     0x88a268: blr             lr
    // 0x88a26c: cmp             w0, NULL
    // 0x88a270: b.ne            #0x88a27c
    // 0x88a274: r3 = 0
    //     0x88a274: movz            x3, #0
    // 0x88a278: b               #0x88a280
    // 0x88a27c: mov             x3, x0
    // 0x88a280: mov             x0, x3
    // 0x88a284: stur            x3, [fp, #-8]
    // 0x88a288: r2 = Null
    //     0x88a288: mov             x2, NULL
    // 0x88a28c: r1 = Null
    //     0x88a28c: mov             x1, NULL
    // 0x88a290: branchIfSmi(r0, 0x88a2b8)
    //     0x88a290: tbz             w0, #0, #0x88a2b8
    // 0x88a294: r4 = LoadClassIdInstr(r0)
    //     0x88a294: ldur            x4, [x0, #-1]
    //     0x88a298: ubfx            x4, x4, #0xc, #0x14
    // 0x88a29c: sub             x4, x4, #0x3b
    // 0x88a2a0: cmp             x4, #1
    // 0x88a2a4: b.ls            #0x88a2b8
    // 0x88a2a8: r8 = int
    //     0x88a2a8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a2ac: r3 = Null
    //     0x88a2ac: add             x3, PP, #0x13, lsl #12  ; [pp+0x13398] Null
    //     0x88a2b0: ldr             x3, [x3, #0x398]
    // 0x88a2b4: r0 = int()
    //     0x88a2b4: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a2b8: r0 = LoadStaticField(0xb54)
    //     0x88a2b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a2bc: ldr             x0, [x0, #0x16a8]
    // 0x88a2c0: cmp             w0, NULL
    // 0x88a2c4: b.ne            #0x88a2d0
    // 0x88a2c8: r0 = Null
    //     0x88a2c8: mov             x0, NULL
    // 0x88a2cc: b               #0x88a2f8
    // 0x88a2d0: r17 = 347
    //     0x88a2d0: movz            x17, #0x15b
    // 0x88a2d4: ldr             w1, [x0, x17]
    // 0x88a2d8: DecompressPointer r1
    //     0x88a2d8: add             x1, x1, HEAP, lsl #32
    // 0x88a2dc: r0 = LoadClassIdInstr(r1)
    //     0x88a2dc: ldur            x0, [x1, #-1]
    //     0x88a2e0: ubfx            x0, x0, #0xc, #0x14
    // 0x88a2e4: r2 = "makiCompletion"
    //     0x88a2e4: add             x2, PP, #0x13, lsl #12  ; [pp+0x133a8] "makiCompletion"
    //     0x88a2e8: ldr             x2, [x2, #0x3a8]
    // 0x88a2ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a2ec: sub             lr, x0, #0xb4
    //     0x88a2f0: ldr             lr, [x21, lr, lsl #3]
    //     0x88a2f4: blr             lr
    // 0x88a2f8: cmp             w0, NULL
    // 0x88a2fc: b.ne            #0x88a308
    // 0x88a300: r4 = 0
    //     0x88a300: movz            x4, #0
    // 0x88a304: b               #0x88a30c
    // 0x88a308: mov             x4, x0
    // 0x88a30c: ldur            x3, [fp, #-8]
    // 0x88a310: mov             x0, x4
    // 0x88a314: stur            x4, [fp, #-0x18]
    // 0x88a318: r2 = Null
    //     0x88a318: mov             x2, NULL
    // 0x88a31c: r1 = Null
    //     0x88a31c: mov             x1, NULL
    // 0x88a320: branchIfSmi(r0, 0x88a348)
    //     0x88a320: tbz             w0, #0, #0x88a348
    // 0x88a324: r4 = LoadClassIdInstr(r0)
    //     0x88a324: ldur            x4, [x0, #-1]
    //     0x88a328: ubfx            x4, x4, #0xc, #0x14
    // 0x88a32c: sub             x4, x4, #0x3b
    // 0x88a330: cmp             x4, #1
    // 0x88a334: b.ls            #0x88a348
    // 0x88a338: r8 = int
    //     0x88a338: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a33c: r3 = Null
    //     0x88a33c: add             x3, PP, #0x13, lsl #12  ; [pp+0x133b0] Null
    //     0x88a340: ldr             x3, [x3, #0x3b0]
    // 0x88a344: r0 = int()
    //     0x88a344: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a348: ldur            x0, [fp, #-8]
    // 0x88a34c: r1 = LoadInt32Instr(r0)
    //     0x88a34c: sbfx            x1, x0, #1, #0x1f
    //     0x88a350: tbz             w0, #0, #0x88a358
    //     0x88a354: ldur            x1, [x0, #7]
    // 0x88a358: ldur            x0, [fp, #-0x18]
    // 0x88a35c: r2 = LoadInt32Instr(r0)
    //     0x88a35c: sbfx            x2, x0, #1, #0x1f
    //     0x88a360: tbz             w0, #0, #0x88a368
    //     0x88a364: ldur            x2, [x0, #7]
    // 0x88a368: cmp             x1, x2
    // 0x88a36c: b.lt            #0x88a378
    // 0x88a370: mov             x0, x1
    // 0x88a374: b               #0x88db2c
    // 0x88a378: mov             x0, x2
    // 0x88a37c: b               #0x88db2c
    // 0x88a380: r16 = "makiCompletion"
    //     0x88a380: add             x16, PP, #0x13, lsl #12  ; [pp+0x133a8] "makiCompletion"
    //     0x88a384: ldr             x16, [x16, #0x3a8]
    // 0x88a388: ldur            lr, [fp, #-0x20]
    // 0x88a38c: stp             lr, x16, [SP]
    // 0x88a390: r0 = ==()
    //     0x88a390: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a394: tbnz            w0, #4, #0x88a43c
    // 0x88a398: r0 = LoadStaticField(0xb54)
    //     0x88a398: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a39c: ldr             x0, [x0, #0x16a8]
    // 0x88a3a0: cmp             w0, NULL
    // 0x88a3a4: b.ne            #0x88a3b0
    // 0x88a3a8: r0 = Null
    //     0x88a3a8: mov             x0, NULL
    // 0x88a3ac: b               #0x88a3d8
    // 0x88a3b0: r17 = 347
    //     0x88a3b0: movz            x17, #0x15b
    // 0x88a3b4: ldr             w1, [x0, x17]
    // 0x88a3b8: DecompressPointer r1
    //     0x88a3b8: add             x1, x1, HEAP, lsl #32
    // 0x88a3bc: r0 = LoadClassIdInstr(r1)
    //     0x88a3bc: ldur            x0, [x1, #-1]
    //     0x88a3c0: ubfx            x0, x0, #0xc, #0x14
    // 0x88a3c4: r2 = "makiCompletion"
    //     0x88a3c4: add             x2, PP, #0x13, lsl #12  ; [pp+0x133a8] "makiCompletion"
    //     0x88a3c8: ldr             x2, [x2, #0x3a8]
    // 0x88a3cc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a3cc: sub             lr, x0, #0xb4
    //     0x88a3d0: ldr             lr, [x21, lr, lsl #3]
    //     0x88a3d4: blr             lr
    // 0x88a3d8: cmp             w0, NULL
    // 0x88a3dc: b.ne            #0x88a3e8
    // 0x88a3e0: r3 = 0
    //     0x88a3e0: movz            x3, #0
    // 0x88a3e4: b               #0x88a3ec
    // 0x88a3e8: mov             x3, x0
    // 0x88a3ec: mov             x0, x3
    // 0x88a3f0: stur            x3, [fp, #-8]
    // 0x88a3f4: r2 = Null
    //     0x88a3f4: mov             x2, NULL
    // 0x88a3f8: r1 = Null
    //     0x88a3f8: mov             x1, NULL
    // 0x88a3fc: branchIfSmi(r0, 0x88a424)
    //     0x88a3fc: tbz             w0, #0, #0x88a424
    // 0x88a400: r4 = LoadClassIdInstr(r0)
    //     0x88a400: ldur            x4, [x0, #-1]
    //     0x88a404: ubfx            x4, x4, #0xc, #0x14
    // 0x88a408: sub             x4, x4, #0x3b
    // 0x88a40c: cmp             x4, #1
    // 0x88a410: b.ls            #0x88a424
    // 0x88a414: r8 = int
    //     0x88a414: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a418: r3 = Null
    //     0x88a418: add             x3, PP, #0x13, lsl #12  ; [pp+0x133c0] Null
    //     0x88a41c: ldr             x3, [x3, #0x3c0]
    // 0x88a420: r0 = int()
    //     0x88a420: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a424: ldur            x0, [fp, #-8]
    // 0x88a428: r1 = LoadInt32Instr(r0)
    //     0x88a428: sbfx            x1, x0, #1, #0x1f
    //     0x88a42c: tbz             w0, #0, #0x88a434
    //     0x88a430: ldur            x1, [x0, #7]
    // 0x88a434: mov             x0, x1
    // 0x88a438: b               #0x88db2c
    // 0x88a43c: r16 = "lootTokenMaki"
    //     0x88a43c: add             x16, PP, #0x13, lsl #12  ; [pp+0x133d0] "lootTokenMaki"
    //     0x88a440: ldr             x16, [x16, #0x3d0]
    // 0x88a444: ldur            lr, [fp, #-0x20]
    // 0x88a448: stp             lr, x16, [SP]
    // 0x88a44c: r0 = ==()
    //     0x88a44c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a450: tbnz            w0, #4, #0x88a5f0
    // 0x88a454: r1 = "maki"
    //     0x88a454: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc60] "maki"
    //     0x88a458: ldr             x1, [x1, #0xc60]
    // 0x88a45c: r0 = getMemory()
    //     0x88a45c: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88a460: LoadField: r3 = r0->field_2b
    //     0x88a460: ldur            x3, [x0, #0x2b]
    // 0x88a464: stur            x3, [fp, #-0x10]
    // 0x88a468: r0 = LoadStaticField(0xb54)
    //     0x88a468: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a46c: ldr             x0, [x0, #0x16a8]
    // 0x88a470: cmp             w0, NULL
    // 0x88a474: b.ne            #0x88a480
    // 0x88a478: r0 = Null
    //     0x88a478: mov             x0, NULL
    // 0x88a47c: b               #0x88a4a8
    // 0x88a480: r17 = 347
    //     0x88a480: movz            x17, #0x15b
    // 0x88a484: ldr             w1, [x0, x17]
    // 0x88a488: DecompressPointer r1
    //     0x88a488: add             x1, x1, HEAP, lsl #32
    // 0x88a48c: r0 = LoadClassIdInstr(r1)
    //     0x88a48c: ldur            x0, [x1, #-1]
    //     0x88a490: ubfx            x0, x0, #0xc, #0x14
    // 0x88a494: r2 = "makiCompletion"
    //     0x88a494: add             x2, PP, #0x13, lsl #12  ; [pp+0x133a8] "makiCompletion"
    //     0x88a498: ldr             x2, [x2, #0x3a8]
    // 0x88a49c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a49c: sub             lr, x0, #0xb4
    //     0x88a4a0: ldr             lr, [x21, lr, lsl #3]
    //     0x88a4a4: blr             lr
    // 0x88a4a8: cmp             w0, NULL
    // 0x88a4ac: b.ne            #0x88a4b8
    // 0x88a4b0: r4 = 0
    //     0x88a4b0: movz            x4, #0
    // 0x88a4b4: b               #0x88a4bc
    // 0x88a4b8: mov             x4, x0
    // 0x88a4bc: ldur            x3, [fp, #-0x10]
    // 0x88a4c0: mov             x0, x4
    // 0x88a4c4: stur            x4, [fp, #-8]
    // 0x88a4c8: r2 = Null
    //     0x88a4c8: mov             x2, NULL
    // 0x88a4cc: r1 = Null
    //     0x88a4cc: mov             x1, NULL
    // 0x88a4d0: branchIfSmi(r0, 0x88a4f8)
    //     0x88a4d0: tbz             w0, #0, #0x88a4f8
    // 0x88a4d4: r4 = LoadClassIdInstr(r0)
    //     0x88a4d4: ldur            x4, [x0, #-1]
    //     0x88a4d8: ubfx            x4, x4, #0xc, #0x14
    // 0x88a4dc: sub             x4, x4, #0x3b
    // 0x88a4e0: cmp             x4, #1
    // 0x88a4e4: b.ls            #0x88a4f8
    // 0x88a4e8: r8 = int
    //     0x88a4e8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a4ec: r3 = Null
    //     0x88a4ec: add             x3, PP, #0x13, lsl #12  ; [pp+0x133d8] Null
    //     0x88a4f0: ldr             x3, [x3, #0x3d8]
    // 0x88a4f4: r0 = int()
    //     0x88a4f4: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a4f8: ldur            x0, [fp, #-8]
    // 0x88a4fc: r1 = LoadInt32Instr(r0)
    //     0x88a4fc: sbfx            x1, x0, #1, #0x1f
    //     0x88a500: tbz             w0, #0, #0x88a508
    //     0x88a504: ldur            x1, [x0, #7]
    // 0x88a508: scvtf           d0, x1
    // 0x88a50c: d1 = 100.000000
    //     0x88a50c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a510: ldr             d1, [x17, #0xa28]
    // 0x88a514: fdiv            d2, d0, d1
    // 0x88a518: ldur            x0, [fp, #-0x10]
    // 0x88a51c: scvtf           d0, x0
    // 0x88a520: fmul            d1, d2, d0
    // 0x88a524: fcmp            d1, d1
    // 0x88a528: b.vs            #0x88de2c
    // 0x88a52c: fcvtms          x2, d1
    // 0x88a530: asr             x16, x2, #0x1e
    // 0x88a534: cmp             x16, x2, asr #63
    // 0x88a538: b.ne            #0x88de2c
    // 0x88a53c: lsl             x2, x2, #1
    // 0x88a540: r3 = LoadInt32Instr(r2)
    //     0x88a540: sbfx            x3, x2, #1, #0x1f
    //     0x88a544: tbz             w2, #0, #0x88a54c
    //     0x88a548: ldur            x3, [x2, #7]
    // 0x88a54c: cmp             x3, x0
    // 0x88a550: b.gt            #0x88a568
    // 0x88a554: cmp             x3, #0
    // 0x88a558: b.gt            #0x88a564
    // 0x88a55c: r0 = 1
    //     0x88a55c: movz            x0, #0x1
    // 0x88a560: b               #0x88a568
    // 0x88a564: mov             x0, x3
    // 0x88a568: cmp             x1, #0x32
    // 0x88a56c: b.gt            #0x88a5ac
    // 0x88a570: d0 = 0.500000
    //     0x88a570: fmov            d0, #0.50000000
    // 0x88a574: scvtf           d1, x0
    // 0x88a578: fmul            d2, d1, d0
    // 0x88a57c: fcmp            d2, d2
    // 0x88a580: b.vs            #0x88de58
    // 0x88a584: fcvtms          x0, d2
    // 0x88a588: asr             x16, x0, #0x1e
    // 0x88a58c: cmp             x16, x0, asr #63
    // 0x88a590: b.ne            #0x88de58
    // 0x88a594: lsl             x0, x0, #1
    // 0x88a598: r1 = LoadInt32Instr(r0)
    //     0x88a598: sbfx            x1, x0, #1, #0x1f
    //     0x88a59c: tbz             w0, #0, #0x88a5a4
    //     0x88a5a0: ldur            x1, [x0, #7]
    // 0x88a5a4: mov             x0, x1
    // 0x88a5a8: b               #0x88db2c
    // 0x88a5ac: cmp             x1, #0x55
    // 0x88a5b0: b.gt            #0x88db2c
    // 0x88a5b4: d2 = 0.750000
    //     0x88a5b4: fmov            d2, #0.75000000
    // 0x88a5b8: scvtf           d0, x0
    // 0x88a5bc: fmul            d1, d0, d2
    // 0x88a5c0: fcmp            d1, d1
    // 0x88a5c4: b.vs            #0x88de78
    // 0x88a5c8: fcvtms          x0, d1
    // 0x88a5cc: asr             x16, x0, #0x1e
    // 0x88a5d0: cmp             x16, x0, asr #63
    // 0x88a5d4: b.ne            #0x88de78
    // 0x88a5d8: lsl             x0, x0, #1
    // 0x88a5dc: r1 = LoadInt32Instr(r0)
    //     0x88a5dc: sbfx            x1, x0, #1, #0x1f
    //     0x88a5e0: tbz             w0, #0, #0x88a5e8
    //     0x88a5e4: ldur            x1, [x0, #7]
    // 0x88a5e8: mov             x0, x1
    // 0x88a5ec: b               #0x88db2c
    // 0x88a5f0: d1 = 100.000000
    //     0x88a5f0: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a5f4: ldr             d1, [x17, #0xa28]
    // 0x88a5f8: d2 = 0.750000
    //     0x88a5f8: fmov            d2, #0.75000000
    // 0x88a5fc: d0 = 0.500000
    //     0x88a5fc: fmov            d0, #0.50000000
    // 0x88a600: r16 = "lootMoneyMaki"
    //     0x88a600: add             x16, PP, #0x13, lsl #12  ; [pp+0x133e8] "lootMoneyMaki"
    //     0x88a604: ldr             x16, [x16, #0x3e8]
    // 0x88a608: ldur            lr, [fp, #-0x20]
    // 0x88a60c: stp             lr, x16, [SP]
    // 0x88a610: r0 = ==()
    //     0x88a610: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a614: tbnz            w0, #4, #0x88a7b4
    // 0x88a618: r1 = "maki"
    //     0x88a618: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc60] "maki"
    //     0x88a61c: ldr             x1, [x1, #0xc60]
    // 0x88a620: r0 = getMemory()
    //     0x88a620: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88a624: LoadField: r3 = r0->field_23
    //     0x88a624: ldur            x3, [x0, #0x23]
    // 0x88a628: stur            x3, [fp, #-0x10]
    // 0x88a62c: r0 = LoadStaticField(0xb54)
    //     0x88a62c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a630: ldr             x0, [x0, #0x16a8]
    // 0x88a634: cmp             w0, NULL
    // 0x88a638: b.ne            #0x88a644
    // 0x88a63c: r0 = Null
    //     0x88a63c: mov             x0, NULL
    // 0x88a640: b               #0x88a66c
    // 0x88a644: r17 = 347
    //     0x88a644: movz            x17, #0x15b
    // 0x88a648: ldr             w1, [x0, x17]
    // 0x88a64c: DecompressPointer r1
    //     0x88a64c: add             x1, x1, HEAP, lsl #32
    // 0x88a650: r0 = LoadClassIdInstr(r1)
    //     0x88a650: ldur            x0, [x1, #-1]
    //     0x88a654: ubfx            x0, x0, #0xc, #0x14
    // 0x88a658: r2 = "makiCompletion"
    //     0x88a658: add             x2, PP, #0x13, lsl #12  ; [pp+0x133a8] "makiCompletion"
    //     0x88a65c: ldr             x2, [x2, #0x3a8]
    // 0x88a660: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a660: sub             lr, x0, #0xb4
    //     0x88a664: ldr             lr, [x21, lr, lsl #3]
    //     0x88a668: blr             lr
    // 0x88a66c: cmp             w0, NULL
    // 0x88a670: b.ne            #0x88a67c
    // 0x88a674: r4 = 0
    //     0x88a674: movz            x4, #0
    // 0x88a678: b               #0x88a680
    // 0x88a67c: mov             x4, x0
    // 0x88a680: ldur            x3, [fp, #-0x10]
    // 0x88a684: mov             x0, x4
    // 0x88a688: stur            x4, [fp, #-8]
    // 0x88a68c: r2 = Null
    //     0x88a68c: mov             x2, NULL
    // 0x88a690: r1 = Null
    //     0x88a690: mov             x1, NULL
    // 0x88a694: branchIfSmi(r0, 0x88a6bc)
    //     0x88a694: tbz             w0, #0, #0x88a6bc
    // 0x88a698: r4 = LoadClassIdInstr(r0)
    //     0x88a698: ldur            x4, [x0, #-1]
    //     0x88a69c: ubfx            x4, x4, #0xc, #0x14
    // 0x88a6a0: sub             x4, x4, #0x3b
    // 0x88a6a4: cmp             x4, #1
    // 0x88a6a8: b.ls            #0x88a6bc
    // 0x88a6ac: r8 = int
    //     0x88a6ac: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a6b0: r3 = Null
    //     0x88a6b0: add             x3, PP, #0x13, lsl #12  ; [pp+0x133f0] Null
    //     0x88a6b4: ldr             x3, [x3, #0x3f0]
    // 0x88a6b8: r0 = int()
    //     0x88a6b8: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a6bc: ldur            x0, [fp, #-8]
    // 0x88a6c0: r1 = LoadInt32Instr(r0)
    //     0x88a6c0: sbfx            x1, x0, #1, #0x1f
    //     0x88a6c4: tbz             w0, #0, #0x88a6cc
    //     0x88a6c8: ldur            x1, [x0, #7]
    // 0x88a6cc: scvtf           d0, x1
    // 0x88a6d0: d1 = 100.000000
    //     0x88a6d0: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a6d4: ldr             d1, [x17, #0xa28]
    // 0x88a6d8: fdiv            d2, d0, d1
    // 0x88a6dc: ldur            x0, [fp, #-0x10]
    // 0x88a6e0: scvtf           d0, x0
    // 0x88a6e4: fmul            d1, d2, d0
    // 0x88a6e8: fcmp            d1, d1
    // 0x88a6ec: b.vs            #0x88de98
    // 0x88a6f0: fcvtms          x2, d1
    // 0x88a6f4: asr             x16, x2, #0x1e
    // 0x88a6f8: cmp             x16, x2, asr #63
    // 0x88a6fc: b.ne            #0x88de98
    // 0x88a700: lsl             x2, x2, #1
    // 0x88a704: r3 = LoadInt32Instr(r2)
    //     0x88a704: sbfx            x3, x2, #1, #0x1f
    //     0x88a708: tbz             w2, #0, #0x88a710
    //     0x88a70c: ldur            x3, [x2, #7]
    // 0x88a710: cmp             x3, #0x64
    // 0x88a714: b.gt            #0x88a720
    // 0x88a718: r0 = 100
    //     0x88a718: movz            x0, #0x64
    // 0x88a71c: b               #0x88a72c
    // 0x88a720: cmp             x3, x0
    // 0x88a724: b.gt            #0x88a72c
    // 0x88a728: mov             x0, x3
    // 0x88a72c: cmp             x1, #0x32
    // 0x88a730: b.gt            #0x88a770
    // 0x88a734: d0 = 0.500000
    //     0x88a734: fmov            d0, #0.50000000
    // 0x88a738: scvtf           d1, x0
    // 0x88a73c: fmul            d2, d1, d0
    // 0x88a740: fcmp            d2, d2
    // 0x88a744: b.vs            #0x88dec4
    // 0x88a748: fcvtms          x0, d2
    // 0x88a74c: asr             x16, x0, #0x1e
    // 0x88a750: cmp             x16, x0, asr #63
    // 0x88a754: b.ne            #0x88dec4
    // 0x88a758: lsl             x0, x0, #1
    // 0x88a75c: r1 = LoadInt32Instr(r0)
    //     0x88a75c: sbfx            x1, x0, #1, #0x1f
    //     0x88a760: tbz             w0, #0, #0x88a768
    //     0x88a764: ldur            x1, [x0, #7]
    // 0x88a768: mov             x0, x1
    // 0x88a76c: b               #0x88db2c
    // 0x88a770: cmp             x1, #0x55
    // 0x88a774: b.gt            #0x88db2c
    // 0x88a778: d2 = 0.750000
    //     0x88a778: fmov            d2, #0.75000000
    // 0x88a77c: scvtf           d0, x0
    // 0x88a780: fmul            d1, d0, d2
    // 0x88a784: fcmp            d1, d1
    // 0x88a788: b.vs            #0x88dee4
    // 0x88a78c: fcvtms          x0, d1
    // 0x88a790: asr             x16, x0, #0x1e
    // 0x88a794: cmp             x16, x0, asr #63
    // 0x88a798: b.ne            #0x88dee4
    // 0x88a79c: lsl             x0, x0, #1
    // 0x88a7a0: r1 = LoadInt32Instr(r0)
    //     0x88a7a0: sbfx            x1, x0, #1, #0x1f
    //     0x88a7a4: tbz             w0, #0, #0x88a7ac
    //     0x88a7a8: ldur            x1, [x0, #7]
    // 0x88a7ac: mov             x0, x1
    // 0x88a7b0: b               #0x88db2c
    // 0x88a7b4: d1 = 100.000000
    //     0x88a7b4: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88a7b8: ldr             d1, [x17, #0xa28]
    // 0x88a7bc: d2 = 0.750000
    //     0x88a7bc: fmov            d2, #0.75000000
    // 0x88a7c0: d0 = 0.500000
    //     0x88a7c0: fmov            d0, #0.50000000
    // 0x88a7c4: r16 = "makiMemoryFund"
    //     0x88a7c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x119b8] "makiMemoryFund"
    //     0x88a7c8: ldr             x16, [x16, #0x9b8]
    // 0x88a7cc: ldur            lr, [fp, #-0x20]
    // 0x88a7d0: stp             lr, x16, [SP]
    // 0x88a7d4: r0 = ==()
    //     0x88a7d4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a7d8: tbnz            w0, #4, #0x88a880
    // 0x88a7dc: r0 = LoadStaticField(0xb54)
    //     0x88a7dc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a7e0: ldr             x0, [x0, #0x16a8]
    // 0x88a7e4: cmp             w0, NULL
    // 0x88a7e8: b.ne            #0x88a7f4
    // 0x88a7ec: r0 = Null
    //     0x88a7ec: mov             x0, NULL
    // 0x88a7f0: b               #0x88a81c
    // 0x88a7f4: r17 = 347
    //     0x88a7f4: movz            x17, #0x15b
    // 0x88a7f8: ldr             w1, [x0, x17]
    // 0x88a7fc: DecompressPointer r1
    //     0x88a7fc: add             x1, x1, HEAP, lsl #32
    // 0x88a800: r0 = LoadClassIdInstr(r1)
    //     0x88a800: ldur            x0, [x1, #-1]
    //     0x88a804: ubfx            x0, x0, #0xc, #0x14
    // 0x88a808: r2 = "makiMemoryFund"
    //     0x88a808: add             x2, PP, #0x11, lsl #12  ; [pp+0x119b8] "makiMemoryFund"
    //     0x88a80c: ldr             x2, [x2, #0x9b8]
    // 0x88a810: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a810: sub             lr, x0, #0xb4
    //     0x88a814: ldr             lr, [x21, lr, lsl #3]
    //     0x88a818: blr             lr
    // 0x88a81c: cmp             w0, NULL
    // 0x88a820: b.ne            #0x88a82c
    // 0x88a824: r3 = 0
    //     0x88a824: movz            x3, #0
    // 0x88a828: b               #0x88a830
    // 0x88a82c: mov             x3, x0
    // 0x88a830: mov             x0, x3
    // 0x88a834: stur            x3, [fp, #-8]
    // 0x88a838: r2 = Null
    //     0x88a838: mov             x2, NULL
    // 0x88a83c: r1 = Null
    //     0x88a83c: mov             x1, NULL
    // 0x88a840: branchIfSmi(r0, 0x88a868)
    //     0x88a840: tbz             w0, #0, #0x88a868
    // 0x88a844: r4 = LoadClassIdInstr(r0)
    //     0x88a844: ldur            x4, [x0, #-1]
    //     0x88a848: ubfx            x4, x4, #0xc, #0x14
    // 0x88a84c: sub             x4, x4, #0x3b
    // 0x88a850: cmp             x4, #1
    // 0x88a854: b.ls            #0x88a868
    // 0x88a858: r8 = int
    //     0x88a858: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a85c: r3 = Null
    //     0x88a85c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13400] Null
    //     0x88a860: ldr             x3, [x3, #0x400]
    // 0x88a864: r0 = int()
    //     0x88a864: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a868: ldur            x0, [fp, #-8]
    // 0x88a86c: r1 = LoadInt32Instr(r0)
    //     0x88a86c: sbfx            x1, x0, #1, #0x1f
    //     0x88a870: tbz             w0, #0, #0x88a878
    //     0x88a874: ldur            x1, [x0, #7]
    // 0x88a878: mov             x0, x1
    // 0x88a87c: b               #0x88db2c
    // 0x88a880: r16 = "makiMemoryKevinFund"
    //     0x88a880: add             x16, PP, #0x13, lsl #12  ; [pp+0x13410] "makiMemoryKevinFund"
    //     0x88a884: ldr             x16, [x16, #0x410]
    // 0x88a888: ldur            lr, [fp, #-0x20]
    // 0x88a88c: stp             lr, x16, [SP]
    // 0x88a890: r0 = ==()
    //     0x88a890: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88a894: tbnz            w0, #4, #0x88aae0
    // 0x88a898: r0 = LoadStaticField(0xb54)
    //     0x88a898: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a89c: ldr             x0, [x0, #0x16a8]
    // 0x88a8a0: cmp             w0, NULL
    // 0x88a8a4: b.ne            #0x88a8b0
    // 0x88a8a8: r0 = Null
    //     0x88a8a8: mov             x0, NULL
    // 0x88a8ac: b               #0x88a8d8
    // 0x88a8b0: r17 = 347
    //     0x88a8b0: movz            x17, #0x15b
    // 0x88a8b4: ldr             w1, [x0, x17]
    // 0x88a8b8: DecompressPointer r1
    //     0x88a8b8: add             x1, x1, HEAP, lsl #32
    // 0x88a8bc: r0 = LoadClassIdInstr(r1)
    //     0x88a8bc: ldur            x0, [x1, #-1]
    //     0x88a8c0: ubfx            x0, x0, #0xc, #0x14
    // 0x88a8c4: r2 = "makiMaxCompletion"
    //     0x88a8c4: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x88a8c8: ldr             x2, [x2, #0x8b8]
    // 0x88a8cc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a8cc: sub             lr, x0, #0xb4
    //     0x88a8d0: ldr             lr, [x21, lr, lsl #3]
    //     0x88a8d4: blr             lr
    // 0x88a8d8: cmp             w0, NULL
    // 0x88a8dc: b.ne            #0x88a8e8
    // 0x88a8e0: r3 = 0
    //     0x88a8e0: movz            x3, #0
    // 0x88a8e4: b               #0x88a8ec
    // 0x88a8e8: mov             x3, x0
    // 0x88a8ec: mov             x0, x3
    // 0x88a8f0: stur            x3, [fp, #-8]
    // 0x88a8f4: r2 = Null
    //     0x88a8f4: mov             x2, NULL
    // 0x88a8f8: r1 = Null
    //     0x88a8f8: mov             x1, NULL
    // 0x88a8fc: branchIfSmi(r0, 0x88a924)
    //     0x88a8fc: tbz             w0, #0, #0x88a924
    // 0x88a900: r4 = LoadClassIdInstr(r0)
    //     0x88a900: ldur            x4, [x0, #-1]
    //     0x88a904: ubfx            x4, x4, #0xc, #0x14
    // 0x88a908: sub             x4, x4, #0x3b
    // 0x88a90c: cmp             x4, #1
    // 0x88a910: b.ls            #0x88a924
    // 0x88a914: r8 = int
    //     0x88a914: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88a918: r3 = Null
    //     0x88a918: add             x3, PP, #0x13, lsl #12  ; [pp+0x13418] Null
    //     0x88a91c: ldr             x3, [x3, #0x418]
    // 0x88a920: r0 = int()
    //     0x88a920: bl              #0x1524294  ; IsType_int_Stub
    // 0x88a924: r0 = LoadStaticField(0xb54)
    //     0x88a924: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a928: ldr             x0, [x0, #0x16a8]
    // 0x88a92c: cmp             w0, NULL
    // 0x88a930: b.ne            #0x88a93c
    // 0x88a934: r0 = Null
    //     0x88a934: mov             x0, NULL
    // 0x88a938: b               #0x88a964
    // 0x88a93c: r17 = 331
    //     0x88a93c: movz            x17, #0x14b
    // 0x88a940: ldr             w1, [x0, x17]
    // 0x88a944: DecompressPointer r1
    //     0x88a944: add             x1, x1, HEAP, lsl #32
    // 0x88a948: r0 = LoadClassIdInstr(r1)
    //     0x88a948: ldur            x0, [x1, #-1]
    //     0x88a94c: ubfx            x0, x0, #0xc, #0x14
    // 0x88a950: r2 = "memory"
    //     0x88a950: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x88a954: ldr             x2, [x2, #0xa18]
    // 0x88a958: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a958: sub             lr, x0, #0xb4
    //     0x88a95c: ldr             lr, [x21, lr, lsl #3]
    //     0x88a960: blr             lr
    // 0x88a964: cmp             w0, NULL
    // 0x88a968: b.ne            #0x88a980
    // 0x88a96c: r1 = Null
    //     0x88a96c: mov             x1, NULL
    // 0x88a970: r2 = 0
    //     0x88a970: movz            x2, #0
    // 0x88a974: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x88a974: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x88a978: mov             x3, x0
    // 0x88a97c: b               #0x88a984
    // 0x88a980: mov             x3, x0
    // 0x88a984: mov             x0, x3
    // 0x88a988: stur            x3, [fp, #-0x18]
    // 0x88a98c: r2 = Null
    //     0x88a98c: mov             x2, NULL
    // 0x88a990: r1 = Null
    //     0x88a990: mov             x1, NULL
    // 0x88a994: r4 = 59
    //     0x88a994: movz            x4, #0x3b
    // 0x88a998: branchIfSmi(r0, 0x88a9a4)
    //     0x88a998: tbz             w0, #0, #0x88a9a4
    // 0x88a99c: r4 = LoadClassIdInstr(r0)
    //     0x88a99c: ldur            x4, [x0, #-1]
    //     0x88a9a0: ubfx            x4, x4, #0xc, #0x14
    // 0x88a9a4: cmp             x4, #0xcdb
    // 0x88a9a8: b.eq            #0x88a9c0
    // 0x88a9ac: r8 = Timestamp
    //     0x88a9ac: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x88a9b0: ldr             x8, [x8, #0xa30]
    // 0x88a9b4: r3 = Null
    //     0x88a9b4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13428] Null
    //     0x88a9b8: ldr             x3, [x3, #0x428]
    // 0x88a9bc: r0 = Timestamp()
    //     0x88a9bc: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x88a9c0: r0 = LoadStaticField(0xb54)
    //     0x88a9c0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88a9c4: ldr             x0, [x0, #0x16a8]
    // 0x88a9c8: cmp             w0, NULL
    // 0x88a9cc: b.ne            #0x88a9d8
    // 0x88a9d0: r0 = Null
    //     0x88a9d0: mov             x0, NULL
    // 0x88a9d4: b               #0x88aa00
    // 0x88a9d8: r17 = 347
    //     0x88a9d8: movz            x17, #0x15b
    // 0x88a9dc: ldr             w1, [x0, x17]
    // 0x88a9e0: DecompressPointer r1
    //     0x88a9e0: add             x1, x1, HEAP, lsl #32
    // 0x88a9e4: r0 = LoadClassIdInstr(r1)
    //     0x88a9e4: ldur            x0, [x1, #-1]
    //     0x88a9e8: ubfx            x0, x0, #0xc, #0x14
    // 0x88a9ec: r2 = "memoryTimerReduce"
    //     0x88a9ec: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x88a9f0: ldr             x2, [x2, #0xa30]
    // 0x88a9f4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88a9f4: sub             lr, x0, #0xb4
    //     0x88a9f8: ldr             lr, [x21, lr, lsl #3]
    //     0x88a9fc: blr             lr
    // 0x88aa00: cmp             w0, NULL
    // 0x88aa04: b.ne            #0x88aa10
    // 0x88aa08: r3 = 0
    //     0x88aa08: movz            x3, #0
    // 0x88aa0c: b               #0x88aa14
    // 0x88aa10: mov             x3, x0
    // 0x88aa14: mov             x0, x3
    // 0x88aa18: stur            x3, [fp, #-0x30]
    // 0x88aa1c: r2 = Null
    //     0x88aa1c: mov             x2, NULL
    // 0x88aa20: r1 = Null
    //     0x88aa20: mov             x1, NULL
    // 0x88aa24: branchIfSmi(r0, 0x88aa4c)
    //     0x88aa24: tbz             w0, #0, #0x88aa4c
    // 0x88aa28: r4 = LoadClassIdInstr(r0)
    //     0x88aa28: ldur            x4, [x0, #-1]
    //     0x88aa2c: ubfx            x4, x4, #0xc, #0x14
    // 0x88aa30: sub             x4, x4, #0x3b
    // 0x88aa34: cmp             x4, #1
    // 0x88aa38: b.ls            #0x88aa4c
    // 0x88aa3c: r8 = int
    //     0x88aa3c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88aa40: r3 = Null
    //     0x88aa40: add             x3, PP, #0x13, lsl #12  ; [pp+0x13438] Null
    //     0x88aa44: ldr             x3, [x3, #0x438]
    // 0x88aa48: r0 = int()
    //     0x88aa48: bl              #0x1524294  ; IsType_int_Stub
    // 0x88aa4c: ldur            x0, [fp, #-0x30]
    // 0x88aa50: r1 = LoadInt32Instr(r0)
    //     0x88aa50: sbfx            x1, x0, #1, #0x1f
    //     0x88aa54: tbz             w0, #0, #0x88aa5c
    //     0x88aa58: ldur            x1, [x0, #7]
    // 0x88aa5c: lsl             x0, x1, #1
    // 0x88aa60: r1 = 30
    //     0x88aa60: movz            x1, #0x1e
    // 0x88aa64: sub             x2, x1, x0
    // 0x88aa68: stur            x2, [fp, #-0x10]
    // 0x88aa6c: r0 = getTrueDateTime()
    //     0x88aa6c: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x88aa70: ldur            x1, [fp, #-0x18]
    // 0x88aa74: stur            x0, [fp, #-0x18]
    // 0x88aa78: r0 = toDate()
    //     0x88aa78: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x88aa7c: ldur            x1, [fp, #-0x18]
    // 0x88aa80: mov             x2, x0
    // 0x88aa84: r0 = difference()
    //     0x88aa84: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x88aa88: LoadField: r1 = r0->field_7
    //     0x88aa88: ldur            x1, [x0, #7]
    // 0x88aa8c: r0 = 60000000
    //     0x88aa8c: movz            x0, #0x8700
    //     0x88aa90: movk            x0, #0x393, lsl #16
    // 0x88aa94: sdiv            x2, x1, x0
    // 0x88aa98: ldur            x0, [fp, #-0x10]
    // 0x88aa9c: sub             x1, x0, x2
    // 0x88aaa0: cmp             x1, #0xa
    // 0x88aaa4: b.le            #0x88aab0
    // 0x88aaa8: r0 = 5000
    //     0x88aaa8: movz            x0, #0x1388
    // 0x88aaac: b               #0x88db2c
    // 0x88aab0: cmp             x1, #0xa
    // 0x88aab4: b.gt            #0x88aad8
    // 0x88aab8: ldur            x0, [fp, #-8]
    // 0x88aabc: r1 = LoadInt32Instr(r0)
    //     0x88aabc: sbfx            x1, x0, #1, #0x1f
    //     0x88aac0: tbz             w0, #0, #0x88aac8
    //     0x88aac4: ldur            x1, [x0, #7]
    // 0x88aac8: cmp             x1, #0x46
    // 0x88aacc: b.ge            #0x88aad8
    // 0x88aad0: r0 = 10000
    //     0x88aad0: movz            x0, #0x2710
    // 0x88aad4: b               #0x88db2c
    // 0x88aad8: r0 = 15000
    //     0x88aad8: movz            x0, #0x3a98
    // 0x88aadc: b               #0x88db2c
    // 0x88aae0: r1 = 30
    //     0x88aae0: movz            x1, #0x1e
    // 0x88aae4: r0 = 60000000
    //     0x88aae4: movz            x0, #0x8700
    //     0x88aae8: movk            x0, #0x393, lsl #16
    // 0x88aaec: r16 = "makiMemoryKevinCompletion"
    //     0x88aaec: add             x16, PP, #0x13, lsl #12  ; [pp+0x13448] "makiMemoryKevinCompletion"
    //     0x88aaf0: ldr             x16, [x16, #0x448]
    // 0x88aaf4: ldur            lr, [fp, #-0x20]
    // 0x88aaf8: stp             lr, x16, [SP]
    // 0x88aafc: r0 = ==()
    //     0x88aafc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88ab00: tbnz            w0, #4, #0x88ad2c
    // 0x88ab04: r0 = LoadStaticField(0xb54)
    //     0x88ab04: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ab08: ldr             x0, [x0, #0x16a8]
    // 0x88ab0c: cmp             w0, NULL
    // 0x88ab10: b.ne            #0x88ab1c
    // 0x88ab14: r0 = Null
    //     0x88ab14: mov             x0, NULL
    // 0x88ab18: b               #0x88ab44
    // 0x88ab1c: r17 = 347
    //     0x88ab1c: movz            x17, #0x15b
    // 0x88ab20: ldr             w1, [x0, x17]
    // 0x88ab24: DecompressPointer r1
    //     0x88ab24: add             x1, x1, HEAP, lsl #32
    // 0x88ab28: r0 = LoadClassIdInstr(r1)
    //     0x88ab28: ldur            x0, [x1, #-1]
    //     0x88ab2c: ubfx            x0, x0, #0xc, #0x14
    // 0x88ab30: r2 = "makiMaxCompletion"
    //     0x88ab30: add             x2, PP, #0x11, lsl #12  ; [pp+0x118b8] "makiMaxCompletion"
    //     0x88ab34: ldr             x2, [x2, #0x8b8]
    // 0x88ab38: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ab38: sub             lr, x0, #0xb4
    //     0x88ab3c: ldr             lr, [x21, lr, lsl #3]
    //     0x88ab40: blr             lr
    // 0x88ab44: cmp             w0, NULL
    // 0x88ab48: b.ne            #0x88ab50
    // 0x88ab4c: r0 = 0
    //     0x88ab4c: movz            x0, #0
    // 0x88ab50: r2 = Null
    //     0x88ab50: mov             x2, NULL
    // 0x88ab54: r1 = Null
    //     0x88ab54: mov             x1, NULL
    // 0x88ab58: branchIfSmi(r0, 0x88ab80)
    //     0x88ab58: tbz             w0, #0, #0x88ab80
    // 0x88ab5c: r4 = LoadClassIdInstr(r0)
    //     0x88ab5c: ldur            x4, [x0, #-1]
    //     0x88ab60: ubfx            x4, x4, #0xc, #0x14
    // 0x88ab64: sub             x4, x4, #0x3b
    // 0x88ab68: cmp             x4, #1
    // 0x88ab6c: b.ls            #0x88ab80
    // 0x88ab70: r8 = int
    //     0x88ab70: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88ab74: r3 = Null
    //     0x88ab74: add             x3, PP, #0x13, lsl #12  ; [pp+0x13450] Null
    //     0x88ab78: ldr             x3, [x3, #0x450]
    // 0x88ab7c: r0 = int()
    //     0x88ab7c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88ab80: r0 = LoadStaticField(0xb54)
    //     0x88ab80: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ab84: ldr             x0, [x0, #0x16a8]
    // 0x88ab88: cmp             w0, NULL
    // 0x88ab8c: b.ne            #0x88ab98
    // 0x88ab90: r0 = Null
    //     0x88ab90: mov             x0, NULL
    // 0x88ab94: b               #0x88abc0
    // 0x88ab98: r17 = 331
    //     0x88ab98: movz            x17, #0x14b
    // 0x88ab9c: ldr             w1, [x0, x17]
    // 0x88aba0: DecompressPointer r1
    //     0x88aba0: add             x1, x1, HEAP, lsl #32
    // 0x88aba4: r0 = LoadClassIdInstr(r1)
    //     0x88aba4: ldur            x0, [x1, #-1]
    //     0x88aba8: ubfx            x0, x0, #0xc, #0x14
    // 0x88abac: r2 = "memory"
    //     0x88abac: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a18] "memory"
    //     0x88abb0: ldr             x2, [x2, #0xa18]
    // 0x88abb4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88abb4: sub             lr, x0, #0xb4
    //     0x88abb8: ldr             lr, [x21, lr, lsl #3]
    //     0x88abbc: blr             lr
    // 0x88abc0: cmp             w0, NULL
    // 0x88abc4: b.ne            #0x88abdc
    // 0x88abc8: r1 = Null
    //     0x88abc8: mov             x1, NULL
    // 0x88abcc: r2 = 0
    //     0x88abcc: movz            x2, #0
    // 0x88abd0: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x88abd0: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x88abd4: mov             x3, x0
    // 0x88abd8: b               #0x88abe0
    // 0x88abdc: mov             x3, x0
    // 0x88abe0: mov             x0, x3
    // 0x88abe4: stur            x3, [fp, #-8]
    // 0x88abe8: r2 = Null
    //     0x88abe8: mov             x2, NULL
    // 0x88abec: r1 = Null
    //     0x88abec: mov             x1, NULL
    // 0x88abf0: r4 = 59
    //     0x88abf0: movz            x4, #0x3b
    // 0x88abf4: branchIfSmi(r0, 0x88ac00)
    //     0x88abf4: tbz             w0, #0, #0x88ac00
    // 0x88abf8: r4 = LoadClassIdInstr(r0)
    //     0x88abf8: ldur            x4, [x0, #-1]
    //     0x88abfc: ubfx            x4, x4, #0xc, #0x14
    // 0x88ac00: cmp             x4, #0xcdb
    // 0x88ac04: b.eq            #0x88ac1c
    // 0x88ac08: r8 = Timestamp
    //     0x88ac08: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x88ac0c: ldr             x8, [x8, #0xa30]
    // 0x88ac10: r3 = Null
    //     0x88ac10: add             x3, PP, #0x13, lsl #12  ; [pp+0x13460] Null
    //     0x88ac14: ldr             x3, [x3, #0x460]
    // 0x88ac18: r0 = Timestamp()
    //     0x88ac18: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x88ac1c: r0 = LoadStaticField(0xb54)
    //     0x88ac1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ac20: ldr             x0, [x0, #0x16a8]
    // 0x88ac24: cmp             w0, NULL
    // 0x88ac28: b.ne            #0x88ac34
    // 0x88ac2c: r0 = Null
    //     0x88ac2c: mov             x0, NULL
    // 0x88ac30: b               #0x88ac5c
    // 0x88ac34: r17 = 347
    //     0x88ac34: movz            x17, #0x15b
    // 0x88ac38: ldr             w1, [x0, x17]
    // 0x88ac3c: DecompressPointer r1
    //     0x88ac3c: add             x1, x1, HEAP, lsl #32
    // 0x88ac40: r0 = LoadClassIdInstr(r1)
    //     0x88ac40: ldur            x0, [x1, #-1]
    //     0x88ac44: ubfx            x0, x0, #0xc, #0x14
    // 0x88ac48: r2 = "memoryTimerReduce"
    //     0x88ac48: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x88ac4c: ldr             x2, [x2, #0xa30]
    // 0x88ac50: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ac50: sub             lr, x0, #0xb4
    //     0x88ac54: ldr             lr, [x21, lr, lsl #3]
    //     0x88ac58: blr             lr
    // 0x88ac5c: cmp             w0, NULL
    // 0x88ac60: b.ne            #0x88ac6c
    // 0x88ac64: r3 = 0
    //     0x88ac64: movz            x3, #0
    // 0x88ac68: b               #0x88ac70
    // 0x88ac6c: mov             x3, x0
    // 0x88ac70: mov             x0, x3
    // 0x88ac74: stur            x3, [fp, #-0x18]
    // 0x88ac78: r2 = Null
    //     0x88ac78: mov             x2, NULL
    // 0x88ac7c: r1 = Null
    //     0x88ac7c: mov             x1, NULL
    // 0x88ac80: branchIfSmi(r0, 0x88aca8)
    //     0x88ac80: tbz             w0, #0, #0x88aca8
    // 0x88ac84: r4 = LoadClassIdInstr(r0)
    //     0x88ac84: ldur            x4, [x0, #-1]
    //     0x88ac88: ubfx            x4, x4, #0xc, #0x14
    // 0x88ac8c: sub             x4, x4, #0x3b
    // 0x88ac90: cmp             x4, #1
    // 0x88ac94: b.ls            #0x88aca8
    // 0x88ac98: r8 = int
    //     0x88ac98: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88ac9c: r3 = Null
    //     0x88ac9c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13470] Null
    //     0x88aca0: ldr             x3, [x3, #0x470]
    // 0x88aca4: r0 = int()
    //     0x88aca4: bl              #0x1524294  ; IsType_int_Stub
    // 0x88aca8: ldur            x0, [fp, #-0x18]
    // 0x88acac: r1 = LoadInt32Instr(r0)
    //     0x88acac: sbfx            x1, x0, #1, #0x1f
    //     0x88acb0: tbz             w0, #0, #0x88acb8
    //     0x88acb4: ldur            x1, [x0, #7]
    // 0x88acb8: lsl             x0, x1, #1
    // 0x88acbc: r1 = 30
    //     0x88acbc: movz            x1, #0x1e
    // 0x88acc0: sub             x2, x1, x0
    // 0x88acc4: stur            x2, [fp, #-0x10]
    // 0x88acc8: r0 = getTrueDateTime()
    //     0x88acc8: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x88accc: ldur            x1, [fp, #-8]
    // 0x88acd0: stur            x0, [fp, #-8]
    // 0x88acd4: r0 = toDate()
    //     0x88acd4: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x88acd8: ldur            x1, [fp, #-8]
    // 0x88acdc: mov             x2, x0
    // 0x88ace0: r0 = difference()
    //     0x88ace0: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x88ace4: LoadField: r1 = r0->field_7
    //     0x88ace4: ldur            x1, [x0, #7]
    // 0x88ace8: r0 = 60000000
    //     0x88ace8: movz            x0, #0x8700
    //     0x88acec: movk            x0, #0x393, lsl #16
    // 0x88acf0: sdiv            x2, x1, x0
    // 0x88acf4: ldur            x0, [fp, #-0x10]
    // 0x88acf8: sub             x1, x0, x2
    // 0x88acfc: cmp             x1, #0xa
    // 0x88ad00: r16 = true
    //     0x88ad00: add             x16, NULL, #0x20  ; true
    // 0x88ad04: r17 = false
    //     0x88ad04: add             x17, NULL, #0x30  ; false
    // 0x88ad08: csel            x0, x16, x17, gt
    // 0x88ad0c: tst             x0, #0x10
    // 0x88ad10: cset            x1, ne
    // 0x88ad14: sub             x1, x1, #1
    // 0x88ad18: r16 = -6
    //     0x88ad18: movn            x16, #0x5
    // 0x88ad1c: and             x1, x1, x16
    // 0x88ad20: add             x1, x1, #0xa
    // 0x88ad24: r0 = LoadInt32Instr(r1)
    //     0x88ad24: sbfx            x0, x1, #1, #0x1f
    // 0x88ad28: b               #0x88db2c
    // 0x88ad2c: r16 = "nazreeMaxCompletion"
    //     0x88ad2c: add             x16, PP, #0x11, lsl #12  ; [pp+0x11a00] "nazreeMaxCompletion"
    //     0x88ad30: ldr             x16, [x16, #0xa00]
    // 0x88ad34: ldur            lr, [fp, #-0x20]
    // 0x88ad38: stp             lr, x16, [SP]
    // 0x88ad3c: r0 = ==()
    //     0x88ad3c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88ad40: tbnz            w0, #4, #0x88ae98
    // 0x88ad44: r0 = LoadStaticField(0xb54)
    //     0x88ad44: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ad48: ldr             x0, [x0, #0x16a8]
    // 0x88ad4c: cmp             w0, NULL
    // 0x88ad50: b.ne            #0x88ad5c
    // 0x88ad54: r0 = Null
    //     0x88ad54: mov             x0, NULL
    // 0x88ad58: b               #0x88ad84
    // 0x88ad5c: r17 = 347
    //     0x88ad5c: movz            x17, #0x15b
    // 0x88ad60: ldr             w1, [x0, x17]
    // 0x88ad64: DecompressPointer r1
    //     0x88ad64: add             x1, x1, HEAP, lsl #32
    // 0x88ad68: r0 = LoadClassIdInstr(r1)
    //     0x88ad68: ldur            x0, [x1, #-1]
    //     0x88ad6c: ubfx            x0, x0, #0xc, #0x14
    // 0x88ad70: r2 = "nazreeMaxCompletion"
    //     0x88ad70: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a00] "nazreeMaxCompletion"
    //     0x88ad74: ldr             x2, [x2, #0xa00]
    // 0x88ad78: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ad78: sub             lr, x0, #0xb4
    //     0x88ad7c: ldr             lr, [x21, lr, lsl #3]
    //     0x88ad80: blr             lr
    // 0x88ad84: cmp             w0, NULL
    // 0x88ad88: b.ne            #0x88ad94
    // 0x88ad8c: r3 = 0
    //     0x88ad8c: movz            x3, #0
    // 0x88ad90: b               #0x88ad98
    // 0x88ad94: mov             x3, x0
    // 0x88ad98: mov             x0, x3
    // 0x88ad9c: stur            x3, [fp, #-8]
    // 0x88ada0: r2 = Null
    //     0x88ada0: mov             x2, NULL
    // 0x88ada4: r1 = Null
    //     0x88ada4: mov             x1, NULL
    // 0x88ada8: branchIfSmi(r0, 0x88add0)
    //     0x88ada8: tbz             w0, #0, #0x88add0
    // 0x88adac: r4 = LoadClassIdInstr(r0)
    //     0x88adac: ldur            x4, [x0, #-1]
    //     0x88adb0: ubfx            x4, x4, #0xc, #0x14
    // 0x88adb4: sub             x4, x4, #0x3b
    // 0x88adb8: cmp             x4, #1
    // 0x88adbc: b.ls            #0x88add0
    // 0x88adc0: r8 = int
    //     0x88adc0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88adc4: r3 = Null
    //     0x88adc4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13480] Null
    //     0x88adc8: ldr             x3, [x3, #0x480]
    // 0x88adcc: r0 = int()
    //     0x88adcc: bl              #0x1524294  ; IsType_int_Stub
    // 0x88add0: r0 = LoadStaticField(0xb54)
    //     0x88add0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88add4: ldr             x0, [x0, #0x16a8]
    // 0x88add8: cmp             w0, NULL
    // 0x88addc: b.ne            #0x88ade8
    // 0x88ade0: r0 = Null
    //     0x88ade0: mov             x0, NULL
    // 0x88ade4: b               #0x88ae10
    // 0x88ade8: r17 = 347
    //     0x88ade8: movz            x17, #0x15b
    // 0x88adec: ldr             w1, [x0, x17]
    // 0x88adf0: DecompressPointer r1
    //     0x88adf0: add             x1, x1, HEAP, lsl #32
    // 0x88adf4: r0 = LoadClassIdInstr(r1)
    //     0x88adf4: ldur            x0, [x1, #-1]
    //     0x88adf8: ubfx            x0, x0, #0xc, #0x14
    // 0x88adfc: r2 = "nazreeCompletion"
    //     0x88adfc: add             x2, PP, #0x13, lsl #12  ; [pp+0x13490] "nazreeCompletion"
    //     0x88ae00: ldr             x2, [x2, #0x490]
    // 0x88ae04: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ae04: sub             lr, x0, #0xb4
    //     0x88ae08: ldr             lr, [x21, lr, lsl #3]
    //     0x88ae0c: blr             lr
    // 0x88ae10: cmp             w0, NULL
    // 0x88ae14: b.ne            #0x88ae20
    // 0x88ae18: r4 = 0
    //     0x88ae18: movz            x4, #0
    // 0x88ae1c: b               #0x88ae24
    // 0x88ae20: mov             x4, x0
    // 0x88ae24: ldur            x3, [fp, #-8]
    // 0x88ae28: mov             x0, x4
    // 0x88ae2c: stur            x4, [fp, #-0x18]
    // 0x88ae30: r2 = Null
    //     0x88ae30: mov             x2, NULL
    // 0x88ae34: r1 = Null
    //     0x88ae34: mov             x1, NULL
    // 0x88ae38: branchIfSmi(r0, 0x88ae60)
    //     0x88ae38: tbz             w0, #0, #0x88ae60
    // 0x88ae3c: r4 = LoadClassIdInstr(r0)
    //     0x88ae3c: ldur            x4, [x0, #-1]
    //     0x88ae40: ubfx            x4, x4, #0xc, #0x14
    // 0x88ae44: sub             x4, x4, #0x3b
    // 0x88ae48: cmp             x4, #1
    // 0x88ae4c: b.ls            #0x88ae60
    // 0x88ae50: r8 = int
    //     0x88ae50: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88ae54: r3 = Null
    //     0x88ae54: add             x3, PP, #0x13, lsl #12  ; [pp+0x13498] Null
    //     0x88ae58: ldr             x3, [x3, #0x498]
    // 0x88ae5c: r0 = int()
    //     0x88ae5c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88ae60: ldur            x0, [fp, #-8]
    // 0x88ae64: r1 = LoadInt32Instr(r0)
    //     0x88ae64: sbfx            x1, x0, #1, #0x1f
    //     0x88ae68: tbz             w0, #0, #0x88ae70
    //     0x88ae6c: ldur            x1, [x0, #7]
    // 0x88ae70: ldur            x0, [fp, #-0x18]
    // 0x88ae74: r2 = LoadInt32Instr(r0)
    //     0x88ae74: sbfx            x2, x0, #1, #0x1f
    //     0x88ae78: tbz             w0, #0, #0x88ae80
    //     0x88ae7c: ldur            x2, [x0, #7]
    // 0x88ae80: cmp             x1, x2
    // 0x88ae84: b.lt            #0x88ae90
    // 0x88ae88: mov             x0, x1
    // 0x88ae8c: b               #0x88db2c
    // 0x88ae90: mov             x0, x2
    // 0x88ae94: b               #0x88db2c
    // 0x88ae98: r16 = "nazreeCompletion"
    //     0x88ae98: add             x16, PP, #0x13, lsl #12  ; [pp+0x13490] "nazreeCompletion"
    //     0x88ae9c: ldr             x16, [x16, #0x490]
    // 0x88aea0: ldur            lr, [fp, #-0x20]
    // 0x88aea4: stp             lr, x16, [SP]
    // 0x88aea8: r0 = ==()
    //     0x88aea8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88aeac: tbnz            w0, #4, #0x88af54
    // 0x88aeb0: r0 = LoadStaticField(0xb54)
    //     0x88aeb0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88aeb4: ldr             x0, [x0, #0x16a8]
    // 0x88aeb8: cmp             w0, NULL
    // 0x88aebc: b.ne            #0x88aec8
    // 0x88aec0: r0 = Null
    //     0x88aec0: mov             x0, NULL
    // 0x88aec4: b               #0x88aef0
    // 0x88aec8: r17 = 347
    //     0x88aec8: movz            x17, #0x15b
    // 0x88aecc: ldr             w1, [x0, x17]
    // 0x88aed0: DecompressPointer r1
    //     0x88aed0: add             x1, x1, HEAP, lsl #32
    // 0x88aed4: r0 = LoadClassIdInstr(r1)
    //     0x88aed4: ldur            x0, [x1, #-1]
    //     0x88aed8: ubfx            x0, x0, #0xc, #0x14
    // 0x88aedc: r2 = "nazreeCompletion"
    //     0x88aedc: add             x2, PP, #0x13, lsl #12  ; [pp+0x13490] "nazreeCompletion"
    //     0x88aee0: ldr             x2, [x2, #0x490]
    // 0x88aee4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88aee4: sub             lr, x0, #0xb4
    //     0x88aee8: ldr             lr, [x21, lr, lsl #3]
    //     0x88aeec: blr             lr
    // 0x88aef0: cmp             w0, NULL
    // 0x88aef4: b.ne            #0x88af00
    // 0x88aef8: r3 = 0
    //     0x88aef8: movz            x3, #0
    // 0x88aefc: b               #0x88af04
    // 0x88af00: mov             x3, x0
    // 0x88af04: mov             x0, x3
    // 0x88af08: stur            x3, [fp, #-8]
    // 0x88af0c: r2 = Null
    //     0x88af0c: mov             x2, NULL
    // 0x88af10: r1 = Null
    //     0x88af10: mov             x1, NULL
    // 0x88af14: branchIfSmi(r0, 0x88af3c)
    //     0x88af14: tbz             w0, #0, #0x88af3c
    // 0x88af18: r4 = LoadClassIdInstr(r0)
    //     0x88af18: ldur            x4, [x0, #-1]
    //     0x88af1c: ubfx            x4, x4, #0xc, #0x14
    // 0x88af20: sub             x4, x4, #0x3b
    // 0x88af24: cmp             x4, #1
    // 0x88af28: b.ls            #0x88af3c
    // 0x88af2c: r8 = int
    //     0x88af2c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88af30: r3 = Null
    //     0x88af30: add             x3, PP, #0x13, lsl #12  ; [pp+0x134a8] Null
    //     0x88af34: ldr             x3, [x3, #0x4a8]
    // 0x88af38: r0 = int()
    //     0x88af38: bl              #0x1524294  ; IsType_int_Stub
    // 0x88af3c: ldur            x0, [fp, #-8]
    // 0x88af40: r1 = LoadInt32Instr(r0)
    //     0x88af40: sbfx            x1, x0, #1, #0x1f
    //     0x88af44: tbz             w0, #0, #0x88af4c
    //     0x88af48: ldur            x1, [x0, #7]
    // 0x88af4c: mov             x0, x1
    // 0x88af50: b               #0x88db2c
    // 0x88af54: r16 = "lootTokenNazree"
    //     0x88af54: add             x16, PP, #0x13, lsl #12  ; [pp+0x134b8] "lootTokenNazree"
    //     0x88af58: ldr             x16, [x16, #0x4b8]
    // 0x88af5c: ldur            lr, [fp, #-0x20]
    // 0x88af60: stp             lr, x16, [SP]
    // 0x88af64: r0 = ==()
    //     0x88af64: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88af68: tbnz            w0, #4, #0x88b108
    // 0x88af6c: r1 = "nazree"
    //     0x88af6c: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc68] "nazree"
    //     0x88af70: ldr             x1, [x1, #0xc68]
    // 0x88af74: r0 = getMemory()
    //     0x88af74: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88af78: LoadField: r3 = r0->field_2b
    //     0x88af78: ldur            x3, [x0, #0x2b]
    // 0x88af7c: stur            x3, [fp, #-0x10]
    // 0x88af80: r0 = LoadStaticField(0xb54)
    //     0x88af80: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88af84: ldr             x0, [x0, #0x16a8]
    // 0x88af88: cmp             w0, NULL
    // 0x88af8c: b.ne            #0x88af98
    // 0x88af90: r0 = Null
    //     0x88af90: mov             x0, NULL
    // 0x88af94: b               #0x88afc0
    // 0x88af98: r17 = 347
    //     0x88af98: movz            x17, #0x15b
    // 0x88af9c: ldr             w1, [x0, x17]
    // 0x88afa0: DecompressPointer r1
    //     0x88afa0: add             x1, x1, HEAP, lsl #32
    // 0x88afa4: r0 = LoadClassIdInstr(r1)
    //     0x88afa4: ldur            x0, [x1, #-1]
    //     0x88afa8: ubfx            x0, x0, #0xc, #0x14
    // 0x88afac: r2 = "nazreeCompletion"
    //     0x88afac: add             x2, PP, #0x13, lsl #12  ; [pp+0x13490] "nazreeCompletion"
    //     0x88afb0: ldr             x2, [x2, #0x490]
    // 0x88afb4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88afb4: sub             lr, x0, #0xb4
    //     0x88afb8: ldr             lr, [x21, lr, lsl #3]
    //     0x88afbc: blr             lr
    // 0x88afc0: cmp             w0, NULL
    // 0x88afc4: b.ne            #0x88afd0
    // 0x88afc8: r4 = 0
    //     0x88afc8: movz            x4, #0
    // 0x88afcc: b               #0x88afd4
    // 0x88afd0: mov             x4, x0
    // 0x88afd4: ldur            x3, [fp, #-0x10]
    // 0x88afd8: mov             x0, x4
    // 0x88afdc: stur            x4, [fp, #-8]
    // 0x88afe0: r2 = Null
    //     0x88afe0: mov             x2, NULL
    // 0x88afe4: r1 = Null
    //     0x88afe4: mov             x1, NULL
    // 0x88afe8: branchIfSmi(r0, 0x88b010)
    //     0x88afe8: tbz             w0, #0, #0x88b010
    // 0x88afec: r4 = LoadClassIdInstr(r0)
    //     0x88afec: ldur            x4, [x0, #-1]
    //     0x88aff0: ubfx            x4, x4, #0xc, #0x14
    // 0x88aff4: sub             x4, x4, #0x3b
    // 0x88aff8: cmp             x4, #1
    // 0x88affc: b.ls            #0x88b010
    // 0x88b000: r8 = int
    //     0x88b000: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b004: r3 = Null
    //     0x88b004: add             x3, PP, #0x13, lsl #12  ; [pp+0x134c0] Null
    //     0x88b008: ldr             x3, [x3, #0x4c0]
    // 0x88b00c: r0 = int()
    //     0x88b00c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b010: ldur            x0, [fp, #-8]
    // 0x88b014: r1 = LoadInt32Instr(r0)
    //     0x88b014: sbfx            x1, x0, #1, #0x1f
    //     0x88b018: tbz             w0, #0, #0x88b020
    //     0x88b01c: ldur            x1, [x0, #7]
    // 0x88b020: scvtf           d0, x1
    // 0x88b024: d1 = 100.000000
    //     0x88b024: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b028: ldr             d1, [x17, #0xa28]
    // 0x88b02c: fdiv            d2, d0, d1
    // 0x88b030: ldur            x0, [fp, #-0x10]
    // 0x88b034: scvtf           d0, x0
    // 0x88b038: fmul            d1, d2, d0
    // 0x88b03c: fcmp            d1, d1
    // 0x88b040: b.vs            #0x88df04
    // 0x88b044: fcvtms          x2, d1
    // 0x88b048: asr             x16, x2, #0x1e
    // 0x88b04c: cmp             x16, x2, asr #63
    // 0x88b050: b.ne            #0x88df04
    // 0x88b054: lsl             x2, x2, #1
    // 0x88b058: r3 = LoadInt32Instr(r2)
    //     0x88b058: sbfx            x3, x2, #1, #0x1f
    //     0x88b05c: tbz             w2, #0, #0x88b064
    //     0x88b060: ldur            x3, [x2, #7]
    // 0x88b064: cmp             x3, x0
    // 0x88b068: b.gt            #0x88b080
    // 0x88b06c: cmp             x3, #0
    // 0x88b070: b.gt            #0x88b07c
    // 0x88b074: r0 = 1
    //     0x88b074: movz            x0, #0x1
    // 0x88b078: b               #0x88b080
    // 0x88b07c: mov             x0, x3
    // 0x88b080: cmp             x1, #0x32
    // 0x88b084: b.gt            #0x88b0c4
    // 0x88b088: d0 = 0.500000
    //     0x88b088: fmov            d0, #0.50000000
    // 0x88b08c: scvtf           d1, x0
    // 0x88b090: fmul            d2, d1, d0
    // 0x88b094: fcmp            d2, d2
    // 0x88b098: b.vs            #0x88df30
    // 0x88b09c: fcvtms          x0, d2
    // 0x88b0a0: asr             x16, x0, #0x1e
    // 0x88b0a4: cmp             x16, x0, asr #63
    // 0x88b0a8: b.ne            #0x88df30
    // 0x88b0ac: lsl             x0, x0, #1
    // 0x88b0b0: r1 = LoadInt32Instr(r0)
    //     0x88b0b0: sbfx            x1, x0, #1, #0x1f
    //     0x88b0b4: tbz             w0, #0, #0x88b0bc
    //     0x88b0b8: ldur            x1, [x0, #7]
    // 0x88b0bc: mov             x0, x1
    // 0x88b0c0: b               #0x88db2c
    // 0x88b0c4: cmp             x1, #0x55
    // 0x88b0c8: b.gt            #0x88db2c
    // 0x88b0cc: d2 = 0.750000
    //     0x88b0cc: fmov            d2, #0.75000000
    // 0x88b0d0: scvtf           d0, x0
    // 0x88b0d4: fmul            d1, d0, d2
    // 0x88b0d8: fcmp            d1, d1
    // 0x88b0dc: b.vs            #0x88df50
    // 0x88b0e0: fcvtms          x0, d1
    // 0x88b0e4: asr             x16, x0, #0x1e
    // 0x88b0e8: cmp             x16, x0, asr #63
    // 0x88b0ec: b.ne            #0x88df50
    // 0x88b0f0: lsl             x0, x0, #1
    // 0x88b0f4: r1 = LoadInt32Instr(r0)
    //     0x88b0f4: sbfx            x1, x0, #1, #0x1f
    //     0x88b0f8: tbz             w0, #0, #0x88b100
    //     0x88b0fc: ldur            x1, [x0, #7]
    // 0x88b100: mov             x0, x1
    // 0x88b104: b               #0x88db2c
    // 0x88b108: d1 = 100.000000
    //     0x88b108: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b10c: ldr             d1, [x17, #0xa28]
    // 0x88b110: d2 = 0.750000
    //     0x88b110: fmov            d2, #0.75000000
    // 0x88b114: d0 = 0.500000
    //     0x88b114: fmov            d0, #0.50000000
    // 0x88b118: r16 = "lootMoneyNazree"
    //     0x88b118: add             x16, PP, #0x13, lsl #12  ; [pp+0x134d0] "lootMoneyNazree"
    //     0x88b11c: ldr             x16, [x16, #0x4d0]
    // 0x88b120: ldur            lr, [fp, #-0x20]
    // 0x88b124: stp             lr, x16, [SP]
    // 0x88b128: r0 = ==()
    //     0x88b128: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b12c: tbnz            w0, #4, #0x88b2cc
    // 0x88b130: r1 = "nazree"
    //     0x88b130: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc68] "nazree"
    //     0x88b134: ldr             x1, [x1, #0xc68]
    // 0x88b138: r0 = getMemory()
    //     0x88b138: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88b13c: LoadField: r3 = r0->field_23
    //     0x88b13c: ldur            x3, [x0, #0x23]
    // 0x88b140: stur            x3, [fp, #-0x10]
    // 0x88b144: r0 = LoadStaticField(0xb54)
    //     0x88b144: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b148: ldr             x0, [x0, #0x16a8]
    // 0x88b14c: cmp             w0, NULL
    // 0x88b150: b.ne            #0x88b15c
    // 0x88b154: r0 = Null
    //     0x88b154: mov             x0, NULL
    // 0x88b158: b               #0x88b184
    // 0x88b15c: r17 = 347
    //     0x88b15c: movz            x17, #0x15b
    // 0x88b160: ldr             w1, [x0, x17]
    // 0x88b164: DecompressPointer r1
    //     0x88b164: add             x1, x1, HEAP, lsl #32
    // 0x88b168: r0 = LoadClassIdInstr(r1)
    //     0x88b168: ldur            x0, [x1, #-1]
    //     0x88b16c: ubfx            x0, x0, #0xc, #0x14
    // 0x88b170: r2 = "nazreeCompletion"
    //     0x88b170: add             x2, PP, #0x13, lsl #12  ; [pp+0x13490] "nazreeCompletion"
    //     0x88b174: ldr             x2, [x2, #0x490]
    // 0x88b178: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b178: sub             lr, x0, #0xb4
    //     0x88b17c: ldr             lr, [x21, lr, lsl #3]
    //     0x88b180: blr             lr
    // 0x88b184: cmp             w0, NULL
    // 0x88b188: b.ne            #0x88b194
    // 0x88b18c: r4 = 0
    //     0x88b18c: movz            x4, #0
    // 0x88b190: b               #0x88b198
    // 0x88b194: mov             x4, x0
    // 0x88b198: ldur            x3, [fp, #-0x10]
    // 0x88b19c: mov             x0, x4
    // 0x88b1a0: stur            x4, [fp, #-8]
    // 0x88b1a4: r2 = Null
    //     0x88b1a4: mov             x2, NULL
    // 0x88b1a8: r1 = Null
    //     0x88b1a8: mov             x1, NULL
    // 0x88b1ac: branchIfSmi(r0, 0x88b1d4)
    //     0x88b1ac: tbz             w0, #0, #0x88b1d4
    // 0x88b1b0: r4 = LoadClassIdInstr(r0)
    //     0x88b1b0: ldur            x4, [x0, #-1]
    //     0x88b1b4: ubfx            x4, x4, #0xc, #0x14
    // 0x88b1b8: sub             x4, x4, #0x3b
    // 0x88b1bc: cmp             x4, #1
    // 0x88b1c0: b.ls            #0x88b1d4
    // 0x88b1c4: r8 = int
    //     0x88b1c4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b1c8: r3 = Null
    //     0x88b1c8: add             x3, PP, #0x13, lsl #12  ; [pp+0x134d8] Null
    //     0x88b1cc: ldr             x3, [x3, #0x4d8]
    // 0x88b1d0: r0 = int()
    //     0x88b1d0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b1d4: ldur            x0, [fp, #-8]
    // 0x88b1d8: r1 = LoadInt32Instr(r0)
    //     0x88b1d8: sbfx            x1, x0, #1, #0x1f
    //     0x88b1dc: tbz             w0, #0, #0x88b1e4
    //     0x88b1e0: ldur            x1, [x0, #7]
    // 0x88b1e4: scvtf           d0, x1
    // 0x88b1e8: d1 = 100.000000
    //     0x88b1e8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b1ec: ldr             d1, [x17, #0xa28]
    // 0x88b1f0: fdiv            d2, d0, d1
    // 0x88b1f4: ldur            x0, [fp, #-0x10]
    // 0x88b1f8: scvtf           d0, x0
    // 0x88b1fc: fmul            d1, d2, d0
    // 0x88b200: fcmp            d1, d1
    // 0x88b204: b.vs            #0x88df70
    // 0x88b208: fcvtms          x2, d1
    // 0x88b20c: asr             x16, x2, #0x1e
    // 0x88b210: cmp             x16, x2, asr #63
    // 0x88b214: b.ne            #0x88df70
    // 0x88b218: lsl             x2, x2, #1
    // 0x88b21c: r3 = LoadInt32Instr(r2)
    //     0x88b21c: sbfx            x3, x2, #1, #0x1f
    //     0x88b220: tbz             w2, #0, #0x88b228
    //     0x88b224: ldur            x3, [x2, #7]
    // 0x88b228: cmp             x3, #0x64
    // 0x88b22c: b.gt            #0x88b238
    // 0x88b230: r0 = 100
    //     0x88b230: movz            x0, #0x64
    // 0x88b234: b               #0x88b244
    // 0x88b238: cmp             x3, x0
    // 0x88b23c: b.gt            #0x88b244
    // 0x88b240: mov             x0, x3
    // 0x88b244: cmp             x1, #0x32
    // 0x88b248: b.gt            #0x88b288
    // 0x88b24c: d0 = 0.500000
    //     0x88b24c: fmov            d0, #0.50000000
    // 0x88b250: scvtf           d1, x0
    // 0x88b254: fmul            d2, d1, d0
    // 0x88b258: fcmp            d2, d2
    // 0x88b25c: b.vs            #0x88df9c
    // 0x88b260: fcvtms          x0, d2
    // 0x88b264: asr             x16, x0, #0x1e
    // 0x88b268: cmp             x16, x0, asr #63
    // 0x88b26c: b.ne            #0x88df9c
    // 0x88b270: lsl             x0, x0, #1
    // 0x88b274: r1 = LoadInt32Instr(r0)
    //     0x88b274: sbfx            x1, x0, #1, #0x1f
    //     0x88b278: tbz             w0, #0, #0x88b280
    //     0x88b27c: ldur            x1, [x0, #7]
    // 0x88b280: mov             x0, x1
    // 0x88b284: b               #0x88db2c
    // 0x88b288: cmp             x1, #0x55
    // 0x88b28c: b.gt            #0x88db2c
    // 0x88b290: d2 = 0.750000
    //     0x88b290: fmov            d2, #0.75000000
    // 0x88b294: scvtf           d0, x0
    // 0x88b298: fmul            d1, d0, d2
    // 0x88b29c: fcmp            d1, d1
    // 0x88b2a0: b.vs            #0x88dfbc
    // 0x88b2a4: fcvtms          x0, d1
    // 0x88b2a8: asr             x16, x0, #0x1e
    // 0x88b2ac: cmp             x16, x0, asr #63
    // 0x88b2b0: b.ne            #0x88dfbc
    // 0x88b2b4: lsl             x0, x0, #1
    // 0x88b2b8: r1 = LoadInt32Instr(r0)
    //     0x88b2b8: sbfx            x1, x0, #1, #0x1f
    //     0x88b2bc: tbz             w0, #0, #0x88b2c4
    //     0x88b2c0: ldur            x1, [x0, #7]
    // 0x88b2c4: mov             x0, x1
    // 0x88b2c8: b               #0x88db2c
    // 0x88b2cc: d1 = 100.000000
    //     0x88b2cc: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b2d0: ldr             d1, [x17, #0xa28]
    // 0x88b2d4: d2 = 0.750000
    //     0x88b2d4: fmov            d2, #0.75000000
    // 0x88b2d8: d0 = 0.500000
    //     0x88b2d8: fmov            d0, #0.50000000
    // 0x88b2dc: r16 = "nazreeMemoryRize"
    //     0x88b2dc: add             x16, PP, #0x11, lsl #12  ; [pp+0x119e8] "nazreeMemoryRize"
    //     0x88b2e0: ldr             x16, [x16, #0x9e8]
    // 0x88b2e4: ldur            lr, [fp, #-0x20]
    // 0x88b2e8: stp             lr, x16, [SP]
    // 0x88b2ec: r0 = ==()
    //     0x88b2ec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b2f0: tbnz            w0, #4, #0x88b4a0
    // 0x88b2f4: r0 = LoadStaticField(0xb54)
    //     0x88b2f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b2f8: ldr             x0, [x0, #0x16a8]
    // 0x88b2fc: cmp             w0, NULL
    // 0x88b300: b.ne            #0x88b30c
    // 0x88b304: r0 = Null
    //     0x88b304: mov             x0, NULL
    // 0x88b308: b               #0x88b334
    // 0x88b30c: r17 = 351
    //     0x88b30c: movz            x17, #0x15f
    // 0x88b310: ldr             w1, [x0, x17]
    // 0x88b314: DecompressPointer r1
    //     0x88b314: add             x1, x1, HEAP, lsl #32
    // 0x88b318: r0 = LoadClassIdInstr(r1)
    //     0x88b318: ldur            x0, [x1, #-1]
    //     0x88b31c: ubfx            x0, x0, #0xc, #0x14
    // 0x88b320: r2 = "nazreeMemoryFloorMaster1"
    //     0x88b320: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a70] "nazreeMemoryFloorMaster1"
    //     0x88b324: ldr             x2, [x2, #0xa70]
    // 0x88b328: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b328: sub             lr, x0, #0xb4
    //     0x88b32c: ldr             lr, [x21, lr, lsl #3]
    //     0x88b330: blr             lr
    // 0x88b334: cmp             w0, NULL
    // 0x88b338: b.ne            #0x88b344
    // 0x88b33c: r3 = ""
    //     0x88b33c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88b340: b               #0x88b348
    // 0x88b344: mov             x3, x0
    // 0x88b348: mov             x0, x3
    // 0x88b34c: stur            x3, [fp, #-8]
    // 0x88b350: r2 = Null
    //     0x88b350: mov             x2, NULL
    // 0x88b354: r1 = Null
    //     0x88b354: mov             x1, NULL
    // 0x88b358: r4 = 59
    //     0x88b358: movz            x4, #0x3b
    // 0x88b35c: branchIfSmi(r0, 0x88b368)
    //     0x88b35c: tbz             w0, #0, #0x88b368
    // 0x88b360: r4 = LoadClassIdInstr(r0)
    //     0x88b360: ldur            x4, [x0, #-1]
    //     0x88b364: ubfx            x4, x4, #0xc, #0x14
    // 0x88b368: sub             x4, x4, #0x5d
    // 0x88b36c: cmp             x4, #1
    // 0x88b370: b.ls            #0x88b384
    // 0x88b374: r8 = String
    //     0x88b374: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88b378: r3 = Null
    //     0x88b378: add             x3, PP, #0x13, lsl #12  ; [pp+0x134e8] Null
    //     0x88b37c: ldr             x3, [x3, #0x4e8]
    // 0x88b380: r0 = String()
    //     0x88b380: bl              #0x1523244  ; IsType_String_Stub
    // 0x88b384: r0 = LoadStaticField(0xb54)
    //     0x88b384: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b388: ldr             x0, [x0, #0x16a8]
    // 0x88b38c: cmp             w0, NULL
    // 0x88b390: b.ne            #0x88b39c
    // 0x88b394: r0 = Null
    //     0x88b394: mov             x0, NULL
    // 0x88b398: b               #0x88b3c4
    // 0x88b39c: r17 = 351
    //     0x88b39c: movz            x17, #0x15f
    // 0x88b3a0: ldr             w1, [x0, x17]
    // 0x88b3a4: DecompressPointer r1
    //     0x88b3a4: add             x1, x1, HEAP, lsl #32
    // 0x88b3a8: r0 = LoadClassIdInstr(r1)
    //     0x88b3a8: ldur            x0, [x1, #-1]
    //     0x88b3ac: ubfx            x0, x0, #0xc, #0x14
    // 0x88b3b0: r2 = "nazreeMemoryFloorMaster2"
    //     0x88b3b0: add             x2, PP, #0x11, lsl #12  ; [pp+0x11ae8] "nazreeMemoryFloorMaster2"
    //     0x88b3b4: ldr             x2, [x2, #0xae8]
    // 0x88b3b8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b3b8: sub             lr, x0, #0xb4
    //     0x88b3bc: ldr             lr, [x21, lr, lsl #3]
    //     0x88b3c0: blr             lr
    // 0x88b3c4: cmp             w0, NULL
    // 0x88b3c8: b.ne            #0x88b3d4
    // 0x88b3cc: r4 = ""
    //     0x88b3cc: ldr             x4, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88b3d0: b               #0x88b3d8
    // 0x88b3d4: mov             x4, x0
    // 0x88b3d8: ldur            x3, [fp, #-8]
    // 0x88b3dc: mov             x0, x4
    // 0x88b3e0: stur            x4, [fp, #-0x18]
    // 0x88b3e4: r2 = Null
    //     0x88b3e4: mov             x2, NULL
    // 0x88b3e8: r1 = Null
    //     0x88b3e8: mov             x1, NULL
    // 0x88b3ec: r4 = 59
    //     0x88b3ec: movz            x4, #0x3b
    // 0x88b3f0: branchIfSmi(r0, 0x88b3fc)
    //     0x88b3f0: tbz             w0, #0, #0x88b3fc
    // 0x88b3f4: r4 = LoadClassIdInstr(r0)
    //     0x88b3f4: ldur            x4, [x0, #-1]
    //     0x88b3f8: ubfx            x4, x4, #0xc, #0x14
    // 0x88b3fc: sub             x4, x4, #0x5d
    // 0x88b400: cmp             x4, #1
    // 0x88b404: b.ls            #0x88b418
    // 0x88b408: r8 = String
    //     0x88b408: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88b40c: r3 = Null
    //     0x88b40c: add             x3, PP, #0x13, lsl #12  ; [pp+0x134f8] Null
    //     0x88b410: ldr             x3, [x3, #0x4f8]
    // 0x88b414: r0 = String()
    //     0x88b414: bl              #0x1523244  ; IsType_String_Stub
    // 0x88b418: ldur            x0, [fp, #-8]
    // 0x88b41c: r1 = LoadClassIdInstr(r0)
    //     0x88b41c: ldur            x1, [x0, #-1]
    //     0x88b420: ubfx            x1, x1, #0xc, #0x14
    // 0x88b424: r16 = ""
    //     0x88b424: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88b428: stp             x16, x0, [SP]
    // 0x88b42c: mov             x0, x1
    // 0x88b430: mov             lr, x0
    // 0x88b434: ldr             lr, [x21, lr, lsl #3]
    // 0x88b438: blr             lr
    // 0x88b43c: tst             x0, #0x10
    // 0x88b440: cset            x1, eq
    // 0x88b444: sub             x1, x1, #1
    // 0x88b448: r16 = -6
    //     0x88b448: movn            x16, #0x5
    // 0x88b44c: and             x1, x1, x16
    // 0x88b450: add             x1, x1, #0xe
    // 0x88b454: ldur            x0, [fp, #-0x18]
    // 0x88b458: stur            x1, [fp, #-8]
    // 0x88b45c: r2 = LoadClassIdInstr(r0)
    //     0x88b45c: ldur            x2, [x0, #-1]
    //     0x88b460: ubfx            x2, x2, #0xc, #0x14
    // 0x88b464: r16 = ""
    //     0x88b464: ldr             x16, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88b468: stp             x16, x0, [SP]
    // 0x88b46c: mov             x0, x2
    // 0x88b470: mov             lr, x0
    // 0x88b474: ldr             lr, [x21, lr, lsl #3]
    // 0x88b478: blr             lr
    // 0x88b47c: tbz             w0, #4, #0x88b490
    // 0x88b480: ldur            x0, [fp, #-8]
    // 0x88b484: r1 = LoadInt32Instr(r0)
    //     0x88b484: sbfx            x1, x0, #1, #0x1f
    // 0x88b488: sub             x0, x1, #3
    // 0x88b48c: b               #0x88db2c
    // 0x88b490: ldur            x0, [fp, #-8]
    // 0x88b494: r1 = LoadInt32Instr(r0)
    //     0x88b494: sbfx            x1, x0, #1, #0x1f
    // 0x88b498: mov             x0, x1
    // 0x88b49c: b               #0x88db2c
    // 0x88b4a0: r16 = "yukiMaxCompletion"
    //     0x88b4a0: add             x16, PP, #0x13, lsl #12  ; [pp+0x13508] "yukiMaxCompletion"
    //     0x88b4a4: ldr             x16, [x16, #0x508]
    // 0x88b4a8: ldur            lr, [fp, #-0x20]
    // 0x88b4ac: stp             lr, x16, [SP]
    // 0x88b4b0: r0 = ==()
    //     0x88b4b0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b4b4: tbnz            w0, #4, #0x88b60c
    // 0x88b4b8: r0 = LoadStaticField(0xb54)
    //     0x88b4b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b4bc: ldr             x0, [x0, #0x16a8]
    // 0x88b4c0: cmp             w0, NULL
    // 0x88b4c4: b.ne            #0x88b4d0
    // 0x88b4c8: r0 = Null
    //     0x88b4c8: mov             x0, NULL
    // 0x88b4cc: b               #0x88b4f8
    // 0x88b4d0: r17 = 347
    //     0x88b4d0: movz            x17, #0x15b
    // 0x88b4d4: ldr             w1, [x0, x17]
    // 0x88b4d8: DecompressPointer r1
    //     0x88b4d8: add             x1, x1, HEAP, lsl #32
    // 0x88b4dc: r0 = LoadClassIdInstr(r1)
    //     0x88b4dc: ldur            x0, [x1, #-1]
    //     0x88b4e0: ubfx            x0, x0, #0xc, #0x14
    // 0x88b4e4: r2 = "yukiMaxCompletion"
    //     0x88b4e4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13508] "yukiMaxCompletion"
    //     0x88b4e8: ldr             x2, [x2, #0x508]
    // 0x88b4ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b4ec: sub             lr, x0, #0xb4
    //     0x88b4f0: ldr             lr, [x21, lr, lsl #3]
    //     0x88b4f4: blr             lr
    // 0x88b4f8: cmp             w0, NULL
    // 0x88b4fc: b.ne            #0x88b508
    // 0x88b500: r3 = 0
    //     0x88b500: movz            x3, #0
    // 0x88b504: b               #0x88b50c
    // 0x88b508: mov             x3, x0
    // 0x88b50c: mov             x0, x3
    // 0x88b510: stur            x3, [fp, #-8]
    // 0x88b514: r2 = Null
    //     0x88b514: mov             x2, NULL
    // 0x88b518: r1 = Null
    //     0x88b518: mov             x1, NULL
    // 0x88b51c: branchIfSmi(r0, 0x88b544)
    //     0x88b51c: tbz             w0, #0, #0x88b544
    // 0x88b520: r4 = LoadClassIdInstr(r0)
    //     0x88b520: ldur            x4, [x0, #-1]
    //     0x88b524: ubfx            x4, x4, #0xc, #0x14
    // 0x88b528: sub             x4, x4, #0x3b
    // 0x88b52c: cmp             x4, #1
    // 0x88b530: b.ls            #0x88b544
    // 0x88b534: r8 = int
    //     0x88b534: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b538: r3 = Null
    //     0x88b538: add             x3, PP, #0x13, lsl #12  ; [pp+0x13510] Null
    //     0x88b53c: ldr             x3, [x3, #0x510]
    // 0x88b540: r0 = int()
    //     0x88b540: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b544: r0 = LoadStaticField(0xb54)
    //     0x88b544: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b548: ldr             x0, [x0, #0x16a8]
    // 0x88b54c: cmp             w0, NULL
    // 0x88b550: b.ne            #0x88b55c
    // 0x88b554: r0 = Null
    //     0x88b554: mov             x0, NULL
    // 0x88b558: b               #0x88b584
    // 0x88b55c: r17 = 347
    //     0x88b55c: movz            x17, #0x15b
    // 0x88b560: ldr             w1, [x0, x17]
    // 0x88b564: DecompressPointer r1
    //     0x88b564: add             x1, x1, HEAP, lsl #32
    // 0x88b568: r0 = LoadClassIdInstr(r1)
    //     0x88b568: ldur            x0, [x1, #-1]
    //     0x88b56c: ubfx            x0, x0, #0xc, #0x14
    // 0x88b570: r2 = "yukiCompletion"
    //     0x88b570: add             x2, PP, #0x13, lsl #12  ; [pp+0x13520] "yukiCompletion"
    //     0x88b574: ldr             x2, [x2, #0x520]
    // 0x88b578: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b578: sub             lr, x0, #0xb4
    //     0x88b57c: ldr             lr, [x21, lr, lsl #3]
    //     0x88b580: blr             lr
    // 0x88b584: cmp             w0, NULL
    // 0x88b588: b.ne            #0x88b594
    // 0x88b58c: r4 = 0
    //     0x88b58c: movz            x4, #0
    // 0x88b590: b               #0x88b598
    // 0x88b594: mov             x4, x0
    // 0x88b598: ldur            x3, [fp, #-8]
    // 0x88b59c: mov             x0, x4
    // 0x88b5a0: stur            x4, [fp, #-0x18]
    // 0x88b5a4: r2 = Null
    //     0x88b5a4: mov             x2, NULL
    // 0x88b5a8: r1 = Null
    //     0x88b5a8: mov             x1, NULL
    // 0x88b5ac: branchIfSmi(r0, 0x88b5d4)
    //     0x88b5ac: tbz             w0, #0, #0x88b5d4
    // 0x88b5b0: r4 = LoadClassIdInstr(r0)
    //     0x88b5b0: ldur            x4, [x0, #-1]
    //     0x88b5b4: ubfx            x4, x4, #0xc, #0x14
    // 0x88b5b8: sub             x4, x4, #0x3b
    // 0x88b5bc: cmp             x4, #1
    // 0x88b5c0: b.ls            #0x88b5d4
    // 0x88b5c4: r8 = int
    //     0x88b5c4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b5c8: r3 = Null
    //     0x88b5c8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13528] Null
    //     0x88b5cc: ldr             x3, [x3, #0x528]
    // 0x88b5d0: r0 = int()
    //     0x88b5d0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b5d4: ldur            x0, [fp, #-8]
    // 0x88b5d8: r1 = LoadInt32Instr(r0)
    //     0x88b5d8: sbfx            x1, x0, #1, #0x1f
    //     0x88b5dc: tbz             w0, #0, #0x88b5e4
    //     0x88b5e0: ldur            x1, [x0, #7]
    // 0x88b5e4: ldur            x0, [fp, #-0x18]
    // 0x88b5e8: r2 = LoadInt32Instr(r0)
    //     0x88b5e8: sbfx            x2, x0, #1, #0x1f
    //     0x88b5ec: tbz             w0, #0, #0x88b5f4
    //     0x88b5f0: ldur            x2, [x0, #7]
    // 0x88b5f4: cmp             x1, x2
    // 0x88b5f8: b.lt            #0x88b604
    // 0x88b5fc: mov             x0, x1
    // 0x88b600: b               #0x88db2c
    // 0x88b604: mov             x0, x2
    // 0x88b608: b               #0x88db2c
    // 0x88b60c: r16 = "yukiCompletion"
    //     0x88b60c: add             x16, PP, #0x13, lsl #12  ; [pp+0x13520] "yukiCompletion"
    //     0x88b610: ldr             x16, [x16, #0x520]
    // 0x88b614: ldur            lr, [fp, #-0x20]
    // 0x88b618: stp             lr, x16, [SP]
    // 0x88b61c: r0 = ==()
    //     0x88b61c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b620: tbnz            w0, #4, #0x88b6c8
    // 0x88b624: r0 = LoadStaticField(0xb54)
    //     0x88b624: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b628: ldr             x0, [x0, #0x16a8]
    // 0x88b62c: cmp             w0, NULL
    // 0x88b630: b.ne            #0x88b63c
    // 0x88b634: r0 = Null
    //     0x88b634: mov             x0, NULL
    // 0x88b638: b               #0x88b664
    // 0x88b63c: r17 = 347
    //     0x88b63c: movz            x17, #0x15b
    // 0x88b640: ldr             w1, [x0, x17]
    // 0x88b644: DecompressPointer r1
    //     0x88b644: add             x1, x1, HEAP, lsl #32
    // 0x88b648: r0 = LoadClassIdInstr(r1)
    //     0x88b648: ldur            x0, [x1, #-1]
    //     0x88b64c: ubfx            x0, x0, #0xc, #0x14
    // 0x88b650: r2 = "yukiCompletion"
    //     0x88b650: add             x2, PP, #0x13, lsl #12  ; [pp+0x13520] "yukiCompletion"
    //     0x88b654: ldr             x2, [x2, #0x520]
    // 0x88b658: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b658: sub             lr, x0, #0xb4
    //     0x88b65c: ldr             lr, [x21, lr, lsl #3]
    //     0x88b660: blr             lr
    // 0x88b664: cmp             w0, NULL
    // 0x88b668: b.ne            #0x88b674
    // 0x88b66c: r3 = 0
    //     0x88b66c: movz            x3, #0
    // 0x88b670: b               #0x88b678
    // 0x88b674: mov             x3, x0
    // 0x88b678: mov             x0, x3
    // 0x88b67c: stur            x3, [fp, #-8]
    // 0x88b680: r2 = Null
    //     0x88b680: mov             x2, NULL
    // 0x88b684: r1 = Null
    //     0x88b684: mov             x1, NULL
    // 0x88b688: branchIfSmi(r0, 0x88b6b0)
    //     0x88b688: tbz             w0, #0, #0x88b6b0
    // 0x88b68c: r4 = LoadClassIdInstr(r0)
    //     0x88b68c: ldur            x4, [x0, #-1]
    //     0x88b690: ubfx            x4, x4, #0xc, #0x14
    // 0x88b694: sub             x4, x4, #0x3b
    // 0x88b698: cmp             x4, #1
    // 0x88b69c: b.ls            #0x88b6b0
    // 0x88b6a0: r8 = int
    //     0x88b6a0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b6a4: r3 = Null
    //     0x88b6a4: add             x3, PP, #0x13, lsl #12  ; [pp+0x13538] Null
    //     0x88b6a8: ldr             x3, [x3, #0x538]
    // 0x88b6ac: r0 = int()
    //     0x88b6ac: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b6b0: ldur            x0, [fp, #-8]
    // 0x88b6b4: r1 = LoadInt32Instr(r0)
    //     0x88b6b4: sbfx            x1, x0, #1, #0x1f
    //     0x88b6b8: tbz             w0, #0, #0x88b6c0
    //     0x88b6bc: ldur            x1, [x0, #7]
    // 0x88b6c0: mov             x0, x1
    // 0x88b6c4: b               #0x88db2c
    // 0x88b6c8: r16 = "lootTokenYuki"
    //     0x88b6c8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13548] "lootTokenYuki"
    //     0x88b6cc: ldr             x16, [x16, #0x548]
    // 0x88b6d0: ldur            lr, [fp, #-0x20]
    // 0x88b6d4: stp             lr, x16, [SP]
    // 0x88b6d8: r0 = ==()
    //     0x88b6d8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b6dc: tbnz            w0, #4, #0x88b87c
    // 0x88b6e0: r1 = "yuki"
    //     0x88b6e0: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc70] "yuki"
    //     0x88b6e4: ldr             x1, [x1, #0xc70]
    // 0x88b6e8: r0 = getMemory()
    //     0x88b6e8: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88b6ec: LoadField: r3 = r0->field_2b
    //     0x88b6ec: ldur            x3, [x0, #0x2b]
    // 0x88b6f0: stur            x3, [fp, #-0x10]
    // 0x88b6f4: r0 = LoadStaticField(0xb54)
    //     0x88b6f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b6f8: ldr             x0, [x0, #0x16a8]
    // 0x88b6fc: cmp             w0, NULL
    // 0x88b700: b.ne            #0x88b70c
    // 0x88b704: r0 = Null
    //     0x88b704: mov             x0, NULL
    // 0x88b708: b               #0x88b734
    // 0x88b70c: r17 = 347
    //     0x88b70c: movz            x17, #0x15b
    // 0x88b710: ldr             w1, [x0, x17]
    // 0x88b714: DecompressPointer r1
    //     0x88b714: add             x1, x1, HEAP, lsl #32
    // 0x88b718: r0 = LoadClassIdInstr(r1)
    //     0x88b718: ldur            x0, [x1, #-1]
    //     0x88b71c: ubfx            x0, x0, #0xc, #0x14
    // 0x88b720: r2 = "yukiCompletion"
    //     0x88b720: add             x2, PP, #0x13, lsl #12  ; [pp+0x13520] "yukiCompletion"
    //     0x88b724: ldr             x2, [x2, #0x520]
    // 0x88b728: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b728: sub             lr, x0, #0xb4
    //     0x88b72c: ldr             lr, [x21, lr, lsl #3]
    //     0x88b730: blr             lr
    // 0x88b734: cmp             w0, NULL
    // 0x88b738: b.ne            #0x88b744
    // 0x88b73c: r4 = 0
    //     0x88b73c: movz            x4, #0
    // 0x88b740: b               #0x88b748
    // 0x88b744: mov             x4, x0
    // 0x88b748: ldur            x3, [fp, #-0x10]
    // 0x88b74c: mov             x0, x4
    // 0x88b750: stur            x4, [fp, #-8]
    // 0x88b754: r2 = Null
    //     0x88b754: mov             x2, NULL
    // 0x88b758: r1 = Null
    //     0x88b758: mov             x1, NULL
    // 0x88b75c: branchIfSmi(r0, 0x88b784)
    //     0x88b75c: tbz             w0, #0, #0x88b784
    // 0x88b760: r4 = LoadClassIdInstr(r0)
    //     0x88b760: ldur            x4, [x0, #-1]
    //     0x88b764: ubfx            x4, x4, #0xc, #0x14
    // 0x88b768: sub             x4, x4, #0x3b
    // 0x88b76c: cmp             x4, #1
    // 0x88b770: b.ls            #0x88b784
    // 0x88b774: r8 = int
    //     0x88b774: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b778: r3 = Null
    //     0x88b778: add             x3, PP, #0x13, lsl #12  ; [pp+0x13550] Null
    //     0x88b77c: ldr             x3, [x3, #0x550]
    // 0x88b780: r0 = int()
    //     0x88b780: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b784: ldur            x0, [fp, #-8]
    // 0x88b788: r1 = LoadInt32Instr(r0)
    //     0x88b788: sbfx            x1, x0, #1, #0x1f
    //     0x88b78c: tbz             w0, #0, #0x88b794
    //     0x88b790: ldur            x1, [x0, #7]
    // 0x88b794: scvtf           d0, x1
    // 0x88b798: d1 = 100.000000
    //     0x88b798: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b79c: ldr             d1, [x17, #0xa28]
    // 0x88b7a0: fdiv            d2, d0, d1
    // 0x88b7a4: ldur            x0, [fp, #-0x10]
    // 0x88b7a8: scvtf           d0, x0
    // 0x88b7ac: fmul            d1, d2, d0
    // 0x88b7b0: fcmp            d1, d1
    // 0x88b7b4: b.vs            #0x88dfdc
    // 0x88b7b8: fcvtms          x2, d1
    // 0x88b7bc: asr             x16, x2, #0x1e
    // 0x88b7c0: cmp             x16, x2, asr #63
    // 0x88b7c4: b.ne            #0x88dfdc
    // 0x88b7c8: lsl             x2, x2, #1
    // 0x88b7cc: r3 = LoadInt32Instr(r2)
    //     0x88b7cc: sbfx            x3, x2, #1, #0x1f
    //     0x88b7d0: tbz             w2, #0, #0x88b7d8
    //     0x88b7d4: ldur            x3, [x2, #7]
    // 0x88b7d8: cmp             x3, x0
    // 0x88b7dc: b.gt            #0x88b7f4
    // 0x88b7e0: cmp             x3, #0
    // 0x88b7e4: b.gt            #0x88b7f0
    // 0x88b7e8: r0 = 1
    //     0x88b7e8: movz            x0, #0x1
    // 0x88b7ec: b               #0x88b7f4
    // 0x88b7f0: mov             x0, x3
    // 0x88b7f4: cmp             x1, #0x32
    // 0x88b7f8: b.gt            #0x88b838
    // 0x88b7fc: d0 = 0.500000
    //     0x88b7fc: fmov            d0, #0.50000000
    // 0x88b800: scvtf           d1, x0
    // 0x88b804: fmul            d2, d1, d0
    // 0x88b808: fcmp            d2, d2
    // 0x88b80c: b.vs            #0x88e008
    // 0x88b810: fcvtms          x0, d2
    // 0x88b814: asr             x16, x0, #0x1e
    // 0x88b818: cmp             x16, x0, asr #63
    // 0x88b81c: b.ne            #0x88e008
    // 0x88b820: lsl             x0, x0, #1
    // 0x88b824: r1 = LoadInt32Instr(r0)
    //     0x88b824: sbfx            x1, x0, #1, #0x1f
    //     0x88b828: tbz             w0, #0, #0x88b830
    //     0x88b82c: ldur            x1, [x0, #7]
    // 0x88b830: mov             x0, x1
    // 0x88b834: b               #0x88db2c
    // 0x88b838: cmp             x1, #0x55
    // 0x88b83c: b.gt            #0x88db2c
    // 0x88b840: d2 = 0.750000
    //     0x88b840: fmov            d2, #0.75000000
    // 0x88b844: scvtf           d0, x0
    // 0x88b848: fmul            d1, d0, d2
    // 0x88b84c: fcmp            d1, d1
    // 0x88b850: b.vs            #0x88e028
    // 0x88b854: fcvtms          x0, d1
    // 0x88b858: asr             x16, x0, #0x1e
    // 0x88b85c: cmp             x16, x0, asr #63
    // 0x88b860: b.ne            #0x88e028
    // 0x88b864: lsl             x0, x0, #1
    // 0x88b868: r1 = LoadInt32Instr(r0)
    //     0x88b868: sbfx            x1, x0, #1, #0x1f
    //     0x88b86c: tbz             w0, #0, #0x88b874
    //     0x88b870: ldur            x1, [x0, #7]
    // 0x88b874: mov             x0, x1
    // 0x88b878: b               #0x88db2c
    // 0x88b87c: d1 = 100.000000
    //     0x88b87c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b880: ldr             d1, [x17, #0xa28]
    // 0x88b884: d2 = 0.750000
    //     0x88b884: fmov            d2, #0.75000000
    // 0x88b888: d0 = 0.500000
    //     0x88b888: fmov            d0, #0.50000000
    // 0x88b88c: r16 = "lootMoneyYuki"
    //     0x88b88c: add             x16, PP, #0x13, lsl #12  ; [pp+0x13560] "lootMoneyYuki"
    //     0x88b890: ldr             x16, [x16, #0x560]
    // 0x88b894: ldur            lr, [fp, #-0x20]
    // 0x88b898: stp             lr, x16, [SP]
    // 0x88b89c: r0 = ==()
    //     0x88b89c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88b8a0: tbnz            w0, #4, #0x88ba40
    // 0x88b8a4: r1 = "yuki"
    //     0x88b8a4: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc70] "yuki"
    //     0x88b8a8: ldr             x1, [x1, #0xc70]
    // 0x88b8ac: r0 = getMemory()
    //     0x88b8ac: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88b8b0: LoadField: r3 = r0->field_23
    //     0x88b8b0: ldur            x3, [x0, #0x23]
    // 0x88b8b4: stur            x3, [fp, #-0x10]
    // 0x88b8b8: r0 = LoadStaticField(0xb54)
    //     0x88b8b8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88b8bc: ldr             x0, [x0, #0x16a8]
    // 0x88b8c0: cmp             w0, NULL
    // 0x88b8c4: b.ne            #0x88b8d0
    // 0x88b8c8: r0 = Null
    //     0x88b8c8: mov             x0, NULL
    // 0x88b8cc: b               #0x88b8f8
    // 0x88b8d0: r17 = 347
    //     0x88b8d0: movz            x17, #0x15b
    // 0x88b8d4: ldr             w1, [x0, x17]
    // 0x88b8d8: DecompressPointer r1
    //     0x88b8d8: add             x1, x1, HEAP, lsl #32
    // 0x88b8dc: r0 = LoadClassIdInstr(r1)
    //     0x88b8dc: ldur            x0, [x1, #-1]
    //     0x88b8e0: ubfx            x0, x0, #0xc, #0x14
    // 0x88b8e4: r2 = "yukiCompletion"
    //     0x88b8e4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13520] "yukiCompletion"
    //     0x88b8e8: ldr             x2, [x2, #0x520]
    // 0x88b8ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88b8ec: sub             lr, x0, #0xb4
    //     0x88b8f0: ldr             lr, [x21, lr, lsl #3]
    //     0x88b8f4: blr             lr
    // 0x88b8f8: cmp             w0, NULL
    // 0x88b8fc: b.ne            #0x88b908
    // 0x88b900: r4 = 0
    //     0x88b900: movz            x4, #0
    // 0x88b904: b               #0x88b90c
    // 0x88b908: mov             x4, x0
    // 0x88b90c: ldur            x3, [fp, #-0x10]
    // 0x88b910: mov             x0, x4
    // 0x88b914: stur            x4, [fp, #-8]
    // 0x88b918: r2 = Null
    //     0x88b918: mov             x2, NULL
    // 0x88b91c: r1 = Null
    //     0x88b91c: mov             x1, NULL
    // 0x88b920: branchIfSmi(r0, 0x88b948)
    //     0x88b920: tbz             w0, #0, #0x88b948
    // 0x88b924: r4 = LoadClassIdInstr(r0)
    //     0x88b924: ldur            x4, [x0, #-1]
    //     0x88b928: ubfx            x4, x4, #0xc, #0x14
    // 0x88b92c: sub             x4, x4, #0x3b
    // 0x88b930: cmp             x4, #1
    // 0x88b934: b.ls            #0x88b948
    // 0x88b938: r8 = int
    //     0x88b938: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88b93c: r3 = Null
    //     0x88b93c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13568] Null
    //     0x88b940: ldr             x3, [x3, #0x568]
    // 0x88b944: r0 = int()
    //     0x88b944: bl              #0x1524294  ; IsType_int_Stub
    // 0x88b948: ldur            x0, [fp, #-8]
    // 0x88b94c: r1 = LoadInt32Instr(r0)
    //     0x88b94c: sbfx            x1, x0, #1, #0x1f
    //     0x88b950: tbz             w0, #0, #0x88b958
    //     0x88b954: ldur            x1, [x0, #7]
    // 0x88b958: scvtf           d0, x1
    // 0x88b95c: d1 = 100.000000
    //     0x88b95c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88b960: ldr             d1, [x17, #0xa28]
    // 0x88b964: fdiv            d2, d0, d1
    // 0x88b968: ldur            x0, [fp, #-0x10]
    // 0x88b96c: scvtf           d0, x0
    // 0x88b970: fmul            d1, d2, d0
    // 0x88b974: fcmp            d1, d1
    // 0x88b978: b.vs            #0x88e048
    // 0x88b97c: fcvtms          x2, d1
    // 0x88b980: asr             x16, x2, #0x1e
    // 0x88b984: cmp             x16, x2, asr #63
    // 0x88b988: b.ne            #0x88e048
    // 0x88b98c: lsl             x2, x2, #1
    // 0x88b990: r3 = LoadInt32Instr(r2)
    //     0x88b990: sbfx            x3, x2, #1, #0x1f
    //     0x88b994: tbz             w2, #0, #0x88b99c
    //     0x88b998: ldur            x3, [x2, #7]
    // 0x88b99c: cmp             x3, #0x64
    // 0x88b9a0: b.gt            #0x88b9ac
    // 0x88b9a4: r0 = 100
    //     0x88b9a4: movz            x0, #0x64
    // 0x88b9a8: b               #0x88b9b8
    // 0x88b9ac: cmp             x3, x0
    // 0x88b9b0: b.gt            #0x88b9b8
    // 0x88b9b4: mov             x0, x3
    // 0x88b9b8: cmp             x1, #0x32
    // 0x88b9bc: b.gt            #0x88b9fc
    // 0x88b9c0: d0 = 0.500000
    //     0x88b9c0: fmov            d0, #0.50000000
    // 0x88b9c4: scvtf           d1, x0
    // 0x88b9c8: fmul            d2, d1, d0
    // 0x88b9cc: fcmp            d2, d2
    // 0x88b9d0: b.vs            #0x88e074
    // 0x88b9d4: fcvtms          x0, d2
    // 0x88b9d8: asr             x16, x0, #0x1e
    // 0x88b9dc: cmp             x16, x0, asr #63
    // 0x88b9e0: b.ne            #0x88e074
    // 0x88b9e4: lsl             x0, x0, #1
    // 0x88b9e8: r1 = LoadInt32Instr(r0)
    //     0x88b9e8: sbfx            x1, x0, #1, #0x1f
    //     0x88b9ec: tbz             w0, #0, #0x88b9f4
    //     0x88b9f0: ldur            x1, [x0, #7]
    // 0x88b9f4: mov             x0, x1
    // 0x88b9f8: b               #0x88db2c
    // 0x88b9fc: cmp             x1, #0x55
    // 0x88ba00: b.gt            #0x88db2c
    // 0x88ba04: d2 = 0.750000
    //     0x88ba04: fmov            d2, #0.75000000
    // 0x88ba08: scvtf           d0, x0
    // 0x88ba0c: fmul            d1, d0, d2
    // 0x88ba10: fcmp            d1, d1
    // 0x88ba14: b.vs            #0x88e094
    // 0x88ba18: fcvtms          x0, d1
    // 0x88ba1c: asr             x16, x0, #0x1e
    // 0x88ba20: cmp             x16, x0, asr #63
    // 0x88ba24: b.ne            #0x88e094
    // 0x88ba28: lsl             x0, x0, #1
    // 0x88ba2c: r1 = LoadInt32Instr(r0)
    //     0x88ba2c: sbfx            x1, x0, #1, #0x1f
    //     0x88ba30: tbz             w0, #0, #0x88ba38
    //     0x88ba34: ldur            x1, [x0, #7]
    // 0x88ba38: mov             x0, x1
    // 0x88ba3c: b               #0x88db2c
    // 0x88ba40: d1 = 100.000000
    //     0x88ba40: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88ba44: ldr             d1, [x17, #0xa28]
    // 0x88ba48: d2 = 0.750000
    //     0x88ba48: fmov            d2, #0.75000000
    // 0x88ba4c: d0 = 0.500000
    //     0x88ba4c: fmov            d0, #0.50000000
    // 0x88ba50: r16 = "yukiEndingCompletion"
    //     0x88ba50: add             x16, PP, #0x13, lsl #12  ; [pp+0x13578] "yukiEndingCompletion"
    //     0x88ba54: ldr             x16, [x16, #0x578]
    // 0x88ba58: ldur            lr, [fp, #-0x20]
    // 0x88ba5c: stp             lr, x16, [SP]
    // 0x88ba60: r0 = ==()
    //     0x88ba60: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88ba64: tbnz            w0, #4, #0x88bb34
    // 0x88ba68: r0 = LoadStaticField(0xb54)
    //     0x88ba68: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ba6c: ldr             x0, [x0, #0x16a8]
    // 0x88ba70: cmp             w0, NULL
    // 0x88ba74: b.ne            #0x88ba80
    // 0x88ba78: r0 = Null
    //     0x88ba78: mov             x0, NULL
    // 0x88ba7c: b               #0x88baa8
    // 0x88ba80: r17 = 347
    //     0x88ba80: movz            x17, #0x15b
    // 0x88ba84: ldr             w1, [x0, x17]
    // 0x88ba88: DecompressPointer r1
    //     0x88ba88: add             x1, x1, HEAP, lsl #32
    // 0x88ba8c: r0 = LoadClassIdInstr(r1)
    //     0x88ba8c: ldur            x0, [x1, #-1]
    //     0x88ba90: ubfx            x0, x0, #0xc, #0x14
    // 0x88ba94: r2 = "yukiMaxCompletion"
    //     0x88ba94: add             x2, PP, #0x13, lsl #12  ; [pp+0x13508] "yukiMaxCompletion"
    //     0x88ba98: ldr             x2, [x2, #0x508]
    // 0x88ba9c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ba9c: sub             lr, x0, #0xb4
    //     0x88baa0: ldr             lr, [x21, lr, lsl #3]
    //     0x88baa4: blr             lr
    // 0x88baa8: cmp             w0, NULL
    // 0x88baac: b.ne            #0x88bab8
    // 0x88bab0: r3 = 0
    //     0x88bab0: movz            x3, #0
    // 0x88bab4: b               #0x88babc
    // 0x88bab8: mov             x3, x0
    // 0x88babc: mov             x0, x3
    // 0x88bac0: stur            x3, [fp, #-8]
    // 0x88bac4: r2 = Null
    //     0x88bac4: mov             x2, NULL
    // 0x88bac8: r1 = Null
    //     0x88bac8: mov             x1, NULL
    // 0x88bacc: branchIfSmi(r0, 0x88baf4)
    //     0x88bacc: tbz             w0, #0, #0x88baf4
    // 0x88bad0: r4 = LoadClassIdInstr(r0)
    //     0x88bad0: ldur            x4, [x0, #-1]
    //     0x88bad4: ubfx            x4, x4, #0xc, #0x14
    // 0x88bad8: sub             x4, x4, #0x3b
    // 0x88badc: cmp             x4, #1
    // 0x88bae0: b.ls            #0x88baf4
    // 0x88bae4: r8 = int
    //     0x88bae4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88bae8: r3 = Null
    //     0x88bae8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13580] Null
    //     0x88baec: ldr             x3, [x3, #0x580]
    // 0x88baf0: r0 = int()
    //     0x88baf0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88baf4: ldur            x0, [fp, #-8]
    // 0x88baf8: r1 = LoadInt32Instr(r0)
    //     0x88baf8: sbfx            x1, x0, #1, #0x1f
    //     0x88bafc: tbz             w0, #0, #0x88bb04
    //     0x88bb00: ldur            x1, [x0, #7]
    // 0x88bb04: cmp             x1, #0x50
    // 0x88bb08: r16 = true
    //     0x88bb08: add             x16, NULL, #0x20  ; true
    // 0x88bb0c: r17 = false
    //     0x88bb0c: add             x17, NULL, #0x30  ; false
    // 0x88bb10: csel            x0, x16, x17, ge
    // 0x88bb14: tst             x0, #0x10
    // 0x88bb18: cset            x1, ne
    // 0x88bb1c: sub             x1, x1, #1
    // 0x88bb20: r16 = 26
    //     0x88bb20: movz            x16, #0x1a
    // 0x88bb24: and             x1, x1, x16
    // 0x88bb28: add             x1, x1, #0x1e
    // 0x88bb2c: r0 = LoadInt32Instr(r1)
    //     0x88bb2c: sbfx            x0, x1, #1, #0x1f
    // 0x88bb30: b               #0x88db2c
    // 0x88bb34: r16 = "yukiMemoryEvaCountdown"
    //     0x88bb34: add             x16, PP, #0x13, lsl #12  ; [pp+0x13590] "yukiMemoryEvaCountdown"
    //     0x88bb38: ldr             x16, [x16, #0x590]
    // 0x88bb3c: ldur            lr, [fp, #-0x20]
    // 0x88bb40: stp             lr, x16, [SP]
    // 0x88bb44: r0 = ==()
    //     0x88bb44: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88bb48: tbnz            w0, #4, #0x88bbfc
    // 0x88bb4c: r0 = LoadStaticField(0xb54)
    //     0x88bb4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88bb50: ldr             x0, [x0, #0x16a8]
    // 0x88bb54: cmp             w0, NULL
    // 0x88bb58: b.ne            #0x88bb64
    // 0x88bb5c: r0 = Null
    //     0x88bb5c: mov             x0, NULL
    // 0x88bb60: b               #0x88bb8c
    // 0x88bb64: r17 = 347
    //     0x88bb64: movz            x17, #0x15b
    // 0x88bb68: ldr             w1, [x0, x17]
    // 0x88bb6c: DecompressPointer r1
    //     0x88bb6c: add             x1, x1, HEAP, lsl #32
    // 0x88bb70: r0 = LoadClassIdInstr(r1)
    //     0x88bb70: ldur            x0, [x1, #-1]
    //     0x88bb74: ubfx            x0, x0, #0xc, #0x14
    // 0x88bb78: r2 = "memoryTimerReduce"
    //     0x88bb78: add             x2, PP, #0x11, lsl #12  ; [pp+0x11a30] "memoryTimerReduce"
    //     0x88bb7c: ldr             x2, [x2, #0xa30]
    // 0x88bb80: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88bb80: sub             lr, x0, #0xb4
    //     0x88bb84: ldr             lr, [x21, lr, lsl #3]
    //     0x88bb88: blr             lr
    // 0x88bb8c: cmp             w0, NULL
    // 0x88bb90: b.ne            #0x88bb9c
    // 0x88bb94: r3 = 0
    //     0x88bb94: movz            x3, #0
    // 0x88bb98: b               #0x88bba0
    // 0x88bb9c: mov             x3, x0
    // 0x88bba0: mov             x0, x3
    // 0x88bba4: stur            x3, [fp, #-8]
    // 0x88bba8: r2 = Null
    //     0x88bba8: mov             x2, NULL
    // 0x88bbac: r1 = Null
    //     0x88bbac: mov             x1, NULL
    // 0x88bbb0: branchIfSmi(r0, 0x88bbd8)
    //     0x88bbb0: tbz             w0, #0, #0x88bbd8
    // 0x88bbb4: r4 = LoadClassIdInstr(r0)
    //     0x88bbb4: ldur            x4, [x0, #-1]
    //     0x88bbb8: ubfx            x4, x4, #0xc, #0x14
    // 0x88bbbc: sub             x4, x4, #0x3b
    // 0x88bbc0: cmp             x4, #1
    // 0x88bbc4: b.ls            #0x88bbd8
    // 0x88bbc8: r8 = int
    //     0x88bbc8: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88bbcc: r3 = Null
    //     0x88bbcc: add             x3, PP, #0x13, lsl #12  ; [pp+0x13598] Null
    //     0x88bbd0: ldr             x3, [x3, #0x598]
    // 0x88bbd4: r0 = int()
    //     0x88bbd4: bl              #0x1524294  ; IsType_int_Stub
    // 0x88bbd8: ldur            x0, [fp, #-8]
    // 0x88bbdc: r1 = LoadInt32Instr(r0)
    //     0x88bbdc: sbfx            x1, x0, #1, #0x1f
    //     0x88bbe0: tbz             w0, #0, #0x88bbe8
    //     0x88bbe4: ldur            x1, [x0, #7]
    // 0x88bbe8: lsl             x0, x1, #1
    // 0x88bbec: r1 = 22
    //     0x88bbec: movz            x1, #0x16
    // 0x88bbf0: sub             x2, x1, x0
    // 0x88bbf4: mov             x0, x2
    // 0x88bbf8: b               #0x88db2c
    // 0x88bbfc: r16 = "guanMaxCompletion"
    //     0x88bbfc: add             x16, PP, #0x13, lsl #12  ; [pp+0x135a8] "guanMaxCompletion"
    //     0x88bc00: ldr             x16, [x16, #0x5a8]
    // 0x88bc04: ldur            lr, [fp, #-0x20]
    // 0x88bc08: stp             lr, x16, [SP]
    // 0x88bc0c: r0 = ==()
    //     0x88bc0c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88bc10: tbnz            w0, #4, #0x88bd68
    // 0x88bc14: r0 = LoadStaticField(0xb54)
    //     0x88bc14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88bc18: ldr             x0, [x0, #0x16a8]
    // 0x88bc1c: cmp             w0, NULL
    // 0x88bc20: b.ne            #0x88bc2c
    // 0x88bc24: r0 = Null
    //     0x88bc24: mov             x0, NULL
    // 0x88bc28: b               #0x88bc54
    // 0x88bc2c: r17 = 347
    //     0x88bc2c: movz            x17, #0x15b
    // 0x88bc30: ldr             w1, [x0, x17]
    // 0x88bc34: DecompressPointer r1
    //     0x88bc34: add             x1, x1, HEAP, lsl #32
    // 0x88bc38: r0 = LoadClassIdInstr(r1)
    //     0x88bc38: ldur            x0, [x1, #-1]
    //     0x88bc3c: ubfx            x0, x0, #0xc, #0x14
    // 0x88bc40: r2 = "guanMaxCompletion"
    //     0x88bc40: add             x2, PP, #0x13, lsl #12  ; [pp+0x135a8] "guanMaxCompletion"
    //     0x88bc44: ldr             x2, [x2, #0x5a8]
    // 0x88bc48: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88bc48: sub             lr, x0, #0xb4
    //     0x88bc4c: ldr             lr, [x21, lr, lsl #3]
    //     0x88bc50: blr             lr
    // 0x88bc54: cmp             w0, NULL
    // 0x88bc58: b.ne            #0x88bc64
    // 0x88bc5c: r3 = 0
    //     0x88bc5c: movz            x3, #0
    // 0x88bc60: b               #0x88bc68
    // 0x88bc64: mov             x3, x0
    // 0x88bc68: mov             x0, x3
    // 0x88bc6c: stur            x3, [fp, #-8]
    // 0x88bc70: r2 = Null
    //     0x88bc70: mov             x2, NULL
    // 0x88bc74: r1 = Null
    //     0x88bc74: mov             x1, NULL
    // 0x88bc78: branchIfSmi(r0, 0x88bca0)
    //     0x88bc78: tbz             w0, #0, #0x88bca0
    // 0x88bc7c: r4 = LoadClassIdInstr(r0)
    //     0x88bc7c: ldur            x4, [x0, #-1]
    //     0x88bc80: ubfx            x4, x4, #0xc, #0x14
    // 0x88bc84: sub             x4, x4, #0x3b
    // 0x88bc88: cmp             x4, #1
    // 0x88bc8c: b.ls            #0x88bca0
    // 0x88bc90: r8 = int
    //     0x88bc90: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88bc94: r3 = Null
    //     0x88bc94: add             x3, PP, #0x13, lsl #12  ; [pp+0x135b0] Null
    //     0x88bc98: ldr             x3, [x3, #0x5b0]
    // 0x88bc9c: r0 = int()
    //     0x88bc9c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88bca0: r0 = LoadStaticField(0xb54)
    //     0x88bca0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88bca4: ldr             x0, [x0, #0x16a8]
    // 0x88bca8: cmp             w0, NULL
    // 0x88bcac: b.ne            #0x88bcb8
    // 0x88bcb0: r0 = Null
    //     0x88bcb0: mov             x0, NULL
    // 0x88bcb4: b               #0x88bce0
    // 0x88bcb8: r17 = 347
    //     0x88bcb8: movz            x17, #0x15b
    // 0x88bcbc: ldr             w1, [x0, x17]
    // 0x88bcc0: DecompressPointer r1
    //     0x88bcc0: add             x1, x1, HEAP, lsl #32
    // 0x88bcc4: r0 = LoadClassIdInstr(r1)
    //     0x88bcc4: ldur            x0, [x1, #-1]
    //     0x88bcc8: ubfx            x0, x0, #0xc, #0x14
    // 0x88bccc: r2 = "guanCompletion"
    //     0x88bccc: add             x2, PP, #0x13, lsl #12  ; [pp+0x135c0] "guanCompletion"
    //     0x88bcd0: ldr             x2, [x2, #0x5c0]
    // 0x88bcd4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88bcd4: sub             lr, x0, #0xb4
    //     0x88bcd8: ldr             lr, [x21, lr, lsl #3]
    //     0x88bcdc: blr             lr
    // 0x88bce0: cmp             w0, NULL
    // 0x88bce4: b.ne            #0x88bcf0
    // 0x88bce8: r4 = 0
    //     0x88bce8: movz            x4, #0
    // 0x88bcec: b               #0x88bcf4
    // 0x88bcf0: mov             x4, x0
    // 0x88bcf4: ldur            x3, [fp, #-8]
    // 0x88bcf8: mov             x0, x4
    // 0x88bcfc: stur            x4, [fp, #-0x18]
    // 0x88bd00: r2 = Null
    //     0x88bd00: mov             x2, NULL
    // 0x88bd04: r1 = Null
    //     0x88bd04: mov             x1, NULL
    // 0x88bd08: branchIfSmi(r0, 0x88bd30)
    //     0x88bd08: tbz             w0, #0, #0x88bd30
    // 0x88bd0c: r4 = LoadClassIdInstr(r0)
    //     0x88bd0c: ldur            x4, [x0, #-1]
    //     0x88bd10: ubfx            x4, x4, #0xc, #0x14
    // 0x88bd14: sub             x4, x4, #0x3b
    // 0x88bd18: cmp             x4, #1
    // 0x88bd1c: b.ls            #0x88bd30
    // 0x88bd20: r8 = int
    //     0x88bd20: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88bd24: r3 = Null
    //     0x88bd24: add             x3, PP, #0x13, lsl #12  ; [pp+0x135c8] Null
    //     0x88bd28: ldr             x3, [x3, #0x5c8]
    // 0x88bd2c: r0 = int()
    //     0x88bd2c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88bd30: ldur            x0, [fp, #-8]
    // 0x88bd34: r1 = LoadInt32Instr(r0)
    //     0x88bd34: sbfx            x1, x0, #1, #0x1f
    //     0x88bd38: tbz             w0, #0, #0x88bd40
    //     0x88bd3c: ldur            x1, [x0, #7]
    // 0x88bd40: ldur            x0, [fp, #-0x18]
    // 0x88bd44: r2 = LoadInt32Instr(r0)
    //     0x88bd44: sbfx            x2, x0, #1, #0x1f
    //     0x88bd48: tbz             w0, #0, #0x88bd50
    //     0x88bd4c: ldur            x2, [x0, #7]
    // 0x88bd50: cmp             x1, x2
    // 0x88bd54: b.lt            #0x88bd60
    // 0x88bd58: mov             x0, x1
    // 0x88bd5c: b               #0x88db2c
    // 0x88bd60: mov             x0, x2
    // 0x88bd64: b               #0x88db2c
    // 0x88bd68: r16 = "guanCompletion"
    //     0x88bd68: add             x16, PP, #0x13, lsl #12  ; [pp+0x135c0] "guanCompletion"
    //     0x88bd6c: ldr             x16, [x16, #0x5c0]
    // 0x88bd70: ldur            lr, [fp, #-0x20]
    // 0x88bd74: stp             lr, x16, [SP]
    // 0x88bd78: r0 = ==()
    //     0x88bd78: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88bd7c: tbnz            w0, #4, #0x88be24
    // 0x88bd80: r0 = LoadStaticField(0xb54)
    //     0x88bd80: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88bd84: ldr             x0, [x0, #0x16a8]
    // 0x88bd88: cmp             w0, NULL
    // 0x88bd8c: b.ne            #0x88bd98
    // 0x88bd90: r0 = Null
    //     0x88bd90: mov             x0, NULL
    // 0x88bd94: b               #0x88bdc0
    // 0x88bd98: r17 = 347
    //     0x88bd98: movz            x17, #0x15b
    // 0x88bd9c: ldr             w1, [x0, x17]
    // 0x88bda0: DecompressPointer r1
    //     0x88bda0: add             x1, x1, HEAP, lsl #32
    // 0x88bda4: r0 = LoadClassIdInstr(r1)
    //     0x88bda4: ldur            x0, [x1, #-1]
    //     0x88bda8: ubfx            x0, x0, #0xc, #0x14
    // 0x88bdac: r2 = "guanCompletion"
    //     0x88bdac: add             x2, PP, #0x13, lsl #12  ; [pp+0x135c0] "guanCompletion"
    //     0x88bdb0: ldr             x2, [x2, #0x5c0]
    // 0x88bdb4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88bdb4: sub             lr, x0, #0xb4
    //     0x88bdb8: ldr             lr, [x21, lr, lsl #3]
    //     0x88bdbc: blr             lr
    // 0x88bdc0: cmp             w0, NULL
    // 0x88bdc4: b.ne            #0x88bdd0
    // 0x88bdc8: r3 = 0
    //     0x88bdc8: movz            x3, #0
    // 0x88bdcc: b               #0x88bdd4
    // 0x88bdd0: mov             x3, x0
    // 0x88bdd4: mov             x0, x3
    // 0x88bdd8: stur            x3, [fp, #-8]
    // 0x88bddc: r2 = Null
    //     0x88bddc: mov             x2, NULL
    // 0x88bde0: r1 = Null
    //     0x88bde0: mov             x1, NULL
    // 0x88bde4: branchIfSmi(r0, 0x88be0c)
    //     0x88bde4: tbz             w0, #0, #0x88be0c
    // 0x88bde8: r4 = LoadClassIdInstr(r0)
    //     0x88bde8: ldur            x4, [x0, #-1]
    //     0x88bdec: ubfx            x4, x4, #0xc, #0x14
    // 0x88bdf0: sub             x4, x4, #0x3b
    // 0x88bdf4: cmp             x4, #1
    // 0x88bdf8: b.ls            #0x88be0c
    // 0x88bdfc: r8 = int
    //     0x88bdfc: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88be00: r3 = Null
    //     0x88be00: add             x3, PP, #0x13, lsl #12  ; [pp+0x135d8] Null
    //     0x88be04: ldr             x3, [x3, #0x5d8]
    // 0x88be08: r0 = int()
    //     0x88be08: bl              #0x1524294  ; IsType_int_Stub
    // 0x88be0c: ldur            x0, [fp, #-8]
    // 0x88be10: r1 = LoadInt32Instr(r0)
    //     0x88be10: sbfx            x1, x0, #1, #0x1f
    //     0x88be14: tbz             w0, #0, #0x88be1c
    //     0x88be18: ldur            x1, [x0, #7]
    // 0x88be1c: mov             x0, x1
    // 0x88be20: b               #0x88db2c
    // 0x88be24: r16 = "lootTokenGuan"
    //     0x88be24: add             x16, PP, #0x13, lsl #12  ; [pp+0x135e8] "lootTokenGuan"
    //     0x88be28: ldr             x16, [x16, #0x5e8]
    // 0x88be2c: ldur            lr, [fp, #-0x20]
    // 0x88be30: stp             lr, x16, [SP]
    // 0x88be34: r0 = ==()
    //     0x88be34: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88be38: tbnz            w0, #4, #0x88bfd8
    // 0x88be3c: r1 = "guan"
    //     0x88be3c: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc78] "guan"
    //     0x88be40: ldr             x1, [x1, #0xc78]
    // 0x88be44: r0 = getMemory()
    //     0x88be44: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88be48: LoadField: r3 = r0->field_2b
    //     0x88be48: ldur            x3, [x0, #0x2b]
    // 0x88be4c: stur            x3, [fp, #-0x10]
    // 0x88be50: r0 = LoadStaticField(0xb54)
    //     0x88be50: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88be54: ldr             x0, [x0, #0x16a8]
    // 0x88be58: cmp             w0, NULL
    // 0x88be5c: b.ne            #0x88be68
    // 0x88be60: r0 = Null
    //     0x88be60: mov             x0, NULL
    // 0x88be64: b               #0x88be90
    // 0x88be68: r17 = 347
    //     0x88be68: movz            x17, #0x15b
    // 0x88be6c: ldr             w1, [x0, x17]
    // 0x88be70: DecompressPointer r1
    //     0x88be70: add             x1, x1, HEAP, lsl #32
    // 0x88be74: r0 = LoadClassIdInstr(r1)
    //     0x88be74: ldur            x0, [x1, #-1]
    //     0x88be78: ubfx            x0, x0, #0xc, #0x14
    // 0x88be7c: r2 = "guanCompletion"
    //     0x88be7c: add             x2, PP, #0x13, lsl #12  ; [pp+0x135c0] "guanCompletion"
    //     0x88be80: ldr             x2, [x2, #0x5c0]
    // 0x88be84: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88be84: sub             lr, x0, #0xb4
    //     0x88be88: ldr             lr, [x21, lr, lsl #3]
    //     0x88be8c: blr             lr
    // 0x88be90: cmp             w0, NULL
    // 0x88be94: b.ne            #0x88bea0
    // 0x88be98: r4 = 0
    //     0x88be98: movz            x4, #0
    // 0x88be9c: b               #0x88bea4
    // 0x88bea0: mov             x4, x0
    // 0x88bea4: ldur            x3, [fp, #-0x10]
    // 0x88bea8: mov             x0, x4
    // 0x88beac: stur            x4, [fp, #-8]
    // 0x88beb0: r2 = Null
    //     0x88beb0: mov             x2, NULL
    // 0x88beb4: r1 = Null
    //     0x88beb4: mov             x1, NULL
    // 0x88beb8: branchIfSmi(r0, 0x88bee0)
    //     0x88beb8: tbz             w0, #0, #0x88bee0
    // 0x88bebc: r4 = LoadClassIdInstr(r0)
    //     0x88bebc: ldur            x4, [x0, #-1]
    //     0x88bec0: ubfx            x4, x4, #0xc, #0x14
    // 0x88bec4: sub             x4, x4, #0x3b
    // 0x88bec8: cmp             x4, #1
    // 0x88becc: b.ls            #0x88bee0
    // 0x88bed0: r8 = int
    //     0x88bed0: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88bed4: r3 = Null
    //     0x88bed4: add             x3, PP, #0x13, lsl #12  ; [pp+0x135f0] Null
    //     0x88bed8: ldr             x3, [x3, #0x5f0]
    // 0x88bedc: r0 = int()
    //     0x88bedc: bl              #0x1524294  ; IsType_int_Stub
    // 0x88bee0: ldur            x0, [fp, #-8]
    // 0x88bee4: r1 = LoadInt32Instr(r0)
    //     0x88bee4: sbfx            x1, x0, #1, #0x1f
    //     0x88bee8: tbz             w0, #0, #0x88bef0
    //     0x88beec: ldur            x1, [x0, #7]
    // 0x88bef0: scvtf           d0, x1
    // 0x88bef4: d1 = 100.000000
    //     0x88bef4: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88bef8: ldr             d1, [x17, #0xa28]
    // 0x88befc: fdiv            d2, d0, d1
    // 0x88bf00: ldur            x0, [fp, #-0x10]
    // 0x88bf04: scvtf           d0, x0
    // 0x88bf08: fmul            d1, d2, d0
    // 0x88bf0c: fcmp            d1, d1
    // 0x88bf10: b.vs            #0x88e0b4
    // 0x88bf14: fcvtms          x2, d1
    // 0x88bf18: asr             x16, x2, #0x1e
    // 0x88bf1c: cmp             x16, x2, asr #63
    // 0x88bf20: b.ne            #0x88e0b4
    // 0x88bf24: lsl             x2, x2, #1
    // 0x88bf28: r3 = LoadInt32Instr(r2)
    //     0x88bf28: sbfx            x3, x2, #1, #0x1f
    //     0x88bf2c: tbz             w2, #0, #0x88bf34
    //     0x88bf30: ldur            x3, [x2, #7]
    // 0x88bf34: cmp             x3, x0
    // 0x88bf38: b.gt            #0x88bf50
    // 0x88bf3c: cmp             x3, #0
    // 0x88bf40: b.gt            #0x88bf4c
    // 0x88bf44: r0 = 1
    //     0x88bf44: movz            x0, #0x1
    // 0x88bf48: b               #0x88bf50
    // 0x88bf4c: mov             x0, x3
    // 0x88bf50: cmp             x1, #0x32
    // 0x88bf54: b.gt            #0x88bf94
    // 0x88bf58: d0 = 0.500000
    //     0x88bf58: fmov            d0, #0.50000000
    // 0x88bf5c: scvtf           d1, x0
    // 0x88bf60: fmul            d2, d1, d0
    // 0x88bf64: fcmp            d2, d2
    // 0x88bf68: b.vs            #0x88e0e0
    // 0x88bf6c: fcvtms          x0, d2
    // 0x88bf70: asr             x16, x0, #0x1e
    // 0x88bf74: cmp             x16, x0, asr #63
    // 0x88bf78: b.ne            #0x88e0e0
    // 0x88bf7c: lsl             x0, x0, #1
    // 0x88bf80: r1 = LoadInt32Instr(r0)
    //     0x88bf80: sbfx            x1, x0, #1, #0x1f
    //     0x88bf84: tbz             w0, #0, #0x88bf8c
    //     0x88bf88: ldur            x1, [x0, #7]
    // 0x88bf8c: mov             x0, x1
    // 0x88bf90: b               #0x88db2c
    // 0x88bf94: cmp             x1, #0x55
    // 0x88bf98: b.gt            #0x88db2c
    // 0x88bf9c: d2 = 0.750000
    //     0x88bf9c: fmov            d2, #0.75000000
    // 0x88bfa0: scvtf           d0, x0
    // 0x88bfa4: fmul            d1, d0, d2
    // 0x88bfa8: fcmp            d1, d1
    // 0x88bfac: b.vs            #0x88e100
    // 0x88bfb0: fcvtms          x0, d1
    // 0x88bfb4: asr             x16, x0, #0x1e
    // 0x88bfb8: cmp             x16, x0, asr #63
    // 0x88bfbc: b.ne            #0x88e100
    // 0x88bfc0: lsl             x0, x0, #1
    // 0x88bfc4: r1 = LoadInt32Instr(r0)
    //     0x88bfc4: sbfx            x1, x0, #1, #0x1f
    //     0x88bfc8: tbz             w0, #0, #0x88bfd0
    //     0x88bfcc: ldur            x1, [x0, #7]
    // 0x88bfd0: mov             x0, x1
    // 0x88bfd4: b               #0x88db2c
    // 0x88bfd8: d1 = 100.000000
    //     0x88bfd8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88bfdc: ldr             d1, [x17, #0xa28]
    // 0x88bfe0: d2 = 0.750000
    //     0x88bfe0: fmov            d2, #0.75000000
    // 0x88bfe4: d0 = 0.500000
    //     0x88bfe4: fmov            d0, #0.50000000
    // 0x88bfe8: r16 = "lootMoneyGuan"
    //     0x88bfe8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13600] "lootMoneyGuan"
    //     0x88bfec: ldr             x16, [x16, #0x600]
    // 0x88bff0: ldur            lr, [fp, #-0x20]
    // 0x88bff4: stp             lr, x16, [SP]
    // 0x88bff8: r0 = ==()
    //     0x88bff8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88bffc: tbnz            w0, #4, #0x88c19c
    // 0x88c000: r1 = "guan"
    //     0x88c000: add             x1, PP, #0xf, lsl #12  ; [pp+0xfc78] "guan"
    //     0x88c004: ldr             x1, [x1, #0xc78]
    // 0x88c008: r0 = getMemory()
    //     0x88c008: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88c00c: LoadField: r3 = r0->field_23
    //     0x88c00c: ldur            x3, [x0, #0x23]
    // 0x88c010: stur            x3, [fp, #-0x10]
    // 0x88c014: r0 = LoadStaticField(0xb54)
    //     0x88c014: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c018: ldr             x0, [x0, #0x16a8]
    // 0x88c01c: cmp             w0, NULL
    // 0x88c020: b.ne            #0x88c02c
    // 0x88c024: r0 = Null
    //     0x88c024: mov             x0, NULL
    // 0x88c028: b               #0x88c054
    // 0x88c02c: r17 = 347
    //     0x88c02c: movz            x17, #0x15b
    // 0x88c030: ldr             w1, [x0, x17]
    // 0x88c034: DecompressPointer r1
    //     0x88c034: add             x1, x1, HEAP, lsl #32
    // 0x88c038: r0 = LoadClassIdInstr(r1)
    //     0x88c038: ldur            x0, [x1, #-1]
    //     0x88c03c: ubfx            x0, x0, #0xc, #0x14
    // 0x88c040: r2 = "guanCompletion"
    //     0x88c040: add             x2, PP, #0x13, lsl #12  ; [pp+0x135c0] "guanCompletion"
    //     0x88c044: ldr             x2, [x2, #0x5c0]
    // 0x88c048: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c048: sub             lr, x0, #0xb4
    //     0x88c04c: ldr             lr, [x21, lr, lsl #3]
    //     0x88c050: blr             lr
    // 0x88c054: cmp             w0, NULL
    // 0x88c058: b.ne            #0x88c064
    // 0x88c05c: r4 = 0
    //     0x88c05c: movz            x4, #0
    // 0x88c060: b               #0x88c068
    // 0x88c064: mov             x4, x0
    // 0x88c068: ldur            x3, [fp, #-0x10]
    // 0x88c06c: mov             x0, x4
    // 0x88c070: stur            x4, [fp, #-8]
    // 0x88c074: r2 = Null
    //     0x88c074: mov             x2, NULL
    // 0x88c078: r1 = Null
    //     0x88c078: mov             x1, NULL
    // 0x88c07c: branchIfSmi(r0, 0x88c0a4)
    //     0x88c07c: tbz             w0, #0, #0x88c0a4
    // 0x88c080: r4 = LoadClassIdInstr(r0)
    //     0x88c080: ldur            x4, [x0, #-1]
    //     0x88c084: ubfx            x4, x4, #0xc, #0x14
    // 0x88c088: sub             x4, x4, #0x3b
    // 0x88c08c: cmp             x4, #1
    // 0x88c090: b.ls            #0x88c0a4
    // 0x88c094: r8 = int
    //     0x88c094: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c098: r3 = Null
    //     0x88c098: add             x3, PP, #0x13, lsl #12  ; [pp+0x13608] Null
    //     0x88c09c: ldr             x3, [x3, #0x608]
    // 0x88c0a0: r0 = int()
    //     0x88c0a0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c0a4: ldur            x0, [fp, #-8]
    // 0x88c0a8: r1 = LoadInt32Instr(r0)
    //     0x88c0a8: sbfx            x1, x0, #1, #0x1f
    //     0x88c0ac: tbz             w0, #0, #0x88c0b4
    //     0x88c0b0: ldur            x1, [x0, #7]
    // 0x88c0b4: scvtf           d0, x1
    // 0x88c0b8: d1 = 100.000000
    //     0x88c0b8: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88c0bc: ldr             d1, [x17, #0xa28]
    // 0x88c0c0: fdiv            d2, d0, d1
    // 0x88c0c4: ldur            x0, [fp, #-0x10]
    // 0x88c0c8: scvtf           d0, x0
    // 0x88c0cc: fmul            d1, d2, d0
    // 0x88c0d0: fcmp            d1, d1
    // 0x88c0d4: b.vs            #0x88e120
    // 0x88c0d8: fcvtms          x2, d1
    // 0x88c0dc: asr             x16, x2, #0x1e
    // 0x88c0e0: cmp             x16, x2, asr #63
    // 0x88c0e4: b.ne            #0x88e120
    // 0x88c0e8: lsl             x2, x2, #1
    // 0x88c0ec: r3 = LoadInt32Instr(r2)
    //     0x88c0ec: sbfx            x3, x2, #1, #0x1f
    //     0x88c0f0: tbz             w2, #0, #0x88c0f8
    //     0x88c0f4: ldur            x3, [x2, #7]
    // 0x88c0f8: cmp             x3, #0x64
    // 0x88c0fc: b.gt            #0x88c108
    // 0x88c100: r0 = 100
    //     0x88c100: movz            x0, #0x64
    // 0x88c104: b               #0x88c114
    // 0x88c108: cmp             x3, x0
    // 0x88c10c: b.gt            #0x88c114
    // 0x88c110: mov             x0, x3
    // 0x88c114: cmp             x1, #0x32
    // 0x88c118: b.gt            #0x88c158
    // 0x88c11c: d0 = 0.500000
    //     0x88c11c: fmov            d0, #0.50000000
    // 0x88c120: scvtf           d1, x0
    // 0x88c124: fmul            d2, d1, d0
    // 0x88c128: fcmp            d2, d2
    // 0x88c12c: b.vs            #0x88e14c
    // 0x88c130: fcvtms          x0, d2
    // 0x88c134: asr             x16, x0, #0x1e
    // 0x88c138: cmp             x16, x0, asr #63
    // 0x88c13c: b.ne            #0x88e14c
    // 0x88c140: lsl             x0, x0, #1
    // 0x88c144: r1 = LoadInt32Instr(r0)
    //     0x88c144: sbfx            x1, x0, #1, #0x1f
    //     0x88c148: tbz             w0, #0, #0x88c150
    //     0x88c14c: ldur            x1, [x0, #7]
    // 0x88c150: mov             x0, x1
    // 0x88c154: b               #0x88db2c
    // 0x88c158: cmp             x1, #0x55
    // 0x88c15c: b.gt            #0x88db2c
    // 0x88c160: d2 = 0.750000
    //     0x88c160: fmov            d2, #0.75000000
    // 0x88c164: scvtf           d0, x0
    // 0x88c168: fmul            d1, d0, d2
    // 0x88c16c: fcmp            d1, d1
    // 0x88c170: b.vs            #0x88e16c
    // 0x88c174: fcvtms          x0, d1
    // 0x88c178: asr             x16, x0, #0x1e
    // 0x88c17c: cmp             x16, x0, asr #63
    // 0x88c180: b.ne            #0x88e16c
    // 0x88c184: lsl             x0, x0, #1
    // 0x88c188: r1 = LoadInt32Instr(r0)
    //     0x88c188: sbfx            x1, x0, #1, #0x1f
    //     0x88c18c: tbz             w0, #0, #0x88c194
    //     0x88c190: ldur            x1, [x0, #7]
    // 0x88c194: mov             x0, x1
    // 0x88c198: b               #0x88db2c
    // 0x88c19c: d1 = 100.000000
    //     0x88c19c: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88c1a0: ldr             d1, [x17, #0xa28]
    // 0x88c1a4: d2 = 0.750000
    //     0x88c1a4: fmov            d2, #0.75000000
    // 0x88c1a8: d0 = 0.500000
    //     0x88c1a8: fmov            d0, #0.50000000
    // 0x88c1ac: r16 = "guanMemoryWinBadge"
    //     0x88c1ac: add             x16, PP, #0x13, lsl #12  ; [pp+0x13618] "guanMemoryWinBadge"
    //     0x88c1b0: ldr             x16, [x16, #0x618]
    // 0x88c1b4: ldur            lr, [fp, #-0x20]
    // 0x88c1b8: stp             lr, x16, [SP]
    // 0x88c1bc: r0 = ==()
    //     0x88c1bc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c1c0: tbnz            w0, #4, #0x88c28c
    // 0x88c1c4: r0 = LoadStaticField(0xb54)
    //     0x88c1c4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c1c8: ldr             x0, [x0, #0x16a8]
    // 0x88c1cc: cmp             w0, NULL
    // 0x88c1d0: b.ne            #0x88c1dc
    // 0x88c1d4: r0 = Null
    //     0x88c1d4: mov             x0, NULL
    // 0x88c1d8: b               #0x88c204
    // 0x88c1dc: r17 = 347
    //     0x88c1dc: movz            x17, #0x15b
    // 0x88c1e0: ldr             w1, [x0, x17]
    // 0x88c1e4: DecompressPointer r1
    //     0x88c1e4: add             x1, x1, HEAP, lsl #32
    // 0x88c1e8: r0 = LoadClassIdInstr(r1)
    //     0x88c1e8: ldur            x0, [x1, #-1]
    //     0x88c1ec: ubfx            x0, x0, #0xc, #0x14
    // 0x88c1f0: r2 = "guanMaxCompletion"
    //     0x88c1f0: add             x2, PP, #0x13, lsl #12  ; [pp+0x135a8] "guanMaxCompletion"
    //     0x88c1f4: ldr             x2, [x2, #0x5a8]
    // 0x88c1f8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c1f8: sub             lr, x0, #0xb4
    //     0x88c1fc: ldr             lr, [x21, lr, lsl #3]
    //     0x88c200: blr             lr
    // 0x88c204: cmp             w0, NULL
    // 0x88c208: b.ne            #0x88c214
    // 0x88c20c: r3 = 0
    //     0x88c20c: movz            x3, #0
    // 0x88c210: b               #0x88c218
    // 0x88c214: mov             x3, x0
    // 0x88c218: mov             x0, x3
    // 0x88c21c: stur            x3, [fp, #-8]
    // 0x88c220: r2 = Null
    //     0x88c220: mov             x2, NULL
    // 0x88c224: r1 = Null
    //     0x88c224: mov             x1, NULL
    // 0x88c228: branchIfSmi(r0, 0x88c250)
    //     0x88c228: tbz             w0, #0, #0x88c250
    // 0x88c22c: r4 = LoadClassIdInstr(r0)
    //     0x88c22c: ldur            x4, [x0, #-1]
    //     0x88c230: ubfx            x4, x4, #0xc, #0x14
    // 0x88c234: sub             x4, x4, #0x3b
    // 0x88c238: cmp             x4, #1
    // 0x88c23c: b.ls            #0x88c250
    // 0x88c240: r8 = int
    //     0x88c240: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c244: r3 = Null
    //     0x88c244: add             x3, PP, #0x13, lsl #12  ; [pp+0x13620] Null
    //     0x88c248: ldr             x3, [x3, #0x620]
    // 0x88c24c: r0 = int()
    //     0x88c24c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c250: ldur            x0, [fp, #-8]
    // 0x88c254: r1 = LoadInt32Instr(r0)
    //     0x88c254: sbfx            x1, x0, #1, #0x1f
    //     0x88c258: tbz             w0, #0, #0x88c260
    //     0x88c25c: ldur            x1, [x0, #7]
    // 0x88c260: cmp             x1, #0x50
    // 0x88c264: r16 = true
    //     0x88c264: add             x16, NULL, #0x20  ; true
    // 0x88c268: r17 = false
    //     0x88c268: add             x17, NULL, #0x30  ; false
    // 0x88c26c: csel            x0, x16, x17, ge
    // 0x88c270: tst             x0, #0x10
    // 0x88c274: cset            x1, ne
    // 0x88c278: sub             x1, x1, #1
    // 0x88c27c: and             x1, x1, #8
    // 0x88c280: add             x1, x1, #8
    // 0x88c284: r0 = LoadInt32Instr(r1)
    //     0x88c284: sbfx            x0, x1, #1, #0x1f
    // 0x88c288: b               #0x88db2c
    // 0x88c28c: r16 = "randomGuanMemoryMako"
    //     0x88c28c: add             x16, PP, #0x13, lsl #12  ; [pp+0x13630] "randomGuanMemoryMako"
    //     0x88c290: ldr             x16, [x16, #0x630]
    // 0x88c294: ldur            lr, [fp, #-0x20]
    // 0x88c298: stp             lr, x16, [SP]
    // 0x88c29c: r0 = ==()
    //     0x88c29c: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c2a0: tbnz            w0, #4, #0x88c3ec
    // 0x88c2a4: r0 = 8
    //     0x88c2a4: movz            x0, #0x8
    // 0x88c2a8: mov             x2, x0
    // 0x88c2ac: r1 = Null
    //     0x88c2ac: mov             x1, NULL
    // 0x88c2b0: r0 = AllocateArray()
    //     0x88c2b0: bl              #0x1502560  ; AllocateArrayStub
    // 0x88c2b4: stur            x0, [fp, #-8]
    // 0x88c2b8: StoreField: r0->field_f = rZR
    //     0x88c2b8: stur            wzr, [x0, #0xf]
    // 0x88c2bc: r17 = 2
    //     0x88c2bc: movz            x17, #0x2
    // 0x88c2c0: StoreField: r0->field_13 = r17
    //     0x88c2c0: stur            w17, [x0, #0x13]
    // 0x88c2c4: r17 = 4
    //     0x88c2c4: movz            x17, #0x4
    // 0x88c2c8: ArrayStore: r0[0] = r17  ; List_4
    //     0x88c2c8: stur            w17, [x0, #0x17]
    // 0x88c2cc: r17 = 6
    //     0x88c2cc: movz            x17, #0x6
    // 0x88c2d0: StoreField: r0->field_1b = r17
    //     0x88c2d0: stur            w17, [x0, #0x1b]
    // 0x88c2d4: r1 = Null
    //     0x88c2d4: mov             x1, NULL
    // 0x88c2d8: r0 = AllocateGrowableArray()
    //     0x88c2d8: bl              #0x1501488  ; AllocateGrowableArrayStub
    // 0x88c2dc: mov             x3, x0
    // 0x88c2e0: ldur            x0, [fp, #-8]
    // 0x88c2e4: stur            x3, [fp, #-0x18]
    // 0x88c2e8: StoreField: r3->field_f = r0
    //     0x88c2e8: stur            w0, [x3, #0xf]
    // 0x88c2ec: r0 = 8
    //     0x88c2ec: movz            x0, #0x8
    // 0x88c2f0: StoreField: r3->field_b = r0
    //     0x88c2f0: stur            w0, [x3, #0xb]
    // 0x88c2f4: r0 = LoadStaticField(0xb54)
    //     0x88c2f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c2f8: ldr             x0, [x0, #0x16a8]
    // 0x88c2fc: cmp             w0, NULL
    // 0x88c300: b.ne            #0x88c30c
    // 0x88c304: r0 = Null
    //     0x88c304: mov             x0, NULL
    // 0x88c308: b               #0x88c334
    // 0x88c30c: r17 = 347
    //     0x88c30c: movz            x17, #0x15b
    // 0x88c310: ldr             w1, [x0, x17]
    // 0x88c314: DecompressPointer r1
    //     0x88c314: add             x1, x1, HEAP, lsl #32
    // 0x88c318: r0 = LoadClassIdInstr(r1)
    //     0x88c318: ldur            x0, [x1, #-1]
    //     0x88c31c: ubfx            x0, x0, #0xc, #0x14
    // 0x88c320: r2 = "guanMemoryMako"
    //     0x88c320: add             x2, PP, #0x12, lsl #12  ; [pp+0x123a8] "guanMemoryMako"
    //     0x88c324: ldr             x2, [x2, #0x3a8]
    // 0x88c328: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c328: sub             lr, x0, #0xb4
    //     0x88c32c: ldr             lr, [x21, lr, lsl #3]
    //     0x88c330: blr             lr
    // 0x88c334: cmp             w0, NULL
    // 0x88c338: b.ne            #0x88c344
    // 0x88c33c: r3 = 0
    //     0x88c33c: movz            x3, #0
    // 0x88c340: b               #0x88c348
    // 0x88c344: mov             x3, x0
    // 0x88c348: mov             x0, x3
    // 0x88c34c: stur            x3, [fp, #-8]
    // 0x88c350: r2 = Null
    //     0x88c350: mov             x2, NULL
    // 0x88c354: r1 = Null
    //     0x88c354: mov             x1, NULL
    // 0x88c358: branchIfSmi(r0, 0x88c380)
    //     0x88c358: tbz             w0, #0, #0x88c380
    // 0x88c35c: r4 = LoadClassIdInstr(r0)
    //     0x88c35c: ldur            x4, [x0, #-1]
    //     0x88c360: ubfx            x4, x4, #0xc, #0x14
    // 0x88c364: sub             x4, x4, #0x3b
    // 0x88c368: cmp             x4, #1
    // 0x88c36c: b.ls            #0x88c380
    // 0x88c370: r8 = int
    //     0x88c370: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c374: r3 = Null
    //     0x88c374: add             x3, PP, #0x13, lsl #12  ; [pp+0x13638] Null
    //     0x88c378: ldr             x3, [x3, #0x638]
    // 0x88c37c: r0 = int()
    //     0x88c37c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c380: ldur            x1, [fp, #-0x18]
    // 0x88c384: ldur            x2, [fp, #-8]
    // 0x88c388: r0 = remove()
    //     0x88c388: bl              #0x936674  ; [dart:core] _GrowableList::remove
    // 0x88c38c: ldur            x1, [fp, #-0x18]
    // 0x88c390: r0 = shuffle()
    //     0x88c390: bl              #0x869920  ; [package:battlecross/utils.dart] ::shuffle
    // 0x88c394: mov             x1, x0
    // 0x88c398: r0 = first()
    //     0x88c398: bl              #0x9d2a40  ; [dart:core] _GrowableList::first
    // 0x88c39c: mov             x3, x0
    // 0x88c3a0: r2 = Null
    //     0x88c3a0: mov             x2, NULL
    // 0x88c3a4: r1 = Null
    //     0x88c3a4: mov             x1, NULL
    // 0x88c3a8: stur            x3, [fp, #-8]
    // 0x88c3ac: branchIfSmi(r0, 0x88c3d4)
    //     0x88c3ac: tbz             w0, #0, #0x88c3d4
    // 0x88c3b0: r4 = LoadClassIdInstr(r0)
    //     0x88c3b0: ldur            x4, [x0, #-1]
    //     0x88c3b4: ubfx            x4, x4, #0xc, #0x14
    // 0x88c3b8: sub             x4, x4, #0x3b
    // 0x88c3bc: cmp             x4, #1
    // 0x88c3c0: b.ls            #0x88c3d4
    // 0x88c3c4: r8 = int
    //     0x88c3c4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c3c8: r3 = Null
    //     0x88c3c8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13648] Null
    //     0x88c3cc: ldr             x3, [x3, #0x648]
    // 0x88c3d0: r0 = int()
    //     0x88c3d0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c3d4: ldur            x0, [fp, #-8]
    // 0x88c3d8: r1 = LoadInt32Instr(r0)
    //     0x88c3d8: sbfx            x1, x0, #1, #0x1f
    //     0x88c3dc: tbz             w0, #0, #0x88c3e4
    //     0x88c3e0: ldur            x1, [x0, #7]
    // 0x88c3e4: mov             x0, x1
    // 0x88c3e8: b               #0x88db2c
    // 0x88c3ec: r16 = "guanMemoryOptional1Completion"
    //     0x88c3ec: add             x16, PP, #0x13, lsl #12  ; [pp+0x13658] "guanMemoryOptional1Completion"
    //     0x88c3f0: ldr             x16, [x16, #0x658]
    // 0x88c3f4: ldur            lr, [fp, #-0x20]
    // 0x88c3f8: stp             lr, x16, [SP]
    // 0x88c3fc: r0 = ==()
    //     0x88c3fc: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c400: tbnz            w0, #4, #0x88c4d8
    // 0x88c404: r0 = LoadStaticField(0xb54)
    //     0x88c404: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c408: ldr             x0, [x0, #0x16a8]
    // 0x88c40c: cmp             w0, NULL
    // 0x88c410: b.ne            #0x88c41c
    // 0x88c414: r0 = Null
    //     0x88c414: mov             x0, NULL
    // 0x88c418: b               #0x88c444
    // 0x88c41c: r17 = 351
    //     0x88c41c: movz            x17, #0x15f
    // 0x88c420: ldr             w1, [x0, x17]
    // 0x88c424: DecompressPointer r1
    //     0x88c424: add             x1, x1, HEAP, lsl #32
    // 0x88c428: r0 = LoadClassIdInstr(r1)
    //     0x88c428: ldur            x0, [x1, #-1]
    //     0x88c42c: ubfx            x0, x0, #0xc, #0x14
    // 0x88c430: r2 = "guanMemoryBadge1Pass"
    //     0x88c430: add             x2, PP, #0x11, lsl #12  ; [pp+0x11f80] "guanMemoryBadge1Pass"
    //     0x88c434: ldr             x2, [x2, #0xf80]
    // 0x88c438: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c438: sub             lr, x0, #0xb4
    //     0x88c43c: ldr             lr, [x21, lr, lsl #3]
    //     0x88c440: blr             lr
    // 0x88c444: cmp             w0, NULL
    // 0x88c448: b.ne            #0x88c454
    // 0x88c44c: r3 = ""
    //     0x88c44c: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88c450: b               #0x88c458
    // 0x88c454: mov             x3, x0
    // 0x88c458: mov             x0, x3
    // 0x88c45c: stur            x3, [fp, #-8]
    // 0x88c460: r2 = Null
    //     0x88c460: mov             x2, NULL
    // 0x88c464: r1 = Null
    //     0x88c464: mov             x1, NULL
    // 0x88c468: r4 = 59
    //     0x88c468: movz            x4, #0x3b
    // 0x88c46c: branchIfSmi(r0, 0x88c478)
    //     0x88c46c: tbz             w0, #0, #0x88c478
    // 0x88c470: r4 = LoadClassIdInstr(r0)
    //     0x88c470: ldur            x4, [x0, #-1]
    //     0x88c474: ubfx            x4, x4, #0xc, #0x14
    // 0x88c478: sub             x4, x4, #0x5d
    // 0x88c47c: cmp             x4, #1
    // 0x88c480: b.ls            #0x88c494
    // 0x88c484: r8 = String
    //     0x88c484: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88c488: r3 = Null
    //     0x88c488: add             x3, PP, #0x13, lsl #12  ; [pp+0x13660] Null
    //     0x88c48c: ldr             x3, [x3, #0x660]
    // 0x88c490: r0 = String()
    //     0x88c490: bl              #0x1523244  ; IsType_String_Stub
    // 0x88c494: ldur            x0, [fp, #-8]
    // 0x88c498: r1 = LoadClassIdInstr(r0)
    //     0x88c498: ldur            x1, [x0, #-1]
    //     0x88c49c: ubfx            x1, x1, #0xc, #0x14
    // 0x88c4a0: r16 = "perfect"
    //     0x88c4a0: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x88c4a4: ldr             x16, [x16, #0x58]
    // 0x88c4a8: stp             x16, x0, [SP]
    // 0x88c4ac: mov             x0, x1
    // 0x88c4b0: mov             lr, x0
    // 0x88c4b4: ldr             lr, [x21, lr, lsl #3]
    // 0x88c4b8: blr             lr
    // 0x88c4bc: tst             x0, #0x10
    // 0x88c4c0: cset            x1, eq
    // 0x88c4c4: sub             x1, x1, #1
    // 0x88c4c8: r16 = 10
    //     0x88c4c8: movz            x16, #0xa
    // 0x88c4cc: and             x1, x1, x16
    // 0x88c4d0: r0 = LoadInt32Instr(r1)
    //     0x88c4d0: sbfx            x0, x1, #1, #0x1f
    // 0x88c4d4: b               #0x88db2c
    // 0x88c4d8: r16 = "guanMemoryOptional2Completion"
    //     0x88c4d8: add             x16, PP, #0x13, lsl #12  ; [pp+0x13670] "guanMemoryOptional2Completion"
    //     0x88c4dc: ldr             x16, [x16, #0x670]
    // 0x88c4e0: ldur            lr, [fp, #-0x20]
    // 0x88c4e4: stp             lr, x16, [SP]
    // 0x88c4e8: r0 = ==()
    //     0x88c4e8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c4ec: tbnz            w0, #4, #0x88c5c4
    // 0x88c4f0: r0 = LoadStaticField(0xb54)
    //     0x88c4f0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c4f4: ldr             x0, [x0, #0x16a8]
    // 0x88c4f8: cmp             w0, NULL
    // 0x88c4fc: b.ne            #0x88c508
    // 0x88c500: r0 = Null
    //     0x88c500: mov             x0, NULL
    // 0x88c504: b               #0x88c530
    // 0x88c508: r17 = 351
    //     0x88c508: movz            x17, #0x15f
    // 0x88c50c: ldr             w1, [x0, x17]
    // 0x88c510: DecompressPointer r1
    //     0x88c510: add             x1, x1, HEAP, lsl #32
    // 0x88c514: r0 = LoadClassIdInstr(r1)
    //     0x88c514: ldur            x0, [x1, #-1]
    //     0x88c518: ubfx            x0, x0, #0xc, #0x14
    // 0x88c51c: r2 = "guanMemoryBadge4Pass"
    //     0x88c51c: add             x2, PP, #0x12, lsl #12  ; [pp+0x121d0] "guanMemoryBadge4Pass"
    //     0x88c520: ldr             x2, [x2, #0x1d0]
    // 0x88c524: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c524: sub             lr, x0, #0xb4
    //     0x88c528: ldr             lr, [x21, lr, lsl #3]
    //     0x88c52c: blr             lr
    // 0x88c530: cmp             w0, NULL
    // 0x88c534: b.ne            #0x88c540
    // 0x88c538: r3 = ""
    //     0x88c538: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88c53c: b               #0x88c544
    // 0x88c540: mov             x3, x0
    // 0x88c544: mov             x0, x3
    // 0x88c548: stur            x3, [fp, #-8]
    // 0x88c54c: r2 = Null
    //     0x88c54c: mov             x2, NULL
    // 0x88c550: r1 = Null
    //     0x88c550: mov             x1, NULL
    // 0x88c554: r4 = 59
    //     0x88c554: movz            x4, #0x3b
    // 0x88c558: branchIfSmi(r0, 0x88c564)
    //     0x88c558: tbz             w0, #0, #0x88c564
    // 0x88c55c: r4 = LoadClassIdInstr(r0)
    //     0x88c55c: ldur            x4, [x0, #-1]
    //     0x88c560: ubfx            x4, x4, #0xc, #0x14
    // 0x88c564: sub             x4, x4, #0x5d
    // 0x88c568: cmp             x4, #1
    // 0x88c56c: b.ls            #0x88c580
    // 0x88c570: r8 = String
    //     0x88c570: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88c574: r3 = Null
    //     0x88c574: add             x3, PP, #0x13, lsl #12  ; [pp+0x13678] Null
    //     0x88c578: ldr             x3, [x3, #0x678]
    // 0x88c57c: r0 = String()
    //     0x88c57c: bl              #0x1523244  ; IsType_String_Stub
    // 0x88c580: ldur            x0, [fp, #-8]
    // 0x88c584: r1 = LoadClassIdInstr(r0)
    //     0x88c584: ldur            x1, [x0, #-1]
    //     0x88c588: ubfx            x1, x1, #0xc, #0x14
    // 0x88c58c: r16 = "perfect"
    //     0x88c58c: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x88c590: ldr             x16, [x16, #0x58]
    // 0x88c594: stp             x16, x0, [SP]
    // 0x88c598: mov             x0, x1
    // 0x88c59c: mov             lr, x0
    // 0x88c5a0: ldr             lr, [x21, lr, lsl #3]
    // 0x88c5a4: blr             lr
    // 0x88c5a8: tst             x0, #0x10
    // 0x88c5ac: cset            x1, eq
    // 0x88c5b0: sub             x1, x1, #1
    // 0x88c5b4: r16 = 10
    //     0x88c5b4: movz            x16, #0xa
    // 0x88c5b8: and             x1, x1, x16
    // 0x88c5bc: r0 = LoadInt32Instr(r1)
    //     0x88c5bc: sbfx            x0, x1, #1, #0x1f
    // 0x88c5c0: b               #0x88db2c
    // 0x88c5c4: r16 = "guanMemoryOptional3Completion"
    //     0x88c5c4: add             x16, PP, #0x13, lsl #12  ; [pp+0x13688] "guanMemoryOptional3Completion"
    //     0x88c5c8: ldr             x16, [x16, #0x688]
    // 0x88c5cc: ldur            lr, [fp, #-0x20]
    // 0x88c5d0: stp             lr, x16, [SP]
    // 0x88c5d4: r0 = ==()
    //     0x88c5d4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c5d8: tbnz            w0, #4, #0x88c6b0
    // 0x88c5dc: r0 = LoadStaticField(0xb54)
    //     0x88c5dc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c5e0: ldr             x0, [x0, #0x16a8]
    // 0x88c5e4: cmp             w0, NULL
    // 0x88c5e8: b.ne            #0x88c5f4
    // 0x88c5ec: r0 = Null
    //     0x88c5ec: mov             x0, NULL
    // 0x88c5f0: b               #0x88c61c
    // 0x88c5f4: r17 = 351
    //     0x88c5f4: movz            x17, #0x15f
    // 0x88c5f8: ldr             w1, [x0, x17]
    // 0x88c5fc: DecompressPointer r1
    //     0x88c5fc: add             x1, x1, HEAP, lsl #32
    // 0x88c600: r0 = LoadClassIdInstr(r1)
    //     0x88c600: ldur            x0, [x1, #-1]
    //     0x88c604: ubfx            x0, x0, #0xc, #0x14
    // 0x88c608: r2 = "guanMemoryBadge2Pass"
    //     0x88c608: add             x2, PP, #0x12, lsl #12  ; [pp+0x12078] "guanMemoryBadge2Pass"
    //     0x88c60c: ldr             x2, [x2, #0x78]
    // 0x88c610: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c610: sub             lr, x0, #0xb4
    //     0x88c614: ldr             lr, [x21, lr, lsl #3]
    //     0x88c618: blr             lr
    // 0x88c61c: cmp             w0, NULL
    // 0x88c620: b.ne            #0x88c62c
    // 0x88c624: r3 = ""
    //     0x88c624: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88c628: b               #0x88c630
    // 0x88c62c: mov             x3, x0
    // 0x88c630: mov             x0, x3
    // 0x88c634: stur            x3, [fp, #-8]
    // 0x88c638: r2 = Null
    //     0x88c638: mov             x2, NULL
    // 0x88c63c: r1 = Null
    //     0x88c63c: mov             x1, NULL
    // 0x88c640: r4 = 59
    //     0x88c640: movz            x4, #0x3b
    // 0x88c644: branchIfSmi(r0, 0x88c650)
    //     0x88c644: tbz             w0, #0, #0x88c650
    // 0x88c648: r4 = LoadClassIdInstr(r0)
    //     0x88c648: ldur            x4, [x0, #-1]
    //     0x88c64c: ubfx            x4, x4, #0xc, #0x14
    // 0x88c650: sub             x4, x4, #0x5d
    // 0x88c654: cmp             x4, #1
    // 0x88c658: b.ls            #0x88c66c
    // 0x88c65c: r8 = String
    //     0x88c65c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88c660: r3 = Null
    //     0x88c660: add             x3, PP, #0x13, lsl #12  ; [pp+0x13690] Null
    //     0x88c664: ldr             x3, [x3, #0x690]
    // 0x88c668: r0 = String()
    //     0x88c668: bl              #0x1523244  ; IsType_String_Stub
    // 0x88c66c: ldur            x0, [fp, #-8]
    // 0x88c670: r1 = LoadClassIdInstr(r0)
    //     0x88c670: ldur            x1, [x0, #-1]
    //     0x88c674: ubfx            x1, x1, #0xc, #0x14
    // 0x88c678: r16 = "perfect"
    //     0x88c678: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x88c67c: ldr             x16, [x16, #0x58]
    // 0x88c680: stp             x16, x0, [SP]
    // 0x88c684: mov             x0, x1
    // 0x88c688: mov             lr, x0
    // 0x88c68c: ldr             lr, [x21, lr, lsl #3]
    // 0x88c690: blr             lr
    // 0x88c694: tst             x0, #0x10
    // 0x88c698: cset            x1, eq
    // 0x88c69c: sub             x1, x1, #1
    // 0x88c6a0: r16 = 10
    //     0x88c6a0: movz            x16, #0xa
    // 0x88c6a4: and             x1, x1, x16
    // 0x88c6a8: r0 = LoadInt32Instr(r1)
    //     0x88c6a8: sbfx            x0, x1, #1, #0x1f
    // 0x88c6ac: b               #0x88db2c
    // 0x88c6b0: r16 = "guanMemoryOptional4Completion"
    //     0x88c6b0: add             x16, PP, #0x13, lsl #12  ; [pp+0x136a0] "guanMemoryOptional4Completion"
    //     0x88c6b4: ldr             x16, [x16, #0x6a0]
    // 0x88c6b8: ldur            lr, [fp, #-0x20]
    // 0x88c6bc: stp             lr, x16, [SP]
    // 0x88c6c0: r0 = ==()
    //     0x88c6c0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c6c4: tbnz            w0, #4, #0x88c79c
    // 0x88c6c8: r0 = LoadStaticField(0xb54)
    //     0x88c6c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c6cc: ldr             x0, [x0, #0x16a8]
    // 0x88c6d0: cmp             w0, NULL
    // 0x88c6d4: b.ne            #0x88c6e0
    // 0x88c6d8: r0 = Null
    //     0x88c6d8: mov             x0, NULL
    // 0x88c6dc: b               #0x88c708
    // 0x88c6e0: r17 = 351
    //     0x88c6e0: movz            x17, #0x15f
    // 0x88c6e4: ldr             w1, [x0, x17]
    // 0x88c6e8: DecompressPointer r1
    //     0x88c6e8: add             x1, x1, HEAP, lsl #32
    // 0x88c6ec: r0 = LoadClassIdInstr(r1)
    //     0x88c6ec: ldur            x0, [x1, #-1]
    //     0x88c6f0: ubfx            x0, x0, #0xc, #0x14
    // 0x88c6f4: r2 = "guanMemoryBadge5Pass"
    //     0x88c6f4: add             x2, PP, #0x12, lsl #12  ; [pp+0x12280] "guanMemoryBadge5Pass"
    //     0x88c6f8: ldr             x2, [x2, #0x280]
    // 0x88c6fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c6fc: sub             lr, x0, #0xb4
    //     0x88c700: ldr             lr, [x21, lr, lsl #3]
    //     0x88c704: blr             lr
    // 0x88c708: cmp             w0, NULL
    // 0x88c70c: b.ne            #0x88c718
    // 0x88c710: r3 = ""
    //     0x88c710: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88c714: b               #0x88c71c
    // 0x88c718: mov             x3, x0
    // 0x88c71c: mov             x0, x3
    // 0x88c720: stur            x3, [fp, #-8]
    // 0x88c724: r2 = Null
    //     0x88c724: mov             x2, NULL
    // 0x88c728: r1 = Null
    //     0x88c728: mov             x1, NULL
    // 0x88c72c: r4 = 59
    //     0x88c72c: movz            x4, #0x3b
    // 0x88c730: branchIfSmi(r0, 0x88c73c)
    //     0x88c730: tbz             w0, #0, #0x88c73c
    // 0x88c734: r4 = LoadClassIdInstr(r0)
    //     0x88c734: ldur            x4, [x0, #-1]
    //     0x88c738: ubfx            x4, x4, #0xc, #0x14
    // 0x88c73c: sub             x4, x4, #0x5d
    // 0x88c740: cmp             x4, #1
    // 0x88c744: b.ls            #0x88c758
    // 0x88c748: r8 = String
    //     0x88c748: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88c74c: r3 = Null
    //     0x88c74c: add             x3, PP, #0x13, lsl #12  ; [pp+0x136a8] Null
    //     0x88c750: ldr             x3, [x3, #0x6a8]
    // 0x88c754: r0 = String()
    //     0x88c754: bl              #0x1523244  ; IsType_String_Stub
    // 0x88c758: ldur            x0, [fp, #-8]
    // 0x88c75c: r1 = LoadClassIdInstr(r0)
    //     0x88c75c: ldur            x1, [x0, #-1]
    //     0x88c760: ubfx            x1, x1, #0xc, #0x14
    // 0x88c764: r16 = "perfect"
    //     0x88c764: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x88c768: ldr             x16, [x16, #0x58]
    // 0x88c76c: stp             x16, x0, [SP]
    // 0x88c770: mov             x0, x1
    // 0x88c774: mov             lr, x0
    // 0x88c778: ldr             lr, [x21, lr, lsl #3]
    // 0x88c77c: blr             lr
    // 0x88c780: tst             x0, #0x10
    // 0x88c784: cset            x1, eq
    // 0x88c788: sub             x1, x1, #1
    // 0x88c78c: r16 = 10
    //     0x88c78c: movz            x16, #0xa
    // 0x88c790: and             x1, x1, x16
    // 0x88c794: r0 = LoadInt32Instr(r1)
    //     0x88c794: sbfx            x0, x1, #1, #0x1f
    // 0x88c798: b               #0x88db2c
    // 0x88c79c: r16 = "guanMemoryOptional5Completion"
    //     0x88c79c: add             x16, PP, #0x13, lsl #12  ; [pp+0x136b8] "guanMemoryOptional5Completion"
    //     0x88c7a0: ldr             x16, [x16, #0x6b8]
    // 0x88c7a4: ldur            lr, [fp, #-0x20]
    // 0x88c7a8: stp             lr, x16, [SP]
    // 0x88c7ac: r0 = ==()
    //     0x88c7ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c7b0: tbnz            w0, #4, #0x88c888
    // 0x88c7b4: r0 = LoadStaticField(0xb54)
    //     0x88c7b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c7b8: ldr             x0, [x0, #0x16a8]
    // 0x88c7bc: cmp             w0, NULL
    // 0x88c7c0: b.ne            #0x88c7cc
    // 0x88c7c4: r0 = Null
    //     0x88c7c4: mov             x0, NULL
    // 0x88c7c8: b               #0x88c7f4
    // 0x88c7cc: r17 = 351
    //     0x88c7cc: movz            x17, #0x15f
    // 0x88c7d0: ldr             w1, [x0, x17]
    // 0x88c7d4: DecompressPointer r1
    //     0x88c7d4: add             x1, x1, HEAP, lsl #32
    // 0x88c7d8: r0 = LoadClassIdInstr(r1)
    //     0x88c7d8: ldur            x0, [x1, #-1]
    //     0x88c7dc: ubfx            x0, x0, #0xc, #0x14
    // 0x88c7e0: r2 = "guanMemoryBadge3Pass"
    //     0x88c7e0: add             x2, PP, #0x12, lsl #12  ; [pp+0x12120] "guanMemoryBadge3Pass"
    //     0x88c7e4: ldr             x2, [x2, #0x120]
    // 0x88c7e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c7e8: sub             lr, x0, #0xb4
    //     0x88c7ec: ldr             lr, [x21, lr, lsl #3]
    //     0x88c7f0: blr             lr
    // 0x88c7f4: cmp             w0, NULL
    // 0x88c7f8: b.ne            #0x88c804
    // 0x88c7fc: r3 = ""
    //     0x88c7fc: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x88c800: b               #0x88c808
    // 0x88c804: mov             x3, x0
    // 0x88c808: mov             x0, x3
    // 0x88c80c: stur            x3, [fp, #-8]
    // 0x88c810: r2 = Null
    //     0x88c810: mov             x2, NULL
    // 0x88c814: r1 = Null
    //     0x88c814: mov             x1, NULL
    // 0x88c818: r4 = 59
    //     0x88c818: movz            x4, #0x3b
    // 0x88c81c: branchIfSmi(r0, 0x88c828)
    //     0x88c81c: tbz             w0, #0, #0x88c828
    // 0x88c820: r4 = LoadClassIdInstr(r0)
    //     0x88c820: ldur            x4, [x0, #-1]
    //     0x88c824: ubfx            x4, x4, #0xc, #0x14
    // 0x88c828: sub             x4, x4, #0x5d
    // 0x88c82c: cmp             x4, #1
    // 0x88c830: b.ls            #0x88c844
    // 0x88c834: r8 = String
    //     0x88c834: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x88c838: r3 = Null
    //     0x88c838: add             x3, PP, #0x13, lsl #12  ; [pp+0x136c0] Null
    //     0x88c83c: ldr             x3, [x3, #0x6c0]
    // 0x88c840: r0 = String()
    //     0x88c840: bl              #0x1523244  ; IsType_String_Stub
    // 0x88c844: ldur            x0, [fp, #-8]
    // 0x88c848: r1 = LoadClassIdInstr(r0)
    //     0x88c848: ldur            x1, [x0, #-1]
    //     0x88c84c: ubfx            x1, x1, #0xc, #0x14
    // 0x88c850: r16 = "perfect"
    //     0x88c850: add             x16, PP, #0x12, lsl #12  ; [pp+0x12058] "perfect"
    //     0x88c854: ldr             x16, [x16, #0x58]
    // 0x88c858: stp             x16, x0, [SP]
    // 0x88c85c: mov             x0, x1
    // 0x88c860: mov             lr, x0
    // 0x88c864: ldr             lr, [x21, lr, lsl #3]
    // 0x88c868: blr             lr
    // 0x88c86c: tst             x0, #0x10
    // 0x88c870: cset            x1, eq
    // 0x88c874: sub             x1, x1, #1
    // 0x88c878: r16 = 10
    //     0x88c878: movz            x16, #0xa
    // 0x88c87c: and             x1, x1, x16
    // 0x88c880: r0 = LoadInt32Instr(r1)
    //     0x88c880: sbfx            x0, x1, #1, #0x1f
    // 0x88c884: b               #0x88db2c
    // 0x88c888: r16 = "oldjimaMaxCompletion"
    //     0x88c888: add             x16, PP, #0x13, lsl #12  ; [pp+0x136d0] "oldjimaMaxCompletion"
    //     0x88c88c: ldr             x16, [x16, #0x6d0]
    // 0x88c890: ldur            lr, [fp, #-0x20]
    // 0x88c894: stp             lr, x16, [SP]
    // 0x88c898: r0 = ==()
    //     0x88c898: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88c89c: tbnz            w0, #4, #0x88c9f4
    // 0x88c8a0: r0 = LoadStaticField(0xb54)
    //     0x88c8a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c8a4: ldr             x0, [x0, #0x16a8]
    // 0x88c8a8: cmp             w0, NULL
    // 0x88c8ac: b.ne            #0x88c8b8
    // 0x88c8b0: r0 = Null
    //     0x88c8b0: mov             x0, NULL
    // 0x88c8b4: b               #0x88c8e0
    // 0x88c8b8: r17 = 347
    //     0x88c8b8: movz            x17, #0x15b
    // 0x88c8bc: ldr             w1, [x0, x17]
    // 0x88c8c0: DecompressPointer r1
    //     0x88c8c0: add             x1, x1, HEAP, lsl #32
    // 0x88c8c4: r0 = LoadClassIdInstr(r1)
    //     0x88c8c4: ldur            x0, [x1, #-1]
    //     0x88c8c8: ubfx            x0, x0, #0xc, #0x14
    // 0x88c8cc: r2 = "oldjimaMaxCompletion"
    //     0x88c8cc: add             x2, PP, #0x13, lsl #12  ; [pp+0x136d0] "oldjimaMaxCompletion"
    //     0x88c8d0: ldr             x2, [x2, #0x6d0]
    // 0x88c8d4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c8d4: sub             lr, x0, #0xb4
    //     0x88c8d8: ldr             lr, [x21, lr, lsl #3]
    //     0x88c8dc: blr             lr
    // 0x88c8e0: cmp             w0, NULL
    // 0x88c8e4: b.ne            #0x88c8f0
    // 0x88c8e8: r3 = 0
    //     0x88c8e8: movz            x3, #0
    // 0x88c8ec: b               #0x88c8f4
    // 0x88c8f0: mov             x3, x0
    // 0x88c8f4: mov             x0, x3
    // 0x88c8f8: stur            x3, [fp, #-8]
    // 0x88c8fc: r2 = Null
    //     0x88c8fc: mov             x2, NULL
    // 0x88c900: r1 = Null
    //     0x88c900: mov             x1, NULL
    // 0x88c904: branchIfSmi(r0, 0x88c92c)
    //     0x88c904: tbz             w0, #0, #0x88c92c
    // 0x88c908: r4 = LoadClassIdInstr(r0)
    //     0x88c908: ldur            x4, [x0, #-1]
    //     0x88c90c: ubfx            x4, x4, #0xc, #0x14
    // 0x88c910: sub             x4, x4, #0x3b
    // 0x88c914: cmp             x4, #1
    // 0x88c918: b.ls            #0x88c92c
    // 0x88c91c: r8 = int
    //     0x88c91c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c920: r3 = Null
    //     0x88c920: add             x3, PP, #0x13, lsl #12  ; [pp+0x136d8] Null
    //     0x88c924: ldr             x3, [x3, #0x6d8]
    // 0x88c928: r0 = int()
    //     0x88c928: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c92c: r0 = LoadStaticField(0xb54)
    //     0x88c92c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88c930: ldr             x0, [x0, #0x16a8]
    // 0x88c934: cmp             w0, NULL
    // 0x88c938: b.ne            #0x88c944
    // 0x88c93c: r0 = Null
    //     0x88c93c: mov             x0, NULL
    // 0x88c940: b               #0x88c96c
    // 0x88c944: r17 = 347
    //     0x88c944: movz            x17, #0x15b
    // 0x88c948: ldr             w1, [x0, x17]
    // 0x88c94c: DecompressPointer r1
    //     0x88c94c: add             x1, x1, HEAP, lsl #32
    // 0x88c950: r0 = LoadClassIdInstr(r1)
    //     0x88c950: ldur            x0, [x1, #-1]
    //     0x88c954: ubfx            x0, x0, #0xc, #0x14
    // 0x88c958: r2 = "oldjimaCompletion"
    //     0x88c958: add             x2, PP, #0x13, lsl #12  ; [pp+0x136e8] "oldjimaCompletion"
    //     0x88c95c: ldr             x2, [x2, #0x6e8]
    // 0x88c960: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88c960: sub             lr, x0, #0xb4
    //     0x88c964: ldr             lr, [x21, lr, lsl #3]
    //     0x88c968: blr             lr
    // 0x88c96c: cmp             w0, NULL
    // 0x88c970: b.ne            #0x88c97c
    // 0x88c974: r4 = 0
    //     0x88c974: movz            x4, #0
    // 0x88c978: b               #0x88c980
    // 0x88c97c: mov             x4, x0
    // 0x88c980: ldur            x3, [fp, #-8]
    // 0x88c984: mov             x0, x4
    // 0x88c988: stur            x4, [fp, #-0x18]
    // 0x88c98c: r2 = Null
    //     0x88c98c: mov             x2, NULL
    // 0x88c990: r1 = Null
    //     0x88c990: mov             x1, NULL
    // 0x88c994: branchIfSmi(r0, 0x88c9bc)
    //     0x88c994: tbz             w0, #0, #0x88c9bc
    // 0x88c998: r4 = LoadClassIdInstr(r0)
    //     0x88c998: ldur            x4, [x0, #-1]
    //     0x88c99c: ubfx            x4, x4, #0xc, #0x14
    // 0x88c9a0: sub             x4, x4, #0x3b
    // 0x88c9a4: cmp             x4, #1
    // 0x88c9a8: b.ls            #0x88c9bc
    // 0x88c9ac: r8 = int
    //     0x88c9ac: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88c9b0: r3 = Null
    //     0x88c9b0: add             x3, PP, #0x13, lsl #12  ; [pp+0x136f0] Null
    //     0x88c9b4: ldr             x3, [x3, #0x6f0]
    // 0x88c9b8: r0 = int()
    //     0x88c9b8: bl              #0x1524294  ; IsType_int_Stub
    // 0x88c9bc: ldur            x0, [fp, #-8]
    // 0x88c9c0: r1 = LoadInt32Instr(r0)
    //     0x88c9c0: sbfx            x1, x0, #1, #0x1f
    //     0x88c9c4: tbz             w0, #0, #0x88c9cc
    //     0x88c9c8: ldur            x1, [x0, #7]
    // 0x88c9cc: ldur            x0, [fp, #-0x18]
    // 0x88c9d0: r2 = LoadInt32Instr(r0)
    //     0x88c9d0: sbfx            x2, x0, #1, #0x1f
    //     0x88c9d4: tbz             w0, #0, #0x88c9dc
    //     0x88c9d8: ldur            x2, [x0, #7]
    // 0x88c9dc: cmp             x1, x2
    // 0x88c9e0: b.lt            #0x88c9ec
    // 0x88c9e4: mov             x0, x1
    // 0x88c9e8: b               #0x88db2c
    // 0x88c9ec: mov             x0, x2
    // 0x88c9f0: b               #0x88db2c
    // 0x88c9f4: r16 = "oldjimaCompletion"
    //     0x88c9f4: add             x16, PP, #0x13, lsl #12  ; [pp+0x136e8] "oldjimaCompletion"
    //     0x88c9f8: ldr             x16, [x16, #0x6e8]
    // 0x88c9fc: ldur            lr, [fp, #-0x20]
    // 0x88ca00: stp             lr, x16, [SP]
    // 0x88ca04: r0 = ==()
    //     0x88ca04: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88ca08: tbnz            w0, #4, #0x88cab0
    // 0x88ca0c: r0 = LoadStaticField(0xb54)
    //     0x88ca0c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ca10: ldr             x0, [x0, #0x16a8]
    // 0x88ca14: cmp             w0, NULL
    // 0x88ca18: b.ne            #0x88ca24
    // 0x88ca1c: r0 = Null
    //     0x88ca1c: mov             x0, NULL
    // 0x88ca20: b               #0x88ca4c
    // 0x88ca24: r17 = 347
    //     0x88ca24: movz            x17, #0x15b
    // 0x88ca28: ldr             w1, [x0, x17]
    // 0x88ca2c: DecompressPointer r1
    //     0x88ca2c: add             x1, x1, HEAP, lsl #32
    // 0x88ca30: r0 = LoadClassIdInstr(r1)
    //     0x88ca30: ldur            x0, [x1, #-1]
    //     0x88ca34: ubfx            x0, x0, #0xc, #0x14
    // 0x88ca38: r2 = "oldjimaCompletion"
    //     0x88ca38: add             x2, PP, #0x13, lsl #12  ; [pp+0x136e8] "oldjimaCompletion"
    //     0x88ca3c: ldr             x2, [x2, #0x6e8]
    // 0x88ca40: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ca40: sub             lr, x0, #0xb4
    //     0x88ca44: ldr             lr, [x21, lr, lsl #3]
    //     0x88ca48: blr             lr
    // 0x88ca4c: cmp             w0, NULL
    // 0x88ca50: b.ne            #0x88ca5c
    // 0x88ca54: r3 = 0
    //     0x88ca54: movz            x3, #0
    // 0x88ca58: b               #0x88ca60
    // 0x88ca5c: mov             x3, x0
    // 0x88ca60: mov             x0, x3
    // 0x88ca64: stur            x3, [fp, #-8]
    // 0x88ca68: r2 = Null
    //     0x88ca68: mov             x2, NULL
    // 0x88ca6c: r1 = Null
    //     0x88ca6c: mov             x1, NULL
    // 0x88ca70: branchIfSmi(r0, 0x88ca98)
    //     0x88ca70: tbz             w0, #0, #0x88ca98
    // 0x88ca74: r4 = LoadClassIdInstr(r0)
    //     0x88ca74: ldur            x4, [x0, #-1]
    //     0x88ca78: ubfx            x4, x4, #0xc, #0x14
    // 0x88ca7c: sub             x4, x4, #0x3b
    // 0x88ca80: cmp             x4, #1
    // 0x88ca84: b.ls            #0x88ca98
    // 0x88ca88: r8 = int
    //     0x88ca88: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88ca8c: r3 = Null
    //     0x88ca8c: add             x3, PP, #0x13, lsl #12  ; [pp+0x13700] Null
    //     0x88ca90: ldr             x3, [x3, #0x700]
    // 0x88ca94: r0 = int()
    //     0x88ca94: bl              #0x1524294  ; IsType_int_Stub
    // 0x88ca98: ldur            x0, [fp, #-8]
    // 0x88ca9c: r1 = LoadInt32Instr(r0)
    //     0x88ca9c: sbfx            x1, x0, #1, #0x1f
    //     0x88caa0: tbz             w0, #0, #0x88caa8
    //     0x88caa4: ldur            x1, [x0, #7]
    // 0x88caa8: mov             x0, x1
    // 0x88caac: b               #0x88db2c
    // 0x88cab0: r16 = "lootTokenOldJima"
    //     0x88cab0: add             x16, PP, #0x13, lsl #12  ; [pp+0x13710] "lootTokenOldJima"
    //     0x88cab4: ldr             x16, [x16, #0x710]
    // 0x88cab8: ldur            lr, [fp, #-0x20]
    // 0x88cabc: stp             lr, x16, [SP]
    // 0x88cac0: r0 = ==()
    //     0x88cac0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88cac4: tbnz            w0, #4, #0x88cc80
    // 0x88cac8: r1 = "oldjima"
    //     0x88cac8: add             x1, PP, #0x13, lsl #12  ; [pp+0x13718] "oldjima"
    //     0x88cacc: ldr             x1, [x1, #0x718]
    // 0x88cad0: r0 = getMemory()
    //     0x88cad0: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88cad4: LoadField: r3 = r0->field_2b
    //     0x88cad4: ldur            x3, [x0, #0x2b]
    // 0x88cad8: stur            x3, [fp, #-0x10]
    // 0x88cadc: r0 = LoadStaticField(0xb54)
    //     0x88cadc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88cae0: ldr             x0, [x0, #0x16a8]
    // 0x88cae4: cmp             w0, NULL
    // 0x88cae8: b.ne            #0x88caf4
    // 0x88caec: r0 = Null
    //     0x88caec: mov             x0, NULL
    // 0x88caf0: b               #0x88cb1c
    // 0x88caf4: r17 = 347
    //     0x88caf4: movz            x17, #0x15b
    // 0x88caf8: ldr             w1, [x0, x17]
    // 0x88cafc: DecompressPointer r1
    //     0x88cafc: add             x1, x1, HEAP, lsl #32
    // 0x88cb00: r0 = LoadClassIdInstr(r1)
    //     0x88cb00: ldur            x0, [x1, #-1]
    //     0x88cb04: ubfx            x0, x0, #0xc, #0x14
    // 0x88cb08: r2 = "oldjimaCompletion"
    //     0x88cb08: add             x2, PP, #0x13, lsl #12  ; [pp+0x136e8] "oldjimaCompletion"
    //     0x88cb0c: ldr             x2, [x2, #0x6e8]
    // 0x88cb10: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88cb10: sub             lr, x0, #0xb4
    //     0x88cb14: ldr             lr, [x21, lr, lsl #3]
    //     0x88cb18: blr             lr
    // 0x88cb1c: cmp             w0, NULL
    // 0x88cb20: b.ne            #0x88cb2c
    // 0x88cb24: r4 = 0
    //     0x88cb24: movz            x4, #0
    // 0x88cb28: b               #0x88cb30
    // 0x88cb2c: mov             x4, x0
    // 0x88cb30: ldur            x3, [fp, #-0x10]
    // 0x88cb34: mov             x0, x4
    // 0x88cb38: stur            x4, [fp, #-8]
    // 0x88cb3c: r2 = Null
    //     0x88cb3c: mov             x2, NULL
    // 0x88cb40: r1 = Null
    //     0x88cb40: mov             x1, NULL
    // 0x88cb44: branchIfSmi(r0, 0x88cb6c)
    //     0x88cb44: tbz             w0, #0, #0x88cb6c
    // 0x88cb48: r4 = LoadClassIdInstr(r0)
    //     0x88cb48: ldur            x4, [x0, #-1]
    //     0x88cb4c: ubfx            x4, x4, #0xc, #0x14
    // 0x88cb50: sub             x4, x4, #0x3b
    // 0x88cb54: cmp             x4, #1
    // 0x88cb58: b.ls            #0x88cb6c
    // 0x88cb5c: r8 = int
    //     0x88cb5c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88cb60: r3 = Null
    //     0x88cb60: add             x3, PP, #0x13, lsl #12  ; [pp+0x13720] Null
    //     0x88cb64: ldr             x3, [x3, #0x720]
    // 0x88cb68: r0 = int()
    //     0x88cb68: bl              #0x1524294  ; IsType_int_Stub
    // 0x88cb6c: ldur            x0, [fp, #-8]
    // 0x88cb70: r1 = LoadInt32Instr(r0)
    //     0x88cb70: sbfx            x1, x0, #1, #0x1f
    //     0x88cb74: tbz             w0, #0, #0x88cb7c
    //     0x88cb78: ldur            x1, [x0, #7]
    // 0x88cb7c: scvtf           d0, x1
    // 0x88cb80: d1 = 100.000000
    //     0x88cb80: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88cb84: ldr             d1, [x17, #0xa28]
    // 0x88cb88: fdiv            d2, d0, d1
    // 0x88cb8c: ldur            x0, [fp, #-0x10]
    // 0x88cb90: scvtf           d0, x0
    // 0x88cb94: fmul            d1, d2, d0
    // 0x88cb98: fcmp            d1, d1
    // 0x88cb9c: b.vs            #0x88e18c
    // 0x88cba0: fcvtms          x2, d1
    // 0x88cba4: asr             x16, x2, #0x1e
    // 0x88cba8: cmp             x16, x2, asr #63
    // 0x88cbac: b.ne            #0x88e18c
    // 0x88cbb0: lsl             x2, x2, #1
    // 0x88cbb4: cmp             x1, #0x32
    // 0x88cbb8: b.gt            #0x88cc04
    // 0x88cbbc: d0 = 0.500000
    //     0x88cbbc: fmov            d0, #0.50000000
    // 0x88cbc0: r1 = LoadInt32Instr(r2)
    //     0x88cbc0: sbfx            x1, x2, #1, #0x1f
    //     0x88cbc4: tbz             w2, #0, #0x88cbcc
    //     0x88cbc8: ldur            x1, [x2, #7]
    // 0x88cbcc: scvtf           d1, x1
    // 0x88cbd0: fmul            d2, d1, d0
    // 0x88cbd4: fcmp            d2, d2
    // 0x88cbd8: b.vs            #0x88e1b8
    // 0x88cbdc: fcvtms          x1, d2
    // 0x88cbe0: asr             x16, x1, #0x1e
    // 0x88cbe4: cmp             x16, x1, asr #63
    // 0x88cbe8: b.ne            #0x88e1b8
    // 0x88cbec: lsl             x1, x1, #1
    // 0x88cbf0: r2 = LoadInt32Instr(r1)
    //     0x88cbf0: sbfx            x2, x1, #1, #0x1f
    //     0x88cbf4: tbz             w1, #0, #0x88cbfc
    //     0x88cbf8: ldur            x2, [x1, #7]
    // 0x88cbfc: mov             x1, x2
    // 0x88cc00: b               #0x88cc60
    // 0x88cc04: cmp             x1, #0x55
    // 0x88cc08: b.gt            #0x88cc54
    // 0x88cc0c: d2 = 0.750000
    //     0x88cc0c: fmov            d2, #0.75000000
    // 0x88cc10: r1 = LoadInt32Instr(r2)
    //     0x88cc10: sbfx            x1, x2, #1, #0x1f
    //     0x88cc14: tbz             w2, #0, #0x88cc1c
    //     0x88cc18: ldur            x1, [x2, #7]
    // 0x88cc1c: scvtf           d0, x1
    // 0x88cc20: fmul            d1, d0, d2
    // 0x88cc24: fcmp            d1, d1
    // 0x88cc28: b.vs            #0x88e1e4
    // 0x88cc2c: fcvtms          x1, d1
    // 0x88cc30: asr             x16, x1, #0x1e
    // 0x88cc34: cmp             x16, x1, asr #63
    // 0x88cc38: b.ne            #0x88e1e4
    // 0x88cc3c: lsl             x1, x1, #1
    // 0x88cc40: r2 = LoadInt32Instr(r1)
    //     0x88cc40: sbfx            x2, x1, #1, #0x1f
    //     0x88cc44: tbz             w1, #0, #0x88cc4c
    //     0x88cc48: ldur            x2, [x1, #7]
    // 0x88cc4c: mov             x1, x2
    // 0x88cc50: b               #0x88cc60
    // 0x88cc54: r1 = LoadInt32Instr(r2)
    //     0x88cc54: sbfx            x1, x2, #1, #0x1f
    //     0x88cc58: tbz             w2, #0, #0x88cc60
    //     0x88cc5c: ldur            x1, [x2, #7]
    // 0x88cc60: cmp             x1, x0
    // 0x88cc64: b.gt            #0x88db2c
    // 0x88cc68: cmp             x1, #0
    // 0x88cc6c: b.gt            #0x88cc78
    // 0x88cc70: r0 = 1
    //     0x88cc70: movz            x0, #0x1
    // 0x88cc74: b               #0x88db2c
    // 0x88cc78: mov             x0, x1
    // 0x88cc7c: b               #0x88db2c
    // 0x88cc80: d1 = 100.000000
    //     0x88cc80: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88cc84: ldr             d1, [x17, #0xa28]
    // 0x88cc88: d2 = 0.750000
    //     0x88cc88: fmov            d2, #0.75000000
    // 0x88cc8c: d0 = 0.500000
    //     0x88cc8c: fmov            d0, #0.50000000
    // 0x88cc90: r16 = "lootMoneyOldJima"
    //     0x88cc90: add             x16, PP, #0x13, lsl #12  ; [pp+0x13730] "lootMoneyOldJima"
    //     0x88cc94: ldr             x16, [x16, #0x730]
    // 0x88cc98: ldur            lr, [fp, #-0x20]
    // 0x88cc9c: stp             lr, x16, [SP]
    // 0x88cca0: r0 = ==()
    //     0x88cca0: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88cca4: tbnz            w0, #4, #0x88ce60
    // 0x88cca8: r1 = "oldjima"
    //     0x88cca8: add             x1, PP, #0x13, lsl #12  ; [pp+0x13718] "oldjima"
    //     0x88ccac: ldr             x1, [x1, #0x718]
    // 0x88ccb0: r0 = getMemory()
    //     0x88ccb0: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88ccb4: LoadField: r3 = r0->field_23
    //     0x88ccb4: ldur            x3, [x0, #0x23]
    // 0x88ccb8: stur            x3, [fp, #-0x10]
    // 0x88ccbc: r0 = LoadStaticField(0xb54)
    //     0x88ccbc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ccc0: ldr             x0, [x0, #0x16a8]
    // 0x88ccc4: cmp             w0, NULL
    // 0x88ccc8: b.ne            #0x88ccd4
    // 0x88cccc: r0 = Null
    //     0x88cccc: mov             x0, NULL
    // 0x88ccd0: b               #0x88ccfc
    // 0x88ccd4: r17 = 347
    //     0x88ccd4: movz            x17, #0x15b
    // 0x88ccd8: ldr             w1, [x0, x17]
    // 0x88ccdc: DecompressPointer r1
    //     0x88ccdc: add             x1, x1, HEAP, lsl #32
    // 0x88cce0: r0 = LoadClassIdInstr(r1)
    //     0x88cce0: ldur            x0, [x1, #-1]
    //     0x88cce4: ubfx            x0, x0, #0xc, #0x14
    // 0x88cce8: r2 = "oldjimaCompletion"
    //     0x88cce8: add             x2, PP, #0x13, lsl #12  ; [pp+0x136e8] "oldjimaCompletion"
    //     0x88ccec: ldr             x2, [x2, #0x6e8]
    // 0x88ccf0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88ccf0: sub             lr, x0, #0xb4
    //     0x88ccf4: ldr             lr, [x21, lr, lsl #3]
    //     0x88ccf8: blr             lr
    // 0x88ccfc: cmp             w0, NULL
    // 0x88cd00: b.ne            #0x88cd0c
    // 0x88cd04: r4 = 0
    //     0x88cd04: movz            x4, #0
    // 0x88cd08: b               #0x88cd10
    // 0x88cd0c: mov             x4, x0
    // 0x88cd10: ldur            x3, [fp, #-0x10]
    // 0x88cd14: mov             x0, x4
    // 0x88cd18: stur            x4, [fp, #-8]
    // 0x88cd1c: r2 = Null
    //     0x88cd1c: mov             x2, NULL
    // 0x88cd20: r1 = Null
    //     0x88cd20: mov             x1, NULL
    // 0x88cd24: branchIfSmi(r0, 0x88cd4c)
    //     0x88cd24: tbz             w0, #0, #0x88cd4c
    // 0x88cd28: r4 = LoadClassIdInstr(r0)
    //     0x88cd28: ldur            x4, [x0, #-1]
    //     0x88cd2c: ubfx            x4, x4, #0xc, #0x14
    // 0x88cd30: sub             x4, x4, #0x3b
    // 0x88cd34: cmp             x4, #1
    // 0x88cd38: b.ls            #0x88cd4c
    // 0x88cd3c: r8 = int
    //     0x88cd3c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88cd40: r3 = Null
    //     0x88cd40: add             x3, PP, #0x13, lsl #12  ; [pp+0x13738] Null
    //     0x88cd44: ldr             x3, [x3, #0x738]
    // 0x88cd48: r0 = int()
    //     0x88cd48: bl              #0x1524294  ; IsType_int_Stub
    // 0x88cd4c: ldur            x0, [fp, #-8]
    // 0x88cd50: r1 = LoadInt32Instr(r0)
    //     0x88cd50: sbfx            x1, x0, #1, #0x1f
    //     0x88cd54: tbz             w0, #0, #0x88cd5c
    //     0x88cd58: ldur            x1, [x0, #7]
    // 0x88cd5c: scvtf           d0, x1
    // 0x88cd60: d1 = 100.000000
    //     0x88cd60: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88cd64: ldr             d1, [x17, #0xa28]
    // 0x88cd68: fdiv            d2, d0, d1
    // 0x88cd6c: ldur            x0, [fp, #-0x10]
    // 0x88cd70: scvtf           d0, x0
    // 0x88cd74: fmul            d1, d2, d0
    // 0x88cd78: fcmp            d1, d1
    // 0x88cd7c: b.vs            #0x88e210
    // 0x88cd80: fcvtms          x2, d1
    // 0x88cd84: asr             x16, x2, #0x1e
    // 0x88cd88: cmp             x16, x2, asr #63
    // 0x88cd8c: b.ne            #0x88e210
    // 0x88cd90: lsl             x2, x2, #1
    // 0x88cd94: cmp             x1, #0x32
    // 0x88cd98: b.gt            #0x88cde4
    // 0x88cd9c: d0 = 0.500000
    //     0x88cd9c: fmov            d0, #0.50000000
    // 0x88cda0: r1 = LoadInt32Instr(r2)
    //     0x88cda0: sbfx            x1, x2, #1, #0x1f
    //     0x88cda4: tbz             w2, #0, #0x88cdac
    //     0x88cda8: ldur            x1, [x2, #7]
    // 0x88cdac: scvtf           d1, x1
    // 0x88cdb0: fmul            d2, d1, d0
    // 0x88cdb4: fcmp            d2, d2
    // 0x88cdb8: b.vs            #0x88e23c
    // 0x88cdbc: fcvtms          x1, d2
    // 0x88cdc0: asr             x16, x1, #0x1e
    // 0x88cdc4: cmp             x16, x1, asr #63
    // 0x88cdc8: b.ne            #0x88e23c
    // 0x88cdcc: lsl             x1, x1, #1
    // 0x88cdd0: r2 = LoadInt32Instr(r1)
    //     0x88cdd0: sbfx            x2, x1, #1, #0x1f
    //     0x88cdd4: tbz             w1, #0, #0x88cddc
    //     0x88cdd8: ldur            x2, [x1, #7]
    // 0x88cddc: mov             x1, x2
    // 0x88cde0: b               #0x88ce40
    // 0x88cde4: cmp             x1, #0x55
    // 0x88cde8: b.gt            #0x88ce34
    // 0x88cdec: d2 = 0.750000
    //     0x88cdec: fmov            d2, #0.75000000
    // 0x88cdf0: r1 = LoadInt32Instr(r2)
    //     0x88cdf0: sbfx            x1, x2, #1, #0x1f
    //     0x88cdf4: tbz             w2, #0, #0x88cdfc
    //     0x88cdf8: ldur            x1, [x2, #7]
    // 0x88cdfc: scvtf           d0, x1
    // 0x88ce00: fmul            d1, d0, d2
    // 0x88ce04: fcmp            d1, d1
    // 0x88ce08: b.vs            #0x88e268
    // 0x88ce0c: fcvtms          x1, d1
    // 0x88ce10: asr             x16, x1, #0x1e
    // 0x88ce14: cmp             x16, x1, asr #63
    // 0x88ce18: b.ne            #0x88e268
    // 0x88ce1c: lsl             x1, x1, #1
    // 0x88ce20: r2 = LoadInt32Instr(r1)
    //     0x88ce20: sbfx            x2, x1, #1, #0x1f
    //     0x88ce24: tbz             w1, #0, #0x88ce2c
    //     0x88ce28: ldur            x2, [x1, #7]
    // 0x88ce2c: mov             x1, x2
    // 0x88ce30: b               #0x88ce40
    // 0x88ce34: r1 = LoadInt32Instr(r2)
    //     0x88ce34: sbfx            x1, x2, #1, #0x1f
    //     0x88ce38: tbz             w2, #0, #0x88ce40
    //     0x88ce3c: ldur            x1, [x2, #7]
    // 0x88ce40: cmp             x1, #0x64
    // 0x88ce44: b.gt            #0x88ce50
    // 0x88ce48: r0 = 100
    //     0x88ce48: movz            x0, #0x64
    // 0x88ce4c: b               #0x88db2c
    // 0x88ce50: cmp             x1, x0
    // 0x88ce54: b.gt            #0x88db2c
    // 0x88ce58: mov             x0, x1
    // 0x88ce5c: b               #0x88db2c
    // 0x88ce60: d1 = 100.000000
    //     0x88ce60: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88ce64: ldr             d1, [x17, #0xa28]
    // 0x88ce68: d2 = 0.750000
    //     0x88ce68: fmov            d2, #0.75000000
    // 0x88ce6c: d0 = 0.500000
    //     0x88ce6c: fmov            d0, #0.50000000
    // 0x88ce70: r16 = "minaMaxCompletion"
    //     0x88ce70: add             x16, PP, #0x13, lsl #12  ; [pp+0x13748] "minaMaxCompletion"
    //     0x88ce74: ldr             x16, [x16, #0x748]
    // 0x88ce78: ldur            lr, [fp, #-0x20]
    // 0x88ce7c: stp             lr, x16, [SP]
    // 0x88ce80: r0 = ==()
    //     0x88ce80: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88ce84: tbnz            w0, #4, #0x88cfdc
    // 0x88ce88: r0 = LoadStaticField(0xb54)
    //     0x88ce88: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88ce8c: ldr             x0, [x0, #0x16a8]
    // 0x88ce90: cmp             w0, NULL
    // 0x88ce94: b.ne            #0x88cea0
    // 0x88ce98: r0 = Null
    //     0x88ce98: mov             x0, NULL
    // 0x88ce9c: b               #0x88cec8
    // 0x88cea0: r17 = 347
    //     0x88cea0: movz            x17, #0x15b
    // 0x88cea4: ldr             w1, [x0, x17]
    // 0x88cea8: DecompressPointer r1
    //     0x88cea8: add             x1, x1, HEAP, lsl #32
    // 0x88ceac: r0 = LoadClassIdInstr(r1)
    //     0x88ceac: ldur            x0, [x1, #-1]
    //     0x88ceb0: ubfx            x0, x0, #0xc, #0x14
    // 0x88ceb4: r2 = "minaMaxCompletion"
    //     0x88ceb4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13748] "minaMaxCompletion"
    //     0x88ceb8: ldr             x2, [x2, #0x748]
    // 0x88cebc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88cebc: sub             lr, x0, #0xb4
    //     0x88cec0: ldr             lr, [x21, lr, lsl #3]
    //     0x88cec4: blr             lr
    // 0x88cec8: cmp             w0, NULL
    // 0x88cecc: b.ne            #0x88ced8
    // 0x88ced0: r3 = 0
    //     0x88ced0: movz            x3, #0
    // 0x88ced4: b               #0x88cedc
    // 0x88ced8: mov             x3, x0
    // 0x88cedc: mov             x0, x3
    // 0x88cee0: stur            x3, [fp, #-8]
    // 0x88cee4: r2 = Null
    //     0x88cee4: mov             x2, NULL
    // 0x88cee8: r1 = Null
    //     0x88cee8: mov             x1, NULL
    // 0x88ceec: branchIfSmi(r0, 0x88cf14)
    //     0x88ceec: tbz             w0, #0, #0x88cf14
    // 0x88cef0: r4 = LoadClassIdInstr(r0)
    //     0x88cef0: ldur            x4, [x0, #-1]
    //     0x88cef4: ubfx            x4, x4, #0xc, #0x14
    // 0x88cef8: sub             x4, x4, #0x3b
    // 0x88cefc: cmp             x4, #1
    // 0x88cf00: b.ls            #0x88cf14
    // 0x88cf04: r8 = int
    //     0x88cf04: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88cf08: r3 = Null
    //     0x88cf08: add             x3, PP, #0x13, lsl #12  ; [pp+0x13750] Null
    //     0x88cf0c: ldr             x3, [x3, #0x750]
    // 0x88cf10: r0 = int()
    //     0x88cf10: bl              #0x1524294  ; IsType_int_Stub
    // 0x88cf14: r0 = LoadStaticField(0xb54)
    //     0x88cf14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88cf18: ldr             x0, [x0, #0x16a8]
    // 0x88cf1c: cmp             w0, NULL
    // 0x88cf20: b.ne            #0x88cf2c
    // 0x88cf24: r0 = Null
    //     0x88cf24: mov             x0, NULL
    // 0x88cf28: b               #0x88cf54
    // 0x88cf2c: r17 = 347
    //     0x88cf2c: movz            x17, #0x15b
    // 0x88cf30: ldr             w1, [x0, x17]
    // 0x88cf34: DecompressPointer r1
    //     0x88cf34: add             x1, x1, HEAP, lsl #32
    // 0x88cf38: r0 = LoadClassIdInstr(r1)
    //     0x88cf38: ldur            x0, [x1, #-1]
    //     0x88cf3c: ubfx            x0, x0, #0xc, #0x14
    // 0x88cf40: r2 = "minaCompletion"
    //     0x88cf40: add             x2, PP, #0x13, lsl #12  ; [pp+0x13760] "minaCompletion"
    //     0x88cf44: ldr             x2, [x2, #0x760]
    // 0x88cf48: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88cf48: sub             lr, x0, #0xb4
    //     0x88cf4c: ldr             lr, [x21, lr, lsl #3]
    //     0x88cf50: blr             lr
    // 0x88cf54: cmp             w0, NULL
    // 0x88cf58: b.ne            #0x88cf64
    // 0x88cf5c: r4 = 0
    //     0x88cf5c: movz            x4, #0
    // 0x88cf60: b               #0x88cf68
    // 0x88cf64: mov             x4, x0
    // 0x88cf68: ldur            x3, [fp, #-8]
    // 0x88cf6c: mov             x0, x4
    // 0x88cf70: stur            x4, [fp, #-0x18]
    // 0x88cf74: r2 = Null
    //     0x88cf74: mov             x2, NULL
    // 0x88cf78: r1 = Null
    //     0x88cf78: mov             x1, NULL
    // 0x88cf7c: branchIfSmi(r0, 0x88cfa4)
    //     0x88cf7c: tbz             w0, #0, #0x88cfa4
    // 0x88cf80: r4 = LoadClassIdInstr(r0)
    //     0x88cf80: ldur            x4, [x0, #-1]
    //     0x88cf84: ubfx            x4, x4, #0xc, #0x14
    // 0x88cf88: sub             x4, x4, #0x3b
    // 0x88cf8c: cmp             x4, #1
    // 0x88cf90: b.ls            #0x88cfa4
    // 0x88cf94: r8 = int
    //     0x88cf94: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88cf98: r3 = Null
    //     0x88cf98: add             x3, PP, #0x13, lsl #12  ; [pp+0x13768] Null
    //     0x88cf9c: ldr             x3, [x3, #0x768]
    // 0x88cfa0: r0 = int()
    //     0x88cfa0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88cfa4: ldur            x0, [fp, #-8]
    // 0x88cfa8: r1 = LoadInt32Instr(r0)
    //     0x88cfa8: sbfx            x1, x0, #1, #0x1f
    //     0x88cfac: tbz             w0, #0, #0x88cfb4
    //     0x88cfb0: ldur            x1, [x0, #7]
    // 0x88cfb4: ldur            x0, [fp, #-0x18]
    // 0x88cfb8: r2 = LoadInt32Instr(r0)
    //     0x88cfb8: sbfx            x2, x0, #1, #0x1f
    //     0x88cfbc: tbz             w0, #0, #0x88cfc4
    //     0x88cfc0: ldur            x2, [x0, #7]
    // 0x88cfc4: cmp             x1, x2
    // 0x88cfc8: b.lt            #0x88cfd4
    // 0x88cfcc: mov             x0, x1
    // 0x88cfd0: b               #0x88db2c
    // 0x88cfd4: mov             x0, x2
    // 0x88cfd8: b               #0x88db2c
    // 0x88cfdc: r16 = "minaCompletion"
    //     0x88cfdc: add             x16, PP, #0x13, lsl #12  ; [pp+0x13760] "minaCompletion"
    //     0x88cfe0: ldr             x16, [x16, #0x760]
    // 0x88cfe4: ldur            lr, [fp, #-0x20]
    // 0x88cfe8: stp             lr, x16, [SP]
    // 0x88cfec: r0 = ==()
    //     0x88cfec: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88cff0: tbnz            w0, #4, #0x88d098
    // 0x88cff4: r0 = LoadStaticField(0xb54)
    //     0x88cff4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88cff8: ldr             x0, [x0, #0x16a8]
    // 0x88cffc: cmp             w0, NULL
    // 0x88d000: b.ne            #0x88d00c
    // 0x88d004: r0 = Null
    //     0x88d004: mov             x0, NULL
    // 0x88d008: b               #0x88d034
    // 0x88d00c: r17 = 347
    //     0x88d00c: movz            x17, #0x15b
    // 0x88d010: ldr             w1, [x0, x17]
    // 0x88d014: DecompressPointer r1
    //     0x88d014: add             x1, x1, HEAP, lsl #32
    // 0x88d018: r0 = LoadClassIdInstr(r1)
    //     0x88d018: ldur            x0, [x1, #-1]
    //     0x88d01c: ubfx            x0, x0, #0xc, #0x14
    // 0x88d020: r2 = "minaCompletion"
    //     0x88d020: add             x2, PP, #0x13, lsl #12  ; [pp+0x13760] "minaCompletion"
    //     0x88d024: ldr             x2, [x2, #0x760]
    // 0x88d028: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d028: sub             lr, x0, #0xb4
    //     0x88d02c: ldr             lr, [x21, lr, lsl #3]
    //     0x88d030: blr             lr
    // 0x88d034: cmp             w0, NULL
    // 0x88d038: b.ne            #0x88d044
    // 0x88d03c: r3 = 0
    //     0x88d03c: movz            x3, #0
    // 0x88d040: b               #0x88d048
    // 0x88d044: mov             x3, x0
    // 0x88d048: mov             x0, x3
    // 0x88d04c: stur            x3, [fp, #-8]
    // 0x88d050: r2 = Null
    //     0x88d050: mov             x2, NULL
    // 0x88d054: r1 = Null
    //     0x88d054: mov             x1, NULL
    // 0x88d058: branchIfSmi(r0, 0x88d080)
    //     0x88d058: tbz             w0, #0, #0x88d080
    // 0x88d05c: r4 = LoadClassIdInstr(r0)
    //     0x88d05c: ldur            x4, [x0, #-1]
    //     0x88d060: ubfx            x4, x4, #0xc, #0x14
    // 0x88d064: sub             x4, x4, #0x3b
    // 0x88d068: cmp             x4, #1
    // 0x88d06c: b.ls            #0x88d080
    // 0x88d070: r8 = int
    //     0x88d070: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d074: r3 = Null
    //     0x88d074: add             x3, PP, #0x13, lsl #12  ; [pp+0x13778] Null
    //     0x88d078: ldr             x3, [x3, #0x778]
    // 0x88d07c: r0 = int()
    //     0x88d07c: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d080: ldur            x0, [fp, #-8]
    // 0x88d084: r1 = LoadInt32Instr(r0)
    //     0x88d084: sbfx            x1, x0, #1, #0x1f
    //     0x88d088: tbz             w0, #0, #0x88d090
    //     0x88d08c: ldur            x1, [x0, #7]
    // 0x88d090: mov             x0, x1
    // 0x88d094: b               #0x88db2c
    // 0x88d098: r16 = "lootTokenMina"
    //     0x88d098: add             x16, PP, #0x13, lsl #12  ; [pp+0x13788] "lootTokenMina"
    //     0x88d09c: ldr             x16, [x16, #0x788]
    // 0x88d0a0: ldur            lr, [fp, #-0x20]
    // 0x88d0a4: stp             lr, x16, [SP]
    // 0x88d0a8: r0 = ==()
    //     0x88d0a8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d0ac: tbnz            w0, #4, #0x88d268
    // 0x88d0b0: r1 = "mina"
    //     0x88d0b0: add             x1, PP, #0x10, lsl #12  ; [pp+0x101c8] "mina"
    //     0x88d0b4: ldr             x1, [x1, #0x1c8]
    // 0x88d0b8: r0 = getMemory()
    //     0x88d0b8: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88d0bc: LoadField: r3 = r0->field_2b
    //     0x88d0bc: ldur            x3, [x0, #0x2b]
    // 0x88d0c0: stur            x3, [fp, #-0x10]
    // 0x88d0c4: r0 = LoadStaticField(0xb54)
    //     0x88d0c4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d0c8: ldr             x0, [x0, #0x16a8]
    // 0x88d0cc: cmp             w0, NULL
    // 0x88d0d0: b.ne            #0x88d0dc
    // 0x88d0d4: r0 = Null
    //     0x88d0d4: mov             x0, NULL
    // 0x88d0d8: b               #0x88d104
    // 0x88d0dc: r17 = 347
    //     0x88d0dc: movz            x17, #0x15b
    // 0x88d0e0: ldr             w1, [x0, x17]
    // 0x88d0e4: DecompressPointer r1
    //     0x88d0e4: add             x1, x1, HEAP, lsl #32
    // 0x88d0e8: r0 = LoadClassIdInstr(r1)
    //     0x88d0e8: ldur            x0, [x1, #-1]
    //     0x88d0ec: ubfx            x0, x0, #0xc, #0x14
    // 0x88d0f0: r2 = "minaCompletion"
    //     0x88d0f0: add             x2, PP, #0x13, lsl #12  ; [pp+0x13760] "minaCompletion"
    //     0x88d0f4: ldr             x2, [x2, #0x760]
    // 0x88d0f8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d0f8: sub             lr, x0, #0xb4
    //     0x88d0fc: ldr             lr, [x21, lr, lsl #3]
    //     0x88d100: blr             lr
    // 0x88d104: cmp             w0, NULL
    // 0x88d108: b.ne            #0x88d114
    // 0x88d10c: r4 = 0
    //     0x88d10c: movz            x4, #0
    // 0x88d110: b               #0x88d118
    // 0x88d114: mov             x4, x0
    // 0x88d118: ldur            x3, [fp, #-0x10]
    // 0x88d11c: mov             x0, x4
    // 0x88d120: stur            x4, [fp, #-8]
    // 0x88d124: r2 = Null
    //     0x88d124: mov             x2, NULL
    // 0x88d128: r1 = Null
    //     0x88d128: mov             x1, NULL
    // 0x88d12c: branchIfSmi(r0, 0x88d154)
    //     0x88d12c: tbz             w0, #0, #0x88d154
    // 0x88d130: r4 = LoadClassIdInstr(r0)
    //     0x88d130: ldur            x4, [x0, #-1]
    //     0x88d134: ubfx            x4, x4, #0xc, #0x14
    // 0x88d138: sub             x4, x4, #0x3b
    // 0x88d13c: cmp             x4, #1
    // 0x88d140: b.ls            #0x88d154
    // 0x88d144: r8 = int
    //     0x88d144: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d148: r3 = Null
    //     0x88d148: add             x3, PP, #0x13, lsl #12  ; [pp+0x13790] Null
    //     0x88d14c: ldr             x3, [x3, #0x790]
    // 0x88d150: r0 = int()
    //     0x88d150: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d154: ldur            x0, [fp, #-8]
    // 0x88d158: r1 = LoadInt32Instr(r0)
    //     0x88d158: sbfx            x1, x0, #1, #0x1f
    //     0x88d15c: tbz             w0, #0, #0x88d164
    //     0x88d160: ldur            x1, [x0, #7]
    // 0x88d164: scvtf           d0, x1
    // 0x88d168: d1 = 100.000000
    //     0x88d168: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d16c: ldr             d1, [x17, #0xa28]
    // 0x88d170: fdiv            d2, d0, d1
    // 0x88d174: ldur            x0, [fp, #-0x10]
    // 0x88d178: scvtf           d0, x0
    // 0x88d17c: fmul            d1, d2, d0
    // 0x88d180: fcmp            d1, d1
    // 0x88d184: b.vs            #0x88e294
    // 0x88d188: fcvtms          x2, d1
    // 0x88d18c: asr             x16, x2, #0x1e
    // 0x88d190: cmp             x16, x2, asr #63
    // 0x88d194: b.ne            #0x88e294
    // 0x88d198: lsl             x2, x2, #1
    // 0x88d19c: cmp             x1, #0x32
    // 0x88d1a0: b.gt            #0x88d1ec
    // 0x88d1a4: d0 = 0.500000
    //     0x88d1a4: fmov            d0, #0.50000000
    // 0x88d1a8: r1 = LoadInt32Instr(r2)
    //     0x88d1a8: sbfx            x1, x2, #1, #0x1f
    //     0x88d1ac: tbz             w2, #0, #0x88d1b4
    //     0x88d1b0: ldur            x1, [x2, #7]
    // 0x88d1b4: scvtf           d1, x1
    // 0x88d1b8: fmul            d2, d1, d0
    // 0x88d1bc: fcmp            d2, d2
    // 0x88d1c0: b.vs            #0x88e2c0
    // 0x88d1c4: fcvtms          x1, d2
    // 0x88d1c8: asr             x16, x1, #0x1e
    // 0x88d1cc: cmp             x16, x1, asr #63
    // 0x88d1d0: b.ne            #0x88e2c0
    // 0x88d1d4: lsl             x1, x1, #1
    // 0x88d1d8: r2 = LoadInt32Instr(r1)
    //     0x88d1d8: sbfx            x2, x1, #1, #0x1f
    //     0x88d1dc: tbz             w1, #0, #0x88d1e4
    //     0x88d1e0: ldur            x2, [x1, #7]
    // 0x88d1e4: mov             x1, x2
    // 0x88d1e8: b               #0x88d248
    // 0x88d1ec: cmp             x1, #0x55
    // 0x88d1f0: b.gt            #0x88d23c
    // 0x88d1f4: d2 = 0.750000
    //     0x88d1f4: fmov            d2, #0.75000000
    // 0x88d1f8: r1 = LoadInt32Instr(r2)
    //     0x88d1f8: sbfx            x1, x2, #1, #0x1f
    //     0x88d1fc: tbz             w2, #0, #0x88d204
    //     0x88d200: ldur            x1, [x2, #7]
    // 0x88d204: scvtf           d0, x1
    // 0x88d208: fmul            d1, d0, d2
    // 0x88d20c: fcmp            d1, d1
    // 0x88d210: b.vs            #0x88e2ec
    // 0x88d214: fcvtms          x1, d1
    // 0x88d218: asr             x16, x1, #0x1e
    // 0x88d21c: cmp             x16, x1, asr #63
    // 0x88d220: b.ne            #0x88e2ec
    // 0x88d224: lsl             x1, x1, #1
    // 0x88d228: r2 = LoadInt32Instr(r1)
    //     0x88d228: sbfx            x2, x1, #1, #0x1f
    //     0x88d22c: tbz             w1, #0, #0x88d234
    //     0x88d230: ldur            x2, [x1, #7]
    // 0x88d234: mov             x1, x2
    // 0x88d238: b               #0x88d248
    // 0x88d23c: r1 = LoadInt32Instr(r2)
    //     0x88d23c: sbfx            x1, x2, #1, #0x1f
    //     0x88d240: tbz             w2, #0, #0x88d248
    //     0x88d244: ldur            x1, [x2, #7]
    // 0x88d248: cmp             x1, x0
    // 0x88d24c: b.gt            #0x88db2c
    // 0x88d250: cmp             x1, #0
    // 0x88d254: b.gt            #0x88d260
    // 0x88d258: r0 = 1
    //     0x88d258: movz            x0, #0x1
    // 0x88d25c: b               #0x88db2c
    // 0x88d260: mov             x0, x1
    // 0x88d264: b               #0x88db2c
    // 0x88d268: d1 = 100.000000
    //     0x88d268: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d26c: ldr             d1, [x17, #0xa28]
    // 0x88d270: d2 = 0.750000
    //     0x88d270: fmov            d2, #0.75000000
    // 0x88d274: d0 = 0.500000
    //     0x88d274: fmov            d0, #0.50000000
    // 0x88d278: r16 = "lootMoneyMina"
    //     0x88d278: add             x16, PP, #0x13, lsl #12  ; [pp+0x137a0] "lootMoneyMina"
    //     0x88d27c: ldr             x16, [x16, #0x7a0]
    // 0x88d280: ldur            lr, [fp, #-0x20]
    // 0x88d284: stp             lr, x16, [SP]
    // 0x88d288: r0 = ==()
    //     0x88d288: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d28c: tbnz            w0, #4, #0x88d448
    // 0x88d290: r1 = "mina"
    //     0x88d290: add             x1, PP, #0x10, lsl #12  ; [pp+0x101c8] "mina"
    //     0x88d294: ldr             x1, [x1, #0x1c8]
    // 0x88d298: r0 = getMemory()
    //     0x88d298: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88d29c: LoadField: r3 = r0->field_23
    //     0x88d29c: ldur            x3, [x0, #0x23]
    // 0x88d2a0: stur            x3, [fp, #-0x10]
    // 0x88d2a4: r0 = LoadStaticField(0xb54)
    //     0x88d2a4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d2a8: ldr             x0, [x0, #0x16a8]
    // 0x88d2ac: cmp             w0, NULL
    // 0x88d2b0: b.ne            #0x88d2bc
    // 0x88d2b4: r0 = Null
    //     0x88d2b4: mov             x0, NULL
    // 0x88d2b8: b               #0x88d2e4
    // 0x88d2bc: r17 = 347
    //     0x88d2bc: movz            x17, #0x15b
    // 0x88d2c0: ldr             w1, [x0, x17]
    // 0x88d2c4: DecompressPointer r1
    //     0x88d2c4: add             x1, x1, HEAP, lsl #32
    // 0x88d2c8: r0 = LoadClassIdInstr(r1)
    //     0x88d2c8: ldur            x0, [x1, #-1]
    //     0x88d2cc: ubfx            x0, x0, #0xc, #0x14
    // 0x88d2d0: r2 = "minaCompletion"
    //     0x88d2d0: add             x2, PP, #0x13, lsl #12  ; [pp+0x13760] "minaCompletion"
    //     0x88d2d4: ldr             x2, [x2, #0x760]
    // 0x88d2d8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d2d8: sub             lr, x0, #0xb4
    //     0x88d2dc: ldr             lr, [x21, lr, lsl #3]
    //     0x88d2e0: blr             lr
    // 0x88d2e4: cmp             w0, NULL
    // 0x88d2e8: b.ne            #0x88d2f4
    // 0x88d2ec: r4 = 0
    //     0x88d2ec: movz            x4, #0
    // 0x88d2f0: b               #0x88d2f8
    // 0x88d2f4: mov             x4, x0
    // 0x88d2f8: ldur            x3, [fp, #-0x10]
    // 0x88d2fc: mov             x0, x4
    // 0x88d300: stur            x4, [fp, #-8]
    // 0x88d304: r2 = Null
    //     0x88d304: mov             x2, NULL
    // 0x88d308: r1 = Null
    //     0x88d308: mov             x1, NULL
    // 0x88d30c: branchIfSmi(r0, 0x88d334)
    //     0x88d30c: tbz             w0, #0, #0x88d334
    // 0x88d310: r4 = LoadClassIdInstr(r0)
    //     0x88d310: ldur            x4, [x0, #-1]
    //     0x88d314: ubfx            x4, x4, #0xc, #0x14
    // 0x88d318: sub             x4, x4, #0x3b
    // 0x88d31c: cmp             x4, #1
    // 0x88d320: b.ls            #0x88d334
    // 0x88d324: r8 = int
    //     0x88d324: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d328: r3 = Null
    //     0x88d328: add             x3, PP, #0x13, lsl #12  ; [pp+0x137a8] Null
    //     0x88d32c: ldr             x3, [x3, #0x7a8]
    // 0x88d330: r0 = int()
    //     0x88d330: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d334: ldur            x0, [fp, #-8]
    // 0x88d338: r1 = LoadInt32Instr(r0)
    //     0x88d338: sbfx            x1, x0, #1, #0x1f
    //     0x88d33c: tbz             w0, #0, #0x88d344
    //     0x88d340: ldur            x1, [x0, #7]
    // 0x88d344: scvtf           d0, x1
    // 0x88d348: d1 = 100.000000
    //     0x88d348: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d34c: ldr             d1, [x17, #0xa28]
    // 0x88d350: fdiv            d2, d0, d1
    // 0x88d354: ldur            x0, [fp, #-0x10]
    // 0x88d358: scvtf           d0, x0
    // 0x88d35c: fmul            d1, d2, d0
    // 0x88d360: fcmp            d1, d1
    // 0x88d364: b.vs            #0x88e318
    // 0x88d368: fcvtms          x2, d1
    // 0x88d36c: asr             x16, x2, #0x1e
    // 0x88d370: cmp             x16, x2, asr #63
    // 0x88d374: b.ne            #0x88e318
    // 0x88d378: lsl             x2, x2, #1
    // 0x88d37c: cmp             x1, #0x32
    // 0x88d380: b.gt            #0x88d3cc
    // 0x88d384: d0 = 0.500000
    //     0x88d384: fmov            d0, #0.50000000
    // 0x88d388: r1 = LoadInt32Instr(r2)
    //     0x88d388: sbfx            x1, x2, #1, #0x1f
    //     0x88d38c: tbz             w2, #0, #0x88d394
    //     0x88d390: ldur            x1, [x2, #7]
    // 0x88d394: scvtf           d1, x1
    // 0x88d398: fmul            d2, d1, d0
    // 0x88d39c: fcmp            d2, d2
    // 0x88d3a0: b.vs            #0x88e344
    // 0x88d3a4: fcvtms          x1, d2
    // 0x88d3a8: asr             x16, x1, #0x1e
    // 0x88d3ac: cmp             x16, x1, asr #63
    // 0x88d3b0: b.ne            #0x88e344
    // 0x88d3b4: lsl             x1, x1, #1
    // 0x88d3b8: r2 = LoadInt32Instr(r1)
    //     0x88d3b8: sbfx            x2, x1, #1, #0x1f
    //     0x88d3bc: tbz             w1, #0, #0x88d3c4
    //     0x88d3c0: ldur            x2, [x1, #7]
    // 0x88d3c4: mov             x1, x2
    // 0x88d3c8: b               #0x88d428
    // 0x88d3cc: cmp             x1, #0x55
    // 0x88d3d0: b.gt            #0x88d41c
    // 0x88d3d4: d2 = 0.750000
    //     0x88d3d4: fmov            d2, #0.75000000
    // 0x88d3d8: r1 = LoadInt32Instr(r2)
    //     0x88d3d8: sbfx            x1, x2, #1, #0x1f
    //     0x88d3dc: tbz             w2, #0, #0x88d3e4
    //     0x88d3e0: ldur            x1, [x2, #7]
    // 0x88d3e4: scvtf           d0, x1
    // 0x88d3e8: fmul            d1, d0, d2
    // 0x88d3ec: fcmp            d1, d1
    // 0x88d3f0: b.vs            #0x88e370
    // 0x88d3f4: fcvtms          x1, d1
    // 0x88d3f8: asr             x16, x1, #0x1e
    // 0x88d3fc: cmp             x16, x1, asr #63
    // 0x88d400: b.ne            #0x88e370
    // 0x88d404: lsl             x1, x1, #1
    // 0x88d408: r2 = LoadInt32Instr(r1)
    //     0x88d408: sbfx            x2, x1, #1, #0x1f
    //     0x88d40c: tbz             w1, #0, #0x88d414
    //     0x88d410: ldur            x2, [x1, #7]
    // 0x88d414: mov             x1, x2
    // 0x88d418: b               #0x88d428
    // 0x88d41c: r1 = LoadInt32Instr(r2)
    //     0x88d41c: sbfx            x1, x2, #1, #0x1f
    //     0x88d420: tbz             w2, #0, #0x88d428
    //     0x88d424: ldur            x1, [x2, #7]
    // 0x88d428: cmp             x1, #0x64
    // 0x88d42c: b.gt            #0x88d438
    // 0x88d430: r0 = 100
    //     0x88d430: movz            x0, #0x64
    // 0x88d434: b               #0x88db2c
    // 0x88d438: cmp             x1, x0
    // 0x88d43c: b.gt            #0x88db2c
    // 0x88d440: mov             x0, x1
    // 0x88d444: b               #0x88db2c
    // 0x88d448: d1 = 100.000000
    //     0x88d448: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d44c: ldr             d1, [x17, #0xa28]
    // 0x88d450: d2 = 0.750000
    //     0x88d450: fmov            d2, #0.75000000
    // 0x88d454: d0 = 0.500000
    //     0x88d454: fmov            d0, #0.50000000
    // 0x88d458: r16 = "youngjimaMaxCompletion"
    //     0x88d458: add             x16, PP, #0x13, lsl #12  ; [pp+0x137b8] "youngjimaMaxCompletion"
    //     0x88d45c: ldr             x16, [x16, #0x7b8]
    // 0x88d460: ldur            lr, [fp, #-0x20]
    // 0x88d464: stp             lr, x16, [SP]
    // 0x88d468: r0 = ==()
    //     0x88d468: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d46c: tbnz            w0, #4, #0x88d5c4
    // 0x88d470: r0 = LoadStaticField(0xb54)
    //     0x88d470: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d474: ldr             x0, [x0, #0x16a8]
    // 0x88d478: cmp             w0, NULL
    // 0x88d47c: b.ne            #0x88d488
    // 0x88d480: r0 = Null
    //     0x88d480: mov             x0, NULL
    // 0x88d484: b               #0x88d4b0
    // 0x88d488: r17 = 347
    //     0x88d488: movz            x17, #0x15b
    // 0x88d48c: ldr             w1, [x0, x17]
    // 0x88d490: DecompressPointer r1
    //     0x88d490: add             x1, x1, HEAP, lsl #32
    // 0x88d494: r0 = LoadClassIdInstr(r1)
    //     0x88d494: ldur            x0, [x1, #-1]
    //     0x88d498: ubfx            x0, x0, #0xc, #0x14
    // 0x88d49c: r2 = "youngjimaMaxCompletion"
    //     0x88d49c: add             x2, PP, #0x13, lsl #12  ; [pp+0x137b8] "youngjimaMaxCompletion"
    //     0x88d4a0: ldr             x2, [x2, #0x7b8]
    // 0x88d4a4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d4a4: sub             lr, x0, #0xb4
    //     0x88d4a8: ldr             lr, [x21, lr, lsl #3]
    //     0x88d4ac: blr             lr
    // 0x88d4b0: cmp             w0, NULL
    // 0x88d4b4: b.ne            #0x88d4c0
    // 0x88d4b8: r3 = 0
    //     0x88d4b8: movz            x3, #0
    // 0x88d4bc: b               #0x88d4c4
    // 0x88d4c0: mov             x3, x0
    // 0x88d4c4: mov             x0, x3
    // 0x88d4c8: stur            x3, [fp, #-8]
    // 0x88d4cc: r2 = Null
    //     0x88d4cc: mov             x2, NULL
    // 0x88d4d0: r1 = Null
    //     0x88d4d0: mov             x1, NULL
    // 0x88d4d4: branchIfSmi(r0, 0x88d4fc)
    //     0x88d4d4: tbz             w0, #0, #0x88d4fc
    // 0x88d4d8: r4 = LoadClassIdInstr(r0)
    //     0x88d4d8: ldur            x4, [x0, #-1]
    //     0x88d4dc: ubfx            x4, x4, #0xc, #0x14
    // 0x88d4e0: sub             x4, x4, #0x3b
    // 0x88d4e4: cmp             x4, #1
    // 0x88d4e8: b.ls            #0x88d4fc
    // 0x88d4ec: r8 = int
    //     0x88d4ec: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d4f0: r3 = Null
    //     0x88d4f0: add             x3, PP, #0x13, lsl #12  ; [pp+0x137c0] Null
    //     0x88d4f4: ldr             x3, [x3, #0x7c0]
    // 0x88d4f8: r0 = int()
    //     0x88d4f8: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d4fc: r0 = LoadStaticField(0xb54)
    //     0x88d4fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d500: ldr             x0, [x0, #0x16a8]
    // 0x88d504: cmp             w0, NULL
    // 0x88d508: b.ne            #0x88d514
    // 0x88d50c: r0 = Null
    //     0x88d50c: mov             x0, NULL
    // 0x88d510: b               #0x88d53c
    // 0x88d514: r17 = 347
    //     0x88d514: movz            x17, #0x15b
    // 0x88d518: ldr             w1, [x0, x17]
    // 0x88d51c: DecompressPointer r1
    //     0x88d51c: add             x1, x1, HEAP, lsl #32
    // 0x88d520: r0 = LoadClassIdInstr(r1)
    //     0x88d520: ldur            x0, [x1, #-1]
    //     0x88d524: ubfx            x0, x0, #0xc, #0x14
    // 0x88d528: r2 = "youngjimaCompletion"
    //     0x88d528: add             x2, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x88d52c: ldr             x2, [x2, #0x8e0]
    // 0x88d530: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d530: sub             lr, x0, #0xb4
    //     0x88d534: ldr             lr, [x21, lr, lsl #3]
    //     0x88d538: blr             lr
    // 0x88d53c: cmp             w0, NULL
    // 0x88d540: b.ne            #0x88d54c
    // 0x88d544: r4 = 0
    //     0x88d544: movz            x4, #0
    // 0x88d548: b               #0x88d550
    // 0x88d54c: mov             x4, x0
    // 0x88d550: ldur            x3, [fp, #-8]
    // 0x88d554: mov             x0, x4
    // 0x88d558: stur            x4, [fp, #-0x18]
    // 0x88d55c: r2 = Null
    //     0x88d55c: mov             x2, NULL
    // 0x88d560: r1 = Null
    //     0x88d560: mov             x1, NULL
    // 0x88d564: branchIfSmi(r0, 0x88d58c)
    //     0x88d564: tbz             w0, #0, #0x88d58c
    // 0x88d568: r4 = LoadClassIdInstr(r0)
    //     0x88d568: ldur            x4, [x0, #-1]
    //     0x88d56c: ubfx            x4, x4, #0xc, #0x14
    // 0x88d570: sub             x4, x4, #0x3b
    // 0x88d574: cmp             x4, #1
    // 0x88d578: b.ls            #0x88d58c
    // 0x88d57c: r8 = int
    //     0x88d57c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d580: r3 = Null
    //     0x88d580: add             x3, PP, #0x13, lsl #12  ; [pp+0x137d0] Null
    //     0x88d584: ldr             x3, [x3, #0x7d0]
    // 0x88d588: r0 = int()
    //     0x88d588: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d58c: ldur            x0, [fp, #-8]
    // 0x88d590: r1 = LoadInt32Instr(r0)
    //     0x88d590: sbfx            x1, x0, #1, #0x1f
    //     0x88d594: tbz             w0, #0, #0x88d59c
    //     0x88d598: ldur            x1, [x0, #7]
    // 0x88d59c: ldur            x0, [fp, #-0x18]
    // 0x88d5a0: r2 = LoadInt32Instr(r0)
    //     0x88d5a0: sbfx            x2, x0, #1, #0x1f
    //     0x88d5a4: tbz             w0, #0, #0x88d5ac
    //     0x88d5a8: ldur            x2, [x0, #7]
    // 0x88d5ac: cmp             x1, x2
    // 0x88d5b0: b.lt            #0x88d5bc
    // 0x88d5b4: mov             x0, x1
    // 0x88d5b8: b               #0x88db2c
    // 0x88d5bc: mov             x0, x2
    // 0x88d5c0: b               #0x88db2c
    // 0x88d5c4: r16 = "youngjimaCompletion"
    //     0x88d5c4: add             x16, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x88d5c8: ldr             x16, [x16, #0x8e0]
    // 0x88d5cc: ldur            lr, [fp, #-0x20]
    // 0x88d5d0: stp             lr, x16, [SP]
    // 0x88d5d4: r0 = ==()
    //     0x88d5d4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d5d8: tbnz            w0, #4, #0x88d680
    // 0x88d5dc: r0 = LoadStaticField(0xb54)
    //     0x88d5dc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d5e0: ldr             x0, [x0, #0x16a8]
    // 0x88d5e4: cmp             w0, NULL
    // 0x88d5e8: b.ne            #0x88d5f4
    // 0x88d5ec: r0 = Null
    //     0x88d5ec: mov             x0, NULL
    // 0x88d5f0: b               #0x88d61c
    // 0x88d5f4: r17 = 347
    //     0x88d5f4: movz            x17, #0x15b
    // 0x88d5f8: ldr             w1, [x0, x17]
    // 0x88d5fc: DecompressPointer r1
    //     0x88d5fc: add             x1, x1, HEAP, lsl #32
    // 0x88d600: r0 = LoadClassIdInstr(r1)
    //     0x88d600: ldur            x0, [x1, #-1]
    //     0x88d604: ubfx            x0, x0, #0xc, #0x14
    // 0x88d608: r2 = "youngjimaCompletion"
    //     0x88d608: add             x2, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x88d60c: ldr             x2, [x2, #0x8e0]
    // 0x88d610: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d610: sub             lr, x0, #0xb4
    //     0x88d614: ldr             lr, [x21, lr, lsl #3]
    //     0x88d618: blr             lr
    // 0x88d61c: cmp             w0, NULL
    // 0x88d620: b.ne            #0x88d62c
    // 0x88d624: r3 = 0
    //     0x88d624: movz            x3, #0
    // 0x88d628: b               #0x88d630
    // 0x88d62c: mov             x3, x0
    // 0x88d630: mov             x0, x3
    // 0x88d634: stur            x3, [fp, #-8]
    // 0x88d638: r2 = Null
    //     0x88d638: mov             x2, NULL
    // 0x88d63c: r1 = Null
    //     0x88d63c: mov             x1, NULL
    // 0x88d640: branchIfSmi(r0, 0x88d668)
    //     0x88d640: tbz             w0, #0, #0x88d668
    // 0x88d644: r4 = LoadClassIdInstr(r0)
    //     0x88d644: ldur            x4, [x0, #-1]
    //     0x88d648: ubfx            x4, x4, #0xc, #0x14
    // 0x88d64c: sub             x4, x4, #0x3b
    // 0x88d650: cmp             x4, #1
    // 0x88d654: b.ls            #0x88d668
    // 0x88d658: r8 = int
    //     0x88d658: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d65c: r3 = Null
    //     0x88d65c: add             x3, PP, #0x13, lsl #12  ; [pp+0x137e0] Null
    //     0x88d660: ldr             x3, [x3, #0x7e0]
    // 0x88d664: r0 = int()
    //     0x88d664: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d668: ldur            x0, [fp, #-8]
    // 0x88d66c: r1 = LoadInt32Instr(r0)
    //     0x88d66c: sbfx            x1, x0, #1, #0x1f
    //     0x88d670: tbz             w0, #0, #0x88d678
    //     0x88d674: ldur            x1, [x0, #7]
    // 0x88d678: mov             x0, x1
    // 0x88d67c: b               #0x88db2c
    // 0x88d680: r16 = "lootTokenYoungJima"
    //     0x88d680: add             x16, PP, #0x13, lsl #12  ; [pp+0x137f0] "lootTokenYoungJima"
    //     0x88d684: ldr             x16, [x16, #0x7f0]
    // 0x88d688: ldur            lr, [fp, #-0x20]
    // 0x88d68c: stp             lr, x16, [SP]
    // 0x88d690: r0 = ==()
    //     0x88d690: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d694: tbnz            w0, #4, #0x88d850
    // 0x88d698: r1 = "youngjima"
    //     0x88d698: add             x1, PP, #0x13, lsl #12  ; [pp+0x137f8] "youngjima"
    //     0x88d69c: ldr             x1, [x1, #0x7f8]
    // 0x88d6a0: r0 = getMemory()
    //     0x88d6a0: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88d6a4: LoadField: r3 = r0->field_2b
    //     0x88d6a4: ldur            x3, [x0, #0x2b]
    // 0x88d6a8: stur            x3, [fp, #-0x10]
    // 0x88d6ac: r0 = LoadStaticField(0xb54)
    //     0x88d6ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d6b0: ldr             x0, [x0, #0x16a8]
    // 0x88d6b4: cmp             w0, NULL
    // 0x88d6b8: b.ne            #0x88d6c4
    // 0x88d6bc: r0 = Null
    //     0x88d6bc: mov             x0, NULL
    // 0x88d6c0: b               #0x88d6ec
    // 0x88d6c4: r17 = 347
    //     0x88d6c4: movz            x17, #0x15b
    // 0x88d6c8: ldr             w1, [x0, x17]
    // 0x88d6cc: DecompressPointer r1
    //     0x88d6cc: add             x1, x1, HEAP, lsl #32
    // 0x88d6d0: r0 = LoadClassIdInstr(r1)
    //     0x88d6d0: ldur            x0, [x1, #-1]
    //     0x88d6d4: ubfx            x0, x0, #0xc, #0x14
    // 0x88d6d8: r2 = "youngjimaCompletion"
    //     0x88d6d8: add             x2, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x88d6dc: ldr             x2, [x2, #0x8e0]
    // 0x88d6e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d6e0: sub             lr, x0, #0xb4
    //     0x88d6e4: ldr             lr, [x21, lr, lsl #3]
    //     0x88d6e8: blr             lr
    // 0x88d6ec: cmp             w0, NULL
    // 0x88d6f0: b.ne            #0x88d6fc
    // 0x88d6f4: r4 = 0
    //     0x88d6f4: movz            x4, #0
    // 0x88d6f8: b               #0x88d700
    // 0x88d6fc: mov             x4, x0
    // 0x88d700: ldur            x3, [fp, #-0x10]
    // 0x88d704: mov             x0, x4
    // 0x88d708: stur            x4, [fp, #-8]
    // 0x88d70c: r2 = Null
    //     0x88d70c: mov             x2, NULL
    // 0x88d710: r1 = Null
    //     0x88d710: mov             x1, NULL
    // 0x88d714: branchIfSmi(r0, 0x88d73c)
    //     0x88d714: tbz             w0, #0, #0x88d73c
    // 0x88d718: r4 = LoadClassIdInstr(r0)
    //     0x88d718: ldur            x4, [x0, #-1]
    //     0x88d71c: ubfx            x4, x4, #0xc, #0x14
    // 0x88d720: sub             x4, x4, #0x3b
    // 0x88d724: cmp             x4, #1
    // 0x88d728: b.ls            #0x88d73c
    // 0x88d72c: r8 = int
    //     0x88d72c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d730: r3 = Null
    //     0x88d730: add             x3, PP, #0x13, lsl #12  ; [pp+0x13800] Null
    //     0x88d734: ldr             x3, [x3, #0x800]
    // 0x88d738: r0 = int()
    //     0x88d738: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d73c: ldur            x0, [fp, #-8]
    // 0x88d740: r1 = LoadInt32Instr(r0)
    //     0x88d740: sbfx            x1, x0, #1, #0x1f
    //     0x88d744: tbz             w0, #0, #0x88d74c
    //     0x88d748: ldur            x1, [x0, #7]
    // 0x88d74c: scvtf           d0, x1
    // 0x88d750: d1 = 100.000000
    //     0x88d750: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d754: ldr             d1, [x17, #0xa28]
    // 0x88d758: fdiv            d2, d0, d1
    // 0x88d75c: ldur            x0, [fp, #-0x10]
    // 0x88d760: scvtf           d0, x0
    // 0x88d764: fmul            d1, d2, d0
    // 0x88d768: fcmp            d1, d1
    // 0x88d76c: b.vs            #0x88e39c
    // 0x88d770: fcvtms          x2, d1
    // 0x88d774: asr             x16, x2, #0x1e
    // 0x88d778: cmp             x16, x2, asr #63
    // 0x88d77c: b.ne            #0x88e39c
    // 0x88d780: lsl             x2, x2, #1
    // 0x88d784: cmp             x1, #0x32
    // 0x88d788: b.gt            #0x88d7d4
    // 0x88d78c: d0 = 0.500000
    //     0x88d78c: fmov            d0, #0.50000000
    // 0x88d790: r1 = LoadInt32Instr(r2)
    //     0x88d790: sbfx            x1, x2, #1, #0x1f
    //     0x88d794: tbz             w2, #0, #0x88d79c
    //     0x88d798: ldur            x1, [x2, #7]
    // 0x88d79c: scvtf           d1, x1
    // 0x88d7a0: fmul            d2, d1, d0
    // 0x88d7a4: fcmp            d2, d2
    // 0x88d7a8: b.vs            #0x88e3c8
    // 0x88d7ac: fcvtms          x1, d2
    // 0x88d7b0: asr             x16, x1, #0x1e
    // 0x88d7b4: cmp             x16, x1, asr #63
    // 0x88d7b8: b.ne            #0x88e3c8
    // 0x88d7bc: lsl             x1, x1, #1
    // 0x88d7c0: r2 = LoadInt32Instr(r1)
    //     0x88d7c0: sbfx            x2, x1, #1, #0x1f
    //     0x88d7c4: tbz             w1, #0, #0x88d7cc
    //     0x88d7c8: ldur            x2, [x1, #7]
    // 0x88d7cc: mov             x1, x2
    // 0x88d7d0: b               #0x88d830
    // 0x88d7d4: cmp             x1, #0x55
    // 0x88d7d8: b.gt            #0x88d824
    // 0x88d7dc: d2 = 0.750000
    //     0x88d7dc: fmov            d2, #0.75000000
    // 0x88d7e0: r1 = LoadInt32Instr(r2)
    //     0x88d7e0: sbfx            x1, x2, #1, #0x1f
    //     0x88d7e4: tbz             w2, #0, #0x88d7ec
    //     0x88d7e8: ldur            x1, [x2, #7]
    // 0x88d7ec: scvtf           d0, x1
    // 0x88d7f0: fmul            d1, d0, d2
    // 0x88d7f4: fcmp            d1, d1
    // 0x88d7f8: b.vs            #0x88e3f4
    // 0x88d7fc: fcvtms          x1, d1
    // 0x88d800: asr             x16, x1, #0x1e
    // 0x88d804: cmp             x16, x1, asr #63
    // 0x88d808: b.ne            #0x88e3f4
    // 0x88d80c: lsl             x1, x1, #1
    // 0x88d810: r2 = LoadInt32Instr(r1)
    //     0x88d810: sbfx            x2, x1, #1, #0x1f
    //     0x88d814: tbz             w1, #0, #0x88d81c
    //     0x88d818: ldur            x2, [x1, #7]
    // 0x88d81c: mov             x1, x2
    // 0x88d820: b               #0x88d830
    // 0x88d824: r1 = LoadInt32Instr(r2)
    //     0x88d824: sbfx            x1, x2, #1, #0x1f
    //     0x88d828: tbz             w2, #0, #0x88d830
    //     0x88d82c: ldur            x1, [x2, #7]
    // 0x88d830: cmp             x1, x0
    // 0x88d834: b.gt            #0x88db2c
    // 0x88d838: cmp             x1, #0
    // 0x88d83c: b.gt            #0x88d848
    // 0x88d840: r0 = 1
    //     0x88d840: movz            x0, #0x1
    // 0x88d844: b               #0x88db2c
    // 0x88d848: mov             x0, x1
    // 0x88d84c: b               #0x88db2c
    // 0x88d850: d1 = 100.000000
    //     0x88d850: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d854: ldr             d1, [x17, #0xa28]
    // 0x88d858: d2 = 0.750000
    //     0x88d858: fmov            d2, #0.75000000
    // 0x88d85c: d0 = 0.500000
    //     0x88d85c: fmov            d0, #0.50000000
    // 0x88d860: r16 = "lootMoneyYoungJima"
    //     0x88d860: add             x16, PP, #0x13, lsl #12  ; [pp+0x13810] "lootMoneyYoungJima"
    //     0x88d864: ldr             x16, [x16, #0x810]
    // 0x88d868: ldur            lr, [fp, #-0x20]
    // 0x88d86c: stp             lr, x16, [SP]
    // 0x88d870: r0 = ==()
    //     0x88d870: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88d874: tbnz            w0, #4, #0x88da30
    // 0x88d878: r1 = "youngjima"
    //     0x88d878: add             x1, PP, #0x13, lsl #12  ; [pp+0x137f8] "youngjima"
    //     0x88d87c: ldr             x1, [x1, #0x7f8]
    // 0x88d880: r0 = getMemory()
    //     0x88d880: bl              #0x88e4a4  ; [package:battlecross/library/memoryLibrary.dart] ::getMemory
    // 0x88d884: LoadField: r3 = r0->field_23
    //     0x88d884: ldur            x3, [x0, #0x23]
    // 0x88d888: stur            x3, [fp, #-0x10]
    // 0x88d88c: r0 = LoadStaticField(0xb54)
    //     0x88d88c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88d890: ldr             x0, [x0, #0x16a8]
    // 0x88d894: cmp             w0, NULL
    // 0x88d898: b.ne            #0x88d8a4
    // 0x88d89c: r0 = Null
    //     0x88d89c: mov             x0, NULL
    // 0x88d8a0: b               #0x88d8cc
    // 0x88d8a4: r17 = 347
    //     0x88d8a4: movz            x17, #0x15b
    // 0x88d8a8: ldr             w1, [x0, x17]
    // 0x88d8ac: DecompressPointer r1
    //     0x88d8ac: add             x1, x1, HEAP, lsl #32
    // 0x88d8b0: r0 = LoadClassIdInstr(r1)
    //     0x88d8b0: ldur            x0, [x1, #-1]
    //     0x88d8b4: ubfx            x0, x0, #0xc, #0x14
    // 0x88d8b8: r2 = "youngjimaCompletion"
    //     0x88d8b8: add             x2, PP, #0x12, lsl #12  ; [pp+0x128e0] "youngjimaCompletion"
    //     0x88d8bc: ldr             x2, [x2, #0x8e0]
    // 0x88d8c0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88d8c0: sub             lr, x0, #0xb4
    //     0x88d8c4: ldr             lr, [x21, lr, lsl #3]
    //     0x88d8c8: blr             lr
    // 0x88d8cc: cmp             w0, NULL
    // 0x88d8d0: b.ne            #0x88d8dc
    // 0x88d8d4: r4 = 0
    //     0x88d8d4: movz            x4, #0
    // 0x88d8d8: b               #0x88d8e0
    // 0x88d8dc: mov             x4, x0
    // 0x88d8e0: ldur            x3, [fp, #-0x10]
    // 0x88d8e4: mov             x0, x4
    // 0x88d8e8: stur            x4, [fp, #-8]
    // 0x88d8ec: r2 = Null
    //     0x88d8ec: mov             x2, NULL
    // 0x88d8f0: r1 = Null
    //     0x88d8f0: mov             x1, NULL
    // 0x88d8f4: branchIfSmi(r0, 0x88d91c)
    //     0x88d8f4: tbz             w0, #0, #0x88d91c
    // 0x88d8f8: r4 = LoadClassIdInstr(r0)
    //     0x88d8f8: ldur            x4, [x0, #-1]
    //     0x88d8fc: ubfx            x4, x4, #0xc, #0x14
    // 0x88d900: sub             x4, x4, #0x3b
    // 0x88d904: cmp             x4, #1
    // 0x88d908: b.ls            #0x88d91c
    // 0x88d90c: r8 = int
    //     0x88d90c: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88d910: r3 = Null
    //     0x88d910: add             x3, PP, #0x13, lsl #12  ; [pp+0x13818] Null
    //     0x88d914: ldr             x3, [x3, #0x818]
    // 0x88d918: r0 = int()
    //     0x88d918: bl              #0x1524294  ; IsType_int_Stub
    // 0x88d91c: ldur            x0, [fp, #-8]
    // 0x88d920: r1 = LoadInt32Instr(r0)
    //     0x88d920: sbfx            x1, x0, #1, #0x1f
    //     0x88d924: tbz             w0, #0, #0x88d92c
    //     0x88d928: ldur            x1, [x0, #7]
    // 0x88d92c: scvtf           d0, x1
    // 0x88d930: d1 = 100.000000
    //     0x88d930: add             x17, PP, #0x12, lsl #12  ; [pp+0x12a28] IMM: double(100) from 0x4059000000000000
    //     0x88d934: ldr             d1, [x17, #0xa28]
    // 0x88d938: fdiv            d2, d0, d1
    // 0x88d93c: ldur            x0, [fp, #-0x10]
    // 0x88d940: scvtf           d0, x0
    // 0x88d944: fmul            d1, d2, d0
    // 0x88d948: fcmp            d1, d1
    // 0x88d94c: b.vs            #0x88e420
    // 0x88d950: fcvtms          x2, d1
    // 0x88d954: asr             x16, x2, #0x1e
    // 0x88d958: cmp             x16, x2, asr #63
    // 0x88d95c: b.ne            #0x88e420
    // 0x88d960: lsl             x2, x2, #1
    // 0x88d964: cmp             x1, #0x32
    // 0x88d968: b.gt            #0x88d9b4
    // 0x88d96c: d0 = 0.500000
    //     0x88d96c: fmov            d0, #0.50000000
    // 0x88d970: r1 = LoadInt32Instr(r2)
    //     0x88d970: sbfx            x1, x2, #1, #0x1f
    //     0x88d974: tbz             w2, #0, #0x88d97c
    //     0x88d978: ldur            x1, [x2, #7]
    // 0x88d97c: scvtf           d1, x1
    // 0x88d980: fmul            d2, d1, d0
    // 0x88d984: fcmp            d2, d2
    // 0x88d988: b.vs            #0x88e44c
    // 0x88d98c: fcvtms          x1, d2
    // 0x88d990: asr             x16, x1, #0x1e
    // 0x88d994: cmp             x16, x1, asr #63
    // 0x88d998: b.ne            #0x88e44c
    // 0x88d99c: lsl             x1, x1, #1
    // 0x88d9a0: r2 = LoadInt32Instr(r1)
    //     0x88d9a0: sbfx            x2, x1, #1, #0x1f
    //     0x88d9a4: tbz             w1, #0, #0x88d9ac
    //     0x88d9a8: ldur            x2, [x1, #7]
    // 0x88d9ac: mov             x1, x2
    // 0x88d9b0: b               #0x88da10
    // 0x88d9b4: cmp             x1, #0x55
    // 0x88d9b8: b.gt            #0x88da04
    // 0x88d9bc: d0 = 0.750000
    //     0x88d9bc: fmov            d0, #0.75000000
    // 0x88d9c0: r1 = LoadInt32Instr(r2)
    //     0x88d9c0: sbfx            x1, x2, #1, #0x1f
    //     0x88d9c4: tbz             w2, #0, #0x88d9cc
    //     0x88d9c8: ldur            x1, [x2, #7]
    // 0x88d9cc: scvtf           d1, x1
    // 0x88d9d0: fmul            d2, d1, d0
    // 0x88d9d4: fcmp            d2, d2
    // 0x88d9d8: b.vs            #0x88e478
    // 0x88d9dc: fcvtms          x1, d2
    // 0x88d9e0: asr             x16, x1, #0x1e
    // 0x88d9e4: cmp             x16, x1, asr #63
    // 0x88d9e8: b.ne            #0x88e478
    // 0x88d9ec: lsl             x1, x1, #1
    // 0x88d9f0: r2 = LoadInt32Instr(r1)
    //     0x88d9f0: sbfx            x2, x1, #1, #0x1f
    //     0x88d9f4: tbz             w1, #0, #0x88d9fc
    //     0x88d9f8: ldur            x2, [x1, #7]
    // 0x88d9fc: mov             x1, x2
    // 0x88da00: b               #0x88da10
    // 0x88da04: r1 = LoadInt32Instr(r2)
    //     0x88da04: sbfx            x1, x2, #1, #0x1f
    //     0x88da08: tbz             w2, #0, #0x88da10
    //     0x88da0c: ldur            x1, [x2, #7]
    // 0x88da10: cmp             x1, #0x64
    // 0x88da14: b.gt            #0x88da20
    // 0x88da18: r0 = 100
    //     0x88da18: movz            x0, #0x64
    // 0x88da1c: b               #0x88db2c
    // 0x88da20: cmp             x1, x0
    // 0x88da24: b.gt            #0x88db2c
    // 0x88da28: mov             x0, x1
    // 0x88da2c: b               #0x88db2c
    // 0x88da30: r16 = "youngjimamemoryDay2Completion"
    //     0x88da30: add             x16, PP, #0x13, lsl #12  ; [pp+0x13828] "youngjimamemoryDay2Completion"
    //     0x88da34: ldr             x16, [x16, #0x828]
    // 0x88da38: ldur            lr, [fp, #-0x20]
    // 0x88da3c: stp             lr, x16, [SP]
    // 0x88da40: r0 = ==()
    //     0x88da40: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x88da44: tbnz            w0, #4, #0x88db28
    // 0x88da48: r0 = LoadStaticField(0xb54)
    //     0x88da48: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x88da4c: ldr             x0, [x0, #0x16a8]
    // 0x88da50: cmp             w0, NULL
    // 0x88da54: b.ne            #0x88da60
    // 0x88da58: r0 = Null
    //     0x88da58: mov             x0, NULL
    // 0x88da5c: b               #0x88da88
    // 0x88da60: r17 = 347
    //     0x88da60: movz            x17, #0x15b
    // 0x88da64: ldr             w1, [x0, x17]
    // 0x88da68: DecompressPointer r1
    //     0x88da68: add             x1, x1, HEAP, lsl #32
    // 0x88da6c: r0 = LoadClassIdInstr(r1)
    //     0x88da6c: ldur            x0, [x1, #-1]
    //     0x88da70: ubfx            x0, x0, #0xc, #0x14
    // 0x88da74: r2 = "youngjimamemoryDay2Win"
    //     0x88da74: add             x2, PP, #0x12, lsl #12  ; [pp+0x128d0] "youngjimamemoryDay2Win"
    //     0x88da78: ldr             x2, [x2, #0x8d0]
    // 0x88da7c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x88da7c: sub             lr, x0, #0xb4
    //     0x88da80: ldr             lr, [x21, lr, lsl #3]
    //     0x88da84: blr             lr
    // 0x88da88: cmp             w0, NULL
    // 0x88da8c: b.ne            #0x88da98
    // 0x88da90: r3 = 0
    //     0x88da90: movz            x3, #0
    // 0x88da94: b               #0x88da9c
    // 0x88da98: mov             x3, x0
    // 0x88da9c: mov             x0, x3
    // 0x88daa0: stur            x3, [fp, #-8]
    // 0x88daa4: r2 = Null
    //     0x88daa4: mov             x2, NULL
    // 0x88daa8: r1 = Null
    //     0x88daa8: mov             x1, NULL
    // 0x88daac: branchIfSmi(r0, 0x88dad4)
    //     0x88daac: tbz             w0, #0, #0x88dad4
    // 0x88dab0: r4 = LoadClassIdInstr(r0)
    //     0x88dab0: ldur            x4, [x0, #-1]
    //     0x88dab4: ubfx            x4, x4, #0xc, #0x14
    // 0x88dab8: sub             x4, x4, #0x3b
    // 0x88dabc: cmp             x4, #1
    // 0x88dac0: b.ls            #0x88dad4
    // 0x88dac4: r8 = int
    //     0x88dac4: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x88dac8: r3 = Null
    //     0x88dac8: add             x3, PP, #0x13, lsl #12  ; [pp+0x13830] Null
    //     0x88dacc: ldr             x3, [x3, #0x830]
    // 0x88dad0: r0 = int()
    //     0x88dad0: bl              #0x1524294  ; IsType_int_Stub
    // 0x88dad4: ldur            x1, [fp, #-8]
    // 0x88dad8: r2 = LoadInt32Instr(r1)
    //     0x88dad8: sbfx            x2, x1, #1, #0x1f
    //     0x88dadc: tbz             w1, #0, #0x88dae4
    //     0x88dae0: ldur            x2, [x1, #7]
    // 0x88dae4: cmp             x2, #3
    // 0x88dae8: b.lt            #0x88daf4
    // 0x88daec: r1 = 20
    //     0x88daec: movz            x1, #0x14
    // 0x88daf0: b               #0x88db20
    // 0x88daf4: cbz             x2, #0x88db00
    // 0x88daf8: r1 = false
    //     0x88daf8: add             x1, NULL, #0x30  ; false
    // 0x88dafc: b               #0x88db04
    // 0x88db00: r1 = true
    //     0x88db00: add             x1, NULL, #0x20  ; true
    // 0x88db04: tst             x1, #0x10
    // 0x88db08: cset            x2, ne
    // 0x88db0c: sub             x2, x2, #1
    // 0x88db10: r16 = -10
    //     0x88db10: movn            x16, #0x9
    // 0x88db14: and             x2, x2, x16
    // 0x88db18: add             x2, x2, #0x14
    // 0x88db1c: r1 = LoadInt32Instr(r2)
    //     0x88db1c: sbfx            x1, x2, #1, #0x1f
    // 0x88db20: mov             x0, x1
    // 0x88db24: b               #0x88db2c
    // 0x88db28: r0 = 0
    //     0x88db28: movz            x0, #0
    // 0x88db2c: LeaveFrame
    //     0x88db2c: mov             SP, fp
    //     0x88db30: ldp             fp, lr, [SP], #0x10
    // 0x88db34: ret
    //     0x88db34: ret             
    // 0x88db38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x88db38: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x88db3c: b               #0x883b8c
    // 0x88db40: SaveReg d0
    //     0x88db40: str             q0, [SP, #-0x10]!
    // 0x88db44: r0 = 232
    //     0x88db44: movz            x0, #0xe8
    // 0x88db48: r30 = DoubleToIntegerStub
    //     0x88db48: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88db4c: LoadField: r30 = r30->field_7
    //     0x88db4c: ldur            lr, [lr, #7]
    // 0x88db50: blr             lr
    // 0x88db54: RestoreReg d0
    //     0x88db54: ldr             q0, [SP], #0x10
    // 0x88db58: b               #0x883c4c
    // 0x88db5c: SaveReg d2
    //     0x88db5c: str             q2, [SP, #-0x10]!
    // 0x88db60: d0 = 0.000000
    //     0x88db60: fmov            d0, d2
    // 0x88db64: r0 = 226
    //     0x88db64: movz            x0, #0xe2
    // 0x88db68: r30 = DoubleToIntegerStub
    //     0x88db68: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88db6c: LoadField: r30 = r30->field_7
    //     0x88db6c: ldur            lr, [lr, #7]
    // 0x88db70: blr             lr
    // 0x88db74: RestoreReg d2
    //     0x88db74: ldr             q2, [SP], #0x10
    // 0x88db78: b               #0x883dd4
    // 0x88db7c: SaveReg d2
    //     0x88db7c: str             q2, [SP, #-0x10]!
    // 0x88db80: SaveReg r2
    //     0x88db80: str             x2, [SP, #-8]!
    // 0x88db84: d0 = 0.000000
    //     0x88db84: fmov            d0, d2
    // 0x88db88: r0 = 222
    //     0x88db88: movz            x0, #0xde
    // 0x88db8c: r30 = DoubleToIntegerStub
    //     0x88db8c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88db90: LoadField: r30 = r30->field_7
    //     0x88db90: ldur            lr, [lr, #7]
    // 0x88db94: blr             lr
    // 0x88db98: RestoreReg r2
    //     0x88db98: ldr             x2, [SP], #8
    // 0x88db9c: RestoreReg d2
    //     0x88db9c: ldr             q2, [SP], #0x10
    // 0x88dba0: b               #0x886804
    // 0x88dba4: SaveReg d2
    //     0x88dba4: str             q2, [SP, #-0x10]!
    // 0x88dba8: SaveReg r2
    //     0x88dba8: str             x2, [SP, #-8]!
    // 0x88dbac: d0 = 0.000000
    //     0x88dbac: fmov            d0, d2
    // 0x88dbb0: r0 = 222
    //     0x88dbb0: movz            x0, #0xde
    // 0x88dbb4: r30 = DoubleToIntegerStub
    //     0x88dbb4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dbb8: LoadField: r30 = r30->field_7
    //     0x88dbb8: ldur            lr, [lr, #7]
    // 0x88dbbc: blr             lr
    // 0x88dbc0: RestoreReg r2
    //     0x88dbc0: ldr             x2, [SP], #8
    // 0x88dbc4: RestoreReg d2
    //     0x88dbc4: ldr             q2, [SP], #0x10
    // 0x88dbc8: b               #0x88689c
    // 0x88dbcc: SaveReg d2
    //     0x88dbcc: str             q2, [SP, #-0x10]!
    // 0x88dbd0: SaveReg r2
    //     0x88dbd0: str             x2, [SP, #-8]!
    // 0x88dbd4: d0 = 0.000000
    //     0x88dbd4: fmov            d0, d2
    // 0x88dbd8: r0 = 222
    //     0x88dbd8: movz            x0, #0xde
    // 0x88dbdc: r30 = DoubleToIntegerStub
    //     0x88dbdc: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dbe0: LoadField: r30 = r30->field_7
    //     0x88dbe0: ldur            lr, [lr, #7]
    // 0x88dbe4: blr             lr
    // 0x88dbe8: RestoreReg r2
    //     0x88dbe8: ldr             x2, [SP], #8
    // 0x88dbec: RestoreReg d2
    //     0x88dbec: ldr             q2, [SP], #0x10
    // 0x88dbf0: b               #0x886954
    // 0x88dbf4: SaveReg d2
    //     0x88dbf4: str             q2, [SP, #-0x10]!
    // 0x88dbf8: SaveReg r2
    //     0x88dbf8: str             x2, [SP, #-8]!
    // 0x88dbfc: d0 = 0.000000
    //     0x88dbfc: fmov            d0, d2
    // 0x88dc00: r0 = 222
    //     0x88dc00: movz            x0, #0xde
    // 0x88dc04: r30 = DoubleToIntegerStub
    //     0x88dc04: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dc08: LoadField: r30 = r30->field_7
    //     0x88dc08: ldur            lr, [lr, #7]
    // 0x88dc0c: blr             lr
    // 0x88dc10: RestoreReg r2
    //     0x88dc10: ldr             x2, [SP], #8
    // 0x88dc14: RestoreReg d2
    //     0x88dc14: ldr             q2, [SP], #0x10
    // 0x88dc18: b               #0x8869ec
    // 0x88dc1c: SaveReg d0
    //     0x88dc1c: str             q0, [SP, #-0x10]!
    // 0x88dc20: stp             x2, x3, [SP, #-0x10]!
    // 0x88dc24: SaveReg r0
    //     0x88dc24: str             x0, [SP, #-8]!
    // 0x88dc28: r0 = 226
    //     0x88dc28: movz            x0, #0xe2
    // 0x88dc2c: r30 = DoubleToIntegerStub
    //     0x88dc2c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dc30: LoadField: r30 = r30->field_7
    //     0x88dc30: ldur            lr, [lr, #7]
    // 0x88dc34: blr             lr
    // 0x88dc38: mov             x4, x0
    // 0x88dc3c: RestoreReg r0
    //     0x88dc3c: ldr             x0, [SP], #8
    // 0x88dc40: ldp             x2, x3, [SP], #0x10
    // 0x88dc44: RestoreReg d0
    //     0x88dc44: ldr             q0, [SP], #0x10
    // 0x88dc48: b               #0x886bf4
    // 0x88dc4c: SaveReg d2
    //     0x88dc4c: str             q2, [SP, #-0x10]!
    // 0x88dc50: SaveReg r1
    //     0x88dc50: str             x1, [SP, #-8]!
    // 0x88dc54: r0 = AllocateDouble()
    //     0x88dc54: bl              #0x15024b8  ; AllocateDoubleStub
    // 0x88dc58: RestoreReg r1
    //     0x88dc58: ldr             x1, [SP], #8
    // 0x88dc5c: RestoreReg d2
    //     0x88dc5c: ldr             q2, [SP], #0x10
    // 0x88dc60: b               #0x886f34
    // 0x88dc64: SaveReg d0
    //     0x88dc64: str             q0, [SP, #-0x10]!
    // 0x88dc68: stp             x2, x3, [SP, #-0x10]!
    // 0x88dc6c: SaveReg r0
    //     0x88dc6c: str             x0, [SP, #-8]!
    // 0x88dc70: r0 = 226
    //     0x88dc70: movz            x0, #0xe2
    // 0x88dc74: r30 = DoubleToIntegerStub
    //     0x88dc74: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dc78: LoadField: r30 = r30->field_7
    //     0x88dc78: ldur            lr, [lr, #7]
    // 0x88dc7c: blr             lr
    // 0x88dc80: mov             x4, x0
    // 0x88dc84: RestoreReg r0
    //     0x88dc84: ldr             x0, [SP], #8
    // 0x88dc88: ldp             x2, x3, [SP], #0x10
    // 0x88dc8c: RestoreReg d0
    //     0x88dc8c: ldr             q0, [SP], #0x10
    // 0x88dc90: b               #0x887250
    // 0x88dc94: SaveReg d2
    //     0x88dc94: str             q2, [SP, #-0x10]!
    // 0x88dc98: SaveReg r2
    //     0x88dc98: str             x2, [SP, #-8]!
    // 0x88dc9c: d0 = 0.000000
    //     0x88dc9c: fmov            d0, d2
    // 0x88dca0: r0 = 226
    //     0x88dca0: movz            x0, #0xe2
    // 0x88dca4: r30 = DoubleToIntegerStub
    //     0x88dca4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dca8: LoadField: r30 = r30->field_7
    //     0x88dca8: ldur            lr, [lr, #7]
    // 0x88dcac: blr             lr
    // 0x88dcb0: RestoreReg r2
    //     0x88dcb0: ldr             x2, [SP], #8
    // 0x88dcb4: RestoreReg d2
    //     0x88dcb4: ldr             q2, [SP], #0x10
    // 0x88dcb8: b               #0x887d10
    // 0x88dcbc: SaveReg d2
    //     0x88dcbc: str             q2, [SP, #-0x10]!
    // 0x88dcc0: d0 = 0.000000
    //     0x88dcc0: fmov            d0, d2
    // 0x88dcc4: r0 = 226
    //     0x88dcc4: movz            x0, #0xe2
    // 0x88dcc8: r30 = DoubleToIntegerStub
    //     0x88dcc8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dccc: LoadField: r30 = r30->field_7
    //     0x88dccc: ldur            lr, [lr, #7]
    // 0x88dcd0: blr             lr
    // 0x88dcd4: RestoreReg d2
    //     0x88dcd4: ldr             q2, [SP], #0x10
    // 0x88dcd8: b               #0x88910c
    // 0x88dcdc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcdc: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dce0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dce0: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dce4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dce4: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dce8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dce8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dcec: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcec: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dcf0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcf0: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dcf4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcf4: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dcf8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcf8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dcfc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dcfc: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd00: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd00: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd04: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd04: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd08: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd08: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd0c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd0c: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd10: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd10: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd14: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd14: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd18: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd18: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd1c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd1c: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd20: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x88dd20: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x88dd24: SaveReg d1
    //     0x88dd24: str             q1, [SP, #-0x10]!
    // 0x88dd28: stp             x0, x1, [SP, #-0x10]!
    // 0x88dd2c: d0 = 0.000000
    //     0x88dd2c: fmov            d0, d1
    // 0x88dd30: r0 = 226
    //     0x88dd30: movz            x0, #0xe2
    // 0x88dd34: r30 = DoubleToIntegerStub
    //     0x88dd34: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dd38: LoadField: r30 = r30->field_7
    //     0x88dd38: ldur            lr, [lr, #7]
    // 0x88dd3c: blr             lr
    // 0x88dd40: mov             x2, x0
    // 0x88dd44: ldp             x0, x1, [SP], #0x10
    // 0x88dd48: RestoreReg d1
    //     0x88dd48: ldr             q1, [SP], #0x10
    // 0x88dd4c: b               #0x889f58
    // 0x88dd50: SaveReg d2
    //     0x88dd50: str             q2, [SP, #-0x10]!
    // 0x88dd54: SaveReg r0
    //     0x88dd54: str             x0, [SP, #-8]!
    // 0x88dd58: d0 = 0.000000
    //     0x88dd58: fmov            d0, d2
    // 0x88dd5c: r0 = 226
    //     0x88dd5c: movz            x0, #0xe2
    // 0x88dd60: r30 = DoubleToIntegerStub
    //     0x88dd60: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dd64: LoadField: r30 = r30->field_7
    //     0x88dd64: ldur            lr, [lr, #7]
    // 0x88dd68: blr             lr
    // 0x88dd6c: mov             x1, x0
    // 0x88dd70: RestoreReg r0
    //     0x88dd70: ldr             x0, [SP], #8
    // 0x88dd74: RestoreReg d2
    //     0x88dd74: ldr             q2, [SP], #0x10
    // 0x88dd78: b               #0x889f94
    // 0x88dd7c: SaveReg d1
    //     0x88dd7c: str             q1, [SP, #-0x10]!
    // 0x88dd80: SaveReg r0
    //     0x88dd80: str             x0, [SP, #-8]!
    // 0x88dd84: d0 = 0.000000
    //     0x88dd84: fmov            d0, d1
    // 0x88dd88: r0 = 226
    //     0x88dd88: movz            x0, #0xe2
    // 0x88dd8c: r30 = DoubleToIntegerStub
    //     0x88dd8c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dd90: LoadField: r30 = r30->field_7
    //     0x88dd90: ldur            lr, [lr, #7]
    // 0x88dd94: blr             lr
    // 0x88dd98: mov             x1, x0
    // 0x88dd9c: RestoreReg r0
    //     0x88dd9c: ldr             x0, [SP], #8
    // 0x88dda0: RestoreReg d1
    //     0x88dda0: ldr             q1, [SP], #0x10
    // 0x88dda4: b               #0x889fe4
    // 0x88dda8: SaveReg d1
    //     0x88dda8: str             q1, [SP, #-0x10]!
    // 0x88ddac: stp             x0, x1, [SP, #-0x10]!
    // 0x88ddb0: d0 = 0.000000
    //     0x88ddb0: fmov            d0, d1
    // 0x88ddb4: r0 = 226
    //     0x88ddb4: movz            x0, #0xe2
    // 0x88ddb8: r30 = DoubleToIntegerStub
    //     0x88ddb8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88ddbc: LoadField: r30 = r30->field_7
    //     0x88ddbc: ldur            lr, [lr, #7]
    // 0x88ddc0: blr             lr
    // 0x88ddc4: mov             x2, x0
    // 0x88ddc8: ldp             x0, x1, [SP], #0x10
    // 0x88ddcc: RestoreReg d1
    //     0x88ddcc: ldr             q1, [SP], #0x10
    // 0x88ddd0: b               #0x88a138
    // 0x88ddd4: SaveReg d2
    //     0x88ddd4: str             q2, [SP, #-0x10]!
    // 0x88ddd8: SaveReg r0
    //     0x88ddd8: str             x0, [SP, #-8]!
    // 0x88dddc: d0 = 0.000000
    //     0x88dddc: fmov            d0, d2
    // 0x88dde0: r0 = 226
    //     0x88dde0: movz            x0, #0xe2
    // 0x88dde4: r30 = DoubleToIntegerStub
    //     0x88dde4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dde8: LoadField: r30 = r30->field_7
    //     0x88dde8: ldur            lr, [lr, #7]
    // 0x88ddec: blr             lr
    // 0x88ddf0: mov             x1, x0
    // 0x88ddf4: RestoreReg r0
    //     0x88ddf4: ldr             x0, [SP], #8
    // 0x88ddf8: RestoreReg d2
    //     0x88ddf8: ldr             q2, [SP], #0x10
    // 0x88ddfc: b               #0x88a174
    // 0x88de00: SaveReg d1
    //     0x88de00: str             q1, [SP, #-0x10]!
    // 0x88de04: SaveReg r0
    //     0x88de04: str             x0, [SP, #-8]!
    // 0x88de08: d0 = 0.000000
    //     0x88de08: fmov            d0, d1
    // 0x88de0c: r0 = 226
    //     0x88de0c: movz            x0, #0xe2
    // 0x88de10: r30 = DoubleToIntegerStub
    //     0x88de10: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88de14: LoadField: r30 = r30->field_7
    //     0x88de14: ldur            lr, [lr, #7]
    // 0x88de18: blr             lr
    // 0x88de1c: mov             x1, x0
    // 0x88de20: RestoreReg r0
    //     0x88de20: ldr             x0, [SP], #8
    // 0x88de24: RestoreReg d1
    //     0x88de24: ldr             q1, [SP], #0x10
    // 0x88de28: b               #0x88a1c4
    // 0x88de2c: SaveReg d1
    //     0x88de2c: str             q1, [SP, #-0x10]!
    // 0x88de30: stp             x0, x1, [SP, #-0x10]!
    // 0x88de34: d0 = 0.000000
    //     0x88de34: fmov            d0, d1
    // 0x88de38: r0 = 226
    //     0x88de38: movz            x0, #0xe2
    // 0x88de3c: r30 = DoubleToIntegerStub
    //     0x88de3c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88de40: LoadField: r30 = r30->field_7
    //     0x88de40: ldur            lr, [lr, #7]
    // 0x88de44: blr             lr
    // 0x88de48: mov             x2, x0
    // 0x88de4c: ldp             x0, x1, [SP], #0x10
    // 0x88de50: RestoreReg d1
    //     0x88de50: ldr             q1, [SP], #0x10
    // 0x88de54: b               #0x88a540
    // 0x88de58: SaveReg d2
    //     0x88de58: str             q2, [SP, #-0x10]!
    // 0x88de5c: d0 = 0.000000
    //     0x88de5c: fmov            d0, d2
    // 0x88de60: r0 = 226
    //     0x88de60: movz            x0, #0xe2
    // 0x88de64: r30 = DoubleToIntegerStub
    //     0x88de64: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88de68: LoadField: r30 = r30->field_7
    //     0x88de68: ldur            lr, [lr, #7]
    // 0x88de6c: blr             lr
    // 0x88de70: RestoreReg d2
    //     0x88de70: ldr             q2, [SP], #0x10
    // 0x88de74: b               #0x88a598
    // 0x88de78: SaveReg d1
    //     0x88de78: str             q1, [SP, #-0x10]!
    // 0x88de7c: d0 = 0.000000
    //     0x88de7c: fmov            d0, d1
    // 0x88de80: r0 = 226
    //     0x88de80: movz            x0, #0xe2
    // 0x88de84: r30 = DoubleToIntegerStub
    //     0x88de84: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88de88: LoadField: r30 = r30->field_7
    //     0x88de88: ldur            lr, [lr, #7]
    // 0x88de8c: blr             lr
    // 0x88de90: RestoreReg d1
    //     0x88de90: ldr             q1, [SP], #0x10
    // 0x88de94: b               #0x88a5dc
    // 0x88de98: SaveReg d1
    //     0x88de98: str             q1, [SP, #-0x10]!
    // 0x88de9c: stp             x0, x1, [SP, #-0x10]!
    // 0x88dea0: d0 = 0.000000
    //     0x88dea0: fmov            d0, d1
    // 0x88dea4: r0 = 226
    //     0x88dea4: movz            x0, #0xe2
    // 0x88dea8: r30 = DoubleToIntegerStub
    //     0x88dea8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88deac: LoadField: r30 = r30->field_7
    //     0x88deac: ldur            lr, [lr, #7]
    // 0x88deb0: blr             lr
    // 0x88deb4: mov             x2, x0
    // 0x88deb8: ldp             x0, x1, [SP], #0x10
    // 0x88debc: RestoreReg d1
    //     0x88debc: ldr             q1, [SP], #0x10
    // 0x88dec0: b               #0x88a704
    // 0x88dec4: SaveReg d2
    //     0x88dec4: str             q2, [SP, #-0x10]!
    // 0x88dec8: d0 = 0.000000
    //     0x88dec8: fmov            d0, d2
    // 0x88decc: r0 = 226
    //     0x88decc: movz            x0, #0xe2
    // 0x88ded0: r30 = DoubleToIntegerStub
    //     0x88ded0: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88ded4: LoadField: r30 = r30->field_7
    //     0x88ded4: ldur            lr, [lr, #7]
    // 0x88ded8: blr             lr
    // 0x88dedc: RestoreReg d2
    //     0x88dedc: ldr             q2, [SP], #0x10
    // 0x88dee0: b               #0x88a75c
    // 0x88dee4: SaveReg d1
    //     0x88dee4: str             q1, [SP, #-0x10]!
    // 0x88dee8: d0 = 0.000000
    //     0x88dee8: fmov            d0, d1
    // 0x88deec: r0 = 226
    //     0x88deec: movz            x0, #0xe2
    // 0x88def0: r30 = DoubleToIntegerStub
    //     0x88def0: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88def4: LoadField: r30 = r30->field_7
    //     0x88def4: ldur            lr, [lr, #7]
    // 0x88def8: blr             lr
    // 0x88defc: RestoreReg d1
    //     0x88defc: ldr             q1, [SP], #0x10
    // 0x88df00: b               #0x88a7a0
    // 0x88df04: SaveReg d1
    //     0x88df04: str             q1, [SP, #-0x10]!
    // 0x88df08: stp             x0, x1, [SP, #-0x10]!
    // 0x88df0c: d0 = 0.000000
    //     0x88df0c: fmov            d0, d1
    // 0x88df10: r0 = 226
    //     0x88df10: movz            x0, #0xe2
    // 0x88df14: r30 = DoubleToIntegerStub
    //     0x88df14: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88df18: LoadField: r30 = r30->field_7
    //     0x88df18: ldur            lr, [lr, #7]
    // 0x88df1c: blr             lr
    // 0x88df20: mov             x2, x0
    // 0x88df24: ldp             x0, x1, [SP], #0x10
    // 0x88df28: RestoreReg d1
    //     0x88df28: ldr             q1, [SP], #0x10
    // 0x88df2c: b               #0x88b058
    // 0x88df30: SaveReg d2
    //     0x88df30: str             q2, [SP, #-0x10]!
    // 0x88df34: d0 = 0.000000
    //     0x88df34: fmov            d0, d2
    // 0x88df38: r0 = 226
    //     0x88df38: movz            x0, #0xe2
    // 0x88df3c: r30 = DoubleToIntegerStub
    //     0x88df3c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88df40: LoadField: r30 = r30->field_7
    //     0x88df40: ldur            lr, [lr, #7]
    // 0x88df44: blr             lr
    // 0x88df48: RestoreReg d2
    //     0x88df48: ldr             q2, [SP], #0x10
    // 0x88df4c: b               #0x88b0b0
    // 0x88df50: SaveReg d1
    //     0x88df50: str             q1, [SP, #-0x10]!
    // 0x88df54: d0 = 0.000000
    //     0x88df54: fmov            d0, d1
    // 0x88df58: r0 = 226
    //     0x88df58: movz            x0, #0xe2
    // 0x88df5c: r30 = DoubleToIntegerStub
    //     0x88df5c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88df60: LoadField: r30 = r30->field_7
    //     0x88df60: ldur            lr, [lr, #7]
    // 0x88df64: blr             lr
    // 0x88df68: RestoreReg d1
    //     0x88df68: ldr             q1, [SP], #0x10
    // 0x88df6c: b               #0x88b0f4
    // 0x88df70: SaveReg d1
    //     0x88df70: str             q1, [SP, #-0x10]!
    // 0x88df74: stp             x0, x1, [SP, #-0x10]!
    // 0x88df78: d0 = 0.000000
    //     0x88df78: fmov            d0, d1
    // 0x88df7c: r0 = 226
    //     0x88df7c: movz            x0, #0xe2
    // 0x88df80: r30 = DoubleToIntegerStub
    //     0x88df80: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88df84: LoadField: r30 = r30->field_7
    //     0x88df84: ldur            lr, [lr, #7]
    // 0x88df88: blr             lr
    // 0x88df8c: mov             x2, x0
    // 0x88df90: ldp             x0, x1, [SP], #0x10
    // 0x88df94: RestoreReg d1
    //     0x88df94: ldr             q1, [SP], #0x10
    // 0x88df98: b               #0x88b21c
    // 0x88df9c: SaveReg d2
    //     0x88df9c: str             q2, [SP, #-0x10]!
    // 0x88dfa0: d0 = 0.000000
    //     0x88dfa0: fmov            d0, d2
    // 0x88dfa4: r0 = 226
    //     0x88dfa4: movz            x0, #0xe2
    // 0x88dfa8: r30 = DoubleToIntegerStub
    //     0x88dfa8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dfac: LoadField: r30 = r30->field_7
    //     0x88dfac: ldur            lr, [lr, #7]
    // 0x88dfb0: blr             lr
    // 0x88dfb4: RestoreReg d2
    //     0x88dfb4: ldr             q2, [SP], #0x10
    // 0x88dfb8: b               #0x88b274
    // 0x88dfbc: SaveReg d1
    //     0x88dfbc: str             q1, [SP, #-0x10]!
    // 0x88dfc0: d0 = 0.000000
    //     0x88dfc0: fmov            d0, d1
    // 0x88dfc4: r0 = 226
    //     0x88dfc4: movz            x0, #0xe2
    // 0x88dfc8: r30 = DoubleToIntegerStub
    //     0x88dfc8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dfcc: LoadField: r30 = r30->field_7
    //     0x88dfcc: ldur            lr, [lr, #7]
    // 0x88dfd0: blr             lr
    // 0x88dfd4: RestoreReg d1
    //     0x88dfd4: ldr             q1, [SP], #0x10
    // 0x88dfd8: b               #0x88b2b8
    // 0x88dfdc: SaveReg d1
    //     0x88dfdc: str             q1, [SP, #-0x10]!
    // 0x88dfe0: stp             x0, x1, [SP, #-0x10]!
    // 0x88dfe4: d0 = 0.000000
    //     0x88dfe4: fmov            d0, d1
    // 0x88dfe8: r0 = 226
    //     0x88dfe8: movz            x0, #0xe2
    // 0x88dfec: r30 = DoubleToIntegerStub
    //     0x88dfec: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88dff0: LoadField: r30 = r30->field_7
    //     0x88dff0: ldur            lr, [lr, #7]
    // 0x88dff4: blr             lr
    // 0x88dff8: mov             x2, x0
    // 0x88dffc: ldp             x0, x1, [SP], #0x10
    // 0x88e000: RestoreReg d1
    //     0x88e000: ldr             q1, [SP], #0x10
    // 0x88e004: b               #0x88b7cc
    // 0x88e008: SaveReg d2
    //     0x88e008: str             q2, [SP, #-0x10]!
    // 0x88e00c: d0 = 0.000000
    //     0x88e00c: fmov            d0, d2
    // 0x88e010: r0 = 226
    //     0x88e010: movz            x0, #0xe2
    // 0x88e014: r30 = DoubleToIntegerStub
    //     0x88e014: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e018: LoadField: r30 = r30->field_7
    //     0x88e018: ldur            lr, [lr, #7]
    // 0x88e01c: blr             lr
    // 0x88e020: RestoreReg d2
    //     0x88e020: ldr             q2, [SP], #0x10
    // 0x88e024: b               #0x88b824
    // 0x88e028: SaveReg d1
    //     0x88e028: str             q1, [SP, #-0x10]!
    // 0x88e02c: d0 = 0.000000
    //     0x88e02c: fmov            d0, d1
    // 0x88e030: r0 = 226
    //     0x88e030: movz            x0, #0xe2
    // 0x88e034: r30 = DoubleToIntegerStub
    //     0x88e034: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e038: LoadField: r30 = r30->field_7
    //     0x88e038: ldur            lr, [lr, #7]
    // 0x88e03c: blr             lr
    // 0x88e040: RestoreReg d1
    //     0x88e040: ldr             q1, [SP], #0x10
    // 0x88e044: b               #0x88b868
    // 0x88e048: SaveReg d1
    //     0x88e048: str             q1, [SP, #-0x10]!
    // 0x88e04c: stp             x0, x1, [SP, #-0x10]!
    // 0x88e050: d0 = 0.000000
    //     0x88e050: fmov            d0, d1
    // 0x88e054: r0 = 226
    //     0x88e054: movz            x0, #0xe2
    // 0x88e058: r30 = DoubleToIntegerStub
    //     0x88e058: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e05c: LoadField: r30 = r30->field_7
    //     0x88e05c: ldur            lr, [lr, #7]
    // 0x88e060: blr             lr
    // 0x88e064: mov             x2, x0
    // 0x88e068: ldp             x0, x1, [SP], #0x10
    // 0x88e06c: RestoreReg d1
    //     0x88e06c: ldr             q1, [SP], #0x10
    // 0x88e070: b               #0x88b990
    // 0x88e074: SaveReg d2
    //     0x88e074: str             q2, [SP, #-0x10]!
    // 0x88e078: d0 = 0.000000
    //     0x88e078: fmov            d0, d2
    // 0x88e07c: r0 = 226
    //     0x88e07c: movz            x0, #0xe2
    // 0x88e080: r30 = DoubleToIntegerStub
    //     0x88e080: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e084: LoadField: r30 = r30->field_7
    //     0x88e084: ldur            lr, [lr, #7]
    // 0x88e088: blr             lr
    // 0x88e08c: RestoreReg d2
    //     0x88e08c: ldr             q2, [SP], #0x10
    // 0x88e090: b               #0x88b9e8
    // 0x88e094: SaveReg d1
    //     0x88e094: str             q1, [SP, #-0x10]!
    // 0x88e098: d0 = 0.000000
    //     0x88e098: fmov            d0, d1
    // 0x88e09c: r0 = 226
    //     0x88e09c: movz            x0, #0xe2
    // 0x88e0a0: r30 = DoubleToIntegerStub
    //     0x88e0a0: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e0a4: LoadField: r30 = r30->field_7
    //     0x88e0a4: ldur            lr, [lr, #7]
    // 0x88e0a8: blr             lr
    // 0x88e0ac: RestoreReg d1
    //     0x88e0ac: ldr             q1, [SP], #0x10
    // 0x88e0b0: b               #0x88ba2c
    // 0x88e0b4: SaveReg d1
    //     0x88e0b4: str             q1, [SP, #-0x10]!
    // 0x88e0b8: stp             x0, x1, [SP, #-0x10]!
    // 0x88e0bc: d0 = 0.000000
    //     0x88e0bc: fmov            d0, d1
    // 0x88e0c0: r0 = 226
    //     0x88e0c0: movz            x0, #0xe2
    // 0x88e0c4: r30 = DoubleToIntegerStub
    //     0x88e0c4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e0c8: LoadField: r30 = r30->field_7
    //     0x88e0c8: ldur            lr, [lr, #7]
    // 0x88e0cc: blr             lr
    // 0x88e0d0: mov             x2, x0
    // 0x88e0d4: ldp             x0, x1, [SP], #0x10
    // 0x88e0d8: RestoreReg d1
    //     0x88e0d8: ldr             q1, [SP], #0x10
    // 0x88e0dc: b               #0x88bf28
    // 0x88e0e0: SaveReg d2
    //     0x88e0e0: str             q2, [SP, #-0x10]!
    // 0x88e0e4: d0 = 0.000000
    //     0x88e0e4: fmov            d0, d2
    // 0x88e0e8: r0 = 226
    //     0x88e0e8: movz            x0, #0xe2
    // 0x88e0ec: r30 = DoubleToIntegerStub
    //     0x88e0ec: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e0f0: LoadField: r30 = r30->field_7
    //     0x88e0f0: ldur            lr, [lr, #7]
    // 0x88e0f4: blr             lr
    // 0x88e0f8: RestoreReg d2
    //     0x88e0f8: ldr             q2, [SP], #0x10
    // 0x88e0fc: b               #0x88bf80
    // 0x88e100: SaveReg d1
    //     0x88e100: str             q1, [SP, #-0x10]!
    // 0x88e104: d0 = 0.000000
    //     0x88e104: fmov            d0, d1
    // 0x88e108: r0 = 226
    //     0x88e108: movz            x0, #0xe2
    // 0x88e10c: r30 = DoubleToIntegerStub
    //     0x88e10c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e110: LoadField: r30 = r30->field_7
    //     0x88e110: ldur            lr, [lr, #7]
    // 0x88e114: blr             lr
    // 0x88e118: RestoreReg d1
    //     0x88e118: ldr             q1, [SP], #0x10
    // 0x88e11c: b               #0x88bfc4
    // 0x88e120: SaveReg d1
    //     0x88e120: str             q1, [SP, #-0x10]!
    // 0x88e124: stp             x0, x1, [SP, #-0x10]!
    // 0x88e128: d0 = 0.000000
    //     0x88e128: fmov            d0, d1
    // 0x88e12c: r0 = 226
    //     0x88e12c: movz            x0, #0xe2
    // 0x88e130: r30 = DoubleToIntegerStub
    //     0x88e130: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e134: LoadField: r30 = r30->field_7
    //     0x88e134: ldur            lr, [lr, #7]
    // 0x88e138: blr             lr
    // 0x88e13c: mov             x2, x0
    // 0x88e140: ldp             x0, x1, [SP], #0x10
    // 0x88e144: RestoreReg d1
    //     0x88e144: ldr             q1, [SP], #0x10
    // 0x88e148: b               #0x88c0ec
    // 0x88e14c: SaveReg d2
    //     0x88e14c: str             q2, [SP, #-0x10]!
    // 0x88e150: d0 = 0.000000
    //     0x88e150: fmov            d0, d2
    // 0x88e154: r0 = 226
    //     0x88e154: movz            x0, #0xe2
    // 0x88e158: r30 = DoubleToIntegerStub
    //     0x88e158: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e15c: LoadField: r30 = r30->field_7
    //     0x88e15c: ldur            lr, [lr, #7]
    // 0x88e160: blr             lr
    // 0x88e164: RestoreReg d2
    //     0x88e164: ldr             q2, [SP], #0x10
    // 0x88e168: b               #0x88c144
    // 0x88e16c: SaveReg d1
    //     0x88e16c: str             q1, [SP, #-0x10]!
    // 0x88e170: d0 = 0.000000
    //     0x88e170: fmov            d0, d1
    // 0x88e174: r0 = 226
    //     0x88e174: movz            x0, #0xe2
    // 0x88e178: r30 = DoubleToIntegerStub
    //     0x88e178: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e17c: LoadField: r30 = r30->field_7
    //     0x88e17c: ldur            lr, [lr, #7]
    // 0x88e180: blr             lr
    // 0x88e184: RestoreReg d1
    //     0x88e184: ldr             q1, [SP], #0x10
    // 0x88e188: b               #0x88c188
    // 0x88e18c: SaveReg d1
    //     0x88e18c: str             q1, [SP, #-0x10]!
    // 0x88e190: stp             x0, x1, [SP, #-0x10]!
    // 0x88e194: d0 = 0.000000
    //     0x88e194: fmov            d0, d1
    // 0x88e198: r0 = 226
    //     0x88e198: movz            x0, #0xe2
    // 0x88e19c: r30 = DoubleToIntegerStub
    //     0x88e19c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e1a0: LoadField: r30 = r30->field_7
    //     0x88e1a0: ldur            lr, [lr, #7]
    // 0x88e1a4: blr             lr
    // 0x88e1a8: mov             x2, x0
    // 0x88e1ac: ldp             x0, x1, [SP], #0x10
    // 0x88e1b0: RestoreReg d1
    //     0x88e1b0: ldr             q1, [SP], #0x10
    // 0x88e1b4: b               #0x88cbb4
    // 0x88e1b8: SaveReg d2
    //     0x88e1b8: str             q2, [SP, #-0x10]!
    // 0x88e1bc: SaveReg r0
    //     0x88e1bc: str             x0, [SP, #-8]!
    // 0x88e1c0: d0 = 0.000000
    //     0x88e1c0: fmov            d0, d2
    // 0x88e1c4: r0 = 226
    //     0x88e1c4: movz            x0, #0xe2
    // 0x88e1c8: r30 = DoubleToIntegerStub
    //     0x88e1c8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e1cc: LoadField: r30 = r30->field_7
    //     0x88e1cc: ldur            lr, [lr, #7]
    // 0x88e1d0: blr             lr
    // 0x88e1d4: mov             x1, x0
    // 0x88e1d8: RestoreReg r0
    //     0x88e1d8: ldr             x0, [SP], #8
    // 0x88e1dc: RestoreReg d2
    //     0x88e1dc: ldr             q2, [SP], #0x10
    // 0x88e1e0: b               #0x88cbf0
    // 0x88e1e4: SaveReg d1
    //     0x88e1e4: str             q1, [SP, #-0x10]!
    // 0x88e1e8: SaveReg r0
    //     0x88e1e8: str             x0, [SP, #-8]!
    // 0x88e1ec: d0 = 0.000000
    //     0x88e1ec: fmov            d0, d1
    // 0x88e1f0: r0 = 226
    //     0x88e1f0: movz            x0, #0xe2
    // 0x88e1f4: r30 = DoubleToIntegerStub
    //     0x88e1f4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e1f8: LoadField: r30 = r30->field_7
    //     0x88e1f8: ldur            lr, [lr, #7]
    // 0x88e1fc: blr             lr
    // 0x88e200: mov             x1, x0
    // 0x88e204: RestoreReg r0
    //     0x88e204: ldr             x0, [SP], #8
    // 0x88e208: RestoreReg d1
    //     0x88e208: ldr             q1, [SP], #0x10
    // 0x88e20c: b               #0x88cc40
    // 0x88e210: SaveReg d1
    //     0x88e210: str             q1, [SP, #-0x10]!
    // 0x88e214: stp             x0, x1, [SP, #-0x10]!
    // 0x88e218: d0 = 0.000000
    //     0x88e218: fmov            d0, d1
    // 0x88e21c: r0 = 226
    //     0x88e21c: movz            x0, #0xe2
    // 0x88e220: r30 = DoubleToIntegerStub
    //     0x88e220: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e224: LoadField: r30 = r30->field_7
    //     0x88e224: ldur            lr, [lr, #7]
    // 0x88e228: blr             lr
    // 0x88e22c: mov             x2, x0
    // 0x88e230: ldp             x0, x1, [SP], #0x10
    // 0x88e234: RestoreReg d1
    //     0x88e234: ldr             q1, [SP], #0x10
    // 0x88e238: b               #0x88cd94
    // 0x88e23c: SaveReg d2
    //     0x88e23c: str             q2, [SP, #-0x10]!
    // 0x88e240: SaveReg r0
    //     0x88e240: str             x0, [SP, #-8]!
    // 0x88e244: d0 = 0.000000
    //     0x88e244: fmov            d0, d2
    // 0x88e248: r0 = 226
    //     0x88e248: movz            x0, #0xe2
    // 0x88e24c: r30 = DoubleToIntegerStub
    //     0x88e24c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e250: LoadField: r30 = r30->field_7
    //     0x88e250: ldur            lr, [lr, #7]
    // 0x88e254: blr             lr
    // 0x88e258: mov             x1, x0
    // 0x88e25c: RestoreReg r0
    //     0x88e25c: ldr             x0, [SP], #8
    // 0x88e260: RestoreReg d2
    //     0x88e260: ldr             q2, [SP], #0x10
    // 0x88e264: b               #0x88cdd0
    // 0x88e268: SaveReg d1
    //     0x88e268: str             q1, [SP, #-0x10]!
    // 0x88e26c: SaveReg r0
    //     0x88e26c: str             x0, [SP, #-8]!
    // 0x88e270: d0 = 0.000000
    //     0x88e270: fmov            d0, d1
    // 0x88e274: r0 = 226
    //     0x88e274: movz            x0, #0xe2
    // 0x88e278: r30 = DoubleToIntegerStub
    //     0x88e278: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e27c: LoadField: r30 = r30->field_7
    //     0x88e27c: ldur            lr, [lr, #7]
    // 0x88e280: blr             lr
    // 0x88e284: mov             x1, x0
    // 0x88e288: RestoreReg r0
    //     0x88e288: ldr             x0, [SP], #8
    // 0x88e28c: RestoreReg d1
    //     0x88e28c: ldr             q1, [SP], #0x10
    // 0x88e290: b               #0x88ce20
    // 0x88e294: SaveReg d1
    //     0x88e294: str             q1, [SP, #-0x10]!
    // 0x88e298: stp             x0, x1, [SP, #-0x10]!
    // 0x88e29c: d0 = 0.000000
    //     0x88e29c: fmov            d0, d1
    // 0x88e2a0: r0 = 226
    //     0x88e2a0: movz            x0, #0xe2
    // 0x88e2a4: r30 = DoubleToIntegerStub
    //     0x88e2a4: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e2a8: LoadField: r30 = r30->field_7
    //     0x88e2a8: ldur            lr, [lr, #7]
    // 0x88e2ac: blr             lr
    // 0x88e2b0: mov             x2, x0
    // 0x88e2b4: ldp             x0, x1, [SP], #0x10
    // 0x88e2b8: RestoreReg d1
    //     0x88e2b8: ldr             q1, [SP], #0x10
    // 0x88e2bc: b               #0x88d19c
    // 0x88e2c0: SaveReg d2
    //     0x88e2c0: str             q2, [SP, #-0x10]!
    // 0x88e2c4: SaveReg r0
    //     0x88e2c4: str             x0, [SP, #-8]!
    // 0x88e2c8: d0 = 0.000000
    //     0x88e2c8: fmov            d0, d2
    // 0x88e2cc: r0 = 226
    //     0x88e2cc: movz            x0, #0xe2
    // 0x88e2d0: r30 = DoubleToIntegerStub
    //     0x88e2d0: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e2d4: LoadField: r30 = r30->field_7
    //     0x88e2d4: ldur            lr, [lr, #7]
    // 0x88e2d8: blr             lr
    // 0x88e2dc: mov             x1, x0
    // 0x88e2e0: RestoreReg r0
    //     0x88e2e0: ldr             x0, [SP], #8
    // 0x88e2e4: RestoreReg d2
    //     0x88e2e4: ldr             q2, [SP], #0x10
    // 0x88e2e8: b               #0x88d1d8
    // 0x88e2ec: SaveReg d1
    //     0x88e2ec: str             q1, [SP, #-0x10]!
    // 0x88e2f0: SaveReg r0
    //     0x88e2f0: str             x0, [SP, #-8]!
    // 0x88e2f4: d0 = 0.000000
    //     0x88e2f4: fmov            d0, d1
    // 0x88e2f8: r0 = 226
    //     0x88e2f8: movz            x0, #0xe2
    // 0x88e2fc: r30 = DoubleToIntegerStub
    //     0x88e2fc: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e300: LoadField: r30 = r30->field_7
    //     0x88e300: ldur            lr, [lr, #7]
    // 0x88e304: blr             lr
    // 0x88e308: mov             x1, x0
    // 0x88e30c: RestoreReg r0
    //     0x88e30c: ldr             x0, [SP], #8
    // 0x88e310: RestoreReg d1
    //     0x88e310: ldr             q1, [SP], #0x10
    // 0x88e314: b               #0x88d228
    // 0x88e318: SaveReg d1
    //     0x88e318: str             q1, [SP, #-0x10]!
    // 0x88e31c: stp             x0, x1, [SP, #-0x10]!
    // 0x88e320: d0 = 0.000000
    //     0x88e320: fmov            d0, d1
    // 0x88e324: r0 = 226
    //     0x88e324: movz            x0, #0xe2
    // 0x88e328: r30 = DoubleToIntegerStub
    //     0x88e328: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e32c: LoadField: r30 = r30->field_7
    //     0x88e32c: ldur            lr, [lr, #7]
    // 0x88e330: blr             lr
    // 0x88e334: mov             x2, x0
    // 0x88e338: ldp             x0, x1, [SP], #0x10
    // 0x88e33c: RestoreReg d1
    //     0x88e33c: ldr             q1, [SP], #0x10
    // 0x88e340: b               #0x88d37c
    // 0x88e344: SaveReg d2
    //     0x88e344: str             q2, [SP, #-0x10]!
    // 0x88e348: SaveReg r0
    //     0x88e348: str             x0, [SP, #-8]!
    // 0x88e34c: d0 = 0.000000
    //     0x88e34c: fmov            d0, d2
    // 0x88e350: r0 = 226
    //     0x88e350: movz            x0, #0xe2
    // 0x88e354: r30 = DoubleToIntegerStub
    //     0x88e354: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e358: LoadField: r30 = r30->field_7
    //     0x88e358: ldur            lr, [lr, #7]
    // 0x88e35c: blr             lr
    // 0x88e360: mov             x1, x0
    // 0x88e364: RestoreReg r0
    //     0x88e364: ldr             x0, [SP], #8
    // 0x88e368: RestoreReg d2
    //     0x88e368: ldr             q2, [SP], #0x10
    // 0x88e36c: b               #0x88d3b8
    // 0x88e370: SaveReg d1
    //     0x88e370: str             q1, [SP, #-0x10]!
    // 0x88e374: SaveReg r0
    //     0x88e374: str             x0, [SP, #-8]!
    // 0x88e378: d0 = 0.000000
    //     0x88e378: fmov            d0, d1
    // 0x88e37c: r0 = 226
    //     0x88e37c: movz            x0, #0xe2
    // 0x88e380: r30 = DoubleToIntegerStub
    //     0x88e380: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e384: LoadField: r30 = r30->field_7
    //     0x88e384: ldur            lr, [lr, #7]
    // 0x88e388: blr             lr
    // 0x88e38c: mov             x1, x0
    // 0x88e390: RestoreReg r0
    //     0x88e390: ldr             x0, [SP], #8
    // 0x88e394: RestoreReg d1
    //     0x88e394: ldr             q1, [SP], #0x10
    // 0x88e398: b               #0x88d408
    // 0x88e39c: SaveReg d1
    //     0x88e39c: str             q1, [SP, #-0x10]!
    // 0x88e3a0: stp             x0, x1, [SP, #-0x10]!
    // 0x88e3a4: d0 = 0.000000
    //     0x88e3a4: fmov            d0, d1
    // 0x88e3a8: r0 = 226
    //     0x88e3a8: movz            x0, #0xe2
    // 0x88e3ac: r30 = DoubleToIntegerStub
    //     0x88e3ac: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e3b0: LoadField: r30 = r30->field_7
    //     0x88e3b0: ldur            lr, [lr, #7]
    // 0x88e3b4: blr             lr
    // 0x88e3b8: mov             x2, x0
    // 0x88e3bc: ldp             x0, x1, [SP], #0x10
    // 0x88e3c0: RestoreReg d1
    //     0x88e3c0: ldr             q1, [SP], #0x10
    // 0x88e3c4: b               #0x88d784
    // 0x88e3c8: SaveReg d2
    //     0x88e3c8: str             q2, [SP, #-0x10]!
    // 0x88e3cc: SaveReg r0
    //     0x88e3cc: str             x0, [SP, #-8]!
    // 0x88e3d0: d0 = 0.000000
    //     0x88e3d0: fmov            d0, d2
    // 0x88e3d4: r0 = 226
    //     0x88e3d4: movz            x0, #0xe2
    // 0x88e3d8: r30 = DoubleToIntegerStub
    //     0x88e3d8: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e3dc: LoadField: r30 = r30->field_7
    //     0x88e3dc: ldur            lr, [lr, #7]
    // 0x88e3e0: blr             lr
    // 0x88e3e4: mov             x1, x0
    // 0x88e3e8: RestoreReg r0
    //     0x88e3e8: ldr             x0, [SP], #8
    // 0x88e3ec: RestoreReg d2
    //     0x88e3ec: ldr             q2, [SP], #0x10
    // 0x88e3f0: b               #0x88d7c0
    // 0x88e3f4: SaveReg d1
    //     0x88e3f4: str             q1, [SP, #-0x10]!
    // 0x88e3f8: SaveReg r0
    //     0x88e3f8: str             x0, [SP, #-8]!
    // 0x88e3fc: d0 = 0.000000
    //     0x88e3fc: fmov            d0, d1
    // 0x88e400: r0 = 226
    //     0x88e400: movz            x0, #0xe2
    // 0x88e404: r30 = DoubleToIntegerStub
    //     0x88e404: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e408: LoadField: r30 = r30->field_7
    //     0x88e408: ldur            lr, [lr, #7]
    // 0x88e40c: blr             lr
    // 0x88e410: mov             x1, x0
    // 0x88e414: RestoreReg r0
    //     0x88e414: ldr             x0, [SP], #8
    // 0x88e418: RestoreReg d1
    //     0x88e418: ldr             q1, [SP], #0x10
    // 0x88e41c: b               #0x88d810
    // 0x88e420: SaveReg d1
    //     0x88e420: str             q1, [SP, #-0x10]!
    // 0x88e424: stp             x0, x1, [SP, #-0x10]!
    // 0x88e428: d0 = 0.000000
    //     0x88e428: fmov            d0, d1
    // 0x88e42c: r0 = 226
    //     0x88e42c: movz            x0, #0xe2
    // 0x88e430: r30 = DoubleToIntegerStub
    //     0x88e430: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e434: LoadField: r30 = r30->field_7
    //     0x88e434: ldur            lr, [lr, #7]
    // 0x88e438: blr             lr
    // 0x88e43c: mov             x2, x0
    // 0x88e440: ldp             x0, x1, [SP], #0x10
    // 0x88e444: RestoreReg d1
    //     0x88e444: ldr             q1, [SP], #0x10
    // 0x88e448: b               #0x88d964
    // 0x88e44c: SaveReg d2
    //     0x88e44c: str             q2, [SP, #-0x10]!
    // 0x88e450: SaveReg r0
    //     0x88e450: str             x0, [SP, #-8]!
    // 0x88e454: d0 = 0.000000
    //     0x88e454: fmov            d0, d2
    // 0x88e458: r0 = 226
    //     0x88e458: movz            x0, #0xe2
    // 0x88e45c: r30 = DoubleToIntegerStub
    //     0x88e45c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e460: LoadField: r30 = r30->field_7
    //     0x88e460: ldur            lr, [lr, #7]
    // 0x88e464: blr             lr
    // 0x88e468: mov             x1, x0
    // 0x88e46c: RestoreReg r0
    //     0x88e46c: ldr             x0, [SP], #8
    // 0x88e470: RestoreReg d2
    //     0x88e470: ldr             q2, [SP], #0x10
    // 0x88e474: b               #0x88d9a0
    // 0x88e478: SaveReg d2
    //     0x88e478: str             q2, [SP, #-0x10]!
    // 0x88e47c: SaveReg r0
    //     0x88e47c: str             x0, [SP, #-8]!
    // 0x88e480: d0 = 0.000000
    //     0x88e480: fmov            d0, d2
    // 0x88e484: r0 = 226
    //     0x88e484: movz            x0, #0xe2
    // 0x88e488: r30 = DoubleToIntegerStub
    //     0x88e488: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x88e48c: LoadField: r30 = r30->field_7
    //     0x88e48c: ldur            lr, [lr, #7]
    // 0x88e490: blr             lr
    // 0x88e494: mov             x1, x0
    // 0x88e498: RestoreReg r0
    //     0x88e498: ldr             x0, [SP], #8
    // 0x88e49c: RestoreReg d2
    //     0x88e49c: ldr             q2, [SP], #0x10
    // 0x88e4a0: b               #0x88d9f0
  }
  [closure] static void <anonymous closure>(dynamic, String, Timestamp) {
    // ** addr: 0x8dc160, size: 0xc4
    // 0x8dc160: EnterFrame
    //     0x8dc160: stp             fp, lr, [SP, #-0x10]!
    //     0x8dc164: mov             fp, SP
    // 0x8dc168: AllocStack(0x10)
    //     0x8dc168: sub             SP, SP, #0x10
    // 0x8dc16c: SetupParameters()
    //     0x8dc16c: ldr             x0, [fp, #0x20]
    //     0x8dc170: ldur            w1, [x0, #0x17]
    //     0x8dc174: add             x1, x1, HEAP, lsl #32
    //     0x8dc178: stur            x1, [fp, #-8]
    // 0x8dc17c: CheckStackOverflow
    //     0x8dc17c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8dc180: cmp             SP, x16
    //     0x8dc184: b.ls            #0x8dc21c
    // 0x8dc188: r0 = getTrueDateTime()
    //     0x8dc188: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8dc18c: ldr             x1, [fp, #0x10]
    // 0x8dc190: stur            x0, [fp, #-0x10]
    // 0x8dc194: r0 = toDate()
    //     0x8dc194: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8dc198: ldur            x1, [fp, #-0x10]
    // 0x8dc19c: mov             x2, x0
    // 0x8dc1a0: r0 = difference()
    //     0x8dc1a0: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x8dc1a4: LoadField: r2 = r0->field_7
    //     0x8dc1a4: ldur            x2, [x0, #7]
    // 0x8dc1a8: r3 = 86400000000
    //     0x8dc1a8: add             x3, PP, #0x12, lsl #12  ; [pp+0x129d8] IMM: 0x141dd76000
    //     0x8dc1ac: ldr             x3, [x3, #0x9d8]
    // 0x8dc1b0: sdiv            x4, x2, x3
    // 0x8dc1b4: cmp             x4, #0xe
    // 0x8dc1b8: b.gt            #0x8dc20c
    // 0x8dc1bc: ldur            x2, [fp, #-8]
    // 0x8dc1c0: LoadField: r3 = r2->field_f
    //     0x8dc1c0: ldur            w3, [x2, #0xf]
    // 0x8dc1c4: DecompressPointer r3
    //     0x8dc1c4: add             x3, x3, HEAP, lsl #32
    // 0x8dc1c8: r4 = LoadInt32Instr(r3)
    //     0x8dc1c8: sbfx            x4, x3, #1, #0x1f
    //     0x8dc1cc: tbz             w3, #0, #0x8dc1d4
    //     0x8dc1d0: ldur            x4, [x3, #7]
    // 0x8dc1d4: add             x3, x4, #1
    // 0x8dc1d8: r0 = BoxInt64Instr(r3)
    //     0x8dc1d8: sbfiz           x0, x3, #1, #0x1f
    //     0x8dc1dc: cmp             x3, x0, asr #1
    //     0x8dc1e0: b.eq            #0x8dc1ec
    //     0x8dc1e4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8dc1e8: stur            x3, [x0, #7]
    // 0x8dc1ec: StoreField: r2->field_f = r0
    //     0x8dc1ec: stur            w0, [x2, #0xf]
    //     0x8dc1f0: tbz             w0, #0, #0x8dc20c
    //     0x8dc1f4: ldurb           w16, [x2, #-1]
    //     0x8dc1f8: ldurb           w17, [x0, #-1]
    //     0x8dc1fc: and             x16, x17, x16, lsr #2
    //     0x8dc200: tst             x16, HEAP, lsr #32
    //     0x8dc204: b.eq            #0x8dc20c
    //     0x8dc208: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x8dc20c: r0 = Null
    //     0x8dc20c: mov             x0, NULL
    // 0x8dc210: LeaveFrame
    //     0x8dc210: mov             SP, fp
    //     0x8dc214: ldp             fp, lr, [SP], #0x10
    // 0x8dc218: ret
    //     0x8dc218: ret             
    // 0x8dc21c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8dc21c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8dc220: b               #0x8dc188
  }
  [closure] static String <anonymous closure>(dynamic, Match) {
    // ** addr: 0x8dc224, size: 0x538
    // 0x8dc224: EnterFrame
    //     0x8dc224: stp             fp, lr, [SP, #-0x10]!
    //     0x8dc228: mov             fp, SP
    // 0x8dc22c: AllocStack(0x50)
    //     0x8dc22c: sub             SP, SP, #0x50
    // 0x8dc230: CheckStackOverflow
    //     0x8dc230: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8dc234: cmp             SP, x16
    //     0x8dc238: b.ls            #0x8dc6fc
    // 0x8dc23c: ldr             x1, [fp, #0x10]
    // 0x8dc240: r0 = LoadClassIdInstr(r1)
    //     0x8dc240: ldur            x0, [x1, #-1]
    //     0x8dc244: ubfx            x0, x0, #0xc, #0x14
    // 0x8dc248: r2 = 0
    //     0x8dc248: movz            x2, #0
    // 0x8dc24c: r0 = GDT[cid_x0 + -0xf96]()
    //     0x8dc24c: sub             lr, x0, #0xf96
    //     0x8dc250: ldr             lr, [x21, lr, lsl #3]
    //     0x8dc254: blr             lr
    // 0x8dc258: cmp             w0, NULL
    // 0x8dc25c: b.ne            #0x8dc268
    // 0x8dc260: r1 = ""
    //     0x8dc260: ldr             x1, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x8dc264: b               #0x8dc26c
    // 0x8dc268: mov             x1, x0
    // 0x8dc26c: r2 = 4
    //     0x8dc26c: movz            x2, #0x4
    // 0x8dc270: r4 = const [0, 0x2, 0, 0x2, null]
    //     0x8dc270: ldr             x4, [PP, #0xd8]  ; [pp+0xd8] List(5) [0, 0x2, 0, 0x2, Null]
    // 0x8dc274: r0 = substring()
    //     0x8dc274: bl              #0x7c8208  ; [dart:core] _StringBase::substring
    // 0x8dc278: r1 = LoadClassIdInstr(r0)
    //     0x8dc278: ldur            x1, [x0, #-1]
    //     0x8dc27c: ubfx            x1, x1, #0xc, #0x14
    // 0x8dc280: mov             x16, x0
    // 0x8dc284: mov             x0, x1
    // 0x8dc288: mov             x1, x16
    // 0x8dc28c: r2 = "-"
    //     0x8dc28c: ldr             x2, [PP, #0x2b50]  ; [pp+0x2b50] "-"
    // 0x8dc290: r0 = GDT[cid_x0 + -0xffe]()
    //     0x8dc290: sub             lr, x0, #0xffe
    //     0x8dc294: ldr             lr, [x21, lr, lsl #3]
    //     0x8dc298: blr             lr
    // 0x8dc29c: mov             x2, x0
    // 0x8dc2a0: LoadField: r0 = r2->field_b
    //     0x8dc2a0: ldur            w0, [x2, #0xb]
    // 0x8dc2a4: DecompressPointer r0
    //     0x8dc2a4: add             x0, x0, HEAP, lsl #32
    // 0x8dc2a8: r3 = LoadInt32Instr(r0)
    //     0x8dc2a8: sbfx            x3, x0, #1, #0x1f
    // 0x8dc2ac: cmp             x3, #2
    // 0x8dc2b0: b.eq            #0x8dc2c4
    // 0x8dc2b4: r0 = "-"
    //     0x8dc2b4: ldr             x0, [PP, #0x2b50]  ; [pp+0x2b50] "-"
    // 0x8dc2b8: LeaveFrame
    //     0x8dc2b8: mov             SP, fp
    //     0x8dc2bc: ldp             fp, lr, [SP], #0x10
    // 0x8dc2c0: ret
    //     0x8dc2c0: ret             
    // 0x8dc2c4: mov             x0, x3
    // 0x8dc2c8: r1 = 0
    //     0x8dc2c8: movz            x1, #0
    // 0x8dc2cc: cmp             x1, x0
    // 0x8dc2d0: b.hs            #0x8dc704
    // 0x8dc2d4: LoadField: r4 = r2->field_f
    //     0x8dc2d4: ldur            w4, [x2, #0xf]
    // 0x8dc2d8: DecompressPointer r4
    //     0x8dc2d8: add             x4, x4, HEAP, lsl #32
    // 0x8dc2dc: LoadField: r2 = r4->field_f
    //     0x8dc2dc: ldur            w2, [x4, #0xf]
    // 0x8dc2e0: DecompressPointer r2
    //     0x8dc2e0: add             x2, x2, HEAP, lsl #32
    // 0x8dc2e4: mov             x0, x3
    // 0x8dc2e8: stur            x2, [fp, #-8]
    // 0x8dc2ec: r1 = 1
    //     0x8dc2ec: movz            x1, #0x1
    // 0x8dc2f0: cmp             x1, x0
    // 0x8dc2f4: b.hs            #0x8dc708
    // 0x8dc2f8: LoadField: r1 = r4->field_13
    //     0x8dc2f8: ldur            w1, [x4, #0x13]
    // 0x8dc2fc: DecompressPointer r1
    //     0x8dc2fc: add             x1, x1, HEAP, lsl #32
    // 0x8dc300: r4 = const [0, 0x1, 0, 0x1, null]
    //     0x8dc300: ldr             x4, [PP, #0x100]  ; [pp+0x100] List(5) [0, 0x1, 0, 0x1, Null]
    // 0x8dc304: r0 = parse()
    //     0x8dc304: bl              #0x7c36d0  ; [dart:core] int::parse
    // 0x8dc308: mov             x3, x0
    // 0x8dc30c: stur            x3, [fp, #-0x10]
    // 0x8dc310: r0 = LoadStaticField(0xb54)
    //     0x8dc310: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8dc314: ldr             x0, [x0, #0x16a8]
    // 0x8dc318: cmp             w0, NULL
    // 0x8dc31c: b.ne            #0x8dc328
    // 0x8dc320: r0 = Null
    //     0x8dc320: mov             x0, NULL
    // 0x8dc324: b               #0x8dc34c
    // 0x8dc328: r17 = 331
    //     0x8dc328: movz            x17, #0x14b
    // 0x8dc32c: ldr             w1, [x0, x17]
    // 0x8dc330: DecompressPointer r1
    //     0x8dc330: add             x1, x1, HEAP, lsl #32
    // 0x8dc334: r0 = LoadClassIdInstr(r1)
    //     0x8dc334: ldur            x0, [x1, #-1]
    //     0x8dc338: ubfx            x0, x0, #0xc, #0x14
    // 0x8dc33c: ldur            x2, [fp, #-8]
    // 0x8dc340: r0 = GDT[cid_x0 + -0xb4]()
    //     0x8dc340: sub             lr, x0, #0xb4
    //     0x8dc344: ldr             lr, [x21, lr, lsl #3]
    //     0x8dc348: blr             lr
    // 0x8dc34c: cmp             w0, NULL
    // 0x8dc350: b.ne            #0x8dc368
    // 0x8dc354: r1 = Null
    //     0x8dc354: mov             x1, NULL
    // 0x8dc358: r2 = 0
    //     0x8dc358: movz            x2, #0
    // 0x8dc35c: r0 = Timestamp.fromMicrosecondsSinceEpoch()
    //     0x8dc35c: bl              #0x8dbf0c  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::Timestamp.fromMicrosecondsSinceEpoch
    // 0x8dc360: mov             x4, x0
    // 0x8dc364: b               #0x8dc36c
    // 0x8dc368: mov             x4, x0
    // 0x8dc36c: ldur            x3, [fp, #-0x10]
    // 0x8dc370: mov             x0, x4
    // 0x8dc374: stur            x4, [fp, #-8]
    // 0x8dc378: r2 = Null
    //     0x8dc378: mov             x2, NULL
    // 0x8dc37c: r1 = Null
    //     0x8dc37c: mov             x1, NULL
    // 0x8dc380: r4 = 59
    //     0x8dc380: movz            x4, #0x3b
    // 0x8dc384: branchIfSmi(r0, 0x8dc390)
    //     0x8dc384: tbz             w0, #0, #0x8dc390
    // 0x8dc388: r4 = LoadClassIdInstr(r0)
    //     0x8dc388: ldur            x4, [x0, #-1]
    //     0x8dc38c: ubfx            x4, x4, #0xc, #0x14
    // 0x8dc390: cmp             x4, #0xcdb
    // 0x8dc394: b.eq            #0x8dc3ac
    // 0x8dc398: r8 = Timestamp
    //     0x8dc398: add             x8, PP, #0xe, lsl #12  ; [pp+0xea30] Type: Timestamp
    //     0x8dc39c: ldr             x8, [x8, #0xa30]
    // 0x8dc3a0: r3 = Null
    //     0x8dc3a0: add             x3, PP, #0x12, lsl #12  ; [pp+0x129e0] Null
    //     0x8dc3a4: ldr             x3, [x3, #0x9e0]
    // 0x8dc3a8: r0 = Timestamp()
    //     0x8dc3a8: bl              #0x7f5afc  ; IsType_Timestamp_Stub
    // 0x8dc3ac: r0 = getTrueDateTime()
    //     0x8dc3ac: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x8dc3b0: ldur            x1, [fp, #-8]
    // 0x8dc3b4: stur            x0, [fp, #-8]
    // 0x8dc3b8: r0 = toDate()
    //     0x8dc3b8: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x8dc3bc: ldur            x1, [fp, #-8]
    // 0x8dc3c0: mov             x2, x0
    // 0x8dc3c4: r0 = difference()
    //     0x8dc3c4: bl              #0x1476728  ; [dart:core] DateTime::difference
    // 0x8dc3c8: LoadField: r1 = r0->field_7
    //     0x8dc3c8: ldur            x1, [x0, #7]
    // 0x8dc3cc: r0 = 1000000
    //     0x8dc3cc: movz            x0, #0x4240
    //     0x8dc3d0: movk            x0, #0xf, lsl #16
    // 0x8dc3d4: sdiv            x2, x1, x0
    // 0x8dc3d8: ldur            x0, [fp, #-0x10]
    // 0x8dc3dc: sub             x1, x0, x2
    // 0x8dc3e0: tbz             x1, #0x3f, #0x8dc3ec
    // 0x8dc3e4: r0 = 0
    //     0x8dc3e4: movz            x0, #0
    // 0x8dc3e8: b               #0x8dc3f0
    // 0x8dc3ec: mov             x0, x1
    // 0x8dc3f0: d0 = 3600.000000
    //     0x8dc3f0: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f0] IMM: double(3600) from 0x40ac200000000000
    //     0x8dc3f4: ldr             d0, [x17, #0x2f0]
    // 0x8dc3f8: stur            x0, [fp, #-0x10]
    // 0x8dc3fc: scvtf           d1, x0
    // 0x8dc400: stur            d1, [fp, #-0x38]
    // 0x8dc404: fdiv            d2, d1, d0
    // 0x8dc408: fcmp            d2, d2
    // 0x8dc40c: b.vs            #0x8dc70c
    // 0x8dc410: fcvtms          x3, d2
    // 0x8dc414: asr             x16, x3, #0x1e
    // 0x8dc418: cmp             x16, x3, asr #63
    // 0x8dc41c: b.ne            #0x8dc70c
    // 0x8dc420: lsl             x3, x3, #1
    // 0x8dc424: stur            x3, [fp, #-8]
    // 0x8dc428: r1 = LoadInt32Instr(r3)
    //     0x8dc428: sbfx            x1, x3, #1, #0x1f
    //     0x8dc42c: tbz             w3, #0, #0x8dc434
    //     0x8dc430: ldur            x1, [x3, #7]
    // 0x8dc434: cmp             x1, #0xa
    // 0x8dc438: b.lt            #0x8dc448
    // 0x8dc43c: str             x3, [SP]
    // 0x8dc440: r0 = _interpolateSingle()
    //     0x8dc440: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x8dc444: b               #0x8dc46c
    // 0x8dc448: r1 = Null
    //     0x8dc448: mov             x1, NULL
    // 0x8dc44c: r2 = 4
    //     0x8dc44c: movz            x2, #0x4
    // 0x8dc450: r0 = AllocateArray()
    //     0x8dc450: bl              #0x1502560  ; AllocateArrayStub
    // 0x8dc454: r17 = "0"
    //     0x8dc454: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x8dc458: StoreField: r0->field_f = r17
    //     0x8dc458: stur            w17, [x0, #0xf]
    // 0x8dc45c: ldur            x1, [fp, #-8]
    // 0x8dc460: StoreField: r0->field_13 = r1
    //     0x8dc460: stur            w1, [x0, #0x13]
    // 0x8dc464: str             x0, [SP]
    // 0x8dc468: r0 = _interpolate()
    //     0x8dc468: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8dc46c: ldur            d0, [fp, #-0x38]
    // 0x8dc470: d1 = 60.000000
    //     0x8dc470: add             x17, PP, #0x11, lsl #12  ; [pp+0x112f8] IMM: double(60) from 0x404e000000000000
    //     0x8dc474: ldr             d1, [x17, #0x2f8]
    // 0x8dc478: stur            x0, [fp, #-8]
    // 0x8dc47c: fdiv            d2, d0, d1
    // 0x8dc480: stur            d2, [fp, #-0x40]
    // 0x8dc484: r16 = 120
    //     0x8dc484: movz            x16, #0x78
    // 0x8dc488: stp             x16, NULL, [SP]
    // 0x8dc48c: r0 = _Double.fromInteger()
    //     0x8dc48c: bl              #0x7e8f24  ; [dart:core] _Double::_Double.fromInteger
    // 0x8dc490: LoadField: d1 = r0->field_7
    //     0x8dc490: ldur            d1, [x0, #7]
    // 0x8dc494: ldur            d0, [fp, #-0x40]
    // 0x8dc498: stp             fp, lr, [SP, #-0x10]!
    // 0x8dc49c: mov             fp, SP
    // 0x8dc4a0: CallRuntime_DartModulo(double, double) -> double
    //     0x8dc4a0: and             SP, SP, #0xfffffffffffffff0
    //     0x8dc4a4: mov             sp, SP
    //     0x8dc4a8: ldr             x16, [THR, #0x510]  ; THR::DartModulo
    //     0x8dc4ac: str             x16, [THR, #0x730]  ; THR::vm_tag
    //     0x8dc4b0: blr             x16
    //     0x8dc4b4: movz            x16, #0x8
    //     0x8dc4b8: str             x16, [THR, #0x730]  ; THR::vm_tag
    //     0x8dc4bc: ldr             x16, [THR, #0x700]  ; THR::saved_stack_limit
    //     0x8dc4c0: sub             sp, x16, #1, lsl #12
    //     0x8dc4c4: mov             SP, fp
    //     0x8dc4c8: ldp             fp, lr, [SP], #0x10
    // 0x8dc4cc: fcmp            d0, d0
    // 0x8dc4d0: b.vs            #0x8dc738
    // 0x8dc4d4: fcvtms          x0, d0
    // 0x8dc4d8: asr             x16, x0, #0x1e
    // 0x8dc4dc: cmp             x16, x0, asr #63
    // 0x8dc4e0: b.ne            #0x8dc738
    // 0x8dc4e4: lsl             x0, x0, #1
    // 0x8dc4e8: stur            x0, [fp, #-0x18]
    // 0x8dc4ec: r1 = LoadInt32Instr(r0)
    //     0x8dc4ec: sbfx            x1, x0, #1, #0x1f
    //     0x8dc4f0: tbz             w0, #0, #0x8dc4f8
    //     0x8dc4f4: ldur            x1, [x0, #7]
    // 0x8dc4f8: cmp             x1, #0xa
    // 0x8dc4fc: b.lt            #0x8dc510
    // 0x8dc500: str             x0, [SP]
    // 0x8dc504: r0 = _interpolateSingle()
    //     0x8dc504: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x8dc508: mov             x2, x0
    // 0x8dc50c: b               #0x8dc538
    // 0x8dc510: r1 = Null
    //     0x8dc510: mov             x1, NULL
    // 0x8dc514: r2 = 4
    //     0x8dc514: movz            x2, #0x4
    // 0x8dc518: r0 = AllocateArray()
    //     0x8dc518: bl              #0x1502560  ; AllocateArrayStub
    // 0x8dc51c: r17 = "0"
    //     0x8dc51c: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x8dc520: StoreField: r0->field_f = r17
    //     0x8dc520: stur            w17, [x0, #0xf]
    // 0x8dc524: ldur            x1, [fp, #-0x18]
    // 0x8dc528: StoreField: r0->field_13 = r1
    //     0x8dc528: stur            w1, [x0, #0x13]
    // 0x8dc52c: str             x0, [SP]
    // 0x8dc530: r0 = _interpolate()
    //     0x8dc530: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8dc534: mov             x2, x0
    // 0x8dc538: ldur            x0, [fp, #-0x10]
    // 0x8dc53c: r1 = 60
    //     0x8dc53c: movz            x1, #0x3c
    // 0x8dc540: stur            x2, [fp, #-0x18]
    // 0x8dc544: sdiv            x4, x0, x1
    // 0x8dc548: msub            x3, x4, x1, x0
    // 0x8dc54c: cmp             x3, xzr
    // 0x8dc550: b.lt            #0x8dc754
    // 0x8dc554: stur            x3, [fp, #-0x20]
    // 0x8dc558: cmp             x3, #0xa
    // 0x8dc55c: b.lt            #0x8dc574
    // 0x8dc560: lsl             x0, x3, #1
    // 0x8dc564: str             x0, [SP]
    // 0x8dc568: r0 = _interpolateSingle()
    //     0x8dc568: bl              #0x7c1350  ; [dart:core] _StringBase::_interpolateSingle
    // 0x8dc56c: mov             x3, x0
    // 0x8dc570: b               #0x8dc5a0
    // 0x8dc574: r1 = Null
    //     0x8dc574: mov             x1, NULL
    // 0x8dc578: r2 = 4
    //     0x8dc578: movz            x2, #0x4
    // 0x8dc57c: r0 = AllocateArray()
    //     0x8dc57c: bl              #0x1502560  ; AllocateArrayStub
    // 0x8dc580: r17 = "0"
    //     0x8dc580: ldr             x17, [PP, #0x3dc8]  ; [pp+0x3dc8] "0"
    // 0x8dc584: StoreField: r0->field_f = r17
    //     0x8dc584: stur            w17, [x0, #0xf]
    // 0x8dc588: ldur            x1, [fp, #-0x20]
    // 0x8dc58c: lsl             x2, x1, #1
    // 0x8dc590: StoreField: r0->field_13 = r2
    //     0x8dc590: stur            w2, [x0, #0x13]
    // 0x8dc594: str             x0, [SP]
    // 0x8dc598: r0 = _interpolate()
    //     0x8dc598: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8dc59c: mov             x3, x0
    // 0x8dc5a0: ldur            x0, [fp, #-8]
    // 0x8dc5a4: stur            x3, [fp, #-0x28]
    // 0x8dc5a8: r1 = Null
    //     0x8dc5a8: mov             x1, NULL
    // 0x8dc5ac: r2 = 22
    //     0x8dc5ac: movz            x2, #0x16
    // 0x8dc5b0: r0 = AllocateArray()
    //     0x8dc5b0: bl              #0x1502560  ; AllocateArrayStub
    // 0x8dc5b4: stur            x0, [fp, #-0x30]
    // 0x8dc5b8: r17 = " "
    //     0x8dc5b8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8dc5bc: StoreField: r0->field_f = r17
    //     0x8dc5bc: stur            w17, [x0, #0xf]
    // 0x8dc5c0: ldur            x1, [fp, #-8]
    // 0x8dc5c4: StoreField: r0->field_13 = r1
    //     0x8dc5c4: stur            w1, [x0, #0x13]
    // 0x8dc5c8: r17 = " "
    //     0x8dc5c8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8dc5cc: ArrayStore: r0[0] = r17  ; List_4
    //     0x8dc5cc: stur            w17, [x0, #0x17]
    // 0x8dc5d0: r1 = "hour"
    //     0x8dc5d0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11300] "hour"
    //     0x8dc5d4: ldr             x1, [x1, #0x300]
    // 0x8dc5d8: r0 = getTranslate()
    //     0x8dc5d8: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x8dc5dc: ldur            x1, [fp, #-0x30]
    // 0x8dc5e0: ArrayStore: r1[3] = r0  ; List_4
    //     0x8dc5e0: add             x25, x1, #0x1b
    //     0x8dc5e4: str             w0, [x25]
    //     0x8dc5e8: tbz             w0, #0, #0x8dc604
    //     0x8dc5ec: ldurb           w16, [x1, #-1]
    //     0x8dc5f0: ldurb           w17, [x0, #-1]
    //     0x8dc5f4: and             x16, x17, x16, lsr #2
    //     0x8dc5f8: tst             x16, HEAP, lsr #32
    //     0x8dc5fc: b.eq            #0x8dc604
    //     0x8dc600: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8dc604: ldur            x2, [fp, #-0x30]
    // 0x8dc608: r17 = " "
    //     0x8dc608: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8dc60c: StoreField: r2->field_1f = r17
    //     0x8dc60c: stur            w17, [x2, #0x1f]
    // 0x8dc610: mov             x1, x2
    // 0x8dc614: ldur            x0, [fp, #-0x18]
    // 0x8dc618: ArrayStore: r1[5] = r0  ; List_4
    //     0x8dc618: add             x25, x1, #0x23
    //     0x8dc61c: str             w0, [x25]
    //     0x8dc620: tbz             w0, #0, #0x8dc63c
    //     0x8dc624: ldurb           w16, [x1, #-1]
    //     0x8dc628: ldurb           w17, [x0, #-1]
    //     0x8dc62c: and             x16, x17, x16, lsr #2
    //     0x8dc630: tst             x16, HEAP, lsr #32
    //     0x8dc634: b.eq            #0x8dc63c
    //     0x8dc638: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8dc63c: r1 = "minute"
    //     0x8dc63c: add             x1, PP, #0x11, lsl #12  ; [pp+0x11308] "minute"
    //     0x8dc640: ldr             x1, [x1, #0x308]
    // 0x8dc644: r0 = getTranslate()
    //     0x8dc644: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x8dc648: ldur            x1, [fp, #-0x30]
    // 0x8dc64c: ArrayStore: r1[6] = r0  ; List_4
    //     0x8dc64c: add             x25, x1, #0x27
    //     0x8dc650: str             w0, [x25]
    //     0x8dc654: tbz             w0, #0, #0x8dc670
    //     0x8dc658: ldurb           w16, [x1, #-1]
    //     0x8dc65c: ldurb           w17, [x0, #-1]
    //     0x8dc660: and             x16, x17, x16, lsr #2
    //     0x8dc664: tst             x16, HEAP, lsr #32
    //     0x8dc668: b.eq            #0x8dc670
    //     0x8dc66c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8dc670: ldur            x2, [fp, #-0x30]
    // 0x8dc674: r17 = " "
    //     0x8dc674: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8dc678: StoreField: r2->field_2b = r17
    //     0x8dc678: stur            w17, [x2, #0x2b]
    // 0x8dc67c: mov             x1, x2
    // 0x8dc680: ldur            x0, [fp, #-0x28]
    // 0x8dc684: ArrayStore: r1[8] = r0  ; List_4
    //     0x8dc684: add             x25, x1, #0x2f
    //     0x8dc688: str             w0, [x25]
    //     0x8dc68c: tbz             w0, #0, #0x8dc6a8
    //     0x8dc690: ldurb           w16, [x1, #-1]
    //     0x8dc694: ldurb           w17, [x0, #-1]
    //     0x8dc698: and             x16, x17, x16, lsr #2
    //     0x8dc69c: tst             x16, HEAP, lsr #32
    //     0x8dc6a0: b.eq            #0x8dc6a8
    //     0x8dc6a4: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8dc6a8: r17 = " "
    //     0x8dc6a8: ldr             x17, [PP, #0x8a0]  ; [pp+0x8a0] " "
    // 0x8dc6ac: StoreField: r2->field_33 = r17
    //     0x8dc6ac: stur            w17, [x2, #0x33]
    // 0x8dc6b0: r1 = "second"
    //     0x8dc6b0: add             x1, PP, #0x11, lsl #12  ; [pp+0x11310] "second"
    //     0x8dc6b4: ldr             x1, [x1, #0x310]
    // 0x8dc6b8: r0 = getTranslate()
    //     0x8dc6b8: bl              #0x822808  ; [package:battlecross/library/translateLibrary.dart] ::getTranslate
    // 0x8dc6bc: ldur            x1, [fp, #-0x30]
    // 0x8dc6c0: ArrayStore: r1[10] = r0  ; List_4
    //     0x8dc6c0: add             x25, x1, #0x37
    //     0x8dc6c4: str             w0, [x25]
    //     0x8dc6c8: tbz             w0, #0, #0x8dc6e4
    //     0x8dc6cc: ldurb           w16, [x1, #-1]
    //     0x8dc6d0: ldurb           w17, [x0, #-1]
    //     0x8dc6d4: and             x16, x17, x16, lsr #2
    //     0x8dc6d8: tst             x16, HEAP, lsr #32
    //     0x8dc6dc: b.eq            #0x8dc6e4
    //     0x8dc6e0: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0x8dc6e4: ldur            x16, [fp, #-0x30]
    // 0x8dc6e8: str             x16, [SP]
    // 0x8dc6ec: r0 = _interpolate()
    //     0x8dc6ec: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0x8dc6f0: LeaveFrame
    //     0x8dc6f0: mov             SP, fp
    //     0x8dc6f4: ldp             fp, lr, [SP], #0x10
    // 0x8dc6f8: ret
    //     0x8dc6f8: ret             
    // 0x8dc6fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8dc6fc: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8dc700: b               #0x8dc23c
    // 0x8dc704: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8dc704: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8dc708: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8dc708: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8dc70c: stp             q1, q2, [SP, #-0x20]!
    // 0x8dc710: SaveReg r0
    //     0x8dc710: str             x0, [SP, #-8]!
    // 0x8dc714: d0 = 0.000000
    //     0x8dc714: fmov            d0, d2
    // 0x8dc718: r0 = 226
    //     0x8dc718: movz            x0, #0xe2
    // 0x8dc71c: r30 = DoubleToIntegerStub
    //     0x8dc71c: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x8dc720: LoadField: r30 = r30->field_7
    //     0x8dc720: ldur            lr, [lr, #7]
    // 0x8dc724: blr             lr
    // 0x8dc728: mov             x3, x0
    // 0x8dc72c: RestoreReg r0
    //     0x8dc72c: ldr             x0, [SP], #8
    // 0x8dc730: ldp             q1, q2, [SP], #0x20
    // 0x8dc734: b               #0x8dc424
    // 0x8dc738: SaveReg d0
    //     0x8dc738: str             q0, [SP, #-0x10]!
    // 0x8dc73c: r0 = 226
    //     0x8dc73c: movz            x0, #0xe2
    // 0x8dc740: r30 = DoubleToIntegerStub
    //     0x8dc740: ldr             lr, [PP, #0x1c40]  ; [pp+0x1c40] Stub: DoubleToInteger (0x7b1a14)
    // 0x8dc744: LoadField: r30 = r30->field_7
    //     0x8dc744: ldur            lr, [lr, #7]
    // 0x8dc748: blr             lr
    // 0x8dc74c: RestoreReg d0
    //     0x8dc74c: ldr             q0, [SP], #0x10
    // 0x8dc750: b               #0x8dc4e8
    // 0x8dc754: add             x3, x3, x1
    // 0x8dc758: b               #0x8dc554
  }
  static _ getCustomEventMap(/* No info */) {
    // ** addr: 0xabb20c, size: 0x37cc
    // 0xabb20c: EnterFrame
    //     0xabb20c: stp             fp, lr, [SP, #-0x10]!
    //     0xabb210: mov             fp, SP
    // 0xabb214: AllocStack(0x78)
    //     0xabb214: sub             SP, SP, #0x78
    // 0xabb218: SetupParameters(dynamic _ /* r1 => r0, fp-0x8 */)
    //     0xabb218: mov             x0, x1
    //     0xabb21c: stur            x1, [fp, #-8]
    // 0xabb220: CheckStackOverflow
    //     0xabb220: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xabb224: cmp             SP, x16
    //     0xabb228: b.ls            #0xabe9d0
    // 0xabb22c: r1 = Null
    //     0xabb22c: mov             x1, NULL
    // 0xabb230: r0 = Map()
    //     0xabb230: bl              #0x7dd818  ; [dart:core] Map::Map
    // 0xabb234: stur            x0, [fp, #-0x10]
    // 0xabb238: r16 = "landslide"
    //     0xabb238: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2ef50] "landslide"
    //     0xabb23c: ldr             x16, [x16, #0xf50]
    // 0xabb240: ldur            lr, [fp, #-8]
    // 0xabb244: stp             lr, x16, [SP]
    // 0xabb248: r0 = ==()
    //     0xabb248: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabb24c: tbnz            w0, #4, #0xabb418
    // 0xabb250: r1 = Null
    //     0xabb250: mov             x1, NULL
    // 0xabb254: r2 = 16
    //     0xabb254: movz            x2, #0x10
    // 0xabb258: r0 = AllocateArray()
    //     0xabb258: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb25c: r17 = "EN"
    //     0xabb25c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb260: ldr             x17, [x17, #0xb58]
    // 0xabb264: StoreField: r0->field_f = r17
    //     0xabb264: stur            w17, [x0, #0xf]
    // 0xabb268: r17 = "Landslide"
    //     0xabb268: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef58] "Landslide"
    //     0xabb26c: ldr             x17, [x17, #0xf58]
    // 0xabb270: StoreField: r0->field_13 = r17
    //     0xabb270: stur            w17, [x0, #0x13]
    // 0xabb274: r17 = "CN"
    //     0xabb274: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb278: ldr             x17, [x17, #0xb30]
    // 0xabb27c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb27c: stur            w17, [x0, #0x17]
    // 0xabb280: r17 = "土崩现场"
    //     0xabb280: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef60] "土崩现场"
    //     0xabb284: ldr             x17, [x17, #0xf60]
    // 0xabb288: StoreField: r0->field_1b = r17
    //     0xabb288: stur            w17, [x0, #0x1b]
    // 0xabb28c: r17 = "TW"
    //     0xabb28c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb290: ldr             x17, [x17, #0xb40]
    // 0xabb294: StoreField: r0->field_1f = r17
    //     0xabb294: stur            w17, [x0, #0x1f]
    // 0xabb298: r17 = "土崩現場"
    //     0xabb298: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef68] "土崩現場"
    //     0xabb29c: ldr             x17, [x17, #0xf68]
    // 0xabb2a0: StoreField: r0->field_23 = r17
    //     0xabb2a0: stur            w17, [x0, #0x23]
    // 0xabb2a4: r17 = "JP"
    //     0xabb2a4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb2a8: ldr             x17, [x17, #0xb50]
    // 0xabb2ac: StoreField: r0->field_27 = r17
    //     0xabb2ac: stur            w17, [x0, #0x27]
    // 0xabb2b0: r17 = "地すべり現場"
    //     0xabb2b0: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef70] "地すべり現場"
    //     0xabb2b4: ldr             x17, [x17, #0xf70]
    // 0xabb2b8: StoreField: r0->field_2b = r17
    //     0xabb2b8: stur            w17, [x0, #0x2b]
    // 0xabb2bc: stp             x0, NULL, [SP]
    // 0xabb2c0: r0 = Map._fromLiteral()
    //     0xabb2c0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb2c4: mov             x3, x0
    // 0xabb2c8: stur            x3, [fp, #-0x18]
    // 0xabb2cc: r0 = LoadStaticField(0xb54)
    //     0xabb2cc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb2d0: ldr             x0, [x0, #0x16a8]
    // 0xabb2d4: cmp             w0, NULL
    // 0xabb2d8: b.eq            #0xabb410
    // 0xabb2dc: r17 = 327
    //     0xabb2dc: movz            x17, #0x147
    // 0xabb2e0: ldr             w1, [x0, x17]
    // 0xabb2e4: DecompressPointer r1
    //     0xabb2e4: add             x1, x1, HEAP, lsl #32
    // 0xabb2e8: r0 = LoadClassIdInstr(r1)
    //     0xabb2e8: ldur            x0, [x1, #-1]
    //     0xabb2ec: ubfx            x0, x0, #0xc, #0x14
    // 0xabb2f0: r2 = "storyDojo"
    //     0xabb2f0: add             x2, PP, #0x2e, lsl #12  ; [pp+0x2ef78] "storyDojo"
    //     0xabb2f4: ldr             x2, [x2, #0xf78]
    // 0xabb2f8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb2f8: sub             lr, x0, #0xb4
    //     0xabb2fc: ldr             lr, [x21, lr, lsl #3]
    //     0xabb300: blr             lr
    // 0xabb304: cmp             w0, NULL
    // 0xabb308: b.eq            #0xabb410
    // 0xabb30c: r0 = LoadStaticField(0xb54)
    //     0xabb30c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb310: ldr             x0, [x0, #0x16a8]
    // 0xabb314: cmp             w0, NULL
    // 0xabb318: b.ne            #0xabb324
    // 0xabb31c: r3 = Null
    //     0xabb31c: mov             x3, NULL
    // 0xabb320: b               #0xabb350
    // 0xabb324: r17 = 327
    //     0xabb324: movz            x17, #0x147
    // 0xabb328: ldr             w1, [x0, x17]
    // 0xabb32c: DecompressPointer r1
    //     0xabb32c: add             x1, x1, HEAP, lsl #32
    // 0xabb330: r0 = LoadClassIdInstr(r1)
    //     0xabb330: ldur            x0, [x1, #-1]
    //     0xabb334: ubfx            x0, x0, #0xc, #0x14
    // 0xabb338: r2 = "storyDojo"
    //     0xabb338: add             x2, PP, #0x2e, lsl #12  ; [pp+0x2ef78] "storyDojo"
    //     0xabb33c: ldr             x2, [x2, #0xf78]
    // 0xabb340: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb340: sub             lr, x0, #0xb4
    //     0xabb344: ldr             lr, [x21, lr, lsl #3]
    //     0xabb348: blr             lr
    // 0xabb34c: mov             x3, x0
    // 0xabb350: mov             x0, x3
    // 0xabb354: stur            x3, [fp, #-0x20]
    // 0xabb358: r2 = Null
    //     0xabb358: mov             x2, NULL
    // 0xabb35c: r1 = Null
    //     0xabb35c: mov             x1, NULL
    // 0xabb360: r4 = 59
    //     0xabb360: movz            x4, #0x3b
    // 0xabb364: branchIfSmi(r0, 0xabb370)
    //     0xabb364: tbz             w0, #0, #0xabb370
    // 0xabb368: r4 = LoadClassIdInstr(r0)
    //     0xabb368: ldur            x4, [x0, #-1]
    //     0xabb36c: ubfx            x4, x4, #0xc, #0x14
    // 0xabb370: cmp             x4, #0x3e
    // 0xabb374: b.eq            #0xabb388
    // 0xabb378: r8 = bool
    //     0xabb378: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0xabb37c: r3 = Null
    //     0xabb37c: add             x3, PP, #0x2e, lsl #12  ; [pp+0x2ef80] Null
    //     0xabb380: ldr             x3, [x3, #0xf80]
    // 0xabb384: r0 = bool()
    //     0xabb384: bl              #0x1522e58  ; IsType_bool_Stub
    // 0xabb388: ldur            x0, [fp, #-0x20]
    // 0xabb38c: tbnz            w0, #4, #0xabb408
    // 0xabb390: r1 = Null
    //     0xabb390: mov             x1, NULL
    // 0xabb394: r2 = 16
    //     0xabb394: movz            x2, #0x10
    // 0xabb398: r0 = AllocateArray()
    //     0xabb398: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb39c: r17 = "EN"
    //     0xabb39c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb3a0: ldr             x17, [x17, #0xb58]
    // 0xabb3a4: StoreField: r0->field_f = r17
    //     0xabb3a4: stur            w17, [x0, #0xf]
    // 0xabb3a8: r17 = "Dojo"
    //     0xabb3a8: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef90] "Dojo"
    //     0xabb3ac: ldr             x17, [x17, #0xf90]
    // 0xabb3b0: StoreField: r0->field_13 = r17
    //     0xabb3b0: stur            w17, [x0, #0x13]
    // 0xabb3b4: r17 = "CN"
    //     0xabb3b4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb3b8: ldr             x17, [x17, #0xb30]
    // 0xabb3bc: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb3bc: stur            w17, [x0, #0x17]
    // 0xabb3c0: r17 = "道场"
    //     0xabb3c0: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2ef98] "道场"
    //     0xabb3c4: ldr             x17, [x17, #0xf98]
    // 0xabb3c8: StoreField: r0->field_1b = r17
    //     0xabb3c8: stur            w17, [x0, #0x1b]
    // 0xabb3cc: r17 = "TW"
    //     0xabb3cc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb3d0: ldr             x17, [x17, #0xb40]
    // 0xabb3d4: StoreField: r0->field_1f = r17
    //     0xabb3d4: stur            w17, [x0, #0x1f]
    // 0xabb3d8: r17 = "道場"
    //     0xabb3d8: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efa0] "道場"
    //     0xabb3dc: ldr             x17, [x17, #0xfa0]
    // 0xabb3e0: StoreField: r0->field_23 = r17
    //     0xabb3e0: stur            w17, [x0, #0x23]
    // 0xabb3e4: r17 = "JP"
    //     0xabb3e4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb3e8: ldr             x17, [x17, #0xb50]
    // 0xabb3ec: StoreField: r0->field_27 = r17
    //     0xabb3ec: stur            w17, [x0, #0x27]
    // 0xabb3f0: r17 = "道場"
    //     0xabb3f0: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efa0] "道場"
    //     0xabb3f4: ldr             x17, [x17, #0xfa0]
    // 0xabb3f8: StoreField: r0->field_2b = r17
    //     0xabb3f8: stur            w17, [x0, #0x2b]
    // 0xabb3fc: stp             x0, NULL, [SP]
    // 0xabb400: r0 = Map._fromLiteral()
    //     0xabb400: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb404: b               #0xabe9c4
    // 0xabb408: ldur            x0, [fp, #-0x18]
    // 0xabb40c: b               #0xabe9c4
    // 0xabb410: ldur            x0, [fp, #-0x18]
    // 0xabb414: b               #0xabe9c4
    // 0xabb418: r16 = "prisonChallengeChat"
    //     0xabb418: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2efa8] "prisonChallengeChat"
    //     0xabb41c: ldr             x16, [x16, #0xfa8]
    // 0xabb420: ldur            lr, [fp, #-8]
    // 0xabb424: stp             lr, x16, [SP]
    // 0xabb428: r0 = ==()
    //     0xabb428: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabb42c: tbnz            w0, #4, #0xabbaa8
    // 0xabb430: r1 = Null
    //     0xabb430: mov             x1, NULL
    // 0xabb434: r2 = 16
    //     0xabb434: movz            x2, #0x10
    // 0xabb438: r0 = AllocateArray()
    //     0xabb438: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb43c: r17 = "EN"
    //     0xabb43c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb440: ldr             x17, [x17, #0xb58]
    // 0xabb444: StoreField: r0->field_f = r17
    //     0xabb444: stur            w17, [x0, #0xf]
    // 0xabb448: r17 = "You feel healthy...this is gonna be a good fight!"
    //     0xabb448: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efb0] "You feel healthy...this is gonna be a good fight!"
    //     0xabb44c: ldr             x17, [x17, #0xfb0]
    // 0xabb450: StoreField: r0->field_13 = r17
    //     0xabb450: stur            w17, [x0, #0x13]
    // 0xabb454: r17 = "CN"
    //     0xabb454: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb458: ldr             x17, [x17, #0xb30]
    // 0xabb45c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb45c: stur            w17, [x0, #0x17]
    // 0xabb460: r17 = "你觉得很健康. . .这应该会是一场好的决斗！"
    //     0xabb460: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efb8] "你觉得很健康. . .这应该会是一场好的决斗！"
    //     0xabb464: ldr             x17, [x17, #0xfb8]
    // 0xabb468: StoreField: r0->field_1b = r17
    //     0xabb468: stur            w17, [x0, #0x1b]
    // 0xabb46c: r17 = "TW"
    //     0xabb46c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb470: ldr             x17, [x17, #0xb40]
    // 0xabb474: StoreField: r0->field_1f = r17
    //     0xabb474: stur            w17, [x0, #0x1f]
    // 0xabb478: r17 = "你覺得很健康. . .這應該會是一場好的決鬥！"
    //     0xabb478: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efc0] "你覺得很健康. . .這應該會是一場好的決鬥！"
    //     0xabb47c: ldr             x17, [x17, #0xfc0]
    // 0xabb480: StoreField: r0->field_23 = r17
    //     0xabb480: stur            w17, [x0, #0x23]
    // 0xabb484: r17 = "JP"
    //     0xabb484: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb488: ldr             x17, [x17, #0xb50]
    // 0xabb48c: StoreField: r0->field_27 = r17
    //     0xabb48c: stur            w17, [x0, #0x27]
    // 0xabb490: r17 = "今は元気だ．．．いい試合になりそう！"
    //     0xabb490: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efc8] "今は元気だ．．．いい試合になりそう！"
    //     0xabb494: ldr             x17, [x17, #0xfc8]
    // 0xabb498: StoreField: r0->field_2b = r17
    //     0xabb498: stur            w17, [x0, #0x2b]
    // 0xabb49c: stp             x0, NULL, [SP]
    // 0xabb4a0: r0 = Map._fromLiteral()
    //     0xabb4a0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb4a4: mov             x3, x0
    // 0xabb4a8: stur            x3, [fp, #-0x18]
    // 0xabb4ac: r0 = LoadStaticField(0xb54)
    //     0xabb4ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb4b0: ldr             x0, [x0, #0x16a8]
    // 0xabb4b4: cmp             w0, NULL
    // 0xabb4b8: b.eq            #0xabbaa0
    // 0xabb4bc: r17 = 351
    //     0xabb4bc: movz            x17, #0x15f
    // 0xabb4c0: ldr             w1, [x0, x17]
    // 0xabb4c4: DecompressPointer r1
    //     0xabb4c4: add             x1, x1, HEAP, lsl #32
    // 0xabb4c8: r0 = LoadClassIdInstr(r1)
    //     0xabb4c8: ldur            x0, [x1, #-1]
    //     0xabb4cc: ubfx            x0, x0, #0xc, #0x14
    // 0xabb4d0: r2 = "prisonChallenge"
    //     0xabb4d0: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb4d4: ldr             x2, [x2, #0x30]
    // 0xabb4d8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb4d8: sub             lr, x0, #0xb4
    //     0xabb4dc: ldr             lr, [x21, lr, lsl #3]
    //     0xabb4e0: blr             lr
    // 0xabb4e4: cmp             w0, NULL
    // 0xabb4e8: b.eq            #0xabbaa0
    // 0xabb4ec: r0 = LoadStaticField(0xb54)
    //     0xabb4ec: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb4f0: ldr             x0, [x0, #0x16a8]
    // 0xabb4f4: cmp             w0, NULL
    // 0xabb4f8: b.ne            #0xabb504
    // 0xabb4fc: r0 = Null
    //     0xabb4fc: mov             x0, NULL
    // 0xabb500: b               #0xabb52c
    // 0xabb504: r17 = 351
    //     0xabb504: movz            x17, #0x15f
    // 0xabb508: ldr             w1, [x0, x17]
    // 0xabb50c: DecompressPointer r1
    //     0xabb50c: add             x1, x1, HEAP, lsl #32
    // 0xabb510: r0 = LoadClassIdInstr(r1)
    //     0xabb510: ldur            x0, [x1, #-1]
    //     0xabb514: ubfx            x0, x0, #0xc, #0x14
    // 0xabb518: r2 = "prisonChallenge"
    //     0xabb518: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb51c: ldr             x2, [x2, #0x30]
    // 0xabb520: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb520: sub             lr, x0, #0xb4
    //     0xabb524: ldr             lr, [x21, lr, lsl #3]
    //     0xabb528: blr             lr
    // 0xabb52c: r1 = 59
    //     0xabb52c: movz            x1, #0x3b
    // 0xabb530: branchIfSmi(r0, 0xabb53c)
    //     0xabb530: tbz             w0, #0, #0xabb53c
    // 0xabb534: r1 = LoadClassIdInstr(r0)
    //     0xabb534: ldur            x1, [x0, #-1]
    //     0xabb538: ubfx            x1, x1, #0xc, #0x14
    // 0xabb53c: r16 = "3Hand"
    //     0xabb53c: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2efd0] "3Hand"
    //     0xabb540: ldr             x16, [x16, #0xfd0]
    // 0xabb544: stp             x16, x0, [SP]
    // 0xabb548: mov             x0, x1
    // 0xabb54c: mov             lr, x0
    // 0xabb550: ldr             lr, [x21, lr, lsl #3]
    // 0xabb554: blr             lr
    // 0xabb558: tbnz            w0, #4, #0xabb5d8
    // 0xabb55c: r1 = Null
    //     0xabb55c: mov             x1, NULL
    // 0xabb560: r2 = 16
    //     0xabb560: movz            x2, #0x10
    // 0xabb564: r0 = AllocateArray()
    //     0xabb564: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb568: r17 = "EN"
    //     0xabb568: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb56c: ldr             x17, [x17, #0xb58]
    // 0xabb570: StoreField: r0->field_f = r17
    //     0xabb570: stur            w17, [x0, #0xf]
    // 0xabb574: r17 = "You feel depressed...you will battle with only 3 cards in Hand!"
    //     0xabb574: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efd8] "You feel depressed...you will battle with only 3 cards in Hand!"
    //     0xabb578: ldr             x17, [x17, #0xfd8]
    // 0xabb57c: StoreField: r0->field_13 = r17
    //     0xabb57c: stur            w17, [x0, #0x13]
    // 0xabb580: r17 = "CN"
    //     0xabb580: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb584: ldr             x17, [x17, #0xb30]
    // 0xabb588: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb588: stur            w17, [x0, #0x17]
    // 0xabb58c: r17 = "你觉得很诅丧. . .你将会以手上不能超过3张卡的限制下进行决斗！"
    //     0xabb58c: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efe0] "你觉得很诅丧. . .你将会以手上不能超过3张卡的限制下进行决斗！"
    //     0xabb590: ldr             x17, [x17, #0xfe0]
    // 0xabb594: StoreField: r0->field_1b = r17
    //     0xabb594: stur            w17, [x0, #0x1b]
    // 0xabb598: r17 = "TW"
    //     0xabb598: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb59c: ldr             x17, [x17, #0xb40]
    // 0xabb5a0: StoreField: r0->field_1f = r17
    //     0xabb5a0: stur            w17, [x0, #0x1f]
    // 0xabb5a4: r17 = "你覺得很詛喪. . .你將會以手上不能超過3張卡的限制下進行決鬥！"
    //     0xabb5a4: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2efe8] "你覺得很詛喪. . .你將會以手上不能超過3張卡的限制下進行決鬥！"
    //     0xabb5a8: ldr             x17, [x17, #0xfe8]
    // 0xabb5ac: StoreField: r0->field_23 = r17
    //     0xabb5ac: stur            w17, [x0, #0x23]
    // 0xabb5b0: r17 = "JP"
    //     0xabb5b0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb5b4: ldr             x17, [x17, #0xb50]
    // 0xabb5b8: StoreField: r0->field_27 = r17
    //     0xabb5b8: stur            w17, [x0, #0x27]
    // 0xabb5bc: r17 = "今はへこんでいる．．．手札のカードが3枚を超えられない制限で試合することになる！"
    //     0xabb5bc: add             x17, PP, #0x2e, lsl #12  ; [pp+0x2eff0] "今はへこんでいる．．．手札のカードが3枚を超えられない制限で試合することになる！"
    //     0xabb5c0: ldr             x17, [x17, #0xff0]
    // 0xabb5c4: StoreField: r0->field_2b = r17
    //     0xabb5c4: stur            w17, [x0, #0x2b]
    // 0xabb5c8: stp             x0, NULL, [SP]
    // 0xabb5cc: r0 = Map._fromLiteral()
    //     0xabb5cc: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb5d0: mov             x3, x0
    // 0xabb5d4: b               #0xabb5dc
    // 0xabb5d8: ldur            x3, [fp, #-0x18]
    // 0xabb5dc: stur            x3, [fp, #-0x20]
    // 0xabb5e0: r0 = LoadStaticField(0xb54)
    //     0xabb5e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb5e4: ldr             x0, [x0, #0x16a8]
    // 0xabb5e8: cmp             w0, NULL
    // 0xabb5ec: b.ne            #0xabb5f8
    // 0xabb5f0: r0 = Null
    //     0xabb5f0: mov             x0, NULL
    // 0xabb5f4: b               #0xabb620
    // 0xabb5f8: r17 = 351
    //     0xabb5f8: movz            x17, #0x15f
    // 0xabb5fc: ldr             w1, [x0, x17]
    // 0xabb600: DecompressPointer r1
    //     0xabb600: add             x1, x1, HEAP, lsl #32
    // 0xabb604: r0 = LoadClassIdInstr(r1)
    //     0xabb604: ldur            x0, [x1, #-1]
    //     0xabb608: ubfx            x0, x0, #0xc, #0x14
    // 0xabb60c: r2 = "prisonChallenge"
    //     0xabb60c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb610: ldr             x2, [x2, #0x30]
    // 0xabb614: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb614: sub             lr, x0, #0xb4
    //     0xabb618: ldr             lr, [x21, lr, lsl #3]
    //     0xabb61c: blr             lr
    // 0xabb620: r1 = 59
    //     0xabb620: movz            x1, #0x3b
    // 0xabb624: branchIfSmi(r0, 0xabb630)
    //     0xabb624: tbz             w0, #0, #0xabb630
    // 0xabb628: r1 = LoadClassIdInstr(r0)
    //     0xabb628: ldur            x1, [x0, #-1]
    //     0xabb62c: ubfx            x1, x1, #0xc, #0x14
    // 0xabb630: r16 = "7Deck"
    //     0xabb630: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2eff8] "7Deck"
    //     0xabb634: ldr             x16, [x16, #0xff8]
    // 0xabb638: stp             x16, x0, [SP]
    // 0xabb63c: mov             x0, x1
    // 0xabb640: mov             lr, x0
    // 0xabb644: ldr             lr, [x21, lr, lsl #3]
    // 0xabb648: blr             lr
    // 0xabb64c: tbnz            w0, #4, #0xabb6cc
    // 0xabb650: r1 = Null
    //     0xabb650: mov             x1, NULL
    // 0xabb654: r2 = 16
    //     0xabb654: movz            x2, #0x10
    // 0xabb658: r0 = AllocateArray()
    //     0xabb658: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb65c: r17 = "EN"
    //     0xabb65c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb660: ldr             x17, [x17, #0xb58]
    // 0xabb664: StoreField: r0->field_f = r17
    //     0xabb664: stur            w17, [x0, #0xf]
    // 0xabb668: r17 = "You feel nauseous...you will battle with only 7 cards in Deck!"
    //     0xabb668: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f000] "You feel nauseous...you will battle with only 7 cards in Deck!"
    //     0xabb66c: ldr             x17, [x17]
    // 0xabb670: StoreField: r0->field_13 = r17
    //     0xabb670: stur            w17, [x0, #0x13]
    // 0xabb674: r17 = "CN"
    //     0xabb674: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb678: ldr             x17, [x17, #0xb30]
    // 0xabb67c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb67c: stur            w17, [x0, #0x17]
    // 0xabb680: r17 = "你觉得很恶心. . .你的牌组将会在每个回合被限制在随机的7张牌！"
    //     0xabb680: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f008] "你觉得很恶心. . .你的牌组将会在每个回合被限制在随机的7张牌！"
    //     0xabb684: ldr             x17, [x17, #8]
    // 0xabb688: StoreField: r0->field_1b = r17
    //     0xabb688: stur            w17, [x0, #0x1b]
    // 0xabb68c: r17 = "TW"
    //     0xabb68c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb690: ldr             x17, [x17, #0xb40]
    // 0xabb694: StoreField: r0->field_1f = r17
    //     0xabb694: stur            w17, [x0, #0x1f]
    // 0xabb698: r17 = "你覺得很惡心. . .你的牌組將會在每個回合被限制在隨機的7張牌！"
    //     0xabb698: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f010] "你覺得很惡心. . .你的牌組將會在每個回合被限制在隨機的7張牌！"
    //     0xabb69c: ldr             x17, [x17, #0x10]
    // 0xabb6a0: StoreField: r0->field_23 = r17
    //     0xabb6a0: stur            w17, [x0, #0x23]
    // 0xabb6a4: r17 = "JP"
    //     0xabb6a4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb6a8: ldr             x17, [x17, #0xb50]
    // 0xabb6ac: StoreField: r0->field_27 = r17
    //     0xabb6ac: stur            w17, [x0, #0x27]
    // 0xabb6b0: r17 = "今は吐き気をしよう．．．デッキが毎回のラリーでランダムの7枚のカードになる制限で試合するになる！"
    //     0xabb6b0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f018] "今は吐き気をしよう．．．デッキが毎回のラリーでランダムの7枚のカードになる制限で試合するになる！"
    //     0xabb6b4: ldr             x17, [x17, #0x18]
    // 0xabb6b8: StoreField: r0->field_2b = r17
    //     0xabb6b8: stur            w17, [x0, #0x2b]
    // 0xabb6bc: stp             x0, NULL, [SP]
    // 0xabb6c0: r0 = Map._fromLiteral()
    //     0xabb6c0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb6c4: mov             x3, x0
    // 0xabb6c8: b               #0xabb6d0
    // 0xabb6cc: ldur            x3, [fp, #-0x20]
    // 0xabb6d0: stur            x3, [fp, #-0x20]
    // 0xabb6d4: r0 = LoadStaticField(0xb54)
    //     0xabb6d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb6d8: ldr             x0, [x0, #0x16a8]
    // 0xabb6dc: cmp             w0, NULL
    // 0xabb6e0: b.ne            #0xabb6ec
    // 0xabb6e4: r0 = Null
    //     0xabb6e4: mov             x0, NULL
    // 0xabb6e8: b               #0xabb714
    // 0xabb6ec: r17 = 351
    //     0xabb6ec: movz            x17, #0x15f
    // 0xabb6f0: ldr             w1, [x0, x17]
    // 0xabb6f4: DecompressPointer r1
    //     0xabb6f4: add             x1, x1, HEAP, lsl #32
    // 0xabb6f8: r0 = LoadClassIdInstr(r1)
    //     0xabb6f8: ldur            x0, [x1, #-1]
    //     0xabb6fc: ubfx            x0, x0, #0xc, #0x14
    // 0xabb700: r2 = "prisonChallenge"
    //     0xabb700: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb704: ldr             x2, [x2, #0x30]
    // 0xabb708: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb708: sub             lr, x0, #0xb4
    //     0xabb70c: ldr             lr, [x21, lr, lsl #3]
    //     0xabb710: blr             lr
    // 0xabb714: r1 = 59
    //     0xabb714: movz            x1, #0x3b
    // 0xabb718: branchIfSmi(r0, 0xabb724)
    //     0xabb718: tbz             w0, #0, #0xabb724
    // 0xabb71c: r1 = LoadClassIdInstr(r0)
    //     0xabb71c: ldur            x1, [x0, #-1]
    //     0xabb720: ubfx            x1, x1, #0xc, #0x14
    // 0xabb724: r16 = "0Sta"
    //     0xabb724: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f020] "0Sta"
    //     0xabb728: ldr             x16, [x16, #0x20]
    // 0xabb72c: stp             x16, x0, [SP]
    // 0xabb730: mov             x0, x1
    // 0xabb734: mov             lr, x0
    // 0xabb738: ldr             lr, [x21, lr, lsl #3]
    // 0xabb73c: blr             lr
    // 0xabb740: tbnz            w0, #4, #0xabb7c0
    // 0xabb744: r1 = Null
    //     0xabb744: mov             x1, NULL
    // 0xabb748: r2 = 16
    //     0xabb748: movz            x2, #0x10
    // 0xabb74c: r0 = AllocateArray()
    //     0xabb74c: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb750: r17 = "EN"
    //     0xabb750: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb754: ldr             x17, [x17, #0xb58]
    // 0xabb758: StoreField: r0->field_f = r17
    //     0xabb758: stur            w17, [x0, #0xf]
    // 0xabb75c: r17 = "You feel exhausted...you will start the battle with 0 Stamina!"
    //     0xabb75c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f028] "You feel exhausted...you will start the battle with 0 Stamina!"
    //     0xabb760: ldr             x17, [x17, #0x28]
    // 0xabb764: StoreField: r0->field_13 = r17
    //     0xabb764: stur            w17, [x0, #0x13]
    // 0xabb768: r17 = "CN"
    //     0xabb768: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb76c: ldr             x17, [x17, #0xb30]
    // 0xabb770: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb770: stur            w17, [x0, #0x17]
    // 0xabb774: r17 = "你觉得很疲累. . .你会以零体力值开始决斗！"
    //     0xabb774: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f030] "你觉得很疲累. . .你会以零体力值开始决斗！"
    //     0xabb778: ldr             x17, [x17, #0x30]
    // 0xabb77c: StoreField: r0->field_1b = r17
    //     0xabb77c: stur            w17, [x0, #0x1b]
    // 0xabb780: r17 = "TW"
    //     0xabb780: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb784: ldr             x17, [x17, #0xb40]
    // 0xabb788: StoreField: r0->field_1f = r17
    //     0xabb788: stur            w17, [x0, #0x1f]
    // 0xabb78c: r17 = "你覺得很疲累. . .你會以零體力值開始決鬥！"
    //     0xabb78c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f038] "你覺得很疲累. . .你會以零體力值開始決鬥！"
    //     0xabb790: ldr             x17, [x17, #0x38]
    // 0xabb794: StoreField: r0->field_23 = r17
    //     0xabb794: stur            w17, [x0, #0x23]
    // 0xabb798: r17 = "JP"
    //     0xabb798: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb79c: ldr             x17, [x17, #0xb50]
    // 0xabb7a0: StoreField: r0->field_27 = r17
    //     0xabb7a0: stur            w17, [x0, #0x27]
    // 0xabb7a4: r17 = "今は疲れている．．．試合をゼロ体力から始めることになる！"
    //     0xabb7a4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f040] "今は疲れている．．．試合をゼロ体力から始めることになる！"
    //     0xabb7a8: ldr             x17, [x17, #0x40]
    // 0xabb7ac: StoreField: r0->field_2b = r17
    //     0xabb7ac: stur            w17, [x0, #0x2b]
    // 0xabb7b0: stp             x0, NULL, [SP]
    // 0xabb7b4: r0 = Map._fromLiteral()
    //     0xabb7b4: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb7b8: mov             x3, x0
    // 0xabb7bc: b               #0xabb7c4
    // 0xabb7c0: ldur            x3, [fp, #-0x20]
    // 0xabb7c4: stur            x3, [fp, #-0x20]
    // 0xabb7c8: r0 = LoadStaticField(0xb54)
    //     0xabb7c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb7cc: ldr             x0, [x0, #0x16a8]
    // 0xabb7d0: cmp             w0, NULL
    // 0xabb7d4: b.ne            #0xabb7e0
    // 0xabb7d8: r0 = Null
    //     0xabb7d8: mov             x0, NULL
    // 0xabb7dc: b               #0xabb808
    // 0xabb7e0: r17 = 351
    //     0xabb7e0: movz            x17, #0x15f
    // 0xabb7e4: ldr             w1, [x0, x17]
    // 0xabb7e8: DecompressPointer r1
    //     0xabb7e8: add             x1, x1, HEAP, lsl #32
    // 0xabb7ec: r0 = LoadClassIdInstr(r1)
    //     0xabb7ec: ldur            x0, [x1, #-1]
    //     0xabb7f0: ubfx            x0, x0, #0xc, #0x14
    // 0xabb7f4: r2 = "prisonChallenge"
    //     0xabb7f4: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb7f8: ldr             x2, [x2, #0x30]
    // 0xabb7fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb7fc: sub             lr, x0, #0xb4
    //     0xabb800: ldr             lr, [x21, lr, lsl #3]
    //     0xabb804: blr             lr
    // 0xabb808: r1 = 59
    //     0xabb808: movz            x1, #0x3b
    // 0xabb80c: branchIfSmi(r0, 0xabb818)
    //     0xabb80c: tbz             w0, #0, #0xabb818
    // 0xabb810: r1 = LoadClassIdInstr(r0)
    //     0xabb810: ldur            x1, [x0, #-1]
    //     0xabb814: ubfx            x1, x1, #0xc, #0x14
    // 0xabb818: r16 = "5Tech"
    //     0xabb818: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f048] "5Tech"
    //     0xabb81c: ldr             x16, [x16, #0x48]
    // 0xabb820: stp             x16, x0, [SP]
    // 0xabb824: mov             x0, x1
    // 0xabb828: mov             lr, x0
    // 0xabb82c: ldr             lr, [x21, lr, lsl #3]
    // 0xabb830: blr             lr
    // 0xabb834: tbnz            w0, #4, #0xabb8b4
    // 0xabb838: r1 = Null
    //     0xabb838: mov             x1, NULL
    // 0xabb83c: r2 = 16
    //     0xabb83c: movz            x2, #0x10
    // 0xabb840: r0 = AllocateArray()
    //     0xabb840: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb844: r17 = "EN"
    //     0xabb844: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb848: ldr             x17, [x17, #0xb58]
    // 0xabb84c: StoreField: r0->field_f = r17
    //     0xabb84c: stur            w17, [x0, #0xf]
    // 0xabb850: r17 = "Your stomach feel pain...you will battle with only 5 ACT!"
    //     0xabb850: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f050] "Your stomach feel pain...you will battle with only 5 ACT!"
    //     0xabb854: ldr             x17, [x17, #0x50]
    // 0xabb858: StoreField: r0->field_13 = r17
    //     0xabb858: stur            w17, [x0, #0x13]
    // 0xabb85c: r17 = "CN"
    //     0xabb85c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb860: ldr             x17, [x17, #0xb30]
    // 0xabb864: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb864: stur            w17, [x0, #0x17]
    // 0xabb868: r17 = "你的肚子很疼. . .你的行动值将会被限制在5！"
    //     0xabb868: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f058] "你的肚子很疼. . .你的行动值将会被限制在5！"
    //     0xabb86c: ldr             x17, [x17, #0x58]
    // 0xabb870: StoreField: r0->field_1b = r17
    //     0xabb870: stur            w17, [x0, #0x1b]
    // 0xabb874: r17 = "TW"
    //     0xabb874: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb878: ldr             x17, [x17, #0xb40]
    // 0xabb87c: StoreField: r0->field_1f = r17
    //     0xabb87c: stur            w17, [x0, #0x1f]
    // 0xabb880: r17 = "你的肚子很疼. . .你的行動值將會被限制在5！"
    //     0xabb880: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f060] "你的肚子很疼. . .你的行動值將會被限制在5！"
    //     0xabb884: ldr             x17, [x17, #0x60]
    // 0xabb888: StoreField: r0->field_23 = r17
    //     0xabb888: stur            w17, [x0, #0x23]
    // 0xabb88c: r17 = "JP"
    //     0xabb88c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb890: ldr             x17, [x17, #0xb50]
    // 0xabb894: StoreField: r0->field_27 = r17
    //     0xabb894: stur            w17, [x0, #0x27]
    // 0xabb898: r17 = "今はお腹が痛い．．．行動が５に制限される状態で試合をすることになる！"
    //     0xabb898: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f068] "今はお腹が痛い．．．行動が５に制限される状態で試合をすることになる！"
    //     0xabb89c: ldr             x17, [x17, #0x68]
    // 0xabb8a0: StoreField: r0->field_2b = r17
    //     0xabb8a0: stur            w17, [x0, #0x2b]
    // 0xabb8a4: stp             x0, NULL, [SP]
    // 0xabb8a8: r0 = Map._fromLiteral()
    //     0xabb8a8: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb8ac: mov             x3, x0
    // 0xabb8b0: b               #0xabb8b8
    // 0xabb8b4: ldur            x3, [fp, #-0x20]
    // 0xabb8b8: stur            x3, [fp, #-0x20]
    // 0xabb8bc: r0 = LoadStaticField(0xb54)
    //     0xabb8bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb8c0: ldr             x0, [x0, #0x16a8]
    // 0xabb8c4: cmp             w0, NULL
    // 0xabb8c8: b.ne            #0xabb8d4
    // 0xabb8cc: r0 = Null
    //     0xabb8cc: mov             x0, NULL
    // 0xabb8d0: b               #0xabb8fc
    // 0xabb8d4: r17 = 351
    //     0xabb8d4: movz            x17, #0x15f
    // 0xabb8d8: ldr             w1, [x0, x17]
    // 0xabb8dc: DecompressPointer r1
    //     0xabb8dc: add             x1, x1, HEAP, lsl #32
    // 0xabb8e0: r0 = LoadClassIdInstr(r1)
    //     0xabb8e0: ldur            x0, [x1, #-1]
    //     0xabb8e4: ubfx            x0, x0, #0xc, #0x14
    // 0xabb8e8: r2 = "prisonChallenge"
    //     0xabb8e8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb8ec: ldr             x2, [x2, #0x30]
    // 0xabb8f0: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb8f0: sub             lr, x0, #0xb4
    //     0xabb8f4: ldr             lr, [x21, lr, lsl #3]
    //     0xabb8f8: blr             lr
    // 0xabb8fc: r1 = 59
    //     0xabb8fc: movz            x1, #0x3b
    // 0xabb900: branchIfSmi(r0, 0xabb90c)
    //     0xabb900: tbz             w0, #0, #0xabb90c
    // 0xabb904: r1 = LoadClassIdInstr(r0)
    //     0xabb904: ldur            x1, [x0, #-1]
    //     0xabb908: ubfx            x1, x1, #0xc, #0x14
    // 0xabb90c: r16 = "1s"
    //     0xabb90c: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f070] "1s"
    //     0xabb910: ldr             x16, [x16, #0x70]
    // 0xabb914: stp             x16, x0, [SP]
    // 0xabb918: mov             x0, x1
    // 0xabb91c: mov             lr, x0
    // 0xabb920: ldr             lr, [x21, lr, lsl #3]
    // 0xabb924: blr             lr
    // 0xabb928: tbnz            w0, #4, #0xabb9a8
    // 0xabb92c: r1 = Null
    //     0xabb92c: mov             x1, NULL
    // 0xabb930: r2 = 16
    //     0xabb930: movz            x2, #0x10
    // 0xabb934: r0 = AllocateArray()
    //     0xabb934: bl              #0x1502560  ; AllocateArrayStub
    // 0xabb938: r17 = "EN"
    //     0xabb938: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabb93c: ldr             x17, [x17, #0xb58]
    // 0xabb940: StoreField: r0->field_f = r17
    //     0xabb940: stur            w17, [x0, #0xf]
    // 0xabb944: r17 = "You feel dizzy...you will battle with only 1 second reaction time!"
    //     0xabb944: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f078] "You feel dizzy...you will battle with only 1 second reaction time!"
    //     0xabb948: ldr             x17, [x17, #0x78]
    // 0xabb94c: StoreField: r0->field_13 = r17
    //     0xabb94c: stur            w17, [x0, #0x13]
    // 0xabb950: r17 = "CN"
    //     0xabb950: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabb954: ldr             x17, [x17, #0xb30]
    // 0xabb958: ArrayStore: r0[0] = r17  ; List_4
    //     0xabb958: stur            w17, [x0, #0x17]
    // 0xabb95c: r17 = "你觉得很昏眩. . .你的回球时间将会限制在1秒！"
    //     0xabb95c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f080] "你觉得很昏眩. . .你的回球时间将会限制在1秒！"
    //     0xabb960: ldr             x17, [x17, #0x80]
    // 0xabb964: StoreField: r0->field_1b = r17
    //     0xabb964: stur            w17, [x0, #0x1b]
    // 0xabb968: r17 = "TW"
    //     0xabb968: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabb96c: ldr             x17, [x17, #0xb40]
    // 0xabb970: StoreField: r0->field_1f = r17
    //     0xabb970: stur            w17, [x0, #0x1f]
    // 0xabb974: r17 = "你覺得很昏眩. . .你的回球時間將會限制在1秒！"
    //     0xabb974: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f088] "你覺得很昏眩. . .你的回球時間將會限制在1秒！"
    //     0xabb978: ldr             x17, [x17, #0x88]
    // 0xabb97c: StoreField: r0->field_23 = r17
    //     0xabb97c: stur            w17, [x0, #0x23]
    // 0xabb980: r17 = "JP"
    //     0xabb980: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabb984: ldr             x17, [x17, #0xb50]
    // 0xabb988: StoreField: r0->field_27 = r17
    //     0xabb988: stur            w17, [x0, #0x27]
    // 0xabb98c: r17 = "今はめまいを感じる．．．反応時間がシャトルスピードによらず1秒で制限される状態で試合することになる！"
    //     0xabb98c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f090] "今はめまいを感じる．．．反応時間がシャトルスピードによらず1秒で制限される状態で試合することになる！"
    //     0xabb990: ldr             x17, [x17, #0x90]
    // 0xabb994: StoreField: r0->field_2b = r17
    //     0xabb994: stur            w17, [x0, #0x2b]
    // 0xabb998: stp             x0, NULL, [SP]
    // 0xabb99c: r0 = Map._fromLiteral()
    //     0xabb99c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabb9a0: mov             x3, x0
    // 0xabb9a4: b               #0xabb9ac
    // 0xabb9a8: ldur            x3, [fp, #-0x20]
    // 0xabb9ac: stur            x3, [fp, #-0x20]
    // 0xabb9b0: r0 = LoadStaticField(0xb54)
    //     0xabb9b0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabb9b4: ldr             x0, [x0, #0x16a8]
    // 0xabb9b8: cmp             w0, NULL
    // 0xabb9bc: b.ne            #0xabb9c8
    // 0xabb9c0: r0 = Null
    //     0xabb9c0: mov             x0, NULL
    // 0xabb9c4: b               #0xabb9f0
    // 0xabb9c8: r17 = 351
    //     0xabb9c8: movz            x17, #0x15f
    // 0xabb9cc: ldr             w1, [x0, x17]
    // 0xabb9d0: DecompressPointer r1
    //     0xabb9d0: add             x1, x1, HEAP, lsl #32
    // 0xabb9d4: r0 = LoadClassIdInstr(r1)
    //     0xabb9d4: ldur            x0, [x1, #-1]
    //     0xabb9d8: ubfx            x0, x0, #0xc, #0x14
    // 0xabb9dc: r2 = "prisonChallenge"
    //     0xabb9dc: add             x2, PP, #0x10, lsl #12  ; [pp+0x10030] "prisonChallenge"
    //     0xabb9e0: ldr             x2, [x2, #0x30]
    // 0xabb9e4: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabb9e4: sub             lr, x0, #0xb4
    //     0xabb9e8: ldr             lr, [x21, lr, lsl #3]
    //     0xabb9ec: blr             lr
    // 0xabb9f0: r1 = 59
    //     0xabb9f0: movz            x1, #0x3b
    // 0xabb9f4: branchIfSmi(r0, 0xabba00)
    //     0xabb9f4: tbz             w0, #0, #0xabba00
    // 0xabb9f8: r1 = LoadClassIdInstr(r0)
    //     0xabb9f8: ldur            x1, [x0, #-1]
    //     0xabb9fc: ubfx            x1, x1, #0xc, #0x14
    // 0xabba00: r16 = "0Endurance"
    //     0xabba00: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f098] "0Endurance"
    //     0xabba04: ldr             x16, [x16, #0x98]
    // 0xabba08: stp             x16, x0, [SP]
    // 0xabba0c: mov             x0, x1
    // 0xabba10: mov             lr, x0
    // 0xabba14: ldr             lr, [x21, lr, lsl #3]
    // 0xabba18: blr             lr
    // 0xabba1c: tbnz            w0, #4, #0xabba98
    // 0xabba20: r1 = Null
    //     0xabba20: mov             x1, NULL
    // 0xabba24: r2 = 16
    //     0xabba24: movz            x2, #0x10
    // 0xabba28: r0 = AllocateArray()
    //     0xabba28: bl              #0x1502560  ; AllocateArrayStub
    // 0xabba2c: r17 = "EN"
    //     0xabba2c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabba30: ldr             x17, [x17, #0xb58]
    // 0xabba34: StoreField: r0->field_f = r17
    //     0xabba34: stur            w17, [x0, #0xf]
    // 0xabba38: r17 = "You feel sick...your stamina won\'t recover in battle!"
    //     0xabba38: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0a0] "You feel sick...your stamina won\'t recover in battle!"
    //     0xabba3c: ldr             x17, [x17, #0xa0]
    // 0xabba40: StoreField: r0->field_13 = r17
    //     0xabba40: stur            w17, [x0, #0x13]
    // 0xabba44: r17 = "CN"
    //     0xabba44: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabba48: ldr             x17, [x17, #0xb30]
    // 0xabba4c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabba4c: stur            w17, [x0, #0x17]
    // 0xabba50: r17 = "你感到很不舒服. . .你在决斗中的体力将不会恢复！"
    //     0xabba50: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0a8] "你感到很不舒服. . .你在决斗中的体力将不会恢复！"
    //     0xabba54: ldr             x17, [x17, #0xa8]
    // 0xabba58: StoreField: r0->field_1b = r17
    //     0xabba58: stur            w17, [x0, #0x1b]
    // 0xabba5c: r17 = "TW"
    //     0xabba5c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabba60: ldr             x17, [x17, #0xb40]
    // 0xabba64: StoreField: r0->field_1f = r17
    //     0xabba64: stur            w17, [x0, #0x1f]
    // 0xabba68: r17 = "你感到很不舒服. . .你在決鬥中的體力將不會恢復！"
    //     0xabba68: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0b0] "你感到很不舒服. . .你在決鬥中的體力將不會恢復！"
    //     0xabba6c: ldr             x17, [x17, #0xb0]
    // 0xabba70: StoreField: r0->field_23 = r17
    //     0xabba70: stur            w17, [x0, #0x23]
    // 0xabba74: r17 = "JP"
    //     0xabba74: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabba78: ldr             x17, [x17, #0xb50]
    // 0xabba7c: StoreField: r0->field_27 = r17
    //     0xabba7c: stur            w17, [x0, #0x27]
    // 0xabba80: r17 = "今は気持ち悪く感じている．．．試合中に体力が回復できなくなる！"
    //     0xabba80: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0b8] "今は気持ち悪く感じている．．．試合中に体力が回復できなくなる！"
    //     0xabba84: ldr             x17, [x17, #0xb8]
    // 0xabba88: StoreField: r0->field_2b = r17
    //     0xabba88: stur            w17, [x0, #0x2b]
    // 0xabba8c: stp             x0, NULL, [SP]
    // 0xabba90: r0 = Map._fromLiteral()
    //     0xabba90: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabba94: b               #0xabe9c4
    // 0xabba98: ldur            x0, [fp, #-0x20]
    // 0xabba9c: b               #0xabe9c4
    // 0xabbaa0: ldur            x0, [fp, #-0x18]
    // 0xabbaa4: b               #0xabe9c4
    // 0xabbaa8: r16 = "minaDelivery"
    //     0xabbaa8: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f0c0] "minaDelivery"
    //     0xabbaac: ldr             x16, [x16, #0xc0]
    // 0xabbab0: ldur            lr, [fp, #-8]
    // 0xabbab4: stp             lr, x16, [SP]
    // 0xabbab8: r0 = ==()
    //     0xabbab8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabbabc: tbnz            w0, #4, #0xabbc94
    // 0xabbac0: r1 = Null
    //     0xabbac0: mov             x1, NULL
    // 0xabbac4: r2 = 16
    //     0xabbac4: movz            x2, #0x10
    // 0xabbac8: r0 = AllocateArray()
    //     0xabbac8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbacc: r17 = "EN"
    //     0xabbacc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabbad0: ldr             x17, [x17, #0xb58]
    // 0xabbad4: StoreField: r0->field_f = r17
    //     0xabbad4: stur            w17, [x0, #0xf]
    // 0xabbad8: r17 = "Mina in Dodohill."
    //     0xabbad8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0c8] "Mina in Dodohill."
    //     0xabbadc: ldr             x17, [x17, #0xc8]
    // 0xabbae0: StoreField: r0->field_13 = r17
    //     0xabbae0: stur            w17, [x0, #0x13]
    // 0xabbae4: r17 = "CN"
    //     0xabbae4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabbae8: ldr             x17, [x17, #0xb30]
    // 0xabbaec: ArrayStore: r0[0] = r17  ; List_4
    //     0xabbaec: stur            w17, [x0, #0x17]
    // 0xabbaf0: r17 = "多多高原里的未依名。"
    //     0xabbaf0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0d0] "多多高原里的未依名。"
    //     0xabbaf4: ldr             x17, [x17, #0xd0]
    // 0xabbaf8: StoreField: r0->field_1b = r17
    //     0xabbaf8: stur            w17, [x0, #0x1b]
    // 0xabbafc: r17 = "TW"
    //     0xabbafc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabbb00: ldr             x17, [x17, #0xb40]
    // 0xabbb04: StoreField: r0->field_1f = r17
    //     0xabbb04: stur            w17, [x0, #0x1f]
    // 0xabbb08: r17 = "多多高原裡的未依名。"
    //     0xabbb08: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0d8] "多多高原裡的未依名。"
    //     0xabbb0c: ldr             x17, [x17, #0xd8]
    // 0xabbb10: StoreField: r0->field_23 = r17
    //     0xabbb10: stur            w17, [x0, #0x23]
    // 0xabbb14: r17 = "JP"
    //     0xabbb14: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabbb18: ldr             x17, [x17, #0xb50]
    // 0xabbb1c: StoreField: r0->field_27 = r17
    //     0xabbb1c: stur            w17, [x0, #0x27]
    // 0xabbb20: r17 = "ドド高原にいるミイナまでお届けください。"
    //     0xabbb20: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0e0] "ドド高原にいるミイナまでお届けください。"
    //     0xabbb24: ldr             x17, [x17, #0xe0]
    // 0xabbb28: StoreField: r0->field_2b = r17
    //     0xabbb28: stur            w17, [x0, #0x2b]
    // 0xabbb2c: stp             x0, NULL, [SP]
    // 0xabbb30: r0 = Map._fromLiteral()
    //     0xabbb30: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabbb34: mov             x3, x0
    // 0xabbb38: stur            x3, [fp, #-0x18]
    // 0xabbb3c: r0 = LoadStaticField(0xb54)
    //     0xabbb3c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabbb40: ldr             x0, [x0, #0x16a8]
    // 0xabbb44: cmp             w0, NULL
    // 0xabbb48: b.ne            #0xabbb54
    // 0xabbb4c: r0 = Null
    //     0xabbb4c: mov             x0, NULL
    // 0xabbb50: b               #0xabbb7c
    // 0xabbb54: r17 = 327
    //     0xabbb54: movz            x17, #0x147
    // 0xabbb58: ldr             w1, [x0, x17]
    // 0xabbb5c: DecompressPointer r1
    //     0xabbb5c: add             x1, x1, HEAP, lsl #32
    // 0xabbb60: r0 = LoadClassIdInstr(r1)
    //     0xabbb60: ldur            x0, [x1, #-1]
    //     0xabbb64: ubfx            x0, x0, #0xc, #0x14
    // 0xabbb68: r2 = "storyYukiComa.1"
    //     0xabbb68: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f0e8] "storyYukiComa.1"
    //     0xabbb6c: ldr             x2, [x2, #0xe8]
    // 0xabbb70: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabbb70: sub             lr, x0, #0xb4
    //     0xabbb74: ldr             lr, [x21, lr, lsl #3]
    //     0xabbb78: blr             lr
    // 0xabbb7c: r1 = 59
    //     0xabbb7c: movz            x1, #0x3b
    // 0xabbb80: branchIfSmi(r0, 0xabbb8c)
    //     0xabbb80: tbz             w0, #0, #0xabbb8c
    // 0xabbb84: r1 = LoadClassIdInstr(r0)
    //     0xabbb84: ldur            x1, [x0, #-1]
    //     0xabbb88: ubfx            x1, x1, #0xc, #0x14
    // 0xabbb8c: r16 = true
    //     0xabbb8c: add             x16, NULL, #0x20  ; true
    // 0xabbb90: stp             x16, x0, [SP]
    // 0xabbb94: mov             x0, x1
    // 0xabbb98: mov             lr, x0
    // 0xabbb9c: ldr             lr, [x21, lr, lsl #3]
    // 0xabbba0: blr             lr
    // 0xabbba4: tbz             w0, #4, #0xabbc14
    // 0xabbba8: r0 = LoadStaticField(0xb54)
    //     0xabbba8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabbbac: ldr             x0, [x0, #0x16a8]
    // 0xabbbb0: cmp             w0, NULL
    // 0xabbbb4: b.ne            #0xabbbc0
    // 0xabbbb8: r0 = Null
    //     0xabbbb8: mov             x0, NULL
    // 0xabbbbc: b               #0xabbbe8
    // 0xabbbc0: r17 = 327
    //     0xabbbc0: movz            x17, #0x147
    // 0xabbbc4: ldr             w1, [x0, x17]
    // 0xabbbc8: DecompressPointer r1
    //     0xabbbc8: add             x1, x1, HEAP, lsl #32
    // 0xabbbcc: r0 = LoadClassIdInstr(r1)
    //     0xabbbcc: ldur            x0, [x1, #-1]
    //     0xabbbd0: ubfx            x0, x0, #0xc, #0x14
    // 0xabbbd4: r2 = "storyJimaPrison"
    //     0xabbbd4: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc38] "storyJimaPrison"
    //     0xabbbd8: ldr             x2, [x2, #0xc38]
    // 0xabbbdc: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabbbdc: sub             lr, x0, #0xb4
    //     0xabbbe0: ldr             lr, [x21, lr, lsl #3]
    //     0xabbbe4: blr             lr
    // 0xabbbe8: r1 = 59
    //     0xabbbe8: movz            x1, #0x3b
    // 0xabbbec: branchIfSmi(r0, 0xabbbf8)
    //     0xabbbec: tbz             w0, #0, #0xabbbf8
    // 0xabbbf0: r1 = LoadClassIdInstr(r0)
    //     0xabbbf0: ldur            x1, [x0, #-1]
    //     0xabbbf4: ubfx            x1, x1, #0xc, #0x14
    // 0xabbbf8: r16 = true
    //     0xabbbf8: add             x16, NULL, #0x20  ; true
    // 0xabbbfc: stp             x16, x0, [SP]
    // 0xabbc00: mov             x0, x1
    // 0xabbc04: mov             lr, x0
    // 0xabbc08: ldr             lr, [x21, lr, lsl #3]
    // 0xabbc0c: blr             lr
    // 0xabbc10: tbnz            w0, #4, #0xabbc8c
    // 0xabbc14: r1 = Null
    //     0xabbc14: mov             x1, NULL
    // 0xabbc18: r2 = 16
    //     0xabbc18: movz            x2, #0x10
    // 0xabbc1c: r0 = AllocateArray()
    //     0xabbc1c: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbc20: r17 = "EN"
    //     0xabbc20: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabbc24: ldr             x17, [x17, #0xb58]
    // 0xabbc28: StoreField: r0->field_f = r17
    //     0xabbc28: stur            w17, [x0, #0xf]
    // 0xabbc2c: r17 = "Mina in Scholar Town."
    //     0xabbc2c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0f0] "Mina in Scholar Town."
    //     0xabbc30: ldr             x17, [x17, #0xf0]
    // 0xabbc34: StoreField: r0->field_13 = r17
    //     0xabbc34: stur            w17, [x0, #0x13]
    // 0xabbc38: r17 = "CN"
    //     0xabbc38: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabbc3c: ldr             x17, [x17, #0xb30]
    // 0xabbc40: ArrayStore: r0[0] = r17  ; List_4
    //     0xabbc40: stur            w17, [x0, #0x17]
    // 0xabbc44: r17 = "学士镇里的未依名。"
    //     0xabbc44: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f0f8] "学士镇里的未依名。"
    //     0xabbc48: ldr             x17, [x17, #0xf8]
    // 0xabbc4c: StoreField: r0->field_1b = r17
    //     0xabbc4c: stur            w17, [x0, #0x1b]
    // 0xabbc50: r17 = "TW"
    //     0xabbc50: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabbc54: ldr             x17, [x17, #0xb40]
    // 0xabbc58: StoreField: r0->field_1f = r17
    //     0xabbc58: stur            w17, [x0, #0x1f]
    // 0xabbc5c: r17 = "學士鎮裡的未依名。"
    //     0xabbc5c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f100] "學士鎮裡的未依名。"
    //     0xabbc60: ldr             x17, [x17, #0x100]
    // 0xabbc64: StoreField: r0->field_23 = r17
    //     0xabbc64: stur            w17, [x0, #0x23]
    // 0xabbc68: r17 = "JP"
    //     0xabbc68: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabbc6c: ldr             x17, [x17, #0xb50]
    // 0xabbc70: StoreField: r0->field_27 = r17
    //     0xabbc70: stur            w17, [x0, #0x27]
    // 0xabbc74: r17 = "学士町にいるミイナまでお届けください。"
    //     0xabbc74: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f108] "学士町にいるミイナまでお届けください。"
    //     0xabbc78: ldr             x17, [x17, #0x108]
    // 0xabbc7c: StoreField: r0->field_2b = r17
    //     0xabbc7c: stur            w17, [x0, #0x2b]
    // 0xabbc80: stp             x0, NULL, [SP]
    // 0xabbc84: r0 = Map._fromLiteral()
    //     0xabbc84: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabbc88: b               #0xabe9c4
    // 0xabbc8c: ldur            x0, [fp, #-0x18]
    // 0xabbc90: b               #0xabe9c4
    // 0xabbc94: r16 = "minaDelivery2"
    //     0xabbc94: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f110] "minaDelivery2"
    //     0xabbc98: ldr             x16, [x16, #0x110]
    // 0xabbc9c: ldur            lr, [fp, #-8]
    // 0xabbca0: stp             lr, x16, [SP]
    // 0xabbca4: r0 = ==()
    //     0xabbca4: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabbca8: tbnz            w0, #4, #0xabbe80
    // 0xabbcac: r1 = Null
    //     0xabbcac: mov             x1, NULL
    // 0xabbcb0: r2 = 16
    //     0xabbcb0: movz            x2, #0x10
    // 0xabbcb4: r0 = AllocateArray()
    //     0xabbcb4: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbcb8: r17 = "EN"
    //     0xabbcb8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabbcbc: ldr             x17, [x17, #0xb58]
    // 0xabbcc0: StoreField: r0->field_f = r17
    //     0xabbcc0: stur            w17, [x0, #0xf]
    // 0xabbcc4: r17 = "Send the parcels to Mina at Dodohill."
    //     0xabbcc4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f118] "Send the parcels to Mina at Dodohill."
    //     0xabbcc8: ldr             x17, [x17, #0x118]
    // 0xabbccc: StoreField: r0->field_13 = r17
    //     0xabbccc: stur            w17, [x0, #0x13]
    // 0xabbcd0: r17 = "CN"
    //     0xabbcd0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabbcd4: ldr             x17, [x17, #0xb30]
    // 0xabbcd8: ArrayStore: r0[0] = r17  ; List_4
    //     0xabbcd8: stur            w17, [x0, #0x17]
    // 0xabbcdc: r17 = "帮忙将包裹寄给多多高原的未依名。"
    //     0xabbcdc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f120] "帮忙将包裹寄给多多高原的未依名。"
    //     0xabbce0: ldr             x17, [x17, #0x120]
    // 0xabbce4: StoreField: r0->field_1b = r17
    //     0xabbce4: stur            w17, [x0, #0x1b]
    // 0xabbce8: r17 = "TW"
    //     0xabbce8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabbcec: ldr             x17, [x17, #0xb40]
    // 0xabbcf0: StoreField: r0->field_1f = r17
    //     0xabbcf0: stur            w17, [x0, #0x1f]
    // 0xabbcf4: r17 = "幫忙將包裹寄給多多高原的未依名。"
    //     0xabbcf4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f128] "幫忙將包裹寄給多多高原的未依名。"
    //     0xabbcf8: ldr             x17, [x17, #0x128]
    // 0xabbcfc: StoreField: r0->field_23 = r17
    //     0xabbcfc: stur            w17, [x0, #0x23]
    // 0xabbd00: r17 = "JP"
    //     0xabbd00: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabbd04: ldr             x17, [x17, #0xb50]
    // 0xabbd08: StoreField: r0->field_27 = r17
    //     0xabbd08: stur            w17, [x0, #0x27]
    // 0xabbd0c: r17 = "注文をドド高原にいるミイナへお届けください。"
    //     0xabbd0c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f130] "注文をドド高原にいるミイナへお届けください。"
    //     0xabbd10: ldr             x17, [x17, #0x130]
    // 0xabbd14: StoreField: r0->field_2b = r17
    //     0xabbd14: stur            w17, [x0, #0x2b]
    // 0xabbd18: stp             x0, NULL, [SP]
    // 0xabbd1c: r0 = Map._fromLiteral()
    //     0xabbd1c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabbd20: mov             x3, x0
    // 0xabbd24: stur            x3, [fp, #-0x18]
    // 0xabbd28: r0 = LoadStaticField(0xb54)
    //     0xabbd28: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabbd2c: ldr             x0, [x0, #0x16a8]
    // 0xabbd30: cmp             w0, NULL
    // 0xabbd34: b.ne            #0xabbd40
    // 0xabbd38: r0 = Null
    //     0xabbd38: mov             x0, NULL
    // 0xabbd3c: b               #0xabbd68
    // 0xabbd40: r17 = 327
    //     0xabbd40: movz            x17, #0x147
    // 0xabbd44: ldr             w1, [x0, x17]
    // 0xabbd48: DecompressPointer r1
    //     0xabbd48: add             x1, x1, HEAP, lsl #32
    // 0xabbd4c: r0 = LoadClassIdInstr(r1)
    //     0xabbd4c: ldur            x0, [x1, #-1]
    //     0xabbd50: ubfx            x0, x0, #0xc, #0x14
    // 0xabbd54: r2 = "storyYukiComa.1"
    //     0xabbd54: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f0e8] "storyYukiComa.1"
    //     0xabbd58: ldr             x2, [x2, #0xe8]
    // 0xabbd5c: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabbd5c: sub             lr, x0, #0xb4
    //     0xabbd60: ldr             lr, [x21, lr, lsl #3]
    //     0xabbd64: blr             lr
    // 0xabbd68: r1 = 59
    //     0xabbd68: movz            x1, #0x3b
    // 0xabbd6c: branchIfSmi(r0, 0xabbd78)
    //     0xabbd6c: tbz             w0, #0, #0xabbd78
    // 0xabbd70: r1 = LoadClassIdInstr(r0)
    //     0xabbd70: ldur            x1, [x0, #-1]
    //     0xabbd74: ubfx            x1, x1, #0xc, #0x14
    // 0xabbd78: r16 = true
    //     0xabbd78: add             x16, NULL, #0x20  ; true
    // 0xabbd7c: stp             x16, x0, [SP]
    // 0xabbd80: mov             x0, x1
    // 0xabbd84: mov             lr, x0
    // 0xabbd88: ldr             lr, [x21, lr, lsl #3]
    // 0xabbd8c: blr             lr
    // 0xabbd90: tbz             w0, #4, #0xabbe00
    // 0xabbd94: r0 = LoadStaticField(0xb54)
    //     0xabbd94: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabbd98: ldr             x0, [x0, #0x16a8]
    // 0xabbd9c: cmp             w0, NULL
    // 0xabbda0: b.ne            #0xabbdac
    // 0xabbda4: r0 = Null
    //     0xabbda4: mov             x0, NULL
    // 0xabbda8: b               #0xabbdd4
    // 0xabbdac: r17 = 327
    //     0xabbdac: movz            x17, #0x147
    // 0xabbdb0: ldr             w1, [x0, x17]
    // 0xabbdb4: DecompressPointer r1
    //     0xabbdb4: add             x1, x1, HEAP, lsl #32
    // 0xabbdb8: r0 = LoadClassIdInstr(r1)
    //     0xabbdb8: ldur            x0, [x1, #-1]
    //     0xabbdbc: ubfx            x0, x0, #0xc, #0x14
    // 0xabbdc0: r2 = "storyJimaPrison"
    //     0xabbdc0: add             x2, PP, #0xf, lsl #12  ; [pp+0xfc38] "storyJimaPrison"
    //     0xabbdc4: ldr             x2, [x2, #0xc38]
    // 0xabbdc8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabbdc8: sub             lr, x0, #0xb4
    //     0xabbdcc: ldr             lr, [x21, lr, lsl #3]
    //     0xabbdd0: blr             lr
    // 0xabbdd4: r1 = 59
    //     0xabbdd4: movz            x1, #0x3b
    // 0xabbdd8: branchIfSmi(r0, 0xabbde4)
    //     0xabbdd8: tbz             w0, #0, #0xabbde4
    // 0xabbddc: r1 = LoadClassIdInstr(r0)
    //     0xabbddc: ldur            x1, [x0, #-1]
    //     0xabbde0: ubfx            x1, x1, #0xc, #0x14
    // 0xabbde4: r16 = true
    //     0xabbde4: add             x16, NULL, #0x20  ; true
    // 0xabbde8: stp             x16, x0, [SP]
    // 0xabbdec: mov             x0, x1
    // 0xabbdf0: mov             lr, x0
    // 0xabbdf4: ldr             lr, [x21, lr, lsl #3]
    // 0xabbdf8: blr             lr
    // 0xabbdfc: tbnz            w0, #4, #0xabbe78
    // 0xabbe00: r1 = Null
    //     0xabbe00: mov             x1, NULL
    // 0xabbe04: r2 = 16
    //     0xabbe04: movz            x2, #0x10
    // 0xabbe08: r0 = AllocateArray()
    //     0xabbe08: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbe0c: r17 = "EN"
    //     0xabbe0c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabbe10: ldr             x17, [x17, #0xb58]
    // 0xabbe14: StoreField: r0->field_f = r17
    //     0xabbe14: stur            w17, [x0, #0xf]
    // 0xabbe18: r17 = "Send the parcels to Mina at Scholar Town."
    //     0xabbe18: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f138] "Send the parcels to Mina at Scholar Town."
    //     0xabbe1c: ldr             x17, [x17, #0x138]
    // 0xabbe20: StoreField: r0->field_13 = r17
    //     0xabbe20: stur            w17, [x0, #0x13]
    // 0xabbe24: r17 = "CN"
    //     0xabbe24: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabbe28: ldr             x17, [x17, #0xb30]
    // 0xabbe2c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabbe2c: stur            w17, [x0, #0x17]
    // 0xabbe30: r17 = "帮忙将包裹寄给学士镇的未依名。"
    //     0xabbe30: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f140] "帮忙将包裹寄给学士镇的未依名。"
    //     0xabbe34: ldr             x17, [x17, #0x140]
    // 0xabbe38: StoreField: r0->field_1b = r17
    //     0xabbe38: stur            w17, [x0, #0x1b]
    // 0xabbe3c: r17 = "TW"
    //     0xabbe3c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabbe40: ldr             x17, [x17, #0xb40]
    // 0xabbe44: StoreField: r0->field_1f = r17
    //     0xabbe44: stur            w17, [x0, #0x1f]
    // 0xabbe48: r17 = "幫忙將包裹寄給學士鎮的未依名。"
    //     0xabbe48: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f148] "幫忙將包裹寄給學士鎮的未依名。"
    //     0xabbe4c: ldr             x17, [x17, #0x148]
    // 0xabbe50: StoreField: r0->field_23 = r17
    //     0xabbe50: stur            w17, [x0, #0x23]
    // 0xabbe54: r17 = "JP"
    //     0xabbe54: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabbe58: ldr             x17, [x17, #0xb50]
    // 0xabbe5c: StoreField: r0->field_27 = r17
    //     0xabbe5c: stur            w17, [x0, #0x27]
    // 0xabbe60: r17 = "注文を学士町にいるミイナへお届けください。"
    //     0xabbe60: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f150] "注文を学士町にいるミイナへお届けください。"
    //     0xabbe64: ldr             x17, [x17, #0x150]
    // 0xabbe68: StoreField: r0->field_2b = r17
    //     0xabbe68: stur            w17, [x0, #0x2b]
    // 0xabbe6c: stp             x0, NULL, [SP]
    // 0xabbe70: r0 = Map._fromLiteral()
    //     0xabbe70: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabbe74: b               #0xabe9c4
    // 0xabbe78: ldur            x0, [fp, #-0x18]
    // 0xabbe7c: b               #0xabe9c4
    // 0xabbe80: r16 = "fakeName"
    //     0xabbe80: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f158] "fakeName"
    //     0xabbe84: ldr             x16, [x16, #0x158]
    // 0xabbe88: ldur            lr, [fp, #-8]
    // 0xabbe8c: stp             lr, x16, [SP]
    // 0xabbe90: r0 = ==()
    //     0xabbe90: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabbe94: tbnz            w0, #4, #0xabca28
    // 0xabbe98: r1 = Null
    //     0xabbe98: mov             x1, NULL
    // 0xabbe9c: r2 = 16
    //     0xabbe9c: movz            x2, #0x10
    // 0xabbea0: r0 = AllocateArray()
    //     0xabbea0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbea4: stur            x0, [fp, #-0x20]
    // 0xabbea8: r17 = "EN"
    //     0xabbea8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabbeac: ldr             x17, [x17, #0xb58]
    // 0xabbeb0: StoreField: r0->field_f = r17
    //     0xabbeb0: stur            w17, [x0, #0xf]
    // 0xabbeb4: r1 = LoadStaticField(0xb54)
    //     0xabbeb4: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabbeb8: ldr             x1, [x1, #0x16a8]
    // 0xabbebc: cmp             w1, NULL
    // 0xabbec0: b.ne            #0xabbecc
    // 0xabbec4: r1 = Null
    //     0xabbec4: mov             x1, NULL
    // 0xabbec8: b               #0xabbed8
    // 0xabbecc: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabbecc: ldur            w2, [x1, #0x17]
    // 0xabbed0: DecompressPointer r2
    //     0xabbed0: add             x2, x2, HEAP, lsl #32
    // 0xabbed4: mov             x1, x2
    // 0xabbed8: cmp             w1, NULL
    // 0xabbedc: b.ne            #0xabbee8
    // 0xabbee0: r3 = ""
    //     0xabbee0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabbee4: b               #0xabbeec
    // 0xabbee8: mov             x3, x1
    // 0xabbeec: stur            x3, [fp, #-0x18]
    // 0xabbef0: r1 = Null
    //     0xabbef0: mov             x1, NULL
    // 0xabbef4: r2 = 4
    //     0xabbef4: movz            x2, #0x4
    // 0xabbef8: r0 = AllocateArray()
    //     0xabbef8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbefc: mov             x1, x0
    // 0xabbf00: ldur            x0, [fp, #-0x18]
    // 0xabbf04: StoreField: r1->field_f = r0
    //     0xabbf04: stur            w0, [x1, #0xf]
    // 0xabbf08: r17 = "ia"
    //     0xabbf08: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f160] "ia"
    //     0xabbf0c: ldr             x17, [x17, #0x160]
    // 0xabbf10: StoreField: r1->field_13 = r17
    //     0xabbf10: stur            w17, [x1, #0x13]
    // 0xabbf14: str             x1, [SP]
    // 0xabbf18: r0 = _interpolate()
    //     0xabbf18: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabbf1c: ldur            x1, [fp, #-0x20]
    // 0xabbf20: ArrayStore: r1[1] = r0  ; List_4
    //     0xabbf20: add             x25, x1, #0x13
    //     0xabbf24: str             w0, [x25]
    //     0xabbf28: tbz             w0, #0, #0xabbf44
    //     0xabbf2c: ldurb           w16, [x1, #-1]
    //     0xabbf30: ldurb           w17, [x0, #-1]
    //     0xabbf34: and             x16, x17, x16, lsr #2
    //     0xabbf38: tst             x16, HEAP, lsr #32
    //     0xabbf3c: b.eq            #0xabbf44
    //     0xabbf40: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabbf44: ldur            x0, [fp, #-0x20]
    // 0xabbf48: r17 = "CN"
    //     0xabbf48: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabbf4c: ldr             x17, [x17, #0xb30]
    // 0xabbf50: ArrayStore: r0[0] = r17  ; List_4
    //     0xabbf50: stur            w17, [x0, #0x17]
    // 0xabbf54: r1 = LoadStaticField(0xb54)
    //     0xabbf54: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabbf58: ldr             x1, [x1, #0x16a8]
    // 0xabbf5c: cmp             w1, NULL
    // 0xabbf60: b.ne            #0xabbf6c
    // 0xabbf64: r1 = Null
    //     0xabbf64: mov             x1, NULL
    // 0xabbf68: b               #0xabbf78
    // 0xabbf6c: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabbf6c: ldur            w2, [x1, #0x17]
    // 0xabbf70: DecompressPointer r2
    //     0xabbf70: add             x2, x2, HEAP, lsl #32
    // 0xabbf74: mov             x1, x2
    // 0xabbf78: cmp             w1, NULL
    // 0xabbf7c: b.ne            #0xabbf88
    // 0xabbf80: r3 = ""
    //     0xabbf80: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabbf84: b               #0xabbf8c
    // 0xabbf88: mov             x3, x1
    // 0xabbf8c: stur            x3, [fp, #-0x18]
    // 0xabbf90: r1 = Null
    //     0xabbf90: mov             x1, NULL
    // 0xabbf94: r2 = 4
    //     0xabbf94: movz            x2, #0x4
    // 0xabbf98: r0 = AllocateArray()
    //     0xabbf98: bl              #0x1502560  ; AllocateArrayStub
    // 0xabbf9c: mov             x1, x0
    // 0xabbfa0: ldur            x0, [fp, #-0x18]
    // 0xabbfa4: StoreField: r1->field_f = r0
    //     0xabbfa4: stur            w0, [x1, #0xf]
    // 0xabbfa8: r17 = "子"
    //     0xabbfa8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f168] "子"
    //     0xabbfac: ldr             x17, [x17, #0x168]
    // 0xabbfb0: StoreField: r1->field_13 = r17
    //     0xabbfb0: stur            w17, [x1, #0x13]
    // 0xabbfb4: str             x1, [SP]
    // 0xabbfb8: r0 = _interpolate()
    //     0xabbfb8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabbfbc: ldur            x1, [fp, #-0x20]
    // 0xabbfc0: ArrayStore: r1[3] = r0  ; List_4
    //     0xabbfc0: add             x25, x1, #0x1b
    //     0xabbfc4: str             w0, [x25]
    //     0xabbfc8: tbz             w0, #0, #0xabbfe4
    //     0xabbfcc: ldurb           w16, [x1, #-1]
    //     0xabbfd0: ldurb           w17, [x0, #-1]
    //     0xabbfd4: and             x16, x17, x16, lsr #2
    //     0xabbfd8: tst             x16, HEAP, lsr #32
    //     0xabbfdc: b.eq            #0xabbfe4
    //     0xabbfe0: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabbfe4: ldur            x0, [fp, #-0x20]
    // 0xabbfe8: r17 = "TW"
    //     0xabbfe8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabbfec: ldr             x17, [x17, #0xb40]
    // 0xabbff0: StoreField: r0->field_1f = r17
    //     0xabbff0: stur            w17, [x0, #0x1f]
    // 0xabbff4: r1 = LoadStaticField(0xb54)
    //     0xabbff4: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabbff8: ldr             x1, [x1, #0x16a8]
    // 0xabbffc: cmp             w1, NULL
    // 0xabc000: b.ne            #0xabc00c
    // 0xabc004: r1 = Null
    //     0xabc004: mov             x1, NULL
    // 0xabc008: b               #0xabc018
    // 0xabc00c: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc00c: ldur            w2, [x1, #0x17]
    // 0xabc010: DecompressPointer r2
    //     0xabc010: add             x2, x2, HEAP, lsl #32
    // 0xabc014: mov             x1, x2
    // 0xabc018: cmp             w1, NULL
    // 0xabc01c: b.ne            #0xabc028
    // 0xabc020: r3 = ""
    //     0xabc020: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc024: b               #0xabc02c
    // 0xabc028: mov             x3, x1
    // 0xabc02c: stur            x3, [fp, #-0x18]
    // 0xabc030: r1 = Null
    //     0xabc030: mov             x1, NULL
    // 0xabc034: r2 = 4
    //     0xabc034: movz            x2, #0x4
    // 0xabc038: r0 = AllocateArray()
    //     0xabc038: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc03c: mov             x1, x0
    // 0xabc040: ldur            x0, [fp, #-0x18]
    // 0xabc044: StoreField: r1->field_f = r0
    //     0xabc044: stur            w0, [x1, #0xf]
    // 0xabc048: r17 = "子"
    //     0xabc048: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f168] "子"
    //     0xabc04c: ldr             x17, [x17, #0x168]
    // 0xabc050: StoreField: r1->field_13 = r17
    //     0xabc050: stur            w17, [x1, #0x13]
    // 0xabc054: str             x1, [SP]
    // 0xabc058: r0 = _interpolate()
    //     0xabc058: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc05c: ldur            x1, [fp, #-0x20]
    // 0xabc060: ArrayStore: r1[5] = r0  ; List_4
    //     0xabc060: add             x25, x1, #0x23
    //     0xabc064: str             w0, [x25]
    //     0xabc068: tbz             w0, #0, #0xabc084
    //     0xabc06c: ldurb           w16, [x1, #-1]
    //     0xabc070: ldurb           w17, [x0, #-1]
    //     0xabc074: and             x16, x17, x16, lsr #2
    //     0xabc078: tst             x16, HEAP, lsr #32
    //     0xabc07c: b.eq            #0xabc084
    //     0xabc080: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc084: ldur            x0, [fp, #-0x20]
    // 0xabc088: r17 = "JP"
    //     0xabc088: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabc08c: ldr             x17, [x17, #0xb50]
    // 0xabc090: StoreField: r0->field_27 = r17
    //     0xabc090: stur            w17, [x0, #0x27]
    // 0xabc094: r1 = LoadStaticField(0xb54)
    //     0xabc094: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc098: ldr             x1, [x1, #0x16a8]
    // 0xabc09c: cmp             w1, NULL
    // 0xabc0a0: b.ne            #0xabc0ac
    // 0xabc0a4: r1 = Null
    //     0xabc0a4: mov             x1, NULL
    // 0xabc0a8: b               #0xabc0b8
    // 0xabc0ac: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc0ac: ldur            w2, [x1, #0x17]
    // 0xabc0b0: DecompressPointer r2
    //     0xabc0b0: add             x2, x2, HEAP, lsl #32
    // 0xabc0b4: mov             x1, x2
    // 0xabc0b8: cmp             w1, NULL
    // 0xabc0bc: b.ne            #0xabc0c8
    // 0xabc0c0: r3 = ""
    //     0xabc0c0: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc0c4: b               #0xabc0cc
    // 0xabc0c8: mov             x3, x1
    // 0xabc0cc: stur            x3, [fp, #-0x18]
    // 0xabc0d0: r1 = Null
    //     0xabc0d0: mov             x1, NULL
    // 0xabc0d4: r2 = 4
    //     0xabc0d4: movz            x2, #0x4
    // 0xabc0d8: r0 = AllocateArray()
    //     0xabc0d8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc0dc: mov             x1, x0
    // 0xabc0e0: ldur            x0, [fp, #-0x18]
    // 0xabc0e4: StoreField: r1->field_f = r0
    //     0xabc0e4: stur            w0, [x1, #0xf]
    // 0xabc0e8: r17 = "イア"
    //     0xabc0e8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f170] "イア"
    //     0xabc0ec: ldr             x17, [x17, #0x170]
    // 0xabc0f0: StoreField: r1->field_13 = r17
    //     0xabc0f0: stur            w17, [x1, #0x13]
    // 0xabc0f4: str             x1, [SP]
    // 0xabc0f8: r0 = _interpolate()
    //     0xabc0f8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc0fc: ldur            x1, [fp, #-0x20]
    // 0xabc100: ArrayStore: r1[7] = r0  ; List_4
    //     0xabc100: add             x25, x1, #0x2b
    //     0xabc104: str             w0, [x25]
    //     0xabc108: tbz             w0, #0, #0xabc124
    //     0xabc10c: ldurb           w16, [x1, #-1]
    //     0xabc110: ldurb           w17, [x0, #-1]
    //     0xabc114: and             x16, x17, x16, lsr #2
    //     0xabc118: tst             x16, HEAP, lsr #32
    //     0xabc11c: b.eq            #0xabc124
    //     0xabc120: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc124: ldur            x16, [fp, #-0x20]
    // 0xabc128: stp             x16, NULL, [SP]
    // 0xabc12c: r0 = Map._fromLiteral()
    //     0xabc12c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabc130: mov             x3, x0
    // 0xabc134: stur            x3, [fp, #-0x18]
    // 0xabc138: r0 = LoadStaticField(0xb54)
    //     0xabc138: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabc13c: ldr             x0, [x0, #0x16a8]
    // 0xabc140: cmp             w0, NULL
    // 0xabc144: b.ne            #0xabc150
    // 0xabc148: r0 = Null
    //     0xabc148: mov             x0, NULL
    // 0xabc14c: b               #0xabc178
    // 0xabc150: r17 = 347
    //     0xabc150: movz            x17, #0x15b
    // 0xabc154: ldr             w1, [x0, x17]
    // 0xabc158: DecompressPointer r1
    //     0xabc158: add             x1, x1, HEAP, lsl #32
    // 0xabc15c: r0 = LoadClassIdInstr(r1)
    //     0xabc15c: ldur            x0, [x1, #-1]
    //     0xabc160: ubfx            x0, x0, #0xc, #0x14
    // 0xabc164: r2 = "fakeName"
    //     0xabc164: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f158] "fakeName"
    //     0xabc168: ldr             x2, [x2, #0x158]
    // 0xabc16c: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabc16c: sub             lr, x0, #0xb4
    //     0xabc170: ldr             lr, [x21, lr, lsl #3]
    //     0xabc174: blr             lr
    // 0xabc178: r1 = 59
    //     0xabc178: movz            x1, #0x3b
    // 0xabc17c: branchIfSmi(r0, 0xabc188)
    //     0xabc17c: tbz             w0, #0, #0xabc188
    // 0xabc180: r1 = LoadClassIdInstr(r0)
    //     0xabc180: ldur            x1, [x0, #-1]
    //     0xabc184: ubfx            x1, x1, #0xc, #0x14
    // 0xabc188: stp             xzr, x0, [SP]
    // 0xabc18c: mov             x0, x1
    // 0xabc190: mov             lr, x0
    // 0xabc194: ldr             lr, [x21, lr, lsl #3]
    // 0xabc198: blr             lr
    // 0xabc19c: tbnz            w0, #4, #0xabc440
    // 0xabc1a0: r1 = Null
    //     0xabc1a0: mov             x1, NULL
    // 0xabc1a4: r2 = 16
    //     0xabc1a4: movz            x2, #0x10
    // 0xabc1a8: r0 = AllocateArray()
    //     0xabc1a8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc1ac: stur            x0, [fp, #-0x28]
    // 0xabc1b0: r17 = "EN"
    //     0xabc1b0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabc1b4: ldr             x17, [x17, #0xb58]
    // 0xabc1b8: StoreField: r0->field_f = r17
    //     0xabc1b8: stur            w17, [x0, #0xf]
    // 0xabc1bc: r1 = LoadStaticField(0xb54)
    //     0xabc1bc: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc1c0: ldr             x1, [x1, #0x16a8]
    // 0xabc1c4: cmp             w1, NULL
    // 0xabc1c8: b.ne            #0xabc1d4
    // 0xabc1cc: r1 = Null
    //     0xabc1cc: mov             x1, NULL
    // 0xabc1d0: b               #0xabc1e0
    // 0xabc1d4: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc1d4: ldur            w2, [x1, #0x17]
    // 0xabc1d8: DecompressPointer r2
    //     0xabc1d8: add             x2, x2, HEAP, lsl #32
    // 0xabc1dc: mov             x1, x2
    // 0xabc1e0: cmp             w1, NULL
    // 0xabc1e4: b.ne            #0xabc1f0
    // 0xabc1e8: r3 = ""
    //     0xabc1e8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc1ec: b               #0xabc1f4
    // 0xabc1f0: mov             x3, x1
    // 0xabc1f4: stur            x3, [fp, #-0x20]
    // 0xabc1f8: r1 = Null
    //     0xabc1f8: mov             x1, NULL
    // 0xabc1fc: r2 = 4
    //     0xabc1fc: movz            x2, #0x4
    // 0xabc200: r0 = AllocateArray()
    //     0xabc200: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc204: mov             x1, x0
    // 0xabc208: ldur            x0, [fp, #-0x20]
    // 0xabc20c: StoreField: r1->field_f = r0
    //     0xabc20c: stur            w0, [x1, #0xf]
    // 0xabc210: r17 = "ia"
    //     0xabc210: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f160] "ia"
    //     0xabc214: ldr             x17, [x17, #0x160]
    // 0xabc218: StoreField: r1->field_13 = r17
    //     0xabc218: stur            w17, [x1, #0x13]
    // 0xabc21c: str             x1, [SP]
    // 0xabc220: r0 = _interpolate()
    //     0xabc220: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc224: ldur            x1, [fp, #-0x28]
    // 0xabc228: ArrayStore: r1[1] = r0  ; List_4
    //     0xabc228: add             x25, x1, #0x13
    //     0xabc22c: str             w0, [x25]
    //     0xabc230: tbz             w0, #0, #0xabc24c
    //     0xabc234: ldurb           w16, [x1, #-1]
    //     0xabc238: ldurb           w17, [x0, #-1]
    //     0xabc23c: and             x16, x17, x16, lsr #2
    //     0xabc240: tst             x16, HEAP, lsr #32
    //     0xabc244: b.eq            #0xabc24c
    //     0xabc248: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc24c: ldur            x0, [fp, #-0x28]
    // 0xabc250: r17 = "CN"
    //     0xabc250: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabc254: ldr             x17, [x17, #0xb30]
    // 0xabc258: ArrayStore: r0[0] = r17  ; List_4
    //     0xabc258: stur            w17, [x0, #0x17]
    // 0xabc25c: r1 = LoadStaticField(0xb54)
    //     0xabc25c: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc260: ldr             x1, [x1, #0x16a8]
    // 0xabc264: cmp             w1, NULL
    // 0xabc268: b.ne            #0xabc274
    // 0xabc26c: r1 = Null
    //     0xabc26c: mov             x1, NULL
    // 0xabc270: b               #0xabc280
    // 0xabc274: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc274: ldur            w2, [x1, #0x17]
    // 0xabc278: DecompressPointer r2
    //     0xabc278: add             x2, x2, HEAP, lsl #32
    // 0xabc27c: mov             x1, x2
    // 0xabc280: cmp             w1, NULL
    // 0xabc284: b.ne            #0xabc290
    // 0xabc288: r3 = ""
    //     0xabc288: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc28c: b               #0xabc294
    // 0xabc290: mov             x3, x1
    // 0xabc294: stur            x3, [fp, #-0x20]
    // 0xabc298: r1 = Null
    //     0xabc298: mov             x1, NULL
    // 0xabc29c: r2 = 4
    //     0xabc29c: movz            x2, #0x4
    // 0xabc2a0: r0 = AllocateArray()
    //     0xabc2a0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc2a4: mov             x1, x0
    // 0xabc2a8: ldur            x0, [fp, #-0x20]
    // 0xabc2ac: StoreField: r1->field_f = r0
    //     0xabc2ac: stur            w0, [x1, #0xf]
    // 0xabc2b0: r17 = "子"
    //     0xabc2b0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f168] "子"
    //     0xabc2b4: ldr             x17, [x17, #0x168]
    // 0xabc2b8: StoreField: r1->field_13 = r17
    //     0xabc2b8: stur            w17, [x1, #0x13]
    // 0xabc2bc: str             x1, [SP]
    // 0xabc2c0: r0 = _interpolate()
    //     0xabc2c0: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc2c4: ldur            x1, [fp, #-0x28]
    // 0xabc2c8: ArrayStore: r1[3] = r0  ; List_4
    //     0xabc2c8: add             x25, x1, #0x1b
    //     0xabc2cc: str             w0, [x25]
    //     0xabc2d0: tbz             w0, #0, #0xabc2ec
    //     0xabc2d4: ldurb           w16, [x1, #-1]
    //     0xabc2d8: ldurb           w17, [x0, #-1]
    //     0xabc2dc: and             x16, x17, x16, lsr #2
    //     0xabc2e0: tst             x16, HEAP, lsr #32
    //     0xabc2e4: b.eq            #0xabc2ec
    //     0xabc2e8: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc2ec: ldur            x0, [fp, #-0x28]
    // 0xabc2f0: r17 = "TW"
    //     0xabc2f0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabc2f4: ldr             x17, [x17, #0xb40]
    // 0xabc2f8: StoreField: r0->field_1f = r17
    //     0xabc2f8: stur            w17, [x0, #0x1f]
    // 0xabc2fc: r1 = LoadStaticField(0xb54)
    //     0xabc2fc: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc300: ldr             x1, [x1, #0x16a8]
    // 0xabc304: cmp             w1, NULL
    // 0xabc308: b.ne            #0xabc314
    // 0xabc30c: r1 = Null
    //     0xabc30c: mov             x1, NULL
    // 0xabc310: b               #0xabc320
    // 0xabc314: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc314: ldur            w2, [x1, #0x17]
    // 0xabc318: DecompressPointer r2
    //     0xabc318: add             x2, x2, HEAP, lsl #32
    // 0xabc31c: mov             x1, x2
    // 0xabc320: cmp             w1, NULL
    // 0xabc324: b.ne            #0xabc330
    // 0xabc328: r3 = ""
    //     0xabc328: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc32c: b               #0xabc334
    // 0xabc330: mov             x3, x1
    // 0xabc334: stur            x3, [fp, #-0x20]
    // 0xabc338: r1 = Null
    //     0xabc338: mov             x1, NULL
    // 0xabc33c: r2 = 4
    //     0xabc33c: movz            x2, #0x4
    // 0xabc340: r0 = AllocateArray()
    //     0xabc340: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc344: mov             x1, x0
    // 0xabc348: ldur            x0, [fp, #-0x20]
    // 0xabc34c: StoreField: r1->field_f = r0
    //     0xabc34c: stur            w0, [x1, #0xf]
    // 0xabc350: r17 = "子"
    //     0xabc350: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f168] "子"
    //     0xabc354: ldr             x17, [x17, #0x168]
    // 0xabc358: StoreField: r1->field_13 = r17
    //     0xabc358: stur            w17, [x1, #0x13]
    // 0xabc35c: str             x1, [SP]
    // 0xabc360: r0 = _interpolate()
    //     0xabc360: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc364: ldur            x1, [fp, #-0x28]
    // 0xabc368: ArrayStore: r1[5] = r0  ; List_4
    //     0xabc368: add             x25, x1, #0x23
    //     0xabc36c: str             w0, [x25]
    //     0xabc370: tbz             w0, #0, #0xabc38c
    //     0xabc374: ldurb           w16, [x1, #-1]
    //     0xabc378: ldurb           w17, [x0, #-1]
    //     0xabc37c: and             x16, x17, x16, lsr #2
    //     0xabc380: tst             x16, HEAP, lsr #32
    //     0xabc384: b.eq            #0xabc38c
    //     0xabc388: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc38c: ldur            x0, [fp, #-0x28]
    // 0xabc390: r17 = "JP"
    //     0xabc390: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabc394: ldr             x17, [x17, #0xb50]
    // 0xabc398: StoreField: r0->field_27 = r17
    //     0xabc398: stur            w17, [x0, #0x27]
    // 0xabc39c: r1 = LoadStaticField(0xb54)
    //     0xabc39c: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc3a0: ldr             x1, [x1, #0x16a8]
    // 0xabc3a4: cmp             w1, NULL
    // 0xabc3a8: b.ne            #0xabc3b4
    // 0xabc3ac: r1 = Null
    //     0xabc3ac: mov             x1, NULL
    // 0xabc3b0: b               #0xabc3c0
    // 0xabc3b4: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc3b4: ldur            w2, [x1, #0x17]
    // 0xabc3b8: DecompressPointer r2
    //     0xabc3b8: add             x2, x2, HEAP, lsl #32
    // 0xabc3bc: mov             x1, x2
    // 0xabc3c0: cmp             w1, NULL
    // 0xabc3c4: b.ne            #0xabc3d0
    // 0xabc3c8: r3 = ""
    //     0xabc3c8: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc3cc: b               #0xabc3d4
    // 0xabc3d0: mov             x3, x1
    // 0xabc3d4: stur            x3, [fp, #-0x20]
    // 0xabc3d8: r1 = Null
    //     0xabc3d8: mov             x1, NULL
    // 0xabc3dc: r2 = 4
    //     0xabc3dc: movz            x2, #0x4
    // 0xabc3e0: r0 = AllocateArray()
    //     0xabc3e0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc3e4: mov             x1, x0
    // 0xabc3e8: ldur            x0, [fp, #-0x20]
    // 0xabc3ec: StoreField: r1->field_f = r0
    //     0xabc3ec: stur            w0, [x1, #0xf]
    // 0xabc3f0: r17 = "イア"
    //     0xabc3f0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f170] "イア"
    //     0xabc3f4: ldr             x17, [x17, #0x170]
    // 0xabc3f8: StoreField: r1->field_13 = r17
    //     0xabc3f8: stur            w17, [x1, #0x13]
    // 0xabc3fc: str             x1, [SP]
    // 0xabc400: r0 = _interpolate()
    //     0xabc400: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc404: ldur            x1, [fp, #-0x28]
    // 0xabc408: ArrayStore: r1[7] = r0  ; List_4
    //     0xabc408: add             x25, x1, #0x2b
    //     0xabc40c: str             w0, [x25]
    //     0xabc410: tbz             w0, #0, #0xabc42c
    //     0xabc414: ldurb           w16, [x1, #-1]
    //     0xabc418: ldurb           w17, [x0, #-1]
    //     0xabc41c: and             x16, x17, x16, lsr #2
    //     0xabc420: tst             x16, HEAP, lsr #32
    //     0xabc424: b.eq            #0xabc42c
    //     0xabc428: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc42c: ldur            x16, [fp, #-0x28]
    // 0xabc430: stp             x16, NULL, [SP]
    // 0xabc434: r0 = Map._fromLiteral()
    //     0xabc434: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabc438: mov             x3, x0
    // 0xabc43c: b               #0xabc444
    // 0xabc440: ldur            x3, [fp, #-0x18]
    // 0xabc444: stur            x3, [fp, #-0x18]
    // 0xabc448: r0 = LoadStaticField(0xb54)
    //     0xabc448: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabc44c: ldr             x0, [x0, #0x16a8]
    // 0xabc450: cmp             w0, NULL
    // 0xabc454: b.ne            #0xabc460
    // 0xabc458: r0 = Null
    //     0xabc458: mov             x0, NULL
    // 0xabc45c: b               #0xabc488
    // 0xabc460: r17 = 347
    //     0xabc460: movz            x17, #0x15b
    // 0xabc464: ldr             w1, [x0, x17]
    // 0xabc468: DecompressPointer r1
    //     0xabc468: add             x1, x1, HEAP, lsl #32
    // 0xabc46c: r0 = LoadClassIdInstr(r1)
    //     0xabc46c: ldur            x0, [x1, #-1]
    //     0xabc470: ubfx            x0, x0, #0xc, #0x14
    // 0xabc474: r2 = "fakeName"
    //     0xabc474: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f158] "fakeName"
    //     0xabc478: ldr             x2, [x2, #0x158]
    // 0xabc47c: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabc47c: sub             lr, x0, #0xb4
    //     0xabc480: ldr             lr, [x21, lr, lsl #3]
    //     0xabc484: blr             lr
    // 0xabc488: r1 = 59
    //     0xabc488: movz            x1, #0x3b
    // 0xabc48c: branchIfSmi(r0, 0xabc498)
    //     0xabc48c: tbz             w0, #0, #0xabc498
    // 0xabc490: r1 = LoadClassIdInstr(r0)
    //     0xabc490: ldur            x1, [x0, #-1]
    //     0xabc494: ubfx            x1, x1, #0xc, #0x14
    // 0xabc498: r16 = 2
    //     0xabc498: movz            x16, #0x2
    // 0xabc49c: stp             x16, x0, [SP]
    // 0xabc4a0: mov             x0, x1
    // 0xabc4a4: mov             lr, x0
    // 0xabc4a8: ldr             lr, [x21, lr, lsl #3]
    // 0xabc4ac: blr             lr
    // 0xabc4b0: tbnz            w0, #4, #0xabc728
    // 0xabc4b4: r1 = Null
    //     0xabc4b4: mov             x1, NULL
    // 0xabc4b8: r2 = 16
    //     0xabc4b8: movz            x2, #0x10
    // 0xabc4bc: r0 = AllocateArray()
    //     0xabc4bc: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc4c0: stur            x0, [fp, #-0x20]
    // 0xabc4c4: r17 = "EN"
    //     0xabc4c4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabc4c8: ldr             x17, [x17, #0xb58]
    // 0xabc4cc: StoreField: r0->field_f = r17
    //     0xabc4cc: stur            w17, [x0, #0xf]
    // 0xabc4d0: r1 = Null
    //     0xabc4d0: mov             x1, NULL
    // 0xabc4d4: r2 = 4
    //     0xabc4d4: movz            x2, #0x4
    // 0xabc4d8: r0 = AllocateArray()
    //     0xabc4d8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc4dc: r17 = "Za"
    //     0xabc4dc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f178] "Za"
    //     0xabc4e0: ldr             x17, [x17, #0x178]
    // 0xabc4e4: StoreField: r0->field_f = r17
    //     0xabc4e4: stur            w17, [x0, #0xf]
    // 0xabc4e8: r1 = LoadStaticField(0xb54)
    //     0xabc4e8: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc4ec: ldr             x1, [x1, #0x16a8]
    // 0xabc4f0: cmp             w1, NULL
    // 0xabc4f4: b.ne            #0xabc500
    // 0xabc4f8: r1 = Null
    //     0xabc4f8: mov             x1, NULL
    // 0xabc4fc: b               #0xabc50c
    // 0xabc500: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc500: ldur            w2, [x1, #0x17]
    // 0xabc504: DecompressPointer r2
    //     0xabc504: add             x2, x2, HEAP, lsl #32
    // 0xabc508: mov             x1, x2
    // 0xabc50c: cmp             w1, NULL
    // 0xabc510: b.ne            #0xabc51c
    // 0xabc514: r2 = ""
    //     0xabc514: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc518: b               #0xabc520
    // 0xabc51c: mov             x2, x1
    // 0xabc520: ldur            x1, [fp, #-0x20]
    // 0xabc524: StoreField: r0->field_13 = r2
    //     0xabc524: stur            w2, [x0, #0x13]
    // 0xabc528: str             x0, [SP]
    // 0xabc52c: r0 = _interpolate()
    //     0xabc52c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc530: ldur            x1, [fp, #-0x20]
    // 0xabc534: ArrayStore: r1[1] = r0  ; List_4
    //     0xabc534: add             x25, x1, #0x13
    //     0xabc538: str             w0, [x25]
    //     0xabc53c: tbz             w0, #0, #0xabc558
    //     0xabc540: ldurb           w16, [x1, #-1]
    //     0xabc544: ldurb           w17, [x0, #-1]
    //     0xabc548: and             x16, x17, x16, lsr #2
    //     0xabc54c: tst             x16, HEAP, lsr #32
    //     0xabc550: b.eq            #0xabc558
    //     0xabc554: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc558: ldur            x0, [fp, #-0x20]
    // 0xabc55c: r17 = "CN"
    //     0xabc55c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabc560: ldr             x17, [x17, #0xb30]
    // 0xabc564: ArrayStore: r0[0] = r17  ; List_4
    //     0xabc564: stur            w17, [x0, #0x17]
    // 0xabc568: r1 = Null
    //     0xabc568: mov             x1, NULL
    // 0xabc56c: r2 = 4
    //     0xabc56c: movz            x2, #0x4
    // 0xabc570: r0 = AllocateArray()
    //     0xabc570: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc574: r17 = "大"
    //     0xabc574: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f180] "大"
    //     0xabc578: ldr             x17, [x17, #0x180]
    // 0xabc57c: StoreField: r0->field_f = r17
    //     0xabc57c: stur            w17, [x0, #0xf]
    // 0xabc580: r1 = LoadStaticField(0xb54)
    //     0xabc580: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc584: ldr             x1, [x1, #0x16a8]
    // 0xabc588: cmp             w1, NULL
    // 0xabc58c: b.ne            #0xabc598
    // 0xabc590: r1 = Null
    //     0xabc590: mov             x1, NULL
    // 0xabc594: b               #0xabc5a4
    // 0xabc598: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc598: ldur            w2, [x1, #0x17]
    // 0xabc59c: DecompressPointer r2
    //     0xabc59c: add             x2, x2, HEAP, lsl #32
    // 0xabc5a0: mov             x1, x2
    // 0xabc5a4: cmp             w1, NULL
    // 0xabc5a8: b.ne            #0xabc5b4
    // 0xabc5ac: r2 = ""
    //     0xabc5ac: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc5b0: b               #0xabc5b8
    // 0xabc5b4: mov             x2, x1
    // 0xabc5b8: ldur            x1, [fp, #-0x20]
    // 0xabc5bc: StoreField: r0->field_13 = r2
    //     0xabc5bc: stur            w2, [x0, #0x13]
    // 0xabc5c0: str             x0, [SP]
    // 0xabc5c4: r0 = _interpolate()
    //     0xabc5c4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc5c8: ldur            x1, [fp, #-0x20]
    // 0xabc5cc: ArrayStore: r1[3] = r0  ; List_4
    //     0xabc5cc: add             x25, x1, #0x1b
    //     0xabc5d0: str             w0, [x25]
    //     0xabc5d4: tbz             w0, #0, #0xabc5f0
    //     0xabc5d8: ldurb           w16, [x1, #-1]
    //     0xabc5dc: ldurb           w17, [x0, #-1]
    //     0xabc5e0: and             x16, x17, x16, lsr #2
    //     0xabc5e4: tst             x16, HEAP, lsr #32
    //     0xabc5e8: b.eq            #0xabc5f0
    //     0xabc5ec: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc5f0: ldur            x0, [fp, #-0x20]
    // 0xabc5f4: r17 = "TW"
    //     0xabc5f4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabc5f8: ldr             x17, [x17, #0xb40]
    // 0xabc5fc: StoreField: r0->field_1f = r17
    //     0xabc5fc: stur            w17, [x0, #0x1f]
    // 0xabc600: r1 = Null
    //     0xabc600: mov             x1, NULL
    // 0xabc604: r2 = 4
    //     0xabc604: movz            x2, #0x4
    // 0xabc608: r0 = AllocateArray()
    //     0xabc608: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc60c: r17 = "大"
    //     0xabc60c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f180] "大"
    //     0xabc610: ldr             x17, [x17, #0x180]
    // 0xabc614: StoreField: r0->field_f = r17
    //     0xabc614: stur            w17, [x0, #0xf]
    // 0xabc618: r1 = LoadStaticField(0xb54)
    //     0xabc618: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc61c: ldr             x1, [x1, #0x16a8]
    // 0xabc620: cmp             w1, NULL
    // 0xabc624: b.ne            #0xabc630
    // 0xabc628: r1 = Null
    //     0xabc628: mov             x1, NULL
    // 0xabc62c: b               #0xabc63c
    // 0xabc630: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc630: ldur            w2, [x1, #0x17]
    // 0xabc634: DecompressPointer r2
    //     0xabc634: add             x2, x2, HEAP, lsl #32
    // 0xabc638: mov             x1, x2
    // 0xabc63c: cmp             w1, NULL
    // 0xabc640: b.ne            #0xabc64c
    // 0xabc644: r2 = ""
    //     0xabc644: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc648: b               #0xabc650
    // 0xabc64c: mov             x2, x1
    // 0xabc650: ldur            x1, [fp, #-0x20]
    // 0xabc654: StoreField: r0->field_13 = r2
    //     0xabc654: stur            w2, [x0, #0x13]
    // 0xabc658: str             x0, [SP]
    // 0xabc65c: r0 = _interpolate()
    //     0xabc65c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc660: ldur            x1, [fp, #-0x20]
    // 0xabc664: ArrayStore: r1[5] = r0  ; List_4
    //     0xabc664: add             x25, x1, #0x23
    //     0xabc668: str             w0, [x25]
    //     0xabc66c: tbz             w0, #0, #0xabc688
    //     0xabc670: ldurb           w16, [x1, #-1]
    //     0xabc674: ldurb           w17, [x0, #-1]
    //     0xabc678: and             x16, x17, x16, lsr #2
    //     0xabc67c: tst             x16, HEAP, lsr #32
    //     0xabc680: b.eq            #0xabc688
    //     0xabc684: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc688: ldur            x0, [fp, #-0x20]
    // 0xabc68c: r17 = "JP"
    //     0xabc68c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabc690: ldr             x17, [x17, #0xb50]
    // 0xabc694: StoreField: r0->field_27 = r17
    //     0xabc694: stur            w17, [x0, #0x27]
    // 0xabc698: r1 = Null
    //     0xabc698: mov             x1, NULL
    // 0xabc69c: r2 = 4
    //     0xabc69c: movz            x2, #0x4
    // 0xabc6a0: r0 = AllocateArray()
    //     0xabc6a0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc6a4: r17 = "ザ"
    //     0xabc6a4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f188] "ザ"
    //     0xabc6a8: ldr             x17, [x17, #0x188]
    // 0xabc6ac: StoreField: r0->field_f = r17
    //     0xabc6ac: stur            w17, [x0, #0xf]
    // 0xabc6b0: r1 = LoadStaticField(0xb54)
    //     0xabc6b0: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc6b4: ldr             x1, [x1, #0x16a8]
    // 0xabc6b8: cmp             w1, NULL
    // 0xabc6bc: b.ne            #0xabc6c8
    // 0xabc6c0: r1 = Null
    //     0xabc6c0: mov             x1, NULL
    // 0xabc6c4: b               #0xabc6d4
    // 0xabc6c8: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc6c8: ldur            w2, [x1, #0x17]
    // 0xabc6cc: DecompressPointer r2
    //     0xabc6cc: add             x2, x2, HEAP, lsl #32
    // 0xabc6d0: mov             x1, x2
    // 0xabc6d4: cmp             w1, NULL
    // 0xabc6d8: b.ne            #0xabc6e0
    // 0xabc6dc: r1 = ""
    //     0xabc6dc: ldr             x1, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc6e0: StoreField: r0->field_13 = r1
    //     0xabc6e0: stur            w1, [x0, #0x13]
    // 0xabc6e4: str             x0, [SP]
    // 0xabc6e8: r0 = _interpolate()
    //     0xabc6e8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc6ec: ldur            x1, [fp, #-0x20]
    // 0xabc6f0: ArrayStore: r1[7] = r0  ; List_4
    //     0xabc6f0: add             x25, x1, #0x2b
    //     0xabc6f4: str             w0, [x25]
    //     0xabc6f8: tbz             w0, #0, #0xabc714
    //     0xabc6fc: ldurb           w16, [x1, #-1]
    //     0xabc700: ldurb           w17, [x0, #-1]
    //     0xabc704: and             x16, x17, x16, lsr #2
    //     0xabc708: tst             x16, HEAP, lsr #32
    //     0xabc70c: b.eq            #0xabc714
    //     0xabc710: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc714: ldur            x16, [fp, #-0x20]
    // 0xabc718: stp             x16, NULL, [SP]
    // 0xabc71c: r0 = Map._fromLiteral()
    //     0xabc71c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabc720: mov             x3, x0
    // 0xabc724: b               #0xabc72c
    // 0xabc728: ldur            x3, [fp, #-0x18]
    // 0xabc72c: stur            x3, [fp, #-0x18]
    // 0xabc730: r0 = LoadStaticField(0xb54)
    //     0xabc730: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabc734: ldr             x0, [x0, #0x16a8]
    // 0xabc738: cmp             w0, NULL
    // 0xabc73c: b.ne            #0xabc748
    // 0xabc740: r0 = Null
    //     0xabc740: mov             x0, NULL
    // 0xabc744: b               #0xabc770
    // 0xabc748: r17 = 347
    //     0xabc748: movz            x17, #0x15b
    // 0xabc74c: ldr             w1, [x0, x17]
    // 0xabc750: DecompressPointer r1
    //     0xabc750: add             x1, x1, HEAP, lsl #32
    // 0xabc754: r0 = LoadClassIdInstr(r1)
    //     0xabc754: ldur            x0, [x1, #-1]
    //     0xabc758: ubfx            x0, x0, #0xc, #0x14
    // 0xabc75c: r2 = "fakeName"
    //     0xabc75c: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f158] "fakeName"
    //     0xabc760: ldr             x2, [x2, #0x158]
    // 0xabc764: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabc764: sub             lr, x0, #0xb4
    //     0xabc768: ldr             lr, [x21, lr, lsl #3]
    //     0xabc76c: blr             lr
    // 0xabc770: r1 = 59
    //     0xabc770: movz            x1, #0x3b
    // 0xabc774: branchIfSmi(r0, 0xabc780)
    //     0xabc774: tbz             w0, #0, #0xabc780
    // 0xabc778: r1 = LoadClassIdInstr(r0)
    //     0xabc778: ldur            x1, [x0, #-1]
    //     0xabc77c: ubfx            x1, x1, #0xc, #0x14
    // 0xabc780: r16 = 4
    //     0xabc780: movz            x16, #0x4
    // 0xabc784: stp             x16, x0, [SP]
    // 0xabc788: mov             x0, x1
    // 0xabc78c: mov             lr, x0
    // 0xabc790: ldr             lr, [x21, lr, lsl #3]
    // 0xabc794: blr             lr
    // 0xabc798: tbnz            w0, #4, #0xabca20
    // 0xabc79c: r1 = Null
    //     0xabc79c: mov             x1, NULL
    // 0xabc7a0: r2 = 16
    //     0xabc7a0: movz            x2, #0x10
    // 0xabc7a4: r0 = AllocateArray()
    //     0xabc7a4: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc7a8: stur            x0, [fp, #-0x20]
    // 0xabc7ac: r17 = "EN"
    //     0xabc7ac: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabc7b0: ldr             x17, [x17, #0xb58]
    // 0xabc7b4: StoreField: r0->field_f = r17
    //     0xabc7b4: stur            w17, [x0, #0xf]
    // 0xabc7b8: r1 = Null
    //     0xabc7b8: mov             x1, NULL
    // 0xabc7bc: r2 = 6
    //     0xabc7bc: movz            x2, #0x6
    // 0xabc7c0: r0 = AllocateArray()
    //     0xabc7c0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc7c4: r17 = "Lo"
    //     0xabc7c4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f190] "Lo"
    //     0xabc7c8: ldr             x17, [x17, #0x190]
    // 0xabc7cc: StoreField: r0->field_f = r17
    //     0xabc7cc: stur            w17, [x0, #0xf]
    // 0xabc7d0: r1 = LoadStaticField(0xb54)
    //     0xabc7d0: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc7d4: ldr             x1, [x1, #0x16a8]
    // 0xabc7d8: cmp             w1, NULL
    // 0xabc7dc: b.ne            #0xabc7e8
    // 0xabc7e0: r1 = Null
    //     0xabc7e0: mov             x1, NULL
    // 0xabc7e4: b               #0xabc7f4
    // 0xabc7e8: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc7e8: ldur            w2, [x1, #0x17]
    // 0xabc7ec: DecompressPointer r2
    //     0xabc7ec: add             x2, x2, HEAP, lsl #32
    // 0xabc7f0: mov             x1, x2
    // 0xabc7f4: cmp             w1, NULL
    // 0xabc7f8: b.ne            #0xabc804
    // 0xabc7fc: r2 = ""
    //     0xabc7fc: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc800: b               #0xabc808
    // 0xabc804: mov             x2, x1
    // 0xabc808: ldur            x1, [fp, #-0x20]
    // 0xabc80c: StoreField: r0->field_13 = r2
    //     0xabc80c: stur            w2, [x0, #0x13]
    // 0xabc810: r17 = "y"
    //     0xabc810: ldr             x17, [PP, #0x5798]  ; [pp+0x5798] "y"
    // 0xabc814: ArrayStore: r0[0] = r17  ; List_4
    //     0xabc814: stur            w17, [x0, #0x17]
    // 0xabc818: str             x0, [SP]
    // 0xabc81c: r0 = _interpolate()
    //     0xabc81c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc820: ldur            x1, [fp, #-0x20]
    // 0xabc824: ArrayStore: r1[1] = r0  ; List_4
    //     0xabc824: add             x25, x1, #0x13
    //     0xabc828: str             w0, [x25]
    //     0xabc82c: tbz             w0, #0, #0xabc848
    //     0xabc830: ldurb           w16, [x1, #-1]
    //     0xabc834: ldurb           w17, [x0, #-1]
    //     0xabc838: and             x16, x17, x16, lsr #2
    //     0xabc83c: tst             x16, HEAP, lsr #32
    //     0xabc840: b.eq            #0xabc848
    //     0xabc844: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc848: ldur            x0, [fp, #-0x20]
    // 0xabc84c: r17 = "CN"
    //     0xabc84c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabc850: ldr             x17, [x17, #0xb30]
    // 0xabc854: ArrayStore: r0[0] = r17  ; List_4
    //     0xabc854: stur            w17, [x0, #0x17]
    // 0xabc858: r1 = Null
    //     0xabc858: mov             x1, NULL
    // 0xabc85c: r2 = 4
    //     0xabc85c: movz            x2, #0x4
    // 0xabc860: r0 = AllocateArray()
    //     0xabc860: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc864: r17 = "小"
    //     0xabc864: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f198] "小"
    //     0xabc868: ldr             x17, [x17, #0x198]
    // 0xabc86c: StoreField: r0->field_f = r17
    //     0xabc86c: stur            w17, [x0, #0xf]
    // 0xabc870: r1 = LoadStaticField(0xb54)
    //     0xabc870: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc874: ldr             x1, [x1, #0x16a8]
    // 0xabc878: cmp             w1, NULL
    // 0xabc87c: b.ne            #0xabc888
    // 0xabc880: r1 = Null
    //     0xabc880: mov             x1, NULL
    // 0xabc884: b               #0xabc894
    // 0xabc888: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc888: ldur            w2, [x1, #0x17]
    // 0xabc88c: DecompressPointer r2
    //     0xabc88c: add             x2, x2, HEAP, lsl #32
    // 0xabc890: mov             x1, x2
    // 0xabc894: cmp             w1, NULL
    // 0xabc898: b.ne            #0xabc8a4
    // 0xabc89c: r2 = ""
    //     0xabc89c: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc8a0: b               #0xabc8a8
    // 0xabc8a4: mov             x2, x1
    // 0xabc8a8: ldur            x1, [fp, #-0x20]
    // 0xabc8ac: StoreField: r0->field_13 = r2
    //     0xabc8ac: stur            w2, [x0, #0x13]
    // 0xabc8b0: str             x0, [SP]
    // 0xabc8b4: r0 = _interpolate()
    //     0xabc8b4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc8b8: ldur            x1, [fp, #-0x20]
    // 0xabc8bc: ArrayStore: r1[3] = r0  ; List_4
    //     0xabc8bc: add             x25, x1, #0x1b
    //     0xabc8c0: str             w0, [x25]
    //     0xabc8c4: tbz             w0, #0, #0xabc8e0
    //     0xabc8c8: ldurb           w16, [x1, #-1]
    //     0xabc8cc: ldurb           w17, [x0, #-1]
    //     0xabc8d0: and             x16, x17, x16, lsr #2
    //     0xabc8d4: tst             x16, HEAP, lsr #32
    //     0xabc8d8: b.eq            #0xabc8e0
    //     0xabc8dc: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc8e0: ldur            x0, [fp, #-0x20]
    // 0xabc8e4: r17 = "TW"
    //     0xabc8e4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabc8e8: ldr             x17, [x17, #0xb40]
    // 0xabc8ec: StoreField: r0->field_1f = r17
    //     0xabc8ec: stur            w17, [x0, #0x1f]
    // 0xabc8f0: r1 = Null
    //     0xabc8f0: mov             x1, NULL
    // 0xabc8f4: r2 = 4
    //     0xabc8f4: movz            x2, #0x4
    // 0xabc8f8: r0 = AllocateArray()
    //     0xabc8f8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc8fc: r17 = "小"
    //     0xabc8fc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f198] "小"
    //     0xabc900: ldr             x17, [x17, #0x198]
    // 0xabc904: StoreField: r0->field_f = r17
    //     0xabc904: stur            w17, [x0, #0xf]
    // 0xabc908: r1 = LoadStaticField(0xb54)
    //     0xabc908: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc90c: ldr             x1, [x1, #0x16a8]
    // 0xabc910: cmp             w1, NULL
    // 0xabc914: b.ne            #0xabc920
    // 0xabc918: r1 = Null
    //     0xabc918: mov             x1, NULL
    // 0xabc91c: b               #0xabc92c
    // 0xabc920: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc920: ldur            w2, [x1, #0x17]
    // 0xabc924: DecompressPointer r2
    //     0xabc924: add             x2, x2, HEAP, lsl #32
    // 0xabc928: mov             x1, x2
    // 0xabc92c: cmp             w1, NULL
    // 0xabc930: b.ne            #0xabc93c
    // 0xabc934: r2 = ""
    //     0xabc934: ldr             x2, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc938: b               #0xabc940
    // 0xabc93c: mov             x2, x1
    // 0xabc940: ldur            x1, [fp, #-0x20]
    // 0xabc944: StoreField: r0->field_13 = r2
    //     0xabc944: stur            w2, [x0, #0x13]
    // 0xabc948: str             x0, [SP]
    // 0xabc94c: r0 = _interpolate()
    //     0xabc94c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc950: ldur            x1, [fp, #-0x20]
    // 0xabc954: ArrayStore: r1[5] = r0  ; List_4
    //     0xabc954: add             x25, x1, #0x23
    //     0xabc958: str             w0, [x25]
    //     0xabc95c: tbz             w0, #0, #0xabc978
    //     0xabc960: ldurb           w16, [x1, #-1]
    //     0xabc964: ldurb           w17, [x0, #-1]
    //     0xabc968: and             x16, x17, x16, lsr #2
    //     0xabc96c: tst             x16, HEAP, lsr #32
    //     0xabc970: b.eq            #0xabc978
    //     0xabc974: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabc978: ldur            x0, [fp, #-0x20]
    // 0xabc97c: r17 = "JP"
    //     0xabc97c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabc980: ldr             x17, [x17, #0xb50]
    // 0xabc984: StoreField: r0->field_27 = r17
    //     0xabc984: stur            w17, [x0, #0x27]
    // 0xabc988: r1 = Null
    //     0xabc988: mov             x1, NULL
    // 0xabc98c: r2 = 6
    //     0xabc98c: movz            x2, #0x6
    // 0xabc990: r0 = AllocateArray()
    //     0xabc990: bl              #0x1502560  ; AllocateArrayStub
    // 0xabc994: r17 = "ロ"
    //     0xabc994: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1a0] "ロ"
    //     0xabc998: ldr             x17, [x17, #0x1a0]
    // 0xabc99c: StoreField: r0->field_f = r17
    //     0xabc99c: stur            w17, [x0, #0xf]
    // 0xabc9a0: r1 = LoadStaticField(0xb54)
    //     0xabc9a0: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xabc9a4: ldr             x1, [x1, #0x16a8]
    // 0xabc9a8: cmp             w1, NULL
    // 0xabc9ac: b.ne            #0xabc9b8
    // 0xabc9b0: r1 = Null
    //     0xabc9b0: mov             x1, NULL
    // 0xabc9b4: b               #0xabc9c4
    // 0xabc9b8: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xabc9b8: ldur            w2, [x1, #0x17]
    // 0xabc9bc: DecompressPointer r2
    //     0xabc9bc: add             x2, x2, HEAP, lsl #32
    // 0xabc9c0: mov             x1, x2
    // 0xabc9c4: cmp             w1, NULL
    // 0xabc9c8: b.ne            #0xabc9d0
    // 0xabc9cc: r1 = ""
    //     0xabc9cc: ldr             x1, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabc9d0: StoreField: r0->field_13 = r1
    //     0xabc9d0: stur            w1, [x0, #0x13]
    // 0xabc9d4: r17 = "イ"
    //     0xabc9d4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1a8] "イ"
    //     0xabc9d8: ldr             x17, [x17, #0x1a8]
    // 0xabc9dc: ArrayStore: r0[0] = r17  ; List_4
    //     0xabc9dc: stur            w17, [x0, #0x17]
    // 0xabc9e0: str             x0, [SP]
    // 0xabc9e4: r0 = _interpolate()
    //     0xabc9e4: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabc9e8: ldur            x1, [fp, #-0x20]
    // 0xabc9ec: ArrayStore: r1[7] = r0  ; List_4
    //     0xabc9ec: add             x25, x1, #0x2b
    //     0xabc9f0: str             w0, [x25]
    //     0xabc9f4: tbz             w0, #0, #0xabca10
    //     0xabc9f8: ldurb           w16, [x1, #-1]
    //     0xabc9fc: ldurb           w17, [x0, #-1]
    //     0xabca00: and             x16, x17, x16, lsr #2
    //     0xabca04: tst             x16, HEAP, lsr #32
    //     0xabca08: b.eq            #0xabca10
    //     0xabca0c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabca10: ldur            x16, [fp, #-0x20]
    // 0xabca14: stp             x16, NULL, [SP]
    // 0xabca18: r0 = Map._fromLiteral()
    //     0xabca18: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabca1c: b               #0xabe9c4
    // 0xabca20: ldur            x0, [fp, #-0x18]
    // 0xabca24: b               #0xabe9c4
    // 0xabca28: r16 = "councilCard"
    //     0xabca28: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f1b0] "councilCard"
    //     0xabca2c: ldr             x16, [x16, #0x1b0]
    // 0xabca30: ldur            lr, [fp, #-8]
    // 0xabca34: stp             lr, x16, [SP]
    // 0xabca38: r0 = ==()
    //     0xabca38: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabca3c: tbnz            w0, #4, #0xabcba8
    // 0xabca40: r1 = Null
    //     0xabca40: mov             x1, NULL
    // 0xabca44: r2 = 16
    //     0xabca44: movz            x2, #0x10
    // 0xabca48: r0 = AllocateArray()
    //     0xabca48: bl              #0x1502560  ; AllocateArrayStub
    // 0xabca4c: r17 = "EN"
    //     0xabca4c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabca50: ldr             x17, [x17, #0xb58]
    // 0xabca54: StoreField: r0->field_f = r17
    //     0xabca54: stur            w17, [x0, #0xf]
    // 0xabca58: r17 = "Council Card with [Bronze] Ranking."
    //     0xabca58: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1b8] "Council Card with [Bronze] Ranking."
    //     0xabca5c: ldr             x17, [x17, #0x1b8]
    // 0xabca60: StoreField: r0->field_13 = r17
    //     0xabca60: stur            w17, [x0, #0x13]
    // 0xabca64: r17 = "CN"
    //     0xabca64: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabca68: ldr             x17, [x17, #0xb30]
    // 0xabca6c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabca6c: stur            w17, [x0, #0x17]
    // 0xabca70: r17 = "象征着【铜】级的安理会卡。"
    //     0xabca70: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1c0] "象征着【铜】级的安理会卡。"
    //     0xabca74: ldr             x17, [x17, #0x1c0]
    // 0xabca78: StoreField: r0->field_1b = r17
    //     0xabca78: stur            w17, [x0, #0x1b]
    // 0xabca7c: r17 = "TW"
    //     0xabca7c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabca80: ldr             x17, [x17, #0xb40]
    // 0xabca84: StoreField: r0->field_1f = r17
    //     0xabca84: stur            w17, [x0, #0x1f]
    // 0xabca88: r17 = "象徵著【銅】級的安理會卡。"
    //     0xabca88: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1c8] "象徵著【銅】級的安理會卡。"
    //     0xabca8c: ldr             x17, [x17, #0x1c8]
    // 0xabca90: StoreField: r0->field_23 = r17
    //     0xabca90: stur            w17, [x0, #0x23]
    // 0xabca94: r17 = "JP"
    //     0xabca94: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabca98: ldr             x17, [x17, #0xb50]
    // 0xabca9c: StoreField: r0->field_27 = r17
    //     0xabca9c: stur            w17, [x0, #0x27]
    // 0xabcaa0: r17 = "「銅」級を表すカード。"
    //     0xabcaa0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1d0] "「銅」級を表すカード。"
    //     0xabcaa4: ldr             x17, [x17, #0x1d0]
    // 0xabcaa8: StoreField: r0->field_2b = r17
    //     0xabcaa8: stur            w17, [x0, #0x2b]
    // 0xabcaac: stp             x0, NULL, [SP]
    // 0xabcab0: r0 = Map._fromLiteral()
    //     0xabcab0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcab4: mov             x3, x0
    // 0xabcab8: stur            x3, [fp, #-0x18]
    // 0xabcabc: r0 = LoadStaticField(0xb54)
    //     0xabcabc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabcac0: ldr             x0, [x0, #0x16a8]
    // 0xabcac4: cmp             w0, NULL
    // 0xabcac8: b.ne            #0xabcad4
    // 0xabcacc: r0 = Null
    //     0xabcacc: mov             x0, NULL
    // 0xabcad0: b               #0xabcafc
    // 0xabcad4: r17 = 327
    //     0xabcad4: movz            x17, #0x147
    // 0xabcad8: ldr             w1, [x0, x17]
    // 0xabcadc: DecompressPointer r1
    //     0xabcadc: add             x1, x1, HEAP, lsl #32
    // 0xabcae0: r0 = LoadClassIdInstr(r1)
    //     0xabcae0: ldur            x0, [x1, #-1]
    //     0xabcae4: ubfx            x0, x0, #0xc, #0x14
    // 0xabcae8: r2 = "storyTechCity.Middle"
    //     0xabcae8: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f1d8] "storyTechCity.Middle"
    //     0xabcaec: ldr             x2, [x2, #0x1d8]
    // 0xabcaf0: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabcaf0: sub             lr, x0, #0xb4
    //     0xabcaf4: ldr             lr, [x21, lr, lsl #3]
    //     0xabcaf8: blr             lr
    // 0xabcafc: r1 = 59
    //     0xabcafc: movz            x1, #0x3b
    // 0xabcb00: branchIfSmi(r0, 0xabcb0c)
    //     0xabcb00: tbz             w0, #0, #0xabcb0c
    // 0xabcb04: r1 = LoadClassIdInstr(r0)
    //     0xabcb04: ldur            x1, [x0, #-1]
    //     0xabcb08: ubfx            x1, x1, #0xc, #0x14
    // 0xabcb0c: r16 = true
    //     0xabcb0c: add             x16, NULL, #0x20  ; true
    // 0xabcb10: stp             x16, x0, [SP]
    // 0xabcb14: mov             x0, x1
    // 0xabcb18: mov             lr, x0
    // 0xabcb1c: ldr             lr, [x21, lr, lsl #3]
    // 0xabcb20: blr             lr
    // 0xabcb24: tbnz            w0, #4, #0xabcba0
    // 0xabcb28: r1 = Null
    //     0xabcb28: mov             x1, NULL
    // 0xabcb2c: r2 = 16
    //     0xabcb2c: movz            x2, #0x10
    // 0xabcb30: r0 = AllocateArray()
    //     0xabcb30: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcb34: r17 = "EN"
    //     0xabcb34: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcb38: ldr             x17, [x17, #0xb58]
    // 0xabcb3c: StoreField: r0->field_f = r17
    //     0xabcb3c: stur            w17, [x0, #0xf]
    // 0xabcb40: r17 = "Council Card with [Silver] Ranking."
    //     0xabcb40: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1e0] "Council Card with [Silver] Ranking."
    //     0xabcb44: ldr             x17, [x17, #0x1e0]
    // 0xabcb48: StoreField: r0->field_13 = r17
    //     0xabcb48: stur            w17, [x0, #0x13]
    // 0xabcb4c: r17 = "CN"
    //     0xabcb4c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcb50: ldr             x17, [x17, #0xb30]
    // 0xabcb54: ArrayStore: r0[0] = r17  ; List_4
    //     0xabcb54: stur            w17, [x0, #0x17]
    // 0xabcb58: r17 = "象征着【银】级的安理会卡。"
    //     0xabcb58: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1e8] "象征着【银】级的安理会卡。"
    //     0xabcb5c: ldr             x17, [x17, #0x1e8]
    // 0xabcb60: StoreField: r0->field_1b = r17
    //     0xabcb60: stur            w17, [x0, #0x1b]
    // 0xabcb64: r17 = "TW"
    //     0xabcb64: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabcb68: ldr             x17, [x17, #0xb40]
    // 0xabcb6c: StoreField: r0->field_1f = r17
    //     0xabcb6c: stur            w17, [x0, #0x1f]
    // 0xabcb70: r17 = "象徵著【銀】級的安理會卡。"
    //     0xabcb70: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1f0] "象徵著【銀】級的安理會卡。"
    //     0xabcb74: ldr             x17, [x17, #0x1f0]
    // 0xabcb78: StoreField: r0->field_23 = r17
    //     0xabcb78: stur            w17, [x0, #0x23]
    // 0xabcb7c: r17 = "JP"
    //     0xabcb7c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabcb80: ldr             x17, [x17, #0xb50]
    // 0xabcb84: StoreField: r0->field_27 = r17
    //     0xabcb84: stur            w17, [x0, #0x27]
    // 0xabcb88: r17 = "「銀」級を表すカード。"
    //     0xabcb88: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f1f8] "「銀」級を表すカード。"
    //     0xabcb8c: ldr             x17, [x17, #0x1f8]
    // 0xabcb90: StoreField: r0->field_2b = r17
    //     0xabcb90: stur            w17, [x0, #0x2b]
    // 0xabcb94: stp             x0, NULL, [SP]
    // 0xabcb98: r0 = Map._fromLiteral()
    //     0xabcb98: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcb9c: b               #0xabe9c4
    // 0xabcba0: ldur            x0, [fp, #-0x18]
    // 0xabcba4: b               #0xabe9c4
    // 0xabcba8: r16 = "austinNormalChat"
    //     0xabcba8: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f200] "austinNormalChat"
    //     0xabcbac: ldr             x16, [x16, #0x200]
    // 0xabcbb0: ldur            lr, [fp, #-8]
    // 0xabcbb4: stp             lr, x16, [SP]
    // 0xabcbb8: r0 = ==()
    //     0xabcbb8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabcbbc: tbnz            w0, #4, #0xabcd00
    // 0xabcbc0: r1 = Null
    //     0xabcbc0: mov             x1, NULL
    // 0xabcbc4: r2 = 16
    //     0xabcbc4: movz            x2, #0x10
    // 0xabcbc8: r0 = AllocateArray()
    //     0xabcbc8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcbcc: r17 = "EN"
    //     0xabcbcc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcbd0: ldr             x17, [x17, #0xb58]
    // 0xabcbd4: StoreField: r0->field_f = r17
    //     0xabcbd4: stur            w17, [x0, #0xf]
    // 0xabcbd8: r17 = "Nice weather today! Makes me wanna play badminton!"
    //     0xabcbd8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f208] "Nice weather today! Makes me wanna play badminton!"
    //     0xabcbdc: ldr             x17, [x17, #0x208]
    // 0xabcbe0: StoreField: r0->field_13 = r17
    //     0xabcbe0: stur            w17, [x0, #0x13]
    // 0xabcbe4: r17 = "CN"
    //     0xabcbe4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcbe8: ldr             x17, [x17, #0xb30]
    // 0xabcbec: ArrayStore: r0[0] = r17  ; List_4
    //     0xabcbec: stur            w17, [x0, #0x17]
    // 0xabcbf0: r17 = "今天天气真好！突然让我很想打球。"
    //     0xabcbf0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f210] "今天天气真好！突然让我很想打球。"
    //     0xabcbf4: ldr             x17, [x17, #0x210]
    // 0xabcbf8: StoreField: r0->field_1b = r17
    //     0xabcbf8: stur            w17, [x0, #0x1b]
    // 0xabcbfc: r17 = "TW"
    //     0xabcbfc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabcc00: ldr             x17, [x17, #0xb40]
    // 0xabcc04: StoreField: r0->field_1f = r17
    //     0xabcc04: stur            w17, [x0, #0x1f]
    // 0xabcc08: r17 = "今天天氣真好！突然讓我很想打球。"
    //     0xabcc08: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f218] "今天天氣真好！突然讓我很想打球。"
    //     0xabcc0c: ldr             x17, [x17, #0x218]
    // 0xabcc10: StoreField: r0->field_23 = r17
    //     0xabcc10: stur            w17, [x0, #0x23]
    // 0xabcc14: r17 = "JP"
    //     0xabcc14: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabcc18: ldr             x17, [x17, #0xb50]
    // 0xabcc1c: StoreField: r0->field_27 = r17
    //     0xabcc1c: stur            w17, [x0, #0x27]
    // 0xabcc20: r17 = "今日はいい天気だな！やぁ．．．バドしたくなったな。"
    //     0xabcc20: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f220] "今日はいい天気だな！やぁ．．．バドしたくなったな。"
    //     0xabcc24: ldr             x17, [x17, #0x220]
    // 0xabcc28: StoreField: r0->field_2b = r17
    //     0xabcc28: stur            w17, [x0, #0x2b]
    // 0xabcc2c: stp             x0, NULL, [SP]
    // 0xabcc30: r0 = Map._fromLiteral()
    //     0xabcc30: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcc34: stur            x0, [fp, #-0x18]
    // 0xabcc38: r0 = InitLateStaticField(0xb90) // [package:battlecross/globals.dart] ::currentWeather
    //     0xabcc38: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabcc3c: ldr             x0, [x0, #0x1720]
    //     0xabcc40: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0xabcc44: cmp             w0, w16
    //     0xabcc48: b.ne            #0xabcc58
    //     0xabcc4c: add             x2, PP, #0x12, lsl #12  ; [pp+0x129f8] Field <::.currentWeather>: static late (offset: 0xb90)
    //     0xabcc50: ldr             x2, [x2, #0x9f8]
    //     0xabcc54: bl              #0x1500750  ; InitLateStaticFieldStub
    // 0xabcc58: r1 = LoadClassIdInstr(r0)
    //     0xabcc58: ldur            x1, [x0, #-1]
    //     0xabcc5c: ubfx            x1, x1, #0xc, #0x14
    // 0xabcc60: r16 = "foggy"
    //     0xabcc60: add             x16, PP, #0x10, lsl #12  ; [pp+0x10700] "foggy"
    //     0xabcc64: ldr             x16, [x16, #0x700]
    // 0xabcc68: stp             x16, x0, [SP]
    // 0xabcc6c: mov             x0, x1
    // 0xabcc70: mov             lr, x0
    // 0xabcc74: ldr             lr, [x21, lr, lsl #3]
    // 0xabcc78: blr             lr
    // 0xabcc7c: tbnz            w0, #4, #0xabccf8
    // 0xabcc80: r1 = Null
    //     0xabcc80: mov             x1, NULL
    // 0xabcc84: r2 = 16
    //     0xabcc84: movz            x2, #0x10
    // 0xabcc88: r0 = AllocateArray()
    //     0xabcc88: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcc8c: r17 = "EN"
    //     0xabcc8c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcc90: ldr             x17, [x17, #0xb58]
    // 0xabcc94: StoreField: r0->field_f = r17
    //     0xabcc94: stur            w17, [x0, #0xf]
    // 0xabcc98: r17 = "The weather is not that good today...but still it makes me wanna play Badminton!"
    //     0xabcc98: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f228] "The weather is not that good today...but still it makes me wanna play Badminton!"
    //     0xabcc9c: ldr             x17, [x17, #0x228]
    // 0xabcca0: StoreField: r0->field_13 = r17
    //     0xabcca0: stur            w17, [x0, #0x13]
    // 0xabcca4: r17 = "CN"
    //     0xabcca4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcca8: ldr             x17, [x17, #0xb30]
    // 0xabccac: ArrayStore: r0[0] = r17  ; List_4
    //     0xabccac: stur            w17, [x0, #0x17]
    // 0xabccb0: r17 = "今天天气不是很好. . .不过也阻止不了我想要打羽球的决心！"
    //     0xabccb0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f230] "今天天气不是很好. . .不过也阻止不了我想要打羽球的决心！"
    //     0xabccb4: ldr             x17, [x17, #0x230]
    // 0xabccb8: StoreField: r0->field_1b = r17
    //     0xabccb8: stur            w17, [x0, #0x1b]
    // 0xabccbc: r17 = "TW"
    //     0xabccbc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabccc0: ldr             x17, [x17, #0xb40]
    // 0xabccc4: StoreField: r0->field_1f = r17
    //     0xabccc4: stur            w17, [x0, #0x1f]
    // 0xabccc8: r17 = "今天天氣不是很好. . .不過也阻止不了我想要打羽球的決心！"
    //     0xabccc8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f238] "今天天氣不是很好. . .不過也阻止不了我想要打羽球的決心！"
    //     0xabcccc: ldr             x17, [x17, #0x238]
    // 0xabccd0: StoreField: r0->field_23 = r17
    //     0xabccd0: stur            w17, [x0, #0x23]
    // 0xabccd4: r17 = "JP"
    //     0xabccd4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabccd8: ldr             x17, [x17, #0xb50]
    // 0xabccdc: StoreField: r0->field_27 = r17
    //     0xabccdc: stur            w17, [x0, #0x27]
    // 0xabcce0: r17 = "今日の天気は微妙だけど．．．俺がバドやりたい気持ちは変わらない！"
    //     0xabcce0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f240] "今日の天気は微妙だけど．．．俺がバドやりたい気持ちは変わらない！"
    //     0xabcce4: ldr             x17, [x17, #0x240]
    // 0xabcce8: StoreField: r0->field_2b = r17
    //     0xabcce8: stur            w17, [x0, #0x2b]
    // 0xabccec: stp             x0, NULL, [SP]
    // 0xabccf0: r0 = Map._fromLiteral()
    //     0xabccf0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabccf4: b               #0xabe9c4
    // 0xabccf8: ldur            x0, [fp, #-0x18]
    // 0xabccfc: b               #0xabe9c4
    // 0xabcd00: r16 = "guanNormalChat"
    //     0xabcd00: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f248] "guanNormalChat"
    //     0xabcd04: ldr             x16, [x16, #0x248]
    // 0xabcd08: ldur            lr, [fp, #-8]
    // 0xabcd0c: stp             lr, x16, [SP]
    // 0xabcd10: r0 = ==()
    //     0xabcd10: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabcd14: tbnz            w0, #4, #0xabce80
    // 0xabcd18: r1 = Null
    //     0xabcd18: mov             x1, NULL
    // 0xabcd1c: r2 = 16
    //     0xabcd1c: movz            x2, #0x10
    // 0xabcd20: r0 = AllocateArray()
    //     0xabcd20: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcd24: r17 = "EN"
    //     0xabcd24: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcd28: ldr             x17, [x17, #0xb58]
    // 0xabcd2c: StoreField: r0->field_f = r17
    //     0xabcd2c: stur            w17, [x0, #0xf]
    // 0xabcd30: r17 = "After the Trial of Technique, I realize I\'m still lacking in skills..."
    //     0xabcd30: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f250] "After the Trial of Technique, I realize I\'m still lacking in skills..."
    //     0xabcd34: ldr             x17, [x17, #0x250]
    // 0xabcd38: StoreField: r0->field_13 = r17
    //     0xabcd38: stur            w17, [x0, #0x13]
    // 0xabcd3c: r17 = "CN"
    //     0xabcd3c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcd40: ldr             x17, [x17, #0xb30]
    // 0xabcd44: ArrayStore: r0[0] = r17  ; List_4
    //     0xabcd44: stur            w17, [x0, #0x17]
    // 0xabcd48: r17 = "完成了【技术的试炼】后，我发现我的技术还有许多不完善的地方．．．"
    //     0xabcd48: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f258] "完成了【技术的试炼】后，我发现我的技术还有许多不完善的地方．．．"
    //     0xabcd4c: ldr             x17, [x17, #0x258]
    // 0xabcd50: StoreField: r0->field_1b = r17
    //     0xabcd50: stur            w17, [x0, #0x1b]
    // 0xabcd54: r17 = "TW"
    //     0xabcd54: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabcd58: ldr             x17, [x17, #0xb40]
    // 0xabcd5c: StoreField: r0->field_1f = r17
    //     0xabcd5c: stur            w17, [x0, #0x1f]
    // 0xabcd60: r17 = "完成了【技術的試煉】後，我發現我的技術還有許多不完善的地方． ． ．"
    //     0xabcd60: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f260] "完成了【技術的試煉】後，我發現我的技術還有許多不完善的地方． ． ．"
    //     0xabcd64: ldr             x17, [x17, #0x260]
    // 0xabcd68: StoreField: r0->field_23 = r17
    //     0xabcd68: stur            w17, [x0, #0x23]
    // 0xabcd6c: r17 = "JP"
    //     0xabcd6c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabcd70: ldr             x17, [x17, #0xb50]
    // 0xabcd74: StoreField: r0->field_27 = r17
    //     0xabcd74: stur            w17, [x0, #0x27]
    // 0xabcd78: r17 = "「技術の試練」を乗り越えたら、自分の技術がどれくらい足りてないかもわかってきた。だから．．．"
    //     0xabcd78: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f268] "「技術の試練」を乗り越えたら、自分の技術がどれくらい足りてないかもわかってきた。だから．．．"
    //     0xabcd7c: ldr             x17, [x17, #0x268]
    // 0xabcd80: StoreField: r0->field_2b = r17
    //     0xabcd80: stur            w17, [x0, #0x2b]
    // 0xabcd84: stp             x0, NULL, [SP]
    // 0xabcd88: r0 = Map._fromLiteral()
    //     0xabcd88: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcd8c: mov             x3, x0
    // 0xabcd90: stur            x3, [fp, #-0x18]
    // 0xabcd94: r0 = LoadStaticField(0xb54)
    //     0xabcd94: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabcd98: ldr             x0, [x0, #0x16a8]
    // 0xabcd9c: cmp             w0, NULL
    // 0xabcda0: b.ne            #0xabcdac
    // 0xabcda4: r0 = Null
    //     0xabcda4: mov             x0, NULL
    // 0xabcda8: b               #0xabcdd4
    // 0xabcdac: r17 = 327
    //     0xabcdac: movz            x17, #0x147
    // 0xabcdb0: ldr             w1, [x0, x17]
    // 0xabcdb4: DecompressPointer r1
    //     0xabcdb4: add             x1, x1, HEAP, lsl #32
    // 0xabcdb8: r0 = LoadClassIdInstr(r1)
    //     0xabcdb8: ldur            x0, [x1, #-1]
    //     0xabcdbc: ubfx            x0, x0, #0xc, #0x14
    // 0xabcdc0: r2 = "storyGuanBlack2"
    //     0xabcdc0: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f270] "storyGuanBlack2"
    //     0xabcdc4: ldr             x2, [x2, #0x270]
    // 0xabcdc8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabcdc8: sub             lr, x0, #0xb4
    //     0xabcdcc: ldr             lr, [x21, lr, lsl #3]
    //     0xabcdd0: blr             lr
    // 0xabcdd4: r1 = 59
    //     0xabcdd4: movz            x1, #0x3b
    // 0xabcdd8: branchIfSmi(r0, 0xabcde4)
    //     0xabcdd8: tbz             w0, #0, #0xabcde4
    // 0xabcddc: r1 = LoadClassIdInstr(r0)
    //     0xabcddc: ldur            x1, [x0, #-1]
    //     0xabcde0: ubfx            x1, x1, #0xc, #0x14
    // 0xabcde4: r16 = true
    //     0xabcde4: add             x16, NULL, #0x20  ; true
    // 0xabcde8: stp             x16, x0, [SP]
    // 0xabcdec: mov             x0, x1
    // 0xabcdf0: mov             lr, x0
    // 0xabcdf4: ldr             lr, [x21, lr, lsl #3]
    // 0xabcdf8: blr             lr
    // 0xabcdfc: tbnz            w0, #4, #0xabce78
    // 0xabce00: r1 = Null
    //     0xabce00: mov             x1, NULL
    // 0xabce04: r2 = 16
    //     0xabce04: movz            x2, #0x10
    // 0xabce08: r0 = AllocateArray()
    //     0xabce08: bl              #0x1502560  ; AllocateArrayStub
    // 0xabce0c: r17 = "EN"
    //     0xabce0c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabce10: ldr             x17, [x17, #0xb58]
    // 0xabce14: StoreField: r0->field_f = r17
    //     0xabce14: stur            w17, [x0, #0xf]
    // 0xabce18: r17 = "I know I failed, but...I will never give up, no matter what everyone says!"
    //     0xabce18: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f278] "I know I failed, but...I will never give up, no matter what everyone says!"
    //     0xabce1c: ldr             x17, [x17, #0x278]
    // 0xabce20: StoreField: r0->field_13 = r17
    //     0xabce20: stur            w17, [x0, #0x13]
    // 0xabce24: r17 = "CN"
    //     0xabce24: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabce28: ldr             x17, [x17, #0xb30]
    // 0xabce2c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabce2c: stur            w17, [x0, #0x17]
    // 0xabce30: r17 = "我知道我已经失败了. . .可是不管别人说了什么，我都永远不会放弃！"
    //     0xabce30: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f280] "我知道我已经失败了. . .可是不管别人说了什么，我都永远不会放弃！"
    //     0xabce34: ldr             x17, [x17, #0x280]
    // 0xabce38: StoreField: r0->field_1b = r17
    //     0xabce38: stur            w17, [x0, #0x1b]
    // 0xabce3c: r17 = "TW"
    //     0xabce3c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabce40: ldr             x17, [x17, #0xb40]
    // 0xabce44: StoreField: r0->field_1f = r17
    //     0xabce44: stur            w17, [x0, #0x1f]
    // 0xabce48: r17 = "我知道我已經失敗了. . .可是不管別人說了什麼，我都永遠不會放棄！"
    //     0xabce48: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f288] "我知道我已經失敗了. . .可是不管別人說了什麼，我都永遠不會放棄！"
    //     0xabce4c: ldr             x17, [x17, #0x288]
    // 0xabce50: StoreField: r0->field_23 = r17
    //     0xabce50: stur            w17, [x0, #0x23]
    // 0xabce54: r17 = "JP"
    //     0xabce54: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabce58: ldr             x17, [x17, #0xb50]
    // 0xabce5c: StoreField: r0->field_27 = r17
    //     0xabce5c: stur            w17, [x0, #0x27]
    // 0xabce60: r17 = "確かに俺は失敗したかもしれんが．．．他人が何を言おうとでも、俺は絶対に諦めないんだ！"
    //     0xabce60: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f290] "確かに俺は失敗したかもしれんが．．．他人が何を言おうとでも、俺は絶対に諦めないんだ！"
    //     0xabce64: ldr             x17, [x17, #0x290]
    // 0xabce68: StoreField: r0->field_2b = r17
    //     0xabce68: stur            w17, [x0, #0x2b]
    // 0xabce6c: stp             x0, NULL, [SP]
    // 0xabce70: r0 = Map._fromLiteral()
    //     0xabce70: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabce74: b               #0xabe9c4
    // 0xabce78: ldur            x0, [fp, #-0x18]
    // 0xabce7c: b               #0xabe9c4
    // 0xabce80: r16 = "yukiNormalChat"
    //     0xabce80: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f298] "yukiNormalChat"
    //     0xabce84: ldr             x16, [x16, #0x298]
    // 0xabce88: ldur            lr, [fp, #-8]
    // 0xabce8c: stp             lr, x16, [SP]
    // 0xabce90: r0 = ==()
    //     0xabce90: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabce94: tbnz            w0, #4, #0xabd000
    // 0xabce98: r1 = Null
    //     0xabce98: mov             x1, NULL
    // 0xabce9c: r2 = 16
    //     0xabce9c: movz            x2, #0x10
    // 0xabcea0: r0 = AllocateArray()
    //     0xabcea0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcea4: r17 = "EN"
    //     0xabcea4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcea8: ldr             x17, [x17, #0xb58]
    // 0xabceac: StoreField: r0->field_f = r17
    //     0xabceac: stur            w17, [x0, #0xf]
    // 0xabceb0: r17 = "I know you and Guan have been busy training for the State qualifier..."
    //     0xabceb0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2a0] "I know you and Guan have been busy training for the State qualifier..."
    //     0xabceb4: ldr             x17, [x17, #0x2a0]
    // 0xabceb8: StoreField: r0->field_13 = r17
    //     0xabceb8: stur            w17, [x0, #0x13]
    // 0xabcebc: r17 = "CN"
    //     0xabcebc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcec0: ldr             x17, [x17, #0xb30]
    // 0xabcec4: ArrayStore: r0[0] = r17  ; List_4
    //     0xabcec4: stur            w17, [x0, #0x17]
    // 0xabcec8: r17 = "我知道你和阿原为了州级大赛都很努力地在训练．．．"
    //     0xabcec8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2a8] "我知道你和阿原为了州级大赛都很努力地在训练．．．"
    //     0xabcecc: ldr             x17, [x17, #0x2a8]
    // 0xabced0: StoreField: r0->field_1b = r17
    //     0xabced0: stur            w17, [x0, #0x1b]
    // 0xabced4: r17 = "TW"
    //     0xabced4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabced8: ldr             x17, [x17, #0xb40]
    // 0xabcedc: StoreField: r0->field_1f = r17
    //     0xabcedc: stur            w17, [x0, #0x1f]
    // 0xabcee0: r17 = "我知道你和阿原為了州級大賽都很努力地在訓練． ． ．"
    //     0xabcee0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2b0] "我知道你和阿原為了州級大賽都很努力地在訓練． ． ．"
    //     0xabcee4: ldr             x17, [x17, #0x2b0]
    // 0xabcee8: StoreField: r0->field_23 = r17
    //     0xabcee8: stur            w17, [x0, #0x23]
    // 0xabceec: r17 = "JP"
    //     0xabceec: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabcef0: ldr             x17, [x17, #0xb50]
    // 0xabcef4: StoreField: r0->field_27 = r17
    //     0xabcef4: stur            w17, [x0, #0x27]
    // 0xabcef8: r17 = "地区予選のためにグアンと必死でトレーニングしてるのはわかってるけど．．．"
    //     0xabcef8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2b8] "地区予選のためにグアンと必死でトレーニングしてるのはわかってるけど．．．"
    //     0xabcefc: ldr             x17, [x17, #0x2b8]
    // 0xabcf00: StoreField: r0->field_2b = r17
    //     0xabcf00: stur            w17, [x0, #0x2b]
    // 0xabcf04: stp             x0, NULL, [SP]
    // 0xabcf08: r0 = Map._fromLiteral()
    //     0xabcf08: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcf0c: mov             x3, x0
    // 0xabcf10: stur            x3, [fp, #-0x18]
    // 0xabcf14: r0 = LoadStaticField(0xb54)
    //     0xabcf14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabcf18: ldr             x0, [x0, #0x16a8]
    // 0xabcf1c: cmp             w0, NULL
    // 0xabcf20: b.ne            #0xabcf2c
    // 0xabcf24: r0 = Null
    //     0xabcf24: mov             x0, NULL
    // 0xabcf28: b               #0xabcf54
    // 0xabcf2c: r17 = 327
    //     0xabcf2c: movz            x17, #0x147
    // 0xabcf30: ldr             w1, [x0, x17]
    // 0xabcf34: DecompressPointer r1
    //     0xabcf34: add             x1, x1, HEAP, lsl #32
    // 0xabcf38: r0 = LoadClassIdInstr(r1)
    //     0xabcf38: ldur            x0, [x1, #-1]
    //     0xabcf3c: ubfx            x0, x0, #0xc, #0x14
    // 0xabcf40: r2 = "storyGuanBlack2"
    //     0xabcf40: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f270] "storyGuanBlack2"
    //     0xabcf44: ldr             x2, [x2, #0x270]
    // 0xabcf48: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabcf48: sub             lr, x0, #0xb4
    //     0xabcf4c: ldr             lr, [x21, lr, lsl #3]
    //     0xabcf50: blr             lr
    // 0xabcf54: r1 = 59
    //     0xabcf54: movz            x1, #0x3b
    // 0xabcf58: branchIfSmi(r0, 0xabcf64)
    //     0xabcf58: tbz             w0, #0, #0xabcf64
    // 0xabcf5c: r1 = LoadClassIdInstr(r0)
    //     0xabcf5c: ldur            x1, [x0, #-1]
    //     0xabcf60: ubfx            x1, x1, #0xc, #0x14
    // 0xabcf64: r16 = true
    //     0xabcf64: add             x16, NULL, #0x20  ; true
    // 0xabcf68: stp             x16, x0, [SP]
    // 0xabcf6c: mov             x0, x1
    // 0xabcf70: mov             lr, x0
    // 0xabcf74: ldr             lr, [x21, lr, lsl #3]
    // 0xabcf78: blr             lr
    // 0xabcf7c: tbnz            w0, #4, #0xabcff8
    // 0xabcf80: r1 = Null
    //     0xabcf80: mov             x1, NULL
    // 0xabcf84: r2 = 16
    //     0xabcf84: movz            x2, #0x10
    // 0xabcf88: r0 = AllocateArray()
    //     0xabcf88: bl              #0x1502560  ; AllocateArrayStub
    // 0xabcf8c: r17 = "EN"
    //     0xabcf8c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabcf90: ldr             x17, [x17, #0xb58]
    // 0xabcf94: StoreField: r0->field_f = r17
    //     0xabcf94: stur            w17, [x0, #0xf]
    // 0xabcf98: r17 = "I can\'t believe Guan failed to enter the State Tournament this year..."
    //     0xabcf98: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2c0] "I can\'t believe Guan failed to enter the State Tournament this year..."
    //     0xabcf9c: ldr             x17, [x17, #0x2c0]
    // 0xabcfa0: StoreField: r0->field_13 = r17
    //     0xabcfa0: stur            w17, [x0, #0x13]
    // 0xabcfa4: r17 = "CN"
    //     0xabcfa4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabcfa8: ldr             x17, [x17, #0xb30]
    // 0xabcfac: ArrayStore: r0[0] = r17  ; List_4
    //     0xabcfac: stur            w17, [x0, #0x17]
    // 0xabcfb0: r17 = "真不敢相信阿原今年会在州级选拔赛落选. . ."
    //     0xabcfb0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2c8] "真不敢相信阿原今年会在州级选拔赛落选. . ."
    //     0xabcfb4: ldr             x17, [x17, #0x2c8]
    // 0xabcfb8: StoreField: r0->field_1b = r17
    //     0xabcfb8: stur            w17, [x0, #0x1b]
    // 0xabcfbc: r17 = "TW"
    //     0xabcfbc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabcfc0: ldr             x17, [x17, #0xb40]
    // 0xabcfc4: StoreField: r0->field_1f = r17
    //     0xabcfc4: stur            w17, [x0, #0x1f]
    // 0xabcfc8: r17 = "真不敢相信阿原今年會在州級選拔賽落選. . ."
    //     0xabcfc8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2d0] "真不敢相信阿原今年會在州級選拔賽落選. . ."
    //     0xabcfcc: ldr             x17, [x17, #0x2d0]
    // 0xabcfd0: StoreField: r0->field_23 = r17
    //     0xabcfd0: stur            w17, [x0, #0x23]
    // 0xabcfd4: r17 = "JP"
    //     0xabcfd4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabcfd8: ldr             x17, [x17, #0xb50]
    // 0xabcfdc: StoreField: r0->field_27 = r17
    //     0xabcfdc: stur            w17, [x0, #0x27]
    // 0xabcfe0: r17 = "いまだにグアンが地区大会予選で落ちたとは信じられない．．．"
    //     0xabcfe0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2d8] "いまだにグアンが地区大会予選で落ちたとは信じられない．．．"
    //     0xabcfe4: ldr             x17, [x17, #0x2d8]
    // 0xabcfe8: StoreField: r0->field_2b = r17
    //     0xabcfe8: stur            w17, [x0, #0x2b]
    // 0xabcfec: stp             x0, NULL, [SP]
    // 0xabcff0: r0 = Map._fromLiteral()
    //     0xabcff0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabcff4: b               #0xabe9c4
    // 0xabcff8: ldur            x0, [fp, #-0x18]
    // 0xabcffc: b               #0xabe9c4
    // 0xabd000: r16 = "yukiNormalChat2"
    //     0xabd000: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f2e0] "yukiNormalChat2"
    //     0xabd004: ldr             x16, [x16, #0x2e0]
    // 0xabd008: ldur            lr, [fp, #-8]
    // 0xabd00c: stp             lr, x16, [SP]
    // 0xabd010: r0 = ==()
    //     0xabd010: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabd014: tbnz            w0, #4, #0xabd180
    // 0xabd018: r1 = Null
    //     0xabd018: mov             x1, NULL
    // 0xabd01c: r2 = 16
    //     0xabd01c: movz            x2, #0x10
    // 0xabd020: r0 = AllocateArray()
    //     0xabd020: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd024: r17 = "EN"
    //     0xabd024: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd028: ldr             x17, [x17, #0xb58]
    // 0xabd02c: StoreField: r0->field_f = r17
    //     0xabd02c: stur            w17, [x0, #0xf]
    // 0xabd030: r17 = "But, don\'t push yourself too hard, okay\? I\'m worried..."
    //     0xabd030: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2e8] "But, don\'t push yourself too hard, okay\? I\'m worried..."
    //     0xabd034: ldr             x17, [x17, #0x2e8]
    // 0xabd038: StoreField: r0->field_13 = r17
    //     0xabd038: stur            w17, [x0, #0x13]
    // 0xabd03c: r17 = "CN"
    //     0xabd03c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd040: ldr             x17, [x17, #0xb30]
    // 0xabd044: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd044: stur            w17, [x0, #0x17]
    // 0xabd048: r17 = "可是，别把自己逼得太紧，可以吗？我很担心．．．"
    //     0xabd048: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2f0] "可是，别把自己逼得太紧，可以吗？我很担心．．．"
    //     0xabd04c: ldr             x17, [x17, #0x2f0]
    // 0xabd050: StoreField: r0->field_1b = r17
    //     0xabd050: stur            w17, [x0, #0x1b]
    // 0xabd054: r17 = "TW"
    //     0xabd054: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd058: ldr             x17, [x17, #0xb40]
    // 0xabd05c: StoreField: r0->field_1f = r17
    //     0xabd05c: stur            w17, [x0, #0x1f]
    // 0xabd060: r17 = "可是，別把自己逼得太緊，可以嗎？我很擔心． ． ．"
    //     0xabd060: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f2f8] "可是，別把自己逼得太緊，可以嗎？我很擔心． ． ．"
    //     0xabd064: ldr             x17, [x17, #0x2f8]
    // 0xabd068: StoreField: r0->field_23 = r17
    //     0xabd068: stur            w17, [x0, #0x23]
    // 0xabd06c: r17 = "JP"
    //     0xabd06c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd070: ldr             x17, [x17, #0xb50]
    // 0xabd074: StoreField: r0->field_27 = r17
    //     0xabd074: stur            w17, [x0, #0x27]
    // 0xabd078: r17 = "あんまり無理しないって約束してくれる？心配しちゃうから．．．"
    //     0xabd078: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f300] "あんまり無理しないって約束してくれる？心配しちゃうから．．．"
    //     0xabd07c: ldr             x17, [x17, #0x300]
    // 0xabd080: StoreField: r0->field_2b = r17
    //     0xabd080: stur            w17, [x0, #0x2b]
    // 0xabd084: stp             x0, NULL, [SP]
    // 0xabd088: r0 = Map._fromLiteral()
    //     0xabd088: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd08c: mov             x3, x0
    // 0xabd090: stur            x3, [fp, #-0x18]
    // 0xabd094: r0 = LoadStaticField(0xb54)
    //     0xabd094: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd098: ldr             x0, [x0, #0x16a8]
    // 0xabd09c: cmp             w0, NULL
    // 0xabd0a0: b.ne            #0xabd0ac
    // 0xabd0a4: r0 = Null
    //     0xabd0a4: mov             x0, NULL
    // 0xabd0a8: b               #0xabd0d4
    // 0xabd0ac: r17 = 327
    //     0xabd0ac: movz            x17, #0x147
    // 0xabd0b0: ldr             w1, [x0, x17]
    // 0xabd0b4: DecompressPointer r1
    //     0xabd0b4: add             x1, x1, HEAP, lsl #32
    // 0xabd0b8: r0 = LoadClassIdInstr(r1)
    //     0xabd0b8: ldur            x0, [x1, #-1]
    //     0xabd0bc: ubfx            x0, x0, #0xc, #0x14
    // 0xabd0c0: r2 = "storyGuanBlack2"
    //     0xabd0c0: add             x2, PP, #0x2f, lsl #12  ; [pp+0x2f270] "storyGuanBlack2"
    //     0xabd0c4: ldr             x2, [x2, #0x270]
    // 0xabd0c8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd0c8: sub             lr, x0, #0xb4
    //     0xabd0cc: ldr             lr, [x21, lr, lsl #3]
    //     0xabd0d0: blr             lr
    // 0xabd0d4: r1 = 59
    //     0xabd0d4: movz            x1, #0x3b
    // 0xabd0d8: branchIfSmi(r0, 0xabd0e4)
    //     0xabd0d8: tbz             w0, #0, #0xabd0e4
    // 0xabd0dc: r1 = LoadClassIdInstr(r0)
    //     0xabd0dc: ldur            x1, [x0, #-1]
    //     0xabd0e0: ubfx            x1, x1, #0xc, #0x14
    // 0xabd0e4: r16 = true
    //     0xabd0e4: add             x16, NULL, #0x20  ; true
    // 0xabd0e8: stp             x16, x0, [SP]
    // 0xabd0ec: mov             x0, x1
    // 0xabd0f0: mov             lr, x0
    // 0xabd0f4: ldr             lr, [x21, lr, lsl #3]
    // 0xabd0f8: blr             lr
    // 0xabd0fc: tbnz            w0, #4, #0xabd178
    // 0xabd100: r1 = Null
    //     0xabd100: mov             x1, NULL
    // 0xabd104: r2 = 16
    //     0xabd104: movz            x2, #0x10
    // 0xabd108: r0 = AllocateArray()
    //     0xabd108: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd10c: r17 = "EN"
    //     0xabd10c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd110: ldr             x17, [x17, #0xb58]
    // 0xabd114: StoreField: r0->field_f = r17
    //     0xabd114: stur            w17, [x0, #0xf]
    // 0xabd118: r17 = "I hope he\'s not too sad about it..."
    //     0xabd118: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f308] "I hope he\'s not too sad about it..."
    //     0xabd11c: ldr             x17, [x17, #0x308]
    // 0xabd120: StoreField: r0->field_13 = r17
    //     0xabd120: stur            w17, [x0, #0x13]
    // 0xabd124: r17 = "CN"
    //     0xabd124: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd128: ldr             x17, [x17, #0xb30]
    // 0xabd12c: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd12c: stur            w17, [x0, #0x17]
    // 0xabd130: r17 = "希望他不要太难过吧. . ."
    //     0xabd130: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f310] "希望他不要太难过吧. . ."
    //     0xabd134: ldr             x17, [x17, #0x310]
    // 0xabd138: StoreField: r0->field_1b = r17
    //     0xabd138: stur            w17, [x0, #0x1b]
    // 0xabd13c: r17 = "TW"
    //     0xabd13c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd140: ldr             x17, [x17, #0xb40]
    // 0xabd144: StoreField: r0->field_1f = r17
    //     0xabd144: stur            w17, [x0, #0x1f]
    // 0xabd148: r17 = "希望他不要太難過吧. . ."
    //     0xabd148: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f318] "希望他不要太難過吧. . ."
    //     0xabd14c: ldr             x17, [x17, #0x318]
    // 0xabd150: StoreField: r0->field_23 = r17
    //     0xabd150: stur            w17, [x0, #0x23]
    // 0xabd154: r17 = "JP"
    //     0xabd154: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd158: ldr             x17, [x17, #0xb50]
    // 0xabd15c: StoreField: r0->field_27 = r17
    //     0xabd15c: stur            w17, [x0, #0x27]
    // 0xabd160: r17 = "悲しんでるでしょ．．．"
    //     0xabd160: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f320] "悲しんでるでしょ．．．"
    //     0xabd164: ldr             x17, [x17, #0x320]
    // 0xabd168: StoreField: r0->field_2b = r17
    //     0xabd168: stur            w17, [x0, #0x2b]
    // 0xabd16c: stp             x0, NULL, [SP]
    // 0xabd170: r0 = Map._fromLiteral()
    //     0xabd170: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd174: b               #0xabe9c4
    // 0xabd178: ldur            x0, [fp, #-0x18]
    // 0xabd17c: b               #0xabe9c4
    // 0xabd180: r16 = "randomVisitor"
    //     0xabd180: add             x16, PP, #0x11, lsl #12  ; [pp+0x11388] "randomVisitor"
    //     0xabd184: ldr             x16, [x16, #0x388]
    // 0xabd188: ldur            lr, [fp, #-8]
    // 0xabd18c: stp             lr, x16, [SP]
    // 0xabd190: r0 = ==()
    //     0xabd190: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabd194: tbnz            w0, #4, #0xabd844
    // 0xabd198: r1 = Null
    //     0xabd198: mov             x1, NULL
    // 0xabd19c: r2 = 16
    //     0xabd19c: movz            x2, #0x10
    // 0xabd1a0: r0 = AllocateArray()
    //     0xabd1a0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd1a4: r17 = "EN"
    //     0xabd1a4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd1a8: ldr             x17, [x17, #0xb58]
    // 0xabd1ac: StoreField: r0->field_f = r17
    //     0xabd1ac: stur            w17, [x0, #0xf]
    // 0xabd1b0: r17 = ""
    //     0xabd1b0: ldr             x17, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd1b4: StoreField: r0->field_13 = r17
    //     0xabd1b4: stur            w17, [x0, #0x13]
    // 0xabd1b8: r17 = "CN"
    //     0xabd1b8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd1bc: ldr             x17, [x17, #0xb30]
    // 0xabd1c0: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd1c0: stur            w17, [x0, #0x17]
    // 0xabd1c4: r17 = ""
    //     0xabd1c4: ldr             x17, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd1c8: StoreField: r0->field_1b = r17
    //     0xabd1c8: stur            w17, [x0, #0x1b]
    // 0xabd1cc: r17 = "TW"
    //     0xabd1cc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd1d0: ldr             x17, [x17, #0xb40]
    // 0xabd1d4: StoreField: r0->field_1f = r17
    //     0xabd1d4: stur            w17, [x0, #0x1f]
    // 0xabd1d8: r17 = ""
    //     0xabd1d8: ldr             x17, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd1dc: StoreField: r0->field_23 = r17
    //     0xabd1dc: stur            w17, [x0, #0x23]
    // 0xabd1e0: r17 = "JP"
    //     0xabd1e0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd1e4: ldr             x17, [x17, #0xb50]
    // 0xabd1e8: StoreField: r0->field_27 = r17
    //     0xabd1e8: stur            w17, [x0, #0x27]
    // 0xabd1ec: r17 = ""
    //     0xabd1ec: ldr             x17, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd1f0: StoreField: r0->field_2b = r17
    //     0xabd1f0: stur            w17, [x0, #0x2b]
    // 0xabd1f4: stp             x0, NULL, [SP]
    // 0xabd1f8: r0 = Map._fromLiteral()
    //     0xabd1f8: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd1fc: mov             x3, x0
    // 0xabd200: stur            x3, [fp, #-0x18]
    // 0xabd204: r0 = LoadStaticField(0xb54)
    //     0xabd204: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd208: ldr             x0, [x0, #0x16a8]
    // 0xabd20c: cmp             w0, NULL
    // 0xabd210: b.ne            #0xabd21c
    // 0xabd214: r0 = Null
    //     0xabd214: mov             x0, NULL
    // 0xabd218: b               #0xabd244
    // 0xabd21c: r17 = 351
    //     0xabd21c: movz            x17, #0x15f
    // 0xabd220: ldr             w1, [x0, x17]
    // 0xabd224: DecompressPointer r1
    //     0xabd224: add             x1, x1, HEAP, lsl #32
    // 0xabd228: r0 = LoadClassIdInstr(r1)
    //     0xabd228: ldur            x0, [x1, #-1]
    //     0xabd22c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd230: r2 = "visitor"
    //     0xabd230: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd234: ldr             x2, [x2, #0x2d8]
    // 0xabd238: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd238: sub             lr, x0, #0xb4
    //     0xabd23c: ldr             lr, [x21, lr, lsl #3]
    //     0xabd240: blr             lr
    // 0xabd244: r1 = 59
    //     0xabd244: movz            x1, #0x3b
    // 0xabd248: branchIfSmi(r0, 0xabd254)
    //     0xabd248: tbz             w0, #0, #0xabd254
    // 0xabd24c: r1 = LoadClassIdInstr(r0)
    //     0xabd24c: ldur            x1, [x0, #-1]
    //     0xabd250: ubfx            x1, x1, #0xc, #0x14
    // 0xabd254: r16 = "coach1"
    //     0xabd254: add             x16, PP, #0x11, lsl #12  ; [pp+0x113e0] "coach1"
    //     0xabd258: ldr             x16, [x16, #0x3e0]
    // 0xabd25c: stp             x16, x0, [SP]
    // 0xabd260: mov             x0, x1
    // 0xabd264: mov             lr, x0
    // 0xabd268: ldr             lr, [x21, lr, lsl #3]
    // 0xabd26c: blr             lr
    // 0xabd270: tbz             w0, #4, #0xabd2e4
    // 0xabd274: r0 = LoadStaticField(0xb54)
    //     0xabd274: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd278: ldr             x0, [x0, #0x16a8]
    // 0xabd27c: cmp             w0, NULL
    // 0xabd280: b.ne            #0xabd28c
    // 0xabd284: r0 = Null
    //     0xabd284: mov             x0, NULL
    // 0xabd288: b               #0xabd2b4
    // 0xabd28c: r17 = 351
    //     0xabd28c: movz            x17, #0x15f
    // 0xabd290: ldr             w1, [x0, x17]
    // 0xabd294: DecompressPointer r1
    //     0xabd294: add             x1, x1, HEAP, lsl #32
    // 0xabd298: r0 = LoadClassIdInstr(r1)
    //     0xabd298: ldur            x0, [x1, #-1]
    //     0xabd29c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd2a0: r2 = "visitor"
    //     0xabd2a0: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd2a4: ldr             x2, [x2, #0x2d8]
    // 0xabd2a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd2a8: sub             lr, x0, #0xb4
    //     0xabd2ac: ldr             lr, [x21, lr, lsl #3]
    //     0xabd2b0: blr             lr
    // 0xabd2b4: r1 = 59
    //     0xabd2b4: movz            x1, #0x3b
    // 0xabd2b8: branchIfSmi(r0, 0xabd2c4)
    //     0xabd2b8: tbz             w0, #0, #0xabd2c4
    // 0xabd2bc: r1 = LoadClassIdInstr(r0)
    //     0xabd2bc: ldur            x1, [x0, #-1]
    //     0xabd2c0: ubfx            x1, x1, #0xc, #0x14
    // 0xabd2c4: r16 = "coach2"
    //     0xabd2c4: add             x16, PP, #0x11, lsl #12  ; [pp+0x113d8] "coach2"
    //     0xabd2c8: ldr             x16, [x16, #0x3d8]
    // 0xabd2cc: stp             x16, x0, [SP]
    // 0xabd2d0: mov             x0, x1
    // 0xabd2d4: mov             lr, x0
    // 0xabd2d8: ldr             lr, [x21, lr, lsl #3]
    // 0xabd2dc: blr             lr
    // 0xabd2e0: tbnz            w0, #4, #0xabd35c
    // 0xabd2e4: r1 = Null
    //     0xabd2e4: mov             x1, NULL
    // 0xabd2e8: r2 = 16
    //     0xabd2e8: movz            x2, #0x10
    // 0xabd2ec: r0 = AllocateArray()
    //     0xabd2ec: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd2f0: r17 = "EN"
    //     0xabd2f0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd2f4: ldr             x17, [x17, #0xb58]
    // 0xabd2f8: StoreField: r0->field_f = r17
    //     0xabd2f8: stur            w17, [x0, #0xf]
    // 0xabd2fc: r17 = "A Renowned Coach has just arrived in Azura Town! Go check him out!"
    //     0xabd2fc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f328] "A Renowned Coach has just arrived in Azura Town! Go check him out!"
    //     0xabd300: ldr             x17, [x17, #0x328]
    // 0xabd304: StoreField: r0->field_13 = r17
    //     0xabd304: stur            w17, [x0, #0x13]
    // 0xabd308: r17 = "CN"
    //     0xabd308: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd30c: ldr             x17, [x17, #0xb30]
    // 0xabd310: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd310: stur            w17, [x0, #0x17]
    // 0xabd314: r17 = "一位有名的教练现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd314: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f330] "一位有名的教练现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd318: ldr             x17, [x17, #0x330]
    // 0xabd31c: StoreField: r0->field_1b = r17
    //     0xabd31c: stur            w17, [x0, #0x1b]
    // 0xabd320: r17 = "TW"
    //     0xabd320: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd324: ldr             x17, [x17, #0xb40]
    // 0xabd328: StoreField: r0->field_1f = r17
    //     0xabd328: stur            w17, [x0, #0x1f]
    // 0xabd32c: r17 = "一位有名的教練現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd32c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f338] "一位有名的教練現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd330: ldr             x17, [x17, #0x338]
    // 0xabd334: StoreField: r0->field_23 = r17
    //     0xabd334: stur            w17, [x0, #0x23]
    // 0xabd338: r17 = "JP"
    //     0xabd338: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd33c: ldr             x17, [x17, #0xb50]
    // 0xabd340: StoreField: r0->field_27 = r17
    //     0xabd340: stur            w17, [x0, #0x27]
    // 0xabd344: r17 = "有名なコーチがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd344: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f340] "有名なコーチがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd348: ldr             x17, [x17, #0x340]
    // 0xabd34c: StoreField: r0->field_2b = r17
    //     0xabd34c: stur            w17, [x0, #0x2b]
    // 0xabd350: stp             x0, NULL, [SP]
    // 0xabd354: r0 = Map._fromLiteral()
    //     0xabd354: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd358: b               #0xabe9c4
    // 0xabd35c: r0 = LoadStaticField(0xb54)
    //     0xabd35c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd360: ldr             x0, [x0, #0x16a8]
    // 0xabd364: cmp             w0, NULL
    // 0xabd368: b.ne            #0xabd374
    // 0xabd36c: r0 = Null
    //     0xabd36c: mov             x0, NULL
    // 0xabd370: b               #0xabd39c
    // 0xabd374: r17 = 351
    //     0xabd374: movz            x17, #0x15f
    // 0xabd378: ldr             w1, [x0, x17]
    // 0xabd37c: DecompressPointer r1
    //     0xabd37c: add             x1, x1, HEAP, lsl #32
    // 0xabd380: r0 = LoadClassIdInstr(r1)
    //     0xabd380: ldur            x0, [x1, #-1]
    //     0xabd384: ubfx            x0, x0, #0xc, #0x14
    // 0xabd388: r2 = "visitor"
    //     0xabd388: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd38c: ldr             x2, [x2, #0x2d8]
    // 0xabd390: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd390: sub             lr, x0, #0xb4
    //     0xabd394: ldr             lr, [x21, lr, lsl #3]
    //     0xabd398: blr             lr
    // 0xabd39c: r1 = 59
    //     0xabd39c: movz            x1, #0x3b
    // 0xabd3a0: branchIfSmi(r0, 0xabd3ac)
    //     0xabd3a0: tbz             w0, #0, #0xabd3ac
    // 0xabd3a4: r1 = LoadClassIdInstr(r0)
    //     0xabd3a4: ldur            x1, [x0, #-1]
    //     0xabd3a8: ubfx            x1, x1, #0xc, #0x14
    // 0xabd3ac: r16 = "collector1"
    //     0xabd3ac: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f348] "collector1"
    //     0xabd3b0: ldr             x16, [x16, #0x348]
    // 0xabd3b4: stp             x16, x0, [SP]
    // 0xabd3b8: mov             x0, x1
    // 0xabd3bc: mov             lr, x0
    // 0xabd3c0: ldr             lr, [x21, lr, lsl #3]
    // 0xabd3c4: blr             lr
    // 0xabd3c8: tbz             w0, #4, #0xabd58c
    // 0xabd3cc: r0 = LoadStaticField(0xb54)
    //     0xabd3cc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd3d0: ldr             x0, [x0, #0x16a8]
    // 0xabd3d4: cmp             w0, NULL
    // 0xabd3d8: b.ne            #0xabd3e4
    // 0xabd3dc: r0 = Null
    //     0xabd3dc: mov             x0, NULL
    // 0xabd3e0: b               #0xabd40c
    // 0xabd3e4: r17 = 351
    //     0xabd3e4: movz            x17, #0x15f
    // 0xabd3e8: ldr             w1, [x0, x17]
    // 0xabd3ec: DecompressPointer r1
    //     0xabd3ec: add             x1, x1, HEAP, lsl #32
    // 0xabd3f0: r0 = LoadClassIdInstr(r1)
    //     0xabd3f0: ldur            x0, [x1, #-1]
    //     0xabd3f4: ubfx            x0, x0, #0xc, #0x14
    // 0xabd3f8: r2 = "visitor"
    //     0xabd3f8: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd3fc: ldr             x2, [x2, #0x2d8]
    // 0xabd400: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd400: sub             lr, x0, #0xb4
    //     0xabd404: ldr             lr, [x21, lr, lsl #3]
    //     0xabd408: blr             lr
    // 0xabd40c: r1 = 59
    //     0xabd40c: movz            x1, #0x3b
    // 0xabd410: branchIfSmi(r0, 0xabd41c)
    //     0xabd410: tbz             w0, #0, #0xabd41c
    // 0xabd414: r1 = LoadClassIdInstr(r0)
    //     0xabd414: ldur            x1, [x0, #-1]
    //     0xabd418: ubfx            x1, x1, #0xc, #0x14
    // 0xabd41c: r16 = "collector2"
    //     0xabd41c: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f350] "collector2"
    //     0xabd420: ldr             x16, [x16, #0x350]
    // 0xabd424: stp             x16, x0, [SP]
    // 0xabd428: mov             x0, x1
    // 0xabd42c: mov             lr, x0
    // 0xabd430: ldr             lr, [x21, lr, lsl #3]
    // 0xabd434: blr             lr
    // 0xabd438: tbz             w0, #4, #0xabd58c
    // 0xabd43c: r0 = LoadStaticField(0xb54)
    //     0xabd43c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd440: ldr             x0, [x0, #0x16a8]
    // 0xabd444: cmp             w0, NULL
    // 0xabd448: b.ne            #0xabd454
    // 0xabd44c: r0 = Null
    //     0xabd44c: mov             x0, NULL
    // 0xabd450: b               #0xabd47c
    // 0xabd454: r17 = 351
    //     0xabd454: movz            x17, #0x15f
    // 0xabd458: ldr             w1, [x0, x17]
    // 0xabd45c: DecompressPointer r1
    //     0xabd45c: add             x1, x1, HEAP, lsl #32
    // 0xabd460: r0 = LoadClassIdInstr(r1)
    //     0xabd460: ldur            x0, [x1, #-1]
    //     0xabd464: ubfx            x0, x0, #0xc, #0x14
    // 0xabd468: r2 = "visitor"
    //     0xabd468: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd46c: ldr             x2, [x2, #0x2d8]
    // 0xabd470: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd470: sub             lr, x0, #0xb4
    //     0xabd474: ldr             lr, [x21, lr, lsl #3]
    //     0xabd478: blr             lr
    // 0xabd47c: r1 = 59
    //     0xabd47c: movz            x1, #0x3b
    // 0xabd480: branchIfSmi(r0, 0xabd48c)
    //     0xabd480: tbz             w0, #0, #0xabd48c
    // 0xabd484: r1 = LoadClassIdInstr(r0)
    //     0xabd484: ldur            x1, [x0, #-1]
    //     0xabd488: ubfx            x1, x1, #0xc, #0x14
    // 0xabd48c: r16 = "collector3"
    //     0xabd48c: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f358] "collector3"
    //     0xabd490: ldr             x16, [x16, #0x358]
    // 0xabd494: stp             x16, x0, [SP]
    // 0xabd498: mov             x0, x1
    // 0xabd49c: mov             lr, x0
    // 0xabd4a0: ldr             lr, [x21, lr, lsl #3]
    // 0xabd4a4: blr             lr
    // 0xabd4a8: tbz             w0, #4, #0xabd58c
    // 0xabd4ac: r0 = LoadStaticField(0xb54)
    //     0xabd4ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd4b0: ldr             x0, [x0, #0x16a8]
    // 0xabd4b4: cmp             w0, NULL
    // 0xabd4b8: b.ne            #0xabd4c4
    // 0xabd4bc: r0 = Null
    //     0xabd4bc: mov             x0, NULL
    // 0xabd4c0: b               #0xabd4ec
    // 0xabd4c4: r17 = 351
    //     0xabd4c4: movz            x17, #0x15f
    // 0xabd4c8: ldr             w1, [x0, x17]
    // 0xabd4cc: DecompressPointer r1
    //     0xabd4cc: add             x1, x1, HEAP, lsl #32
    // 0xabd4d0: r0 = LoadClassIdInstr(r1)
    //     0xabd4d0: ldur            x0, [x1, #-1]
    //     0xabd4d4: ubfx            x0, x0, #0xc, #0x14
    // 0xabd4d8: r2 = "visitor"
    //     0xabd4d8: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd4dc: ldr             x2, [x2, #0x2d8]
    // 0xabd4e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd4e0: sub             lr, x0, #0xb4
    //     0xabd4e4: ldr             lr, [x21, lr, lsl #3]
    //     0xabd4e8: blr             lr
    // 0xabd4ec: r1 = 59
    //     0xabd4ec: movz            x1, #0x3b
    // 0xabd4f0: branchIfSmi(r0, 0xabd4fc)
    //     0xabd4f0: tbz             w0, #0, #0xabd4fc
    // 0xabd4f4: r1 = LoadClassIdInstr(r0)
    //     0xabd4f4: ldur            x1, [x0, #-1]
    //     0xabd4f8: ubfx            x1, x1, #0xc, #0x14
    // 0xabd4fc: r16 = "collector4"
    //     0xabd4fc: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f360] "collector4"
    //     0xabd500: ldr             x16, [x16, #0x360]
    // 0xabd504: stp             x16, x0, [SP]
    // 0xabd508: mov             x0, x1
    // 0xabd50c: mov             lr, x0
    // 0xabd510: ldr             lr, [x21, lr, lsl #3]
    // 0xabd514: blr             lr
    // 0xabd518: tbz             w0, #4, #0xabd58c
    // 0xabd51c: r0 = LoadStaticField(0xb54)
    //     0xabd51c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd520: ldr             x0, [x0, #0x16a8]
    // 0xabd524: cmp             w0, NULL
    // 0xabd528: b.ne            #0xabd534
    // 0xabd52c: r0 = Null
    //     0xabd52c: mov             x0, NULL
    // 0xabd530: b               #0xabd55c
    // 0xabd534: r17 = 351
    //     0xabd534: movz            x17, #0x15f
    // 0xabd538: ldr             w1, [x0, x17]
    // 0xabd53c: DecompressPointer r1
    //     0xabd53c: add             x1, x1, HEAP, lsl #32
    // 0xabd540: r0 = LoadClassIdInstr(r1)
    //     0xabd540: ldur            x0, [x1, #-1]
    //     0xabd544: ubfx            x0, x0, #0xc, #0x14
    // 0xabd548: r2 = "visitor"
    //     0xabd548: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd54c: ldr             x2, [x2, #0x2d8]
    // 0xabd550: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd550: sub             lr, x0, #0xb4
    //     0xabd554: ldr             lr, [x21, lr, lsl #3]
    //     0xabd558: blr             lr
    // 0xabd55c: r1 = 59
    //     0xabd55c: movz            x1, #0x3b
    // 0xabd560: branchIfSmi(r0, 0xabd56c)
    //     0xabd560: tbz             w0, #0, #0xabd56c
    // 0xabd564: r1 = LoadClassIdInstr(r0)
    //     0xabd564: ldur            x1, [x0, #-1]
    //     0xabd568: ubfx            x1, x1, #0xc, #0x14
    // 0xabd56c: r16 = "collector5"
    //     0xabd56c: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f368] "collector5"
    //     0xabd570: ldr             x16, [x16, #0x368]
    // 0xabd574: stp             x16, x0, [SP]
    // 0xabd578: mov             x0, x1
    // 0xabd57c: mov             lr, x0
    // 0xabd580: ldr             lr, [x21, lr, lsl #3]
    // 0xabd584: blr             lr
    // 0xabd588: tbnz            w0, #4, #0xabd604
    // 0xabd58c: r1 = Null
    //     0xabd58c: mov             x1, NULL
    // 0xabd590: r2 = 16
    //     0xabd590: movz            x2, #0x10
    // 0xabd594: r0 = AllocateArray()
    //     0xabd594: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd598: r17 = "EN"
    //     0xabd598: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd59c: ldr             x17, [x17, #0xb58]
    // 0xabd5a0: StoreField: r0->field_f = r17
    //     0xabd5a0: stur            w17, [x0, #0xf]
    // 0xabd5a4: r17 = "A Travelling Collector has just arrived in Azura Town! Go check him out!"
    //     0xabd5a4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f370] "A Travelling Collector has just arrived in Azura Town! Go check him out!"
    //     0xabd5a8: ldr             x17, [x17, #0x370]
    // 0xabd5ac: StoreField: r0->field_13 = r17
    //     0xabd5ac: stur            w17, [x0, #0x13]
    // 0xabd5b0: r17 = "CN"
    //     0xabd5b0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd5b4: ldr             x17, [x17, #0xb30]
    // 0xabd5b8: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd5b8: stur            w17, [x0, #0x17]
    // 0xabd5bc: r17 = "一位流浪收藏家现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd5bc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f378] "一位流浪收藏家现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd5c0: ldr             x17, [x17, #0x378]
    // 0xabd5c4: StoreField: r0->field_1b = r17
    //     0xabd5c4: stur            w17, [x0, #0x1b]
    // 0xabd5c8: r17 = "TW"
    //     0xabd5c8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd5cc: ldr             x17, [x17, #0xb40]
    // 0xabd5d0: StoreField: r0->field_1f = r17
    //     0xabd5d0: stur            w17, [x0, #0x1f]
    // 0xabd5d4: r17 = "一位流浪收藏家現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd5d4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f380] "一位流浪收藏家現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd5d8: ldr             x17, [x17, #0x380]
    // 0xabd5dc: StoreField: r0->field_23 = r17
    //     0xabd5dc: stur            w17, [x0, #0x23]
    // 0xabd5e0: r17 = "JP"
    //     0xabd5e0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd5e4: ldr             x17, [x17, #0xb50]
    // 0xabd5e8: StoreField: r0->field_27 = r17
    //     0xabd5e8: stur            w17, [x0, #0x27]
    // 0xabd5ec: r17 = "旅のコレクターがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd5ec: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f388] "旅のコレクターがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd5f0: ldr             x17, [x17, #0x388]
    // 0xabd5f4: StoreField: r0->field_2b = r17
    //     0xabd5f4: stur            w17, [x0, #0x2b]
    // 0xabd5f8: stp             x0, NULL, [SP]
    // 0xabd5fc: r0 = Map._fromLiteral()
    //     0xabd5fc: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd600: b               #0xabe9c4
    // 0xabd604: r0 = LoadStaticField(0xb54)
    //     0xabd604: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd608: ldr             x0, [x0, #0x16a8]
    // 0xabd60c: cmp             w0, NULL
    // 0xabd610: b.ne            #0xabd61c
    // 0xabd614: r0 = Null
    //     0xabd614: mov             x0, NULL
    // 0xabd618: b               #0xabd644
    // 0xabd61c: r17 = 351
    //     0xabd61c: movz            x17, #0x15f
    // 0xabd620: ldr             w1, [x0, x17]
    // 0xabd624: DecompressPointer r1
    //     0xabd624: add             x1, x1, HEAP, lsl #32
    // 0xabd628: r0 = LoadClassIdInstr(r1)
    //     0xabd628: ldur            x0, [x1, #-1]
    //     0xabd62c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd630: r2 = "visitor"
    //     0xabd630: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd634: ldr             x2, [x2, #0x2d8]
    // 0xabd638: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd638: sub             lr, x0, #0xb4
    //     0xabd63c: ldr             lr, [x21, lr, lsl #3]
    //     0xabd640: blr             lr
    // 0xabd644: r1 = 59
    //     0xabd644: movz            x1, #0x3b
    // 0xabd648: branchIfSmi(r0, 0xabd654)
    //     0xabd648: tbz             w0, #0, #0xabd654
    // 0xabd64c: r1 = LoadClassIdInstr(r0)
    //     0xabd64c: ldur            x1, [x0, #-1]
    //     0xabd650: ubfx            x1, x1, #0xc, #0x14
    // 0xabd654: r16 = "challenger1"
    //     0xabd654: add             x16, PP, #0x11, lsl #12  ; [pp+0x113b8] "challenger1"
    //     0xabd658: ldr             x16, [x16, #0x3b8]
    // 0xabd65c: stp             x16, x0, [SP]
    // 0xabd660: mov             x0, x1
    // 0xabd664: mov             lr, x0
    // 0xabd668: ldr             lr, [x21, lr, lsl #3]
    // 0xabd66c: blr             lr
    // 0xabd670: tbz             w0, #4, #0xabd7c4
    // 0xabd674: r0 = LoadStaticField(0xb54)
    //     0xabd674: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd678: ldr             x0, [x0, #0x16a8]
    // 0xabd67c: cmp             w0, NULL
    // 0xabd680: b.ne            #0xabd68c
    // 0xabd684: r0 = Null
    //     0xabd684: mov             x0, NULL
    // 0xabd688: b               #0xabd6b4
    // 0xabd68c: r17 = 351
    //     0xabd68c: movz            x17, #0x15f
    // 0xabd690: ldr             w1, [x0, x17]
    // 0xabd694: DecompressPointer r1
    //     0xabd694: add             x1, x1, HEAP, lsl #32
    // 0xabd698: r0 = LoadClassIdInstr(r1)
    //     0xabd698: ldur            x0, [x1, #-1]
    //     0xabd69c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd6a0: r2 = "visitor"
    //     0xabd6a0: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd6a4: ldr             x2, [x2, #0x2d8]
    // 0xabd6a8: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd6a8: sub             lr, x0, #0xb4
    //     0xabd6ac: ldr             lr, [x21, lr, lsl #3]
    //     0xabd6b0: blr             lr
    // 0xabd6b4: r1 = 59
    //     0xabd6b4: movz            x1, #0x3b
    // 0xabd6b8: branchIfSmi(r0, 0xabd6c4)
    //     0xabd6b8: tbz             w0, #0, #0xabd6c4
    // 0xabd6bc: r1 = LoadClassIdInstr(r0)
    //     0xabd6bc: ldur            x1, [x0, #-1]
    //     0xabd6c0: ubfx            x1, x1, #0xc, #0x14
    // 0xabd6c4: r16 = "challenger2"
    //     0xabd6c4: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f390] "challenger2"
    //     0xabd6c8: ldr             x16, [x16, #0x390]
    // 0xabd6cc: stp             x16, x0, [SP]
    // 0xabd6d0: mov             x0, x1
    // 0xabd6d4: mov             lr, x0
    // 0xabd6d8: ldr             lr, [x21, lr, lsl #3]
    // 0xabd6dc: blr             lr
    // 0xabd6e0: tbz             w0, #4, #0xabd7c4
    // 0xabd6e4: r0 = LoadStaticField(0xb54)
    //     0xabd6e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd6e8: ldr             x0, [x0, #0x16a8]
    // 0xabd6ec: cmp             w0, NULL
    // 0xabd6f0: b.ne            #0xabd6fc
    // 0xabd6f4: r0 = Null
    //     0xabd6f4: mov             x0, NULL
    // 0xabd6f8: b               #0xabd724
    // 0xabd6fc: r17 = 351
    //     0xabd6fc: movz            x17, #0x15f
    // 0xabd700: ldr             w1, [x0, x17]
    // 0xabd704: DecompressPointer r1
    //     0xabd704: add             x1, x1, HEAP, lsl #32
    // 0xabd708: r0 = LoadClassIdInstr(r1)
    //     0xabd708: ldur            x0, [x1, #-1]
    //     0xabd70c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd710: r2 = "visitor"
    //     0xabd710: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd714: ldr             x2, [x2, #0x2d8]
    // 0xabd718: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd718: sub             lr, x0, #0xb4
    //     0xabd71c: ldr             lr, [x21, lr, lsl #3]
    //     0xabd720: blr             lr
    // 0xabd724: r1 = 59
    //     0xabd724: movz            x1, #0x3b
    // 0xabd728: branchIfSmi(r0, 0xabd734)
    //     0xabd728: tbz             w0, #0, #0xabd734
    // 0xabd72c: r1 = LoadClassIdInstr(r0)
    //     0xabd72c: ldur            x1, [x0, #-1]
    //     0xabd730: ubfx            x1, x1, #0xc, #0x14
    // 0xabd734: r16 = "challenger3"
    //     0xabd734: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f398] "challenger3"
    //     0xabd738: ldr             x16, [x16, #0x398]
    // 0xabd73c: stp             x16, x0, [SP]
    // 0xabd740: mov             x0, x1
    // 0xabd744: mov             lr, x0
    // 0xabd748: ldr             lr, [x21, lr, lsl #3]
    // 0xabd74c: blr             lr
    // 0xabd750: tbz             w0, #4, #0xabd7c4
    // 0xabd754: r0 = LoadStaticField(0xb54)
    //     0xabd754: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd758: ldr             x0, [x0, #0x16a8]
    // 0xabd75c: cmp             w0, NULL
    // 0xabd760: b.ne            #0xabd76c
    // 0xabd764: r0 = Null
    //     0xabd764: mov             x0, NULL
    // 0xabd768: b               #0xabd794
    // 0xabd76c: r17 = 351
    //     0xabd76c: movz            x17, #0x15f
    // 0xabd770: ldr             w1, [x0, x17]
    // 0xabd774: DecompressPointer r1
    //     0xabd774: add             x1, x1, HEAP, lsl #32
    // 0xabd778: r0 = LoadClassIdInstr(r1)
    //     0xabd778: ldur            x0, [x1, #-1]
    //     0xabd77c: ubfx            x0, x0, #0xc, #0x14
    // 0xabd780: r2 = "visitor"
    //     0xabd780: add             x2, PP, #0x13, lsl #12  ; [pp+0x132d8] "visitor"
    //     0xabd784: ldr             x2, [x2, #0x2d8]
    // 0xabd788: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd788: sub             lr, x0, #0xb4
    //     0xabd78c: ldr             lr, [x21, lr, lsl #3]
    //     0xabd790: blr             lr
    // 0xabd794: r1 = 59
    //     0xabd794: movz            x1, #0x3b
    // 0xabd798: branchIfSmi(r0, 0xabd7a4)
    //     0xabd798: tbz             w0, #0, #0xabd7a4
    // 0xabd79c: r1 = LoadClassIdInstr(r0)
    //     0xabd79c: ldur            x1, [x0, #-1]
    //     0xabd7a0: ubfx            x1, x1, #0xc, #0x14
    // 0xabd7a4: r16 = "challenger4"
    //     0xabd7a4: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f3a0] "challenger4"
    //     0xabd7a8: ldr             x16, [x16, #0x3a0]
    // 0xabd7ac: stp             x16, x0, [SP]
    // 0xabd7b0: mov             x0, x1
    // 0xabd7b4: mov             lr, x0
    // 0xabd7b8: ldr             lr, [x21, lr, lsl #3]
    // 0xabd7bc: blr             lr
    // 0xabd7c0: tbnz            w0, #4, #0xabd83c
    // 0xabd7c4: r1 = Null
    //     0xabd7c4: mov             x1, NULL
    // 0xabd7c8: r2 = 16
    //     0xabd7c8: movz            x2, #0x10
    // 0xabd7cc: r0 = AllocateArray()
    //     0xabd7cc: bl              #0x1502560  ; AllocateArrayStub
    // 0xabd7d0: r17 = "EN"
    //     0xabd7d0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabd7d4: ldr             x17, [x17, #0xb58]
    // 0xabd7d8: StoreField: r0->field_f = r17
    //     0xabd7d8: stur            w17, [x0, #0xf]
    // 0xabd7dc: r17 = "A Challenger from overseas has just arrived in Azura Town! Go check him out!"
    //     0xabd7dc: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f3a8] "A Challenger from overseas has just arrived in Azura Town! Go check him out!"
    //     0xabd7e0: ldr             x17, [x17, #0x3a8]
    // 0xabd7e4: StoreField: r0->field_13 = r17
    //     0xabd7e4: stur            w17, [x0, #0x13]
    // 0xabd7e8: r17 = "CN"
    //     0xabd7e8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabd7ec: ldr             x17, [x17, #0xb30]
    // 0xabd7f0: ArrayStore: r0[0] = r17  ; List_4
    //     0xabd7f0: stur            w17, [x0, #0x17]
    // 0xabd7f4: r17 = "一位外国的羽球选手现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd7f4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f3b0] "一位外国的羽球选手现在就在捷泽镇中！快去和他说话吧！"
    //     0xabd7f8: ldr             x17, [x17, #0x3b0]
    // 0xabd7fc: StoreField: r0->field_1b = r17
    //     0xabd7fc: stur            w17, [x0, #0x1b]
    // 0xabd800: r17 = "TW"
    //     0xabd800: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabd804: ldr             x17, [x17, #0xb40]
    // 0xabd808: StoreField: r0->field_1f = r17
    //     0xabd808: stur            w17, [x0, #0x1f]
    // 0xabd80c: r17 = "一位外國的羽球選手現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd80c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f3b8] "一位外國的羽球選手現在就在捷澤鎮中！快去和他說話吧！"
    //     0xabd810: ldr             x17, [x17, #0x3b8]
    // 0xabd814: StoreField: r0->field_23 = r17
    //     0xabd814: stur            w17, [x0, #0x23]
    // 0xabd818: r17 = "JP"
    //     0xabd818: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabd81c: ldr             x17, [x17, #0xb50]
    // 0xabd820: StoreField: r0->field_27 = r17
    //     0xabd820: stur            w17, [x0, #0x27]
    // 0xabd824: r17 = "海外から来たチャレンジャーがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd824: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f3c0] "海外から来たチャレンジャーがアズラ町にたどり着いた！話しかけてみよう！"
    //     0xabd828: ldr             x17, [x17, #0x3c0]
    // 0xabd82c: StoreField: r0->field_2b = r17
    //     0xabd82c: stur            w17, [x0, #0x2b]
    // 0xabd830: stp             x0, NULL, [SP]
    // 0xabd834: r0 = Map._fromLiteral()
    //     0xabd834: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabd838: b               #0xabe9c4
    // 0xabd83c: ldur            x0, [fp, #-0x18]
    // 0xabd840: b               #0xabe9c4
    // 0xabd844: r16 = "oldjimaMemoryIngredient"
    //     0xabd844: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2ef48] "oldjimaMemoryIngredient"
    //     0xabd848: ldr             x16, [x16, #0xf48]
    // 0xabd84c: ldur            lr, [fp, #-8]
    // 0xabd850: stp             lr, x16, [SP]
    // 0xabd854: r0 = ==()
    //     0xabd854: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0xabd858: tbnz            w0, #4, #0xabe9c0
    // 0xabd85c: r0 = LoadStaticField(0xb54)
    //     0xabd85c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd860: ldr             x0, [x0, #0x16a8]
    // 0xabd864: cmp             w0, NULL
    // 0xabd868: b.ne            #0xabd874
    // 0xabd86c: r0 = Null
    //     0xabd86c: mov             x0, NULL
    // 0xabd870: b               #0xabd89c
    // 0xabd874: r17 = 351
    //     0xabd874: movz            x17, #0x15f
    // 0xabd878: ldr             w1, [x0, x17]
    // 0xabd87c: DecompressPointer r1
    //     0xabd87c: add             x1, x1, HEAP, lsl #32
    // 0xabd880: r0 = LoadClassIdInstr(r1)
    //     0xabd880: ldur            x0, [x1, #-1]
    //     0xabd884: ubfx            x0, x0, #0xc, #0x14
    // 0xabd888: r2 = "oldjimamemorySalmon"
    //     0xabd888: add             x2, PP, #0x12, lsl #12  ; [pp+0x12450] "oldjimamemorySalmon"
    //     0xabd88c: ldr             x2, [x2, #0x450]
    // 0xabd890: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd890: sub             lr, x0, #0xb4
    //     0xabd894: ldr             lr, [x21, lr, lsl #3]
    //     0xabd898: blr             lr
    // 0xabd89c: cmp             w0, NULL
    // 0xabd8a0: b.ne            #0xabd8ac
    // 0xabd8a4: r3 = ""
    //     0xabd8a4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd8a8: b               #0xabd8b0
    // 0xabd8ac: mov             x3, x0
    // 0xabd8b0: mov             x0, x3
    // 0xabd8b4: stur            x3, [fp, #-8]
    // 0xabd8b8: r2 = Null
    //     0xabd8b8: mov             x2, NULL
    // 0xabd8bc: r1 = Null
    //     0xabd8bc: mov             x1, NULL
    // 0xabd8c0: r4 = 59
    //     0xabd8c0: movz            x4, #0x3b
    // 0xabd8c4: branchIfSmi(r0, 0xabd8d0)
    //     0xabd8c4: tbz             w0, #0, #0xabd8d0
    // 0xabd8c8: r4 = LoadClassIdInstr(r0)
    //     0xabd8c8: ldur            x4, [x0, #-1]
    //     0xabd8cc: ubfx            x4, x4, #0xc, #0x14
    // 0xabd8d0: sub             x4, x4, #0x5d
    // 0xabd8d4: cmp             x4, #1
    // 0xabd8d8: b.ls            #0xabd8ec
    // 0xabd8dc: r8 = String
    //     0xabd8dc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0xabd8e0: r3 = Null
    //     0xabd8e0: add             x3, PP, #0x2f, lsl #12  ; [pp+0x2f3c8] Null
    //     0xabd8e4: ldr             x3, [x3, #0x3c8]
    // 0xabd8e8: r0 = String()
    //     0xabd8e8: bl              #0x1523244  ; IsType_String_Stub
    // 0xabd8ec: r0 = LoadStaticField(0xb54)
    //     0xabd8ec: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd8f0: ldr             x0, [x0, #0x16a8]
    // 0xabd8f4: cmp             w0, NULL
    // 0xabd8f8: b.ne            #0xabd904
    // 0xabd8fc: r0 = Null
    //     0xabd8fc: mov             x0, NULL
    // 0xabd900: b               #0xabd92c
    // 0xabd904: r17 = 351
    //     0xabd904: movz            x17, #0x15f
    // 0xabd908: ldr             w1, [x0, x17]
    // 0xabd90c: DecompressPointer r1
    //     0xabd90c: add             x1, x1, HEAP, lsl #32
    // 0xabd910: r0 = LoadClassIdInstr(r1)
    //     0xabd910: ldur            x0, [x1, #-1]
    //     0xabd914: ubfx            x0, x0, #0xc, #0x14
    // 0xabd918: r2 = "oldjimamemoryChicken"
    //     0xabd918: add             x2, PP, #0x12, lsl #12  ; [pp+0x12468] "oldjimamemoryChicken"
    //     0xabd91c: ldr             x2, [x2, #0x468]
    // 0xabd920: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd920: sub             lr, x0, #0xb4
    //     0xabd924: ldr             lr, [x21, lr, lsl #3]
    //     0xabd928: blr             lr
    // 0xabd92c: cmp             w0, NULL
    // 0xabd930: b.ne            #0xabd93c
    // 0xabd934: r3 = ""
    //     0xabd934: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd938: b               #0xabd940
    // 0xabd93c: mov             x3, x0
    // 0xabd940: mov             x0, x3
    // 0xabd944: stur            x3, [fp, #-0x18]
    // 0xabd948: r2 = Null
    //     0xabd948: mov             x2, NULL
    // 0xabd94c: r1 = Null
    //     0xabd94c: mov             x1, NULL
    // 0xabd950: r4 = 59
    //     0xabd950: movz            x4, #0x3b
    // 0xabd954: branchIfSmi(r0, 0xabd960)
    //     0xabd954: tbz             w0, #0, #0xabd960
    // 0xabd958: r4 = LoadClassIdInstr(r0)
    //     0xabd958: ldur            x4, [x0, #-1]
    //     0xabd95c: ubfx            x4, x4, #0xc, #0x14
    // 0xabd960: sub             x4, x4, #0x5d
    // 0xabd964: cmp             x4, #1
    // 0xabd968: b.ls            #0xabd97c
    // 0xabd96c: r8 = String
    //     0xabd96c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0xabd970: r3 = Null
    //     0xabd970: add             x3, PP, #0x2f, lsl #12  ; [pp+0x2f3d8] Null
    //     0xabd974: ldr             x3, [x3, #0x3d8]
    // 0xabd978: r0 = String()
    //     0xabd978: bl              #0x1523244  ; IsType_String_Stub
    // 0xabd97c: r0 = LoadStaticField(0xb54)
    //     0xabd97c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabd980: ldr             x0, [x0, #0x16a8]
    // 0xabd984: cmp             w0, NULL
    // 0xabd988: b.ne            #0xabd994
    // 0xabd98c: r0 = Null
    //     0xabd98c: mov             x0, NULL
    // 0xabd990: b               #0xabd9bc
    // 0xabd994: r17 = 351
    //     0xabd994: movz            x17, #0x15f
    // 0xabd998: ldr             w1, [x0, x17]
    // 0xabd99c: DecompressPointer r1
    //     0xabd99c: add             x1, x1, HEAP, lsl #32
    // 0xabd9a0: r0 = LoadClassIdInstr(r1)
    //     0xabd9a0: ldur            x0, [x1, #-1]
    //     0xabd9a4: ubfx            x0, x0, #0xc, #0x14
    // 0xabd9a8: r2 = "oldjimamemoryCabbage"
    //     0xabd9a8: add             x2, PP, #0x12, lsl #12  ; [pp+0x12480] "oldjimamemoryCabbage"
    //     0xabd9ac: ldr             x2, [x2, #0x480]
    // 0xabd9b0: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabd9b0: sub             lr, x0, #0xb4
    //     0xabd9b4: ldr             lr, [x21, lr, lsl #3]
    //     0xabd9b8: blr             lr
    // 0xabd9bc: cmp             w0, NULL
    // 0xabd9c0: b.ne            #0xabd9cc
    // 0xabd9c4: r3 = ""
    //     0xabd9c4: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabd9c8: b               #0xabd9d0
    // 0xabd9cc: mov             x3, x0
    // 0xabd9d0: mov             x0, x3
    // 0xabd9d4: stur            x3, [fp, #-0x20]
    // 0xabd9d8: r2 = Null
    //     0xabd9d8: mov             x2, NULL
    // 0xabd9dc: r1 = Null
    //     0xabd9dc: mov             x1, NULL
    // 0xabd9e0: r4 = 59
    //     0xabd9e0: movz            x4, #0x3b
    // 0xabd9e4: branchIfSmi(r0, 0xabd9f0)
    //     0xabd9e4: tbz             w0, #0, #0xabd9f0
    // 0xabd9e8: r4 = LoadClassIdInstr(r0)
    //     0xabd9e8: ldur            x4, [x0, #-1]
    //     0xabd9ec: ubfx            x4, x4, #0xc, #0x14
    // 0xabd9f0: sub             x4, x4, #0x5d
    // 0xabd9f4: cmp             x4, #1
    // 0xabd9f8: b.ls            #0xabda0c
    // 0xabd9fc: r8 = String
    //     0xabd9fc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0xabda00: r3 = Null
    //     0xabda00: add             x3, PP, #0x2f, lsl #12  ; [pp+0x2f3e8] Null
    //     0xabda04: ldr             x3, [x3, #0x3e8]
    // 0xabda08: r0 = String()
    //     0xabda08: bl              #0x1523244  ; IsType_String_Stub
    // 0xabda0c: r0 = LoadStaticField(0xb54)
    //     0xabda0c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabda10: ldr             x0, [x0, #0x16a8]
    // 0xabda14: cmp             w0, NULL
    // 0xabda18: b.ne            #0xabda24
    // 0xabda1c: r0 = Null
    //     0xabda1c: mov             x0, NULL
    // 0xabda20: b               #0xabda4c
    // 0xabda24: r17 = 351
    //     0xabda24: movz            x17, #0x15f
    // 0xabda28: ldr             w1, [x0, x17]
    // 0xabda2c: DecompressPointer r1
    //     0xabda2c: add             x1, x1, HEAP, lsl #32
    // 0xabda30: r0 = LoadClassIdInstr(r1)
    //     0xabda30: ldur            x0, [x1, #-1]
    //     0xabda34: ubfx            x0, x0, #0xc, #0x14
    // 0xabda38: r2 = "oldjimamemoryCarrot"
    //     0xabda38: add             x2, PP, #0x12, lsl #12  ; [pp+0x12498] "oldjimamemoryCarrot"
    //     0xabda3c: ldr             x2, [x2, #0x498]
    // 0xabda40: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabda40: sub             lr, x0, #0xb4
    //     0xabda44: ldr             lr, [x21, lr, lsl #3]
    //     0xabda48: blr             lr
    // 0xabda4c: cmp             w0, NULL
    // 0xabda50: b.ne            #0xabda5c
    // 0xabda54: r3 = ""
    //     0xabda54: ldr             x3, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabda58: b               #0xabda60
    // 0xabda5c: mov             x3, x0
    // 0xabda60: mov             x0, x3
    // 0xabda64: stur            x3, [fp, #-0x28]
    // 0xabda68: r2 = Null
    //     0xabda68: mov             x2, NULL
    // 0xabda6c: r1 = Null
    //     0xabda6c: mov             x1, NULL
    // 0xabda70: r4 = 59
    //     0xabda70: movz            x4, #0x3b
    // 0xabda74: branchIfSmi(r0, 0xabda80)
    //     0xabda74: tbz             w0, #0, #0xabda80
    // 0xabda78: r4 = LoadClassIdInstr(r0)
    //     0xabda78: ldur            x4, [x0, #-1]
    //     0xabda7c: ubfx            x4, x4, #0xc, #0x14
    // 0xabda80: sub             x4, x4, #0x5d
    // 0xabda84: cmp             x4, #1
    // 0xabda88: b.ls            #0xabda9c
    // 0xabda8c: r8 = String
    //     0xabda8c: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0xabda90: r3 = Null
    //     0xabda90: add             x3, PP, #0x2f, lsl #12  ; [pp+0x2f3f8] Null
    //     0xabda94: ldr             x3, [x3, #0x3f8]
    // 0xabda98: r0 = String()
    //     0xabda98: bl              #0x1523244  ; IsType_String_Stub
    // 0xabda9c: r0 = LoadStaticField(0xb54)
    //     0xabda9c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xabdaa0: ldr             x0, [x0, #0x16a8]
    // 0xabdaa4: cmp             w0, NULL
    // 0xabdaa8: b.ne            #0xabdab4
    // 0xabdaac: r0 = Null
    //     0xabdaac: mov             x0, NULL
    // 0xabdab0: b               #0xabdadc
    // 0xabdab4: r17 = 351
    //     0xabdab4: movz            x17, #0x15f
    // 0xabdab8: ldr             w1, [x0, x17]
    // 0xabdabc: DecompressPointer r1
    //     0xabdabc: add             x1, x1, HEAP, lsl #32
    // 0xabdac0: r0 = LoadClassIdInstr(r1)
    //     0xabdac0: ldur            x0, [x1, #-1]
    //     0xabdac4: ubfx            x0, x0, #0xc, #0x14
    // 0xabdac8: r2 = "oldjimamemoryPotato"
    //     0xabdac8: add             x2, PP, #0x12, lsl #12  ; [pp+0x124b0] "oldjimamemoryPotato"
    //     0xabdacc: ldr             x2, [x2, #0x4b0]
    // 0xabdad0: r0 = GDT[cid_x0 + -0xb4]()
    //     0xabdad0: sub             lr, x0, #0xb4
    //     0xabdad4: ldr             lr, [x21, lr, lsl #3]
    //     0xabdad8: blr             lr
    // 0xabdadc: cmp             w0, NULL
    // 0xabdae0: b.ne            #0xabdaec
    // 0xabdae4: r5 = ""
    //     0xabdae4: ldr             x5, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabdae8: b               #0xabdaf0
    // 0xabdaec: mov             x5, x0
    // 0xabdaf0: ldur            x4, [fp, #-8]
    // 0xabdaf4: ldur            x3, [fp, #-0x18]
    // 0xabdaf8: mov             x0, x5
    // 0xabdafc: stur            x5, [fp, #-0x30]
    // 0xabdb00: r2 = Null
    //     0xabdb00: mov             x2, NULL
    // 0xabdb04: r1 = Null
    //     0xabdb04: mov             x1, NULL
    // 0xabdb08: r4 = 59
    //     0xabdb08: movz            x4, #0x3b
    // 0xabdb0c: branchIfSmi(r0, 0xabdb18)
    //     0xabdb0c: tbz             w0, #0, #0xabdb18
    // 0xabdb10: r4 = LoadClassIdInstr(r0)
    //     0xabdb10: ldur            x4, [x0, #-1]
    //     0xabdb14: ubfx            x4, x4, #0xc, #0x14
    // 0xabdb18: sub             x4, x4, #0x5d
    // 0xabdb1c: cmp             x4, #1
    // 0xabdb20: b.ls            #0xabdb34
    // 0xabdb24: r8 = String
    //     0xabdb24: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0xabdb28: r3 = Null
    //     0xabdb28: add             x3, PP, #0x2f, lsl #12  ; [pp+0x2f408] Null
    //     0xabdb2c: ldr             x3, [x3, #0x408]
    // 0xabdb30: r0 = String()
    //     0xabdb30: bl              #0x1523244  ; IsType_String_Stub
    // 0xabdb34: ldur            x0, [fp, #-8]
    // 0xabdb38: r1 = LoadClassIdInstr(r0)
    //     0xabdb38: ldur            x1, [x0, #-1]
    //     0xabdb3c: ubfx            x1, x1, #0xc, #0x14
    // 0xabdb40: r16 = "2"
    //     0xabdb40: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0xabdb44: ldr             x16, [x16, #0x6a8]
    // 0xabdb48: stp             x16, x0, [SP]
    // 0xabdb4c: mov             x0, x1
    // 0xabdb50: mov             lr, x0
    // 0xabdb54: ldr             lr, [x21, lr, lsl #3]
    // 0xabdb58: blr             lr
    // 0xabdb5c: mov             x2, x0
    // 0xabdb60: ldur            x1, [fp, #-0x18]
    // 0xabdb64: stur            x2, [fp, #-8]
    // 0xabdb68: r0 = LoadClassIdInstr(r1)
    //     0xabdb68: ldur            x0, [x1, #-1]
    //     0xabdb6c: ubfx            x0, x0, #0xc, #0x14
    // 0xabdb70: r16 = "1"
    //     0xabdb70: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0xabdb74: ldr             x16, [x16, #0x6a0]
    // 0xabdb78: stp             x16, x1, [SP]
    // 0xabdb7c: mov             lr, x0
    // 0xabdb80: ldr             lr, [x21, lr, lsl #3]
    // 0xabdb84: blr             lr
    // 0xabdb88: tbnz            w0, #4, #0xabdb94
    // 0xabdb8c: r3 = true
    //     0xabdb8c: add             x3, NULL, #0x20  ; true
    // 0xabdb90: b               #0xabdbc0
    // 0xabdb94: ldur            x0, [fp, #-0x18]
    // 0xabdb98: r1 = LoadClassIdInstr(r0)
    //     0xabdb98: ldur            x1, [x0, #-1]
    //     0xabdb9c: ubfx            x1, x1, #0xc, #0x14
    // 0xabdba0: r16 = "2"
    //     0xabdba0: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a8] "2"
    //     0xabdba4: ldr             x16, [x16, #0x6a8]
    // 0xabdba8: stp             x16, x0, [SP]
    // 0xabdbac: mov             x0, x1
    // 0xabdbb0: mov             lr, x0
    // 0xabdbb4: ldr             lr, [x21, lr, lsl #3]
    // 0xabdbb8: blr             lr
    // 0xabdbbc: mov             x3, x0
    // 0xabdbc0: ldur            x0, [fp, #-0x20]
    // 0xabdbc4: ldur            x2, [fp, #-0x28]
    // 0xabdbc8: ldur            x1, [fp, #-0x30]
    // 0xabdbcc: stur            x3, [fp, #-0x18]
    // 0xabdbd0: r4 = LoadClassIdInstr(r0)
    //     0xabdbd0: ldur            x4, [x0, #-1]
    //     0xabdbd4: ubfx            x4, x4, #0xc, #0x14
    // 0xabdbd8: r16 = "1"
    //     0xabdbd8: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0xabdbdc: ldr             x16, [x16, #0x6a0]
    // 0xabdbe0: stp             x16, x0, [SP]
    // 0xabdbe4: mov             x0, x4
    // 0xabdbe8: mov             lr, x0
    // 0xabdbec: ldr             lr, [x21, lr, lsl #3]
    // 0xabdbf0: blr             lr
    // 0xabdbf4: mov             x1, x0
    // 0xabdbf8: ldur            x0, [fp, #-0x28]
    // 0xabdbfc: stur            x1, [fp, #-0x20]
    // 0xabdc00: r2 = LoadClassIdInstr(r0)
    //     0xabdc00: ldur            x2, [x0, #-1]
    //     0xabdc04: ubfx            x2, x2, #0xc, #0x14
    // 0xabdc08: r16 = "1"
    //     0xabdc08: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0xabdc0c: ldr             x16, [x16, #0x6a0]
    // 0xabdc10: stp             x16, x0, [SP]
    // 0xabdc14: mov             x0, x2
    // 0xabdc18: mov             lr, x0
    // 0xabdc1c: ldr             lr, [x21, lr, lsl #3]
    // 0xabdc20: blr             lr
    // 0xabdc24: mov             x1, x0
    // 0xabdc28: ldur            x0, [fp, #-0x30]
    // 0xabdc2c: stur            x1, [fp, #-0x28]
    // 0xabdc30: r2 = LoadClassIdInstr(r0)
    //     0xabdc30: ldur            x2, [x0, #-1]
    //     0xabdc34: ubfx            x2, x2, #0xc, #0x14
    // 0xabdc38: r16 = "1"
    //     0xabdc38: add             x16, PP, #0x11, lsl #12  ; [pp+0x116a0] "1"
    //     0xabdc3c: ldr             x16, [x16, #0x6a0]
    // 0xabdc40: stp             x16, x0, [SP]
    // 0xabdc44: mov             x0, x2
    // 0xabdc48: mov             lr, x0
    // 0xabdc4c: ldr             lr, [x21, lr, lsl #3]
    // 0xabdc50: blr             lr
    // 0xabdc54: r1 = Null
    //     0xabdc54: mov             x1, NULL
    // 0xabdc58: r2 = 16
    //     0xabdc58: movz            x2, #0x10
    // 0xabdc5c: stur            x0, [fp, #-0x30]
    // 0xabdc60: r0 = AllocateArray()
    //     0xabdc60: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdc64: r17 = "EN"
    //     0xabdc64: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabdc68: ldr             x17, [x17, #0xb58]
    // 0xabdc6c: StoreField: r0->field_f = r17
    //     0xabdc6c: stur            w17, [x0, #0xf]
    // 0xabdc70: r17 = " some cabbage,"
    //     0xabdc70: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f418] " some cabbage,"
    //     0xabdc74: ldr             x17, [x17, #0x418]
    // 0xabdc78: StoreField: r0->field_13 = r17
    //     0xabdc78: stur            w17, [x0, #0x13]
    // 0xabdc7c: r17 = "CN"
    //     0xabdc7c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabdc80: ldr             x17, [x17, #0xb30]
    // 0xabdc84: ArrayStore: r0[0] = r17  ; List_4
    //     0xabdc84: stur            w17, [x0, #0x17]
    // 0xabdc88: r17 = "一些包菜，"
    //     0xabdc88: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f420] "一些包菜，"
    //     0xabdc8c: ldr             x17, [x17, #0x420]
    // 0xabdc90: StoreField: r0->field_1b = r17
    //     0xabdc90: stur            w17, [x0, #0x1b]
    // 0xabdc94: r17 = "TW"
    //     0xabdc94: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabdc98: ldr             x17, [x17, #0xb40]
    // 0xabdc9c: StoreField: r0->field_1f = r17
    //     0xabdc9c: stur            w17, [x0, #0x1f]
    // 0xabdca0: r17 = "一些包菜，"
    //     0xabdca0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f420] "一些包菜，"
    //     0xabdca4: ldr             x17, [x17, #0x420]
    // 0xabdca8: StoreField: r0->field_23 = r17
    //     0xabdca8: stur            w17, [x0, #0x23]
    // 0xabdcac: r17 = "JP"
    //     0xabdcac: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabdcb0: ldr             x17, [x17, #0xb50]
    // 0xabdcb4: StoreField: r0->field_27 = r17
    //     0xabdcb4: stur            w17, [x0, #0x27]
    // 0xabdcb8: r17 = "キャベツ、"
    //     0xabdcb8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f428] "キャベツ、"
    //     0xabdcbc: ldr             x17, [x17, #0x428]
    // 0xabdcc0: StoreField: r0->field_2b = r17
    //     0xabdcc0: stur            w17, [x0, #0x2b]
    // 0xabdcc4: stp             x0, NULL, [SP]
    // 0xabdcc8: r0 = Map._fromLiteral()
    //     0xabdcc8: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabdccc: r1 = Null
    //     0xabdccc: mov             x1, NULL
    // 0xabdcd0: r2 = 16
    //     0xabdcd0: movz            x2, #0x10
    // 0xabdcd4: stur            x0, [fp, #-0x38]
    // 0xabdcd8: r0 = AllocateArray()
    //     0xabdcd8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdcdc: r17 = "EN"
    //     0xabdcdc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabdce0: ldr             x17, [x17, #0xb58]
    // 0xabdce4: StoreField: r0->field_f = r17
    //     0xabdce4: stur            w17, [x0, #0xf]
    // 0xabdce8: r17 = " a pack of chicken,"
    //     0xabdce8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f430] " a pack of chicken,"
    //     0xabdcec: ldr             x17, [x17, #0x430]
    // 0xabdcf0: StoreField: r0->field_13 = r17
    //     0xabdcf0: stur            w17, [x0, #0x13]
    // 0xabdcf4: r17 = "CN"
    //     0xabdcf4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabdcf8: ldr             x17, [x17, #0xb30]
    // 0xabdcfc: ArrayStore: r0[0] = r17  ; List_4
    //     0xabdcfc: stur            w17, [x0, #0x17]
    // 0xabdd00: r17 = "一包鸡肉，"
    //     0xabdd00: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f438] "一包鸡肉，"
    //     0xabdd04: ldr             x17, [x17, #0x438]
    // 0xabdd08: StoreField: r0->field_1b = r17
    //     0xabdd08: stur            w17, [x0, #0x1b]
    // 0xabdd0c: r17 = "TW"
    //     0xabdd0c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabdd10: ldr             x17, [x17, #0xb40]
    // 0xabdd14: StoreField: r0->field_1f = r17
    //     0xabdd14: stur            w17, [x0, #0x1f]
    // 0xabdd18: r17 = "一包鷄肉，"
    //     0xabdd18: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f440] "一包鷄肉，"
    //     0xabdd1c: ldr             x17, [x17, #0x440]
    // 0xabdd20: StoreField: r0->field_23 = r17
    //     0xabdd20: stur            w17, [x0, #0x23]
    // 0xabdd24: r17 = "JP"
    //     0xabdd24: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabdd28: ldr             x17, [x17, #0xb50]
    // 0xabdd2c: StoreField: r0->field_27 = r17
    //     0xabdd2c: stur            w17, [x0, #0x27]
    // 0xabdd30: r17 = "鶏肉、"
    //     0xabdd30: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f448] "鶏肉、"
    //     0xabdd34: ldr             x17, [x17, #0x448]
    // 0xabdd38: StoreField: r0->field_2b = r17
    //     0xabdd38: stur            w17, [x0, #0x2b]
    // 0xabdd3c: stp             x0, NULL, [SP]
    // 0xabdd40: r0 = Map._fromLiteral()
    //     0xabdd40: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabdd44: r1 = Null
    //     0xabdd44: mov             x1, NULL
    // 0xabdd48: r2 = 16
    //     0xabdd48: movz            x2, #0x10
    // 0xabdd4c: stur            x0, [fp, #-0x40]
    // 0xabdd50: r0 = AllocateArray()
    //     0xabdd50: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdd54: r17 = "EN"
    //     0xabdd54: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabdd58: ldr             x17, [x17, #0xb58]
    // 0xabdd5c: StoreField: r0->field_f = r17
    //     0xabdd5c: stur            w17, [x0, #0xf]
    // 0xabdd60: r17 = " some carrots,"
    //     0xabdd60: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f450] " some carrots,"
    //     0xabdd64: ldr             x17, [x17, #0x450]
    // 0xabdd68: StoreField: r0->field_13 = r17
    //     0xabdd68: stur            w17, [x0, #0x13]
    // 0xabdd6c: r17 = "CN"
    //     0xabdd6c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabdd70: ldr             x17, [x17, #0xb30]
    // 0xabdd74: ArrayStore: r0[0] = r17  ; List_4
    //     0xabdd74: stur            w17, [x0, #0x17]
    // 0xabdd78: r17 = "一些萝卜，"
    //     0xabdd78: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f458] "一些萝卜，"
    //     0xabdd7c: ldr             x17, [x17, #0x458]
    // 0xabdd80: StoreField: r0->field_1b = r17
    //     0xabdd80: stur            w17, [x0, #0x1b]
    // 0xabdd84: r17 = "TW"
    //     0xabdd84: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabdd88: ldr             x17, [x17, #0xb40]
    // 0xabdd8c: StoreField: r0->field_1f = r17
    //     0xabdd8c: stur            w17, [x0, #0x1f]
    // 0xabdd90: r17 = "一些蘿蔔，"
    //     0xabdd90: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f460] "一些蘿蔔，"
    //     0xabdd94: ldr             x17, [x17, #0x460]
    // 0xabdd98: StoreField: r0->field_23 = r17
    //     0xabdd98: stur            w17, [x0, #0x23]
    // 0xabdd9c: r17 = "JP"
    //     0xabdd9c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabdda0: ldr             x17, [x17, #0xb50]
    // 0xabdda4: StoreField: r0->field_27 = r17
    //     0xabdda4: stur            w17, [x0, #0x27]
    // 0xabdda8: r17 = "人参、"
    //     0xabdda8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f468] "人参、"
    //     0xabddac: ldr             x17, [x17, #0x468]
    // 0xabddb0: StoreField: r0->field_2b = r17
    //     0xabddb0: stur            w17, [x0, #0x2b]
    // 0xabddb4: stp             x0, NULL, [SP]
    // 0xabddb8: r0 = Map._fromLiteral()
    //     0xabddb8: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabddbc: r1 = Null
    //     0xabddbc: mov             x1, NULL
    // 0xabddc0: r2 = 16
    //     0xabddc0: movz            x2, #0x10
    // 0xabddc4: stur            x0, [fp, #-0x48]
    // 0xabddc8: r0 = AllocateArray()
    //     0xabddc8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabddcc: r17 = "EN"
    //     0xabddcc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabddd0: ldr             x17, [x17, #0xb58]
    // 0xabddd4: StoreField: r0->field_f = r17
    //     0xabddd4: stur            w17, [x0, #0xf]
    // 0xabddd8: r17 = " some salmon,"
    //     0xabddd8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f470] " some salmon,"
    //     0xabdddc: ldr             x17, [x17, #0x470]
    // 0xabdde0: StoreField: r0->field_13 = r17
    //     0xabdde0: stur            w17, [x0, #0x13]
    // 0xabdde4: r17 = "CN"
    //     0xabdde4: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabdde8: ldr             x17, [x17, #0xb30]
    // 0xabddec: ArrayStore: r0[0] = r17  ; List_4
    //     0xabddec: stur            w17, [x0, #0x17]
    // 0xabddf0: r17 = "一条三文鱼，"
    //     0xabddf0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f478] "一条三文鱼，"
    //     0xabddf4: ldr             x17, [x17, #0x478]
    // 0xabddf8: StoreField: r0->field_1b = r17
    //     0xabddf8: stur            w17, [x0, #0x1b]
    // 0xabddfc: r17 = "TW"
    //     0xabddfc: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabde00: ldr             x17, [x17, #0xb40]
    // 0xabde04: StoreField: r0->field_1f = r17
    //     0xabde04: stur            w17, [x0, #0x1f]
    // 0xabde08: r17 = "一條三文魚，"
    //     0xabde08: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f480] "一條三文魚，"
    //     0xabde0c: ldr             x17, [x17, #0x480]
    // 0xabde10: StoreField: r0->field_23 = r17
    //     0xabde10: stur            w17, [x0, #0x23]
    // 0xabde14: r17 = "JP"
    //     0xabde14: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabde18: ldr             x17, [x17, #0xb50]
    // 0xabde1c: StoreField: r0->field_27 = r17
    //     0xabde1c: stur            w17, [x0, #0x27]
    // 0xabde20: r17 = "サーモン一匹、"
    //     0xabde20: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f488] "サーモン一匹、"
    //     0xabde24: ldr             x17, [x17, #0x488]
    // 0xabde28: StoreField: r0->field_2b = r17
    //     0xabde28: stur            w17, [x0, #0x2b]
    // 0xabde2c: stp             x0, NULL, [SP]
    // 0xabde30: r0 = Map._fromLiteral()
    //     0xabde30: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabde34: r1 = Null
    //     0xabde34: mov             x1, NULL
    // 0xabde38: r2 = 16
    //     0xabde38: movz            x2, #0x10
    // 0xabde3c: stur            x0, [fp, #-0x50]
    // 0xabde40: r0 = AllocateArray()
    //     0xabde40: bl              #0x1502560  ; AllocateArrayStub
    // 0xabde44: r17 = "EN"
    //     0xabde44: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabde48: ldr             x17, [x17, #0xb58]
    // 0xabde4c: StoreField: r0->field_f = r17
    //     0xabde4c: stur            w17, [x0, #0xf]
    // 0xabde50: r17 = " some potatoes,"
    //     0xabde50: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f490] " some potatoes,"
    //     0xabde54: ldr             x17, [x17, #0x490]
    // 0xabde58: StoreField: r0->field_13 = r17
    //     0xabde58: stur            w17, [x0, #0x13]
    // 0xabde5c: r17 = "CN"
    //     0xabde5c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabde60: ldr             x17, [x17, #0xb30]
    // 0xabde64: ArrayStore: r0[0] = r17  ; List_4
    //     0xabde64: stur            w17, [x0, #0x17]
    // 0xabde68: r17 = "一包马铃薯，"
    //     0xabde68: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f498] "一包马铃薯，"
    //     0xabde6c: ldr             x17, [x17, #0x498]
    // 0xabde70: StoreField: r0->field_1b = r17
    //     0xabde70: stur            w17, [x0, #0x1b]
    // 0xabde74: r17 = "TW"
    //     0xabde74: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabde78: ldr             x17, [x17, #0xb40]
    // 0xabde7c: StoreField: r0->field_1f = r17
    //     0xabde7c: stur            w17, [x0, #0x1f]
    // 0xabde80: r17 = "一包馬鈴薯，"
    //     0xabde80: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4a0] "一包馬鈴薯，"
    //     0xabde84: ldr             x17, [x17, #0x4a0]
    // 0xabde88: StoreField: r0->field_23 = r17
    //     0xabde88: stur            w17, [x0, #0x23]
    // 0xabde8c: r17 = "JP"
    //     0xabde8c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabde90: ldr             x17, [x17, #0xb50]
    // 0xabde94: StoreField: r0->field_27 = r17
    //     0xabde94: stur            w17, [x0, #0x27]
    // 0xabde98: r17 = "ジャガイモ、"
    //     0xabde98: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4a8] "ジャガイモ、"
    //     0xabde9c: ldr             x17, [x17, #0x4a8]
    // 0xabdea0: StoreField: r0->field_2b = r17
    //     0xabdea0: stur            w17, [x0, #0x2b]
    // 0xabdea4: stp             x0, NULL, [SP]
    // 0xabdea8: r0 = Map._fromLiteral()
    //     0xabdea8: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabdeac: mov             x3, x0
    // 0xabdeb0: ldur            x0, [fp, #-0x30]
    // 0xabdeb4: stur            x3, [fp, #-0x58]
    // 0xabdeb8: tbz             w0, #4, #0xabdf7c
    // 0xabdebc: ldur            x4, [fp, #-0x20]
    // 0xabdec0: tbz             w4, #4, #0xabdf6c
    // 0xabdec4: ldur            x5, [fp, #-0x28]
    // 0xabdec8: tbz             w5, #4, #0xabdf60
    // 0xabdecc: ldur            x6, [fp, #-0x18]
    // 0xabded0: tbz             w6, #4, #0xabdf58
    // 0xabded4: ldur            x7, [fp, #-8]
    // 0xabded8: tbz             w7, #4, #0xabdf8c
    // 0xabdedc: r1 = Null
    //     0xabdedc: mov             x1, NULL
    // 0xabdee0: r2 = 16
    //     0xabdee0: movz            x2, #0x10
    // 0xabdee4: r0 = AllocateArray()
    //     0xabdee4: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdee8: r17 = "EN"
    //     0xabdee8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabdeec: ldr             x17, [x17, #0xb58]
    // 0xabdef0: StoreField: r0->field_f = r17
    //     0xabdef0: stur            w17, [x0, #0xf]
    // 0xabdef4: r17 = "You can get them from the market at village center."
    //     0xabdef4: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4b0] "You can get them from the market at village center."
    //     0xabdef8: ldr             x17, [x17, #0x4b0]
    // 0xabdefc: StoreField: r0->field_13 = r17
    //     0xabdefc: stur            w17, [x0, #0x13]
    // 0xabdf00: r17 = "CN"
    //     0xabdf00: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabdf04: ldr             x17, [x17, #0xb30]
    // 0xabdf08: ArrayStore: r0[0] = r17  ; List_4
    //     0xabdf08: stur            w17, [x0, #0x17]
    // 0xabdf0c: r17 = "你可以在村庄中心的市集买到它们。"
    //     0xabdf0c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4b8] "你可以在村庄中心的市集买到它们。"
    //     0xabdf10: ldr             x17, [x17, #0x4b8]
    // 0xabdf14: StoreField: r0->field_1b = r17
    //     0xabdf14: stur            w17, [x0, #0x1b]
    // 0xabdf18: r17 = "TW"
    //     0xabdf18: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabdf1c: ldr             x17, [x17, #0xb40]
    // 0xabdf20: StoreField: r0->field_1f = r17
    //     0xabdf20: stur            w17, [x0, #0x1f]
    // 0xabdf24: r17 = "你可以在村莊中心的市集買到它們。"
    //     0xabdf24: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4c0] "你可以在村莊中心的市集買到它們。"
    //     0xabdf28: ldr             x17, [x17, #0x4c0]
    // 0xabdf2c: StoreField: r0->field_23 = r17
    //     0xabdf2c: stur            w17, [x0, #0x23]
    // 0xabdf30: r17 = "JP"
    //     0xabdf30: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabdf34: ldr             x17, [x17, #0xb50]
    // 0xabdf38: StoreField: r0->field_27 = r17
    //     0xabdf38: stur            w17, [x0, #0x27]
    // 0xabdf3c: r17 = "村の中心にあるマーケットに行けば買えるよ。"
    //     0xabdf3c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4c8] "村の中心にあるマーケットに行けば買えるよ。"
    //     0xabdf40: ldr             x17, [x17, #0x4c8]
    // 0xabdf44: StoreField: r0->field_2b = r17
    //     0xabdf44: stur            w17, [x0, #0x2b]
    // 0xabdf48: stp             x0, NULL, [SP]
    // 0xabdf4c: r0 = Map._fromLiteral()
    //     0xabdf4c: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabdf50: mov             x1, x0
    // 0xabdf54: b               #0xabe9b8
    // 0xabdf58: ldur            x7, [fp, #-8]
    // 0xabdf5c: b               #0xabdf8c
    // 0xabdf60: ldur            x7, [fp, #-8]
    // 0xabdf64: ldur            x6, [fp, #-0x18]
    // 0xabdf68: b               #0xabdf8c
    // 0xabdf6c: ldur            x7, [fp, #-8]
    // 0xabdf70: ldur            x6, [fp, #-0x18]
    // 0xabdf74: ldur            x5, [fp, #-0x28]
    // 0xabdf78: b               #0xabdf8c
    // 0xabdf7c: ldur            x7, [fp, #-8]
    // 0xabdf80: ldur            x6, [fp, #-0x18]
    // 0xabdf84: ldur            x4, [fp, #-0x20]
    // 0xabdf88: ldur            x5, [fp, #-0x28]
    // 0xabdf8c: r1 = Null
    //     0xabdf8c: mov             x1, NULL
    // 0xabdf90: r2 = 16
    //     0xabdf90: movz            x2, #0x10
    // 0xabdf94: r0 = AllocateArray()
    //     0xabdf94: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdf98: stur            x0, [fp, #-0x60]
    // 0xabdf9c: r17 = "EN"
    //     0xabdf9c: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb58] "EN"
    //     0xabdfa0: ldr             x17, [x17, #0xb58]
    // 0xabdfa4: StoreField: r0->field_f = r17
    //     0xabdfa4: stur            w17, [x0, #0xf]
    // 0xabdfa8: r1 = Null
    //     0xabdfa8: mov             x1, NULL
    // 0xabdfac: r2 = 14
    //     0xabdfac: movz            x2, #0xe
    // 0xabdfb0: r0 = AllocateArray()
    //     0xabdfb0: bl              #0x1502560  ; AllocateArrayStub
    // 0xabdfb4: stur            x0, [fp, #-0x68]
    // 0xabdfb8: r17 = "Let\'s see, you managed to get"
    //     0xabdfb8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4d0] "Let\'s see, you managed to get"
    //     0xabdfbc: ldr             x17, [x17, #0x4d0]
    // 0xabdfc0: StoreField: r0->field_f = r17
    //     0xabdfc0: stur            w17, [x0, #0xf]
    // 0xabdfc4: ldur            x3, [fp, #-8]
    // 0xabdfc8: tbnz            w3, #4, #0xabdffc
    // 0xabdfcc: ldur            x4, [fp, #-0x50]
    // 0xabdfd0: r2 = LoadStaticField(0xb40)
    //     0xabdfd0: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabdfd4: ldr             x2, [x2, #0x1680]
    // 0xabdfd8: mov             x1, x4
    // 0xabdfdc: r0 = _getValueOrData()
    //     0xabdfdc: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabdfe0: ldur            x3, [fp, #-0x50]
    // 0xabdfe4: LoadField: r1 = r3->field_f
    //     0xabdfe4: ldur            w1, [x3, #0xf]
    // 0xabdfe8: DecompressPointer r1
    //     0xabdfe8: add             x1, x1, HEAP, lsl #32
    // 0xabdfec: cmp             w1, w0
    // 0xabdff0: b.ne            #0xabe004
    // 0xabdff4: r0 = Null
    //     0xabdff4: mov             x0, NULL
    // 0xabdff8: b               #0xabe004
    // 0xabdffc: ldur            x3, [fp, #-0x50]
    // 0xabe000: r0 = ""
    //     0xabe000: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe004: ldur            x4, [fp, #-0x18]
    // 0xabe008: ldur            x1, [fp, #-0x68]
    // 0xabe00c: ArrayStore: r1[1] = r0  ; List_4
    //     0xabe00c: add             x25, x1, #0x13
    //     0xabe010: str             w0, [x25]
    //     0xabe014: tbz             w0, #0, #0xabe030
    //     0xabe018: ldurb           w16, [x1, #-1]
    //     0xabe01c: ldurb           w17, [x0, #-1]
    //     0xabe020: and             x16, x17, x16, lsr #2
    //     0xabe024: tst             x16, HEAP, lsr #32
    //     0xabe028: b.eq            #0xabe030
    //     0xabe02c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe030: tbnz            w4, #4, #0xabe064
    // 0xabe034: ldur            x0, [fp, #-0x40]
    // 0xabe038: r2 = LoadStaticField(0xb40)
    //     0xabe038: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe03c: ldr             x2, [x2, #0x1680]
    // 0xabe040: mov             x1, x0
    // 0xabe044: r0 = _getValueOrData()
    //     0xabe044: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe048: ldur            x3, [fp, #-0x40]
    // 0xabe04c: LoadField: r1 = r3->field_f
    //     0xabe04c: ldur            w1, [x3, #0xf]
    // 0xabe050: DecompressPointer r1
    //     0xabe050: add             x1, x1, HEAP, lsl #32
    // 0xabe054: cmp             w1, w0
    // 0xabe058: b.ne            #0xabe06c
    // 0xabe05c: r0 = Null
    //     0xabe05c: mov             x0, NULL
    // 0xabe060: b               #0xabe06c
    // 0xabe064: ldur            x3, [fp, #-0x40]
    // 0xabe068: r0 = ""
    //     0xabe068: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe06c: ldur            x4, [fp, #-0x20]
    // 0xabe070: ldur            x1, [fp, #-0x68]
    // 0xabe074: ArrayStore: r1[2] = r0  ; List_4
    //     0xabe074: add             x25, x1, #0x17
    //     0xabe078: str             w0, [x25]
    //     0xabe07c: tbz             w0, #0, #0xabe098
    //     0xabe080: ldurb           w16, [x1, #-1]
    //     0xabe084: ldurb           w17, [x0, #-1]
    //     0xabe088: and             x16, x17, x16, lsr #2
    //     0xabe08c: tst             x16, HEAP, lsr #32
    //     0xabe090: b.eq            #0xabe098
    //     0xabe094: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe098: tbnz            w4, #4, #0xabe0cc
    // 0xabe09c: ldur            x0, [fp, #-0x38]
    // 0xabe0a0: r2 = LoadStaticField(0xb40)
    //     0xabe0a0: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe0a4: ldr             x2, [x2, #0x1680]
    // 0xabe0a8: mov             x1, x0
    // 0xabe0ac: r0 = _getValueOrData()
    //     0xabe0ac: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe0b0: ldur            x3, [fp, #-0x38]
    // 0xabe0b4: LoadField: r1 = r3->field_f
    //     0xabe0b4: ldur            w1, [x3, #0xf]
    // 0xabe0b8: DecompressPointer r1
    //     0xabe0b8: add             x1, x1, HEAP, lsl #32
    // 0xabe0bc: cmp             w1, w0
    // 0xabe0c0: b.ne            #0xabe0d4
    // 0xabe0c4: r0 = Null
    //     0xabe0c4: mov             x0, NULL
    // 0xabe0c8: b               #0xabe0d4
    // 0xabe0cc: ldur            x3, [fp, #-0x38]
    // 0xabe0d0: r0 = ""
    //     0xabe0d0: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe0d4: ldur            x4, [fp, #-0x28]
    // 0xabe0d8: ldur            x1, [fp, #-0x68]
    // 0xabe0dc: ArrayStore: r1[3] = r0  ; List_4
    //     0xabe0dc: add             x25, x1, #0x1b
    //     0xabe0e0: str             w0, [x25]
    //     0xabe0e4: tbz             w0, #0, #0xabe100
    //     0xabe0e8: ldurb           w16, [x1, #-1]
    //     0xabe0ec: ldurb           w17, [x0, #-1]
    //     0xabe0f0: and             x16, x17, x16, lsr #2
    //     0xabe0f4: tst             x16, HEAP, lsr #32
    //     0xabe0f8: b.eq            #0xabe100
    //     0xabe0fc: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe100: tbnz            w4, #4, #0xabe134
    // 0xabe104: ldur            x0, [fp, #-0x48]
    // 0xabe108: r2 = LoadStaticField(0xb40)
    //     0xabe108: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe10c: ldr             x2, [x2, #0x1680]
    // 0xabe110: mov             x1, x0
    // 0xabe114: r0 = _getValueOrData()
    //     0xabe114: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe118: ldur            x3, [fp, #-0x48]
    // 0xabe11c: LoadField: r1 = r3->field_f
    //     0xabe11c: ldur            w1, [x3, #0xf]
    // 0xabe120: DecompressPointer r1
    //     0xabe120: add             x1, x1, HEAP, lsl #32
    // 0xabe124: cmp             w1, w0
    // 0xabe128: b.ne            #0xabe13c
    // 0xabe12c: r0 = Null
    //     0xabe12c: mov             x0, NULL
    // 0xabe130: b               #0xabe13c
    // 0xabe134: ldur            x3, [fp, #-0x48]
    // 0xabe138: r0 = ""
    //     0xabe138: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe13c: ldur            x4, [fp, #-0x30]
    // 0xabe140: ldur            x1, [fp, #-0x68]
    // 0xabe144: ArrayStore: r1[4] = r0  ; List_4
    //     0xabe144: add             x25, x1, #0x1f
    //     0xabe148: str             w0, [x25]
    //     0xabe14c: tbz             w0, #0, #0xabe168
    //     0xabe150: ldurb           w16, [x1, #-1]
    //     0xabe154: ldurb           w17, [x0, #-1]
    //     0xabe158: and             x16, x17, x16, lsr #2
    //     0xabe15c: tst             x16, HEAP, lsr #32
    //     0xabe160: b.eq            #0xabe168
    //     0xabe164: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe168: tbnz            w4, #4, #0xabe19c
    // 0xabe16c: ldur            x0, [fp, #-0x58]
    // 0xabe170: r2 = LoadStaticField(0xb40)
    //     0xabe170: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe174: ldr             x2, [x2, #0x1680]
    // 0xabe178: mov             x1, x0
    // 0xabe17c: r0 = _getValueOrData()
    //     0xabe17c: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe180: ldur            x2, [fp, #-0x58]
    // 0xabe184: LoadField: r1 = r2->field_f
    //     0xabe184: ldur            w1, [x2, #0xf]
    // 0xabe188: DecompressPointer r1
    //     0xabe188: add             x1, x1, HEAP, lsl #32
    // 0xabe18c: cmp             w1, w0
    // 0xabe190: b.ne            #0xabe1a4
    // 0xabe194: r0 = Null
    //     0xabe194: mov             x0, NULL
    // 0xabe198: b               #0xabe1a4
    // 0xabe19c: ldur            x2, [fp, #-0x58]
    // 0xabe1a0: r0 = ""
    //     0xabe1a0: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe1a4: ldur            x4, [fp, #-8]
    // 0xabe1a8: ldur            x5, [fp, #-0x60]
    // 0xabe1ac: ldur            x3, [fp, #-0x68]
    // 0xabe1b0: mov             x1, x3
    // 0xabe1b4: ArrayStore: r1[5] = r0  ; List_4
    //     0xabe1b4: add             x25, x1, #0x23
    //     0xabe1b8: str             w0, [x25]
    //     0xabe1bc: tbz             w0, #0, #0xabe1d8
    //     0xabe1c0: ldurb           w16, [x1, #-1]
    //     0xabe1c4: ldurb           w17, [x0, #-1]
    //     0xabe1c8: and             x16, x17, x16, lsr #2
    //     0xabe1cc: tst             x16, HEAP, lsr #32
    //     0xabe1d0: b.eq            #0xabe1d8
    //     0xabe1d4: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe1d8: r17 = " that\'s all I guess..."
    //     0xabe1d8: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4d8] " that\'s all I guess..."
    //     0xabe1dc: ldr             x17, [x17, #0x4d8]
    // 0xabe1e0: StoreField: r3->field_27 = r17
    //     0xabe1e0: stur            w17, [x3, #0x27]
    // 0xabe1e4: str             x3, [SP]
    // 0xabe1e8: r0 = _interpolate()
    //     0xabe1e8: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabe1ec: ldur            x1, [fp, #-0x60]
    // 0xabe1f0: ArrayStore: r1[1] = r0  ; List_4
    //     0xabe1f0: add             x25, x1, #0x13
    //     0xabe1f4: str             w0, [x25]
    //     0xabe1f8: tbz             w0, #0, #0xabe214
    //     0xabe1fc: ldurb           w16, [x1, #-1]
    //     0xabe200: ldurb           w17, [x0, #-1]
    //     0xabe204: and             x16, x17, x16, lsr #2
    //     0xabe208: tst             x16, HEAP, lsr #32
    //     0xabe20c: b.eq            #0xabe214
    //     0xabe210: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe214: ldur            x0, [fp, #-0x60]
    // 0xabe218: r17 = "CN"
    //     0xabe218: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb30] "CN"
    //     0xabe21c: ldr             x17, [x17, #0xb30]
    // 0xabe220: ArrayStore: r0[0] = r17  ; List_4
    //     0xabe220: stur            w17, [x0, #0x17]
    // 0xabe224: r1 = Null
    //     0xabe224: mov             x1, NULL
    // 0xabe228: r2 = 14
    //     0xabe228: movz            x2, #0xe
    // 0xabe22c: r0 = AllocateArray()
    //     0xabe22c: bl              #0x1502560  ; AllocateArrayStub
    // 0xabe230: stur            x0, [fp, #-0x68]
    // 0xabe234: r17 = "让我看看，你买了"
    //     0xabe234: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4e0] "让我看看，你买了"
    //     0xabe238: ldr             x17, [x17, #0x4e0]
    // 0xabe23c: StoreField: r0->field_f = r17
    //     0xabe23c: stur            w17, [x0, #0xf]
    // 0xabe240: ldur            x3, [fp, #-8]
    // 0xabe244: tbnz            w3, #4, #0xabe278
    // 0xabe248: ldur            x4, [fp, #-0x50]
    // 0xabe24c: r2 = LoadStaticField(0xb40)
    //     0xabe24c: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe250: ldr             x2, [x2, #0x1680]
    // 0xabe254: mov             x1, x4
    // 0xabe258: r0 = _getValueOrData()
    //     0xabe258: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe25c: ldur            x3, [fp, #-0x50]
    // 0xabe260: LoadField: r1 = r3->field_f
    //     0xabe260: ldur            w1, [x3, #0xf]
    // 0xabe264: DecompressPointer r1
    //     0xabe264: add             x1, x1, HEAP, lsl #32
    // 0xabe268: cmp             w1, w0
    // 0xabe26c: b.ne            #0xabe280
    // 0xabe270: r0 = Null
    //     0xabe270: mov             x0, NULL
    // 0xabe274: b               #0xabe280
    // 0xabe278: ldur            x3, [fp, #-0x50]
    // 0xabe27c: r0 = ""
    //     0xabe27c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe280: ldur            x4, [fp, #-0x18]
    // 0xabe284: ldur            x1, [fp, #-0x68]
    // 0xabe288: ArrayStore: r1[1] = r0  ; List_4
    //     0xabe288: add             x25, x1, #0x13
    //     0xabe28c: str             w0, [x25]
    //     0xabe290: tbz             w0, #0, #0xabe2ac
    //     0xabe294: ldurb           w16, [x1, #-1]
    //     0xabe298: ldurb           w17, [x0, #-1]
    //     0xabe29c: and             x16, x17, x16, lsr #2
    //     0xabe2a0: tst             x16, HEAP, lsr #32
    //     0xabe2a4: b.eq            #0xabe2ac
    //     0xabe2a8: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe2ac: tbnz            w4, #4, #0xabe2e0
    // 0xabe2b0: ldur            x0, [fp, #-0x40]
    // 0xabe2b4: r2 = LoadStaticField(0xb40)
    //     0xabe2b4: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe2b8: ldr             x2, [x2, #0x1680]
    // 0xabe2bc: mov             x1, x0
    // 0xabe2c0: r0 = _getValueOrData()
    //     0xabe2c0: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe2c4: ldur            x3, [fp, #-0x40]
    // 0xabe2c8: LoadField: r1 = r3->field_f
    //     0xabe2c8: ldur            w1, [x3, #0xf]
    // 0xabe2cc: DecompressPointer r1
    //     0xabe2cc: add             x1, x1, HEAP, lsl #32
    // 0xabe2d0: cmp             w1, w0
    // 0xabe2d4: b.ne            #0xabe2e8
    // 0xabe2d8: r0 = Null
    //     0xabe2d8: mov             x0, NULL
    // 0xabe2dc: b               #0xabe2e8
    // 0xabe2e0: ldur            x3, [fp, #-0x40]
    // 0xabe2e4: r0 = ""
    //     0xabe2e4: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe2e8: ldur            x4, [fp, #-0x20]
    // 0xabe2ec: ldur            x1, [fp, #-0x68]
    // 0xabe2f0: ArrayStore: r1[2] = r0  ; List_4
    //     0xabe2f0: add             x25, x1, #0x17
    //     0xabe2f4: str             w0, [x25]
    //     0xabe2f8: tbz             w0, #0, #0xabe314
    //     0xabe2fc: ldurb           w16, [x1, #-1]
    //     0xabe300: ldurb           w17, [x0, #-1]
    //     0xabe304: and             x16, x17, x16, lsr #2
    //     0xabe308: tst             x16, HEAP, lsr #32
    //     0xabe30c: b.eq            #0xabe314
    //     0xabe310: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe314: tbnz            w4, #4, #0xabe348
    // 0xabe318: ldur            x0, [fp, #-0x38]
    // 0xabe31c: r2 = LoadStaticField(0xb40)
    //     0xabe31c: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe320: ldr             x2, [x2, #0x1680]
    // 0xabe324: mov             x1, x0
    // 0xabe328: r0 = _getValueOrData()
    //     0xabe328: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe32c: ldur            x3, [fp, #-0x38]
    // 0xabe330: LoadField: r1 = r3->field_f
    //     0xabe330: ldur            w1, [x3, #0xf]
    // 0xabe334: DecompressPointer r1
    //     0xabe334: add             x1, x1, HEAP, lsl #32
    // 0xabe338: cmp             w1, w0
    // 0xabe33c: b.ne            #0xabe350
    // 0xabe340: r0 = Null
    //     0xabe340: mov             x0, NULL
    // 0xabe344: b               #0xabe350
    // 0xabe348: ldur            x3, [fp, #-0x38]
    // 0xabe34c: r0 = ""
    //     0xabe34c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe350: ldur            x4, [fp, #-0x28]
    // 0xabe354: ldur            x1, [fp, #-0x68]
    // 0xabe358: ArrayStore: r1[3] = r0  ; List_4
    //     0xabe358: add             x25, x1, #0x1b
    //     0xabe35c: str             w0, [x25]
    //     0xabe360: tbz             w0, #0, #0xabe37c
    //     0xabe364: ldurb           w16, [x1, #-1]
    //     0xabe368: ldurb           w17, [x0, #-1]
    //     0xabe36c: and             x16, x17, x16, lsr #2
    //     0xabe370: tst             x16, HEAP, lsr #32
    //     0xabe374: b.eq            #0xabe37c
    //     0xabe378: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe37c: tbnz            w4, #4, #0xabe3b0
    // 0xabe380: ldur            x0, [fp, #-0x48]
    // 0xabe384: r2 = LoadStaticField(0xb40)
    //     0xabe384: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe388: ldr             x2, [x2, #0x1680]
    // 0xabe38c: mov             x1, x0
    // 0xabe390: r0 = _getValueOrData()
    //     0xabe390: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe394: ldur            x3, [fp, #-0x48]
    // 0xabe398: LoadField: r1 = r3->field_f
    //     0xabe398: ldur            w1, [x3, #0xf]
    // 0xabe39c: DecompressPointer r1
    //     0xabe39c: add             x1, x1, HEAP, lsl #32
    // 0xabe3a0: cmp             w1, w0
    // 0xabe3a4: b.ne            #0xabe3b8
    // 0xabe3a8: r0 = Null
    //     0xabe3a8: mov             x0, NULL
    // 0xabe3ac: b               #0xabe3b8
    // 0xabe3b0: ldur            x3, [fp, #-0x48]
    // 0xabe3b4: r0 = ""
    //     0xabe3b4: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe3b8: ldur            x4, [fp, #-0x30]
    // 0xabe3bc: ldur            x1, [fp, #-0x68]
    // 0xabe3c0: ArrayStore: r1[4] = r0  ; List_4
    //     0xabe3c0: add             x25, x1, #0x1f
    //     0xabe3c4: str             w0, [x25]
    //     0xabe3c8: tbz             w0, #0, #0xabe3e4
    //     0xabe3cc: ldurb           w16, [x1, #-1]
    //     0xabe3d0: ldurb           w17, [x0, #-1]
    //     0xabe3d4: and             x16, x17, x16, lsr #2
    //     0xabe3d8: tst             x16, HEAP, lsr #32
    //     0xabe3dc: b.eq            #0xabe3e4
    //     0xabe3e0: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe3e4: tbnz            w4, #4, #0xabe418
    // 0xabe3e8: ldur            x0, [fp, #-0x58]
    // 0xabe3ec: r2 = LoadStaticField(0xb40)
    //     0xabe3ec: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe3f0: ldr             x2, [x2, #0x1680]
    // 0xabe3f4: mov             x1, x0
    // 0xabe3f8: r0 = _getValueOrData()
    //     0xabe3f8: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe3fc: ldur            x2, [fp, #-0x58]
    // 0xabe400: LoadField: r1 = r2->field_f
    //     0xabe400: ldur            w1, [x2, #0xf]
    // 0xabe404: DecompressPointer r1
    //     0xabe404: add             x1, x1, HEAP, lsl #32
    // 0xabe408: cmp             w1, w0
    // 0xabe40c: b.ne            #0xabe420
    // 0xabe410: r0 = Null
    //     0xabe410: mov             x0, NULL
    // 0xabe414: b               #0xabe420
    // 0xabe418: ldur            x2, [fp, #-0x58]
    // 0xabe41c: r0 = ""
    //     0xabe41c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe420: ldur            x4, [fp, #-8]
    // 0xabe424: ldur            x5, [fp, #-0x60]
    // 0xabe428: ldur            x3, [fp, #-0x68]
    // 0xabe42c: mov             x1, x3
    // 0xabe430: ArrayStore: r1[5] = r0  ; List_4
    //     0xabe430: add             x25, x1, #0x23
    //     0xabe434: str             w0, [x25]
    //     0xabe438: tbz             w0, #0, #0xabe454
    //     0xabe43c: ldurb           w16, [x1, #-1]
    //     0xabe440: ldurb           w17, [x0, #-1]
    //     0xabe444: and             x16, x17, x16, lsr #2
    //     0xabe448: tst             x16, HEAP, lsr #32
    //     0xabe44c: b.eq            #0xabe454
    //     0xabe450: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe454: r17 = " 应该没有了吧. . ."
    //     0xabe454: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4e8] " 应该没有了吧. . ."
    //     0xabe458: ldr             x17, [x17, #0x4e8]
    // 0xabe45c: StoreField: r3->field_27 = r17
    //     0xabe45c: stur            w17, [x3, #0x27]
    // 0xabe460: str             x3, [SP]
    // 0xabe464: r0 = _interpolate()
    //     0xabe464: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabe468: ldur            x1, [fp, #-0x60]
    // 0xabe46c: ArrayStore: r1[3] = r0  ; List_4
    //     0xabe46c: add             x25, x1, #0x1b
    //     0xabe470: str             w0, [x25]
    //     0xabe474: tbz             w0, #0, #0xabe490
    //     0xabe478: ldurb           w16, [x1, #-1]
    //     0xabe47c: ldurb           w17, [x0, #-1]
    //     0xabe480: and             x16, x17, x16, lsr #2
    //     0xabe484: tst             x16, HEAP, lsr #32
    //     0xabe488: b.eq            #0xabe490
    //     0xabe48c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe490: ldur            x0, [fp, #-0x60]
    // 0xabe494: r17 = "TW"
    //     0xabe494: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb40] "TW"
    //     0xabe498: ldr             x17, [x17, #0xb40]
    // 0xabe49c: StoreField: r0->field_1f = r17
    //     0xabe49c: stur            w17, [x0, #0x1f]
    // 0xabe4a0: r1 = Null
    //     0xabe4a0: mov             x1, NULL
    // 0xabe4a4: r2 = 14
    //     0xabe4a4: movz            x2, #0xe
    // 0xabe4a8: r0 = AllocateArray()
    //     0xabe4a8: bl              #0x1502560  ; AllocateArrayStub
    // 0xabe4ac: stur            x0, [fp, #-0x68]
    // 0xabe4b0: r17 = "讓我看看，你買了"
    //     0xabe4b0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4f0] "讓我看看，你買了"
    //     0xabe4b4: ldr             x17, [x17, #0x4f0]
    // 0xabe4b8: StoreField: r0->field_f = r17
    //     0xabe4b8: stur            w17, [x0, #0xf]
    // 0xabe4bc: ldur            x3, [fp, #-8]
    // 0xabe4c0: tbnz            w3, #4, #0xabe4f4
    // 0xabe4c4: ldur            x4, [fp, #-0x50]
    // 0xabe4c8: r2 = LoadStaticField(0xb40)
    //     0xabe4c8: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe4cc: ldr             x2, [x2, #0x1680]
    // 0xabe4d0: mov             x1, x4
    // 0xabe4d4: r0 = _getValueOrData()
    //     0xabe4d4: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe4d8: ldur            x3, [fp, #-0x50]
    // 0xabe4dc: LoadField: r1 = r3->field_f
    //     0xabe4dc: ldur            w1, [x3, #0xf]
    // 0xabe4e0: DecompressPointer r1
    //     0xabe4e0: add             x1, x1, HEAP, lsl #32
    // 0xabe4e4: cmp             w1, w0
    // 0xabe4e8: b.ne            #0xabe4fc
    // 0xabe4ec: r0 = Null
    //     0xabe4ec: mov             x0, NULL
    // 0xabe4f0: b               #0xabe4fc
    // 0xabe4f4: ldur            x3, [fp, #-0x50]
    // 0xabe4f8: r0 = ""
    //     0xabe4f8: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe4fc: ldur            x4, [fp, #-0x18]
    // 0xabe500: ldur            x1, [fp, #-0x68]
    // 0xabe504: ArrayStore: r1[1] = r0  ; List_4
    //     0xabe504: add             x25, x1, #0x13
    //     0xabe508: str             w0, [x25]
    //     0xabe50c: tbz             w0, #0, #0xabe528
    //     0xabe510: ldurb           w16, [x1, #-1]
    //     0xabe514: ldurb           w17, [x0, #-1]
    //     0xabe518: and             x16, x17, x16, lsr #2
    //     0xabe51c: tst             x16, HEAP, lsr #32
    //     0xabe520: b.eq            #0xabe528
    //     0xabe524: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe528: tbnz            w4, #4, #0xabe55c
    // 0xabe52c: ldur            x0, [fp, #-0x40]
    // 0xabe530: r2 = LoadStaticField(0xb40)
    //     0xabe530: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe534: ldr             x2, [x2, #0x1680]
    // 0xabe538: mov             x1, x0
    // 0xabe53c: r0 = _getValueOrData()
    //     0xabe53c: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe540: ldur            x3, [fp, #-0x40]
    // 0xabe544: LoadField: r1 = r3->field_f
    //     0xabe544: ldur            w1, [x3, #0xf]
    // 0xabe548: DecompressPointer r1
    //     0xabe548: add             x1, x1, HEAP, lsl #32
    // 0xabe54c: cmp             w1, w0
    // 0xabe550: b.ne            #0xabe564
    // 0xabe554: r0 = Null
    //     0xabe554: mov             x0, NULL
    // 0xabe558: b               #0xabe564
    // 0xabe55c: ldur            x3, [fp, #-0x40]
    // 0xabe560: r0 = ""
    //     0xabe560: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe564: ldur            x4, [fp, #-0x20]
    // 0xabe568: ldur            x1, [fp, #-0x68]
    // 0xabe56c: ArrayStore: r1[2] = r0  ; List_4
    //     0xabe56c: add             x25, x1, #0x17
    //     0xabe570: str             w0, [x25]
    //     0xabe574: tbz             w0, #0, #0xabe590
    //     0xabe578: ldurb           w16, [x1, #-1]
    //     0xabe57c: ldurb           w17, [x0, #-1]
    //     0xabe580: and             x16, x17, x16, lsr #2
    //     0xabe584: tst             x16, HEAP, lsr #32
    //     0xabe588: b.eq            #0xabe590
    //     0xabe58c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe590: tbnz            w4, #4, #0xabe5c4
    // 0xabe594: ldur            x0, [fp, #-0x38]
    // 0xabe598: r2 = LoadStaticField(0xb40)
    //     0xabe598: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe59c: ldr             x2, [x2, #0x1680]
    // 0xabe5a0: mov             x1, x0
    // 0xabe5a4: r0 = _getValueOrData()
    //     0xabe5a4: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe5a8: ldur            x3, [fp, #-0x38]
    // 0xabe5ac: LoadField: r1 = r3->field_f
    //     0xabe5ac: ldur            w1, [x3, #0xf]
    // 0xabe5b0: DecompressPointer r1
    //     0xabe5b0: add             x1, x1, HEAP, lsl #32
    // 0xabe5b4: cmp             w1, w0
    // 0xabe5b8: b.ne            #0xabe5cc
    // 0xabe5bc: r0 = Null
    //     0xabe5bc: mov             x0, NULL
    // 0xabe5c0: b               #0xabe5cc
    // 0xabe5c4: ldur            x3, [fp, #-0x38]
    // 0xabe5c8: r0 = ""
    //     0xabe5c8: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe5cc: ldur            x4, [fp, #-0x28]
    // 0xabe5d0: ldur            x1, [fp, #-0x68]
    // 0xabe5d4: ArrayStore: r1[3] = r0  ; List_4
    //     0xabe5d4: add             x25, x1, #0x1b
    //     0xabe5d8: str             w0, [x25]
    //     0xabe5dc: tbz             w0, #0, #0xabe5f8
    //     0xabe5e0: ldurb           w16, [x1, #-1]
    //     0xabe5e4: ldurb           w17, [x0, #-1]
    //     0xabe5e8: and             x16, x17, x16, lsr #2
    //     0xabe5ec: tst             x16, HEAP, lsr #32
    //     0xabe5f0: b.eq            #0xabe5f8
    //     0xabe5f4: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe5f8: tbnz            w4, #4, #0xabe62c
    // 0xabe5fc: ldur            x0, [fp, #-0x48]
    // 0xabe600: r2 = LoadStaticField(0xb40)
    //     0xabe600: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe604: ldr             x2, [x2, #0x1680]
    // 0xabe608: mov             x1, x0
    // 0xabe60c: r0 = _getValueOrData()
    //     0xabe60c: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe610: ldur            x3, [fp, #-0x48]
    // 0xabe614: LoadField: r1 = r3->field_f
    //     0xabe614: ldur            w1, [x3, #0xf]
    // 0xabe618: DecompressPointer r1
    //     0xabe618: add             x1, x1, HEAP, lsl #32
    // 0xabe61c: cmp             w1, w0
    // 0xabe620: b.ne            #0xabe634
    // 0xabe624: r0 = Null
    //     0xabe624: mov             x0, NULL
    // 0xabe628: b               #0xabe634
    // 0xabe62c: ldur            x3, [fp, #-0x48]
    // 0xabe630: r0 = ""
    //     0xabe630: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe634: ldur            x4, [fp, #-0x30]
    // 0xabe638: ldur            x1, [fp, #-0x68]
    // 0xabe63c: ArrayStore: r1[4] = r0  ; List_4
    //     0xabe63c: add             x25, x1, #0x1f
    //     0xabe640: str             w0, [x25]
    //     0xabe644: tbz             w0, #0, #0xabe660
    //     0xabe648: ldurb           w16, [x1, #-1]
    //     0xabe64c: ldurb           w17, [x0, #-1]
    //     0xabe650: and             x16, x17, x16, lsr #2
    //     0xabe654: tst             x16, HEAP, lsr #32
    //     0xabe658: b.eq            #0xabe660
    //     0xabe65c: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe660: tbnz            w4, #4, #0xabe694
    // 0xabe664: ldur            x0, [fp, #-0x58]
    // 0xabe668: r2 = LoadStaticField(0xb40)
    //     0xabe668: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe66c: ldr             x2, [x2, #0x1680]
    // 0xabe670: mov             x1, x0
    // 0xabe674: r0 = _getValueOrData()
    //     0xabe674: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe678: ldur            x2, [fp, #-0x58]
    // 0xabe67c: LoadField: r1 = r2->field_f
    //     0xabe67c: ldur            w1, [x2, #0xf]
    // 0xabe680: DecompressPointer r1
    //     0xabe680: add             x1, x1, HEAP, lsl #32
    // 0xabe684: cmp             w1, w0
    // 0xabe688: b.ne            #0xabe69c
    // 0xabe68c: r0 = Null
    //     0xabe68c: mov             x0, NULL
    // 0xabe690: b               #0xabe69c
    // 0xabe694: ldur            x2, [fp, #-0x58]
    // 0xabe698: r0 = ""
    //     0xabe698: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe69c: ldur            x4, [fp, #-8]
    // 0xabe6a0: ldur            x5, [fp, #-0x60]
    // 0xabe6a4: ldur            x3, [fp, #-0x68]
    // 0xabe6a8: mov             x1, x3
    // 0xabe6ac: ArrayStore: r1[5] = r0  ; List_4
    //     0xabe6ac: add             x25, x1, #0x23
    //     0xabe6b0: str             w0, [x25]
    //     0xabe6b4: tbz             w0, #0, #0xabe6d0
    //     0xabe6b8: ldurb           w16, [x1, #-1]
    //     0xabe6bc: ldurb           w17, [x0, #-1]
    //     0xabe6c0: and             x16, x17, x16, lsr #2
    //     0xabe6c4: tst             x16, HEAP, lsr #32
    //     0xabe6c8: b.eq            #0xabe6d0
    //     0xabe6cc: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe6d0: r17 = " 應該沒有了吧. . ."
    //     0xabe6d0: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f4f8] " 應該沒有了吧. . ."
    //     0xabe6d4: ldr             x17, [x17, #0x4f8]
    // 0xabe6d8: StoreField: r3->field_27 = r17
    //     0xabe6d8: stur            w17, [x3, #0x27]
    // 0xabe6dc: str             x3, [SP]
    // 0xabe6e0: r0 = _interpolate()
    //     0xabe6e0: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabe6e4: ldur            x1, [fp, #-0x60]
    // 0xabe6e8: ArrayStore: r1[5] = r0  ; List_4
    //     0xabe6e8: add             x25, x1, #0x23
    //     0xabe6ec: str             w0, [x25]
    //     0xabe6f0: tbz             w0, #0, #0xabe70c
    //     0xabe6f4: ldurb           w16, [x1, #-1]
    //     0xabe6f8: ldurb           w17, [x0, #-1]
    //     0xabe6fc: and             x16, x17, x16, lsr #2
    //     0xabe700: tst             x16, HEAP, lsr #32
    //     0xabe704: b.eq            #0xabe70c
    //     0xabe708: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe70c: ldur            x0, [fp, #-0x60]
    // 0xabe710: r17 = "JP"
    //     0xabe710: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb50] "JP"
    //     0xabe714: ldr             x17, [x17, #0xb50]
    // 0xabe718: StoreField: r0->field_27 = r17
    //     0xabe718: stur            w17, [x0, #0x27]
    // 0xabe71c: r1 = Null
    //     0xabe71c: mov             x1, NULL
    // 0xabe720: r2 = 14
    //     0xabe720: movz            x2, #0xe
    // 0xabe724: r0 = AllocateArray()
    //     0xabe724: bl              #0x1502560  ; AllocateArrayStub
    // 0xabe728: stur            x0, [fp, #-0x68]
    // 0xabe72c: r17 = "そうだね、今手にあるのは"
    //     0xabe72c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f500] "そうだね、今手にあるのは"
    //     0xabe730: ldr             x17, [x17, #0x500]
    // 0xabe734: StoreField: r0->field_f = r17
    //     0xabe734: stur            w17, [x0, #0xf]
    // 0xabe738: ldur            x1, [fp, #-8]
    // 0xabe73c: tbnz            w1, #4, #0xabe77c
    // 0xabe740: ldur            x3, [fp, #-0x50]
    // 0xabe744: r2 = LoadStaticField(0xb40)
    //     0xabe744: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe748: ldr             x2, [x2, #0x1680]
    // 0xabe74c: mov             x1, x3
    // 0xabe750: r0 = _getValueOrData()
    //     0xabe750: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe754: mov             x1, x0
    // 0xabe758: ldur            x0, [fp, #-0x50]
    // 0xabe75c: LoadField: r2 = r0->field_f
    //     0xabe75c: ldur            w2, [x0, #0xf]
    // 0xabe760: DecompressPointer r2
    //     0xabe760: add             x2, x2, HEAP, lsl #32
    // 0xabe764: cmp             w2, w1
    // 0xabe768: b.ne            #0xabe774
    // 0xabe76c: r0 = Null
    //     0xabe76c: mov             x0, NULL
    // 0xabe770: b               #0xabe780
    // 0xabe774: mov             x0, x1
    // 0xabe778: b               #0xabe780
    // 0xabe77c: r0 = ""
    //     0xabe77c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe780: ldur            x2, [fp, #-0x18]
    // 0xabe784: ldur            x1, [fp, #-0x68]
    // 0xabe788: ArrayStore: r1[1] = r0  ; List_4
    //     0xabe788: add             x25, x1, #0x13
    //     0xabe78c: str             w0, [x25]
    //     0xabe790: tbz             w0, #0, #0xabe7ac
    //     0xabe794: ldurb           w16, [x1, #-1]
    //     0xabe798: ldurb           w17, [x0, #-1]
    //     0xabe79c: and             x16, x17, x16, lsr #2
    //     0xabe7a0: tst             x16, HEAP, lsr #32
    //     0xabe7a4: b.eq            #0xabe7ac
    //     0xabe7a8: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe7ac: tbnz            w2, #4, #0xabe7ec
    // 0xabe7b0: ldur            x0, [fp, #-0x40]
    // 0xabe7b4: r2 = LoadStaticField(0xb40)
    //     0xabe7b4: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe7b8: ldr             x2, [x2, #0x1680]
    // 0xabe7bc: mov             x1, x0
    // 0xabe7c0: r0 = _getValueOrData()
    //     0xabe7c0: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe7c4: mov             x1, x0
    // 0xabe7c8: ldur            x0, [fp, #-0x40]
    // 0xabe7cc: LoadField: r2 = r0->field_f
    //     0xabe7cc: ldur            w2, [x0, #0xf]
    // 0xabe7d0: DecompressPointer r2
    //     0xabe7d0: add             x2, x2, HEAP, lsl #32
    // 0xabe7d4: cmp             w2, w1
    // 0xabe7d8: b.ne            #0xabe7e4
    // 0xabe7dc: r0 = Null
    //     0xabe7dc: mov             x0, NULL
    // 0xabe7e0: b               #0xabe7f0
    // 0xabe7e4: mov             x0, x1
    // 0xabe7e8: b               #0xabe7f0
    // 0xabe7ec: r0 = ""
    //     0xabe7ec: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe7f0: ldur            x2, [fp, #-0x20]
    // 0xabe7f4: ldur            x1, [fp, #-0x68]
    // 0xabe7f8: ArrayStore: r1[2] = r0  ; List_4
    //     0xabe7f8: add             x25, x1, #0x17
    //     0xabe7fc: str             w0, [x25]
    //     0xabe800: tbz             w0, #0, #0xabe81c
    //     0xabe804: ldurb           w16, [x1, #-1]
    //     0xabe808: ldurb           w17, [x0, #-1]
    //     0xabe80c: and             x16, x17, x16, lsr #2
    //     0xabe810: tst             x16, HEAP, lsr #32
    //     0xabe814: b.eq            #0xabe81c
    //     0xabe818: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe81c: tbnz            w2, #4, #0xabe85c
    // 0xabe820: ldur            x0, [fp, #-0x38]
    // 0xabe824: r2 = LoadStaticField(0xb40)
    //     0xabe824: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe828: ldr             x2, [x2, #0x1680]
    // 0xabe82c: mov             x1, x0
    // 0xabe830: r0 = _getValueOrData()
    //     0xabe830: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe834: mov             x1, x0
    // 0xabe838: ldur            x0, [fp, #-0x38]
    // 0xabe83c: LoadField: r2 = r0->field_f
    //     0xabe83c: ldur            w2, [x0, #0xf]
    // 0xabe840: DecompressPointer r2
    //     0xabe840: add             x2, x2, HEAP, lsl #32
    // 0xabe844: cmp             w2, w1
    // 0xabe848: b.ne            #0xabe854
    // 0xabe84c: r0 = Null
    //     0xabe84c: mov             x0, NULL
    // 0xabe850: b               #0xabe860
    // 0xabe854: mov             x0, x1
    // 0xabe858: b               #0xabe860
    // 0xabe85c: r0 = ""
    //     0xabe85c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe860: ldur            x2, [fp, #-0x28]
    // 0xabe864: ldur            x1, [fp, #-0x68]
    // 0xabe868: ArrayStore: r1[3] = r0  ; List_4
    //     0xabe868: add             x25, x1, #0x1b
    //     0xabe86c: str             w0, [x25]
    //     0xabe870: tbz             w0, #0, #0xabe88c
    //     0xabe874: ldurb           w16, [x1, #-1]
    //     0xabe878: ldurb           w17, [x0, #-1]
    //     0xabe87c: and             x16, x17, x16, lsr #2
    //     0xabe880: tst             x16, HEAP, lsr #32
    //     0xabe884: b.eq            #0xabe88c
    //     0xabe888: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe88c: tbnz            w2, #4, #0xabe8cc
    // 0xabe890: ldur            x0, [fp, #-0x48]
    // 0xabe894: r2 = LoadStaticField(0xb40)
    //     0xabe894: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe898: ldr             x2, [x2, #0x1680]
    // 0xabe89c: mov             x1, x0
    // 0xabe8a0: r0 = _getValueOrData()
    //     0xabe8a0: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe8a4: mov             x1, x0
    // 0xabe8a8: ldur            x0, [fp, #-0x48]
    // 0xabe8ac: LoadField: r2 = r0->field_f
    //     0xabe8ac: ldur            w2, [x0, #0xf]
    // 0xabe8b0: DecompressPointer r2
    //     0xabe8b0: add             x2, x2, HEAP, lsl #32
    // 0xabe8b4: cmp             w2, w1
    // 0xabe8b8: b.ne            #0xabe8c4
    // 0xabe8bc: r0 = Null
    //     0xabe8bc: mov             x0, NULL
    // 0xabe8c0: b               #0xabe8d0
    // 0xabe8c4: mov             x0, x1
    // 0xabe8c8: b               #0xabe8d0
    // 0xabe8cc: r0 = ""
    //     0xabe8cc: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe8d0: ldur            x2, [fp, #-0x30]
    // 0xabe8d4: ldur            x1, [fp, #-0x68]
    // 0xabe8d8: ArrayStore: r1[4] = r0  ; List_4
    //     0xabe8d8: add             x25, x1, #0x1f
    //     0xabe8dc: str             w0, [x25]
    //     0xabe8e0: tbz             w0, #0, #0xabe8fc
    //     0xabe8e4: ldurb           w16, [x1, #-1]
    //     0xabe8e8: ldurb           w17, [x0, #-1]
    //     0xabe8ec: and             x16, x17, x16, lsr #2
    //     0xabe8f0: tst             x16, HEAP, lsr #32
    //     0xabe8f4: b.eq            #0xabe8fc
    //     0xabe8f8: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe8fc: tbnz            w2, #4, #0xabe93c
    // 0xabe900: ldur            x0, [fp, #-0x58]
    // 0xabe904: r2 = LoadStaticField(0xb40)
    //     0xabe904: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xabe908: ldr             x2, [x2, #0x1680]
    // 0xabe90c: mov             x1, x0
    // 0xabe910: r0 = _getValueOrData()
    //     0xabe910: bl              #0x14f0dd8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xabe914: mov             x1, x0
    // 0xabe918: ldur            x0, [fp, #-0x58]
    // 0xabe91c: LoadField: r2 = r0->field_f
    //     0xabe91c: ldur            w2, [x0, #0xf]
    // 0xabe920: DecompressPointer r2
    //     0xabe920: add             x2, x2, HEAP, lsl #32
    // 0xabe924: cmp             w2, w1
    // 0xabe928: b.ne            #0xabe934
    // 0xabe92c: r0 = Null
    //     0xabe92c: mov             x0, NULL
    // 0xabe930: b               #0xabe940
    // 0xabe934: mov             x0, x1
    // 0xabe938: b               #0xabe940
    // 0xabe93c: r0 = ""
    //     0xabe93c: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0xabe940: ldur            x2, [fp, #-0x68]
    // 0xabe944: mov             x1, x2
    // 0xabe948: ArrayStore: r1[5] = r0  ; List_4
    //     0xabe948: add             x25, x1, #0x23
    //     0xabe94c: str             w0, [x25]
    //     0xabe950: tbz             w0, #0, #0xabe96c
    //     0xabe954: ldurb           w16, [x1, #-1]
    //     0xabe958: ldurb           w17, [x0, #-1]
    //     0xabe95c: and             x16, x17, x16, lsr #2
    //     0xabe960: tst             x16, HEAP, lsr #32
    //     0xabe964: b.eq            #0xabe96c
    //     0xabe968: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe96c: r17 = "　だそうね．．．"
    //     0xabe96c: add             x17, PP, #0x2f, lsl #12  ; [pp+0x2f508] "　だそうね．．．"
    //     0xabe970: ldr             x17, [x17, #0x508]
    // 0xabe974: StoreField: r2->field_27 = r17
    //     0xabe974: stur            w17, [x2, #0x27]
    // 0xabe978: str             x2, [SP]
    // 0xabe97c: r0 = _interpolate()
    //     0xabe97c: bl              #0x7c0b78  ; [dart:core] _StringBase::_interpolate
    // 0xabe980: ldur            x1, [fp, #-0x60]
    // 0xabe984: ArrayStore: r1[7] = r0  ; List_4
    //     0xabe984: add             x25, x1, #0x2b
    //     0xabe988: str             w0, [x25]
    //     0xabe98c: tbz             w0, #0, #0xabe9a8
    //     0xabe990: ldurb           w16, [x1, #-1]
    //     0xabe994: ldurb           w17, [x0, #-1]
    //     0xabe998: and             x16, x17, x16, lsr #2
    //     0xabe99c: tst             x16, HEAP, lsr #32
    //     0xabe9a0: b.eq            #0xabe9a8
    //     0xabe9a4: bl              #0x1500868  ; ArrayWriteBarrierStub
    // 0xabe9a8: ldur            x16, [fp, #-0x60]
    // 0xabe9ac: stp             x16, NULL, [SP]
    // 0xabe9b0: r0 = Map._fromLiteral()
    //     0xabe9b0: bl              #0x7be1b0  ; [dart:core] Map::Map._fromLiteral
    // 0xabe9b4: mov             x1, x0
    // 0xabe9b8: mov             x0, x1
    // 0xabe9bc: b               #0xabe9c4
    // 0xabe9c0: ldur            x0, [fp, #-0x10]
    // 0xabe9c4: LeaveFrame
    //     0xabe9c4: mov             SP, fp
    //     0xabe9c8: ldp             fp, lr, [SP], #0x10
    // 0xabe9cc: ret
    //     0xabe9cc: ret             
    // 0xabe9d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xabe9d0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0xabe9d4: b               #0xabb22c
  }
  static _ getCustomAiCode(/* No info */) {
    // ** addr: 0x101b5a0, size: 0x418
    // 0x101b5a0: EnterFrame
    //     0x101b5a0: stp             fp, lr, [SP, #-0x10]!
    //     0x101b5a4: mov             fp, SP
    // 0x101b5a8: AllocStack(0x28)
    //     0x101b5a8: sub             SP, SP, #0x28
    // 0x101b5ac: SetupParameters(dynamic _ /* r1 => r1, fp-0x8 */)
    //     0x101b5ac: stur            x1, [fp, #-8]
    // 0x101b5b0: CheckStackOverflow
    //     0x101b5b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x101b5b4: cmp             SP, x16
    //     0x101b5b8: b.ls            #0x101b9b0
    // 0x101b5bc: r16 = "eva"
    //     0x101b5bc: add             x16, PP, #0x1a, lsl #12  ; [pp+0x1adf8] "eva"
    //     0x101b5c0: ldr             x16, [x16, #0xdf8]
    // 0x101b5c4: stp             x1, x16, [SP]
    // 0x101b5c8: r0 = ==()
    //     0x101b5c8: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x101b5cc: tbnz            w0, #4, #0x101b79c
    // 0x101b5d0: r0 = LoadStaticField(0xb54)
    //     0x101b5d0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b5d4: ldr             x0, [x0, #0x16a8]
    // 0x101b5d8: cmp             w0, NULL
    // 0x101b5dc: b.eq            #0x101b6b0
    // 0x101b5e0: r17 = 327
    //     0x101b5e0: movz            x17, #0x147
    // 0x101b5e4: ldr             w1, [x0, x17]
    // 0x101b5e8: DecompressPointer r1
    //     0x101b5e8: add             x1, x1, HEAP, lsl #32
    // 0x101b5ec: r0 = LoadClassIdInstr(r1)
    //     0x101b5ec: ldur            x0, [x1, #-1]
    //     0x101b5f0: ubfx            x0, x0, #0xc, #0x14
    // 0x101b5f4: r2 = "storyTrip.18"
    //     0x101b5f4: add             x2, PP, #0x13, lsl #12  ; [pp+0x13260] "storyTrip.18"
    //     0x101b5f8: ldr             x2, [x2, #0x260]
    // 0x101b5fc: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b5fc: sub             lr, x0, #0xb4
    //     0x101b600: ldr             lr, [x21, lr, lsl #3]
    //     0x101b604: blr             lr
    // 0x101b608: cmp             w0, NULL
    // 0x101b60c: b.eq            #0x101b6b0
    // 0x101b610: r0 = LoadStaticField(0xb54)
    //     0x101b610: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b614: ldr             x0, [x0, #0x16a8]
    // 0x101b618: cmp             w0, NULL
    // 0x101b61c: b.ne            #0x101b628
    // 0x101b620: r3 = Null
    //     0x101b620: mov             x3, NULL
    // 0x101b624: b               #0x101b654
    // 0x101b628: r17 = 327
    //     0x101b628: movz            x17, #0x147
    // 0x101b62c: ldr             w1, [x0, x17]
    // 0x101b630: DecompressPointer r1
    //     0x101b630: add             x1, x1, HEAP, lsl #32
    // 0x101b634: r0 = LoadClassIdInstr(r1)
    //     0x101b634: ldur            x0, [x1, #-1]
    //     0x101b638: ubfx            x0, x0, #0xc, #0x14
    // 0x101b63c: r2 = "storyTrip.18"
    //     0x101b63c: add             x2, PP, #0x13, lsl #12  ; [pp+0x13260] "storyTrip.18"
    //     0x101b640: ldr             x2, [x2, #0x260]
    // 0x101b644: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b644: sub             lr, x0, #0xb4
    //     0x101b648: ldr             lr, [x21, lr, lsl #3]
    //     0x101b64c: blr             lr
    // 0x101b650: mov             x3, x0
    // 0x101b654: mov             x0, x3
    // 0x101b658: stur            x3, [fp, #-0x10]
    // 0x101b65c: r2 = Null
    //     0x101b65c: mov             x2, NULL
    // 0x101b660: r1 = Null
    //     0x101b660: mov             x1, NULL
    // 0x101b664: r4 = 59
    //     0x101b664: movz            x4, #0x3b
    // 0x101b668: branchIfSmi(r0, 0x101b674)
    //     0x101b668: tbz             w0, #0, #0x101b674
    // 0x101b66c: r4 = LoadClassIdInstr(r0)
    //     0x101b66c: ldur            x4, [x0, #-1]
    //     0x101b670: ubfx            x4, x4, #0xc, #0x14
    // 0x101b674: cmp             x4, #0x3e
    // 0x101b678: b.eq            #0x101b68c
    // 0x101b67c: r8 = bool
    //     0x101b67c: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x101b680: r3 = Null
    //     0x101b680: add             x3, PP, #0x9d, lsl #12  ; [pp+0x9db50] Null
    //     0x101b684: ldr             x3, [x3, #0xb50]
    // 0x101b688: r0 = bool()
    //     0x101b688: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x101b68c: ldur            x0, [fp, #-0x10]
    // 0x101b690: tbnz            w0, #4, #0x101b6a0
    // 0x101b694: r0 = "eva2"
    //     0x101b694: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1ae10] "eva2"
    //     0x101b698: ldr             x0, [x0, #0xe10]
    // 0x101b69c: b               #0x101b6a8
    // 0x101b6a0: r0 = "eva"
    //     0x101b6a0: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1adf8] "eva"
    //     0x101b6a4: ldr             x0, [x0, #0xdf8]
    // 0x101b6a8: mov             x3, x0
    // 0x101b6ac: b               #0x101b6b8
    // 0x101b6b0: r3 = "eva"
    //     0x101b6b0: add             x3, PP, #0x1a, lsl #12  ; [pp+0x1adf8] "eva"
    //     0x101b6b4: ldr             x3, [x3, #0xdf8]
    // 0x101b6b8: stur            x3, [fp, #-0x10]
    // 0x101b6bc: r0 = LoadStaticField(0xb54)
    //     0x101b6bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b6c0: ldr             x0, [x0, #0x16a8]
    // 0x101b6c4: cmp             w0, NULL
    // 0x101b6c8: b.eq            #0x101b794
    // 0x101b6cc: r17 = 327
    //     0x101b6cc: movz            x17, #0x147
    // 0x101b6d0: ldr             w1, [x0, x17]
    // 0x101b6d4: DecompressPointer r1
    //     0x101b6d4: add             x1, x1, HEAP, lsl #32
    // 0x101b6d8: r0 = LoadClassIdInstr(r1)
    //     0x101b6d8: ldur            x0, [x1, #-1]
    //     0x101b6dc: ubfx            x0, x0, #0xc, #0x14
    // 0x101b6e0: r2 = "questVincentCrushEX3.End"
    //     0x101b6e0: add             x2, PP, #0x8f, lsl #12  ; [pp+0x8f178] "questVincentCrushEX3.End"
    //     0x101b6e4: ldr             x2, [x2, #0x178]
    // 0x101b6e8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b6e8: sub             lr, x0, #0xb4
    //     0x101b6ec: ldr             lr, [x21, lr, lsl #3]
    //     0x101b6f0: blr             lr
    // 0x101b6f4: cmp             w0, NULL
    // 0x101b6f8: b.eq            #0x101b794
    // 0x101b6fc: r0 = LoadStaticField(0xb54)
    //     0x101b6fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b700: ldr             x0, [x0, #0x16a8]
    // 0x101b704: cmp             w0, NULL
    // 0x101b708: b.ne            #0x101b714
    // 0x101b70c: r3 = Null
    //     0x101b70c: mov             x3, NULL
    // 0x101b710: b               #0x101b740
    // 0x101b714: r17 = 327
    //     0x101b714: movz            x17, #0x147
    // 0x101b718: ldr             w1, [x0, x17]
    // 0x101b71c: DecompressPointer r1
    //     0x101b71c: add             x1, x1, HEAP, lsl #32
    // 0x101b720: r0 = LoadClassIdInstr(r1)
    //     0x101b720: ldur            x0, [x1, #-1]
    //     0x101b724: ubfx            x0, x0, #0xc, #0x14
    // 0x101b728: r2 = "questVincentCrushEX3.End"
    //     0x101b728: add             x2, PP, #0x8f, lsl #12  ; [pp+0x8f178] "questVincentCrushEX3.End"
    //     0x101b72c: ldr             x2, [x2, #0x178]
    // 0x101b730: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b730: sub             lr, x0, #0xb4
    //     0x101b734: ldr             lr, [x21, lr, lsl #3]
    //     0x101b738: blr             lr
    // 0x101b73c: mov             x3, x0
    // 0x101b740: mov             x0, x3
    // 0x101b744: stur            x3, [fp, #-0x18]
    // 0x101b748: r2 = Null
    //     0x101b748: mov             x2, NULL
    // 0x101b74c: r1 = Null
    //     0x101b74c: mov             x1, NULL
    // 0x101b750: r4 = 59
    //     0x101b750: movz            x4, #0x3b
    // 0x101b754: branchIfSmi(r0, 0x101b760)
    //     0x101b754: tbz             w0, #0, #0x101b760
    // 0x101b758: r4 = LoadClassIdInstr(r0)
    //     0x101b758: ldur            x4, [x0, #-1]
    //     0x101b75c: ubfx            x4, x4, #0xc, #0x14
    // 0x101b760: cmp             x4, #0x3e
    // 0x101b764: b.eq            #0x101b778
    // 0x101b768: r8 = bool
    //     0x101b768: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x101b76c: r3 = Null
    //     0x101b76c: add             x3, PP, #0x9d, lsl #12  ; [pp+0x9db60] Null
    //     0x101b770: ldr             x3, [x3, #0xb60]
    // 0x101b774: r0 = bool()
    //     0x101b774: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x101b778: ldur            x0, [fp, #-0x18]
    // 0x101b77c: tbnz            w0, #4, #0x101b78c
    // 0x101b780: r0 = "eva3"
    //     0x101b780: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1ae18] "eva3"
    //     0x101b784: ldr             x0, [x0, #0xe18]
    // 0x101b788: b               #0x101b9a4
    // 0x101b78c: ldur            x0, [fp, #-0x10]
    // 0x101b790: b               #0x101b9a4
    // 0x101b794: ldur            x0, [fp, #-0x10]
    // 0x101b798: b               #0x101b9a4
    // 0x101b79c: r16 = "austin"
    //     0x101b79c: add             x16, PP, #0x1a, lsl #12  ; [pp+0x1aec0] "austin"
    //     0x101b7a0: ldr             x16, [x16, #0xec0]
    // 0x101b7a4: ldur            lr, [fp, #-8]
    // 0x101b7a8: stp             lr, x16, [SP]
    // 0x101b7ac: r0 = ==()
    //     0x101b7ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x101b7b0: tbnz            w0, #4, #0x101b89c
    // 0x101b7b4: r0 = LoadStaticField(0xb54)
    //     0x101b7b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b7b8: ldr             x0, [x0, #0x16a8]
    // 0x101b7bc: cmp             w0, NULL
    // 0x101b7c0: b.eq            #0x101b890
    // 0x101b7c4: r17 = 327
    //     0x101b7c4: movz            x17, #0x147
    // 0x101b7c8: ldr             w1, [x0, x17]
    // 0x101b7cc: DecompressPointer r1
    //     0x101b7cc: add             x1, x1, HEAP, lsl #32
    // 0x101b7d0: r0 = LoadClassIdInstr(r1)
    //     0x101b7d0: ldur            x0, [x1, #-1]
    //     0x101b7d4: ubfx            x0, x0, #0xc, #0x14
    // 0x101b7d8: r2 = "questAustinRivalEX.Start"
    //     0x101b7d8: add             x2, PP, #0x9d, lsl #12  ; [pp+0x9db70] "questAustinRivalEX.Start"
    //     0x101b7dc: ldr             x2, [x2, #0xb70]
    // 0x101b7e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b7e0: sub             lr, x0, #0xb4
    //     0x101b7e4: ldr             lr, [x21, lr, lsl #3]
    //     0x101b7e8: blr             lr
    // 0x101b7ec: cmp             w0, NULL
    // 0x101b7f0: b.eq            #0x101b890
    // 0x101b7f4: r0 = LoadStaticField(0xb54)
    //     0x101b7f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b7f8: ldr             x0, [x0, #0x16a8]
    // 0x101b7fc: cmp             w0, NULL
    // 0x101b800: b.ne            #0x101b80c
    // 0x101b804: r3 = Null
    //     0x101b804: mov             x3, NULL
    // 0x101b808: b               #0x101b838
    // 0x101b80c: r17 = 327
    //     0x101b80c: movz            x17, #0x147
    // 0x101b810: ldr             w1, [x0, x17]
    // 0x101b814: DecompressPointer r1
    //     0x101b814: add             x1, x1, HEAP, lsl #32
    // 0x101b818: r0 = LoadClassIdInstr(r1)
    //     0x101b818: ldur            x0, [x1, #-1]
    //     0x101b81c: ubfx            x0, x0, #0xc, #0x14
    // 0x101b820: r2 = "questAustinRivalEX.Start"
    //     0x101b820: add             x2, PP, #0x9d, lsl #12  ; [pp+0x9db70] "questAustinRivalEX.Start"
    //     0x101b824: ldr             x2, [x2, #0xb70]
    // 0x101b828: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b828: sub             lr, x0, #0xb4
    //     0x101b82c: ldr             lr, [x21, lr, lsl #3]
    //     0x101b830: blr             lr
    // 0x101b834: mov             x3, x0
    // 0x101b838: mov             x0, x3
    // 0x101b83c: stur            x3, [fp, #-0x10]
    // 0x101b840: r2 = Null
    //     0x101b840: mov             x2, NULL
    // 0x101b844: r1 = Null
    //     0x101b844: mov             x1, NULL
    // 0x101b848: r4 = 59
    //     0x101b848: movz            x4, #0x3b
    // 0x101b84c: branchIfSmi(r0, 0x101b858)
    //     0x101b84c: tbz             w0, #0, #0x101b858
    // 0x101b850: r4 = LoadClassIdInstr(r0)
    //     0x101b850: ldur            x4, [x0, #-1]
    //     0x101b854: ubfx            x4, x4, #0xc, #0x14
    // 0x101b858: cmp             x4, #0x3e
    // 0x101b85c: b.eq            #0x101b870
    // 0x101b860: r8 = bool
    //     0x101b860: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x101b864: r3 = Null
    //     0x101b864: add             x3, PP, #0x9d, lsl #12  ; [pp+0x9db78] Null
    //     0x101b868: ldr             x3, [x3, #0xb78]
    // 0x101b86c: r0 = bool()
    //     0x101b86c: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x101b870: ldur            x0, [fp, #-0x10]
    // 0x101b874: tbnz            w0, #4, #0x101b884
    // 0x101b878: r0 = "austin2"
    //     0x101b878: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1aef8] "austin2"
    //     0x101b87c: ldr             x0, [x0, #0xef8]
    // 0x101b880: b               #0x101b9a4
    // 0x101b884: r0 = "austin"
    //     0x101b884: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1aec0] "austin"
    //     0x101b888: ldr             x0, [x0, #0xec0]
    // 0x101b88c: b               #0x101b9a4
    // 0x101b890: r0 = "austin"
    //     0x101b890: add             x0, PP, #0x1a, lsl #12  ; [pp+0x1aec0] "austin"
    //     0x101b894: ldr             x0, [x0, #0xec0]
    // 0x101b898: b               #0x101b9a4
    // 0x101b89c: r16 = "sean"
    //     0x101b89c: add             x16, PP, #0x1a, lsl #12  ; [pp+0x1af00] "sean"
    //     0x101b8a0: ldr             x16, [x16, #0xf00]
    // 0x101b8a4: ldur            lr, [fp, #-8]
    // 0x101b8a8: stp             lr, x16, [SP]
    // 0x101b8ac: r0 = ==()
    //     0x101b8ac: bl              #0x1481f64  ; [dart:core] _OneByteString::==
    // 0x101b8b0: tbnz            w0, #4, #0x101b9a0
    // 0x101b8b4: r0 = LoadStaticField(0xb54)
    //     0x101b8b4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b8b8: ldr             x0, [x0, #0x16a8]
    // 0x101b8bc: cmp             w0, NULL
    // 0x101b8c0: b.eq            #0x101b990
    // 0x101b8c4: r17 = 327
    //     0x101b8c4: movz            x17, #0x147
    // 0x101b8c8: ldr             w1, [x0, x17]
    // 0x101b8cc: DecompressPointer r1
    //     0x101b8cc: add             x1, x1, HEAP, lsl #32
    // 0x101b8d0: r0 = LoadClassIdInstr(r1)
    //     0x101b8d0: ldur            x0, [x1, #-1]
    //     0x101b8d4: ubfx            x0, x0, #0xc, #0x14
    // 0x101b8d8: r2 = "questAustinRivalEX.Start"
    //     0x101b8d8: add             x2, PP, #0x9d, lsl #12  ; [pp+0x9db70] "questAustinRivalEX.Start"
    //     0x101b8dc: ldr             x2, [x2, #0xb70]
    // 0x101b8e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b8e0: sub             lr, x0, #0xb4
    //     0x101b8e4: ldr             lr, [x21, lr, lsl #3]
    //     0x101b8e8: blr             lr
    // 0x101b8ec: cmp             w0, NULL
    // 0x101b8f0: b.eq            #0x101b990
    // 0x101b8f4: r0 = LoadStaticField(0xb54)
    //     0x101b8f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x101b8f8: ldr             x0, [x0, #0x16a8]
    // 0x101b8fc: cmp             w0, NULL
    // 0x101b900: b.ne            #0x101b90c
    // 0x101b904: r3 = Null
    //     0x101b904: mov             x3, NULL
    // 0x101b908: b               #0x101b938
    // 0x101b90c: r17 = 327
    //     0x101b90c: movz            x17, #0x147
    // 0x101b910: ldr             w1, [x0, x17]
    // 0x101b914: DecompressPointer r1
    //     0x101b914: add             x1, x1, HEAP, lsl #32
    // 0x101b918: r0 = LoadClassIdInstr(r1)
    //     0x101b918: ldur            x0, [x1, #-1]
    //     0x101b91c: ubfx            x0, x0, #0xc, #0x14
    // 0x101b920: r2 = "questAustinRivalEX.Start"
    //     0x101b920: add             x2, PP, #0x9d, lsl #12  ; [pp+0x9db70] "questAustinRivalEX.Start"
    //     0x101b924: ldr             x2, [x2, #0xb70]
    // 0x101b928: r0 = GDT[cid_x0 + -0xb4]()
    //     0x101b928: sub             lr, x0, #0xb4
    //     0x101b92c: ldr             lr, [x21, lr, lsl #3]
    //     0x101b930: blr             lr
    // 0x101b934: mov             x3, x0
    // 0x101b938: mov             x0, x3
    // 0x101b93c: stur            x3, [fp, #-8]
    // 0x101b940: r2 = Null
    //     0x101b940: mov             x2, NULL
    // 0x101b944: r1 = Null
    //     0x101b944: mov             x1, NULL
    // 0x101b948: r4 = 59
    //     0x101b948: movz            x4, #0x3b
    // 0x101b94c: branchIfSmi(r0, 0x101b958)
    //     0x101b94c: tbz             w0, #0, #0x101b958
    // 0x101b950: r4 = LoadClassIdInstr(r0)
    //     0x101b950: ldur            x4, [x0, #-1]
    //     0x101b954: ubfx            x4, x4, #0xc, #0x14
    // 0x101b958: cmp             x4, #0x3e
    // 0x101b95c: b.eq            #0x101b970
    // 0x101b960: r8 = bool
    //     0x101b960: ldr             x8, [PP, #0x2a18]  ; [pp+0x2a18] Type: bool
    // 0x101b964: r3 = Null
    //     0x101b964: add             x3, PP, #0x9d, lsl #12  ; [pp+0x9db88] Null
    //     0x101b968: ldr             x3, [x3, #0xb88]
    // 0x101b96c: r0 = bool()
    //     0x101b96c: bl              #0x1522e58  ; IsType_bool_Stub
    // 0x101b970: ldur            x1, [fp, #-8]
    // 0x101b974: tbnz            w1, #4, #0x101b984
    // 0x101b978: r1 = "sean2"
    //     0x101b978: add             x1, PP, #0x1a, lsl #12  ; [pp+0x1af40] "sean2"
    //     0x101b97c: ldr             x1, [x1, #0xf40]
    // 0x101b980: b               #0x101b998
    // 0x101b984: r1 = "sean"
    //     0x101b984: add             x1, PP, #0x1a, lsl #12  ; [pp+0x1af00] "sean"
    //     0x101b988: ldr             x1, [x1, #0xf00]
    // 0x101b98c: b               #0x101b998
    // 0x101b990: r1 = "sean"
    //     0x101b990: add             x1, PP, #0x1a, lsl #12  ; [pp+0x1af00] "sean"
    //     0x101b994: ldr             x1, [x1, #0xf00]
    // 0x101b998: mov             x0, x1
    // 0x101b99c: b               #0x101b9a4
    // 0x101b9a0: r0 = ""
    //     0x101b9a0: ldr             x0, [PP, #0x8a8]  ; [pp+0x8a8] ""
    // 0x101b9a4: LeaveFrame
    //     0x101b9a4: mov             SP, fp
    //     0x101b9a8: ldp             fp, lr, [SP], #0x10
    // 0x101b9ac: ret
    //     0x101b9ac: ret             
    // 0x101b9b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x101b9b0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x101b9b4: b               #0x101b5bc
  }
  static _ getNextECWithCondition(/* No info */) async {
    // ** addr: 0x11b6c94, size: 0x82c
    // 0x11b6c94: EnterFrame
    //     0x11b6c94: stp             fp, lr, [SP, #-0x10]!
    //     0x11b6c98: mov             fp, SP
    // 0x11b6c9c: AllocStack(0x68)
    //     0x11b6c9c: sub             SP, SP, #0x68
    // 0x11b6ca0: SetupParameters(dynamic _ /* r1 => r2, fp-0x58 */, dynamic _ /* r2 => r1, fp-0x60 */)
    //     0x11b6ca0: stur            NULL, [fp, #-8]
    //     0x11b6ca4: stur            x1, [fp, #-0x58]
    //     0x11b6ca8: mov             x16, x2
    //     0x11b6cac: mov             x2, x1
    //     0x11b6cb0: mov             x1, x16
    //     0x11b6cb4: stur            x1, [fp, #-0x60]
    // 0x11b6cb8: CheckStackOverflow
    //     0x11b6cb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b6cbc: cmp             SP, x16
    //     0x11b6cc0: b.ls            #0x11b74b8
    // 0x11b6cc4: InitAsync() -> Future<EventChild?>
    //     0x11b6cc4: add             x0, PP, #0xb3, lsl #12  ; [pp+0xb3908] TypeArguments: <EventChild?>
    //     0x11b6cc8: ldr             x0, [x0, #0x908]
    //     0x11b6ccc: bl              #0x7bea90  ; InitAsyncStub
    // 0x11b6cd0: r1 = 1
    //     0x11b6cd0: movz            x1, #0x1
    // 0x11b6cd4: r0 = AllocateContext()
    //     0x11b6cd4: bl              #0x15014c4  ; AllocateContextStub
    // 0x11b6cd8: mov             x3, x0
    // 0x11b6cdc: ldur            x2, [fp, #-0x58]
    // 0x11b6ce0: stur            x3, [fp, #-0x68]
    // 0x11b6ce4: r0 = LoadClassIdInstr(r2)
    //     0x11b6ce4: ldur            x0, [x2, #-1]
    //     0x11b6ce8: ubfx            x0, x0, #0xc, #0x14
    // 0x11b6cec: mov             x1, x2
    // 0x11b6cf0: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b6cf0: add             lr, x0, #0xb61
    //     0x11b6cf4: ldr             lr, [x21, lr, lsl #3]
    //     0x11b6cf8: blr             lr
    // 0x11b6cfc: r16 = Instance_EventChildType
    //     0x11b6cfc: add             x16, PP, #0x2b, lsl #12  ; [pp+0x2be50] Obj!EventChildType@ec79c1
    //     0x11b6d00: ldr             x16, [x16, #0xe50]
    // 0x11b6d04: cmp             w0, w16
    // 0x11b6d08: b.ne            #0x11b6d70
    // 0x11b6d0c: ldur            x3, [fp, #-0x68]
    // 0x11b6d10: ldur            x0, [fp, #-0x58]
    // 0x11b6d14: r2 = Null
    //     0x11b6d14: mov             x2, NULL
    // 0x11b6d18: r1 = Null
    //     0x11b6d18: mov             x1, NULL
    // 0x11b6d1c: r4 = LoadClassIdInstr(r0)
    //     0x11b6d1c: ldur            x4, [x0, #-1]
    //     0x11b6d20: ubfx            x4, x4, #0xc, #0x14
    // 0x11b6d24: cmp             x4, #0xd54
    // 0x11b6d28: b.eq            #0x11b6d40
    // 0x11b6d2c: r8 = ConditionEventChild
    //     0x11b6d2c: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3910] Type: ConditionEventChild
    //     0x11b6d30: ldr             x8, [x8, #0x910]
    // 0x11b6d34: r3 = Null
    //     0x11b6d34: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3918] Null
    //     0x11b6d38: ldr             x3, [x3, #0x918]
    // 0x11b6d3c: r0 = DefaultTypeTest()
    //     0x11b6d3c: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b6d40: ldur            x1, [fp, #-0x58]
    // 0x11b6d44: r0 = checkConditionCode()
    //     0x11b6d44: bl              #0x11b81cc  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkConditionCode
    // 0x11b6d48: ldur            x2, [fp, #-0x68]
    // 0x11b6d4c: StoreField: r2->field_f = r0
    //     0x11b6d4c: stur            w0, [x2, #0xf]
    //     0x11b6d50: ldurb           w16, [x2, #-1]
    //     0x11b6d54: ldurb           w17, [x0, #-1]
    //     0x11b6d58: and             x16, x17, x16, lsr #2
    //     0x11b6d5c: tst             x16, HEAP, lsr #32
    //     0x11b6d60: b.eq            #0x11b6d68
    //     0x11b6d64: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b6d68: mov             x3, x2
    // 0x11b6d6c: b               #0x11b7488
    // 0x11b6d70: ldur            x3, [fp, #-0x58]
    // 0x11b6d74: ldur            x2, [fp, #-0x68]
    // 0x11b6d78: r0 = LoadClassIdInstr(r3)
    //     0x11b6d78: ldur            x0, [x3, #-1]
    //     0x11b6d7c: ubfx            x0, x0, #0xc, #0x14
    // 0x11b6d80: mov             x1, x3
    // 0x11b6d84: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b6d84: add             lr, x0, #0xb61
    //     0x11b6d88: ldr             lr, [x21, lr, lsl #3]
    //     0x11b6d8c: blr             lr
    // 0x11b6d90: r16 = Instance_EventChildType
    //     0x11b6d90: add             x16, PP, #0x2c, lsl #12  ; [pp+0x2c428] Obj!EventChildType@ec7f61
    //     0x11b6d94: ldr             x16, [x16, #0x428]
    // 0x11b6d98: cmp             w0, w16
    // 0x11b6d9c: b.ne            #0x11b6e04
    // 0x11b6da0: ldur            x3, [fp, #-0x68]
    // 0x11b6da4: ldur            x0, [fp, #-0x58]
    // 0x11b6da8: r2 = Null
    //     0x11b6da8: mov             x2, NULL
    // 0x11b6dac: r1 = Null
    //     0x11b6dac: mov             x1, NULL
    // 0x11b6db0: r4 = LoadClassIdInstr(r0)
    //     0x11b6db0: ldur            x4, [x0, #-1]
    //     0x11b6db4: ubfx            x4, x4, #0xc, #0x14
    // 0x11b6db8: cmp             x4, #0xd52
    // 0x11b6dbc: b.eq            #0x11b6dd4
    // 0x11b6dc0: r8 = TimerEventChild
    //     0x11b6dc0: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3928] Type: TimerEventChild
    //     0x11b6dc4: ldr             x8, [x8, #0x928]
    // 0x11b6dc8: r3 = Null
    //     0x11b6dc8: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3930] Null
    //     0x11b6dcc: ldr             x3, [x3, #0x930]
    // 0x11b6dd0: r0 = DefaultTypeTest()
    //     0x11b6dd0: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b6dd4: ldur            x1, [fp, #-0x58]
    // 0x11b6dd8: r0 = checkTimerCode()
    //     0x11b6dd8: bl              #0x11b7c3c  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkTimerCode
    // 0x11b6ddc: ldur            x2, [fp, #-0x68]
    // 0x11b6de0: StoreField: r2->field_f = r0
    //     0x11b6de0: stur            w0, [x2, #0xf]
    //     0x11b6de4: ldurb           w16, [x2, #-1]
    //     0x11b6de8: ldurb           w17, [x0, #-1]
    //     0x11b6dec: and             x16, x17, x16, lsr #2
    //     0x11b6df0: tst             x16, HEAP, lsr #32
    //     0x11b6df4: b.eq            #0x11b6dfc
    //     0x11b6df8: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b6dfc: mov             x3, x2
    // 0x11b6e00: b               #0x11b7488
    // 0x11b6e04: ldur            x3, [fp, #-0x58]
    // 0x11b6e08: ldur            x2, [fp, #-0x68]
    // 0x11b6e0c: r0 = LoadClassIdInstr(r3)
    //     0x11b6e0c: ldur            x0, [x3, #-1]
    //     0x11b6e10: ubfx            x0, x0, #0xc, #0x14
    // 0x11b6e14: mov             x1, x3
    // 0x11b6e18: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b6e18: add             lr, x0, #0xb61
    //     0x11b6e1c: ldr             lr, [x21, lr, lsl #3]
    //     0x11b6e20: blr             lr
    // 0x11b6e24: r16 = Instance_EventChildType
    //     0x11b6e24: add             x16, PP, #0x3c, lsl #12  ; [pp+0x3ca58] Obj!EventChildType@ec7ee1
    //     0x11b6e28: ldr             x16, [x16, #0xa58]
    // 0x11b6e2c: cmp             w0, w16
    // 0x11b6e30: b.ne            #0x11b6e98
    // 0x11b6e34: ldur            x3, [fp, #-0x68]
    // 0x11b6e38: ldur            x0, [fp, #-0x58]
    // 0x11b6e3c: r2 = Null
    //     0x11b6e3c: mov             x2, NULL
    // 0x11b6e40: r1 = Null
    //     0x11b6e40: mov             x1, NULL
    // 0x11b6e44: r4 = LoadClassIdInstr(r0)
    //     0x11b6e44: ldur            x4, [x0, #-1]
    //     0x11b6e48: ubfx            x4, x4, #0xc, #0x14
    // 0x11b6e4c: cmp             x4, #0xd4d
    // 0x11b6e50: b.eq            #0x11b6e68
    // 0x11b6e54: r8 = SkillConditionEventChild
    //     0x11b6e54: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3940] Type: SkillConditionEventChild
    //     0x11b6e58: ldr             x8, [x8, #0x940]
    // 0x11b6e5c: r3 = Null
    //     0x11b6e5c: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3948] Null
    //     0x11b6e60: ldr             x3, [x3, #0x948]
    // 0x11b6e64: r0 = DefaultTypeTest()
    //     0x11b6e64: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b6e68: ldur            x1, [fp, #-0x58]
    // 0x11b6e6c: r0 = checkSkillConditionCode()
    //     0x11b6e6c: bl              #0x11b7b08  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkSkillConditionCode
    // 0x11b6e70: ldur            x2, [fp, #-0x68]
    // 0x11b6e74: StoreField: r2->field_f = r0
    //     0x11b6e74: stur            w0, [x2, #0xf]
    //     0x11b6e78: ldurb           w16, [x2, #-1]
    //     0x11b6e7c: ldurb           w17, [x0, #-1]
    //     0x11b6e80: and             x16, x17, x16, lsr #2
    //     0x11b6e84: tst             x16, HEAP, lsr #32
    //     0x11b6e88: b.eq            #0x11b6e90
    //     0x11b6e8c: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b6e90: mov             x3, x2
    // 0x11b6e94: b               #0x11b7488
    // 0x11b6e98: ldur            x3, [fp, #-0x58]
    // 0x11b6e9c: ldur            x2, [fp, #-0x68]
    // 0x11b6ea0: r0 = LoadClassIdInstr(r3)
    //     0x11b6ea0: ldur            x0, [x3, #-1]
    //     0x11b6ea4: ubfx            x0, x0, #0xc, #0x14
    // 0x11b6ea8: mov             x1, x3
    // 0x11b6eac: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b6eac: add             lr, x0, #0xb61
    //     0x11b6eb0: ldr             lr, [x21, lr, lsl #3]
    //     0x11b6eb4: blr             lr
    // 0x11b6eb8: r16 = Instance_EventChildType
    //     0x11b6eb8: add             x16, PP, #0x84, lsl #12  ; [pp+0x84358] Obj!EventChildType@ec7d01
    //     0x11b6ebc: ldr             x16, [x16, #0x358]
    // 0x11b6ec0: cmp             w0, w16
    // 0x11b6ec4: b.ne            #0x11b6f9c
    // 0x11b6ec8: ldur            x3, [fp, #-0x58]
    // 0x11b6ecc: mov             x0, x3
    // 0x11b6ed0: r2 = Null
    //     0x11b6ed0: mov             x2, NULL
    // 0x11b6ed4: r1 = Null
    //     0x11b6ed4: mov             x1, NULL
    // 0x11b6ed8: r4 = LoadClassIdInstr(r0)
    //     0x11b6ed8: ldur            x4, [x0, #-1]
    //     0x11b6edc: ubfx            x4, x4, #0xc, #0x14
    // 0x11b6ee0: cmp             x4, #0xd4c
    // 0x11b6ee4: b.eq            #0x11b6efc
    // 0x11b6ee8: r8 = LevelConditionEventChild
    //     0x11b6ee8: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3958] Type: LevelConditionEventChild
    //     0x11b6eec: ldr             x8, [x8, #0x958]
    // 0x11b6ef0: r3 = Null
    //     0x11b6ef0: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3960] Null
    //     0x11b6ef4: ldr             x3, [x3, #0x960]
    // 0x11b6ef8: r0 = DefaultTypeTest()
    //     0x11b6ef8: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b6efc: ldur            x2, [fp, #-0x58]
    // 0x11b6f00: LoadField: r3 = r2->field_f
    //     0x11b6f00: ldur            x3, [x2, #0xf]
    // 0x11b6f04: LoadField: r4 = r2->field_1b
    //     0x11b6f04: ldur            w4, [x2, #0x1b]
    // 0x11b6f08: DecompressPointer r4
    //     0x11b6f08: add             x4, x4, HEAP, lsl #32
    // 0x11b6f0c: LoadField: r5 = r2->field_1f
    //     0x11b6f0c: ldur            w5, [x2, #0x1f]
    // 0x11b6f10: DecompressPointer r5
    //     0x11b6f10: add             x5, x5, HEAP, lsl #32
    // 0x11b6f14: r0 = LoadStaticField(0xb54)
    //     0x11b6f14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b6f18: ldr             x0, [x0, #0x16a8]
    // 0x11b6f1c: cmp             w0, NULL
    // 0x11b6f20: b.ne            #0x11b6f2c
    // 0x11b6f24: r0 = Null
    //     0x11b6f24: mov             x0, NULL
    // 0x11b6f28: b               #0x11b6f44
    // 0x11b6f2c: LoadField: r2 = r0->field_6b
    //     0x11b6f2c: ldur            x2, [x0, #0x6b]
    // 0x11b6f30: r0 = BoxInt64Instr(r2)
    //     0x11b6f30: sbfiz           x0, x2, #1, #0x1f
    //     0x11b6f34: cmp             x2, x0, asr #1
    //     0x11b6f38: b.eq            #0x11b6f44
    //     0x11b6f3c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b6f40: stur            x2, [x0, #7]
    // 0x11b6f44: cmp             w0, NULL
    // 0x11b6f48: b.ne            #0x11b6f54
    // 0x11b6f4c: r0 = 0
    //     0x11b6f4c: movz            x0, #0
    // 0x11b6f50: b               #0x11b6f64
    // 0x11b6f54: r1 = LoadInt32Instr(r0)
    //     0x11b6f54: sbfx            x1, x0, #1, #0x1f
    //     0x11b6f58: tbz             w0, #0, #0x11b6f60
    //     0x11b6f5c: ldur            x1, [x0, #7]
    // 0x11b6f60: mov             x0, x1
    // 0x11b6f64: cmp             x0, x3
    // 0x11b6f68: b.lt            #0x11b6f74
    // 0x11b6f6c: mov             x0, x4
    // 0x11b6f70: b               #0x11b6f78
    // 0x11b6f74: mov             x0, x5
    // 0x11b6f78: ldur            x3, [fp, #-0x68]
    // 0x11b6f7c: StoreField: r3->field_f = r0
    //     0x11b6f7c: stur            w0, [x3, #0xf]
    //     0x11b6f80: ldurb           w16, [x3, #-1]
    //     0x11b6f84: ldurb           w17, [x0, #-1]
    //     0x11b6f88: and             x16, x17, x16, lsr #2
    //     0x11b6f8c: tst             x16, HEAP, lsr #32
    //     0x11b6f90: b.eq            #0x11b6f98
    //     0x11b6f94: bl              #0x1500cc4  ; WriteBarrierWrappersStub
    // 0x11b6f98: b               #0x11b7488
    // 0x11b6f9c: ldur            x2, [fp, #-0x58]
    // 0x11b6fa0: ldur            x3, [fp, #-0x68]
    // 0x11b6fa4: r0 = LoadClassIdInstr(r2)
    //     0x11b6fa4: ldur            x0, [x2, #-1]
    //     0x11b6fa8: ubfx            x0, x0, #0xc, #0x14
    // 0x11b6fac: mov             x1, x2
    // 0x11b6fb0: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b6fb0: add             lr, x0, #0xb61
    //     0x11b6fb4: ldr             lr, [x21, lr, lsl #3]
    //     0x11b6fb8: blr             lr
    // 0x11b6fbc: r16 = Instance_EventChildType
    //     0x11b6fbc: add             x16, PP, #0x3c, lsl #12  ; [pp+0x3c7f0] Obj!EventChildType@ec7b61
    //     0x11b6fc0: ldr             x16, [x16, #0x7f0]
    // 0x11b6fc4: cmp             w0, w16
    // 0x11b6fc8: b.ne            #0x11b70a0
    // 0x11b6fcc: ldur            x3, [fp, #-0x58]
    // 0x11b6fd0: mov             x0, x3
    // 0x11b6fd4: r2 = Null
    //     0x11b6fd4: mov             x2, NULL
    // 0x11b6fd8: r1 = Null
    //     0x11b6fd8: mov             x1, NULL
    // 0x11b6fdc: r4 = LoadClassIdInstr(r0)
    //     0x11b6fdc: ldur            x4, [x0, #-1]
    //     0x11b6fe0: ubfx            x4, x4, #0xc, #0x14
    // 0x11b6fe4: cmp             x4, #0xd4b
    // 0x11b6fe8: b.eq            #0x11b7000
    // 0x11b6fec: r8 = MoneyConditionEventChild
    //     0x11b6fec: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3970] Type: MoneyConditionEventChild
    //     0x11b6ff0: ldr             x8, [x8, #0x970]
    // 0x11b6ff4: r3 = Null
    //     0x11b6ff4: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3978] Null
    //     0x11b6ff8: ldr             x3, [x3, #0x978]
    // 0x11b6ffc: r0 = DefaultTypeTest()
    //     0x11b6ffc: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b7000: ldur            x2, [fp, #-0x58]
    // 0x11b7004: LoadField: r3 = r2->field_f
    //     0x11b7004: ldur            x3, [x2, #0xf]
    // 0x11b7008: LoadField: r4 = r2->field_1b
    //     0x11b7008: ldur            w4, [x2, #0x1b]
    // 0x11b700c: DecompressPointer r4
    //     0x11b700c: add             x4, x4, HEAP, lsl #32
    // 0x11b7010: LoadField: r5 = r2->field_1f
    //     0x11b7010: ldur            w5, [x2, #0x1f]
    // 0x11b7014: DecompressPointer r5
    //     0x11b7014: add             x5, x5, HEAP, lsl #32
    // 0x11b7018: r0 = LoadStaticField(0xb54)
    //     0x11b7018: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b701c: ldr             x0, [x0, #0x16a8]
    // 0x11b7020: cmp             w0, NULL
    // 0x11b7024: b.ne            #0x11b7030
    // 0x11b7028: r0 = Null
    //     0x11b7028: mov             x0, NULL
    // 0x11b702c: b               #0x11b7048
    // 0x11b7030: LoadField: r2 = r0->field_4b
    //     0x11b7030: ldur            x2, [x0, #0x4b]
    // 0x11b7034: r0 = BoxInt64Instr(r2)
    //     0x11b7034: sbfiz           x0, x2, #1, #0x1f
    //     0x11b7038: cmp             x2, x0, asr #1
    //     0x11b703c: b.eq            #0x11b7048
    //     0x11b7040: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b7044: stur            x2, [x0, #7]
    // 0x11b7048: cmp             w0, NULL
    // 0x11b704c: b.ne            #0x11b7058
    // 0x11b7050: r0 = 0
    //     0x11b7050: movz            x0, #0
    // 0x11b7054: b               #0x11b7068
    // 0x11b7058: r1 = LoadInt32Instr(r0)
    //     0x11b7058: sbfx            x1, x0, #1, #0x1f
    //     0x11b705c: tbz             w0, #0, #0x11b7064
    //     0x11b7060: ldur            x1, [x0, #7]
    // 0x11b7064: mov             x0, x1
    // 0x11b7068: cmp             x0, x3
    // 0x11b706c: b.lt            #0x11b7078
    // 0x11b7070: mov             x0, x4
    // 0x11b7074: b               #0x11b707c
    // 0x11b7078: mov             x0, x5
    // 0x11b707c: ldur            x3, [fp, #-0x68]
    // 0x11b7080: StoreField: r3->field_f = r0
    //     0x11b7080: stur            w0, [x3, #0xf]
    //     0x11b7084: ldurb           w16, [x3, #-1]
    //     0x11b7088: ldurb           w17, [x0, #-1]
    //     0x11b708c: and             x16, x17, x16, lsr #2
    //     0x11b7090: tst             x16, HEAP, lsr #32
    //     0x11b7094: b.eq            #0x11b709c
    //     0x11b7098: bl              #0x1500cc4  ; WriteBarrierWrappersStub
    // 0x11b709c: b               #0x11b7488
    // 0x11b70a0: ldur            x2, [fp, #-0x58]
    // 0x11b70a4: ldur            x3, [fp, #-0x68]
    // 0x11b70a8: r0 = LoadClassIdInstr(r2)
    //     0x11b70a8: ldur            x0, [x2, #-1]
    //     0x11b70ac: ubfx            x0, x0, #0xc, #0x14
    // 0x11b70b0: mov             x1, x2
    // 0x11b70b4: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b70b4: add             lr, x0, #0xb61
    //     0x11b70b8: ldr             lr, [x21, lr, lsl #3]
    //     0x11b70bc: blr             lr
    // 0x11b70c0: r16 = Instance_EventChildType
    //     0x11b70c0: add             x16, PP, #0x46, lsl #12  ; [pp+0x46ec8] Obj!EventChildType@ec7c21
    //     0x11b70c4: ldr             x16, [x16, #0xec8]
    // 0x11b70c8: cmp             w0, w16
    // 0x11b70cc: b.ne            #0x11b7134
    // 0x11b70d0: ldur            x3, [fp, #-0x68]
    // 0x11b70d4: ldur            x0, [fp, #-0x58]
    // 0x11b70d8: r2 = Null
    //     0x11b70d8: mov             x2, NULL
    // 0x11b70dc: r1 = Null
    //     0x11b70dc: mov             x1, NULL
    // 0x11b70e0: r4 = LoadClassIdInstr(r0)
    //     0x11b70e0: ldur            x4, [x0, #-1]
    //     0x11b70e4: ubfx            x4, x4, #0xc, #0x14
    // 0x11b70e8: cmp             x4, #0xd4a
    // 0x11b70ec: b.eq            #0x11b7104
    // 0x11b70f0: r8 = KeyItemConditionEventChild
    //     0x11b70f0: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3988] Type: KeyItemConditionEventChild
    //     0x11b70f4: ldr             x8, [x8, #0x988]
    // 0x11b70f8: r3 = Null
    //     0x11b70f8: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3990] Null
    //     0x11b70fc: ldr             x3, [x3, #0x990]
    // 0x11b7100: r0 = DefaultTypeTest()
    //     0x11b7100: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b7104: ldur            x1, [fp, #-0x58]
    // 0x11b7108: r0 = checkKeyItemConditionCode()
    //     0x11b7108: bl              #0x11b7a4c  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkKeyItemConditionCode
    // 0x11b710c: ldur            x2, [fp, #-0x68]
    // 0x11b7110: StoreField: r2->field_f = r0
    //     0x11b7110: stur            w0, [x2, #0xf]
    //     0x11b7114: ldurb           w16, [x2, #-1]
    //     0x11b7118: ldurb           w17, [x0, #-1]
    //     0x11b711c: and             x16, x17, x16, lsr #2
    //     0x11b7120: tst             x16, HEAP, lsr #32
    //     0x11b7124: b.eq            #0x11b712c
    //     0x11b7128: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b712c: mov             x3, x2
    // 0x11b7130: b               #0x11b7488
    // 0x11b7134: ldur            x3, [fp, #-0x58]
    // 0x11b7138: ldur            x2, [fp, #-0x68]
    // 0x11b713c: r0 = LoadClassIdInstr(r3)
    //     0x11b713c: ldur            x0, [x3, #-1]
    //     0x11b7140: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7144: mov             x1, x3
    // 0x11b7148: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b7148: add             lr, x0, #0xb61
    //     0x11b714c: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7150: blr             lr
    // 0x11b7154: r16 = Instance_EventChildType
    //     0x11b7154: add             x16, PP, #0x3c, lsl #12  ; [pp+0x3c100] Obj!EventChildType@ec7b21
    //     0x11b7158: ldr             x16, [x16, #0x100]
    // 0x11b715c: cmp             w0, w16
    // 0x11b7160: b.ne            #0x11b71c8
    // 0x11b7164: ldur            x3, [fp, #-0x68]
    // 0x11b7168: ldur            x0, [fp, #-0x58]
    // 0x11b716c: r2 = Null
    //     0x11b716c: mov             x2, NULL
    // 0x11b7170: r1 = Null
    //     0x11b7170: mov             x1, NULL
    // 0x11b7174: r4 = LoadClassIdInstr(r0)
    //     0x11b7174: ldur            x4, [x0, #-1]
    //     0x11b7178: ubfx            x4, x4, #0xc, #0x14
    // 0x11b717c: cmp             x4, #0xd49
    // 0x11b7180: b.eq            #0x11b7198
    // 0x11b7184: r8 = GearConditionEventChild
    //     0x11b7184: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb39a0] Type: GearConditionEventChild
    //     0x11b7188: ldr             x8, [x8, #0x9a0]
    // 0x11b718c: r3 = Null
    //     0x11b718c: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb39a8] Null
    //     0x11b7190: ldr             x3, [x3, #0x9a8]
    // 0x11b7194: r0 = DefaultTypeTest()
    //     0x11b7194: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b7198: ldur            x1, [fp, #-0x58]
    // 0x11b719c: r0 = checkGearConditionCode()
    //     0x11b719c: bl              #0x11b788c  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkGearConditionCode
    // 0x11b71a0: ldur            x2, [fp, #-0x68]
    // 0x11b71a4: StoreField: r2->field_f = r0
    //     0x11b71a4: stur            w0, [x2, #0xf]
    //     0x11b71a8: ldurb           w16, [x2, #-1]
    //     0x11b71ac: ldurb           w17, [x0, #-1]
    //     0x11b71b0: and             x16, x17, x16, lsr #2
    //     0x11b71b4: tst             x16, HEAP, lsr #32
    //     0x11b71b8: b.eq            #0x11b71c0
    //     0x11b71bc: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b71c0: mov             x3, x2
    // 0x11b71c4: b               #0x11b7488
    // 0x11b71c8: ldur            x3, [fp, #-0x58]
    // 0x11b71cc: ldur            x2, [fp, #-0x68]
    // 0x11b71d0: r0 = LoadClassIdInstr(r3)
    //     0x11b71d0: ldur            x0, [x3, #-1]
    //     0x11b71d4: ubfx            x0, x0, #0xc, #0x14
    // 0x11b71d8: mov             x1, x3
    // 0x11b71dc: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b71dc: add             lr, x0, #0xb61
    //     0x11b71e0: ldr             lr, [x21, lr, lsl #3]
    //     0x11b71e4: blr             lr
    // 0x11b71e8: r16 = Instance_EventChildType
    //     0x11b71e8: add             x16, PP, #0x6a, lsl #12  ; [pp+0x6ad88] Obj!EventChildType@ec7cc1
    //     0x11b71ec: ldr             x16, [x16, #0xd88]
    // 0x11b71f0: cmp             w0, w16
    // 0x11b71f4: b.ne            #0x11b72cc
    // 0x11b71f8: ldur            x3, [fp, #-0x58]
    // 0x11b71fc: mov             x0, x3
    // 0x11b7200: r2 = Null
    //     0x11b7200: mov             x2, NULL
    // 0x11b7204: r1 = Null
    //     0x11b7204: mov             x1, NULL
    // 0x11b7208: r4 = LoadClassIdInstr(r0)
    //     0x11b7208: ldur            x4, [x0, #-1]
    //     0x11b720c: ubfx            x4, x4, #0xc, #0x14
    // 0x11b7210: cmp             x4, #0xd48
    // 0x11b7214: b.eq            #0x11b722c
    // 0x11b7218: r8 = TrophyConditionEventChild
    //     0x11b7218: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb39b8] Type: TrophyConditionEventChild
    //     0x11b721c: ldr             x8, [x8, #0x9b8]
    // 0x11b7220: r3 = Null
    //     0x11b7220: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb39c0] Null
    //     0x11b7224: ldr             x3, [x3, #0x9c0]
    // 0x11b7228: r0 = DefaultTypeTest()
    //     0x11b7228: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b722c: ldur            x2, [fp, #-0x58]
    // 0x11b7230: LoadField: r3 = r2->field_f
    //     0x11b7230: ldur            x3, [x2, #0xf]
    // 0x11b7234: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x11b7234: ldur            w4, [x2, #0x17]
    // 0x11b7238: DecompressPointer r4
    //     0x11b7238: add             x4, x4, HEAP, lsl #32
    // 0x11b723c: LoadField: r5 = r2->field_1b
    //     0x11b723c: ldur            w5, [x2, #0x1b]
    // 0x11b7240: DecompressPointer r5
    //     0x11b7240: add             x5, x5, HEAP, lsl #32
    // 0x11b7244: r0 = LoadStaticField(0xb54)
    //     0x11b7244: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7248: ldr             x0, [x0, #0x16a8]
    // 0x11b724c: cmp             w0, NULL
    // 0x11b7250: b.ne            #0x11b725c
    // 0x11b7254: r0 = Null
    //     0x11b7254: mov             x0, NULL
    // 0x11b7258: b               #0x11b7274
    // 0x11b725c: LoadField: r2 = r0->field_53
    //     0x11b725c: ldur            x2, [x0, #0x53]
    // 0x11b7260: r0 = BoxInt64Instr(r2)
    //     0x11b7260: sbfiz           x0, x2, #1, #0x1f
    //     0x11b7264: cmp             x2, x0, asr #1
    //     0x11b7268: b.eq            #0x11b7274
    //     0x11b726c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b7270: stur            x2, [x0, #7]
    // 0x11b7274: cmp             w0, NULL
    // 0x11b7278: b.ne            #0x11b7284
    // 0x11b727c: r0 = 0
    //     0x11b727c: movz            x0, #0
    // 0x11b7280: b               #0x11b7294
    // 0x11b7284: r1 = LoadInt32Instr(r0)
    //     0x11b7284: sbfx            x1, x0, #1, #0x1f
    //     0x11b7288: tbz             w0, #0, #0x11b7290
    //     0x11b728c: ldur            x1, [x0, #7]
    // 0x11b7290: mov             x0, x1
    // 0x11b7294: cmp             x0, x3
    // 0x11b7298: b.lt            #0x11b72a4
    // 0x11b729c: mov             x0, x4
    // 0x11b72a0: b               #0x11b72a8
    // 0x11b72a4: mov             x0, x5
    // 0x11b72a8: ldur            x3, [fp, #-0x68]
    // 0x11b72ac: StoreField: r3->field_f = r0
    //     0x11b72ac: stur            w0, [x3, #0xf]
    //     0x11b72b0: ldurb           w16, [x3, #-1]
    //     0x11b72b4: ldurb           w17, [x0, #-1]
    //     0x11b72b8: and             x16, x17, x16, lsr #2
    //     0x11b72bc: tst             x16, HEAP, lsr #32
    //     0x11b72c0: b.eq            #0x11b72c8
    //     0x11b72c4: bl              #0x1500cc4  ; WriteBarrierWrappersStub
    // 0x11b72c8: b               #0x11b7488
    // 0x11b72cc: ldur            x2, [fp, #-0x58]
    // 0x11b72d0: ldur            x3, [fp, #-0x68]
    // 0x11b72d4: r0 = LoadClassIdInstr(r2)
    //     0x11b72d4: ldur            x0, [x2, #-1]
    //     0x11b72d8: ubfx            x0, x0, #0xc, #0x14
    // 0x11b72dc: mov             x1, x2
    // 0x11b72e0: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b72e0: add             lr, x0, #0xb61
    //     0x11b72e4: ldr             lr, [x21, lr, lsl #3]
    //     0x11b72e8: blr             lr
    // 0x11b72ec: r16 = Instance_EventChildType
    //     0x11b72ec: add             x16, PP, #0x2f, lsl #12  ; [pp+0x2f6b8] Obj!EventChildType@ec7f21
    //     0x11b72f0: ldr             x16, [x16, #0x6b8]
    // 0x11b72f4: cmp             w0, w16
    // 0x11b72f8: b.ne            #0x11b7360
    // 0x11b72fc: ldur            x3, [fp, #-0x68]
    // 0x11b7300: ldur            x0, [fp, #-0x58]
    // 0x11b7304: r2 = Null
    //     0x11b7304: mov             x2, NULL
    // 0x11b7308: r1 = Null
    //     0x11b7308: mov             x1, NULL
    // 0x11b730c: r4 = LoadClassIdInstr(r0)
    //     0x11b730c: ldur            x4, [x0, #-1]
    //     0x11b7310: ubfx            x4, x4, #0xc, #0x14
    // 0x11b7314: cmp             x4, #0xd46
    // 0x11b7318: b.eq            #0x11b7330
    // 0x11b731c: r8 = ChanceEventChild
    //     0x11b731c: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb39d0] Type: ChanceEventChild
    //     0x11b7320: ldr             x8, [x8, #0x9d0]
    // 0x11b7324: r3 = Null
    //     0x11b7324: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb39d8] Null
    //     0x11b7328: ldr             x3, [x3, #0x9d8]
    // 0x11b732c: r0 = DefaultTypeTest()
    //     0x11b732c: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b7330: ldur            x1, [fp, #-0x58]
    // 0x11b7334: r0 = checkChanceConditionCode()
    //     0x11b7334: bl              #0x11b7814  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkChanceConditionCode
    // 0x11b7338: ldur            x2, [fp, #-0x68]
    // 0x11b733c: StoreField: r2->field_f = r0
    //     0x11b733c: stur            w0, [x2, #0xf]
    //     0x11b7340: ldurb           w16, [x2, #-1]
    //     0x11b7344: ldurb           w17, [x0, #-1]
    //     0x11b7348: and             x16, x17, x16, lsr #2
    //     0x11b734c: tst             x16, HEAP, lsr #32
    //     0x11b7350: b.eq            #0x11b7358
    //     0x11b7354: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b7358: mov             x3, x2
    // 0x11b735c: b               #0x11b7488
    // 0x11b7360: ldur            x3, [fp, #-0x58]
    // 0x11b7364: ldur            x2, [fp, #-0x68]
    // 0x11b7368: r0 = LoadClassIdInstr(r3)
    //     0x11b7368: ldur            x0, [x3, #-1]
    //     0x11b736c: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7370: mov             x1, x3
    // 0x11b7374: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b7374: add             lr, x0, #0xb61
    //     0x11b7378: ldr             lr, [x21, lr, lsl #3]
    //     0x11b737c: blr             lr
    // 0x11b7380: r16 = Instance_EventChildType
    //     0x11b7380: add             x16, PP, #0x7a, lsl #12  ; [pp+0x7a760] Obj!EventChildType@ec7ce1
    //     0x11b7384: ldr             x16, [x16, #0x760]
    // 0x11b7388: cmp             w0, w16
    // 0x11b738c: b.ne            #0x11b73f4
    // 0x11b7390: ldur            x3, [fp, #-0x68]
    // 0x11b7394: ldur            x0, [fp, #-0x58]
    // 0x11b7398: r2 = Null
    //     0x11b7398: mov             x2, NULL
    // 0x11b739c: r1 = Null
    //     0x11b739c: mov             x1, NULL
    // 0x11b73a0: r4 = LoadClassIdInstr(r0)
    //     0x11b73a0: ldur            x4, [x0, #-1]
    //     0x11b73a4: ubfx            x4, x4, #0xc, #0x14
    // 0x11b73a8: cmp             x4, #0xd47
    // 0x11b73ac: b.eq            #0x11b73c4
    // 0x11b73b0: r8 = StatConditionEventChild
    //     0x11b73b0: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb39e8] Type: StatConditionEventChild
    //     0x11b73b4: ldr             x8, [x8, #0x9e8]
    // 0x11b73b8: r3 = Null
    //     0x11b73b8: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb39f0] Null
    //     0x11b73bc: ldr             x3, [x3, #0x9f0]
    // 0x11b73c0: r0 = DefaultTypeTest()
    //     0x11b73c0: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b73c4: ldur            x1, [fp, #-0x58]
    // 0x11b73c8: r0 = checkStatConditionCode()
    //     0x11b73c8: bl              #0x11b75c4  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkStatConditionCode
    // 0x11b73cc: ldur            x2, [fp, #-0x68]
    // 0x11b73d0: StoreField: r2->field_f = r0
    //     0x11b73d0: stur            w0, [x2, #0xf]
    //     0x11b73d4: ldurb           w16, [x2, #-1]
    //     0x11b73d8: ldurb           w17, [x0, #-1]
    //     0x11b73dc: and             x16, x17, x16, lsr #2
    //     0x11b73e0: tst             x16, HEAP, lsr #32
    //     0x11b73e4: b.eq            #0x11b73ec
    //     0x11b73e8: bl              #0x1500ca4  ; WriteBarrierWrappersStub
    // 0x11b73ec: mov             x3, x2
    // 0x11b73f0: b               #0x11b7488
    // 0x11b73f4: ldur            x3, [fp, #-0x58]
    // 0x11b73f8: ldur            x2, [fp, #-0x68]
    // 0x11b73fc: r0 = LoadClassIdInstr(r3)
    //     0x11b73fc: ldur            x0, [x3, #-1]
    //     0x11b7400: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7404: mov             x1, x3
    // 0x11b7408: r0 = GDT[cid_x0 + 0xb61]()
    //     0x11b7408: add             lr, x0, #0xb61
    //     0x11b740c: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7410: blr             lr
    // 0x11b7414: r16 = Instance_EventChildType
    //     0x11b7414: add             x16, PP, #0x2c, lsl #12  ; [pp+0x2c440] Obj!EventChildType@ec7a81
    //     0x11b7418: ldr             x16, [x16, #0x440]
    // 0x11b741c: cmp             w0, w16
    // 0x11b7420: b.ne            #0x11b7484
    // 0x11b7424: ldur            x3, [fp, #-0x68]
    // 0x11b7428: ldur            x0, [fp, #-0x58]
    // 0x11b742c: r2 = Null
    //     0x11b742c: mov             x2, NULL
    // 0x11b7430: r1 = Null
    //     0x11b7430: mov             x1, NULL
    // 0x11b7434: r4 = LoadClassIdInstr(r0)
    //     0x11b7434: ldur            x4, [x0, #-1]
    //     0x11b7438: ubfx            x4, x4, #0xc, #0x14
    // 0x11b743c: cmp             x4, #0xd50
    // 0x11b7440: b.eq            #0x11b7458
    // 0x11b7444: r8 = CounterEventChild
    //     0x11b7444: add             x8, PP, #0xb3, lsl #12  ; [pp+0xb3a00] Type: CounterEventChild
    //     0x11b7448: ldr             x8, [x8, #0xa00]
    // 0x11b744c: r3 = Null
    //     0x11b744c: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3a08] Null
    //     0x11b7450: ldr             x3, [x3, #0xa08]
    // 0x11b7454: r0 = DefaultTypeTest()
    //     0x11b7454: bl              #0x15004d4  ; DefaultTypeTestStub
    // 0x11b7458: ldur            x1, [fp, #-0x58]
    // 0x11b745c: r0 = checkCounterCondition()
    //     0x11b745c: bl              #0x11b74c0  ; [package:battlecross/eventWidget/eventMethod.dart] ::checkCounterCondition
    // 0x11b7460: ldur            x3, [fp, #-0x68]
    // 0x11b7464: StoreField: r3->field_f = r0
    //     0x11b7464: stur            w0, [x3, #0xf]
    //     0x11b7468: ldurb           w16, [x3, #-1]
    //     0x11b746c: ldurb           w17, [x0, #-1]
    //     0x11b7470: and             x16, x17, x16, lsr #2
    //     0x11b7474: tst             x16, HEAP, lsr #32
    //     0x11b7478: b.eq            #0x11b7480
    //     0x11b747c: bl              #0x1500cc4  ; WriteBarrierWrappersStub
    // 0x11b7480: b               #0x11b7488
    // 0x11b7484: ldur            x3, [fp, #-0x68]
    // 0x11b7488: mov             x2, x3
    // 0x11b748c: r1 = Function '<anonymous closure>': static.
    //     0x11b748c: add             x1, PP, #0xb3, lsl #12  ; [pp+0xb3a18] AnonymousClosure: static (0x11b8288), in [package:battlecross/eventWidget/eventMethod.dart] ::getNextECWithCondition (0x11b6c94)
    //     0x11b7490: ldr             x1, [x1, #0xa18]
    // 0x11b7494: r0 = AllocateClosure()
    //     0x11b7494: bl              #0x1501888  ; AllocateClosureStub
    // 0x11b7498: ldur            x1, [fp, #-0x60]
    // 0x11b749c: mov             x2, x0
    // 0x11b74a0: r4 = const [0, 0x2, 0, 0x2, null]
    //     0x11b74a0: ldr             x4, [PP, #0xd8]  ; [pp+0xd8] List(5) [0, 0x2, 0, 0x2, Null]
    // 0x11b74a4: r0 = firstWhere()
    //     0x11b74a4: bl              #0x9d1f4c  ; [dart:collection] ListBase::firstWhere
    // 0x11b74a8: b               #0x11b74b4
    // 0x11b74ac: sub             SP, fp, #0x68
    // 0x11b74b0: r0 = Null
    //     0x11b74b0: mov             x0, NULL
    // 0x11b74b4: r0 = ReturnAsync()
    //     0x11b74b4: b               #0x7bdf10  ; ReturnAsyncStub
    // 0x11b74b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b74b8: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b74bc: b               #0x11b6cc4
  }
  static _ checkCounterCondition(/* No info */) {
    // ** addr: 0x11b74c0, size: 0x104
    // 0x11b74c0: EnterFrame
    //     0x11b74c0: stp             fp, lr, [SP, #-0x10]!
    //     0x11b74c4: mov             fp, SP
    // 0x11b74c8: AllocStack(0x20)
    //     0x11b74c8: sub             SP, SP, #0x20
    // 0x11b74cc: CheckStackOverflow
    //     0x11b74cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b74d0: cmp             SP, x16
    //     0x11b74d4: b.ls            #0x11b75bc
    // 0x11b74d8: LoadField: r3 = r1->field_1b
    //     0x11b74d8: ldur            w3, [x1, #0x1b]
    // 0x11b74dc: DecompressPointer r3
    //     0x11b74dc: add             x3, x3, HEAP, lsl #32
    // 0x11b74e0: stur            x3, [fp, #-0x18]
    // 0x11b74e4: LoadField: r4 = r1->field_1f
    //     0x11b74e4: ldur            w4, [x1, #0x1f]
    // 0x11b74e8: DecompressPointer r4
    //     0x11b74e8: add             x4, x4, HEAP, lsl #32
    // 0x11b74ec: stur            x4, [fp, #-0x10]
    // 0x11b74f0: LoadField: r2 = r1->field_f
    //     0x11b74f0: ldur            w2, [x1, #0xf]
    // 0x11b74f4: DecompressPointer r2
    //     0x11b74f4: add             x2, x2, HEAP, lsl #32
    // 0x11b74f8: LoadField: r5 = r1->field_13
    //     0x11b74f8: ldur            x5, [x1, #0x13]
    // 0x11b74fc: stur            x5, [fp, #-8]
    // 0x11b7500: r0 = LoadStaticField(0xb54)
    //     0x11b7500: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7504: ldr             x0, [x0, #0x16a8]
    // 0x11b7508: cmp             w0, NULL
    // 0x11b750c: b.ne            #0x11b7518
    // 0x11b7510: r0 = Null
    //     0x11b7510: mov             x0, NULL
    // 0x11b7514: b               #0x11b7538
    // 0x11b7518: r17 = 347
    //     0x11b7518: movz            x17, #0x15b
    // 0x11b751c: ldr             w1, [x0, x17]
    // 0x11b7520: DecompressPointer r1
    //     0x11b7520: add             x1, x1, HEAP, lsl #32
    // 0x11b7524: r0 = LoadClassIdInstr(r1)
    //     0x11b7524: ldur            x0, [x1, #-1]
    //     0x11b7528: ubfx            x0, x0, #0xc, #0x14
    // 0x11b752c: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b752c: sub             lr, x0, #0xb4
    //     0x11b7530: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7534: blr             lr
    // 0x11b7538: cmp             w0, NULL
    // 0x11b753c: b.ne            #0x11b7548
    // 0x11b7540: r4 = 0
    //     0x11b7540: movz            x4, #0
    // 0x11b7544: b               #0x11b754c
    // 0x11b7548: mov             x4, x0
    // 0x11b754c: ldur            x3, [fp, #-8]
    // 0x11b7550: mov             x0, x4
    // 0x11b7554: stur            x4, [fp, #-0x20]
    // 0x11b7558: r2 = Null
    //     0x11b7558: mov             x2, NULL
    // 0x11b755c: r1 = Null
    //     0x11b755c: mov             x1, NULL
    // 0x11b7560: branchIfSmi(r0, 0x11b7588)
    //     0x11b7560: tbz             w0, #0, #0x11b7588
    // 0x11b7564: r4 = LoadClassIdInstr(r0)
    //     0x11b7564: ldur            x4, [x0, #-1]
    //     0x11b7568: ubfx            x4, x4, #0xc, #0x14
    // 0x11b756c: sub             x4, x4, #0x3b
    // 0x11b7570: cmp             x4, #1
    // 0x11b7574: b.ls            #0x11b7588
    // 0x11b7578: r8 = int
    //     0x11b7578: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x11b757c: r3 = Null
    //     0x11b757c: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3a20] Null
    //     0x11b7580: ldr             x3, [x3, #0xa20]
    // 0x11b7584: r0 = int()
    //     0x11b7584: bl              #0x1524294  ; IsType_int_Stub
    // 0x11b7588: ldur            x1, [fp, #-0x20]
    // 0x11b758c: r2 = LoadInt32Instr(r1)
    //     0x11b758c: sbfx            x2, x1, #1, #0x1f
    //     0x11b7590: tbz             w1, #0, #0x11b7598
    //     0x11b7594: ldur            x2, [x1, #7]
    // 0x11b7598: ldur            x1, [fp, #-8]
    // 0x11b759c: cmp             x2, x1
    // 0x11b75a0: b.lt            #0x11b75ac
    // 0x11b75a4: ldur            x0, [fp, #-0x18]
    // 0x11b75a8: b               #0x11b75b0
    // 0x11b75ac: ldur            x0, [fp, #-0x10]
    // 0x11b75b0: LeaveFrame
    //     0x11b75b0: mov             SP, fp
    //     0x11b75b4: ldp             fp, lr, [SP], #0x10
    // 0x11b75b8: ret
    //     0x11b75b8: ret             
    // 0x11b75bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b75bc: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b75c0: b               #0x11b74d8
  }
  static _ checkStatConditionCode(/* No info */) {
    // ** addr: 0x11b75c4, size: 0x250
    // 0x11b75c4: EnterFrame
    //     0x11b75c4: stp             fp, lr, [SP, #-0x10]!
    //     0x11b75c8: mov             fp, SP
    // 0x11b75cc: LoadField: r2 = r1->field_f
    //     0x11b75cc: ldur            w2, [x1, #0xf]
    // 0x11b75d0: DecompressPointer r2
    //     0x11b75d0: add             x2, x2, HEAP, lsl #32
    // 0x11b75d4: LoadField: r3 = r1->field_13
    //     0x11b75d4: ldur            x3, [x1, #0x13]
    // 0x11b75d8: LoadField: r4 = r1->field_1b
    //     0x11b75d8: ldur            w4, [x1, #0x1b]
    // 0x11b75dc: DecompressPointer r4
    //     0x11b75dc: add             x4, x4, HEAP, lsl #32
    // 0x11b75e0: LoadField: r5 = r1->field_1f
    //     0x11b75e0: ldur            w5, [x1, #0x1f]
    // 0x11b75e4: DecompressPointer r5
    //     0x11b75e4: add             x5, x5, HEAP, lsl #32
    // 0x11b75e8: LoadField: r6 = r2->field_7
    //     0x11b75e8: ldur            x6, [x2, #7]
    // 0x11b75ec: cmp             x6, #2
    // 0x11b75f0: b.gt            #0x11b7718
    // 0x11b75f4: cmp             x6, #1
    // 0x11b75f8: b.gt            #0x11b76bc
    // 0x11b75fc: cmp             x6, #0
    // 0x11b7600: b.gt            #0x11b7660
    // 0x11b7604: r2 = LoadStaticField(0xb54)
    //     0x11b7604: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7608: ldr             x2, [x2, #0x16a8]
    // 0x11b760c: cmp             w2, NULL
    // 0x11b7610: b.ne            #0x11b761c
    // 0x11b7614: r2 = Null
    //     0x11b7614: mov             x2, NULL
    // 0x11b7618: b               #0x11b7638
    // 0x11b761c: LoadField: r7 = r2->field_83
    //     0x11b761c: ldur            x7, [x2, #0x83]
    // 0x11b7620: r0 = BoxInt64Instr(r7)
    //     0x11b7620: sbfiz           x0, x7, #1, #0x1f
    //     0x11b7624: cmp             x7, x0, asr #1
    //     0x11b7628: b.eq            #0x11b7634
    //     0x11b762c: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b7630: stur            x7, [x0, #7]
    // 0x11b7634: mov             x2, x0
    // 0x11b7638: cmp             w2, NULL
    // 0x11b763c: b.ne            #0x11b7648
    // 0x11b7640: r2 = 0
    //     0x11b7640: movz            x2, #0
    // 0x11b7644: b               #0x11b7658
    // 0x11b7648: r7 = LoadInt32Instr(r2)
    //     0x11b7648: sbfx            x7, x2, #1, #0x1f
    //     0x11b764c: tbz             w2, #0, #0x11b7654
    //     0x11b7650: ldur            x7, [x2, #7]
    // 0x11b7654: mov             x2, x7
    // 0x11b7658: mov             x1, x2
    // 0x11b765c: b               #0x11b77f4
    // 0x11b7660: r2 = LoadStaticField(0xb54)
    //     0x11b7660: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7664: ldr             x2, [x2, #0x16a8]
    // 0x11b7668: cmp             w2, NULL
    // 0x11b766c: b.ne            #0x11b7678
    // 0x11b7670: r2 = Null
    //     0x11b7670: mov             x2, NULL
    // 0x11b7674: b               #0x11b7694
    // 0x11b7678: LoadField: r7 = r2->field_8b
    //     0x11b7678: ldur            x7, [x2, #0x8b]
    // 0x11b767c: r0 = BoxInt64Instr(r7)
    //     0x11b767c: sbfiz           x0, x7, #1, #0x1f
    //     0x11b7680: cmp             x7, x0, asr #1
    //     0x11b7684: b.eq            #0x11b7690
    //     0x11b7688: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b768c: stur            x7, [x0, #7]
    // 0x11b7690: mov             x2, x0
    // 0x11b7694: cmp             w2, NULL
    // 0x11b7698: b.ne            #0x11b76a4
    // 0x11b769c: r2 = 0
    //     0x11b769c: movz            x2, #0
    // 0x11b76a0: b               #0x11b76b4
    // 0x11b76a4: r7 = LoadInt32Instr(r2)
    //     0x11b76a4: sbfx            x7, x2, #1, #0x1f
    //     0x11b76a8: tbz             w2, #0, #0x11b76b0
    //     0x11b76ac: ldur            x7, [x2, #7]
    // 0x11b76b0: mov             x2, x7
    // 0x11b76b4: mov             x1, x2
    // 0x11b76b8: b               #0x11b77f4
    // 0x11b76bc: r2 = LoadStaticField(0xb54)
    //     0x11b76bc: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x11b76c0: ldr             x2, [x2, #0x16a8]
    // 0x11b76c4: cmp             w2, NULL
    // 0x11b76c8: b.ne            #0x11b76d4
    // 0x11b76cc: r2 = Null
    //     0x11b76cc: mov             x2, NULL
    // 0x11b76d0: b               #0x11b76f0
    // 0x11b76d4: LoadField: r7 = r2->field_93
    //     0x11b76d4: ldur            x7, [x2, #0x93]
    // 0x11b76d8: r0 = BoxInt64Instr(r7)
    //     0x11b76d8: sbfiz           x0, x7, #1, #0x1f
    //     0x11b76dc: cmp             x7, x0, asr #1
    //     0x11b76e0: b.eq            #0x11b76ec
    //     0x11b76e4: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b76e8: stur            x7, [x0, #7]
    // 0x11b76ec: mov             x2, x0
    // 0x11b76f0: cmp             w2, NULL
    // 0x11b76f4: b.ne            #0x11b7700
    // 0x11b76f8: r2 = 0
    //     0x11b76f8: movz            x2, #0
    // 0x11b76fc: b               #0x11b7710
    // 0x11b7700: r7 = LoadInt32Instr(r2)
    //     0x11b7700: sbfx            x7, x2, #1, #0x1f
    //     0x11b7704: tbz             w2, #0, #0x11b770c
    //     0x11b7708: ldur            x7, [x2, #7]
    // 0x11b770c: mov             x2, x7
    // 0x11b7710: mov             x1, x2
    // 0x11b7714: b               #0x11b77f4
    // 0x11b7718: cmp             x6, #3
    // 0x11b771c: b.gt            #0x11b777c
    // 0x11b7720: r2 = LoadStaticField(0xb54)
    //     0x11b7720: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7724: ldr             x2, [x2, #0x16a8]
    // 0x11b7728: cmp             w2, NULL
    // 0x11b772c: b.ne            #0x11b7738
    // 0x11b7730: r2 = Null
    //     0x11b7730: mov             x2, NULL
    // 0x11b7734: b               #0x11b7754
    // 0x11b7738: LoadField: r7 = r2->field_9b
    //     0x11b7738: ldur            x7, [x2, #0x9b]
    // 0x11b773c: r0 = BoxInt64Instr(r7)
    //     0x11b773c: sbfiz           x0, x7, #1, #0x1f
    //     0x11b7740: cmp             x7, x0, asr #1
    //     0x11b7744: b.eq            #0x11b7750
    //     0x11b7748: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b774c: stur            x7, [x0, #7]
    // 0x11b7750: mov             x2, x0
    // 0x11b7754: cmp             w2, NULL
    // 0x11b7758: b.ne            #0x11b7764
    // 0x11b775c: r2 = 0
    //     0x11b775c: movz            x2, #0
    // 0x11b7760: b               #0x11b7774
    // 0x11b7764: r7 = LoadInt32Instr(r2)
    //     0x11b7764: sbfx            x7, x2, #1, #0x1f
    //     0x11b7768: tbz             w2, #0, #0x11b7770
    //     0x11b776c: ldur            x7, [x2, #7]
    // 0x11b7770: mov             x2, x7
    // 0x11b7774: mov             x1, x2
    // 0x11b7778: b               #0x11b77f4
    // 0x11b777c: r0 = BoxInt64Instr(r6)
    //     0x11b777c: sbfiz           x0, x6, #1, #0x1f
    //     0x11b7780: cmp             x6, x0, asr #1
    //     0x11b7784: b.eq            #0x11b7790
    //     0x11b7788: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b778c: stur            x6, [x0, #7]
    // 0x11b7790: cmp             w0, #8
    // 0x11b7794: b.ne            #0x11b77f0
    // 0x11b7798: r2 = LoadStaticField(0xb54)
    //     0x11b7798: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x11b779c: ldr             x2, [x2, #0x16a8]
    // 0x11b77a0: cmp             w2, NULL
    // 0x11b77a4: b.ne            #0x11b77b0
    // 0x11b77a8: r1 = Null
    //     0x11b77a8: mov             x1, NULL
    // 0x11b77ac: b               #0x11b77cc
    // 0x11b77b0: LoadField: r6 = r2->field_a3
    //     0x11b77b0: ldur            x6, [x2, #0xa3]
    // 0x11b77b4: r0 = BoxInt64Instr(r6)
    //     0x11b77b4: sbfiz           x0, x6, #1, #0x1f
    //     0x11b77b8: cmp             x6, x0, asr #1
    //     0x11b77bc: b.eq            #0x11b77c8
    //     0x11b77c0: bl              #0x15027e8  ; AllocateMintSharedWithoutFPURegsStub
    //     0x11b77c4: stur            x6, [x0, #7]
    // 0x11b77c8: mov             x1, x0
    // 0x11b77cc: cmp             w1, NULL
    // 0x11b77d0: b.ne            #0x11b77dc
    // 0x11b77d4: r1 = 0
    //     0x11b77d4: movz            x1, #0
    // 0x11b77d8: b               #0x11b77f4
    // 0x11b77dc: r2 = LoadInt32Instr(r1)
    //     0x11b77dc: sbfx            x2, x1, #1, #0x1f
    //     0x11b77e0: tbz             w1, #0, #0x11b77e8
    //     0x11b77e4: ldur            x2, [x1, #7]
    // 0x11b77e8: mov             x1, x2
    // 0x11b77ec: b               #0x11b77f4
    // 0x11b77f0: r1 = 0
    //     0x11b77f0: movz            x1, #0
    // 0x11b77f4: cmp             x1, x3
    // 0x11b77f8: b.lt            #0x11b7804
    // 0x11b77fc: mov             x0, x4
    // 0x11b7800: b               #0x11b7808
    // 0x11b7804: mov             x0, x5
    // 0x11b7808: LeaveFrame
    //     0x11b7808: mov             SP, fp
    //     0x11b780c: ldp             fp, lr, [SP], #0x10
    // 0x11b7810: ret
    //     0x11b7810: ret             
  }
  static _ checkChanceConditionCode(/* No info */) {
    // ** addr: 0x11b7814, size: 0x78
    // 0x11b7814: EnterFrame
    //     0x11b7814: stp             fp, lr, [SP, #-0x10]!
    //     0x11b7818: mov             fp, SP
    // 0x11b781c: AllocStack(0x18)
    //     0x11b781c: sub             SP, SP, #0x18
    // 0x11b7820: CheckStackOverflow
    //     0x11b7820: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b7824: cmp             SP, x16
    //     0x11b7828: b.ls            #0x11b7884
    // 0x11b782c: LoadField: r0 = r1->field_f
    //     0x11b782c: ldur            x0, [x1, #0xf]
    // 0x11b7830: stur            x0, [fp, #-0x18]
    // 0x11b7834: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x11b7834: ldur            w2, [x1, #0x17]
    // 0x11b7838: DecompressPointer r2
    //     0x11b7838: add             x2, x2, HEAP, lsl #32
    // 0x11b783c: stur            x2, [fp, #-0x10]
    // 0x11b7840: LoadField: r3 = r1->field_1b
    //     0x11b7840: ldur            w3, [x1, #0x1b]
    // 0x11b7844: DecompressPointer r3
    //     0x11b7844: add             x3, x3, HEAP, lsl #32
    // 0x11b7848: stur            x3, [fp, #-8]
    // 0x11b784c: r1 = Null
    //     0x11b784c: mov             x1, NULL
    // 0x11b7850: r0 = Random()
    //     0x11b7850: bl              #0x81df00  ; [dart:math] Random::Random
    // 0x11b7854: mov             x1, x0
    // 0x11b7858: r2 = 100
    //     0x11b7858: movz            x2, #0x64
    // 0x11b785c: r0 = nextInt()
    //     0x11b785c: bl              #0x81dcb4  ; [dart:math] _Random::nextInt
    // 0x11b7860: ldur            x1, [fp, #-0x18]
    // 0x11b7864: cmp             x0, x1
    // 0x11b7868: b.ge            #0x11b7874
    // 0x11b786c: ldur            x0, [fp, #-0x10]
    // 0x11b7870: b               #0x11b7878
    // 0x11b7874: ldur            x0, [fp, #-8]
    // 0x11b7878: LeaveFrame
    //     0x11b7878: mov             SP, fp
    //     0x11b787c: ldp             fp, lr, [SP], #0x10
    // 0x11b7880: ret
    //     0x11b7880: ret             
    // 0x11b7884: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b7884: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b7888: b               #0x11b782c
  }
  static _ checkGearConditionCode(/* No info */) {
    // ** addr: 0x11b788c, size: 0x1c0
    // 0x11b788c: EnterFrame
    //     0x11b788c: stp             fp, lr, [SP, #-0x10]!
    //     0x11b7890: mov             fp, SP
    // 0x11b7894: AllocStack(0x30)
    //     0x11b7894: sub             SP, SP, #0x30
    // 0x11b7898: CheckStackOverflow
    //     0x11b7898: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b789c: cmp             SP, x16
    //     0x11b78a0: b.ls            #0x11b7a44
    // 0x11b78a4: LoadField: r2 = r1->field_f
    //     0x11b78a4: ldur            w2, [x1, #0xf]
    // 0x11b78a8: DecompressPointer r2
    //     0x11b78a8: add             x2, x2, HEAP, lsl #32
    // 0x11b78ac: stur            x2, [fp, #-0x18]
    // 0x11b78b0: ArrayLoad: r3 = r1[0]  ; List_4
    //     0x11b78b0: ldur            w3, [x1, #0x17]
    // 0x11b78b4: DecompressPointer r3
    //     0x11b78b4: add             x3, x3, HEAP, lsl #32
    // 0x11b78b8: stur            x3, [fp, #-0x10]
    // 0x11b78bc: LoadField: r4 = r1->field_1b
    //     0x11b78bc: ldur            w4, [x1, #0x1b]
    // 0x11b78c0: DecompressPointer r4
    //     0x11b78c0: add             x4, x4, HEAP, lsl #32
    // 0x11b78c4: stur            x4, [fp, #-8]
    // 0x11b78c8: LoadField: r0 = r1->field_13
    //     0x11b78c8: ldur            w0, [x1, #0x13]
    // 0x11b78cc: DecompressPointer r0
    //     0x11b78cc: add             x0, x0, HEAP, lsl #32
    // 0x11b78d0: tbnz            w0, #4, #0x11b79b4
    // 0x11b78d4: r0 = LoadStaticField(0xb54)
    //     0x11b78d4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b78d8: ldr             x0, [x0, #0x16a8]
    // 0x11b78dc: cmp             w0, NULL
    // 0x11b78e0: b.ne            #0x11b78ec
    // 0x11b78e4: r0 = Null
    //     0x11b78e4: mov             x0, NULL
    // 0x11b78e8: b               #0x11b78f8
    // 0x11b78ec: LoadField: r1 = r0->field_f3
    //     0x11b78ec: ldur            w1, [x0, #0xf3]
    // 0x11b78f0: DecompressPointer r1
    //     0x11b78f0: add             x1, x1, HEAP, lsl #32
    // 0x11b78f4: mov             x0, x1
    // 0x11b78f8: r1 = LoadClassIdInstr(r0)
    //     0x11b78f8: ldur            x1, [x0, #-1]
    //     0x11b78fc: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7900: stp             x2, x0, [SP]
    // 0x11b7904: mov             x0, x1
    // 0x11b7908: mov             lr, x0
    // 0x11b790c: ldr             lr, [x21, lr, lsl #3]
    // 0x11b7910: blr             lr
    // 0x11b7914: tbz             w0, #4, #0x11b7960
    // 0x11b7918: r0 = LoadStaticField(0xb54)
    //     0x11b7918: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b791c: ldr             x0, [x0, #0x16a8]
    // 0x11b7920: cmp             w0, NULL
    // 0x11b7924: b.ne            #0x11b7930
    // 0x11b7928: r0 = Null
    //     0x11b7928: mov             x0, NULL
    // 0x11b792c: b               #0x11b793c
    // 0x11b7930: LoadField: r1 = r0->field_f7
    //     0x11b7930: ldur            w1, [x0, #0xf7]
    // 0x11b7934: DecompressPointer r1
    //     0x11b7934: add             x1, x1, HEAP, lsl #32
    // 0x11b7938: mov             x0, x1
    // 0x11b793c: r1 = LoadClassIdInstr(r0)
    //     0x11b793c: ldur            x1, [x0, #-1]
    //     0x11b7940: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7944: ldur            x16, [fp, #-0x18]
    // 0x11b7948: stp             x16, x0, [SP]
    // 0x11b794c: mov             x0, x1
    // 0x11b7950: mov             lr, x0
    // 0x11b7954: ldr             lr, [x21, lr, lsl #3]
    // 0x11b7958: blr             lr
    // 0x11b795c: tbnz            w0, #4, #0x11b7968
    // 0x11b7960: r0 = true
    //     0x11b7960: add             x0, NULL, #0x20  ; true
    // 0x11b7964: b               #0x11b79ac
    // 0x11b7968: r0 = LoadStaticField(0xb54)
    //     0x11b7968: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b796c: ldr             x0, [x0, #0x16a8]
    // 0x11b7970: cmp             w0, NULL
    // 0x11b7974: b.ne            #0x11b7980
    // 0x11b7978: r0 = Null
    //     0x11b7978: mov             x0, NULL
    // 0x11b797c: b               #0x11b798c
    // 0x11b7980: LoadField: r1 = r0->field_fb
    //     0x11b7980: ldur            w1, [x0, #0xfb]
    // 0x11b7984: DecompressPointer r1
    //     0x11b7984: add             x1, x1, HEAP, lsl #32
    // 0x11b7988: mov             x0, x1
    // 0x11b798c: r1 = LoadClassIdInstr(r0)
    //     0x11b798c: ldur            x1, [x0, #-1]
    //     0x11b7990: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7994: ldur            x16, [fp, #-0x18]
    // 0x11b7998: stp             x16, x0, [SP]
    // 0x11b799c: mov             x0, x1
    // 0x11b79a0: mov             lr, x0
    // 0x11b79a4: ldr             lr, [x21, lr, lsl #3]
    // 0x11b79a8: blr             lr
    // 0x11b79ac: mov             x3, x0
    // 0x11b79b0: b               #0x11b79b8
    // 0x11b79b4: r3 = true
    //     0x11b79b4: add             x3, NULL, #0x20  ; true
    // 0x11b79b8: stur            x3, [fp, #-0x20]
    // 0x11b79bc: r0 = LoadStaticField(0xb54)
    //     0x11b79bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b79c0: ldr             x0, [x0, #0x16a8]
    // 0x11b79c4: cmp             w0, NULL
    // 0x11b79c8: b.ne            #0x11b79d4
    // 0x11b79cc: r0 = Null
    //     0x11b79cc: mov             x0, NULL
    // 0x11b79d0: b               #0x11b79f8
    // 0x11b79d4: r17 = 323
    //     0x11b79d4: movz            x17, #0x143
    // 0x11b79d8: ldr             w1, [x0, x17]
    // 0x11b79dc: DecompressPointer r1
    //     0x11b79dc: add             x1, x1, HEAP, lsl #32
    // 0x11b79e0: r0 = LoadClassIdInstr(r1)
    //     0x11b79e0: ldur            x0, [x1, #-1]
    //     0x11b79e4: ubfx            x0, x0, #0xc, #0x14
    // 0x11b79e8: ldur            x2, [fp, #-0x18]
    // 0x11b79ec: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b79ec: sub             lr, x0, #0xb4
    //     0x11b79f0: ldr             lr, [x21, lr, lsl #3]
    //     0x11b79f4: blr             lr
    // 0x11b79f8: r1 = 59
    //     0x11b79f8: movz            x1, #0x3b
    // 0x11b79fc: branchIfSmi(r0, 0x11b7a08)
    //     0x11b79fc: tbz             w0, #0, #0x11b7a08
    // 0x11b7a00: r1 = LoadClassIdInstr(r0)
    //     0x11b7a00: ldur            x1, [x0, #-1]
    //     0x11b7a04: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7a08: r16 = true
    //     0x11b7a08: add             x16, NULL, #0x20  ; true
    // 0x11b7a0c: stp             x16, x0, [SP]
    // 0x11b7a10: mov             x0, x1
    // 0x11b7a14: mov             lr, x0
    // 0x11b7a18: ldr             lr, [x21, lr, lsl #3]
    // 0x11b7a1c: blr             lr
    // 0x11b7a20: tbnz            w0, #4, #0x11b7a34
    // 0x11b7a24: ldur            x1, [fp, #-0x20]
    // 0x11b7a28: tbnz            w1, #4, #0x11b7a34
    // 0x11b7a2c: ldur            x0, [fp, #-0x10]
    // 0x11b7a30: b               #0x11b7a38
    // 0x11b7a34: ldur            x0, [fp, #-8]
    // 0x11b7a38: LeaveFrame
    //     0x11b7a38: mov             SP, fp
    //     0x11b7a3c: ldp             fp, lr, [SP], #0x10
    // 0x11b7a40: ret
    //     0x11b7a40: ret             
    // 0x11b7a44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b7a44: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b7a48: b               #0x11b78a4
  }
  static _ checkKeyItemConditionCode(/* No info */) {
    // ** addr: 0x11b7a4c, size: 0xbc
    // 0x11b7a4c: EnterFrame
    //     0x11b7a4c: stp             fp, lr, [SP, #-0x10]!
    //     0x11b7a50: mov             fp, SP
    // 0x11b7a54: AllocStack(0x20)
    //     0x11b7a54: sub             SP, SP, #0x20
    // 0x11b7a58: CheckStackOverflow
    //     0x11b7a58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b7a5c: cmp             SP, x16
    //     0x11b7a60: b.ls            #0x11b7b00
    // 0x11b7a64: LoadField: r2 = r1->field_f
    //     0x11b7a64: ldur            w2, [x1, #0xf]
    // 0x11b7a68: DecompressPointer r2
    //     0x11b7a68: add             x2, x2, HEAP, lsl #32
    // 0x11b7a6c: LoadField: r3 = r1->field_13
    //     0x11b7a6c: ldur            w3, [x1, #0x13]
    // 0x11b7a70: DecompressPointer r3
    //     0x11b7a70: add             x3, x3, HEAP, lsl #32
    // 0x11b7a74: stur            x3, [fp, #-0x10]
    // 0x11b7a78: ArrayLoad: r4 = r1[0]  ; List_4
    //     0x11b7a78: ldur            w4, [x1, #0x17]
    // 0x11b7a7c: DecompressPointer r4
    //     0x11b7a7c: add             x4, x4, HEAP, lsl #32
    // 0x11b7a80: stur            x4, [fp, #-8]
    // 0x11b7a84: r0 = LoadStaticField(0xb54)
    //     0x11b7a84: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7a88: ldr             x0, [x0, #0x16a8]
    // 0x11b7a8c: cmp             w0, NULL
    // 0x11b7a90: b.ne            #0x11b7a9c
    // 0x11b7a94: r0 = Null
    //     0x11b7a94: mov             x0, NULL
    // 0x11b7a98: b               #0x11b7abc
    // 0x11b7a9c: r17 = 335
    //     0x11b7a9c: movz            x17, #0x14f
    // 0x11b7aa0: ldr             w1, [x0, x17]
    // 0x11b7aa4: DecompressPointer r1
    //     0x11b7aa4: add             x1, x1, HEAP, lsl #32
    // 0x11b7aa8: r0 = LoadClassIdInstr(r1)
    //     0x11b7aa8: ldur            x0, [x1, #-1]
    //     0x11b7aac: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7ab0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b7ab0: sub             lr, x0, #0xb4
    //     0x11b7ab4: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7ab8: blr             lr
    // 0x11b7abc: r1 = 59
    //     0x11b7abc: movz            x1, #0x3b
    // 0x11b7ac0: branchIfSmi(r0, 0x11b7acc)
    //     0x11b7ac0: tbz             w0, #0, #0x11b7acc
    // 0x11b7ac4: r1 = LoadClassIdInstr(r0)
    //     0x11b7ac4: ldur            x1, [x0, #-1]
    //     0x11b7ac8: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7acc: r16 = true
    //     0x11b7acc: add             x16, NULL, #0x20  ; true
    // 0x11b7ad0: stp             x16, x0, [SP]
    // 0x11b7ad4: mov             x0, x1
    // 0x11b7ad8: mov             lr, x0
    // 0x11b7adc: ldr             lr, [x21, lr, lsl #3]
    // 0x11b7ae0: blr             lr
    // 0x11b7ae4: tbnz            w0, #4, #0x11b7af0
    // 0x11b7ae8: ldur            x0, [fp, #-0x10]
    // 0x11b7aec: b               #0x11b7af4
    // 0x11b7af0: ldur            x0, [fp, #-8]
    // 0x11b7af4: LeaveFrame
    //     0x11b7af4: mov             SP, fp
    //     0x11b7af8: ldp             fp, lr, [SP], #0x10
    // 0x11b7afc: ret
    //     0x11b7afc: ret             
    // 0x11b7b00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b7b00: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b7b04: b               #0x11b7a64
  }
  static _ checkSkillConditionCode(/* No info */) {
    // ** addr: 0x11b7b08, size: 0x134
    // 0x11b7b08: EnterFrame
    //     0x11b7b08: stp             fp, lr, [SP, #-0x10]!
    //     0x11b7b0c: mov             fp, SP
    // 0x11b7b10: AllocStack(0x28)
    //     0x11b7b10: sub             SP, SP, #0x28
    // 0x11b7b14: CheckStackOverflow
    //     0x11b7b14: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b7b18: cmp             SP, x16
    //     0x11b7b1c: b.ls            #0x11b7c34
    // 0x11b7b20: LoadField: r0 = r1->field_f
    //     0x11b7b20: ldur            w0, [x1, #0xf]
    // 0x11b7b24: DecompressPointer r0
    //     0x11b7b24: add             x0, x0, HEAP, lsl #32
    // 0x11b7b28: stur            x0, [fp, #-0x18]
    // 0x11b7b2c: ArrayLoad: r3 = r1[0]  ; List_4
    //     0x11b7b2c: ldur            w3, [x1, #0x17]
    // 0x11b7b30: DecompressPointer r3
    //     0x11b7b30: add             x3, x3, HEAP, lsl #32
    // 0x11b7b34: stur            x3, [fp, #-0x10]
    // 0x11b7b38: LoadField: r4 = r1->field_1b
    //     0x11b7b38: ldur            w4, [x1, #0x1b]
    // 0x11b7b3c: DecompressPointer r4
    //     0x11b7b3c: add             x4, x4, HEAP, lsl #32
    // 0x11b7b40: stur            x4, [fp, #-8]
    // 0x11b7b44: LoadField: r2 = r1->field_13
    //     0x11b7b44: ldur            w2, [x1, #0x13]
    // 0x11b7b48: DecompressPointer r2
    //     0x11b7b48: add             x2, x2, HEAP, lsl #32
    // 0x11b7b4c: tbnz            w2, #4, #0x11b7bb4
    // 0x11b7b50: r1 = LoadStaticField(0xb54)
    //     0x11b7b50: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7b54: ldr             x1, [x1, #0x16a8]
    // 0x11b7b58: cmp             w1, NULL
    // 0x11b7b5c: b.ne            #0x11b7b68
    // 0x11b7b60: r1 = Null
    //     0x11b7b60: mov             x1, NULL
    // 0x11b7b64: b               #0x11b7b78
    // 0x11b7b68: r17 = 311
    //     0x11b7b68: movz            x17, #0x137
    // 0x11b7b6c: ldr             w2, [x1, x17]
    // 0x11b7b70: DecompressPointer r2
    //     0x11b7b70: add             x2, x2, HEAP, lsl #32
    // 0x11b7b74: mov             x1, x2
    // 0x11b7b78: cmp             w1, NULL
    // 0x11b7b7c: b.ne            #0x11b7b90
    // 0x11b7b80: r1 = <String>
    //     0x11b7b80: ldr             x1, [PP, #0x878]  ; [pp+0x878] TypeArguments: <String>
    // 0x11b7b84: r2 = 0
    //     0x11b7b84: movz            x2, #0
    // 0x11b7b88: r0 = _GrowableList()
    //     0x11b7b88: bl              #0x7b7308  ; [dart:core] _GrowableList::_GrowableList
    // 0x11b7b8c: mov             x1, x0
    // 0x11b7b90: r0 = LoadClassIdInstr(r1)
    //     0x11b7b90: ldur            x0, [x1, #-1]
    //     0x11b7b94: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7b98: ldur            x2, [fp, #-0x18]
    // 0x11b7b9c: r0 = GDT[cid_x0 + 0xb08a]()
    //     0x11b7b9c: movz            x17, #0xb08a
    //     0x11b7ba0: add             lr, x0, x17
    //     0x11b7ba4: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7ba8: blr             lr
    // 0x11b7bac: tbnz            w0, #4, #0x11b7c24
    // 0x11b7bb0: b               #0x11b7c1c
    // 0x11b7bb4: r0 = LoadStaticField(0xb54)
    //     0x11b7bb4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7bb8: ldr             x0, [x0, #0x16a8]
    // 0x11b7bbc: cmp             w0, NULL
    // 0x11b7bc0: b.ne            #0x11b7bcc
    // 0x11b7bc4: r0 = Null
    //     0x11b7bc4: mov             x0, NULL
    // 0x11b7bc8: b               #0x11b7bf0
    // 0x11b7bcc: r17 = 319
    //     0x11b7bcc: movz            x17, #0x13f
    // 0x11b7bd0: ldr             w1, [x0, x17]
    // 0x11b7bd4: DecompressPointer r1
    //     0x11b7bd4: add             x1, x1, HEAP, lsl #32
    // 0x11b7bd8: r0 = LoadClassIdInstr(r1)
    //     0x11b7bd8: ldur            x0, [x1, #-1]
    //     0x11b7bdc: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7be0: ldur            x2, [fp, #-0x18]
    // 0x11b7be4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b7be4: sub             lr, x0, #0xb4
    //     0x11b7be8: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7bec: blr             lr
    // 0x11b7bf0: r1 = 59
    //     0x11b7bf0: movz            x1, #0x3b
    // 0x11b7bf4: branchIfSmi(r0, 0x11b7c00)
    //     0x11b7bf4: tbz             w0, #0, #0x11b7c00
    // 0x11b7bf8: r1 = LoadClassIdInstr(r0)
    //     0x11b7bf8: ldur            x1, [x0, #-1]
    //     0x11b7bfc: ubfx            x1, x1, #0xc, #0x14
    // 0x11b7c00: r16 = true
    //     0x11b7c00: add             x16, NULL, #0x20  ; true
    // 0x11b7c04: stp             x16, x0, [SP]
    // 0x11b7c08: mov             x0, x1
    // 0x11b7c0c: mov             lr, x0
    // 0x11b7c10: ldr             lr, [x21, lr, lsl #3]
    // 0x11b7c14: blr             lr
    // 0x11b7c18: tbnz            w0, #4, #0x11b7c24
    // 0x11b7c1c: ldur            x0, [fp, #-0x10]
    // 0x11b7c20: b               #0x11b7c28
    // 0x11b7c24: ldur            x0, [fp, #-8]
    // 0x11b7c28: LeaveFrame
    //     0x11b7c28: mov             SP, fp
    //     0x11b7c2c: ldp             fp, lr, [SP], #0x10
    // 0x11b7c30: ret
    //     0x11b7c30: ret             
    // 0x11b7c34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b7c34: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b7c38: b               #0x11b7b20
  }
  static _ checkTimerCode(/* No info */) {
    // ** addr: 0x11b7c3c, size: 0x590
    // 0x11b7c3c: EnterFrame
    //     0x11b7c3c: stp             fp, lr, [SP, #-0x10]!
    //     0x11b7c40: mov             fp, SP
    // 0x11b7c44: AllocStack(0x78)
    //     0x11b7c44: sub             SP, SP, #0x78
    // 0x11b7c48: SetupParameters(dynamic _ /* r1 => r3, fp-0x28 */)
    //     0x11b7c48: mov             x3, x1
    //     0x11b7c4c: stur            x1, [fp, #-0x28]
    // 0x11b7c50: CheckStackOverflow
    //     0x11b7c50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b7c54: cmp             SP, x16
    //     0x11b7c58: b.ls            #0x11b81a0
    // 0x11b7c5c: LoadField: r4 = r3->field_1b
    //     0x11b7c5c: ldur            w4, [x3, #0x1b]
    // 0x11b7c60: DecompressPointer r4
    //     0x11b7c60: add             x4, x4, HEAP, lsl #32
    // 0x11b7c64: stur            x4, [fp, #-0x20]
    // 0x11b7c68: LoadField: r5 = r3->field_1f
    //     0x11b7c68: ldur            w5, [x3, #0x1f]
    // 0x11b7c6c: DecompressPointer r5
    //     0x11b7c6c: add             x5, x5, HEAP, lsl #32
    // 0x11b7c70: stur            x5, [fp, #-0x18]
    // 0x11b7c74: LoadField: r2 = r3->field_f
    //     0x11b7c74: ldur            w2, [x3, #0xf]
    // 0x11b7c78: DecompressPointer r2
    //     0x11b7c78: add             x2, x2, HEAP, lsl #32
    // 0x11b7c7c: LoadField: r6 = r3->field_13
    //     0x11b7c7c: ldur            w6, [x3, #0x13]
    // 0x11b7c80: DecompressPointer r6
    //     0x11b7c80: add             x6, x6, HEAP, lsl #32
    // 0x11b7c84: stur            x6, [fp, #-0x10]
    // 0x11b7c88: ArrayLoad: r0 = r3[0]  ; List_4
    //     0x11b7c88: ldur            w0, [x3, #0x17]
    // 0x11b7c8c: DecompressPointer r0
    //     0x11b7c8c: add             x0, x0, HEAP, lsl #32
    // 0x11b7c90: cmp             w0, NULL
    // 0x11b7c94: b.ne            #0x11b7ca0
    // 0x11b7c98: r7 = 0
    //     0x11b7c98: movz            x7, #0
    // 0x11b7c9c: b               #0x11b7ca8
    // 0x11b7ca0: r1 = LoadInt32Instr(r0)
    //     0x11b7ca0: sbfx            x1, x0, #1, #0x1f
    // 0x11b7ca4: mov             x7, x1
    // 0x11b7ca8: stur            x7, [fp, #-8]
    // 0x11b7cac: r0 = LoadStaticField(0xb54)
    //     0x11b7cac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7cb0: ldr             x0, [x0, #0x16a8]
    // 0x11b7cb4: cmp             w0, NULL
    // 0x11b7cb8: b.ne            #0x11b7cc4
    // 0x11b7cbc: r3 = Null
    //     0x11b7cbc: mov             x3, NULL
    // 0x11b7cc0: b               #0x11b7ce8
    // 0x11b7cc4: r17 = 331
    //     0x11b7cc4: movz            x17, #0x14b
    // 0x11b7cc8: ldr             w1, [x0, x17]
    // 0x11b7ccc: DecompressPointer r1
    //     0x11b7ccc: add             x1, x1, HEAP, lsl #32
    // 0x11b7cd0: r0 = LoadClassIdInstr(r1)
    //     0x11b7cd0: ldur            x0, [x1, #-1]
    //     0x11b7cd4: ubfx            x0, x0, #0xc, #0x14
    // 0x11b7cd8: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b7cd8: sub             lr, x0, #0xb4
    //     0x11b7cdc: ldr             lr, [x21, lr, lsl #3]
    //     0x11b7ce0: blr             lr
    // 0x11b7ce4: mov             x3, x0
    // 0x11b7ce8: mov             x0, x3
    // 0x11b7cec: stur            x3, [fp, #-0x30]
    // 0x11b7cf0: r2 = Null
    //     0x11b7cf0: mov             x2, NULL
    // 0x11b7cf4: r1 = Null
    //     0x11b7cf4: mov             x1, NULL
    // 0x11b7cf8: r4 = 59
    //     0x11b7cf8: movz            x4, #0x3b
    // 0x11b7cfc: branchIfSmi(r0, 0x11b7d08)
    //     0x11b7cfc: tbz             w0, #0, #0x11b7d08
    // 0x11b7d00: r4 = LoadClassIdInstr(r0)
    //     0x11b7d00: ldur            x4, [x0, #-1]
    //     0x11b7d04: ubfx            x4, x4, #0xc, #0x14
    // 0x11b7d08: cmp             x4, #0xcdb
    // 0x11b7d0c: b.eq            #0x11b7d24
    // 0x11b7d10: r8 = Timestamp?
    //     0x11b7d10: add             x8, PP, #0x1d, lsl #12  ; [pp+0x1dbe0] Type: Timestamp?
    //     0x11b7d14: ldr             x8, [x8, #0xbe0]
    // 0x11b7d18: r3 = Null
    //     0x11b7d18: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3a30] Null
    //     0x11b7d1c: ldr             x3, [x3, #0xa30]
    // 0x11b7d20: r0 = DefaultNullableTypeTest()
    //     0x11b7d20: bl              #0x15004bc  ; DefaultNullableTypeTestStub
    // 0x11b7d24: r0 = LoadStaticField(0xb54)
    //     0x11b7d24: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b7d28: ldr             x0, [x0, #0x16a8]
    // 0x11b7d2c: cmp             w0, NULL
    // 0x11b7d30: b.eq            #0x11b7d50
    // 0x11b7d34: LoadField: r1 = r0->field_2f
    //     0x11b7d34: ldur            w1, [x0, #0x2f]
    // 0x11b7d38: DecompressPointer r1
    //     0x11b7d38: add             x1, x1, HEAP, lsl #32
    // 0x11b7d3c: tbnz            w1, #4, #0x11b7d50
    // 0x11b7d40: ldur            x0, [fp, #-0x18]
    // 0x11b7d44: LeaveFrame
    //     0x11b7d44: mov             SP, fp
    //     0x11b7d48: ldp             fp, lr, [SP], #0x10
    // 0x11b7d4c: ret
    //     0x11b7d4c: ret             
    // 0x11b7d50: ldur            x0, [fp, #-0x30]
    // 0x11b7d54: cmp             w0, NULL
    // 0x11b7d58: b.ne            #0x11b7d64
    // 0x11b7d5c: r3 = true
    //     0x11b7d5c: add             x3, NULL, #0x20  ; true
    // 0x11b7d60: b               #0x11b8088
    // 0x11b7d64: ldur            x2, [fp, #-8]
    // 0x11b7d68: mov             x1, x0
    // 0x11b7d6c: r0 = toDate()
    //     0x11b7d6c: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x11b7d70: stur            x0, [fp, #-0x38]
    // 0x11b7d74: r0 = getTrueDateTime()
    //     0x11b7d74: bl              #0x92fb08  ; [package:battlecross/method/commonMethod.dart] ::getTrueDateTime
    // 0x11b7d78: mov             x1, x0
    // 0x11b7d7c: ldur            x0, [fp, #-8]
    // 0x11b7d80: stur            x1, [fp, #-0x48]
    // 0x11b7d84: cmp             x0, #0
    // 0x11b7d88: b.le            #0x11b7e9c
    // 0x11b7d8c: r16 = 86400000000
    //     0x11b7d8c: add             x16, PP, #0x12, lsl #12  ; [pp+0x129d8] IMM: 0x141dd76000
    //     0x11b7d90: ldr             x16, [x16, #0x9d8]
    // 0x11b7d94: mul             x2, x0, x16
    // 0x11b7d98: stur            x2, [fp, #-0x40]
    // 0x11b7d9c: r0 = Duration()
    //     0x11b7d9c: bl              #0x7bcde4  ; AllocateDurationStub -> Duration (size=0x10)
    // 0x11b7da0: mov             x1, x0
    // 0x11b7da4: ldur            x0, [fp, #-0x40]
    // 0x11b7da8: StoreField: r1->field_7 = r0
    //     0x11b7da8: stur            x0, [x1, #7]
    // 0x11b7dac: mov             x2, x1
    // 0x11b7db0: ldur            x1, [fp, #-0x38]
    // 0x11b7db4: r0 = add()
    //     0x11b7db4: bl              #0x92fb9c  ; [dart:core] DateTime::add
    // 0x11b7db8: mov             x1, x0
    // 0x11b7dbc: stur            x0, [fp, #-0x50]
    // 0x11b7dc0: r0 = _parts()
    //     0x11b7dc0: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7dc4: mov             x2, x0
    // 0x11b7dc8: LoadField: r0 = r2->field_b
    //     0x11b7dc8: ldur            w0, [x2, #0xb]
    // 0x11b7dcc: DecompressPointer r0
    //     0x11b7dcc: add             x0, x0, HEAP, lsl #32
    // 0x11b7dd0: r1 = LoadInt32Instr(r0)
    //     0x11b7dd0: sbfx            x1, x0, #1, #0x1f
    // 0x11b7dd4: mov             x0, x1
    // 0x11b7dd8: r1 = 8
    //     0x11b7dd8: movz            x1, #0x8
    // 0x11b7ddc: cmp             x1, x0
    // 0x11b7de0: b.hs            #0x11b81a8
    // 0x11b7de4: LoadField: r0 = r2->field_2f
    //     0x11b7de4: ldur            w0, [x2, #0x2f]
    // 0x11b7de8: DecompressPointer r0
    //     0x11b7de8: add             x0, x0, HEAP, lsl #32
    // 0x11b7dec: ldur            x1, [fp, #-0x50]
    // 0x11b7df0: stur            x0, [fp, #-0x58]
    // 0x11b7df4: r0 = _parts()
    //     0x11b7df4: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7df8: mov             x2, x0
    // 0x11b7dfc: LoadField: r0 = r2->field_b
    //     0x11b7dfc: ldur            w0, [x2, #0xb]
    // 0x11b7e00: DecompressPointer r0
    //     0x11b7e00: add             x0, x0, HEAP, lsl #32
    // 0x11b7e04: r1 = LoadInt32Instr(r0)
    //     0x11b7e04: sbfx            x1, x0, #1, #0x1f
    // 0x11b7e08: mov             x0, x1
    // 0x11b7e0c: r1 = 7
    //     0x11b7e0c: movz            x1, #0x7
    // 0x11b7e10: cmp             x1, x0
    // 0x11b7e14: b.hs            #0x11b81ac
    // 0x11b7e18: LoadField: r0 = r2->field_2b
    //     0x11b7e18: ldur            w0, [x2, #0x2b]
    // 0x11b7e1c: DecompressPointer r0
    //     0x11b7e1c: add             x0, x0, HEAP, lsl #32
    // 0x11b7e20: ldur            x1, [fp, #-0x50]
    // 0x11b7e24: stur            x0, [fp, #-0x60]
    // 0x11b7e28: r0 = _parts()
    //     0x11b7e28: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7e2c: mov             x2, x0
    // 0x11b7e30: LoadField: r0 = r2->field_b
    //     0x11b7e30: ldur            w0, [x2, #0xb]
    // 0x11b7e34: DecompressPointer r0
    //     0x11b7e34: add             x0, x0, HEAP, lsl #32
    // 0x11b7e38: r1 = LoadInt32Instr(r0)
    //     0x11b7e38: sbfx            x1, x0, #1, #0x1f
    // 0x11b7e3c: mov             x0, x1
    // 0x11b7e40: r1 = 5
    //     0x11b7e40: movz            x1, #0x5
    // 0x11b7e44: cmp             x1, x0
    // 0x11b7e48: b.hs            #0x11b81b0
    // 0x11b7e4c: LoadField: r0 = r2->field_23
    //     0x11b7e4c: ldur            w0, [x2, #0x23]
    // 0x11b7e50: DecompressPointer r0
    //     0x11b7e50: add             x0, x0, HEAP, lsl #32
    // 0x11b7e54: stur            x0, [fp, #-0x50]
    // 0x11b7e58: r0 = DateTime()
    //     0x11b7e58: bl              #0x7f5a70  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x11b7e5c: stur            x0, [fp, #-0x68]
    // 0x11b7e60: ldur            x16, [fp, #-0x60]
    // 0x11b7e64: ldur            lr, [fp, #-0x50]
    // 0x11b7e68: stp             lr, x16, [SP]
    // 0x11b7e6c: mov             x1, x0
    // 0x11b7e70: ldur            x2, [fp, #-0x58]
    // 0x11b7e74: r4 = const [0, 0x4, 0x2, 0x4, null]
    //     0x11b7e74: ldr             x4, [PP, #0x6790]  ; [pp+0x6790] List(5) [0, 0x4, 0x2, 0x4, Null]
    // 0x11b7e78: r0 = DateTime()
    //     0x11b7e78: bl              #0x890528  ; [dart:core] DateTime::DateTime
    // 0x11b7e7c: ldur            x1, [fp, #-0x48]
    // 0x11b7e80: ldur            x2, [fp, #-0x68]
    // 0x11b7e84: r0 = isAfter()
    //     0x11b7e84: bl              #0x147bbf8  ; [dart:core] DateTime::isAfter
    // 0x11b7e88: tbnz            w0, #4, #0x11b7e94
    // 0x11b7e8c: r0 = true
    //     0x11b7e8c: add             x0, NULL, #0x20  ; true
    // 0x11b7e90: b               #0x11b8084
    // 0x11b7e94: r0 = false
    //     0x11b7e94: add             x0, NULL, #0x30  ; false
    // 0x11b7e98: b               #0x11b8084
    // 0x11b7e9c: ldur            x2, [fp, #-0x10]
    // 0x11b7ea0: cmp             w2, NULL
    // 0x11b7ea4: b.ne            #0x11b8060
    // 0x11b7ea8: ldur            x1, [fp, #-0x38]
    // 0x11b7eac: r0 = _parts()
    //     0x11b7eac: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7eb0: mov             x2, x0
    // 0x11b7eb4: LoadField: r0 = r2->field_b
    //     0x11b7eb4: ldur            w0, [x2, #0xb]
    // 0x11b7eb8: DecompressPointer r0
    //     0x11b7eb8: add             x0, x0, HEAP, lsl #32
    // 0x11b7ebc: r1 = LoadInt32Instr(r0)
    //     0x11b7ebc: sbfx            x1, x0, #1, #0x1f
    // 0x11b7ec0: mov             x0, x1
    // 0x11b7ec4: r1 = 5
    //     0x11b7ec4: movz            x1, #0x5
    // 0x11b7ec8: cmp             x1, x0
    // 0x11b7ecc: b.hs            #0x11b81b4
    // 0x11b7ed0: LoadField: r0 = r2->field_23
    //     0x11b7ed0: ldur            w0, [x2, #0x23]
    // 0x11b7ed4: DecompressPointer r0
    //     0x11b7ed4: add             x0, x0, HEAP, lsl #32
    // 0x11b7ed8: ldur            x1, [fp, #-0x48]
    // 0x11b7edc: stur            x0, [fp, #-0x50]
    // 0x11b7ee0: r0 = _parts()
    //     0x11b7ee0: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7ee4: mov             x2, x0
    // 0x11b7ee8: LoadField: r0 = r2->field_b
    //     0x11b7ee8: ldur            w0, [x2, #0xb]
    // 0x11b7eec: DecompressPointer r0
    //     0x11b7eec: add             x0, x0, HEAP, lsl #32
    // 0x11b7ef0: r1 = LoadInt32Instr(r0)
    //     0x11b7ef0: sbfx            x1, x0, #1, #0x1f
    // 0x11b7ef4: mov             x0, x1
    // 0x11b7ef8: r1 = 5
    //     0x11b7ef8: movz            x1, #0x5
    // 0x11b7efc: cmp             x1, x0
    // 0x11b7f00: b.hs            #0x11b81b8
    // 0x11b7f04: LoadField: r0 = r2->field_23
    //     0x11b7f04: ldur            w0, [x2, #0x23]
    // 0x11b7f08: DecompressPointer r0
    //     0x11b7f08: add             x0, x0, HEAP, lsl #32
    // 0x11b7f0c: ldur            x1, [fp, #-0x50]
    // 0x11b7f10: r2 = LoadInt32Instr(r1)
    //     0x11b7f10: sbfx            x2, x1, #1, #0x1f
    //     0x11b7f14: tbz             w1, #0, #0x11b7f1c
    //     0x11b7f18: ldur            x2, [x1, #7]
    // 0x11b7f1c: r1 = LoadInt32Instr(r0)
    //     0x11b7f1c: sbfx            x1, x0, #1, #0x1f
    //     0x11b7f20: tbz             w0, #0, #0x11b7f28
    //     0x11b7f24: ldur            x1, [x0, #7]
    // 0x11b7f28: cmp             x2, x1
    // 0x11b7f2c: b.ne            #0x11b8040
    // 0x11b7f30: ldur            x1, [fp, #-0x38]
    // 0x11b7f34: r0 = _parts()
    //     0x11b7f34: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7f38: mov             x2, x0
    // 0x11b7f3c: LoadField: r0 = r2->field_b
    //     0x11b7f3c: ldur            w0, [x2, #0xb]
    // 0x11b7f40: DecompressPointer r0
    //     0x11b7f40: add             x0, x0, HEAP, lsl #32
    // 0x11b7f44: r1 = LoadInt32Instr(r0)
    //     0x11b7f44: sbfx            x1, x0, #1, #0x1f
    // 0x11b7f48: mov             x0, x1
    // 0x11b7f4c: r1 = 7
    //     0x11b7f4c: movz            x1, #0x7
    // 0x11b7f50: cmp             x1, x0
    // 0x11b7f54: b.hs            #0x11b81bc
    // 0x11b7f58: LoadField: r0 = r2->field_2b
    //     0x11b7f58: ldur            w0, [x2, #0x2b]
    // 0x11b7f5c: DecompressPointer r0
    //     0x11b7f5c: add             x0, x0, HEAP, lsl #32
    // 0x11b7f60: ldur            x1, [fp, #-0x48]
    // 0x11b7f64: stur            x0, [fp, #-0x50]
    // 0x11b7f68: r0 = _parts()
    //     0x11b7f68: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7f6c: mov             x2, x0
    // 0x11b7f70: LoadField: r0 = r2->field_b
    //     0x11b7f70: ldur            w0, [x2, #0xb]
    // 0x11b7f74: DecompressPointer r0
    //     0x11b7f74: add             x0, x0, HEAP, lsl #32
    // 0x11b7f78: r1 = LoadInt32Instr(r0)
    //     0x11b7f78: sbfx            x1, x0, #1, #0x1f
    // 0x11b7f7c: mov             x0, x1
    // 0x11b7f80: r1 = 7
    //     0x11b7f80: movz            x1, #0x7
    // 0x11b7f84: cmp             x1, x0
    // 0x11b7f88: b.hs            #0x11b81c0
    // 0x11b7f8c: LoadField: r0 = r2->field_2b
    //     0x11b7f8c: ldur            w0, [x2, #0x2b]
    // 0x11b7f90: DecompressPointer r0
    //     0x11b7f90: add             x0, x0, HEAP, lsl #32
    // 0x11b7f94: ldur            x1, [fp, #-0x50]
    // 0x11b7f98: r2 = LoadInt32Instr(r1)
    //     0x11b7f98: sbfx            x2, x1, #1, #0x1f
    //     0x11b7f9c: tbz             w1, #0, #0x11b7fa4
    //     0x11b7fa0: ldur            x2, [x1, #7]
    // 0x11b7fa4: r1 = LoadInt32Instr(r0)
    //     0x11b7fa4: sbfx            x1, x0, #1, #0x1f
    //     0x11b7fa8: tbz             w0, #0, #0x11b7fb0
    //     0x11b7fac: ldur            x1, [x0, #7]
    // 0x11b7fb0: cmp             x2, x1
    // 0x11b7fb4: b.ne            #0x11b8040
    // 0x11b7fb8: ldur            x1, [fp, #-0x38]
    // 0x11b7fbc: r0 = _parts()
    //     0x11b7fbc: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7fc0: mov             x2, x0
    // 0x11b7fc4: LoadField: r0 = r2->field_b
    //     0x11b7fc4: ldur            w0, [x2, #0xb]
    // 0x11b7fc8: DecompressPointer r0
    //     0x11b7fc8: add             x0, x0, HEAP, lsl #32
    // 0x11b7fcc: r1 = LoadInt32Instr(r0)
    //     0x11b7fcc: sbfx            x1, x0, #1, #0x1f
    // 0x11b7fd0: mov             x0, x1
    // 0x11b7fd4: r1 = 8
    //     0x11b7fd4: movz            x1, #0x8
    // 0x11b7fd8: cmp             x1, x0
    // 0x11b7fdc: b.hs            #0x11b81c4
    // 0x11b7fe0: LoadField: r0 = r2->field_2f
    //     0x11b7fe0: ldur            w0, [x2, #0x2f]
    // 0x11b7fe4: DecompressPointer r0
    //     0x11b7fe4: add             x0, x0, HEAP, lsl #32
    // 0x11b7fe8: ldur            x1, [fp, #-0x48]
    // 0x11b7fec: stur            x0, [fp, #-0x50]
    // 0x11b7ff0: r0 = _parts()
    //     0x11b7ff0: bl              #0x7f50d0  ; [dart:core] DateTime::_parts
    // 0x11b7ff4: mov             x2, x0
    // 0x11b7ff8: LoadField: r0 = r2->field_b
    //     0x11b7ff8: ldur            w0, [x2, #0xb]
    // 0x11b7ffc: DecompressPointer r0
    //     0x11b7ffc: add             x0, x0, HEAP, lsl #32
    // 0x11b8000: r1 = LoadInt32Instr(r0)
    //     0x11b8000: sbfx            x1, x0, #1, #0x1f
    // 0x11b8004: mov             x0, x1
    // 0x11b8008: r1 = 8
    //     0x11b8008: movz            x1, #0x8
    // 0x11b800c: cmp             x1, x0
    // 0x11b8010: b.hs            #0x11b81c8
    // 0x11b8014: LoadField: r0 = r2->field_2f
    //     0x11b8014: ldur            w0, [x2, #0x2f]
    // 0x11b8018: DecompressPointer r0
    //     0x11b8018: add             x0, x0, HEAP, lsl #32
    // 0x11b801c: ldur            x1, [fp, #-0x50]
    // 0x11b8020: r2 = LoadInt32Instr(r1)
    //     0x11b8020: sbfx            x2, x1, #1, #0x1f
    //     0x11b8024: tbz             w1, #0, #0x11b802c
    //     0x11b8028: ldur            x2, [x1, #7]
    // 0x11b802c: r1 = LoadInt32Instr(r0)
    //     0x11b802c: sbfx            x1, x0, #1, #0x1f
    //     0x11b8030: tbz             w0, #0, #0x11b8038
    //     0x11b8034: ldur            x1, [x0, #7]
    // 0x11b8038: cmp             x2, x1
    // 0x11b803c: b.eq            #0x11b8050
    // 0x11b8040: ldur            x1, [fp, #-0x38]
    // 0x11b8044: ldur            x2, [fp, #-0x48]
    // 0x11b8048: r0 = isAfter()
    //     0x11b8048: bl              #0x147bbf8  ; [dart:core] DateTime::isAfter
    // 0x11b804c: tbnz            w0, #4, #0x11b8058
    // 0x11b8050: r0 = false
    //     0x11b8050: add             x0, NULL, #0x30  ; false
    // 0x11b8054: b               #0x11b8084
    // 0x11b8058: r0 = true
    //     0x11b8058: add             x0, NULL, #0x20  ; true
    // 0x11b805c: b               #0x11b8084
    // 0x11b8060: ldur            x1, [fp, #-0x38]
    // 0x11b8064: r0 = add()
    //     0x11b8064: bl              #0x92fb9c  ; [dart:core] DateTime::add
    // 0x11b8068: mov             x1, x0
    // 0x11b806c: ldur            x2, [fp, #-0x48]
    // 0x11b8070: r0 = isAfter()
    //     0x11b8070: bl              #0x147bbf8  ; [dart:core] DateTime::isAfter
    // 0x11b8074: tbnz            w0, #4, #0x11b8080
    // 0x11b8078: r0 = false
    //     0x11b8078: add             x0, NULL, #0x30  ; false
    // 0x11b807c: b               #0x11b8084
    // 0x11b8080: r0 = true
    //     0x11b8080: add             x0, NULL, #0x20  ; true
    // 0x11b8084: mov             x3, x0
    // 0x11b8088: ldur            x0, [fp, #-0x28]
    // 0x11b808c: stur            x3, [fp, #-0x38]
    // 0x11b8090: LoadField: r4 = r0->field_23
    //     0x11b8090: ldur            w4, [x0, #0x23]
    // 0x11b8094: DecompressPointer r4
    //     0x11b8094: add             x4, x4, HEAP, lsl #32
    // 0x11b8098: stur            x4, [fp, #-0x10]
    // 0x11b809c: r0 = LoadStaticField(0xb54)
    //     0x11b809c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b80a0: ldr             x0, [x0, #0x16a8]
    // 0x11b80a4: cmp             w0, NULL
    // 0x11b80a8: b.ne            #0x11b80b8
    // 0x11b80ac: mov             x3, x4
    // 0x11b80b0: r4 = Null
    //     0x11b80b0: mov             x4, NULL
    // 0x11b80b4: b               #0x11b80e8
    // 0x11b80b8: r17 = 331
    //     0x11b80b8: movz            x17, #0x14b
    // 0x11b80bc: ldr             w1, [x0, x17]
    // 0x11b80c0: DecompressPointer r1
    //     0x11b80c0: add             x1, x1, HEAP, lsl #32
    // 0x11b80c4: r0 = LoadClassIdInstr(r1)
    //     0x11b80c4: ldur            x0, [x1, #-1]
    //     0x11b80c8: ubfx            x0, x0, #0xc, #0x14
    // 0x11b80cc: r2 = "skipTimer"
    //     0x11b80cc: add             x2, PP, #0xa2, lsl #12  ; [pp+0xa2928] "skipTimer"
    //     0x11b80d0: ldr             x2, [x2, #0x928]
    // 0x11b80d4: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b80d4: sub             lr, x0, #0xb4
    //     0x11b80d8: ldr             lr, [x21, lr, lsl #3]
    //     0x11b80dc: blr             lr
    // 0x11b80e0: mov             x4, x0
    // 0x11b80e4: ldur            x3, [fp, #-0x10]
    // 0x11b80e8: mov             x0, x4
    // 0x11b80ec: stur            x4, [fp, #-0x28]
    // 0x11b80f0: r2 = Null
    //     0x11b80f0: mov             x2, NULL
    // 0x11b80f4: r1 = Null
    //     0x11b80f4: mov             x1, NULL
    // 0x11b80f8: r4 = 59
    //     0x11b80f8: movz            x4, #0x3b
    // 0x11b80fc: branchIfSmi(r0, 0x11b8108)
    //     0x11b80fc: tbz             w0, #0, #0x11b8108
    // 0x11b8100: r4 = LoadClassIdInstr(r0)
    //     0x11b8100: ldur            x4, [x0, #-1]
    //     0x11b8104: ubfx            x4, x4, #0xc, #0x14
    // 0x11b8108: cmp             x4, #0xcdb
    // 0x11b810c: b.eq            #0x11b8124
    // 0x11b8110: r8 = Timestamp?
    //     0x11b8110: add             x8, PP, #0x1d, lsl #12  ; [pp+0x1dbe0] Type: Timestamp?
    //     0x11b8114: ldr             x8, [x8, #0xbe0]
    // 0x11b8118: r3 = Null
    //     0x11b8118: add             x3, PP, #0xb3, lsl #12  ; [pp+0xb3a40] Null
    //     0x11b811c: ldr             x3, [x3, #0xa40]
    // 0x11b8120: r0 = DefaultNullableTypeTest()
    //     0x11b8120: bl              #0x15004bc  ; DefaultNullableTypeTestStub
    // 0x11b8124: ldur            x0, [fp, #-0x10]
    // 0x11b8128: tbnz            w0, #4, #0x11b8180
    // 0x11b812c: ldur            x1, [fp, #-0x28]
    // 0x11b8130: cmp             w1, NULL
    // 0x11b8134: b.eq            #0x11b8178
    // 0x11b8138: ldur            x0, [fp, #-0x30]
    // 0x11b813c: cmp             w0, NULL
    // 0x11b8140: b.eq            #0x11b8170
    // 0x11b8144: r0 = toDate()
    //     0x11b8144: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x11b8148: ldur            x1, [fp, #-0x30]
    // 0x11b814c: stur            x0, [fp, #-0x10]
    // 0x11b8150: r0 = toDate()
    //     0x11b8150: bl              #0x7f4f54  ; [package:cloud_firestore_platform_interface/src/timestamp.dart] Timestamp::toDate
    // 0x11b8154: ldur            x1, [fp, #-0x10]
    // 0x11b8158: mov             x2, x0
    // 0x11b815c: r0 = isAfter()
    //     0x11b815c: bl              #0x147bbf8  ; [dart:core] DateTime::isAfter
    // 0x11b8160: tbz             w0, #4, #0x11b8188
    // 0x11b8164: ldur            x1, [fp, #-0x38]
    // 0x11b8168: tbnz            w1, #4, #0x11b8190
    // 0x11b816c: b               #0x11b8188
    // 0x11b8170: ldur            x1, [fp, #-0x38]
    // 0x11b8174: b               #0x11b8184
    // 0x11b8178: ldur            x1, [fp, #-0x38]
    // 0x11b817c: b               #0x11b8184
    // 0x11b8180: ldur            x1, [fp, #-0x38]
    // 0x11b8184: tbnz            w1, #4, #0x11b8190
    // 0x11b8188: ldur            x0, [fp, #-0x20]
    // 0x11b818c: b               #0x11b8194
    // 0x11b8190: ldur            x0, [fp, #-0x18]
    // 0x11b8194: LeaveFrame
    //     0x11b8194: mov             SP, fp
    //     0x11b8198: ldp             fp, lr, [SP], #0x10
    // 0x11b819c: ret
    //     0x11b819c: ret             
    // 0x11b81a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b81a0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b81a4: b               #0x11b7c5c
    // 0x11b81a8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81a8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81ac: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81ac: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81b0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81b0: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81b4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81b4: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81b8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81b8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81bc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81bc: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81c0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81c0: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81c4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81c4: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x11b81c8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x11b81c8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ checkConditionCode(/* No info */) {
    // ** addr: 0x11b81cc, size: 0xbc
    // 0x11b81cc: EnterFrame
    //     0x11b81cc: stp             fp, lr, [SP, #-0x10]!
    //     0x11b81d0: mov             fp, SP
    // 0x11b81d4: AllocStack(0x20)
    //     0x11b81d4: sub             SP, SP, #0x20
    // 0x11b81d8: CheckStackOverflow
    //     0x11b81d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b81dc: cmp             SP, x16
    //     0x11b81e0: b.ls            #0x11b8280
    // 0x11b81e4: ArrayLoad: r3 = r1[0]  ; List_4
    //     0x11b81e4: ldur            w3, [x1, #0x17]
    // 0x11b81e8: DecompressPointer r3
    //     0x11b81e8: add             x3, x3, HEAP, lsl #32
    // 0x11b81ec: stur            x3, [fp, #-0x10]
    // 0x11b81f0: LoadField: r4 = r1->field_1b
    //     0x11b81f0: ldur            w4, [x1, #0x1b]
    // 0x11b81f4: DecompressPointer r4
    //     0x11b81f4: add             x4, x4, HEAP, lsl #32
    // 0x11b81f8: stur            x4, [fp, #-8]
    // 0x11b81fc: LoadField: r2 = r1->field_f
    //     0x11b81fc: ldur            w2, [x1, #0xf]
    // 0x11b8200: DecompressPointer r2
    //     0x11b8200: add             x2, x2, HEAP, lsl #32
    // 0x11b8204: r0 = LoadStaticField(0xb54)
    //     0x11b8204: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x11b8208: ldr             x0, [x0, #0x16a8]
    // 0x11b820c: cmp             w0, NULL
    // 0x11b8210: b.ne            #0x11b821c
    // 0x11b8214: r0 = Null
    //     0x11b8214: mov             x0, NULL
    // 0x11b8218: b               #0x11b823c
    // 0x11b821c: r17 = 327
    //     0x11b821c: movz            x17, #0x147
    // 0x11b8220: ldr             w1, [x0, x17]
    // 0x11b8224: DecompressPointer r1
    //     0x11b8224: add             x1, x1, HEAP, lsl #32
    // 0x11b8228: r0 = LoadClassIdInstr(r1)
    //     0x11b8228: ldur            x0, [x1, #-1]
    //     0x11b822c: ubfx            x0, x0, #0xc, #0x14
    // 0x11b8230: r0 = GDT[cid_x0 + -0xb4]()
    //     0x11b8230: sub             lr, x0, #0xb4
    //     0x11b8234: ldr             lr, [x21, lr, lsl #3]
    //     0x11b8238: blr             lr
    // 0x11b823c: r1 = 59
    //     0x11b823c: movz            x1, #0x3b
    // 0x11b8240: branchIfSmi(r0, 0x11b824c)
    //     0x11b8240: tbz             w0, #0, #0x11b824c
    // 0x11b8244: r1 = LoadClassIdInstr(r0)
    //     0x11b8244: ldur            x1, [x0, #-1]
    //     0x11b8248: ubfx            x1, x1, #0xc, #0x14
    // 0x11b824c: r16 = true
    //     0x11b824c: add             x16, NULL, #0x20  ; true
    // 0x11b8250: stp             x16, x0, [SP]
    // 0x11b8254: mov             x0, x1
    // 0x11b8258: mov             lr, x0
    // 0x11b825c: ldr             lr, [x21, lr, lsl #3]
    // 0x11b8260: blr             lr
    // 0x11b8264: tbnz            w0, #4, #0x11b8270
    // 0x11b8268: ldur            x0, [fp, #-0x10]
    // 0x11b826c: b               #0x11b8274
    // 0x11b8270: ldur            x0, [fp, #-8]
    // 0x11b8274: LeaveFrame
    //     0x11b8274: mov             SP, fp
    //     0x11b8278: ldp             fp, lr, [SP], #0x10
    // 0x11b827c: ret
    //     0x11b827c: ret             
    // 0x11b8280: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b8280: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b8284: b               #0x11b81e4
  }
  [closure] static bool <anonymous closure>(dynamic, EventChild?) {
    // ** addr: 0x11b8288, size: 0x7c
    // 0x11b8288: EnterFrame
    //     0x11b8288: stp             fp, lr, [SP, #-0x10]!
    //     0x11b828c: mov             fp, SP
    // 0x11b8290: AllocStack(0x10)
    //     0x11b8290: sub             SP, SP, #0x10
    // 0x11b8294: SetupParameters()
    //     0x11b8294: ldr             x0, [fp, #0x18]
    //     0x11b8298: ldur            w1, [x0, #0x17]
    //     0x11b829c: add             x1, x1, HEAP, lsl #32
    // 0x11b82a0: CheckStackOverflow
    //     0x11b82a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x11b82a4: cmp             SP, x16
    //     0x11b82a8: b.ls            #0x11b82fc
    // 0x11b82ac: ldr             x0, [fp, #0x10]
    // 0x11b82b0: cmp             w0, NULL
    // 0x11b82b4: b.ne            #0x11b82c0
    // 0x11b82b8: r0 = Null
    //     0x11b82b8: mov             x0, NULL
    // 0x11b82bc: b               #0x11b82cc
    // 0x11b82c0: LoadField: r2 = r0->field_7
    //     0x11b82c0: ldur            w2, [x0, #7]
    // 0x11b82c4: DecompressPointer r2
    //     0x11b82c4: add             x2, x2, HEAP, lsl #32
    // 0x11b82c8: mov             x0, x2
    // 0x11b82cc: LoadField: r2 = r1->field_f
    //     0x11b82cc: ldur            w2, [x1, #0xf]
    // 0x11b82d0: DecompressPointer r2
    //     0x11b82d0: add             x2, x2, HEAP, lsl #32
    // 0x11b82d4: r1 = LoadClassIdInstr(r0)
    //     0x11b82d4: ldur            x1, [x0, #-1]
    //     0x11b82d8: ubfx            x1, x1, #0xc, #0x14
    // 0x11b82dc: stp             x2, x0, [SP]
    // 0x11b82e0: mov             x0, x1
    // 0x11b82e4: mov             lr, x0
    // 0x11b82e8: ldr             lr, [x21, lr, lsl #3]
    // 0x11b82ec: blr             lr
    // 0x11b82f0: LeaveFrame
    //     0x11b82f0: mov             SP, fp
    //     0x11b82f4: ldp             fp, lr, [SP], #0x10
    // 0x11b82f8: ret
    //     0x11b82f8: ret             
    // 0x11b82fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x11b82fc: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x11b8300: b               #0x11b82ac
  }
  static _ isDisableWeatherPassed(/* No info */) {
    // ** addr: 0x1253f2c, size: 0x154
    // 0x1253f2c: EnterFrame
    //     0x1253f2c: stp             fp, lr, [SP, #-0x10]!
    //     0x1253f30: mov             fp, SP
    // 0x1253f34: AllocStack(0x30)
    //     0x1253f34: sub             SP, SP, #0x30
    // 0x1253f38: SetupParameters(dynamic _ /* r1 => r2, fp-0x20 */)
    //     0x1253f38: mov             x2, x1
    //     0x1253f3c: stur            x1, [fp, #-0x20]
    // 0x1253f40: CheckStackOverflow
    //     0x1253f40: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1253f44: cmp             SP, x16
    //     0x1253f48: b.ls            #0x125406c
    // 0x1253f4c: r0 = LoadStaticField(0xb54)
    //     0x1253f4c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1253f50: ldr             x0, [x0, #0x16a8]
    // 0x1253f54: cmp             w0, NULL
    // 0x1253f58: b.ne            #0x1253f6c
    // 0x1253f5c: r0 = false
    //     0x1253f5c: add             x0, NULL, #0x30  ; false
    // 0x1253f60: LeaveFrame
    //     0x1253f60: mov             SP, fp
    //     0x1253f64: ldp             fp, lr, [SP], #0x10
    // 0x1253f68: ret
    //     0x1253f68: ret             
    // 0x1253f6c: LoadField: r0 = r2->field_b
    //     0x1253f6c: ldur            w0, [x2, #0xb]
    // 0x1253f70: DecompressPointer r0
    //     0x1253f70: add             x0, x0, HEAP, lsl #32
    // 0x1253f74: r3 = LoadInt32Instr(r0)
    //     0x1253f74: sbfx            x3, x0, #1, #0x1f
    // 0x1253f78: stur            x3, [fp, #-0x18]
    // 0x1253f7c: r4 = 0
    //     0x1253f7c: movz            x4, #0
    // 0x1253f80: CheckStackOverflow
    //     0x1253f80: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1253f84: cmp             SP, x16
    //     0x1253f88: b.ls            #0x1254074
    // 0x1253f8c: LoadField: r0 = r2->field_b
    //     0x1253f8c: ldur            w0, [x2, #0xb]
    // 0x1253f90: DecompressPointer r0
    //     0x1253f90: add             x0, x0, HEAP, lsl #32
    // 0x1253f94: r1 = LoadInt32Instr(r0)
    //     0x1253f94: sbfx            x1, x0, #1, #0x1f
    // 0x1253f98: cmp             x3, x1
    // 0x1253f9c: b.ne            #0x125404c
    // 0x1253fa0: cmp             x4, x1
    // 0x1253fa4: b.ge            #0x125403c
    // 0x1253fa8: mov             x0, x1
    // 0x1253fac: mov             x1, x4
    // 0x1253fb0: cmp             x1, x0
    // 0x1253fb4: b.hs            #0x125407c
    // 0x1253fb8: LoadField: r0 = r2->field_f
    //     0x1253fb8: ldur            w0, [x2, #0xf]
    // 0x1253fbc: DecompressPointer r0
    //     0x1253fbc: add             x0, x0, HEAP, lsl #32
    // 0x1253fc0: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x1253fc0: add             x16, x0, x4, lsl #2
    //     0x1253fc4: ldur            w1, [x16, #0xf]
    // 0x1253fc8: DecompressPointer r1
    //     0x1253fc8: add             x1, x1, HEAP, lsl #32
    // 0x1253fcc: stur            x1, [fp, #-0x10]
    // 0x1253fd0: add             x0, x4, #1
    // 0x1253fd4: stur            x0, [fp, #-8]
    // 0x1253fd8: r0 = InitLateStaticField(0xb90) // [package:battlecross/globals.dart] ::currentWeather
    //     0x1253fd8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1253fdc: ldr             x0, [x0, #0x1720]
    //     0x1253fe0: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1253fe4: cmp             w0, w16
    //     0x1253fe8: b.ne            #0x1253ff8
    //     0x1253fec: add             x2, PP, #0x12, lsl #12  ; [pp+0x129f8] Field <::.currentWeather>: static late (offset: 0xb90)
    //     0x1253ff0: ldr             x2, [x2, #0x9f8]
    //     0x1253ff4: bl              #0x1500750  ; InitLateStaticFieldStub
    // 0x1253ff8: r1 = LoadClassIdInstr(r0)
    //     0x1253ff8: ldur            x1, [x0, #-1]
    //     0x1253ffc: ubfx            x1, x1, #0xc, #0x14
    // 0x1254000: ldur            x16, [fp, #-0x10]
    // 0x1254004: stp             x16, x0, [SP]
    // 0x1254008: mov             x0, x1
    // 0x125400c: mov             lr, x0
    // 0x1254010: ldr             lr, [x21, lr, lsl #3]
    // 0x1254014: blr             lr
    // 0x1254018: tbz             w0, #4, #0x125402c
    // 0x125401c: ldur            x4, [fp, #-8]
    // 0x1254020: ldur            x2, [fp, #-0x20]
    // 0x1254024: ldur            x3, [fp, #-0x18]
    // 0x1254028: b               #0x1253f80
    // 0x125402c: r0 = false
    //     0x125402c: add             x0, NULL, #0x30  ; false
    // 0x1254030: LeaveFrame
    //     0x1254030: mov             SP, fp
    //     0x1254034: ldp             fp, lr, [SP], #0x10
    // 0x1254038: ret
    //     0x1254038: ret             
    // 0x125403c: r0 = true
    //     0x125403c: add             x0, NULL, #0x20  ; true
    // 0x1254040: LeaveFrame
    //     0x1254040: mov             SP, fp
    //     0x1254044: ldp             fp, lr, [SP], #0x10
    // 0x1254048: ret
    //     0x1254048: ret             
    // 0x125404c: mov             x0, x2
    // 0x1254050: r0 = ConcurrentModificationError()
    //     0x1254050: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x1254054: mov             x1, x0
    // 0x1254058: ldur            x0, [fp, #-0x20]
    // 0x125405c: StoreField: r1->field_b = r0
    //     0x125405c: stur            w0, [x1, #0xb]
    // 0x1254060: mov             x0, x1
    // 0x1254064: r0 = Throw()
    //     0x1254064: bl              #0x1500844  ; ThrowStub
    // 0x1254068: brk             #0
    // 0x125406c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x125406c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254070: b               #0x1253f4c
    // 0x1254074: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1254074: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254078: b               #0x1253f8c
    // 0x125407c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x125407c: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ isEnableWeatherPassed(/* No info */) {
    // ** addr: 0x1254080, size: 0x15c
    // 0x1254080: EnterFrame
    //     0x1254080: stp             fp, lr, [SP, #-0x10]!
    //     0x1254084: mov             fp, SP
    // 0x1254088: AllocStack(0x30)
    //     0x1254088: sub             SP, SP, #0x30
    // 0x125408c: SetupParameters(dynamic _ /* r1 => r2, fp-0x20 */)
    //     0x125408c: mov             x2, x1
    //     0x1254090: stur            x1, [fp, #-0x20]
    // 0x1254094: CheckStackOverflow
    //     0x1254094: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254098: cmp             SP, x16
    //     0x125409c: b.ls            #0x12541c8
    // 0x12540a0: r0 = LoadStaticField(0xb54)
    //     0x12540a0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x12540a4: ldr             x0, [x0, #0x16a8]
    // 0x12540a8: cmp             w0, NULL
    // 0x12540ac: b.ne            #0x12540c0
    // 0x12540b0: r0 = false
    //     0x12540b0: add             x0, NULL, #0x30  ; false
    // 0x12540b4: LeaveFrame
    //     0x12540b4: mov             SP, fp
    //     0x12540b8: ldp             fp, lr, [SP], #0x10
    // 0x12540bc: ret
    //     0x12540bc: ret             
    // 0x12540c0: LoadField: r0 = r2->field_b
    //     0x12540c0: ldur            w0, [x2, #0xb]
    // 0x12540c4: DecompressPointer r0
    //     0x12540c4: add             x0, x0, HEAP, lsl #32
    // 0x12540c8: r3 = LoadInt32Instr(r0)
    //     0x12540c8: sbfx            x3, x0, #1, #0x1f
    // 0x12540cc: stur            x3, [fp, #-0x18]
    // 0x12540d0: cmp             x3, #0
    // 0x12540d4: b.le            #0x1254198
    // 0x12540d8: r4 = 0
    //     0x12540d8: movz            x4, #0
    // 0x12540dc: CheckStackOverflow
    //     0x12540dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x12540e0: cmp             SP, x16
    //     0x12540e4: b.ls            #0x12541d0
    // 0x12540e8: LoadField: r0 = r2->field_b
    //     0x12540e8: ldur            w0, [x2, #0xb]
    // 0x12540ec: DecompressPointer r0
    //     0x12540ec: add             x0, x0, HEAP, lsl #32
    // 0x12540f0: r1 = LoadInt32Instr(r0)
    //     0x12540f0: sbfx            x1, x0, #1, #0x1f
    // 0x12540f4: cmp             x3, x1
    // 0x12540f8: b.ne            #0x12541a8
    // 0x12540fc: cmp             x4, x1
    // 0x1254100: b.ge            #0x1254198
    // 0x1254104: mov             x0, x1
    // 0x1254108: mov             x1, x4
    // 0x125410c: cmp             x1, x0
    // 0x1254110: b.hs            #0x12541d8
    // 0x1254114: LoadField: r0 = r2->field_f
    //     0x1254114: ldur            w0, [x2, #0xf]
    // 0x1254118: DecompressPointer r0
    //     0x1254118: add             x0, x0, HEAP, lsl #32
    // 0x125411c: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x125411c: add             x16, x0, x4, lsl #2
    //     0x1254120: ldur            w1, [x16, #0xf]
    // 0x1254124: DecompressPointer r1
    //     0x1254124: add             x1, x1, HEAP, lsl #32
    // 0x1254128: stur            x1, [fp, #-0x10]
    // 0x125412c: add             x0, x4, #1
    // 0x1254130: stur            x0, [fp, #-8]
    // 0x1254134: r0 = InitLateStaticField(0xb90) // [package:battlecross/globals.dart] ::currentWeather
    //     0x1254134: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1254138: ldr             x0, [x0, #0x1720]
    //     0x125413c: ldr             x16, [PP, #0x40]  ; [pp+0x40] Sentinel
    //     0x1254140: cmp             w0, w16
    //     0x1254144: b.ne            #0x1254154
    //     0x1254148: add             x2, PP, #0x12, lsl #12  ; [pp+0x129f8] Field <::.currentWeather>: static late (offset: 0xb90)
    //     0x125414c: ldr             x2, [x2, #0x9f8]
    //     0x1254150: bl              #0x1500750  ; InitLateStaticFieldStub
    // 0x1254154: r1 = LoadClassIdInstr(r0)
    //     0x1254154: ldur            x1, [x0, #-1]
    //     0x1254158: ubfx            x1, x1, #0xc, #0x14
    // 0x125415c: ldur            x16, [fp, #-0x10]
    // 0x1254160: stp             x16, x0, [SP]
    // 0x1254164: mov             x0, x1
    // 0x1254168: mov             lr, x0
    // 0x125416c: ldr             lr, [x21, lr, lsl #3]
    // 0x1254170: blr             lr
    // 0x1254174: tbnz            w0, #4, #0x1254188
    // 0x1254178: ldur            x4, [fp, #-8]
    // 0x125417c: ldur            x2, [fp, #-0x20]
    // 0x1254180: ldur            x3, [fp, #-0x18]
    // 0x1254184: b               #0x12540dc
    // 0x1254188: r0 = false
    //     0x1254188: add             x0, NULL, #0x30  ; false
    // 0x125418c: LeaveFrame
    //     0x125418c: mov             SP, fp
    //     0x1254190: ldp             fp, lr, [SP], #0x10
    // 0x1254194: ret
    //     0x1254194: ret             
    // 0x1254198: r0 = true
    //     0x1254198: add             x0, NULL, #0x20  ; true
    // 0x125419c: LeaveFrame
    //     0x125419c: mov             SP, fp
    //     0x12541a0: ldp             fp, lr, [SP], #0x10
    // 0x12541a4: ret
    //     0x12541a4: ret             
    // 0x12541a8: mov             x0, x2
    // 0x12541ac: r0 = ConcurrentModificationError()
    //     0x12541ac: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x12541b0: mov             x1, x0
    // 0x12541b4: ldur            x0, [fp, #-0x20]
    // 0x12541b8: StoreField: r1->field_b = r0
    //     0x12541b8: stur            w0, [x1, #0xb]
    // 0x12541bc: mov             x0, x1
    // 0x12541c0: r0 = Throw()
    //     0x12541c0: bl              #0x1500844  ; ThrowStub
    // 0x12541c4: brk             #0
    // 0x12541c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x12541c8: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x12541cc: b               #0x12540a0
    // 0x12541d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x12541d0: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x12541d4: b               #0x12540e8
    // 0x12541d8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x12541d8: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ isEnableCounterPassed(/* No info */) {
    // ** addr: 0x12541dc, size: 0x224
    // 0x12541dc: EnterFrame
    //     0x12541dc: stp             fp, lr, [SP, #-0x10]!
    //     0x12541e0: mov             fp, SP
    // 0x12541e4: AllocStack(0x48)
    //     0x12541e4: sub             SP, SP, #0x48
    // 0x12541e8: SetupParameters(dynamic _ /* r1 => r3, fp-0x30 */)
    //     0x12541e8: mov             x3, x1
    //     0x12541ec: stur            x1, [fp, #-0x30]
    // 0x12541f0: CheckStackOverflow
    //     0x12541f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x12541f4: cmp             SP, x16
    //     0x12541f8: b.ls            #0x12543ec
    // 0x12541fc: r0 = LoadStaticField(0xb54)
    //     0x12541fc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1254200: ldr             x0, [x0, #0x16a8]
    // 0x1254204: cmp             w0, NULL
    // 0x1254208: b.ne            #0x125421c
    // 0x125420c: r0 = false
    //     0x125420c: add             x0, NULL, #0x30  ; false
    // 0x1254210: LeaveFrame
    //     0x1254210: mov             SP, fp
    //     0x1254214: ldp             fp, lr, [SP], #0x10
    // 0x1254218: ret
    //     0x1254218: ret             
    // 0x125421c: LoadField: r0 = r3->field_b
    //     0x125421c: ldur            w0, [x3, #0xb]
    // 0x1254220: DecompressPointer r0
    //     0x1254220: add             x0, x0, HEAP, lsl #32
    // 0x1254224: r4 = LoadInt32Instr(r0)
    //     0x1254224: sbfx            x4, x0, #1, #0x1f
    // 0x1254228: stur            x4, [fp, #-0x28]
    // 0x125422c: cmp             x4, #0
    // 0x1254230: b.le            #0x12543bc
    // 0x1254234: r5 = false
    //     0x1254234: add             x5, NULL, #0x30  ; false
    // 0x1254238: r2 = 0
    //     0x1254238: movz            x2, #0
    // 0x125423c: stur            x5, [fp, #-0x20]
    // 0x1254240: CheckStackOverflow
    //     0x1254240: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254244: cmp             SP, x16
    //     0x1254248: b.ls            #0x12543f4
    // 0x125424c: LoadField: r0 = r3->field_b
    //     0x125424c: ldur            w0, [x3, #0xb]
    // 0x1254250: DecompressPointer r0
    //     0x1254250: add             x0, x0, HEAP, lsl #32
    // 0x1254254: r1 = LoadInt32Instr(r0)
    //     0x1254254: sbfx            x1, x0, #1, #0x1f
    // 0x1254258: cmp             x4, x1
    // 0x125425c: b.ne            #0x12543cc
    // 0x1254260: cmp             x2, x1
    // 0x1254264: b.ge            #0x12543a4
    // 0x1254268: mov             x0, x1
    // 0x125426c: mov             x1, x2
    // 0x1254270: cmp             x1, x0
    // 0x1254274: b.hs            #0x12543fc
    // 0x1254278: LoadField: r0 = r3->field_f
    //     0x1254278: ldur            w0, [x3, #0xf]
    // 0x125427c: DecompressPointer r0
    //     0x125427c: add             x0, x0, HEAP, lsl #32
    // 0x1254280: ArrayLoad: r6 = r0[r2]  ; Unknown_4
    //     0x1254280: add             x16, x0, x2, lsl #2
    //     0x1254284: ldur            w6, [x16, #0xf]
    // 0x1254288: DecompressPointer r6
    //     0x1254288: add             x6, x6, HEAP, lsl #32
    // 0x125428c: stur            x6, [fp, #-0x18]
    // 0x1254290: add             x7, x2, #1
    // 0x1254294: stur            x7, [fp, #-0x10]
    // 0x1254298: LoadField: r8 = r6->field_b
    //     0x1254298: ldur            w8, [x6, #0xb]
    // 0x125429c: DecompressPointer r8
    //     0x125429c: add             x8, x8, HEAP, lsl #32
    // 0x12542a0: mov             x0, x8
    // 0x12542a4: stur            x8, [fp, #-8]
    // 0x12542a8: r2 = Null
    //     0x12542a8: mov             x2, NULL
    // 0x12542ac: r1 = Null
    //     0x12542ac: mov             x1, NULL
    // 0x12542b0: r4 = 59
    //     0x12542b0: movz            x4, #0x3b
    // 0x12542b4: branchIfSmi(r0, 0x12542c0)
    //     0x12542b4: tbz             w0, #0, #0x12542c0
    // 0x12542b8: r4 = LoadClassIdInstr(r0)
    //     0x12542b8: ldur            x4, [x0, #-1]
    //     0x12542bc: ubfx            x4, x4, #0xc, #0x14
    // 0x12542c0: sub             x4, x4, #0x5d
    // 0x12542c4: cmp             x4, #1
    // 0x12542c8: b.ls            #0x12542dc
    // 0x12542cc: r8 = String
    //     0x12542cc: ldr             x8, [PP, #0x920]  ; [pp+0x920] Type: String
    // 0x12542d0: r3 = Null
    //     0x12542d0: add             x3, PP, #0xa8, lsl #12  ; [pp+0xa8b70] Null
    //     0x12542d4: ldr             x3, [x3, #0xb70]
    // 0x12542d8: r0 = String()
    //     0x12542d8: bl              #0x1523244  ; IsType_String_Stub
    // 0x12542dc: ldur            x0, [fp, #-0x18]
    // 0x12542e0: LoadField: r3 = r0->field_f
    //     0x12542e0: ldur            w3, [x0, #0xf]
    // 0x12542e4: DecompressPointer r3
    //     0x12542e4: add             x3, x3, HEAP, lsl #32
    // 0x12542e8: mov             x0, x3
    // 0x12542ec: stur            x3, [fp, #-0x38]
    // 0x12542f0: r2 = Null
    //     0x12542f0: mov             x2, NULL
    // 0x12542f4: r1 = Null
    //     0x12542f4: mov             x1, NULL
    // 0x12542f8: branchIfSmi(r0, 0x1254320)
    //     0x12542f8: tbz             w0, #0, #0x1254320
    // 0x12542fc: r4 = LoadClassIdInstr(r0)
    //     0x12542fc: ldur            x4, [x0, #-1]
    //     0x1254300: ubfx            x4, x4, #0xc, #0x14
    // 0x1254304: sub             x4, x4, #0x3b
    // 0x1254308: cmp             x4, #1
    // 0x125430c: b.ls            #0x1254320
    // 0x1254310: r8 = int
    //     0x1254310: ldr             x8, [PP, #0x3e0]  ; [pp+0x3e0] Type: int
    // 0x1254314: r3 = Null
    //     0x1254314: add             x3, PP, #0xa8, lsl #12  ; [pp+0xa8b80] Null
    //     0x1254318: ldr             x3, [x3, #0xb80]
    // 0x125431c: r0 = int()
    //     0x125431c: bl              #0x1524294  ; IsType_int_Stub
    // 0x1254320: r0 = LoadStaticField(0xb54)
    //     0x1254320: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1254324: ldr             x0, [x0, #0x16a8]
    // 0x1254328: cmp             w0, NULL
    // 0x125432c: b.ne            #0x1254338
    // 0x1254330: r0 = Null
    //     0x1254330: mov             x0, NULL
    // 0x1254334: b               #0x125435c
    // 0x1254338: r17 = 347
    //     0x1254338: movz            x17, #0x15b
    // 0x125433c: ldr             w1, [x0, x17]
    // 0x1254340: DecompressPointer r1
    //     0x1254340: add             x1, x1, HEAP, lsl #32
    // 0x1254344: r0 = LoadClassIdInstr(r1)
    //     0x1254344: ldur            x0, [x1, #-1]
    //     0x1254348: ubfx            x0, x0, #0xc, #0x14
    // 0x125434c: ldur            x2, [fp, #-8]
    // 0x1254350: r0 = GDT[cid_x0 + -0xb4]()
    //     0x1254350: sub             lr, x0, #0xb4
    //     0x1254354: ldr             lr, [x21, lr, lsl #3]
    //     0x1254358: blr             lr
    // 0x125435c: r1 = 59
    //     0x125435c: movz            x1, #0x3b
    // 0x1254360: branchIfSmi(r0, 0x125436c)
    //     0x1254360: tbz             w0, #0, #0x125436c
    // 0x1254364: r1 = LoadClassIdInstr(r0)
    //     0x1254364: ldur            x1, [x0, #-1]
    //     0x1254368: ubfx            x1, x1, #0xc, #0x14
    // 0x125436c: ldur            x16, [fp, #-0x38]
    // 0x1254370: stp             x16, x0, [SP]
    // 0x1254374: mov             x0, x1
    // 0x1254378: mov             lr, x0
    // 0x125437c: ldr             lr, [x21, lr, lsl #3]
    // 0x1254380: blr             lr
    // 0x1254384: tbnz            w0, #4, #0x1254390
    // 0x1254388: r5 = true
    //     0x1254388: add             x5, NULL, #0x20  ; true
    // 0x125438c: b               #0x1254394
    // 0x1254390: ldur            x5, [fp, #-0x20]
    // 0x1254394: ldur            x2, [fp, #-0x10]
    // 0x1254398: ldur            x3, [fp, #-0x30]
    // 0x125439c: ldur            x4, [fp, #-0x28]
    // 0x12543a0: b               #0x125423c
    // 0x12543a4: mov             x0, x5
    // 0x12543a8: tbz             w0, #4, #0x12543bc
    // 0x12543ac: r0 = false
    //     0x12543ac: add             x0, NULL, #0x30  ; false
    // 0x12543b0: LeaveFrame
    //     0x12543b0: mov             SP, fp
    //     0x12543b4: ldp             fp, lr, [SP], #0x10
    // 0x12543b8: ret
    //     0x12543b8: ret             
    // 0x12543bc: r0 = true
    //     0x12543bc: add             x0, NULL, #0x20  ; true
    // 0x12543c0: LeaveFrame
    //     0x12543c0: mov             SP, fp
    //     0x12543c4: ldp             fp, lr, [SP], #0x10
    // 0x12543c8: ret
    //     0x12543c8: ret             
    // 0x12543cc: mov             x0, x3
    // 0x12543d0: r0 = ConcurrentModificationError()
    //     0x12543d0: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x12543d4: mov             x1, x0
    // 0x12543d8: ldur            x0, [fp, #-0x30]
    // 0x12543dc: StoreField: r1->field_b = r0
    //     0x12543dc: stur            w0, [x1, #0xb]
    // 0x12543e0: mov             x0, x1
    // 0x12543e4: r0 = Throw()
    //     0x12543e4: bl              #0x1500844  ; ThrowStub
    // 0x12543e8: brk             #0
    // 0x12543ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x12543ec: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x12543f0: b               #0x12541fc
    // 0x12543f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x12543f4: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x12543f8: b               #0x125424c
    // 0x12543fc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x12543fc: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ isDisableFlagPassed(/* No info */) {
    // ** addr: 0x1254400, size: 0x188
    // 0x1254400: EnterFrame
    //     0x1254400: stp             fp, lr, [SP, #-0x10]!
    //     0x1254404: mov             fp, SP
    // 0x1254408: AllocStack(0x28)
    //     0x1254408: sub             SP, SP, #0x28
    // 0x125440c: SetupParameters(dynamic _ /* r1 => r3, fp-0x18 */)
    //     0x125440c: mov             x3, x1
    //     0x1254410: stur            x1, [fp, #-0x18]
    // 0x1254414: CheckStackOverflow
    //     0x1254414: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254418: cmp             SP, x16
    //     0x125441c: b.ls            #0x1254574
    // 0x1254420: r0 = LoadStaticField(0xb54)
    //     0x1254420: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x1254424: ldr             x0, [x0, #0x16a8]
    // 0x1254428: cmp             w0, NULL
    // 0x125442c: b.ne            #0x1254440
    // 0x1254430: r0 = false
    //     0x1254430: add             x0, NULL, #0x30  ; false
    // 0x1254434: LeaveFrame
    //     0x1254434: mov             SP, fp
    //     0x1254438: ldp             fp, lr, [SP], #0x10
    // 0x125443c: ret
    //     0x125443c: ret             
    // 0x1254440: LoadField: r0 = r3->field_b
    //     0x1254440: ldur            w0, [x3, #0xb]
    // 0x1254444: DecompressPointer r0
    //     0x1254444: add             x0, x0, HEAP, lsl #32
    // 0x1254448: r4 = LoadInt32Instr(r0)
    //     0x1254448: sbfx            x4, x0, #1, #0x1f
    // 0x125444c: stur            x4, [fp, #-0x10]
    // 0x1254450: r2 = 0
    //     0x1254450: movz            x2, #0
    // 0x1254454: CheckStackOverflow
    //     0x1254454: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254458: cmp             SP, x16
    //     0x125445c: b.ls            #0x125457c
    // 0x1254460: LoadField: r0 = r3->field_b
    //     0x1254460: ldur            w0, [x3, #0xb]
    // 0x1254464: DecompressPointer r0
    //     0x1254464: add             x0, x0, HEAP, lsl #32
    // 0x1254468: r1 = LoadInt32Instr(r0)
    //     0x1254468: sbfx            x1, x0, #1, #0x1f
    // 0x125446c: cmp             x4, x1
    // 0x1254470: b.ne            #0x1254554
    // 0x1254474: cmp             x2, x1
    // 0x1254478: b.ge            #0x1254544
    // 0x125447c: mov             x0, x1
    // 0x1254480: mov             x1, x2
    // 0x1254484: cmp             x1, x0
    // 0x1254488: b.hs            #0x1254584
    // 0x125448c: LoadField: r0 = r3->field_f
    //     0x125448c: ldur            w0, [x3, #0xf]
    // 0x1254490: DecompressPointer r0
    //     0x1254490: add             x0, x0, HEAP, lsl #32
    // 0x1254494: ArrayLoad: r1 = r0[r2]  ; Unknown_4
    //     0x1254494: add             x16, x0, x2, lsl #2
    //     0x1254498: ldur            w1, [x16, #0xf]
    // 0x125449c: DecompressPointer r1
    //     0x125449c: add             x1, x1, HEAP, lsl #32
    // 0x12544a0: add             x5, x2, #1
    // 0x12544a4: stur            x5, [fp, #-8]
    // 0x12544a8: r0 = LoadStaticField(0xb54)
    //     0x12544a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x12544ac: ldr             x0, [x0, #0x16a8]
    // 0x12544b0: cmp             w0, NULL
    // 0x12544b4: b.ne            #0x12544c0
    // 0x12544b8: r0 = Null
    //     0x12544b8: mov             x0, NULL
    // 0x12544bc: b               #0x12544ec
    // 0x12544c0: r17 = 327
    //     0x12544c0: movz            x17, #0x147
    // 0x12544c4: ldr             w2, [x0, x17]
    // 0x12544c8: DecompressPointer r2
    //     0x12544c8: add             x2, x2, HEAP, lsl #32
    // 0x12544cc: r0 = LoadClassIdInstr(r2)
    //     0x12544cc: ldur            x0, [x2, #-1]
    //     0x12544d0: ubfx            x0, x0, #0xc, #0x14
    // 0x12544d4: mov             x16, x1
    // 0x12544d8: mov             x1, x2
    // 0x12544dc: mov             x2, x16
    // 0x12544e0: r0 = GDT[cid_x0 + -0xb4]()
    //     0x12544e0: sub             lr, x0, #0xb4
    //     0x12544e4: ldr             lr, [x21, lr, lsl #3]
    //     0x12544e8: blr             lr
    // 0x12544ec: cmp             w0, NULL
    // 0x12544f0: b.ne            #0x12544f8
    // 0x12544f4: r0 = false
    //     0x12544f4: add             x0, NULL, #0x30  ; false
    // 0x12544f8: r1 = 59
    //     0x12544f8: movz            x1, #0x3b
    // 0x12544fc: branchIfSmi(r0, 0x1254508)
    //     0x12544fc: tbz             w0, #0, #0x1254508
    // 0x1254500: r1 = LoadClassIdInstr(r0)
    //     0x1254500: ldur            x1, [x0, #-1]
    //     0x1254504: ubfx            x1, x1, #0xc, #0x14
    // 0x1254508: r16 = true
    //     0x1254508: add             x16, NULL, #0x20  ; true
    // 0x125450c: stp             x16, x0, [SP]
    // 0x1254510: mov             x0, x1
    // 0x1254514: mov             lr, x0
    // 0x1254518: ldr             lr, [x21, lr, lsl #3]
    // 0x125451c: blr             lr
    // 0x1254520: tbz             w0, #4, #0x1254534
    // 0x1254524: ldur            x2, [fp, #-8]
    // 0x1254528: ldur            x3, [fp, #-0x18]
    // 0x125452c: ldur            x4, [fp, #-0x10]
    // 0x1254530: b               #0x1254454
    // 0x1254534: r0 = false
    //     0x1254534: add             x0, NULL, #0x30  ; false
    // 0x1254538: LeaveFrame
    //     0x1254538: mov             SP, fp
    //     0x125453c: ldp             fp, lr, [SP], #0x10
    // 0x1254540: ret
    //     0x1254540: ret             
    // 0x1254544: r0 = true
    //     0x1254544: add             x0, NULL, #0x20  ; true
    // 0x1254548: LeaveFrame
    //     0x1254548: mov             SP, fp
    //     0x125454c: ldp             fp, lr, [SP], #0x10
    // 0x1254550: ret
    //     0x1254550: ret             
    // 0x1254554: mov             x0, x3
    // 0x1254558: r0 = ConcurrentModificationError()
    //     0x1254558: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x125455c: mov             x1, x0
    // 0x1254560: ldur            x0, [fp, #-0x18]
    // 0x1254564: StoreField: r1->field_b = r0
    //     0x1254564: stur            w0, [x1, #0xb]
    // 0x1254568: mov             x0, x1
    // 0x125456c: r0 = Throw()
    //     0x125456c: bl              #0x1500844  ; ThrowStub
    // 0x1254570: brk             #0
    // 0x1254574: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1254574: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254578: b               #0x1254420
    // 0x125457c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x125457c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254580: b               #0x1254460
    // 0x1254584: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1254584: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ isEnableFlagPassed(/* No info */) {
    // ** addr: 0x1254588, size: 0x190
    // 0x1254588: EnterFrame
    //     0x1254588: stp             fp, lr, [SP, #-0x10]!
    //     0x125458c: mov             fp, SP
    // 0x1254590: AllocStack(0x28)
    //     0x1254590: sub             SP, SP, #0x28
    // 0x1254594: SetupParameters(dynamic _ /* r1 => r3, fp-0x18 */)
    //     0x1254594: mov             x3, x1
    //     0x1254598: stur            x1, [fp, #-0x18]
    // 0x125459c: CheckStackOverflow
    //     0x125459c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x12545a0: cmp             SP, x16
    //     0x12545a4: b.ls            #0x1254704
    // 0x12545a8: r0 = LoadStaticField(0xb54)
    //     0x12545a8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x12545ac: ldr             x0, [x0, #0x16a8]
    // 0x12545b0: cmp             w0, NULL
    // 0x12545b4: b.ne            #0x12545c8
    // 0x12545b8: r0 = false
    //     0x12545b8: add             x0, NULL, #0x30  ; false
    // 0x12545bc: LeaveFrame
    //     0x12545bc: mov             SP, fp
    //     0x12545c0: ldp             fp, lr, [SP], #0x10
    // 0x12545c4: ret
    //     0x12545c4: ret             
    // 0x12545c8: LoadField: r0 = r3->field_b
    //     0x12545c8: ldur            w0, [x3, #0xb]
    // 0x12545cc: DecompressPointer r0
    //     0x12545cc: add             x0, x0, HEAP, lsl #32
    // 0x12545d0: r4 = LoadInt32Instr(r0)
    //     0x12545d0: sbfx            x4, x0, #1, #0x1f
    // 0x12545d4: stur            x4, [fp, #-0x10]
    // 0x12545d8: cmp             x4, #0
    // 0x12545dc: b.le            #0x12546d4
    // 0x12545e0: r2 = 0
    //     0x12545e0: movz            x2, #0
    // 0x12545e4: CheckStackOverflow
    //     0x12545e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x12545e8: cmp             SP, x16
    //     0x12545ec: b.ls            #0x125470c
    // 0x12545f0: LoadField: r0 = r3->field_b
    //     0x12545f0: ldur            w0, [x3, #0xb]
    // 0x12545f4: DecompressPointer r0
    //     0x12545f4: add             x0, x0, HEAP, lsl #32
    // 0x12545f8: r1 = LoadInt32Instr(r0)
    //     0x12545f8: sbfx            x1, x0, #1, #0x1f
    // 0x12545fc: cmp             x4, x1
    // 0x1254600: b.ne            #0x12546e4
    // 0x1254604: cmp             x2, x1
    // 0x1254608: b.ge            #0x12546d4
    // 0x125460c: mov             x0, x1
    // 0x1254610: mov             x1, x2
    // 0x1254614: cmp             x1, x0
    // 0x1254618: b.hs            #0x1254714
    // 0x125461c: LoadField: r0 = r3->field_f
    //     0x125461c: ldur            w0, [x3, #0xf]
    // 0x1254620: DecompressPointer r0
    //     0x1254620: add             x0, x0, HEAP, lsl #32
    // 0x1254624: ArrayLoad: r1 = r0[r2]  ; Unknown_4
    //     0x1254624: add             x16, x0, x2, lsl #2
    //     0x1254628: ldur            w1, [x16, #0xf]
    // 0x125462c: DecompressPointer r1
    //     0x125462c: add             x1, x1, HEAP, lsl #32
    // 0x1254630: add             x5, x2, #1
    // 0x1254634: stur            x5, [fp, #-8]
    // 0x1254638: r0 = LoadStaticField(0xb54)
    //     0x1254638: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x125463c: ldr             x0, [x0, #0x16a8]
    // 0x1254640: cmp             w0, NULL
    // 0x1254644: b.ne            #0x1254650
    // 0x1254648: r0 = Null
    //     0x1254648: mov             x0, NULL
    // 0x125464c: b               #0x125467c
    // 0x1254650: r17 = 327
    //     0x1254650: movz            x17, #0x147
    // 0x1254654: ldr             w2, [x0, x17]
    // 0x1254658: DecompressPointer r2
    //     0x1254658: add             x2, x2, HEAP, lsl #32
    // 0x125465c: r0 = LoadClassIdInstr(r2)
    //     0x125465c: ldur            x0, [x2, #-1]
    //     0x1254660: ubfx            x0, x0, #0xc, #0x14
    // 0x1254664: mov             x16, x1
    // 0x1254668: mov             x1, x2
    // 0x125466c: mov             x2, x16
    // 0x1254670: r0 = GDT[cid_x0 + -0xb4]()
    //     0x1254670: sub             lr, x0, #0xb4
    //     0x1254674: ldr             lr, [x21, lr, lsl #3]
    //     0x1254678: blr             lr
    // 0x125467c: cmp             w0, NULL
    // 0x1254680: b.ne            #0x1254688
    // 0x1254684: r0 = false
    //     0x1254684: add             x0, NULL, #0x30  ; false
    // 0x1254688: r1 = 59
    //     0x1254688: movz            x1, #0x3b
    // 0x125468c: branchIfSmi(r0, 0x1254698)
    //     0x125468c: tbz             w0, #0, #0x1254698
    // 0x1254690: r1 = LoadClassIdInstr(r0)
    //     0x1254690: ldur            x1, [x0, #-1]
    //     0x1254694: ubfx            x1, x1, #0xc, #0x14
    // 0x1254698: r16 = true
    //     0x1254698: add             x16, NULL, #0x20  ; true
    // 0x125469c: stp             x16, x0, [SP]
    // 0x12546a0: mov             x0, x1
    // 0x12546a4: mov             lr, x0
    // 0x12546a8: ldr             lr, [x21, lr, lsl #3]
    // 0x12546ac: blr             lr
    // 0x12546b0: tbnz            w0, #4, #0x12546c4
    // 0x12546b4: ldur            x2, [fp, #-8]
    // 0x12546b8: ldur            x3, [fp, #-0x18]
    // 0x12546bc: ldur            x4, [fp, #-0x10]
    // 0x12546c0: b               #0x12545e4
    // 0x12546c4: r0 = false
    //     0x12546c4: add             x0, NULL, #0x30  ; false
    // 0x12546c8: LeaveFrame
    //     0x12546c8: mov             SP, fp
    //     0x12546cc: ldp             fp, lr, [SP], #0x10
    // 0x12546d0: ret
    //     0x12546d0: ret             
    // 0x12546d4: r0 = true
    //     0x12546d4: add             x0, NULL, #0x20  ; true
    // 0x12546d8: LeaveFrame
    //     0x12546d8: mov             SP, fp
    //     0x12546dc: ldp             fp, lr, [SP], #0x10
    // 0x12546e0: ret
    //     0x12546e0: ret             
    // 0x12546e4: mov             x0, x3
    // 0x12546e8: r0 = ConcurrentModificationError()
    //     0x12546e8: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x12546ec: mov             x1, x0
    // 0x12546f0: ldur            x0, [fp, #-0x18]
    // 0x12546f4: StoreField: r1->field_b = r0
    //     0x12546f4: stur            w0, [x1, #0xb]
    // 0x12546f8: mov             x0, x1
    // 0x12546fc: r0 = Throw()
    //     0x12546fc: bl              #0x1500844  ; ThrowStub
    // 0x1254700: brk             #0
    // 0x1254704: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1254704: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254708: b               #0x12545a8
    // 0x125470c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x125470c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254710: b               #0x12545f0
    // 0x1254714: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x1254714: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
  static _ isKeyItemPassed(/* No info */) {
    // ** addr: 0x1254718, size: 0x190
    // 0x1254718: EnterFrame
    //     0x1254718: stp             fp, lr, [SP, #-0x10]!
    //     0x125471c: mov             fp, SP
    // 0x1254720: AllocStack(0x28)
    //     0x1254720: sub             SP, SP, #0x28
    // 0x1254724: SetupParameters(dynamic _ /* r1 => r3, fp-0x18 */)
    //     0x1254724: mov             x3, x1
    //     0x1254728: stur            x1, [fp, #-0x18]
    // 0x125472c: CheckStackOverflow
    //     0x125472c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254730: cmp             SP, x16
    //     0x1254734: b.ls            #0x1254894
    // 0x1254738: r0 = LoadStaticField(0xb54)
    //     0x1254738: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x125473c: ldr             x0, [x0, #0x16a8]
    // 0x1254740: cmp             w0, NULL
    // 0x1254744: b.ne            #0x1254758
    // 0x1254748: r0 = false
    //     0x1254748: add             x0, NULL, #0x30  ; false
    // 0x125474c: LeaveFrame
    //     0x125474c: mov             SP, fp
    //     0x1254750: ldp             fp, lr, [SP], #0x10
    // 0x1254754: ret
    //     0x1254754: ret             
    // 0x1254758: LoadField: r0 = r3->field_b
    //     0x1254758: ldur            w0, [x3, #0xb]
    // 0x125475c: DecompressPointer r0
    //     0x125475c: add             x0, x0, HEAP, lsl #32
    // 0x1254760: r4 = LoadInt32Instr(r0)
    //     0x1254760: sbfx            x4, x0, #1, #0x1f
    // 0x1254764: stur            x4, [fp, #-0x10]
    // 0x1254768: cmp             x4, #0
    // 0x125476c: b.le            #0x1254864
    // 0x1254770: r2 = 0
    //     0x1254770: movz            x2, #0
    // 0x1254774: CheckStackOverflow
    //     0x1254774: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x1254778: cmp             SP, x16
    //     0x125477c: b.ls            #0x125489c
    // 0x1254780: LoadField: r0 = r3->field_b
    //     0x1254780: ldur            w0, [x3, #0xb]
    // 0x1254784: DecompressPointer r0
    //     0x1254784: add             x0, x0, HEAP, lsl #32
    // 0x1254788: r1 = LoadInt32Instr(r0)
    //     0x1254788: sbfx            x1, x0, #1, #0x1f
    // 0x125478c: cmp             x4, x1
    // 0x1254790: b.ne            #0x1254874
    // 0x1254794: cmp             x2, x1
    // 0x1254798: b.ge            #0x1254864
    // 0x125479c: mov             x0, x1
    // 0x12547a0: mov             x1, x2
    // 0x12547a4: cmp             x1, x0
    // 0x12547a8: b.hs            #0x12548a4
    // 0x12547ac: LoadField: r0 = r3->field_f
    //     0x12547ac: ldur            w0, [x3, #0xf]
    // 0x12547b0: DecompressPointer r0
    //     0x12547b0: add             x0, x0, HEAP, lsl #32
    // 0x12547b4: ArrayLoad: r1 = r0[r2]  ; Unknown_4
    //     0x12547b4: add             x16, x0, x2, lsl #2
    //     0x12547b8: ldur            w1, [x16, #0xf]
    // 0x12547bc: DecompressPointer r1
    //     0x12547bc: add             x1, x1, HEAP, lsl #32
    // 0x12547c0: add             x5, x2, #1
    // 0x12547c4: stur            x5, [fp, #-8]
    // 0x12547c8: r0 = LoadStaticField(0xb54)
    //     0x12547c8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x12547cc: ldr             x0, [x0, #0x16a8]
    // 0x12547d0: cmp             w0, NULL
    // 0x12547d4: b.ne            #0x12547e0
    // 0x12547d8: r0 = Null
    //     0x12547d8: mov             x0, NULL
    // 0x12547dc: b               #0x125480c
    // 0x12547e0: r17 = 335
    //     0x12547e0: movz            x17, #0x14f
    // 0x12547e4: ldr             w2, [x0, x17]
    // 0x12547e8: DecompressPointer r2
    //     0x12547e8: add             x2, x2, HEAP, lsl #32
    // 0x12547ec: r0 = LoadClassIdInstr(r2)
    //     0x12547ec: ldur            x0, [x2, #-1]
    //     0x12547f0: ubfx            x0, x0, #0xc, #0x14
    // 0x12547f4: mov             x16, x1
    // 0x12547f8: mov             x1, x2
    // 0x12547fc: mov             x2, x16
    // 0x1254800: r0 = GDT[cid_x0 + -0xb4]()
    //     0x1254800: sub             lr, x0, #0xb4
    //     0x1254804: ldr             lr, [x21, lr, lsl #3]
    //     0x1254808: blr             lr
    // 0x125480c: cmp             w0, NULL
    // 0x1254810: b.ne            #0x1254818
    // 0x1254814: r0 = false
    //     0x1254814: add             x0, NULL, #0x30  ; false
    // 0x1254818: r1 = 59
    //     0x1254818: movz            x1, #0x3b
    // 0x125481c: branchIfSmi(r0, 0x1254828)
    //     0x125481c: tbz             w0, #0, #0x1254828
    // 0x1254820: r1 = LoadClassIdInstr(r0)
    //     0x1254820: ldur            x1, [x0, #-1]
    //     0x1254824: ubfx            x1, x1, #0xc, #0x14
    // 0x1254828: r16 = true
    //     0x1254828: add             x16, NULL, #0x20  ; true
    // 0x125482c: stp             x16, x0, [SP]
    // 0x1254830: mov             x0, x1
    // 0x1254834: mov             lr, x0
    // 0x1254838: ldr             lr, [x21, lr, lsl #3]
    // 0x125483c: blr             lr
    // 0x1254840: tbnz            w0, #4, #0x1254854
    // 0x1254844: ldur            x2, [fp, #-8]
    // 0x1254848: ldur            x3, [fp, #-0x18]
    // 0x125484c: ldur            x4, [fp, #-0x10]
    // 0x1254850: b               #0x1254774
    // 0x1254854: r0 = false
    //     0x1254854: add             x0, NULL, #0x30  ; false
    // 0x1254858: LeaveFrame
    //     0x1254858: mov             SP, fp
    //     0x125485c: ldp             fp, lr, [SP], #0x10
    // 0x1254860: ret
    //     0x1254860: ret             
    // 0x1254864: r0 = true
    //     0x1254864: add             x0, NULL, #0x20  ; true
    // 0x1254868: LeaveFrame
    //     0x1254868: mov             SP, fp
    //     0x125486c: ldp             fp, lr, [SP], #0x10
    // 0x1254870: ret
    //     0x1254870: ret             
    // 0x1254874: mov             x0, x3
    // 0x1254878: r0 = ConcurrentModificationError()
    //     0x1254878: bl              #0x7b75bc  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x125487c: mov             x1, x0
    // 0x1254880: ldur            x0, [fp, #-0x18]
    // 0x1254884: StoreField: r1->field_b = r0
    //     0x1254884: stur            w0, [x1, #0xb]
    // 0x1254888: mov             x0, x1
    // 0x125488c: r0 = Throw()
    //     0x125488c: bl              #0x1500844  ; ThrowStub
    // 0x1254890: brk             #0
    // 0x1254894: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x1254894: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x1254898: b               #0x1254738
    // 0x125489c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x125489c: bl              #0x1502668  ; StackOverflowSharedWithoutFPURegsStub
    // 0x12548a0: b               #0x1254780
    // 0x12548a4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x12548a4: bl              #0x1502ab0  ; RangeErrorSharedWithoutFPURegsStub
  }
}
